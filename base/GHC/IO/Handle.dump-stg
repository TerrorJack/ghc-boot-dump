
==================== Pre unarise: ====================
2018-03-16 16:06:15.999491009 UTC

GHC.IO.Handle.$w$c== [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.HandlePosition
     -> GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.HandlePosition
     -> GHC.Types.Bool
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*U><S,1*U><L,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_sbnXv ww1_sbnXw ww2_sbnXx ww3_sbnXy]
        case GHC.Integer.Type.eqInteger# ww1_sbnXw ww3_sbnXy of {
          __DEFAULT -> GHC.Types.False [];
          1# -> GHC.IO.Handle.Types.$fEqHandle_$c== ww_sbnXv ww2_sbnXx;
        };

GHC.IO.Handle.$fEqHandlePosn_$c== [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.HandlePosn
     -> GHC.IO.Handle.HandlePosn -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(LS),1*U(1*U,1*U)><S(LS),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [w_sbnXA w1_sbnXB]
        case w_sbnXA of {
          GHC.IO.Handle.HandlePosn ww1_sbnXD [Occ=Once]
                                   ww2_sbnXE [Occ=Once] ->
              case w1_sbnXB of {
                GHC.IO.Handle.HandlePosn ww4_sbnXG [Occ=Once]
                                         ww5_sbnXH [Occ=Once] ->
                    GHC.IO.Handle.$w$c== ww1_sbnXD ww2_sbnXE ww4_sbnXG ww5_sbnXH;
              };
        };

GHC.IO.Handle.$fEqHandlePosn_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.IO.Handle.HandlePosn
     -> GHC.IO.Handle.HandlePosn -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(LS),1*U(1*U,1*U)><S(LS),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [eta_sbnXI eta1_sbnXJ]
        case eta_sbnXI of {
          GHC.IO.Handle.HandlePosn h1_sbnXL [Occ=Once!]
                                   p1_sbnXM [Occ=Once] ->
              case eta1_sbnXJ of {
                GHC.IO.Handle.HandlePosn h2_sbnXO [Occ=Once*!]
                                         p2_sbnXP [Occ=Once] ->
                    case GHC.Integer.Type.eqInteger# p1_sbnXM p2_sbnXP of {
                      __DEFAULT -> GHC.Types.True [];
                      1# ->
                          case h1_sbnXL of {
                            GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbnXT [Occ=Once] ->
                                case h2_sbnXO of {
                                  GHC.IO.Handle.Types.FileHandle _ [Occ=Dead]
                                                                 dt1_sbnXW [Occ=Once] ->
                                      case sameMVar# [dt_sbnXT dt1_sbnXW] of {
                                        __DEFAULT -> GHC.Types.True [];
                                        1# -> GHC.Types.False [];
                                      };
                                  GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                                   _ [Occ=Dead]
                                                                   _ [Occ=Dead] ->
                                      GHC.Types.True [];
                                };
                            GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                             dt_sbnY2 [Occ=Once]
                                                             _ [Occ=Dead] ->
                                case h2_sbnXO of {
                                  GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] _ [Occ=Dead] ->
                                      GHC.Types.True [];
                                  GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                                   dt2_sbnY8 [Occ=Once]
                                                                   _ [Occ=Dead] ->
                                      case sameMVar# [dt_sbnY2 dt2_sbnY8] of {
                                        __DEFAULT -> GHC.Types.True [];
                                        1# -> GHC.Types.False [];
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.$fEqHandlePosn [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.IO.Handle.HandlePosn
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.IO.Handle.$fEqHandlePosn_$c==
                                     GHC.IO.Handle.$fEqHandlePosn_$c/=];

GHC.IO.Handle.$fShowHandlePosn2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    " at position "#;

GHC.IO.Handle.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.HandlePosition
     -> GHC.Base.String
     -> GHC.Base.String
[GblId, Arity=3, Str=<S,1*U><L,U><L,U>, Unf=OtherCon []] =
    [] \r [ww_sbnYb ww1_sbnYc w_sbnYd]
        case ww_sbnYb of {
          GHC.IO.Handle.Types.FileHandle file_sbnYf [Occ=Once]
                                         _ [Occ=Dead] ->
              let {
                sat_sbnYn [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [ww1_sbnYc w_sbnYd file_sbnYf] \u []
                        let {
                          sat_sbnYm [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                          [LclId] =
                              [ww1_sbnYc w_sbnYd] \s []
                                  let {
                                    sat_sbnYl [Occ=Once] :: [GHC.Types.Char]
                                    [LclId] =
                                        [ww1_sbnYc w_sbnYd] \u []
                                            let {
                                              sat_sbnYk [Occ=Once] :: [GHC.Types.Char]
                                              [LclId] =
                                                  [ww1_sbnYc w_sbnYd] \u []
                                                      case
                                                          GHC.Show.$w$cshowsPrec4
                                                              0# ww1_sbnYc w_sbnYd
                                                      of
                                                      { (#,#) ww3_sbnYi [Occ=Once]
                                                              ww4_sbnYj [Occ=Once] ->
                                                            : [ww3_sbnYi ww4_sbnYj];
                                                      };
                                            } in 
                                              GHC.CString.unpackAppendCString#
                                                  GHC.IO.Handle.$fShowHandlePosn2 sat_sbnYk;
                                  } in 
                                    GHC.CString.unpackAppendCString#
                                        GHC.IO.Handle.Types.$fReadNewlineMode5 sat_sbnYl;
                        } in  GHC.Base.++ file_sbnYf sat_sbnYm;
              } in 
                GHC.CString.unpackAppendCString#
                    GHC.IO.Handle.Types.showHandle1 sat_sbnYn;
          GHC.IO.Handle.Types.DuplexHandle file_sbnYo [Occ=Once]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              let {
                sat_sbnYx [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [ww1_sbnYc w_sbnYd file_sbnYo] \u []
                        let {
                          sat_sbnYw [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                          [LclId] =
                              [ww1_sbnYc w_sbnYd] \s []
                                  let {
                                    sat_sbnYv [Occ=Once] :: [GHC.Types.Char]
                                    [LclId] =
                                        [ww1_sbnYc w_sbnYd] \u []
                                            let {
                                              sat_sbnYu [Occ=Once] :: [GHC.Types.Char]
                                              [LclId] =
                                                  [ww1_sbnYc w_sbnYd] \u []
                                                      case
                                                          GHC.Show.$w$cshowsPrec4
                                                              0# ww1_sbnYc w_sbnYd
                                                      of
                                                      { (#,#) ww3_sbnYs [Occ=Once]
                                                              ww4_sbnYt [Occ=Once] ->
                                                            : [ww3_sbnYs ww4_sbnYt];
                                                      };
                                            } in 
                                              GHC.CString.unpackAppendCString#
                                                  GHC.IO.Handle.$fShowHandlePosn2 sat_sbnYu;
                                  } in 
                                    GHC.CString.unpackAppendCString#
                                        GHC.IO.Handle.Types.$fReadNewlineMode5 sat_sbnYv;
                        } in  GHC.Base.++ file_sbnYo sat_sbnYw;
              } in 
                GHC.CString.unpackAppendCString#
                    GHC.IO.Handle.Types.showHandle1 sat_sbnYx;
        };

GHC.IO.Handle.$fShowHandlePosn_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.IO.Handle.HandlePosn -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,A><S(SL),1*U(1*U,U)><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sbnYy w1_sbnYz w2_sbnYA]
        case w1_sbnYz of {
          GHC.IO.Handle.HandlePosn ww1_sbnYC [Occ=Once]
                                   ww2_sbnYD [Occ=Once] ->
              GHC.IO.Handle.$w$cshowsPrec ww1_sbnYC ww2_sbnYD w2_sbnYA;
        };

GHC.IO.Handle.$fShowHandlePosn3 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.IO.Handle.$fShowHandlePosn_$cshow
  :: GHC.IO.Handle.HandlePosn -> GHC.Base.String
[GblId, Arity=1, Str=<S(SL),1*U(1*U,U)>, Unf=OtherCon []] =
    [] \r [x_sbnYE]
        case x_sbnYE of {
          GHC.IO.Handle.HandlePosn ww1_sbnYG [Occ=Once]
                                   ww2_sbnYH [Occ=Once] ->
              GHC.IO.Handle.$w$cshowsPrec ww1_sbnYG ww2_sbnYH GHC.Types.[];
        };

GHC.IO.Handle.$fShowHandlePosn1
  :: GHC.IO.Handle.HandlePosn -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S(SL),1*U(1*U,U)><L,U>, Unf=OtherCon []] =
    [] \r [w_sbnYI w1_sbnYJ]
        case w_sbnYI of {
          GHC.IO.Handle.HandlePosn ww1_sbnYL [Occ=Once]
                                   ww2_sbnYM [Occ=Once] ->
              GHC.IO.Handle.$w$cshowsPrec ww1_sbnYL ww2_sbnYM w1_sbnYJ;
        };

GHC.IO.Handle.$fShowHandlePosn_$cshowList
  :: [GHC.IO.Handle.HandlePosn] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sbnYN s_sbnYO]
        GHC.Show.showList__
            GHC.IO.Handle.$fShowHandlePosn1 ls_sbnYN s_sbnYO;

GHC.IO.Handle.$fShowHandlePosn [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Handle.HandlePosn
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Handle.$fShowHandlePosn_$cshowsPrec
                                    GHC.IO.Handle.$fShowHandlePosn_$cshow
                                    GHC.IO.Handle.$fShowHandlePosn_$cshowList];

GHC.IO.Handle.hLookAhead3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hLookAhead"#;

GHC.IO.Handle.hLookAhead2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hLookAhead3;

GHC.IO.Handle.hLookAhead1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Char #)
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [handle_sbnYP eta_B1]
        GHC.IO.Handle.Internals.wantReadableHandle_1
            GHC.IO.Handle.hLookAhead2
            handle_sbnYP
            GHC.IO.Handle.Internals.hLookAhead_1
            eta_B1;

GHC.IO.Handle.hLookAhead
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Char
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hLookAhead1 eta_B2 eta_B1;

GHC.IO.Handle.hFlush3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hFlush"#;

GHC.IO.Handle.hFlush2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hFlush3;

GHC.IO.Handle.hFlush1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [handle_sbnYQ eta_B1]
        GHC.IO.Handle.Internals.wantWritableHandle1
            GHC.IO.Handle.hFlush2
            handle_sbnYQ
            GHC.IO.Handle.Internals.flushWriteBuffer1
            eta_B1;

GHC.IO.Handle.hFlush
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hFlush1 eta_B2 eta_B1;

GHC.IO.Handle.hFlushAll4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hFlushAll"#;

GHC.IO.Handle.hFlushAll3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hFlushAll4;

GHC.IO.Handle.hFlushAll2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, ()) #)
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [h__sbnYR s1_sbnYS]
        case GHC.IO.Handle.Internals.flushBuffer1 h__sbnYR s1_sbnYS of {
          (#,#) ipv_sbnYU [Occ=Once] ipv1_sbnYV [Occ=Once] ->
              let {
                sat_sbnYW [Occ=Once] :: (GHC.IO.Handle.Types.Handle__, ())
                [LclId] =
                    CCCS (,)! [h__sbnYR ipv1_sbnYV];
              } in  (#,#) [ipv_sbnYU sat_sbnYW];
        };

GHC.IO.Handle.hFlushAll1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbnYX eta_sbnYY]
        case handle_sbnYX of wild_sbnYZ {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbnZ1 ->
              case getMaskingState# [eta_sbnYY] of {
                (#,#) ipv_sbnZ3 [Occ=Once*] ipv1_sbnZ4 [Occ=Once!] ->
                    let {
                      io_sbnZ5 [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbnYZ dt_sbnZ1] \r [s_sbnZ6]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hFlushAll3
                                      wild_sbnYZ
                                      GHC.IO.Handle.hFlushAll2
                                      dt_sbnZ1
                                      s_sbnZ6
                              of
                              { (#,#) ipv2_sbnZ8 [Occ=Once] ipv3_sbnZ9 [Occ=Once!] ->
                                    case ipv3_sbnZ9 of {
                                      (,) h'_sbnZb [Occ=Once] v_sbnZc [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbnZ1 h'_sbnZb ipv2_sbnZ8]
                                          of
                                          s2#_sbnZd
                                          { __DEFAULT -> (#,#) [s2#_sbnZd v_sbnZc];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbnZ4 of {
                        __DEFAULT -> io_sbnZ5 ipv_sbnZ3;
                        0# -> maskAsyncExceptions# [io_sbnZ5 ipv_sbnZ3];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sbnZg
                                           _ [Occ=Dead] ->
              case getMaskingState# [eta_sbnYY] of {
                (#,#) ipv_sbnZj [Occ=Once*] ipv1_sbnZk [Occ=Once!] ->
                    let {
                      io_sbnZl [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbnYZ dt_sbnZg] \r [s_sbnZm]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hFlushAll3
                                      wild_sbnYZ
                                      GHC.IO.Handle.hFlushAll2
                                      dt_sbnZg
                                      s_sbnZm
                              of
                              { (#,#) ipv2_sbnZo [Occ=Once] ipv3_sbnZp [Occ=Once!] ->
                                    case ipv3_sbnZp of {
                                      (,) h'_sbnZr [Occ=Once] v_sbnZs [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbnZg h'_sbnZr ipv2_sbnZo]
                                          of
                                          s2#_sbnZt
                                          { __DEFAULT -> (#,#) [s2#_sbnZt v_sbnZs];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbnZk of {
                        __DEFAULT -> io_sbnZl ipv_sbnZj;
                        0# -> maskAsyncExceptions# [io_sbnZl ipv_sbnZj];
                      };
              };
        };

GHC.IO.Handle.hFlushAll
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO ()
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hFlushAll1 eta_B2 eta_B1;

GHC.IO.Handle.hGetEcho7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hIsTerminalDevice"#;

GHC.IO.Handle.hGetEcho_fun :: GHC.Base.String
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hGetEcho7;

GHC.IO.Handle.hGetEcho6
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool) #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h__sbnZv s1_sbnZw]
        case h__sbnZv of wild_sbnZx {
          GHC.IO.Handle.Types.Handle__ $dIODevice_sbnZy [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds_sbnZB [Occ=Once]
                                       ds1_sbnZC [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds1_sbnZC of {
                __DEFAULT ->
                    case
                        GHC.IO.Device.isTerminal $dIODevice_sbnZy ds_sbnZB s1_sbnZw
                    of
                    { (#,#) ipv_sbnZQ [Occ=Once] ipv1_sbnZR [Occ=Once] ->
                          let {
                            sat_sbnZS [Occ=Once]
                              :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                            [LclId] =
                                CCCS (,)! [wild_sbnZx ipv1_sbnZR];
                          } in  (#,#) [ipv_sbnZQ sat_sbnZS];
                    };
                GHC.IO.Handle.Types.ClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_closedHandle1 s1_sbnZw;
              };
        };

GHC.IO.Handle.hGetEcho5
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbnZU eta_sbnZV]
        case handle_sbnZU of wild_sbnZW {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbnZY ->
              case getMaskingState# [eta_sbnZV] of {
                (#,#) ipv_sbo00 [Occ=Once*] ipv1_sbo01 [Occ=Once!] ->
                    let {
                      io_sbo02 [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbnZW dt_sbnZY] \r [s_sbo03]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hGetEcho_fun
                                      wild_sbnZW
                                      GHC.IO.Handle.hGetEcho6
                                      dt_sbnZY
                                      s_sbo03
                              of
                              { (#,#) ipv2_sbo05 [Occ=Once] ipv3_sbo06 [Occ=Once!] ->
                                    case ipv3_sbo06 of {
                                      (,) h'_sbo08 [Occ=Once] v_sbo09 [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbnZY h'_sbo08 ipv2_sbo05]
                                          of
                                          s2#_sbo0a
                                          { __DEFAULT -> (#,#) [s2#_sbo0a v_sbo09];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbo01 of {
                        __DEFAULT -> io_sbo02 ipv_sbo00;
                        0# -> maskAsyncExceptions# [io_sbo02 ipv_sbo00];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sbo0d
                                           _ [Occ=Dead] ->
              case getMaskingState# [eta_sbnZV] of {
                (#,#) ipv_sbo0g [Occ=Once*] ipv1_sbo0h [Occ=Once!] ->
                    let {
                      io_sbo0i [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbnZW dt_sbo0d] \r [s_sbo0j]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hGetEcho_fun
                                      wild_sbnZW
                                      GHC.IO.Handle.hGetEcho6
                                      dt_sbo0d
                                      s_sbo0j
                              of
                              { (#,#) ipv2_sbo0l [Occ=Once] ipv3_sbo0m [Occ=Once!] ->
                                    case ipv3_sbo0m of {
                                      (,) h'_sbo0o [Occ=Once] v_sbo0p [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbo0d h'_sbo0o ipv2_sbo0l]
                                          of
                                          s2#_sbo0q
                                          { __DEFAULT -> (#,#) [s2#_sbo0q v_sbo0p];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbo0h of {
                        __DEFAULT -> io_sbo0i ipv_sbo0g;
                        0# -> maskAsyncExceptions# [io_sbo0i ipv_sbo0g];
                      };
              };
        };

GHC.IO.Handle.hIsTerminalDevice
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hGetEcho5 eta_B2 eta_B1;

lvl_rbnWB :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hDuplicateTo"#;

lvl1_rbnWC :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl_rbnWB;

lvl2_rbnWD :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "handles are incompatible"#;

lvl3_rbnWE :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl2_rbnWD;

ioe_dupHandlesNotCompatible_rbnWF
  :: forall a.
     GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [h_sbo0s eta_sbo0t]
        let {
          sat_sbo0w [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [h_sbo0s] \u []
                  let {
                    sat_sbo0u [Occ=Once] :: GHC.Base.Maybe GHC.IO.Handle.Types.Handle
                    [LclId] =
                        CCCS GHC.Base.Just! [h_sbo0s]; } in
                  let {
                    sat_sbo0v [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        CCCS GHC.IO.Exception.IOError! [sat_sbo0u
                                                        GHC.IO.Exception.IllegalOperation
                                                        lvl1_rbnWC
                                                        lvl3_rbnWE
                                                        GHC.Base.Nothing
                                                        GHC.Base.Nothing];
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sbo0v;
        } in  raiseIO# [sat_sbo0w eta_sbo0t];

GHC.IO.Handle.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.Handle.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.$trModule4];

GHC.IO.Handle.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Handle"#;

GHC.IO.Handle.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.$trModule2];

GHC.IO.Handle.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Handle.$trModule3
                                     GHC.IO.Handle.$trModule1];

$krep_rbnWG :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Integer.Type.$tcInteger
                                              GHC.Types.[]];

$krep1_rbnWH :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcHandle
                                              GHC.Types.[]];

GHC.IO.Handle.$tcHandlePosn2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "HandlePosn"#;

GHC.IO.Handle.$tcHandlePosn1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.$tcHandlePosn2];

GHC.IO.Handle.$tcHandlePosn :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [14603627022044816180##
                                    6047646306417636971##
                                    GHC.IO.Handle.$trModule
                                    GHC.IO.Handle.$tcHandlePosn1
                                    0#
                                    GHC.Types.krep$*];

$krep2_rbnWI :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.$tcHandlePosn
                                              GHC.Types.[]];

$krep3_rbnWJ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_rbnWG $krep2_rbnWI];

GHC.IO.Handle.$tc'HandlePosn1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_rbnWH $krep3_rbnWJ];

GHC.IO.Handle.$tc'HandlePosn3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'HandlePosn"#;

GHC.IO.Handle.$tc'HandlePosn2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.$tc'HandlePosn3];

GHC.IO.Handle.$tc'HandlePosn :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2346493220596692855##
                                    1604707260447826943##
                                    GHC.IO.Handle.$trModule
                                    GHC.IO.Handle.$tc'HandlePosn2
                                    0#
                                    GHC.IO.Handle.$tc'HandlePosn1];

dupHandle__rbnWK
  :: forall dev.
     (GHC.IO.Device.IODevice dev, GHC.IO.BufferedIO.BufferedIO dev,
      Data.Typeable.Internal.Typeable dev) =>
     dev
     -> GHC.IO.FilePath
     -> GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
     -> GHC.IO.Handle.Types.Handle__
     -> GHC.Base.Maybe GHC.IO.Handle.Internals.HandleFinalizer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId,
 Arity=9,
 Str=<L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U)><L,U><L,U><L,U><L,U><S,1*U><L,1*U><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [$dIODevice_sbo0x
                    $dBufferedIO_sbo0y
                    $dTypeable_sbo0z
                    new_dev_sbo0A
                    filepath_sbo0B
                    other_side_sbo0C
                    h__sbo0D
                    mb_finalizer_sbo0E
                    eta_sbo0F]
        case h__sbo0D of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds1_sbo0L [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds3_sbo0R [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds6_sbo0U [Occ=Once]
                                       ds7_sbo0V [Occ=Once]
                                       _ [Occ=Dead] ->
              let-no-escape {
                $j_sbo0X [Occ=Once*!T[2], Dmd=<L,1*C1(C1(U(U,U)))>]
                  :: GHC.Prim.State# GHC.Prim.RealWorld
                     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                           GHC.IO.Handle.Types.Handle #)
                [LclId[JoinId(2)], Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
                    sat-only [$dIODevice_sbo0x
                              $dBufferedIO_sbo0y
                              $dTypeable_sbo0z
                              new_dev_sbo0A
                              filepath_sbo0B
                              other_side_sbo0C
                              mb_finalizer_sbo0E
                              ds1_sbo0L
                              ds6_sbo0U
                              ds7_sbo0V] \r [ipv_sbo0Y ipv1_sbo0Z]
                        let {
                          sat_sbo10 [Occ=Once] :: GHC.IO.Handle.Types.NewlineMode
                          [LclId] =
                              CCCS GHC.IO.Handle.Types.NewlineMode! [ds6_sbo0U ds7_sbo0V];
                        } in 
                          GHC.IO.Handle.Internals.mkDuplexHandle5
                              $dIODevice_sbo0x
                              $dBufferedIO_sbo0y
                              $dTypeable_sbo0z
                              new_dev_sbo0A
                              filepath_sbo0B
                              ds1_sbo0L
                              GHC.Types.True
                              ipv1_sbo0Z
                              sat_sbo10
                              mb_finalizer_sbo0E
                              other_side_sbo0C
                              ipv_sbo0Y;
              } in 
                case ds3_sbo0R of {
                  GHC.Base.Nothing -> $j_sbo0X eta_sbo0F GHC.Base.Nothing;
                  GHC.Base.Just _ [Occ=Dead] ->
                      case GHC.IO.Encoding.getLocaleEncoding1 of {
                        (,) getLocaleEncoding3_sbo14 [Occ=Once] _ [Occ=Dead] ->
                            case getLocaleEncoding3_sbo14 eta_sbo0F of {
                              (#,#) ipv1_sbo17 [Occ=Once] ipv2_sbo18 [Occ=Once] ->
                                  let {
                                    sat_sbo19 [Occ=Once]
                                      :: GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
                                    [LclId] =
                                        CCCS GHC.Base.Just! [ipv2_sbo18];
                                  } in  $j_sbo0X ipv1_sbo17 sat_sbo19;
                            };
                      };
                };
        };

lvl4_rbnWL :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Pattern match failure in do expression at GHC/IO/Handle.hs:713:7-20"#;

lvl5_rbnWM
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle__ #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_sbo1a]
        case GHC.CString.unpackCString# lvl4_rbnWL of sat_sbo1b {
          __DEFAULT -> GHC.IO.failIO1 sat_sbo1b eta_sbo1a;
        };

dupHandleTo_rbnWN
  :: GHC.IO.FilePath
     -> GHC.IO.Handle.Types.Handle
     -> GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
     -> GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Handle.Types.Handle__
     -> GHC.Base.Maybe GHC.IO.Handle.Internals.HandleFinalizer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle__ #)
[GblId,
 Arity=7,
 Str=<L,U><L,U><L,U><S,1*U><S,1*U><L,1*U><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [filepath_sbo1c
                    h_sbo1d
                    other_side_sbo1e
                    hto__sbo1f
                    h__sbo1g
                    mb_finalizer_sbo1h
                    eta_sbo1i]
        case hto__sbo1f of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       $dTypeable_sbo1m [Occ=Once]
                                       ds_sbo1n
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case h__sbo1g of wild1_sbo1A {
                GHC.IO.Handle.Types.Handle__ $dIODevice1_sbo1B
                                             $dBufferedIO1_sbo1C [Occ=Once]
                                             $dTypeable1_sbo1D
                                             ds9_sbo1E [Occ=Once]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead] ->
                    case
                        GHC.IO.Handle.Internals.flushBuffer1 wild1_sbo1A eta_sbo1i
                    of
                    { (#,#) ipv_sbo1S [Occ=Once*] _ [Occ=Dead] ->
                          case
                              Data.Typeable.Internal.sameTypeRep
                                  $dTypeable_sbo1m $dTypeable1_sbo1D
                          of
                          { GHC.Types.False ->
                                ioe_dupHandlesNotCompatible_rbnWF h_sbo1d ipv_sbo1S;
                            GHC.Types.True ->
                                case
                                    GHC.IO.Device.dup2
                                        $dIODevice1_sbo1B ds9_sbo1E ds_sbo1n ipv_sbo1S
                                of
                                { (#,#) ipv2_sbo1W [Occ=Once] _ [Occ=Dead] ->
                                      case
                                          dupHandle__rbnWK
                                              $dIODevice1_sbo1B
                                              $dBufferedIO1_sbo1C
                                              $dTypeable1_sbo1D
                                              ds_sbo1n
                                              filepath_sbo1c
                                              other_side_sbo1e
                                              wild1_sbo1A
                                              mb_finalizer_sbo1h
                                              ipv2_sbo1W
                                      of
                                      { (#,#) ipv4_sbo1Z [Occ=Once*] ipv5_sbo20 [Occ=Once!] ->
                                            case ipv5_sbo20 of {
                                              GHC.IO.Handle.Types.FileHandle _ [Occ=Dead]
                                                                             dt8_sbo23 [Occ=Once] ->
                                                  takeMVar# [dt8_sbo23 ipv4_sbo1Z];
                                              GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                                               _ [Occ=Dead]
                                                                               _ [Occ=Dead] ->
                                                  lvl5_rbnWM ipv4_sbo1Z;
                                            };
                                      };
                                };
                          };
                    };
              };
        };

lvl6_rbnWO :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "dupHandle"#;

lvl7_rbnWP :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl6_rbnWO;

GHC.IO.Handle.hSetNewlineMode3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hSetNewlineMode"#;

GHC.IO.Handle.hSetNewlineMode2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hSetNewlineMode3;

GHC.IO.Handle.$whSetNewlineMode [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=4, Str=<S,1*U><L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [w_sbo27 ww_sbo28 ww1_sbo29 w1_sbo2a]
        let {
          sat_sbo2y [Occ=Once]
            :: GHC.IO.Handle.Types.Handle__
               -> GHC.Types.IO GHC.IO.Handle.Types.Handle__
          [LclId] =
              [ww_sbo28 ww1_sbo29] \r [h__sbo2b eta_sbo2c]
                  case h__sbo2b of wild_sbo2d {
                    GHC.IO.Handle.Types.Handle__ $dIODevice_sbo2e [Occ=Once]
                                                 $dBufferedIO_sbo2f [Occ=Once]
                                                 $dTypeable_sbo2g [Occ=Once]
                                                 ds_sbo2h [Occ=Once]
                                                 ds1_sbo2i [Occ=Once]
                                                 dt_sbo2j [Occ=Once]
                                                 ds2_sbo2k [Occ=Once]
                                                 dt1_sbo2l [Occ=Once]
                                                 dt2_sbo2m [Occ=Once]
                                                 dt3_sbo2n [Occ=Once]
                                                 ds3_sbo2o [Occ=Once]
                                                 ds4_sbo2p [Occ=Once]
                                                 ds5_sbo2q [Occ=Once]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 ds8_sbo2t [Occ=Once] ->
                        case GHC.IO.Handle.Internals.flushBuffer1 wild_sbo2d eta_sbo2c of {
                          (#,#) ipv_sbo2v [Occ=Once] _ [Occ=Dead] ->
                              let {
                                sat_sbo2x [Occ=Once] :: GHC.IO.Handle.Types.Handle__
                                [LclId] =
                                    CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbo2e
                                                                        $dBufferedIO_sbo2f
                                                                        $dTypeable_sbo2g
                                                                        ds_sbo2h
                                                                        ds1_sbo2i
                                                                        dt_sbo2j
                                                                        ds2_sbo2k
                                                                        dt1_sbo2l
                                                                        dt2_sbo2m
                                                                        dt3_sbo2n
                                                                        ds3_sbo2o
                                                                        ds4_sbo2p
                                                                        ds5_sbo2q
                                                                        ww_sbo28
                                                                        ww1_sbo29
                                                                        ds8_sbo2t];
                              } in  (#,#) [ipv_sbo2v sat_sbo2x];
                        };
                  };
        } in 
          GHC.IO.Handle.Internals.withAllHandles__1
              GHC.IO.Handle.hSetNewlineMode2 w_sbo27 sat_sbo2y w1_sbo2a;

GHC.IO.Handle.hSetNewlineMode1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Types.NewlineMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><S,1*U(U,U)><S,U>, Unf=OtherCon []] =
    [] \r [w_sbo2z w1_sbo2A w2_sbo2B]
        case w1_sbo2A of {
          GHC.IO.Handle.Types.NewlineMode ww1_sbo2D [Occ=Once]
                                          ww2_sbo2E [Occ=Once] ->
              GHC.IO.Handle.$whSetNewlineMode
                  w_sbo2z ww1_sbo2D ww2_sbo2E w2_sbo2B;
        };

GHC.IO.Handle.hSetNewlineMode
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Types.NewlineMode -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,1*U><S,1*U(U,U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.hSetNewlineMode1 eta_B3 eta_B2 eta_B1;

lvl8_rbnWQ :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hSetBinaryMode"#;

lvl9_rbnWR :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl8_rbnWQ;

lvl10_rbnWS :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "codec_state"#;

lvl11_rbnWT :: forall ds. ds
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl10_rbnWS of sat_sbo2F {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sbo2F;
        };

GHC.IO.Handle.hSetBinaryMode1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Types.Bool
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbo2G bin_sbo2H eta_sbo2I]
        let {
          lvl48_sbo2J :: GHC.IO.Handle.Types.Newline
          [LclId] =
              [bin_sbo2H] \u []
                  case bin_sbo2H of { __DEFAULT -> GHC.IO.Handle.Types.LF []; }; } in
        let {
          sat_sbo6i [Occ=Once]
            :: GHC.IO.Handle.Types.Handle__
               -> GHC.Types.IO GHC.IO.Handle.Types.Handle__
          [LclId] =
              [bin_sbo2H lvl48_sbo2J] \r [h__sbo2L eta1_sbo2M]
                  case h__sbo2L of {
                    GHC.IO.Handle.Types.Handle__ $dIODevice_sbo2O [Occ=Once*]
                                                 $dBufferedIO_sbo2P [Occ=Once*]
                                                 $dTypeable_sbo2Q [Occ=Once*]
                                                 ds_sbo2R [Occ=Once*]
                                                 ds1_sbo2S
                                                 dt_sbo2T
                                                 ds2_sbo2U [Occ=Once*]
                                                 dt1_sbo2V [Occ=Once]
                                                 dt2_sbo2W
                                                 dt3_sbo2X [Occ=Once*]
                                                 ds3_sbo2Y [Occ=Once*!]
                                                 ds4_sbo2Z
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 ds8_sbo33 [Occ=Once*] ->
                        case readMutVar# [dt2_sbo2W eta1_sbo2M] of {
                          (#,#) ipv_sbo35 [Occ=Once*] ipv1_sbo36 [Occ=Once!] ->
                              case ipv1_sbo36 of {
                                GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                     _ [Occ=Dead]
                                                     ds10_sbo3a [Occ=Once!]
                                                     _ [Occ=Dead]
                                                     dt7_sbo3c [Occ=Once]
                                                     dt8_sbo3d [Occ=Once] ->
                                    let-no-escape {
                                      $w$j_sbo3e [InlPrag=NOUSERINLINE[0],
                                                  Occ=Once*!T[1],
                                                  Dmd=<L,1*C1(U)>]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                 GHC.IO.Handle.Types.Handle__ #)
                                      [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                          sat-only [bin_sbo2H
                                                    lvl48_sbo2J
                                                    $dIODevice_sbo2O
                                                    $dBufferedIO_sbo2P
                                                    $dTypeable_sbo2Q
                                                    ds_sbo2R
                                                    ds1_sbo2S
                                                    dt_sbo2T
                                                    ds2_sbo2U
                                                    dt2_sbo2W
                                                    dt3_sbo2X
                                                    ds3_sbo2Y
                                                    ds4_sbo2Z
                                                    ds8_sbo33] \r [w_sbo3f]
                                              let-no-escape {
                                                $w$j1_sbo3g [InlPrag=NOUSERINLINE[0],
                                                             Occ=Once*!T[1],
                                                             Dmd=<L,1*C1(U)>]
                                                  :: GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.IO.Handle.Types.Handle__ #)
                                                [LclId[JoinId(1)],
                                                 Arity=1,
                                                 Str=<S,U>,
                                                 Unf=OtherCon []] =
                                                    sat-only [bin_sbo2H
                                                              lvl48_sbo2J
                                                              $dIODevice_sbo2O
                                                              $dBufferedIO_sbo2P
                                                              $dTypeable_sbo2Q
                                                              ds_sbo2R
                                                              ds1_sbo2S
                                                              dt_sbo2T
                                                              ds2_sbo2U
                                                              dt2_sbo2W
                                                              dt3_sbo2X
                                                              ds8_sbo33] \r [w1_sbo3h]
                                                        let-no-escape {
                                                          $j_sbo3i [Occ=Once*!T[2],
                                                                    Dmd=<L,1*C1(C1(U))>]
                                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> GHC.Base.Maybe
                                                                    GHC.IO.Encoding.Types.TextEncoding
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.IO.Handle.Types.Handle__ #)
                                                          [LclId[JoinId(2)],
                                                           Arity=2,
                                                           Str=<S,U><S,1*U>,
                                                           Unf=OtherCon []] =
                                                              sat-only [lvl48_sbo2J
                                                                        $dIODevice_sbo2O
                                                                        $dBufferedIO_sbo2P
                                                                        $dTypeable_sbo2Q
                                                                        ds_sbo2R
                                                                        ds1_sbo2S
                                                                        dt_sbo2T
                                                                        ds2_sbo2U
                                                                        dt2_sbo2W
                                                                        dt3_sbo2X
                                                                        ds8_sbo33] \r [ipv2_sbo3j
                                                                                       ipv3_sbo3k]
                                                                  case ipv3_sbo3k of wild2_sbo3l {
                                                                    GHC.Base.Nothing ->
                                                                        case
                                                                            readMutVar# [dt_sbo2T
                                                                                         ipv2_sbo3j]
                                                                        of
                                                                        { (#,#) ipv4_sbo3n [Occ=Once]
                                                                                ipv5_sbo3o [Occ=Once] ->
                                                                              let {
                                                                                sat_sbo3p [Occ=Once]
                                                                                  :: (GHC.Types.Any,
                                                                                      GHC.IO.Buffer.Buffer
                                                                                        GHC.Word.Word8)
                                                                                [LclId] =
                                                                                    CCCS (,)! [lvl11_rbnWT
                                                                                               ipv5_sbo3o];
                                                                              } in 
                                                                                case
                                                                                    newMutVar# [sat_sbo3p
                                                                                                ipv4_sbo3n]
                                                                                of
                                                                                { (#,#) ipv6_sbo3r [Occ=Once]
                                                                                        ipv7_sbo3s [Occ=Once] ->
                                                                                      let {
                                                                                        sat_sbo3t [Occ=Once]
                                                                                          :: GHC.IO.Handle.Types.Handle__
                                                                                        [LclId] =
                                                                                            CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbo2O
                                                                                                                                $dBufferedIO_sbo2P
                                                                                                                                $dTypeable_sbo2Q
                                                                                                                                ds_sbo2R
                                                                                                                                ds1_sbo2S
                                                                                                                                dt_sbo2T
                                                                                                                                ds2_sbo2U
                                                                                                                                ipv7_sbo3s
                                                                                                                                dt2_sbo2W
                                                                                                                                dt3_sbo2X
                                                                                                                                GHC.Base.Nothing
                                                                                                                                GHC.Base.Nothing
                                                                                                                                GHC.Base.Nothing
                                                                                                                                lvl48_sbo2J
                                                                                                                                lvl48_sbo2J
                                                                                                                                ds8_sbo33];
                                                                                      } in 
                                                                                        (#,#) [ipv6_sbo3r
                                                                                               sat_sbo3t];
                                                                                };
                                                                        };
                                                                    GHC.Base.Just ds12_sbo3u [Occ=Once!] ->
                                                                        case ds12_sbo3u of {
                                                                          GHC.IO.Encoding.Types.TextEncoding _ [Occ=Dead]
                                                                                                             ds14_sbo3x [Occ=Once*]
                                                                                                             ds15_sbo3y [Occ=Once*] ->
                                                                              let-no-escape {
                                                                                $j1_sbo3z [Occ=Once*!T[2],
                                                                                           Dmd=<L,1*C1(C1(U))>]
                                                                                  :: GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                     -> GHC.Base.Maybe
                                                                                          (GHC.IO.Encoding.Types.TextDecoder
                                                                                             dstate_ibkNi)
                                                                                     -> (# GHC.Prim.State#
                                                                                             GHC.Prim.RealWorld,
                                                                                           GHC.IO.Handle.Types.Handle__ #)
                                                                                [LclId[JoinId(2)],
                                                                                 Arity=2,
                                                                                 Str=<S,U><L,U>,
                                                                                 Unf=OtherCon []] =
                                                                                    sat-only [lvl48_sbo2J
                                                                                              $dIODevice_sbo2O
                                                                                              $dBufferedIO_sbo2P
                                                                                              $dTypeable_sbo2Q
                                                                                              ds_sbo2R
                                                                                              ds1_sbo2S
                                                                                              dt_sbo2T
                                                                                              ds2_sbo2U
                                                                                              dt2_sbo2W
                                                                                              dt3_sbo2X
                                                                                              ds8_sbo33
                                                                                              wild2_sbo3l
                                                                                              ds15_sbo3y] \r [ipv4_sbo3A
                                                                                                              ipv5_sbo3B]
                                                                                        case
                                                                                            ds1_sbo2S
                                                                                        of
                                                                                        wild4_sbo3C
                                                                                        { __DEFAULT ->
                                                                                              case
                                                                                                  readMutVar# [dt_sbo2T
                                                                                                               ipv4_sbo3A]
                                                                                              of
                                                                                              { (#,#) ipv6_sbo3E [Occ=Once]
                                                                                                      ipv7_sbo3F [Occ=Once] ->
                                                                                                    let {
                                                                                                      sat_sbo3G [Occ=Once]
                                                                                                        :: (dstate_ibkNi,
                                                                                                            GHC.IO.Buffer.Buffer
                                                                                                              GHC.Word.Word8)
                                                                                                      [LclId] =
                                                                                                          CCCS (,)! [lvl11_rbnWT
                                                                                                                     ipv7_sbo3F];
                                                                                                    } in 
                                                                                                      case
                                                                                                          newMutVar# [sat_sbo3G
                                                                                                                      ipv6_sbo3E]
                                                                                                      of
                                                                                                      { (#,#) ipv8_sbo3I [Occ=Once]
                                                                                                              ipv9_sbo3J [Occ=Once] ->
                                                                                                            let {
                                                                                                              sat_sbo3K [Occ=Once]
                                                                                                                :: GHC.IO.Handle.Types.Handle__
                                                                                                              [LclId] =
                                                                                                                  CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbo2O
                                                                                                                                                      $dBufferedIO_sbo2P
                                                                                                                                                      $dTypeable_sbo2Q
                                                                                                                                                      ds_sbo2R
                                                                                                                                                      wild4_sbo3C
                                                                                                                                                      dt_sbo2T
                                                                                                                                                      ds2_sbo2U
                                                                                                                                                      ipv9_sbo3J
                                                                                                                                                      dt2_sbo2W
                                                                                                                                                      dt3_sbo2X
                                                                                                                                                      GHC.Base.Nothing
                                                                                                                                                      ipv5_sbo3B
                                                                                                                                                      wild2_sbo3l
                                                                                                                                                      lvl48_sbo2J
                                                                                                                                                      lvl48_sbo2J
                                                                                                                                                      ds8_sbo33];
                                                                                                            } in 
                                                                                                              (#,#) [ipv8_sbo3I
                                                                                                                     sat_sbo3K];
                                                                                                      };
                                                                                              };
                                                                                          GHC.IO.Handle.Types.WriteHandle ->
                                                                                              case
                                                                                                  ds15_sbo3y
                                                                                                      ipv4_sbo3A
                                                                                              of
                                                                                              { (#,#) ipv6_sbo3M [Occ=Once]
                                                                                                      ipv7_sbo3N [Occ=Once] ->
                                                                                                    case
                                                                                                        readMutVar# [dt_sbo2T
                                                                                                                     ipv6_sbo3M]
                                                                                                    of
                                                                                                    { (#,#) ipv8_sbo3P [Occ=Once]
                                                                                                            ipv9_sbo3Q [Occ=Once] ->
                                                                                                          let {
                                                                                                            sat_sbo3R [Occ=Once]
                                                                                                              :: (dstate_ibkNi,
                                                                                                                  GHC.IO.Buffer.Buffer
                                                                                                                    GHC.Word.Word8)
                                                                                                            [LclId] =
                                                                                                                CCCS (,)! [lvl11_rbnWT
                                                                                                                           ipv9_sbo3Q];
                                                                                                          } in 
                                                                                                            case
                                                                                                                newMutVar# [sat_sbo3R
                                                                                                                            ipv8_sbo3P]
                                                                                                            of
                                                                                                            { (#,#) ipv10_sbo3T [Occ=Once]
                                                                                                                    ipv11_sbo3U [Occ=Once] ->
                                                                                                                  let {
                                                                                                                    sat_sbo3V [Occ=Once]
                                                                                                                      :: GHC.Base.Maybe
                                                                                                                           (GHC.IO.Encoding.Types.TextEncoder
                                                                                                                              estate_ibkNj)
                                                                                                                    [LclId] =
                                                                                                                        CCCS GHC.Base.Just! [ipv7_sbo3N]; } in
                                                                                                                  let {
                                                                                                                    sat_sbo3W [Occ=Once]
                                                                                                                      :: GHC.IO.Handle.Types.Handle__
                                                                                                                    [LclId] =
                                                                                                                        CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbo2O
                                                                                                                                                            $dBufferedIO_sbo2P
                                                                                                                                                            $dTypeable_sbo2Q
                                                                                                                                                            ds_sbo2R
                                                                                                                                                            GHC.IO.Handle.Types.WriteHandle
                                                                                                                                                            dt_sbo2T
                                                                                                                                                            ds2_sbo2U
                                                                                                                                                            ipv11_sbo3U
                                                                                                                                                            dt2_sbo2W
                                                                                                                                                            dt3_sbo2X
                                                                                                                                                            sat_sbo3V
                                                                                                                                                            ipv5_sbo3B
                                                                                                                                                            wild2_sbo3l
                                                                                                                                                            lvl48_sbo2J
                                                                                                                                                            lvl48_sbo2J
                                                                                                                                                            ds8_sbo33];
                                                                                                                  } in 
                                                                                                                    (#,#) [ipv10_sbo3T
                                                                                                                           sat_sbo3W];
                                                                                                            };
                                                                                                    };
                                                                                              };
                                                                                          GHC.IO.Handle.Types.AppendHandle ->
                                                                                              case
                                                                                                  ds15_sbo3y
                                                                                                      ipv4_sbo3A
                                                                                              of
                                                                                              { (#,#) ipv6_sbo3Y [Occ=Once]
                                                                                                      ipv7_sbo3Z [Occ=Once] ->
                                                                                                    case
                                                                                                        readMutVar# [dt_sbo2T
                                                                                                                     ipv6_sbo3Y]
                                                                                                    of
                                                                                                    { (#,#) ipv8_sbo41 [Occ=Once]
                                                                                                            ipv9_sbo42 [Occ=Once] ->
                                                                                                          let {
                                                                                                            sat_sbo43 [Occ=Once]
                                                                                                              :: (dstate_ibkNi,
                                                                                                                  GHC.IO.Buffer.Buffer
                                                                                                                    GHC.Word.Word8)
                                                                                                            [LclId] =
                                                                                                                CCCS (,)! [lvl11_rbnWT
                                                                                                                           ipv9_sbo42];
                                                                                                          } in 
                                                                                                            case
                                                                                                                newMutVar# [sat_sbo43
                                                                                                                            ipv8_sbo41]
                                                                                                            of
                                                                                                            { (#,#) ipv10_sbo45 [Occ=Once]
                                                                                                                    ipv11_sbo46 [Occ=Once] ->
                                                                                                                  let {
                                                                                                                    sat_sbo47 [Occ=Once]
                                                                                                                      :: GHC.Base.Maybe
                                                                                                                           (GHC.IO.Encoding.Types.TextEncoder
                                                                                                                              estate_ibkNj)
                                                                                                                    [LclId] =
                                                                                                                        CCCS GHC.Base.Just! [ipv7_sbo3Z]; } in
                                                                                                                  let {
                                                                                                                    sat_sbo48 [Occ=Once]
                                                                                                                      :: GHC.IO.Handle.Types.Handle__
                                                                                                                    [LclId] =
                                                                                                                        CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbo2O
                                                                                                                                                            $dBufferedIO_sbo2P
                                                                                                                                                            $dTypeable_sbo2Q
                                                                                                                                                            ds_sbo2R
                                                                                                                                                            GHC.IO.Handle.Types.AppendHandle
                                                                                                                                                            dt_sbo2T
                                                                                                                                                            ds2_sbo2U
                                                                                                                                                            ipv11_sbo46
                                                                                                                                                            dt2_sbo2W
                                                                                                                                                            dt3_sbo2X
                                                                                                                                                            sat_sbo47
                                                                                                                                                            ipv5_sbo3B
                                                                                                                                                            wild2_sbo3l
                                                                                                                                                            lvl48_sbo2J
                                                                                                                                                            lvl48_sbo2J
                                                                                                                                                            ds8_sbo33];
                                                                                                                  } in 
                                                                                                                    (#,#) [ipv10_sbo45
                                                                                                                           sat_sbo48];
                                                                                                            };
                                                                                                    };
                                                                                              };
                                                                                          GHC.IO.Handle.Types.ReadWriteHandle ->
                                                                                              case
                                                                                                  ds15_sbo3y
                                                                                                      ipv4_sbo3A
                                                                                              of
                                                                                              { (#,#) ipv6_sbo4a [Occ=Once]
                                                                                                      ipv7_sbo4b [Occ=Once] ->
                                                                                                    case
                                                                                                        readMutVar# [dt_sbo2T
                                                                                                                     ipv6_sbo4a]
                                                                                                    of
                                                                                                    { (#,#) ipv8_sbo4d [Occ=Once]
                                                                                                            ipv9_sbo4e [Occ=Once] ->
                                                                                                          let {
                                                                                                            sat_sbo4f [Occ=Once]
                                                                                                              :: (dstate_ibkNi,
                                                                                                                  GHC.IO.Buffer.Buffer
                                                                                                                    GHC.Word.Word8)
                                                                                                            [LclId] =
                                                                                                                CCCS (,)! [lvl11_rbnWT
                                                                                                                           ipv9_sbo4e];
                                                                                                          } in 
                                                                                                            case
                                                                                                                newMutVar# [sat_sbo4f
                                                                                                                            ipv8_sbo4d]
                                                                                                            of
                                                                                                            { (#,#) ipv10_sbo4h [Occ=Once]
                                                                                                                    ipv11_sbo4i [Occ=Once] ->
                                                                                                                  let {
                                                                                                                    sat_sbo4j [Occ=Once]
                                                                                                                      :: GHC.Base.Maybe
                                                                                                                           (GHC.IO.Encoding.Types.TextEncoder
                                                                                                                              estate_ibkNj)
                                                                                                                    [LclId] =
                                                                                                                        CCCS GHC.Base.Just! [ipv7_sbo4b]; } in
                                                                                                                  let {
                                                                                                                    sat_sbo4k [Occ=Once]
                                                                                                                      :: GHC.IO.Handle.Types.Handle__
                                                                                                                    [LclId] =
                                                                                                                        CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbo2O
                                                                                                                                                            $dBufferedIO_sbo2P
                                                                                                                                                            $dTypeable_sbo2Q
                                                                                                                                                            ds_sbo2R
                                                                                                                                                            GHC.IO.Handle.Types.ReadWriteHandle
                                                                                                                                                            dt_sbo2T
                                                                                                                                                            ds2_sbo2U
                                                                                                                                                            ipv11_sbo4i
                                                                                                                                                            dt2_sbo2W
                                                                                                                                                            dt3_sbo2X
                                                                                                                                                            sat_sbo4j
                                                                                                                                                            ipv5_sbo3B
                                                                                                                                                            wild2_sbo3l
                                                                                                                                                            lvl48_sbo2J
                                                                                                                                                            lvl48_sbo2J
                                                                                                                                                            ds8_sbo33];
                                                                                                                  } in 
                                                                                                                    (#,#) [ipv10_sbo4h
                                                                                                                           sat_sbo4k];
                                                                                                            };
                                                                                                    };
                                                                                              };
                                                                                        };
                                                                              } in 
                                                                                case ds1_sbo2S of {
                                                                                  __DEFAULT ->
                                                                                      $j1_sbo3z
                                                                                          ipv2_sbo3j
                                                                                          GHC.Base.Nothing;
                                                                                  GHC.IO.Handle.Types.ReadHandle ->
                                                                                      case
                                                                                          ds14_sbo3x
                                                                                              ipv2_sbo3j
                                                                                      of
                                                                                      { (#,#) ipv4_sbo4n [Occ=Once]
                                                                                              ipv5_sbo4o [Occ=Once] ->
                                                                                            let {
                                                                                              sat_sbo4p [Occ=Once]
                                                                                                :: GHC.Base.Maybe
                                                                                                     (GHC.IO.Encoding.Types.TextDecoder
                                                                                                        dstate_ibkNi)
                                                                                              [LclId] =
                                                                                                  CCCS GHC.Base.Just! [ipv5_sbo4o];
                                                                                            } in 
                                                                                              $j1_sbo3z
                                                                                                  ipv4_sbo4n
                                                                                                  sat_sbo4p;
                                                                                      };
                                                                                  GHC.IO.Handle.Types.ReadWriteHandle ->
                                                                                      case
                                                                                          ds14_sbo3x
                                                                                              ipv2_sbo3j
                                                                                      of
                                                                                      { (#,#) ipv4_sbo4r [Occ=Once]
                                                                                              ipv5_sbo4s [Occ=Once] ->
                                                                                            let {
                                                                                              sat_sbo4t [Occ=Once]
                                                                                                :: GHC.Base.Maybe
                                                                                                     (GHC.IO.Encoding.Types.TextDecoder
                                                                                                        dstate_ibkNi)
                                                                                              [LclId] =
                                                                                                  CCCS GHC.Base.Just! [ipv5_sbo4s];
                                                                                            } in 
                                                                                              $j1_sbo3z
                                                                                                  ipv4_sbo4r
                                                                                                  sat_sbo4t;
                                                                                      };
                                                                                };
                                                                        };
                                                                  };
                                                        } in 
                                                          case bin_sbo2H of {
                                                            GHC.Types.False ->
                                                                case
                                                                    GHC.IO.Encoding.getLocaleEncoding1
                                                                of
                                                                { (,) getLocaleEncoding3_sbo4w [Occ=Once]
                                                                      _ [Occ=Dead] ->
                                                                      case
                                                                          getLocaleEncoding3_sbo4w
                                                                              w1_sbo3h
                                                                      of
                                                                      { (#,#) ipv2_sbo4z [Occ=Once]
                                                                              ipv3_sbo4A [Occ=Once] ->
                                                                            let {
                                                                              sat_sbo4B [Occ=Once]
                                                                                :: GHC.Base.Maybe
                                                                                     GHC.IO.Encoding.Types.TextEncoding
                                                                              [LclId] =
                                                                                  CCCS GHC.Base.Just! [ipv3_sbo4A];
                                                                            } in 
                                                                              $j_sbo3i
                                                                                  ipv2_sbo4z
                                                                                  sat_sbo4B;
                                                                      };
                                                                };
                                                            GHC.Types.True ->
                                                                $j_sbo3i w1_sbo3h GHC.Base.Nothing;
                                                          };
                                              } in 
                                                case ds4_sbo2Z of {
                                                  GHC.Base.Nothing ->
                                                      case ds3_sbo2Y of {
                                                        GHC.Base.Nothing -> $w$j1_sbo3g w_sbo3f;
                                                        GHC.Base.Just d_sbo4E [Occ=Once!] ->
                                                            case d_sbo4E of {
                                                              GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                                _ [Occ=Dead]
                                                                                                ds13_sbo4I [Occ=Once]
                                                                                                _ [Occ=Dead]
                                                                                                _ [Occ=Dead] ->
                                                                  case ds13_sbo4I w_sbo3f of {
                                                                    (#,#) ipv2_sbo4M [Occ=Once]
                                                                          _ [Occ=Dead] ->
                                                                        $w$j1_sbo3g ipv2_sbo4M;
                                                                  };
                                                            };
                                                      };
                                                  GHC.Base.Just d_sbo4O [Occ=Once!] ->
                                                      case d_sbo4O of {
                                                        GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                          _ [Occ=Dead]
                                                                                          ds13_sbo4S [Occ=Once]
                                                                                          _ [Occ=Dead]
                                                                                          _ [Occ=Dead] ->
                                                            case ds13_sbo4S w_sbo3f of {
                                                              (#,#) ipv2_sbo4W [Occ=Once*]
                                                                    _ [Occ=Dead] ->
                                                                  case ds3_sbo2Y of {
                                                                    GHC.Base.Nothing ->
                                                                        $w$j1_sbo3g ipv2_sbo4W;
                                                                    GHC.Base.Just d1_sbo4Z [Occ=Once!] ->
                                                                        case d1_sbo4Z of {
                                                                          GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                                            _ [Occ=Dead]
                                                                                                            ds19_sbo53 [Occ=Once]
                                                                                                            _ [Occ=Dead]
                                                                                                            _ [Occ=Dead] ->
                                                                              case
                                                                                  ds19_sbo53
                                                                                      ipv2_sbo4W
                                                                              of
                                                                              { (#,#) ipv4_sbo57 [Occ=Once]
                                                                                      _ [Occ=Dead] ->
                                                                                    $w$j1_sbo3g
                                                                                        ipv4_sbo57;
                                                                              };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                    } in 
                                      case ds10_sbo3a of {
                                        GHC.IO.Buffer.ReadBuffer ->
                                            case readMutVar# [dt2_sbo2W ipv_sbo35] of {
                                              (#,#) ipv2_sbo5b [Occ=Once*] ipv3_sbo5c [Occ=Once!] ->
                                                  case ipv3_sbo5c of {
                                                    GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                         _ [Occ=Dead]
                                                                         ds11_sbo5g [Occ=Once!]
                                                                         _ [Occ=Dead]
                                                                         dt13_sbo5i [Occ=Once]
                                                                         dt14_sbo5j [Occ=Once] ->
                                                        case ds11_sbo5g of {
                                                          GHC.IO.Buffer.ReadBuffer ->
                                                              case ==# [dt13_sbo5i dt14_sbo5j] of {
                                                                __DEFAULT ->
                                                                    case
                                                                        readMutVar# [dt1_sbo2V
                                                                                     ipv2_sbo5b]
                                                                    of
                                                                    { (#,#) ipv4_sbo5n [Occ=Once]
                                                                            ipv5_sbo5o [Occ=Once!] ->
                                                                          case ipv5_sbo5o of {
                                                                            (,) codec_state_sbo5q [Occ=Once]
                                                                                bbuf0_sbo5r [Occ=Once*] ->
                                                                                case
                                                                                    readMutVar# [dt2_sbo2W
                                                                                                 ipv4_sbo5n]
                                                                                of
                                                                                { (#,#) ipv6_sbo5t [Occ=Once]
                                                                                        ipv7_sbo5u ->
                                                                                      let {
                                                                                        sat_sbo5C [Occ=Once]
                                                                                          :: GHC.IO.Buffer.Buffer
                                                                                               GHC.IO.Buffer.CharBufElem
                                                                                        [LclId] =
                                                                                            [ipv7_sbo5u] \u []
                                                                                                case
                                                                                                    ipv7_sbo5u
                                                                                                of
                                                                                                { GHC.IO.Buffer.Buffer dt9_sbo5w [Occ=Once]
                                                                                                                       dt15_sbo5x [Occ=Once]
                                                                                                                       ds15_sbo5y [Occ=Once]
                                                                                                                       dt16_sbo5z [Occ=Once]
                                                                                                                       _ [Occ=Dead]
                                                                                                                       _ [Occ=Dead] ->
                                                                                                      GHC.IO.Buffer.Buffer [dt9_sbo5w
                                                                                                                            dt15_sbo5x
                                                                                                                            ds15_sbo5y
                                                                                                                            dt16_sbo5z
                                                                                                                            0#
                                                                                                                            0#];
                                                                                                };
                                                                                      } in 
                                                                                        case
                                                                                            writeMutVar# [dt2_sbo2W
                                                                                                          sat_sbo5C
                                                                                                          ipv6_sbo5t]
                                                                                        of
                                                                                        s2#_sbo5D
                                                                                        { __DEFAULT ->
                                                                                              case
                                                                                                  ipv7_sbo5u
                                                                                              of
                                                                                              { GHC.IO.Buffer.Buffer dt9_sbo5F [Occ=Once]
                                                                                                                     dt15_sbo5G [Occ=Once]
                                                                                                                     ds15_sbo5H [Occ=Once]
                                                                                                                     _ [Occ=Dead]
                                                                                                                     dt17_sbo5J [Occ=Once!]
                                                                                                                     _ [Occ=Dead] ->
                                                                                                    case
                                                                                                        dt17_sbo5J
                                                                                                    of
                                                                                                    wild7_sbo5L
                                                                                                    { __DEFAULT ->
                                                                                                          case
                                                                                                              ds4_sbo2Z
                                                                                                          of
                                                                                                          { GHC.Base.Nothing ->
                                                                                                                let {
                                                                                                                  sat_sbo5V [Occ=Once]
                                                                                                                    :: GHC.IO.Buffer.Buffer
                                                                                                                         GHC.Word.Word8
                                                                                                                  [LclId] =
                                                                                                                      [bbuf0_sbo5r
                                                                                                                       wild7_sbo5L] \u []
                                                                                                                          case
                                                                                                                              bbuf0_sbo5r
                                                                                                                          of
                                                                                                                          { GHC.IO.Buffer.Buffer dt19_sbo5O [Occ=Once]
                                                                                                                                                 dt20_sbo5P [Occ=Once]
                                                                                                                                                 ds16_sbo5Q [Occ=Once]
                                                                                                                                                 dt21_sbo5R [Occ=Once]
                                                                                                                                                 dt22_sbo5S [Occ=Once]
                                                                                                                                                 dt23_sbo5T [Occ=Once] ->
                                                                                                                                case
                                                                                                                                    +# [dt22_sbo5S
                                                                                                                                        wild7_sbo5L]
                                                                                                                                of
                                                                                                                                sat_sbo5U
                                                                                                                                { __DEFAULT ->
                                                                                                                                      GHC.IO.Buffer.Buffer [dt19_sbo5O
                                                                                                                                                            dt20_sbo5P
                                                                                                                                                            ds16_sbo5Q
                                                                                                                                                            dt21_sbo5R
                                                                                                                                                            sat_sbo5U
                                                                                                                                                            dt23_sbo5T];
                                                                                                                                };
                                                                                                                          };
                                                                                                                } in 
                                                                                                                  case
                                                                                                                      writeMutVar# [dt_sbo2T
                                                                                                                                    sat_sbo5V
                                                                                                                                    s2#_sbo5D]
                                                                                                                  of
                                                                                                                  s2#1_sbo5W
                                                                                                                  { __DEFAULT ->
                                                                                                                        $w$j_sbo3e
                                                                                                                            s2#1_sbo5W;
                                                                                                                  };
                                                                                                            GHC.Base.Just decoder_sbo5X [Occ=Once!] ->
                                                                                                                case
                                                                                                                    decoder_sbo5X
                                                                                                                of
                                                                                                                { GHC.IO.Encoding.Types.BufferCodec ds16_sbo5Z [Occ=Once]
                                                                                                                                                    ds17_sbo60 [Occ=Once]
                                                                                                                                                    _ [Occ=Dead]
                                                                                                                                                    _ [Occ=Dead]
                                                                                                                                                    ds20_sbo63 [Occ=Once!] ->
                                                                                                                      case
                                                                                                                          ds20_sbo63
                                                                                                                              codec_state_sbo5q
                                                                                                                              s2#_sbo5D
                                                                                                                      of
                                                                                                                      { (#,#) ipv8_sbo65 [Occ=Once]
                                                                                                                              _ [Occ=Dead] ->
                                                                                                                            let {
                                                                                                                              sat_sbo67 [Occ=Once]
                                                                                                                                :: GHC.IO.Buffer.Buffer
                                                                                                                                     GHC.IO.Buffer.CharBufElem
                                                                                                                              [LclId] =
                                                                                                                                  CCCS GHC.IO.Buffer.Buffer! [dt9_sbo5F
                                                                                                                                                              dt15_sbo5G
                                                                                                                                                              ds15_sbo5H
                                                                                                                                                              wild7_sbo5L
                                                                                                                                                              0#
                                                                                                                                                              0#];
                                                                                                                            } in 
                                                                                                                              case
                                                                                                                                  GHC.IO.Handle.Internals.$wstreamEncode
                                                                                                                                      ds16_sbo5Z
                                                                                                                                      ds17_sbo60
                                                                                                                                      bbuf0_sbo5r
                                                                                                                                      sat_sbo67
                                                                                                                                      ipv8_sbo65
                                                                                                                              of
                                                                                                                              { (#,#) ipv10_sbo69 [Occ=Once]
                                                                                                                                      ipv11_sbo6a [Occ=Once!] ->
                                                                                                                                    case
                                                                                                                                        ipv11_sbo6a
                                                                                                                                    of
                                                                                                                                    { (,) bbuf1_sbo6c [Occ=Once]
                                                                                                                                          _ [Occ=Dead] ->
                                                                                                                                          case
                                                                                                                                              writeMutVar# [dt_sbo2T
                                                                                                                                                            bbuf1_sbo6c
                                                                                                                                                            ipv10_sbo69]
                                                                                                                                          of
                                                                                                                                          s2#1_sbo6e
                                                                                                                                          { __DEFAULT ->
                                                                                                                                                $w$j_sbo3e
                                                                                                                                                    s2#1_sbo6e;
                                                                                                                                          };
                                                                                                                                    };
                                                                                                                              };
                                                                                                                      };
                                                                                                                };
                                                                                                          };
                                                                                                      0# ->
                                                                                                          case
                                                                                                              writeMutVar# [dt_sbo2T
                                                                                                                            bbuf0_sbo5r
                                                                                                                            s2#_sbo5D]
                                                                                                          of
                                                                                                          s2#1_sbo6f
                                                                                                          { __DEFAULT ->
                                                                                                                $w$j_sbo3e
                                                                                                                    s2#1_sbo6f;
                                                                                                          };
                                                                                                    };
                                                                                              };
                                                                                        };
                                                                                };
                                                                          };
                                                                    };
                                                                1# -> $w$j_sbo3e ipv2_sbo5b;
                                                              };
                                                          GHC.IO.Buffer.WriteBuffer ->
                                                              $w$j_sbo3e ipv2_sbo5b;
                                                        };
                                                  };
                                            };
                                        GHC.IO.Buffer.WriteBuffer ->
                                            case ==# [dt7_sbo3c dt8_sbo3d] of {
                                              __DEFAULT -> GHC.IO.Handle.Internals.flushCharBuffer2;
                                              1# -> $w$j_sbo3e ipv_sbo35;
                                            };
                                      };
                              };
                        };
                  };
        } in 
          GHC.IO.Handle.Internals.withAllHandles__1
              lvl9_rbnWR handle_sbo2G sat_sbo6i eta_sbo2I;

GHC.IO.Handle.hSetBinaryMode
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.Bool -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.hSetBinaryMode1 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.hIsSeekable4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hIsSeekable"#;

GHC.IO.Handle.hIsSeekable3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hIsSeekable4;

GHC.IO.Handle.hIsSeekable2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool) #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h__sbo6j s1_sbo6k]
        case h__sbo6j of wild_sbo6l {
          GHC.IO.Handle.Types.Handle__ $dIODevice_sbo6m [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds_sbo6p [Occ=Once]
                                       ds1_sbo6q [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds1_sbo6q of {
                __DEFAULT ->
                    case
                        GHC.IO.Device.isSeekable $dIODevice_sbo6m ds_sbo6p s1_sbo6k
                    of
                    { (#,#) ipv_sbo6E [Occ=Once] ipv1_sbo6F [Occ=Once] ->
                          let {
                            sat_sbo6G [Occ=Once]
                              :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                            [LclId] =
                                CCCS (,)! [wild_sbo6l ipv1_sbo6F];
                          } in  (#,#) [ipv_sbo6E sat_sbo6G];
                    };
                GHC.IO.Handle.Types.ClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_closedHandle1 s1_sbo6k;
                GHC.IO.Handle.Types.SemiClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_semiclosedHandle1 s1_sbo6k;
                GHC.IO.Handle.Types.AppendHandle ->
                    let {
                      sat_sbo6J [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                      [LclId] =
                          CCCS (,)! [wild_sbo6l GHC.Types.False];
                    } in  (#,#) [s1_sbo6k sat_sbo6J];
              };
        };

GHC.IO.Handle.hIsSeekable1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbo6K eta_sbo6L]
        case handle_sbo6K of wild_sbo6M {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbo6O ->
              case getMaskingState# [eta_sbo6L] of {
                (#,#) ipv_sbo6Q [Occ=Once*] ipv1_sbo6R [Occ=Once!] ->
                    let {
                      io_sbo6S [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbo6M dt_sbo6O] \r [s_sbo6T]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hIsSeekable3
                                      wild_sbo6M
                                      GHC.IO.Handle.hIsSeekable2
                                      dt_sbo6O
                                      s_sbo6T
                              of
                              { (#,#) ipv2_sbo6V [Occ=Once] ipv3_sbo6W [Occ=Once!] ->
                                    case ipv3_sbo6W of {
                                      (,) h'_sbo6Y [Occ=Once] v_sbo6Z [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbo6O h'_sbo6Y ipv2_sbo6V]
                                          of
                                          s2#_sbo70
                                          { __DEFAULT -> (#,#) [s2#_sbo70 v_sbo6Z];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbo6R of {
                        __DEFAULT -> io_sbo6S ipv_sbo6Q;
                        0# -> maskAsyncExceptions# [io_sbo6S ipv_sbo6Q];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sbo73
                                           _ [Occ=Dead] ->
              case getMaskingState# [eta_sbo6L] of {
                (#,#) ipv_sbo76 [Occ=Once*] ipv1_sbo77 [Occ=Once!] ->
                    let {
                      io_sbo78 [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbo6M dt_sbo73] \r [s_sbo79]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hIsSeekable3
                                      wild_sbo6M
                                      GHC.IO.Handle.hIsSeekable2
                                      dt_sbo73
                                      s_sbo79
                              of
                              { (#,#) ipv2_sbo7b [Occ=Once] ipv3_sbo7c [Occ=Once!] ->
                                    case ipv3_sbo7c of {
                                      (,) h'_sbo7e [Occ=Once] v_sbo7f [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbo73 h'_sbo7e ipv2_sbo7b]
                                          of
                                          s2#_sbo7g
                                          { __DEFAULT -> (#,#) [s2#_sbo7g v_sbo7f];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbo77 of {
                        __DEFAULT -> io_sbo78 ipv_sbo76;
                        0# -> maskAsyncExceptions# [io_sbo78 ipv_sbo76];
                      };
              };
        };

GHC.IO.Handle.hIsSeekable
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hIsSeekable1 eta_B2 eta_B1;

GHC.IO.Handle.hGetPosn4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hGetPosn"#;

GHC.IO.Handle.hGetPosn3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hGetPosn4;

GHC.IO.Handle.hGetPosn2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Integer.Type.Integer #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle__sbo7i eta_sbo7j]
        case handle__sbo7i of {
          GHC.IO.Handle.Types.Handle__ $dIODevice_sbo7l [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds_sbo7o [Occ=Once]
                                       _ [Occ=Dead]
                                       dt_sbo7q
                                       _ [Occ=Dead]
                                       dt1_sbo7s [Occ=Once]
                                       dt2_sbo7t
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds4_sbo7w [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case GHC.IO.Device.tell $dIODevice_sbo7l ds_sbo7o eta_sbo7j of {
                (#,#) ipv_sbo7C [Occ=Once] ipv1_sbo7D [Occ=Once*] ->
                    case readMutVar# [dt2_sbo7t ipv_sbo7C] of {
                      (#,#) ipv2_sbo7F [Occ=Once*] ipv3_sbo7G [Occ=Once!] ->
                          case ipv3_sbo7G of {
                            GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 ds11_sbo7K [Occ=Once!]
                                                 _ [Occ=Dead]
                                                 dt7_sbo7M [Occ=Once]
                                                 dt8_sbo7N [Occ=Once] ->
                                let-no-escape {
                                  $w$j_sbo7O [InlPrag=NOUSERINLINE[0],
                                              Occ=Once*!T[1],
                                              Dmd=<L,1*C1(U(U,U))>]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                             GHC.Integer.Type.Integer #)
                                  [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                      sat-only [dt_sbo7q dt2_sbo7t ipv1_sbo7D] \r [w_sbo7P]
                                          case readMutVar# [dt_sbo7q w_sbo7P] of {
                                            (#,#) ipv4_sbo7R [Occ=Once] ipv5_sbo7S [Occ=Once!] ->
                                                case readMutVar# [dt2_sbo7t ipv4_sbo7R] of {
                                                  (#,#) ipv6_sbo7U [Occ=Once] _ [Occ=Dead] ->
                                                      let {
                                                        sat_sbo88 [Occ=Once]
                                                          :: GHC.Integer.Type.Integer
                                                        [LclId] =
                                                            [ipv1_sbo7D ipv5_sbo7S] \u []
                                                                case ipv5_sbo7S of {
                                                                  GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                       _ [Occ=Dead]
                                                                                       ds14_sbo7Z [Occ=Once!]
                                                                                       _ [Occ=Dead]
                                                                                       dt13_sbo81 [Occ=Once*]
                                                                                       dt14_sbo82 [Occ=Once*] ->
                                                                      case ds14_sbo7Z of {
                                                                        GHC.IO.Buffer.ReadBuffer ->
                                                                            case
                                                                                -# [dt14_sbo82
                                                                                    dt13_sbo81]
                                                                            of
                                                                            sat_sbo84
                                                                            { __DEFAULT ->
                                                                                  case
                                                                                      GHC.Integer.Type.smallInteger
                                                                                          sat_sbo84
                                                                                  of
                                                                                  sat_sbo85
                                                                                  { __DEFAULT ->
                                                                                        GHC.Integer.Type.minusInteger
                                                                                            ipv1_sbo7D
                                                                                            sat_sbo85;
                                                                                  };
                                                                            };
                                                                        GHC.IO.Buffer.WriteBuffer ->
                                                                            case
                                                                                -# [dt14_sbo82
                                                                                    dt13_sbo81]
                                                                            of
                                                                            sat_sbo86
                                                                            { __DEFAULT ->
                                                                                  case
                                                                                      GHC.Integer.Type.smallInteger
                                                                                          sat_sbo86
                                                                                  of
                                                                                  sat_sbo87
                                                                                  { __DEFAULT ->
                                                                                        GHC.Integer.Type.plusInteger
                                                                                            ipv1_sbo7D
                                                                                            sat_sbo87;
                                                                                  };
                                                                            };
                                                                      };
                                                                };
                                                      } in  (#,#) [ipv6_sbo7U sat_sbo88];
                                                };
                                          };
                                } in 
                                  case ds11_sbo7K of {
                                    GHC.IO.Buffer.ReadBuffer ->
                                        case readMutVar# [dt2_sbo7t ipv2_sbo7F] of {
                                          (#,#) ipv4_sbo8b [Occ=Once*] ipv5_sbo8c [Occ=Once!] ->
                                              case ipv5_sbo8c of {
                                                GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     ds13_sbo8g [Occ=Once!]
                                                                     _ [Occ=Dead]
                                                                     dt13_sbo8i [Occ=Once]
                                                                     dt14_sbo8j [Occ=Once] ->
                                                    case ds13_sbo8g of {
                                                      GHC.IO.Buffer.ReadBuffer ->
                                                          case ==# [dt13_sbo8i dt14_sbo8j] of {
                                                            __DEFAULT ->
                                                                case
                                                                    readMutVar# [dt1_sbo7s
                                                                                 ipv4_sbo8b]
                                                                of
                                                                { (#,#) ipv6_sbo8n [Occ=Once]
                                                                        ipv7_sbo8o [Occ=Once!] ->
                                                                      case ipv7_sbo8o of {
                                                                        (,) codec_state_sbo8q [Occ=Once]
                                                                            bbuf0_sbo8r [Occ=Once*] ->
                                                                            case
                                                                                readMutVar# [dt2_sbo7t
                                                                                             ipv6_sbo8n]
                                                                            of
                                                                            { (#,#) ipv8_sbo8t [Occ=Once]
                                                                                    ipv9_sbo8u ->
                                                                                  let {
                                                                                    sat_sbo8C [Occ=Once]
                                                                                      :: GHC.IO.Buffer.Buffer
                                                                                           GHC.IO.Buffer.CharBufElem
                                                                                    [LclId] =
                                                                                        [ipv9_sbo8u] \u []
                                                                                            case
                                                                                                ipv9_sbo8u
                                                                                            of
                                                                                            { GHC.IO.Buffer.Buffer dt9_sbo8w [Occ=Once]
                                                                                                                   dt15_sbo8x [Occ=Once]
                                                                                                                   ds16_sbo8y [Occ=Once]
                                                                                                                   dt16_sbo8z [Occ=Once]
                                                                                                                   _ [Occ=Dead]
                                                                                                                   _ [Occ=Dead] ->
                                                                                                  GHC.IO.Buffer.Buffer [dt9_sbo8w
                                                                                                                        dt15_sbo8x
                                                                                                                        ds16_sbo8y
                                                                                                                        dt16_sbo8z
                                                                                                                        0#
                                                                                                                        0#];
                                                                                            };
                                                                                  } in 
                                                                                    case
                                                                                        writeMutVar# [dt2_sbo7t
                                                                                                      sat_sbo8C
                                                                                                      ipv8_sbo8t]
                                                                                    of
                                                                                    s2#_sbo8D
                                                                                    { __DEFAULT ->
                                                                                          case
                                                                                              ipv9_sbo8u
                                                                                          of
                                                                                          { GHC.IO.Buffer.Buffer dt9_sbo8F [Occ=Once]
                                                                                                                 dt15_sbo8G [Occ=Once]
                                                                                                                 ds16_sbo8H [Occ=Once]
                                                                                                                 _ [Occ=Dead]
                                                                                                                 dt17_sbo8J [Occ=Once!]
                                                                                                                 _ [Occ=Dead] ->
                                                                                                case
                                                                                                    dt17_sbo8J
                                                                                                of
                                                                                                wild7_sbo8L
                                                                                                { __DEFAULT ->
                                                                                                      case
                                                                                                          ds4_sbo7w
                                                                                                      of
                                                                                                      { GHC.Base.Nothing ->
                                                                                                            let {
                                                                                                              sat_sbo8V [Occ=Once]
                                                                                                                :: GHC.IO.Buffer.Buffer
                                                                                                                     GHC.Word.Word8
                                                                                                              [LclId] =
                                                                                                                  [bbuf0_sbo8r
                                                                                                                   wild7_sbo8L] \u []
                                                                                                                      case
                                                                                                                          bbuf0_sbo8r
                                                                                                                      of
                                                                                                                      { GHC.IO.Buffer.Buffer dt19_sbo8O [Occ=Once]
                                                                                                                                             dt20_sbo8P [Occ=Once]
                                                                                                                                             ds17_sbo8Q [Occ=Once]
                                                                                                                                             dt21_sbo8R [Occ=Once]
                                                                                                                                             dt22_sbo8S [Occ=Once]
                                                                                                                                             dt23_sbo8T [Occ=Once] ->
                                                                                                                            case
                                                                                                                                +# [dt22_sbo8S
                                                                                                                                    wild7_sbo8L]
                                                                                                                            of
                                                                                                                            sat_sbo8U
                                                                                                                            { __DEFAULT ->
                                                                                                                                  GHC.IO.Buffer.Buffer [dt19_sbo8O
                                                                                                                                                        dt20_sbo8P
                                                                                                                                                        ds17_sbo8Q
                                                                                                                                                        dt21_sbo8R
                                                                                                                                                        sat_sbo8U
                                                                                                                                                        dt23_sbo8T];
                                                                                                                            };
                                                                                                                      };
                                                                                                            } in 
                                                                                                              case
                                                                                                                  writeMutVar# [dt_sbo7q
                                                                                                                                sat_sbo8V
                                                                                                                                s2#_sbo8D]
                                                                                                              of
                                                                                                              s2#1_sbo8W
                                                                                                              { __DEFAULT ->
                                                                                                                    $w$j_sbo7O
                                                                                                                        s2#1_sbo8W;
                                                                                                              };
                                                                                                        GHC.Base.Just decoder_sbo8X [Occ=Once!] ->
                                                                                                            case
                                                                                                                decoder_sbo8X
                                                                                                            of
                                                                                                            { GHC.IO.Encoding.Types.BufferCodec ds17_sbo8Z [Occ=Once]
                                                                                                                                                ds18_sbo90 [Occ=Once]
                                                                                                                                                _ [Occ=Dead]
                                                                                                                                                _ [Occ=Dead]
                                                                                                                                                ds21_sbo93 [Occ=Once!] ->
                                                                                                                  case
                                                                                                                      ds21_sbo93
                                                                                                                          codec_state_sbo8q
                                                                                                                          s2#_sbo8D
                                                                                                                  of
                                                                                                                  { (#,#) ipv10_sbo95 [Occ=Once]
                                                                                                                          _ [Occ=Dead] ->
                                                                                                                        let {
                                                                                                                          sat_sbo97 [Occ=Once]
                                                                                                                            :: GHC.IO.Buffer.Buffer
                                                                                                                                 GHC.IO.Buffer.CharBufElem
                                                                                                                          [LclId] =
                                                                                                                              CCCS GHC.IO.Buffer.Buffer! [dt9_sbo8F
                                                                                                                                                          dt15_sbo8G
                                                                                                                                                          ds16_sbo8H
                                                                                                                                                          wild7_sbo8L
                                                                                                                                                          0#
                                                                                                                                                          0#];
                                                                                                                        } in 
                                                                                                                          case
                                                                                                                              GHC.IO.Handle.Internals.$wstreamEncode
                                                                                                                                  ds17_sbo8Z
                                                                                                                                  ds18_sbo90
                                                                                                                                  bbuf0_sbo8r
                                                                                                                                  sat_sbo97
                                                                                                                                  ipv10_sbo95
                                                                                                                          of
                                                                                                                          { (#,#) ipv12_sbo99 [Occ=Once]
                                                                                                                                  ipv13_sbo9a [Occ=Once!] ->
                                                                                                                                case
                                                                                                                                    ipv13_sbo9a
                                                                                                                                of
                                                                                                                                { (,) bbuf1_sbo9c [Occ=Once]
                                                                                                                                      _ [Occ=Dead] ->
                                                                                                                                      case
                                                                                                                                          writeMutVar# [dt_sbo7q
                                                                                                                                                        bbuf1_sbo9c
                                                                                                                                                        ipv12_sbo99]
                                                                                                                                      of
                                                                                                                                      s2#1_sbo9e
                                                                                                                                      { __DEFAULT ->
                                                                                                                                            $w$j_sbo7O
                                                                                                                                                s2#1_sbo9e;
                                                                                                                                      };
                                                                                                                                };
                                                                                                                          };
                                                                                                                  };
                                                                                                            };
                                                                                                      };
                                                                                                  0# ->
                                                                                                      case
                                                                                                          writeMutVar# [dt_sbo7q
                                                                                                                        bbuf0_sbo8r
                                                                                                                        s2#_sbo8D]
                                                                                                      of
                                                                                                      s2#1_sbo9f
                                                                                                      { __DEFAULT ->
                                                                                                            $w$j_sbo7O
                                                                                                                s2#1_sbo9f;
                                                                                                      };
                                                                                                };
                                                                                          };
                                                                                    };
                                                                            };
                                                                      };
                                                                };
                                                            1# -> $w$j_sbo7O ipv4_sbo8b;
                                                          };
                                                      GHC.IO.Buffer.WriteBuffer ->
                                                          $w$j_sbo7O ipv4_sbo8b;
                                                    };
                                              };
                                        };
                                    GHC.IO.Buffer.WriteBuffer ->
                                        case ==# [dt7_sbo7M dt8_sbo7N] of {
                                          __DEFAULT -> GHC.IO.Handle.Internals.flushCharBuffer2;
                                          1# -> $w$j_sbo7O ipv2_sbo7F;
                                        };
                                  };
                          };
                    };
              };
        };

GHC.IO.Handle.hTell1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Integer.Type.Integer #)
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [handle_sbo9i eta_B1]
        GHC.IO.Handle.Internals.wantSeekableHandle1
            GHC.IO.Handle.hGetPosn3
            handle_sbo9i
            GHC.IO.Handle.hGetPosn2
            eta_B1;

GHC.IO.Handle.hTell
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Types.IO GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hTell1 eta_B2 eta_B1;

lvl12_rbnWU :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hSeek"#;

lvl13_rbnWV :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl12_rbnWU;

lvl14_rbnWW :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

GHC.IO.Handle.hSeek1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Device.SeekMode
     -> GHC.Integer.Type.Integer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=4, Str=<S,1*U><L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbo9j mode_sbo9k offset_sbo9l eta_sbo9m]
        let {
          lvl48_sbo9n [Occ=OnceL!, Dmd=<L,U(U)>] :: GHC.Types.Int
          [LclId] =
              [offset_sbo9l] \u []
                  case GHC.Integer.Type.integerToInt offset_sbo9l of wild_sbo9o {
                    __DEFAULT -> GHC.Types.I# [wild_sbo9o];
                  }; } in
        let {
          lvl49_sbo9p [Occ=OnceL!, Dmd=<L,U(U)>] :: GHC.Types.Int
          [LclId] =
              [offset_sbo9l] \u []
                  case
                      GHC.Integer.Type.geInteger# offset_sbo9l lvl14_rbnWW
                  of
                  v_sbo9q
                  { __DEFAULT -> GHC.Types.I# [v_sbo9q];
                  }; } in
        let {
          sat_sbobV [Occ=Once]
            :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
          [LclId] =
              [mode_sbo9k offset_sbo9l lvl48_sbo9n lvl49_sbo9p] \r [handle__sbo9r
                                                                    eta1_sbo9s]
                  case handle__sbo9r of wild_sbo9t {
                    GHC.IO.Handle.Types.Handle__ $dIODevice_sbo9u [Occ=Once*]
                                                 $dBufferedIO_sbo9v [Occ=Once]
                                                 _ [Occ=Dead]
                                                 ds_sbo9x
                                                 _ [Occ=Dead]
                                                 dt_sbo9z
                                                 _ [Occ=Dead]
                                                 dt1_sbo9B [Occ=Once]
                                                 dt2_sbo9C
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 ds4_sbo9F
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead] ->
                        case readMutVar# [dt2_sbo9C eta1_sbo9s] of {
                          (#,#) ipv_sbo9L ipv1_sbo9M [Occ=Once!] ->
                              case ipv1_sbo9M of {
                                GHC.IO.Buffer.Buffer dt4_sbo9O [Occ=Once]
                                                     dt5_sbo9P [Occ=Once]
                                                     ds10_sbo9Q [Occ=Once!]
                                                     dt6_sbo9R [Occ=Once]
                                                     dt7_sbo9S
                                                     dt8_sbo9T ->
                                    case ds10_sbo9Q of {
                                      GHC.IO.Buffer.ReadBuffer ->
                                          let-no-escape {
                                            $j_sbo9V [Occ=Once*T[0], Dmd=<L,1*U(U,U)>]
                                              :: (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                            [LclId[JoinId(0)], Unf=OtherCon []] =
                                                [mode_sbo9k
                                                 offset_sbo9l
                                                 wild_sbo9t
                                                 $dIODevice_sbo9u
                                                 ds_sbo9x
                                                 dt_sbo9z
                                                 dt1_sbo9B
                                                 dt2_sbo9C
                                                 ds4_sbo9F
                                                 ipv_sbo9L] \r []
                                                    case readMutVar# [dt2_sbo9C ipv_sbo9L] of {
                                                      (#,#) ipv2_sbo9X [Occ=Once*]
                                                            ipv3_sbo9Y [Occ=Once!] ->
                                                          case ipv3_sbo9Y of {
                                                            GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                 _ [Occ=Dead]
                                                                                 ds12_sboa2 [Occ=Once!]
                                                                                 _ [Occ=Dead]
                                                                                 dt12_sboa4 [Occ=Once]
                                                                                 dt13_sboa5 [Occ=Once] ->
                                                                case ds12_sboa2 of {
                                                                  GHC.IO.Buffer.ReadBuffer ->
                                                                      case
                                                                          ==# [dt12_sboa4
                                                                               dt13_sboa5]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            case
                                                                                readMutVar# [dt1_sbo9B
                                                                                             ipv2_sbo9X]
                                                                            of
                                                                            { (#,#) ipv4_sboa9 [Occ=Once]
                                                                                    ipv5_sboaa [Occ=Once!] ->
                                                                                  case
                                                                                      ipv5_sboaa
                                                                                  of
                                                                                  { (,) codec_state_sboac [Occ=Once]
                                                                                        bbuf0_sboad [Occ=Once*] ->
                                                                                        case
                                                                                            readMutVar# [dt2_sbo9C
                                                                                                         ipv4_sboa9]
                                                                                        of
                                                                                        { (#,#) ipv6_sboaf [Occ=Once]
                                                                                                ipv7_sboag ->
                                                                                              let {
                                                                                                sat_sboao [Occ=Once]
                                                                                                  :: GHC.IO.Buffer.Buffer
                                                                                                       GHC.IO.Buffer.CharBufElem
                                                                                                [LclId] =
                                                                                                    [ipv7_sboag] \u []
                                                                                                        case
                                                                                                            ipv7_sboag
                                                                                                        of
                                                                                                        { GHC.IO.Buffer.Buffer dt14_sboai [Occ=Once]
                                                                                                                               dt15_sboaj [Occ=Once]
                                                                                                                               ds15_sboak [Occ=Once]
                                                                                                                               dt16_sboal [Occ=Once]
                                                                                                                               _ [Occ=Dead]
                                                                                                                               _ [Occ=Dead] ->
                                                                                                              GHC.IO.Buffer.Buffer [dt14_sboai
                                                                                                                                    dt15_sboaj
                                                                                                                                    ds15_sboak
                                                                                                                                    dt16_sboal
                                                                                                                                    0#
                                                                                                                                    0#];
                                                                                                        };
                                                                                              } in 
                                                                                                case
                                                                                                    writeMutVar# [dt2_sbo9C
                                                                                                                  sat_sboao
                                                                                                                  ipv6_sboaf]
                                                                                                of
                                                                                                s2#_sboap
                                                                                                { __DEFAULT ->
                                                                                                      case
                                                                                                          ipv7_sboag
                                                                                                      of
                                                                                                      { GHC.IO.Buffer.Buffer dt14_sboar [Occ=Once]
                                                                                                                             dt15_sboas [Occ=Once]
                                                                                                                             ds15_sboat [Occ=Once]
                                                                                                                             _ [Occ=Dead]
                                                                                                                             dt17_sboav [Occ=Once!]
                                                                                                                             _ [Occ=Dead] ->
                                                                                                            case
                                                                                                                dt17_sboav
                                                                                                            of
                                                                                                            wild7_sboax
                                                                                                            { __DEFAULT ->
                                                                                                                  case
                                                                                                                      ds4_sbo9F
                                                                                                                  of
                                                                                                                  { GHC.Base.Nothing ->
                                                                                                                        let {
                                                                                                                          sat_sboaH [Occ=Once]
                                                                                                                            :: GHC.IO.Buffer.Buffer
                                                                                                                                 GHC.Word.Word8
                                                                                                                          [LclId] =
                                                                                                                              [bbuf0_sboad
                                                                                                                               wild7_sboax] \u []
                                                                                                                                  case
                                                                                                                                      bbuf0_sboad
                                                                                                                                  of
                                                                                                                                  { GHC.IO.Buffer.Buffer dt19_sboaA [Occ=Once]
                                                                                                                                                         dt20_sboaB [Occ=Once]
                                                                                                                                                         ds16_sboaC [Occ=Once]
                                                                                                                                                         dt21_sboaD [Occ=Once]
                                                                                                                                                         dt22_sboaE [Occ=Once]
                                                                                                                                                         dt23_sboaF [Occ=Once] ->
                                                                                                                                        case
                                                                                                                                            +# [dt22_sboaE
                                                                                                                                                wild7_sboax]
                                                                                                                                        of
                                                                                                                                        sat_sboaG
                                                                                                                                        { __DEFAULT ->
                                                                                                                                              GHC.IO.Buffer.Buffer [dt19_sboaA
                                                                                                                                                                    dt20_sboaB
                                                                                                                                                                    ds16_sboaC
                                                                                                                                                                    dt21_sboaD
                                                                                                                                                                    sat_sboaG
                                                                                                                                                                    dt23_sboaF];
                                                                                                                                        };
                                                                                                                                  };
                                                                                                                        } in 
                                                                                                                          case
                                                                                                                              writeMutVar# [dt_sbo9z
                                                                                                                                            sat_sboaH
                                                                                                                                            s2#_sboap]
                                                                                                                          of
                                                                                                                          s2#1_sboaI
                                                                                                                          { __DEFAULT ->
                                                                                                                                case
                                                                                                                                    GHC.IO.Handle.Internals.flushBuffer2
                                                                                                                                        wild_sbo9t
                                                                                                                                        s2#1_sboaI
                                                                                                                                of
                                                                                                                                { (#,#) ipv8_sboaK [Occ=Once]
                                                                                                                                        _ [Occ=Dead] ->
                                                                                                                                      GHC.IO.Device.seek
                                                                                                                                          $dIODevice_sbo9u
                                                                                                                                          ds_sbo9x
                                                                                                                                          mode_sbo9k
                                                                                                                                          offset_sbo9l
                                                                                                                                          ipv8_sboaK;
                                                                                                                                };
                                                                                                                          };
                                                                                                                    GHC.Base.Just decoder_sboaM [Occ=Once!] ->
                                                                                                                        case
                                                                                                                            decoder_sboaM
                                                                                                                        of
                                                                                                                        { GHC.IO.Encoding.Types.BufferCodec ds16_sboaO [Occ=Once]
                                                                                                                                                            ds17_sboaP [Occ=Once]
                                                                                                                                                            _ [Occ=Dead]
                                                                                                                                                            _ [Occ=Dead]
                                                                                                                                                            ds20_sboaS [Occ=Once!] ->
                                                                                                                              case
                                                                                                                                  ds20_sboaS
                                                                                                                                      codec_state_sboac
                                                                                                                                      s2#_sboap
                                                                                                                              of
                                                                                                                              { (#,#) ipv8_sboaU [Occ=Once]
                                                                                                                                      _ [Occ=Dead] ->
                                                                                                                                    let {
                                                                                                                                      sat_sboaW [Occ=Once]
                                                                                                                                        :: GHC.IO.Buffer.Buffer
                                                                                                                                             GHC.IO.Buffer.CharBufElem
                                                                                                                                      [LclId] =
                                                                                                                                          CCCS GHC.IO.Buffer.Buffer! [dt14_sboar
                                                                                                                                                                      dt15_sboas
                                                                                                                                                                      ds15_sboat
                                                                                                                                                                      wild7_sboax
                                                                                                                                                                      0#
                                                                                                                                                                      0#];
                                                                                                                                    } in 
                                                                                                                                      case
                                                                                                                                          GHC.IO.Handle.Internals.$wstreamEncode
                                                                                                                                              ds16_sboaO
                                                                                                                                              ds17_sboaP
                                                                                                                                              bbuf0_sboad
                                                                                                                                              sat_sboaW
                                                                                                                                              ipv8_sboaU
                                                                                                                                      of
                                                                                                                                      { (#,#) ipv10_sboaY [Occ=Once]
                                                                                                                                              ipv11_sboaZ [Occ=Once!] ->
                                                                                                                                            case
                                                                                                                                                ipv11_sboaZ
                                                                                                                                            of
                                                                                                                                            { (,) bbuf1_sbob1 [Occ=Once]
                                                                                                                                                  _ [Occ=Dead] ->
                                                                                                                                                  case
                                                                                                                                                      writeMutVar# [dt_sbo9z
                                                                                                                                                                    bbuf1_sbob1
                                                                                                                                                                    ipv10_sboaY]
                                                                                                                                                  of
                                                                                                                                                  s2#1_sbob3
                                                                                                                                                  { __DEFAULT ->
                                                                                                                                                        case
                                                                                                                                                            GHC.IO.Handle.Internals.flushBuffer2
                                                                                                                                                                wild_sbo9t
                                                                                                                                                                s2#1_sbob3
                                                                                                                                                        of
                                                                                                                                                        { (#,#) ipv12_sbob5 [Occ=Once]
                                                                                                                                                                _ [Occ=Dead] ->
                                                                                                                                                              GHC.IO.Device.seek
                                                                                                                                                                  $dIODevice_sbo9u
                                                                                                                                                                  ds_sbo9x
                                                                                                                                                                  mode_sbo9k
                                                                                                                                                                  offset_sbo9l
                                                                                                                                                                  ipv12_sbob5;
                                                                                                                                                        };
                                                                                                                                                  };
                                                                                                                                            };
                                                                                                                                      };
                                                                                                                              };
                                                                                                                        };
                                                                                                                  };
                                                                                                              0# ->
                                                                                                                  case
                                                                                                                      writeMutVar# [dt_sbo9z
                                                                                                                                    bbuf0_sboad
                                                                                                                                    s2#_sboap]
                                                                                                                  of
                                                                                                                  s2#1_sbob7
                                                                                                                  { __DEFAULT ->
                                                                                                                        case
                                                                                                                            GHC.IO.Handle.Internals.flushBuffer2
                                                                                                                                wild_sbo9t
                                                                                                                                s2#1_sbob7
                                                                                                                        of
                                                                                                                        { (#,#) ipv8_sbob9 [Occ=Once]
                                                                                                                                _ [Occ=Dead] ->
                                                                                                                              GHC.IO.Device.seek
                                                                                                                                  $dIODevice_sbo9u
                                                                                                                                  ds_sbo9x
                                                                                                                                  mode_sbo9k
                                                                                                                                  offset_sbo9l
                                                                                                                                  ipv8_sbob9;
                                                                                                                        };
                                                                                                                  };
                                                                                                            };
                                                                                                      };
                                                                                                };
                                                                                        };
                                                                                  };
                                                                            };
                                                                        1# ->
                                                                            case
                                                                                GHC.IO.Handle.Internals.flushBuffer2
                                                                                    wild_sbo9t
                                                                                    ipv2_sbo9X
                                                                            of
                                                                            { (#,#) ipv4_sbobc [Occ=Once]
                                                                                    _ [Occ=Dead] ->
                                                                                  GHC.IO.Device.seek
                                                                                      $dIODevice_sbo9u
                                                                                      ds_sbo9x
                                                                                      mode_sbo9k
                                                                                      offset_sbo9l
                                                                                      ipv4_sbobc;
                                                                            };
                                                                      };
                                                                  GHC.IO.Buffer.WriteBuffer ->
                                                                      case
                                                                          GHC.IO.Handle.Internals.flushBuffer2
                                                                              wild_sbo9t ipv2_sbo9X
                                                                      of
                                                                      { (#,#) ipv4_sbobf [Occ=Once]
                                                                              _ [Occ=Dead] ->
                                                                            GHC.IO.Device.seek
                                                                                $dIODevice_sbo9u
                                                                                ds_sbo9x
                                                                                mode_sbo9k
                                                                                offset_sbo9l
                                                                                ipv4_sbobf;
                                                                      };
                                                                };
                                                          };
                                                    };
                                          } in 
                                            case mode_sbo9k of {
                                              __DEFAULT -> $j_sbo9V;
                                              GHC.IO.Device.RelativeSeek ->
                                                  case ds4_sbo9F of {
                                                    GHC.Base.Nothing ->
                                                        case lvl49_sbo9p of {
                                                          GHC.Types.I# v1_sbobk [Occ=Once!] ->
                                                              case v1_sbobk of {
                                                                __DEFAULT -> $j_sbo9V;
                                                                1# ->
                                                                    case
                                                                        -# [dt8_sbo9T dt7_sbo9S]
                                                                    of
                                                                    sat_sbobm
                                                                    { __DEFAULT ->
                                                                          case
                                                                              GHC.Integer.Type.smallInteger
                                                                                  sat_sbobm
                                                                          of
                                                                          sat_sbobn
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    GHC.Integer.Type.ltInteger#
                                                                                        offset_sbo9l
                                                                                        sat_sbobn
                                                                                of
                                                                                { __DEFAULT ->
                                                                                      $j_sbo9V;
                                                                                  1# ->
                                                                                      let {
                                                                                        sat_sbobs [Occ=Once]
                                                                                          :: GHC.IO.Buffer.Buffer
                                                                                               GHC.IO.Buffer.CharBufElem
                                                                                        [LclId] =
                                                                                            [lvl48_sbo9n
                                                                                             dt4_sbo9O
                                                                                             dt5_sbo9P
                                                                                             dt6_sbo9R
                                                                                             dt7_sbo9S
                                                                                             dt8_sbo9T] \u []
                                                                                                case
                                                                                                    lvl48_sbo9n
                                                                                                of
                                                                                                { GHC.Types.I# y_sbobq [Occ=Once] ->
                                                                                                      case
                                                                                                          +# [dt7_sbo9S
                                                                                                              y_sbobq]
                                                                                                      of
                                                                                                      sat_sbobr
                                                                                                      { __DEFAULT ->
                                                                                                            GHC.IO.Buffer.Buffer [dt4_sbo9O
                                                                                                                                  dt5_sbo9P
                                                                                                                                  GHC.IO.Buffer.ReadBuffer
                                                                                                                                  dt6_sbo9R
                                                                                                                                  sat_sbobr
                                                                                                                                  dt8_sbo9T];
                                                                                                      };
                                                                                                };
                                                                                      } in 
                                                                                        case
                                                                                            writeMutVar# [dt2_sbo9C
                                                                                                          sat_sbobs
                                                                                                          ipv_sbo9L]
                                                                                        of
                                                                                        s2#_sbobt
                                                                                        { __DEFAULT ->
                                                                                              (#,#) [s2#_sbobt
                                                                                                     GHC.Tuple.()];
                                                                                        };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                    GHC.Base.Just _ [Occ=Dead] -> $j_sbo9V;
                                                  };
                                            };
                                      GHC.IO.Buffer.WriteBuffer ->
                                          case readMutVar# [dt_sbo9z ipv_sbo9L] of {
                                            (#,#) ipv2_sbobw [Occ=Once*] ipv3_sbobx [Occ=Once!] ->
                                                case ipv3_sbobx of {
                                                  GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       ds12_sbobB [Occ=Once!]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                                      case ds12_sbobB of {
                                                        GHC.IO.Buffer.ReadBuffer ->
                                                            GHC.IO.Device.seek
                                                                $dIODevice_sbo9u
                                                                ds_sbo9x
                                                                mode_sbo9k
                                                                offset_sbo9l
                                                                ipv2_sbobw;
                                                        GHC.IO.Buffer.WriteBuffer ->
                                                            case
                                                                readMutVar# [dt_sbo9z ipv2_sbobw]
                                                            of
                                                            { (#,#) ipv4_sbobH [Occ=Once*]
                                                                    ipv5_sbobI [Occ=Once!] ->
                                                                  case ipv5_sbobI of wild5_sbobJ {
                                                                    GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         dt17_sbobO [Occ=Once]
                                                                                         dt18_sbobP [Occ=Once] ->
                                                                        case
                                                                            ==# [dt17_sbobO
                                                                                 dt18_sbobP]
                                                                        of
                                                                        { __DEFAULT ->
                                                                              case
                                                                                  GHC.IO.BufferedIO.flushWriteBuffer
                                                                                      $dBufferedIO_sbo9v
                                                                                      ds_sbo9x
                                                                                      wild5_sbobJ
                                                                                      ipv4_sbobH
                                                                              of
                                                                              { (#,#) ipv6_sbobS [Occ=Once]
                                                                                      ipv7_sbobT [Occ=Once] ->
                                                                                    case
                                                                                        writeMutVar# [dt_sbo9z
                                                                                                      ipv7_sbobT
                                                                                                      ipv6_sbobS]
                                                                                    of
                                                                                    s2#_sbobU
                                                                                    { __DEFAULT ->
                                                                                          GHC.IO.Device.seek
                                                                                              $dIODevice_sbo9u
                                                                                              ds_sbo9x
                                                                                              mode_sbo9k
                                                                                              offset_sbo9l
                                                                                              s2#_sbobU;
                                                                                    };
                                                                              };
                                                                          1# ->
                                                                              GHC.IO.Device.seek
                                                                                  $dIODevice_sbo9u
                                                                                  ds_sbo9x
                                                                                  mode_sbo9k
                                                                                  offset_sbo9l
                                                                                  ipv4_sbobH;
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
                  };
        } in 
          GHC.IO.Handle.Internals.wantSeekableHandle1
              lvl13_rbnWV handle_sbo9j sat_sbobV eta_sbo9m;

GHC.IO.Handle.hSeek
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Device.SeekMode
     -> GHC.Integer.Type.Integer
     -> GHC.Types.IO ()
[GblId, Arity=4, Str=<S,1*U><L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.hSeek1 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.hSetPosn1
  :: GHC.IO.Handle.HandlePosn
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S(SL),1*U(1*U,U)><S,U>, Unf=OtherCon []] =
    [] \r [ds_sbobW eta_sbobX]
        case ds_sbobW of {
          GHC.IO.Handle.HandlePosn h_sbobZ [Occ=Once] i_sboc0 [Occ=Once] ->
              GHC.IO.Handle.hSeek1
                  h_sbobZ GHC.IO.Device.AbsoluteSeek i_sboc0 eta_sbobX;
        };

GHC.IO.Handle.hSetPosn
  :: GHC.IO.Handle.HandlePosn -> GHC.Types.IO ()
[GblId, Arity=2, Str=<S(SL),1*U(1*U,U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hSetPosn1 eta_B2 eta_B1;

GHC.IO.Handle.hGetEncoding4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hGetEncoding"#;

GHC.IO.Handle.hGetEncoding3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hGetEncoding4;

GHC.IO.Handle.hGetEncoding2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__,
            GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding) #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [h__sboc1 s1_sboc2]
        case h__sboc1 of wild_sboc3 {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds5_sbocg [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              let {
                sat_sbock [Occ=Once]
                  :: (GHC.IO.Handle.Types.Handle__,
                      GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding)
                [LclId] =
                    CCCS (,)! [wild_sboc3 ds5_sbocg];
              } in  (#,#) [s1_sboc2 sat_sbock];
        };

GHC.IO.Handle.hGetEncoding1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [hdl_sbocl eta_sbocm]
        case hdl_sbocl of wild_sbocn {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbocp ->
              case getMaskingState# [eta_sbocm] of {
                (#,#) ipv_sbocr [Occ=Once*] ipv1_sbocs [Occ=Once!] ->
                    let {
                      io_sboct [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbocn dt_sbocp] \r [s_sbocu]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hGetEncoding3
                                      wild_sbocn
                                      GHC.IO.Handle.hGetEncoding2
                                      dt_sbocp
                                      s_sbocu
                              of
                              { (#,#) ipv2_sbocw [Occ=Once] ipv3_sbocx [Occ=Once!] ->
                                    case ipv3_sbocx of {
                                      (,) h'_sbocz [Occ=Once] v_sbocA [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbocp h'_sbocz ipv2_sbocw]
                                          of
                                          s2#_sbocB
                                          { __DEFAULT -> (#,#) [s2#_sbocB v_sbocA];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbocs of {
                        __DEFAULT -> io_sboct ipv_sbocr;
                        0# -> maskAsyncExceptions# [io_sboct ipv_sbocr];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sbocE
                                           _ [Occ=Dead] ->
              case getMaskingState# [eta_sbocm] of {
                (#,#) ipv_sbocH [Occ=Once*] ipv1_sbocI [Occ=Once!] ->
                    let {
                      io_sbocJ [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbocn dt_sbocE] \r [s_sbocK]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hGetEncoding3
                                      wild_sbocn
                                      GHC.IO.Handle.hGetEncoding2
                                      dt_sbocE
                                      s_sbocK
                              of
                              { (#,#) ipv2_sbocM [Occ=Once] ipv3_sbocN [Occ=Once!] ->
                                    case ipv3_sbocN of {
                                      (,) h'_sbocP [Occ=Once] v_sbocQ [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbocE h'_sbocP ipv2_sbocM]
                                          of
                                          s2#_sbocR
                                          { __DEFAULT -> (#,#) [s2#_sbocR v_sbocQ];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbocI of {
                        __DEFAULT -> io_sbocJ ipv_sbocH;
                        0# -> maskAsyncExceptions# [io_sbocJ ipv_sbocH];
                      };
              };
        };

GHC.IO.Handle.hGetEncoding
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Types.IO (GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hGetEncoding1 eta_B2 eta_B1;

lvl15_rbnWX :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hSetEncoding"#;

lvl16_rbnWY :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl15_rbnWX;

lvl17_rbnWZ :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "last_decode"#;

lvl18_rbnX0 :: forall ds. (ds, GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl17_rbnWZ of sat_sbocT {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sbocT;
        };

GHC.IO.Handle.hSetEncoding1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Encoding.Types.TextEncoding
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [hdl_sbocU encoding_sbocV eta_sbocW]
        let {
          lvl48_sbocX [Occ=OnceL*]
            :: GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
          [LclId, Unf=OtherCon []] =
              CCCS GHC.Base.Just! [encoding_sbocV]; } in
        let {
          sat_sbog6 [Occ=Once]
            :: GHC.IO.Handle.Types.Handle__
               -> GHC.Types.IO GHC.IO.Handle.Types.Handle__
          [LclId] =
              [encoding_sbocV lvl48_sbocX] \r [h__sbocY eta1_sbocZ]
                  case h__sbocY of {
                    GHC.IO.Handle.Types.Handle__ $dIODevice_sbod1 [Occ=Once*]
                                                 $dBufferedIO_sbod2 [Occ=Once*]
                                                 $dTypeable_sbod3 [Occ=Once*]
                                                 ds_sbod4 [Occ=Once*]
                                                 ds1_sbod5
                                                 dt_sbod6
                                                 ds2_sbod7 [Occ=Once*]
                                                 dt1_sbod8 [Occ=Once]
                                                 dt2_sbod9
                                                 dt3_sboda [Occ=Once*]
                                                 ds3_sbodb [Occ=Once*!]
                                                 ds4_sbodc
                                                 _ [Occ=Dead]
                                                 ds6_sbode [Occ=Once*]
                                                 ds7_sbodf [Occ=Once*]
                                                 ds8_sbodg [Occ=Once*] ->
                        case readMutVar# [dt2_sbod9 eta1_sbocZ] of {
                          (#,#) ipv_sbodi [Occ=Once*] ipv1_sbodj [Occ=Once!] ->
                              case ipv1_sbodj of {
                                GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                     _ [Occ=Dead]
                                                     ds10_sbodn [Occ=Once!]
                                                     _ [Occ=Dead]
                                                     dt7_sbodp [Occ=Once]
                                                     dt8_sbodq [Occ=Once] ->
                                    let-no-escape {
                                      $w$j_sbodr [InlPrag=NOUSERINLINE[0],
                                                  Occ=Once*!T[1],
                                                  Dmd=<L,1*C1(U)>]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                 GHC.IO.Handle.Types.Handle__ #)
                                      [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                          sat-only [encoding_sbocV
                                                    lvl48_sbocX
                                                    $dIODevice_sbod1
                                                    $dBufferedIO_sbod2
                                                    $dTypeable_sbod3
                                                    ds_sbod4
                                                    ds1_sbod5
                                                    dt_sbod6
                                                    ds2_sbod7
                                                    dt2_sbod9
                                                    dt3_sboda
                                                    ds3_sbodb
                                                    ds4_sbodc
                                                    ds6_sbode
                                                    ds7_sbodf
                                                    ds8_sbodg] \r [w_sbods]
                                              let-no-escape {
                                                $w$j1_sbodt [InlPrag=NOUSERINLINE[0],
                                                             Occ=Once*!T[1],
                                                             Dmd=<L,1*C1(U)>]
                                                  :: GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.IO.Handle.Types.Handle__ #)
                                                [LclId[JoinId(1)],
                                                 Arity=1,
                                                 Str=<S,U>,
                                                 Unf=OtherCon []] =
                                                    sat-only [encoding_sbocV
                                                              lvl48_sbocX
                                                              $dIODevice_sbod1
                                                              $dBufferedIO_sbod2
                                                              $dTypeable_sbod3
                                                              ds_sbod4
                                                              ds1_sbod5
                                                              dt_sbod6
                                                              ds2_sbod7
                                                              dt2_sbod9
                                                              dt3_sboda
                                                              ds6_sbode
                                                              ds7_sbodf
                                                              ds8_sbodg] \r [w1_sbodu]
                                                        case encoding_sbocV of {
                                                          GHC.IO.Encoding.Types.TextEncoding _ [Occ=Dead]
                                                                                             ds13_sbodx [Occ=Once*]
                                                                                             ds14_sbody [Occ=Once*] ->
                                                              let-no-escape {
                                                                $j_sbodz [Occ=Once*!T[2],
                                                                          Dmd=<L,1*C1(C1(U))>]
                                                                  :: GHC.Prim.State#
                                                                       GHC.Prim.RealWorld
                                                                     -> GHC.Base.Maybe
                                                                          (GHC.IO.Encoding.Types.TextDecoder
                                                                             dstate_ibkNi)
                                                                     -> (# GHC.Prim.State#
                                                                             GHC.Prim.RealWorld,
                                                                           GHC.IO.Handle.Types.Handle__ #)
                                                                [LclId[JoinId(2)],
                                                                 Arity=2,
                                                                 Str=<S,U><L,U>,
                                                                 Unf=OtherCon []] =
                                                                    sat-only [lvl48_sbocX
                                                                              $dIODevice_sbod1
                                                                              $dBufferedIO_sbod2
                                                                              $dTypeable_sbod3
                                                                              ds_sbod4
                                                                              ds1_sbod5
                                                                              dt_sbod6
                                                                              ds2_sbod7
                                                                              dt2_sbod9
                                                                              dt3_sboda
                                                                              ds6_sbode
                                                                              ds7_sbodf
                                                                              ds8_sbodg
                                                                              ds14_sbody] \r [ipv2_sbodA
                                                                                              ipv3_sbodB]
                                                                        case
                                                                            ds1_sbod5
                                                                        of
                                                                        wild3_sbodC
                                                                        { __DEFAULT ->
                                                                              case
                                                                                  readMutVar# [dt_sbod6
                                                                                               ipv2_sbodA]
                                                                              of
                                                                              { (#,#) ipv4_sbodE [Occ=Once]
                                                                                      _ [Occ=Dead] ->
                                                                                    case
                                                                                        newMutVar# [lvl18_rbnX0
                                                                                                    ipv4_sbodE]
                                                                                    of
                                                                                    { (#,#) ipv6_sbodH [Occ=Once]
                                                                                            ipv7_sbodI [Occ=Once] ->
                                                                                          let {
                                                                                            sat_sbodJ [Occ=Once]
                                                                                              :: GHC.IO.Handle.Types.Handle__
                                                                                            [LclId] =
                                                                                                CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbod1
                                                                                                                                    $dBufferedIO_sbod2
                                                                                                                                    $dTypeable_sbod3
                                                                                                                                    ds_sbod4
                                                                                                                                    wild3_sbodC
                                                                                                                                    dt_sbod6
                                                                                                                                    ds2_sbod7
                                                                                                                                    ipv7_sbodI
                                                                                                                                    dt2_sbod9
                                                                                                                                    dt3_sboda
                                                                                                                                    GHC.Base.Nothing
                                                                                                                                    ipv3_sbodB
                                                                                                                                    lvl48_sbocX
                                                                                                                                    ds6_sbode
                                                                                                                                    ds7_sbodf
                                                                                                                                    ds8_sbodg];
                                                                                          } in 
                                                                                            (#,#) [ipv6_sbodH
                                                                                                   sat_sbodJ];
                                                                                    };
                                                                              };
                                                                          GHC.IO.Handle.Types.WriteHandle ->
                                                                              case
                                                                                  ds14_sbody
                                                                                      ipv2_sbodA
                                                                              of
                                                                              { (#,#) ipv4_sbodL [Occ=Once]
                                                                                      ipv5_sbodM [Occ=Once] ->
                                                                                    case
                                                                                        readMutVar# [dt_sbod6
                                                                                                     ipv4_sbodL]
                                                                                    of
                                                                                    { (#,#) ipv6_sbodO [Occ=Once]
                                                                                            _ [Occ=Dead] ->
                                                                                          case
                                                                                              newMutVar# [lvl18_rbnX0
                                                                                                          ipv6_sbodO]
                                                                                          of
                                                                                          { (#,#) ipv8_sbodR [Occ=Once]
                                                                                                  ipv9_sbodS [Occ=Once] ->
                                                                                                let {
                                                                                                  sat_sbodT [Occ=Once]
                                                                                                    :: GHC.Base.Maybe
                                                                                                         (GHC.IO.Encoding.Types.TextEncoder
                                                                                                            estate_ibkNj)
                                                                                                  [LclId] =
                                                                                                      CCCS GHC.Base.Just! [ipv5_sbodM]; } in
                                                                                                let {
                                                                                                  sat_sbodU [Occ=Once]
                                                                                                    :: GHC.IO.Handle.Types.Handle__
                                                                                                  [LclId] =
                                                                                                      CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbod1
                                                                                                                                          $dBufferedIO_sbod2
                                                                                                                                          $dTypeable_sbod3
                                                                                                                                          ds_sbod4
                                                                                                                                          GHC.IO.Handle.Types.WriteHandle
                                                                                                                                          dt_sbod6
                                                                                                                                          ds2_sbod7
                                                                                                                                          ipv9_sbodS
                                                                                                                                          dt2_sbod9
                                                                                                                                          dt3_sboda
                                                                                                                                          sat_sbodT
                                                                                                                                          ipv3_sbodB
                                                                                                                                          lvl48_sbocX
                                                                                                                                          ds6_sbode
                                                                                                                                          ds7_sbodf
                                                                                                                                          ds8_sbodg];
                                                                                                } in 
                                                                                                  (#,#) [ipv8_sbodR
                                                                                                         sat_sbodU];
                                                                                          };
                                                                                    };
                                                                              };
                                                                          GHC.IO.Handle.Types.AppendHandle ->
                                                                              case
                                                                                  ds14_sbody
                                                                                      ipv2_sbodA
                                                                              of
                                                                              { (#,#) ipv4_sbodW [Occ=Once]
                                                                                      ipv5_sbodX [Occ=Once] ->
                                                                                    case
                                                                                        readMutVar# [dt_sbod6
                                                                                                     ipv4_sbodW]
                                                                                    of
                                                                                    { (#,#) ipv6_sbodZ [Occ=Once]
                                                                                            _ [Occ=Dead] ->
                                                                                          case
                                                                                              newMutVar# [lvl18_rbnX0
                                                                                                          ipv6_sbodZ]
                                                                                          of
                                                                                          { (#,#) ipv8_sboe2 [Occ=Once]
                                                                                                  ipv9_sboe3 [Occ=Once] ->
                                                                                                let {
                                                                                                  sat_sboe4 [Occ=Once]
                                                                                                    :: GHC.Base.Maybe
                                                                                                         (GHC.IO.Encoding.Types.TextEncoder
                                                                                                            estate_ibkNj)
                                                                                                  [LclId] =
                                                                                                      CCCS GHC.Base.Just! [ipv5_sbodX]; } in
                                                                                                let {
                                                                                                  sat_sboe5 [Occ=Once]
                                                                                                    :: GHC.IO.Handle.Types.Handle__
                                                                                                  [LclId] =
                                                                                                      CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbod1
                                                                                                                                          $dBufferedIO_sbod2
                                                                                                                                          $dTypeable_sbod3
                                                                                                                                          ds_sbod4
                                                                                                                                          GHC.IO.Handle.Types.AppendHandle
                                                                                                                                          dt_sbod6
                                                                                                                                          ds2_sbod7
                                                                                                                                          ipv9_sboe3
                                                                                                                                          dt2_sbod9
                                                                                                                                          dt3_sboda
                                                                                                                                          sat_sboe4
                                                                                                                                          ipv3_sbodB
                                                                                                                                          lvl48_sbocX
                                                                                                                                          ds6_sbode
                                                                                                                                          ds7_sbodf
                                                                                                                                          ds8_sbodg];
                                                                                                } in 
                                                                                                  (#,#) [ipv8_sboe2
                                                                                                         sat_sboe5];
                                                                                          };
                                                                                    };
                                                                              };
                                                                          GHC.IO.Handle.Types.ReadWriteHandle ->
                                                                              case
                                                                                  ds14_sbody
                                                                                      ipv2_sbodA
                                                                              of
                                                                              { (#,#) ipv4_sboe7 [Occ=Once]
                                                                                      ipv5_sboe8 [Occ=Once] ->
                                                                                    case
                                                                                        readMutVar# [dt_sbod6
                                                                                                     ipv4_sboe7]
                                                                                    of
                                                                                    { (#,#) ipv6_sboea [Occ=Once]
                                                                                            _ [Occ=Dead] ->
                                                                                          case
                                                                                              newMutVar# [lvl18_rbnX0
                                                                                                          ipv6_sboea]
                                                                                          of
                                                                                          { (#,#) ipv8_sboed [Occ=Once]
                                                                                                  ipv9_sboee [Occ=Once] ->
                                                                                                let {
                                                                                                  sat_sboef [Occ=Once]
                                                                                                    :: GHC.Base.Maybe
                                                                                                         (GHC.IO.Encoding.Types.TextEncoder
                                                                                                            estate_ibkNj)
                                                                                                  [LclId] =
                                                                                                      CCCS GHC.Base.Just! [ipv5_sboe8]; } in
                                                                                                let {
                                                                                                  sat_sboeg [Occ=Once]
                                                                                                    :: GHC.IO.Handle.Types.Handle__
                                                                                                  [LclId] =
                                                                                                      CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbod1
                                                                                                                                          $dBufferedIO_sbod2
                                                                                                                                          $dTypeable_sbod3
                                                                                                                                          ds_sbod4
                                                                                                                                          GHC.IO.Handle.Types.ReadWriteHandle
                                                                                                                                          dt_sbod6
                                                                                                                                          ds2_sbod7
                                                                                                                                          ipv9_sboee
                                                                                                                                          dt2_sbod9
                                                                                                                                          dt3_sboda
                                                                                                                                          sat_sboef
                                                                                                                                          ipv3_sbodB
                                                                                                                                          lvl48_sbocX
                                                                                                                                          ds6_sbode
                                                                                                                                          ds7_sbodf
                                                                                                                                          ds8_sbodg];
                                                                                                } in 
                                                                                                  (#,#) [ipv8_sboed
                                                                                                         sat_sboeg];
                                                                                          };
                                                                                    };
                                                                              };
                                                                        };
                                                              } in 
                                                                case ds1_sbod5 of {
                                                                  __DEFAULT ->
                                                                      $j_sbodz
                                                                          w1_sbodu GHC.Base.Nothing;
                                                                  GHC.IO.Handle.Types.ReadHandle ->
                                                                      case ds13_sbodx w1_sbodu of {
                                                                        (#,#) ipv2_sboej [Occ=Once]
                                                                              ipv3_sboek [Occ=Once] ->
                                                                            let {
                                                                              sat_sboel [Occ=Once]
                                                                                :: GHC.Base.Maybe
                                                                                     (GHC.IO.Encoding.Types.TextDecoder
                                                                                        dstate_ibkNi)
                                                                              [LclId] =
                                                                                  CCCS GHC.Base.Just! [ipv3_sboek];
                                                                            } in 
                                                                              $j_sbodz
                                                                                  ipv2_sboej
                                                                                  sat_sboel;
                                                                      };
                                                                  GHC.IO.Handle.Types.ReadWriteHandle ->
                                                                      case ds13_sbodx w1_sbodu of {
                                                                        (#,#) ipv2_sboen [Occ=Once]
                                                                              ipv3_sboeo [Occ=Once] ->
                                                                            let {
                                                                              sat_sboep [Occ=Once]
                                                                                :: GHC.Base.Maybe
                                                                                     (GHC.IO.Encoding.Types.TextDecoder
                                                                                        dstate_ibkNi)
                                                                              [LclId] =
                                                                                  CCCS GHC.Base.Just! [ipv3_sboeo];
                                                                            } in 
                                                                              $j_sbodz
                                                                                  ipv2_sboen
                                                                                  sat_sboep;
                                                                      };
                                                                };
                                                        };
                                              } in 
                                                case ds4_sbodc of {
                                                  GHC.Base.Nothing ->
                                                      case ds3_sbodb of {
                                                        GHC.Base.Nothing -> $w$j1_sbodt w_sbods;
                                                        GHC.Base.Just d_sboes [Occ=Once!] ->
                                                            case d_sboes of {
                                                              GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                                _ [Occ=Dead]
                                                                                                ds13_sboew [Occ=Once]
                                                                                                _ [Occ=Dead]
                                                                                                _ [Occ=Dead] ->
                                                                  case ds13_sboew w_sbods of {
                                                                    (#,#) ipv2_sboeA [Occ=Once]
                                                                          _ [Occ=Dead] ->
                                                                        $w$j1_sbodt ipv2_sboeA;
                                                                  };
                                                            };
                                                      };
                                                  GHC.Base.Just d_sboeC [Occ=Once!] ->
                                                      case d_sboeC of {
                                                        GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                          _ [Occ=Dead]
                                                                                          ds13_sboeG [Occ=Once]
                                                                                          _ [Occ=Dead]
                                                                                          _ [Occ=Dead] ->
                                                            case ds13_sboeG w_sbods of {
                                                              (#,#) ipv2_sboeK [Occ=Once*]
                                                                    _ [Occ=Dead] ->
                                                                  case ds3_sbodb of {
                                                                    GHC.Base.Nothing ->
                                                                        $w$j1_sbodt ipv2_sboeK;
                                                                    GHC.Base.Just d1_sboeN [Occ=Once!] ->
                                                                        case d1_sboeN of {
                                                                          GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                                            _ [Occ=Dead]
                                                                                                            ds19_sboeR [Occ=Once]
                                                                                                            _ [Occ=Dead]
                                                                                                            _ [Occ=Dead] ->
                                                                              case
                                                                                  ds19_sboeR
                                                                                      ipv2_sboeK
                                                                              of
                                                                              { (#,#) ipv4_sboeV [Occ=Once]
                                                                                      _ [Occ=Dead] ->
                                                                                    $w$j1_sbodt
                                                                                        ipv4_sboeV;
                                                                              };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                    } in 
                                      case ds10_sbodn of {
                                        GHC.IO.Buffer.ReadBuffer ->
                                            case readMutVar# [dt2_sbod9 ipv_sbodi] of {
                                              (#,#) ipv2_sboeZ [Occ=Once*] ipv3_sbof0 [Occ=Once!] ->
                                                  case ipv3_sbof0 of {
                                                    GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                         _ [Occ=Dead]
                                                                         ds11_sbof4 [Occ=Once!]
                                                                         _ [Occ=Dead]
                                                                         dt13_sbof6 [Occ=Once]
                                                                         dt14_sbof7 [Occ=Once] ->
                                                        case ds11_sbof4 of {
                                                          GHC.IO.Buffer.ReadBuffer ->
                                                              case ==# [dt13_sbof6 dt14_sbof7] of {
                                                                __DEFAULT ->
                                                                    case
                                                                        readMutVar# [dt1_sbod8
                                                                                     ipv2_sboeZ]
                                                                    of
                                                                    { (#,#) ipv4_sbofb [Occ=Once]
                                                                            ipv5_sbofc [Occ=Once!] ->
                                                                          case ipv5_sbofc of {
                                                                            (,) codec_state_sbofe [Occ=Once]
                                                                                bbuf0_sboff [Occ=Once*] ->
                                                                                case
                                                                                    readMutVar# [dt2_sbod9
                                                                                                 ipv4_sbofb]
                                                                                of
                                                                                { (#,#) ipv6_sbofh [Occ=Once]
                                                                                        ipv7_sbofi ->
                                                                                      let {
                                                                                        sat_sbofq [Occ=Once]
                                                                                          :: GHC.IO.Buffer.Buffer
                                                                                               GHC.IO.Buffer.CharBufElem
                                                                                        [LclId] =
                                                                                            [ipv7_sbofi] \u []
                                                                                                case
                                                                                                    ipv7_sbofi
                                                                                                of
                                                                                                { GHC.IO.Buffer.Buffer dt9_sbofk [Occ=Once]
                                                                                                                       dt15_sbofl [Occ=Once]
                                                                                                                       ds15_sbofm [Occ=Once]
                                                                                                                       dt16_sbofn [Occ=Once]
                                                                                                                       _ [Occ=Dead]
                                                                                                                       _ [Occ=Dead] ->
                                                                                                      GHC.IO.Buffer.Buffer [dt9_sbofk
                                                                                                                            dt15_sbofl
                                                                                                                            ds15_sbofm
                                                                                                                            dt16_sbofn
                                                                                                                            0#
                                                                                                                            0#];
                                                                                                };
                                                                                      } in 
                                                                                        case
                                                                                            writeMutVar# [dt2_sbod9
                                                                                                          sat_sbofq
                                                                                                          ipv6_sbofh]
                                                                                        of
                                                                                        s2#_sbofr
                                                                                        { __DEFAULT ->
                                                                                              case
                                                                                                  ipv7_sbofi
                                                                                              of
                                                                                              { GHC.IO.Buffer.Buffer dt9_sboft [Occ=Once]
                                                                                                                     dt15_sbofu [Occ=Once]
                                                                                                                     ds15_sbofv [Occ=Once]
                                                                                                                     _ [Occ=Dead]
                                                                                                                     dt17_sbofx [Occ=Once!]
                                                                                                                     _ [Occ=Dead] ->
                                                                                                    case
                                                                                                        dt17_sbofx
                                                                                                    of
                                                                                                    wild7_sbofz
                                                                                                    { __DEFAULT ->
                                                                                                          case
                                                                                                              ds4_sbodc
                                                                                                          of
                                                                                                          { GHC.Base.Nothing ->
                                                                                                                let {
                                                                                                                  sat_sbofJ [Occ=Once]
                                                                                                                    :: GHC.IO.Buffer.Buffer
                                                                                                                         GHC.Word.Word8
                                                                                                                  [LclId] =
                                                                                                                      [bbuf0_sboff
                                                                                                                       wild7_sbofz] \u []
                                                                                                                          case
                                                                                                                              bbuf0_sboff
                                                                                                                          of
                                                                                                                          { GHC.IO.Buffer.Buffer dt19_sbofC [Occ=Once]
                                                                                                                                                 dt20_sbofD [Occ=Once]
                                                                                                                                                 ds16_sbofE [Occ=Once]
                                                                                                                                                 dt21_sbofF [Occ=Once]
                                                                                                                                                 dt22_sbofG [Occ=Once]
                                                                                                                                                 dt23_sbofH [Occ=Once] ->
                                                                                                                                case
                                                                                                                                    +# [dt22_sbofG
                                                                                                                                        wild7_sbofz]
                                                                                                                                of
                                                                                                                                sat_sbofI
                                                                                                                                { __DEFAULT ->
                                                                                                                                      GHC.IO.Buffer.Buffer [dt19_sbofC
                                                                                                                                                            dt20_sbofD
                                                                                                                                                            ds16_sbofE
                                                                                                                                                            dt21_sbofF
                                                                                                                                                            sat_sbofI
                                                                                                                                                            dt23_sbofH];
                                                                                                                                };
                                                                                                                          };
                                                                                                                } in 
                                                                                                                  case
                                                                                                                      writeMutVar# [dt_sbod6
                                                                                                                                    sat_sbofJ
                                                                                                                                    s2#_sbofr]
                                                                                                                  of
                                                                                                                  s2#1_sbofK
                                                                                                                  { __DEFAULT ->
                                                                                                                        $w$j_sbodr
                                                                                                                            s2#1_sbofK;
                                                                                                                  };
                                                                                                            GHC.Base.Just decoder_sbofL [Occ=Once!] ->
                                                                                                                case
                                                                                                                    decoder_sbofL
                                                                                                                of
                                                                                                                { GHC.IO.Encoding.Types.BufferCodec ds16_sbofN [Occ=Once]
                                                                                                                                                    ds17_sbofO [Occ=Once]
                                                                                                                                                    _ [Occ=Dead]
                                                                                                                                                    _ [Occ=Dead]
                                                                                                                                                    ds20_sbofR [Occ=Once!] ->
                                                                                                                      case
                                                                                                                          ds20_sbofR
                                                                                                                              codec_state_sbofe
                                                                                                                              s2#_sbofr
                                                                                                                      of
                                                                                                                      { (#,#) ipv8_sbofT [Occ=Once]
                                                                                                                              _ [Occ=Dead] ->
                                                                                                                            let {
                                                                                                                              sat_sbofV [Occ=Once]
                                                                                                                                :: GHC.IO.Buffer.Buffer
                                                                                                                                     GHC.IO.Buffer.CharBufElem
                                                                                                                              [LclId] =
                                                                                                                                  CCCS GHC.IO.Buffer.Buffer! [dt9_sboft
                                                                                                                                                              dt15_sbofu
                                                                                                                                                              ds15_sbofv
                                                                                                                                                              wild7_sbofz
                                                                                                                                                              0#
                                                                                                                                                              0#];
                                                                                                                            } in 
                                                                                                                              case
                                                                                                                                  GHC.IO.Handle.Internals.$wstreamEncode
                                                                                                                                      ds16_sbofN
                                                                                                                                      ds17_sbofO
                                                                                                                                      bbuf0_sboff
                                                                                                                                      sat_sbofV
                                                                                                                                      ipv8_sbofT
                                                                                                                              of
                                                                                                                              { (#,#) ipv10_sbofX [Occ=Once]
                                                                                                                                      ipv11_sbofY [Occ=Once!] ->
                                                                                                                                    case
                                                                                                                                        ipv11_sbofY
                                                                                                                                    of
                                                                                                                                    { (,) bbuf1_sbog0 [Occ=Once]
                                                                                                                                          _ [Occ=Dead] ->
                                                                                                                                          case
                                                                                                                                              writeMutVar# [dt_sbod6
                                                                                                                                                            bbuf1_sbog0
                                                                                                                                                            ipv10_sbofX]
                                                                                                                                          of
                                                                                                                                          s2#1_sbog2
                                                                                                                                          { __DEFAULT ->
                                                                                                                                                $w$j_sbodr
                                                                                                                                                    s2#1_sbog2;
                                                                                                                                          };
                                                                                                                                    };
                                                                                                                              };
                                                                                                                      };
                                                                                                                };
                                                                                                          };
                                                                                                      0# ->
                                                                                                          case
                                                                                                              writeMutVar# [dt_sbod6
                                                                                                                            bbuf0_sboff
                                                                                                                            s2#_sbofr]
                                                                                                          of
                                                                                                          s2#1_sbog3
                                                                                                          { __DEFAULT ->
                                                                                                                $w$j_sbodr
                                                                                                                    s2#1_sbog3;
                                                                                                          };
                                                                                                    };
                                                                                              };
                                                                                        };
                                                                                };
                                                                          };
                                                                    };
                                                                1# -> $w$j_sbodr ipv2_sboeZ;
                                                              };
                                                          GHC.IO.Buffer.WriteBuffer ->
                                                              $w$j_sbodr ipv2_sboeZ;
                                                        };
                                                  };
                                            };
                                        GHC.IO.Buffer.WriteBuffer ->
                                            case ==# [dt7_sbodp dt8_sbodq] of {
                                              __DEFAULT -> GHC.IO.Handle.Internals.flushCharBuffer2;
                                              1# -> $w$j_sbodr ipv_sbodi;
                                            };
                                      };
                              };
                        };
                  };
        } in 
          GHC.IO.Handle.Internals.withAllHandles__1
              lvl16_rbnWY hdl_sbocU sat_sbog6 eta_sbocW;

GHC.IO.Handle.hSetEncoding
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.hSetEncoding1 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.hSetBuffering3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hSetBuffering"#;

GHC.IO.Handle.hSetBuffering2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hSetBuffering3;

GHC.IO.Handle.hSetBuffering1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Types.BufferMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbog7 mode_sbog8 eta_sbog9]
        let {
          sat_sbohh [Occ=Once]
            :: GHC.IO.Handle.Types.Handle__
               -> GHC.Types.IO GHC.IO.Handle.Types.Handle__
          [LclId] =
              [mode_sbog8] \r [handle__sboga eta1_sbogb]
                  case handle__sboga of wild_sbogc {
                    GHC.IO.Handle.Types.Handle__ $dIODevice_sbogd
                                                 $dBufferedIO_sboge
                                                 $dTypeable_sbogf
                                                 ds_sbogg
                                                 ds1_sbogh [Occ=Once!]
                                                 dt_sbogi
                                                 ds2_sbogj [Occ=Once*!]
                                                 dt1_sbogk
                                                 dt2_sbogl
                                                 dt3_sbogm
                                                 ds3_sbogn
                                                 ds4_sbogo
                                                 ds5_sbogp
                                                 ds6_sbogq
                                                 ds7_sbogr
                                                 ds8_sbogs ->
                        case ds1_sbogh of wild1_sbogt {
                          __DEFAULT ->
                              let-no-escape {
                                $j_sbogu [Occ=Once*T[0], Dmd=<L,1*U>]
                                  :: (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        GHC.IO.Handle.Types.Handle__ #)
                                [LclId[JoinId(0)], Unf=OtherCon []] =
                                    [mode_sbog8
                                     eta1_sbogb
                                     $dIODevice_sbogd
                                     $dBufferedIO_sboge
                                     $dTypeable_sbogf
                                     ds_sbogg
                                     dt_sbogi
                                     dt1_sbogk
                                     dt2_sbogl
                                     dt3_sbogm
                                     ds3_sbogn
                                     ds4_sbogo
                                     ds5_sbogp
                                     ds6_sbogq
                                     ds7_sbogr
                                     ds8_sbogs
                                     wild1_sbogt] \r []
                                        let-no-escape {
                                          $w$j_sbogv [InlPrag=NOUSERINLINE[0],
                                                      Occ=Once*!T[1],
                                                      Dmd=<C(S),1*C1(U)>]
                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                     GHC.IO.Handle.Types.Handle__ #)
                                          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                              sat-only [mode_sbog8
                                                        $dIODevice_sbogd
                                                        $dBufferedIO_sboge
                                                        $dTypeable_sbogf
                                                        ds_sbogg
                                                        dt_sbogi
                                                        dt1_sbogk
                                                        dt2_sbogl
                                                        dt3_sbogm
                                                        ds3_sbogn
                                                        ds4_sbogo
                                                        ds5_sbogp
                                                        ds6_sbogq
                                                        ds7_sbogr
                                                        ds8_sbogs
                                                        wild1_sbogt] \r [w_sbogw]
                                                  case
                                                      GHC.IO.Device.isTerminal
                                                          $dIODevice_sbogd ds_sbogg w_sbogw
                                                  of
                                                  { (#,#) ipv_sbogy ipv1_sbogz [Occ=Once!] ->
                                                        case ipv1_sbogz of {
                                                          GHC.Types.False ->
                                                              case
                                                                  writeMutVar# [dt3_sbogm
                                                                                GHC.IO.Handle.Types.BufferListNil
                                                                                ipv_sbogy]
                                                              of
                                                              s2#_sbogB
                                                              { __DEFAULT ->
                                                                    let {
                                                                      sat_sbogC [Occ=Once]
                                                                        :: GHC.IO.Handle.Types.Handle__
                                                                      [LclId] =
                                                                          CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbogd
                                                                                                              $dBufferedIO_sboge
                                                                                                              $dTypeable_sbogf
                                                                                                              ds_sbogg
                                                                                                              wild1_sbogt
                                                                                                              dt_sbogi
                                                                                                              mode_sbog8
                                                                                                              dt1_sbogk
                                                                                                              dt2_sbogl
                                                                                                              dt3_sbogm
                                                                                                              ds3_sbogn
                                                                                                              ds4_sbogo
                                                                                                              ds5_sbogp
                                                                                                              ds6_sbogq
                                                                                                              ds7_sbogr
                                                                                                              ds8_sbogs];
                                                                    } in 
                                                                      (#,#) [s2#_sbogB sat_sbogC];
                                                              };
                                                          GHC.Types.True ->
                                                              let-no-escape {
                                                                $j1_sbogD [Occ=Once*T[0],
                                                                           Dmd=<L,1*U>]
                                                                  :: (# GHC.Prim.State#
                                                                          GHC.Prim.RealWorld,
                                                                        GHC.IO.Handle.Types.Handle__ #)
                                                                [LclId[JoinId(0)],
                                                                 Unf=OtherCon []] =
                                                                    [mode_sbog8
                                                                     $dIODevice_sbogd
                                                                     $dBufferedIO_sboge
                                                                     $dTypeable_sbogf
                                                                     ds_sbogg
                                                                     dt_sbogi
                                                                     dt1_sbogk
                                                                     dt2_sbogl
                                                                     dt3_sbogm
                                                                     ds3_sbogn
                                                                     ds4_sbogo
                                                                     ds5_sbogp
                                                                     ds6_sbogq
                                                                     ds7_sbogr
                                                                     ds8_sbogs
                                                                     wild1_sbogt
                                                                     ipv_sbogy] \r []
                                                                        case
                                                                            mode_sbog8
                                                                        of
                                                                        wild3_sbogE
                                                                        { __DEFAULT ->
                                                                              case
                                                                                  GHC.IO.Device.setRaw
                                                                                      $dIODevice_sbogd
                                                                                      ds_sbogg
                                                                                      GHC.Types.False
                                                                                      ipv_sbogy
                                                                              of
                                                                              { (#,#) ipv2_sbogG [Occ=Once]
                                                                                      _ [Occ=Dead] ->
                                                                                    case
                                                                                        writeMutVar# [dt3_sbogm
                                                                                                      GHC.IO.Handle.Types.BufferListNil
                                                                                                      ipv2_sbogG]
                                                                                    of
                                                                                    s2#_sbogI
                                                                                    { __DEFAULT ->
                                                                                          let {
                                                                                            sat_sbogJ [Occ=Once]
                                                                                              :: GHC.IO.Handle.Types.Handle__
                                                                                            [LclId] =
                                                                                                CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbogd
                                                                                                                                    $dBufferedIO_sboge
                                                                                                                                    $dTypeable_sbogf
                                                                                                                                    ds_sbogg
                                                                                                                                    wild1_sbogt
                                                                                                                                    dt_sbogi
                                                                                                                                    wild3_sbogE
                                                                                                                                    dt1_sbogk
                                                                                                                                    dt2_sbogl
                                                                                                                                    dt3_sbogm
                                                                                                                                    ds3_sbogn
                                                                                                                                    ds4_sbogo
                                                                                                                                    ds5_sbogp
                                                                                                                                    ds6_sbogq
                                                                                                                                    ds7_sbogr
                                                                                                                                    ds8_sbogs];
                                                                                          } in 
                                                                                            (#,#) [s2#_sbogI
                                                                                                   sat_sbogJ];
                                                                                    };
                                                                              };
                                                                          GHC.IO.Handle.Types.NoBuffering ->
                                                                              case
                                                                                  GHC.IO.Device.setRaw
                                                                                      $dIODevice_sbogd
                                                                                      ds_sbogg
                                                                                      GHC.Types.True
                                                                                      ipv_sbogy
                                                                              of
                                                                              { (#,#) ipv2_sbogL [Occ=Once]
                                                                                      _ [Occ=Dead] ->
                                                                                    case
                                                                                        writeMutVar# [dt3_sbogm
                                                                                                      GHC.IO.Handle.Types.BufferListNil
                                                                                                      ipv2_sbogL]
                                                                                    of
                                                                                    s2#_sbogN
                                                                                    { __DEFAULT ->
                                                                                          let {
                                                                                            sat_sbogO [Occ=Once]
                                                                                              :: GHC.IO.Handle.Types.Handle__
                                                                                            [LclId] =
                                                                                                CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbogd
                                                                                                                                    $dBufferedIO_sboge
                                                                                                                                    $dTypeable_sbogf
                                                                                                                                    ds_sbogg
                                                                                                                                    wild1_sbogt
                                                                                                                                    dt_sbogi
                                                                                                                                    GHC.IO.Handle.Types.NoBuffering
                                                                                                                                    dt1_sbogk
                                                                                                                                    dt2_sbogl
                                                                                                                                    dt3_sbogm
                                                                                                                                    ds3_sbogn
                                                                                                                                    ds4_sbogo
                                                                                                                                    ds5_sbogp
                                                                                                                                    ds6_sbogq
                                                                                                                                    ds7_sbogr
                                                                                                                                    ds8_sbogs];
                                                                                          } in 
                                                                                            (#,#) [s2#_sbogN
                                                                                                   sat_sbogO];
                                                                                    };
                                                                              };
                                                                        };
                                                              } in 
                                                                case wild1_sbogt of wild3_sbogP {
                                                                  __DEFAULT ->
                                                                      case
                                                                          writeMutVar# [dt3_sbogm
                                                                                        GHC.IO.Handle.Types.BufferListNil
                                                                                        ipv_sbogy]
                                                                      of
                                                                      s2#_sbogQ
                                                                      { __DEFAULT ->
                                                                            let {
                                                                              sat_sbogR [Occ=Once]
                                                                                :: GHC.IO.Handle.Types.Handle__
                                                                              [LclId] =
                                                                                  CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbogd
                                                                                                                      $dBufferedIO_sboge
                                                                                                                      $dTypeable_sbogf
                                                                                                                      ds_sbogg
                                                                                                                      wild3_sbogP
                                                                                                                      dt_sbogi
                                                                                                                      mode_sbog8
                                                                                                                      dt1_sbogk
                                                                                                                      dt2_sbogl
                                                                                                                      dt3_sbogm
                                                                                                                      ds3_sbogn
                                                                                                                      ds4_sbogo
                                                                                                                      ds5_sbogp
                                                                                                                      ds6_sbogq
                                                                                                                      ds7_sbogr
                                                                                                                      ds8_sbogs];
                                                                            } in 
                                                                              (#,#) [s2#_sbogQ
                                                                                     sat_sbogR];
                                                                      };
                                                                  GHC.IO.Handle.Types.ReadHandle ->
                                                                      $j1_sbogD;
                                                                  GHC.IO.Handle.Types.ReadWriteHandle ->
                                                                      $j1_sbogD;
                                                                };
                                                        };
                                                  };
                                        } in 
                                          case mode_sbog8 of {
                                            __DEFAULT -> $w$j_sbogv eta1_sbogb;
                                            GHC.IO.Handle.Types.BlockBuffering ds9_sbogT [Occ=Once!] ->
                                                case ds9_sbogT of {
                                                  GHC.Base.Nothing -> $w$j_sbogv eta1_sbogb;
                                                  GHC.Base.Just n_sbogV [Occ=Once!] ->
                                                      case n_sbogV of {
                                                        GHC.Types.I# x_sbogX ->
                                                            case <=# [x_sbogX 0#] of {
                                                              __DEFAULT -> $w$j_sbogv eta1_sbogb;
                                                              1# ->
                                                                  GHC.IO.Handle.Internals.$wioe_bufsiz
                                                                      x_sbogX eta1_sbogb;
                                                            };
                                                      };
                                                };
                                          };
                              } in 
                                case mode_sbog8 of {
                                  GHC.IO.Handle.Types.NoBuffering ->
                                      case ds2_sbogj of {
                                        __DEFAULT -> $j_sbogu;
                                        GHC.IO.Handle.Types.NoBuffering ->
                                            (#,#) [eta1_sbogb wild_sbogc];
                                      };
                                  GHC.IO.Handle.Types.LineBuffering ->
                                      case ds2_sbogj of {
                                        __DEFAULT -> $j_sbogu;
                                        GHC.IO.Handle.Types.LineBuffering ->
                                            (#,#) [eta1_sbogb wild_sbogc];
                                      };
                                  GHC.IO.Handle.Types.BlockBuffering a1_sboh3 [Occ=Once!] ->
                                      case ds2_sbogj of {
                                        __DEFAULT -> $j_sbogu;
                                        GHC.IO.Handle.Types.BlockBuffering b1_sboh5 [Occ=Once*!] ->
                                            case a1_sboh3 of {
                                              GHC.Base.Nothing ->
                                                  case b1_sboh5 of {
                                                    GHC.Base.Nothing ->
                                                        (#,#) [eta1_sbogb wild_sbogc];
                                                    GHC.Base.Just _ [Occ=Dead] -> $j_sbogu;
                                                  };
                                              GHC.Base.Just a2_sboh9 [Occ=Once!] ->
                                                  case b1_sboh5 of {
                                                    GHC.Base.Nothing -> $j_sbogu;
                                                    GHC.Base.Just b2_sbohb [Occ=Once!] ->
                                                        case a2_sboh9 of {
                                                          GHC.Types.I# x_sbohd [Occ=Once] ->
                                                              case b2_sbohb of {
                                                                GHC.Types.I# y_sbohf [Occ=Once] ->
                                                                    case ==# [x_sbohd y_sbohf] of {
                                                                      __DEFAULT -> $j_sbogu;
                                                                      1# ->
                                                                          (#,#) [eta1_sbogb
                                                                                 wild_sbogc];
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          GHC.IO.Handle.Types.ClosedHandle ->
                              GHC.IO.Handle.Internals.ioe_closedHandle1 eta1_sbogb;
                        };
                  };
        } in 
          GHC.IO.Handle.Internals.withAllHandles__1
              GHC.IO.Handle.hSetBuffering2 handle_sbog7 sat_sbohh eta_sbog9;

GHC.IO.Handle.hSetBuffering
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Types.BufferMode -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.hSetBuffering1 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.hIsEOF4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hIsEOF"#;

GHC.IO.Handle.hIsEOF3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hIsEOF4;

GHC.IO.Handle.hIsEOF2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_sbohi eta_sbohj]
        case ds_sbohi of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       $dBufferedIO_sbohm [Occ=Once]
                                       _ [Occ=Dead]
                                       ds1_sboho [Occ=Once]
                                       _ [Occ=Dead]
                                       dt_sbohq
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       dt2_sboht [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt2_sboht eta_sbohj] of {
                (#,#) ipv_sbohC [Occ=Once*] ipv1_sbohD [Occ=Once!] ->
                    case ipv1_sbohD of {
                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           dt7_sbohJ [Occ=Once]
                                           dt8_sbohK [Occ=Once] ->
                          case ==# [dt7_sbohJ dt8_sbohK] of {
                            __DEFAULT -> (#,#) [ipv_sbohC GHC.Types.False];
                            1# ->
                                case readMutVar# [dt_sbohq ipv_sbohC] of {
                                  (#,#) ipv2_sbohN [Occ=Once*] ipv3_sbohO [Occ=Once!] ->
                                      case ipv3_sbohO of wild2_sbohP {
                                        GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             dt12_sbohU [Occ=Once]
                                                             dt13_sbohV [Occ=Once] ->
                                            case ==# [dt12_sbohU dt13_sbohV] of {
                                              __DEFAULT -> (#,#) [ipv2_sbohN GHC.Types.False];
                                              1# ->
                                                  case
                                                      GHC.IO.BufferedIO.fillReadBuffer
                                                          $dBufferedIO_sbohm
                                                          ds1_sboho
                                                          wild2_sbohP
                                                          ipv2_sbohN
                                                  of
                                                  { (#,#) ipv4_sbohY [Occ=Once*]
                                                          ipv5_sbohZ [Occ=Once!] ->
                                                        case ipv5_sbohZ of {
                                                          (,) r_sboi1 [Occ=Once!]
                                                              bbuf'_sboi2 [Occ=Once] ->
                                                              case r_sboi1 of {
                                                                GHC.Types.I# x_sboi4 [Occ=Once!] ->
                                                                    case x_sboi4 of {
                                                                      __DEFAULT ->
                                                                          case
                                                                              writeMutVar# [dt_sbohq
                                                                                            bbuf'_sboi2
                                                                                            ipv4_sbohY]
                                                                          of
                                                                          s2#_sboi6
                                                                          { __DEFAULT ->
                                                                                (#,#) [s2#_sboi6
                                                                                       GHC.Types.False];
                                                                          };
                                                                      0# ->
                                                                          (#,#) [ipv4_sbohY
                                                                                 GHC.Types.True];
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.hIsEOF1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [handle_sboi7 eta_B1]
        GHC.IO.Handle.Internals.wantReadableHandle_1
            GHC.IO.Handle.hIsEOF3 handle_sboi7 GHC.IO.Handle.hIsEOF2 eta_B1;

GHC.IO.Handle.hIsEOF
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hIsEOF1 eta_B2 eta_B1;

GHC.IO.Handle.isEOF1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.IO.Handle.Internals.wantReadableHandle_1
            GHC.IO.Handle.hIsEOF3
            GHC.IO.Handle.FD.stdin
            GHC.IO.Handle.hIsEOF2
            eta_B1;

GHC.IO.Handle.isEOF :: GHC.Types.IO GHC.Types.Bool
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.IO.Handle.isEOF1 eta_B1;

lvl19_rbnX1 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hSetFileSize"#;

lvl20_rbnX2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl19_rbnX1;

GHC.IO.Handle.hSetFileSize1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Integer.Type.Integer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sboi8 size_sboi9 eta_sboia]
        let {
          act_sboib [Occ=OnceL*!, Dmd=<L,C(C1(U(U,U)))>]
            :: GHC.IO.Handle.Types.Handle__
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
          [LclId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
              sat-only [size_sboi9] \r [handle__sboic eta1_sboid]
                  case handle__sboic of {
                    GHC.IO.Handle.Types.Handle__ $dIODevice_sboif [Occ=Once*]
                                                 $dBufferedIO_sboig [Occ=Once]
                                                 _ [Occ=Dead]
                                                 ds_sboii
                                                 ds1_sboij [Occ=Once!]
                                                 dt_sboik
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead] ->
                        case ds1_sboij of {
                          __DEFAULT ->
                              case readMutVar# [dt_sboik eta1_sboid] of {
                                (#,#) ipv_sboix [Occ=Once*] ipv1_sboiy [Occ=Once!] ->
                                    case ipv1_sboiy of {
                                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           ds10_sboiC [Occ=Once!]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead] ->
                                          case ds10_sboiC of {
                                            GHC.IO.Buffer.ReadBuffer ->
                                                case
                                                    GHC.IO.Device.setSize
                                                        $dIODevice_sboif
                                                        ds_sboii
                                                        size_sboi9
                                                        ipv_sboix
                                                of
                                                { (#,#) ipv2_sboiI [Occ=Once] _ [Occ=Dead] ->
                                                      (#,#) [ipv2_sboiI GHC.Tuple.()];
                                                };
                                            GHC.IO.Buffer.WriteBuffer ->
                                                case readMutVar# [dt_sboik ipv_sboix] of {
                                                  (#,#) ipv2_sboiL [Occ=Once*]
                                                        ipv3_sboiM [Occ=Once!] ->
                                                      case ipv3_sboiM of wild4_sboiN {
                                                        GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                             _ [Occ=Dead]
                                                                             _ [Occ=Dead]
                                                                             _ [Occ=Dead]
                                                                             dt12_sboiS [Occ=Once]
                                                                             dt13_sboiT [Occ=Once] ->
                                                            case ==# [dt12_sboiS dt13_sboiT] of {
                                                              __DEFAULT ->
                                                                  case
                                                                      GHC.IO.BufferedIO.flushWriteBuffer
                                                                          $dBufferedIO_sboig
                                                                          ds_sboii
                                                                          wild4_sboiN
                                                                          ipv2_sboiL
                                                                  of
                                                                  { (#,#) ipv4_sboiW [Occ=Once]
                                                                          ipv5_sboiX [Occ=Once] ->
                                                                        case
                                                                            writeMutVar# [dt_sboik
                                                                                          ipv5_sboiX
                                                                                          ipv4_sboiW]
                                                                        of
                                                                        s2#_sboiY
                                                                        { __DEFAULT ->
                                                                              case
                                                                                  GHC.IO.Device.setSize
                                                                                      $dIODevice_sboif
                                                                                      ds_sboii
                                                                                      size_sboi9
                                                                                      s2#_sboiY
                                                                              of
                                                                              { (#,#) ipv7_sboj0 [Occ=Once]
                                                                                      _ [Occ=Dead] ->
                                                                                    (#,#) [ipv7_sboj0
                                                                                           GHC.Tuple.()];
                                                                              };
                                                                        };
                                                                  };
                                                              1# ->
                                                                  case
                                                                      GHC.IO.Device.setSize
                                                                          $dIODevice_sboif
                                                                          ds_sboii
                                                                          size_sboi9
                                                                          ipv2_sboiL
                                                                  of
                                                                  { (#,#) ipv4_sboj3 [Occ=Once]
                                                                          _ [Occ=Dead] ->
                                                                        (#,#) [ipv4_sboj3
                                                                               GHC.Tuple.()];
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                          GHC.IO.Handle.Types.ClosedHandle ->
                              GHC.IO.Handle.Internals.ioe_closedHandle1 eta1_sboid;
                          GHC.IO.Handle.Types.SemiClosedHandle ->
                              GHC.IO.Handle.Internals.ioe_semiclosedHandle1 eta1_sboid;
                        };
                  };
        } in 
          case handle_sboi8 of wild_sboj5 {
            GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sboj7 ->
                case getMaskingState# [eta_sboia] of {
                  (#,#) ipv_sboj9 [Occ=Once*] ipv1_sboja [Occ=Once!] ->
                      let {
                        io_sbojb [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                          :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                        [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                            [act_sboib wild_sboj5 dt_sboj7] \r [s_sbojc]
                                let {
                                  sat_sbojj [Occ=Once]
                                    :: GHC.IO.Handle.Types.Handle__
                                       -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, ())
                                  [LclId] =
                                      [act_sboib] \r [h__sbojd s1_sboje]
                                          case act_sboib h__sbojd s1_sboje of {
                                            (#,#) ipv2_sbojg [Occ=Once] ipv3_sbojh [Occ=Once] ->
                                                let {
                                                  sat_sboji [Occ=Once]
                                                    :: (GHC.IO.Handle.Types.Handle__, ())
                                                  [LclId] =
                                                      CCCS (,)! [h__sbojd ipv3_sbojh];
                                                } in  (#,#) [ipv2_sbojg sat_sboji];
                                          };
                                } in 
                                  case
                                      GHC.IO.Handle.Internals.$wdo_operation
                                          lvl20_rbnX2 wild_sboj5 sat_sbojj dt_sboj7 s_sbojc
                                  of
                                  { (#,#) ipv2_sbojl [Occ=Once] ipv3_sbojm [Occ=Once!] ->
                                        case ipv3_sbojm of {
                                          (,) h'_sbojo [Occ=Once] v_sbojp [Occ=Once] ->
                                              case
                                                  putMVar# [dt_sboj7 h'_sbojo ipv2_sbojl]
                                              of
                                              s2#_sbojq
                                              { __DEFAULT -> (#,#) [s2#_sbojq v_sbojp];
                                              };
                                        };
                                  };
                      } in 
                        case ipv1_sboja of {
                          __DEFAULT -> io_sbojb ipv_sboj9;
                          0# -> maskAsyncExceptions# [io_sbojb ipv_sboj9];
                        };
                };
            GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                             dt_sbojt
                                             _ [Occ=Dead] ->
                case getMaskingState# [eta_sboia] of {
                  (#,#) ipv_sbojw [Occ=Once*] ipv1_sbojx [Occ=Once!] ->
                      let {
                        io_sbojy [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                          :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                        [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                            [act_sboib wild_sboj5 dt_sbojt] \r [s_sbojz]
                                let {
                                  sat_sbojG [Occ=Once]
                                    :: GHC.IO.Handle.Types.Handle__
                                       -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, ())
                                  [LclId] =
                                      [act_sboib] \r [h__sbojA s1_sbojB]
                                          case act_sboib h__sbojA s1_sbojB of {
                                            (#,#) ipv2_sbojD [Occ=Once] ipv3_sbojE [Occ=Once] ->
                                                let {
                                                  sat_sbojF [Occ=Once]
                                                    :: (GHC.IO.Handle.Types.Handle__, ())
                                                  [LclId] =
                                                      CCCS (,)! [h__sbojA ipv3_sbojE];
                                                } in  (#,#) [ipv2_sbojD sat_sbojF];
                                          };
                                } in 
                                  case
                                      GHC.IO.Handle.Internals.$wdo_operation
                                          lvl20_rbnX2 wild_sboj5 sat_sbojG dt_sbojt s_sbojz
                                  of
                                  { (#,#) ipv2_sbojI [Occ=Once] ipv3_sbojJ [Occ=Once!] ->
                                        case ipv3_sbojJ of {
                                          (,) h'_sbojL [Occ=Once] v_sbojM [Occ=Once] ->
                                              case
                                                  putMVar# [dt_sbojt h'_sbojL ipv2_sbojI]
                                              of
                                              s2#_sbojN
                                              { __DEFAULT -> (#,#) [s2#_sbojN v_sbojM];
                                              };
                                        };
                                  };
                      } in 
                        case ipv1_sbojx of {
                          __DEFAULT -> io_sbojy ipv_sbojw;
                          0# -> maskAsyncExceptions# [io_sbojy ipv_sbojw];
                        };
                };
          };

GHC.IO.Handle.hSetFileSize
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Integer.Type.Integer -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.hSetFileSize1 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.hFileSize9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hFileSize"#;

GHC.IO.Handle.hFileSize8 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hFileSize9;

GHC.IO.Handle.hFileSize7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "not a regular file"#;

GHC.IO.Handle.hFileSize6 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hFileSize7;

GHC.IO.Handle.hFileSize5 :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.InappropriateType
                                             GHC.IO.Handle.hFileSize8
                                             GHC.IO.Handle.hFileSize6
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Handle.hFileSize4 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Handle.hFileSize5;

sat_sbojP :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

sat_sbojQ :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sbojP GHC.Types.[]];

GHC.IO.Handle.hFileSize10 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.False sat_sbojQ;

GHC.IO.Handle.hFileSize3
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Integer.Type.Integer #)
[GblId, Arity=2, Str=<S,1*U><S,U>m, Unf=OtherCon []] =
    [] \r [handle__sbojR eta_sbojS]
        case handle__sbojR of {
          GHC.IO.Handle.Types.Handle__ $dIODevice_sbojU [Occ=Once]
                                       $dBufferedIO_sbojV [Occ=Once]
                                       _ [Occ=Dead]
                                       ds_sbojX
                                       ds1_sbojY [Occ=Once!]
                                       dt_sbojZ
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds1_sbojY of {
                __DEFAULT ->
                    case readMutVar# [dt_sbojZ eta_sbojS] of {
                      (#,#) ipv_sbokc [Occ=Once*] ipv1_sbokd [Occ=Once!] ->
                          case ipv1_sbokd of {
                            GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 ds10_sbokh [Occ=Once!]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead] ->
                                let-no-escape {
                                  $w$j_sbokl [InlPrag=NOUSERINLINE[0],
                                              Occ=Once*!T[1],
                                              Dmd=<L,1*C1(U(U,U))>]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                             GHC.Integer.Type.Integer #)
                                  [LclId[JoinId(1)], Arity=1, Str=<S,U>m, Unf=OtherCon []] =
                                      sat-only [$dIODevice_sbojU ds_sbojX] \r [w_sbokm]
                                          case
                                              GHC.IO.Device.getSize
                                                  $dIODevice_sbojU ds_sbojX w_sbokm
                                          of
                                          ds12_sbokn
                                          { (#,#) ipv2_sboko [Occ=Once] ipv3_sbokp [Occ=Once] ->
                                                case
                                                    GHC.Integer.Type.neqInteger#
                                                        ipv3_sbokp GHC.IO.Handle.hFileSize10
                                                of
                                                { __DEFAULT ->
                                                      raiseIO# [GHC.IO.Handle.hFileSize4
                                                                ipv2_sboko];
                                                  1# -> ds12_sbokn;
                                                };
                                          };
                                } in 
                                  case ds10_sbokh of {
                                    GHC.IO.Buffer.ReadBuffer -> $w$j_sbokl ipv_sbokc;
                                    GHC.IO.Buffer.WriteBuffer ->
                                        case readMutVar# [dt_sbojZ ipv_sbokc] of {
                                          (#,#) ipv2_sbokt [Occ=Once*] ipv3_sboku [Occ=Once!] ->
                                              case ipv3_sboku of wild4_sbokv {
                                                GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     dt12_sbokA [Occ=Once]
                                                                     dt13_sbokB [Occ=Once] ->
                                                    case ==# [dt12_sbokA dt13_sbokB] of {
                                                      __DEFAULT ->
                                                          case
                                                              GHC.IO.BufferedIO.flushWriteBuffer
                                                                  $dBufferedIO_sbojV
                                                                  ds_sbojX
                                                                  wild4_sbokv
                                                                  ipv2_sbokt
                                                          of
                                                          { (#,#) ipv4_sbokE [Occ=Once]
                                                                  ipv5_sbokF [Occ=Once] ->
                                                                case
                                                                    writeMutVar# [dt_sbojZ
                                                                                  ipv5_sbokF
                                                                                  ipv4_sbokE]
                                                                of
                                                                s2#_sbokG
                                                                { __DEFAULT -> $w$j_sbokl s2#_sbokG;
                                                                };
                                                          };
                                                      1# -> $w$j_sbokl ipv2_sbokt;
                                                    };
                                              };
                                        };
                                  };
                          };
                    };
                GHC.IO.Handle.Types.ClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_closedHandle1 eta_sbojS;
                GHC.IO.Handle.Types.SemiClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_semiclosedHandle1 eta_sbojS;
              };
        };

GHC.IO.Handle.hFileSize2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, GHC.Integer.Type.Integer) #)
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [h__sbokH s1_sbokI]
        case GHC.IO.Handle.hFileSize3 h__sbokH s1_sbokI of {
          (#,#) ipv_sbokK [Occ=Once] ipv1_sbokL [Occ=Once] ->
              let {
                sat_sbokM [Occ=Once]
                  :: (GHC.IO.Handle.Types.Handle__, GHC.Integer.Type.Integer)
                [LclId] =
                    CCCS (,)! [h__sbokH ipv1_sbokL];
              } in  (#,#) [ipv_sbokK sat_sbokM];
        };

GHC.IO.Handle.hFileSize1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Integer.Type.Integer #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbokN eta_sbokO]
        case handle_sbokN of wild_sbokP {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbokR ->
              case getMaskingState# [eta_sbokO] of {
                (#,#) ipv_sbokT [Occ=Once*] ipv1_sbokU [Occ=Once!] ->
                    let {
                      io_sbokV [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 GHC.Integer.Type.Integer #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbokP dt_sbokR] \r [s_sbokW]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hFileSize8
                                      wild_sbokP
                                      GHC.IO.Handle.hFileSize2
                                      dt_sbokR
                                      s_sbokW
                              of
                              { (#,#) ipv2_sbokY [Occ=Once] ipv3_sbokZ [Occ=Once!] ->
                                    case ipv3_sbokZ of {
                                      (,) h'_sbol1 [Occ=Once] v_sbol2 [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbokR h'_sbol1 ipv2_sbokY]
                                          of
                                          s2#_sbol3
                                          { __DEFAULT -> (#,#) [s2#_sbol3 v_sbol2];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbokU of {
                        __DEFAULT -> io_sbokV ipv_sbokT;
                        0# -> maskAsyncExceptions# [io_sbokV ipv_sbokT];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sbol6
                                           _ [Occ=Dead] ->
              case getMaskingState# [eta_sbokO] of {
                (#,#) ipv_sbol9 [Occ=Once*] ipv1_sbola [Occ=Once!] ->
                    let {
                      io_sbolb [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 GHC.Integer.Type.Integer #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbokP dt_sbol6] \r [s_sbolc]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hFileSize8
                                      wild_sbokP
                                      GHC.IO.Handle.hFileSize2
                                      dt_sbol6
                                      s_sbolc
                              of
                              { (#,#) ipv2_sbole [Occ=Once] ipv3_sbolf [Occ=Once!] ->
                                    case ipv3_sbolf of {
                                      (,) h'_sbolh [Occ=Once] v_sboli [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbol6 h'_sbolh ipv2_sbole]
                                          of
                                          s2#_sbolj
                                          { __DEFAULT -> (#,#) [s2#_sbolj v_sboli];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbola of {
                        __DEFAULT -> io_sbolb ipv_sbol9;
                        0# -> maskAsyncExceptions# [io_sbolb ipv_sbol9];
                      };
              };
        };

GHC.IO.Handle.hFileSize
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Types.IO GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hFileSize1 eta_B2 eta_B1;

lvl21_rbnX3
  :: GHC.Base.Maybe
       (GHC.IO.FilePath
        -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ())
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.IO.Handle.Internals.handleFinalizer1];

GHC.IO.Handle.hDuplicateTo1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h1_sboll h2_sbolm eta_sboln]
        case h1_sboll of wild_sbolo {
          GHC.IO.Handle.Types.FileHandle path_sbolp [Occ=OnceL]
                                         dt_sbolq [Occ=OnceL] ->
              case h2_sbolm of wild1_sbolr {
                GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt1_sbolt [Occ=Once] ->
                    let {
                      sat_sbolG [Occ=Once]
                        :: GHC.IO.Handle.Types.Handle__
                           -> GHC.Types.IO GHC.IO.Handle.Types.Handle__
                      [LclId] =
                          [wild_sbolo path_sbolp dt_sbolq] \r [h2__sbolu s_sbolv]
                              case GHC.IO.Handle.Internals.hClose_help1 h2__sbolu s_sbolv of {
                                (#,#) ipv_sbolx [Occ=Once] _ [Occ=Dead] ->
                                    let {
                                      sat_sbolF [Occ=Once]
                                        :: GHC.IO.Handle.Types.Handle__
                                           -> GHC.Types.IO
                                                (GHC.IO.Handle.Types.Handle__,
                                                 GHC.IO.Handle.Types.Handle__)
                                      [LclId] =
                                          [wild_sbolo path_sbolp h2__sbolu] \r [h__sbolz s1_sbolA]
                                              case
                                                  dupHandleTo_rbnWN
                                                      path_sbolp
                                                      wild_sbolo
                                                      GHC.Base.Nothing
                                                      h2__sbolu
                                                      h__sbolz
                                                      lvl21_rbnX3
                                                      s1_sbolA
                                              of
                                              { (#,#) ipv2_sbolC [Occ=Once] ipv3_sbolD [Occ=Once] ->
                                                    let {
                                                      sat_sbolE [Occ=Once]
                                                        :: (GHC.IO.Handle.Types.Handle__,
                                                            GHC.IO.Handle.Types.Handle__)
                                                      [LclId] =
                                                          CCCS (,)! [h__sbolz ipv3_sbolD];
                                                    } in  (#,#) [ipv2_sbolC sat_sbolE];
                                              };
                                    } in 
                                      GHC.IO.Handle.Internals.$wwithHandle'
                                          lvl1_rbnWC wild_sbolo dt_sbolq sat_sbolF ipv_sbolx;
                              };
                    } in 
                      GHC.IO.Handle.Internals.$wwithHandle__'
                          lvl1_rbnWC wild1_sbolr dt1_sbolt sat_sbolG eta_sboln;
                GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead] ->
                    ioe_dupHandlesNotCompatible_rbnWF wild_sbolo eta_sboln;
              };
          GHC.IO.Handle.Types.DuplexHandle path_sbolK
                                           dt_sbolL [Occ=OnceL]
                                           dt1_sbolM ->
              case h2_sbolm of wild1_sbolN {
                GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] _ [Occ=Dead] ->
                    ioe_dupHandlesNotCompatible_rbnWF wild_sbolo eta_sboln;
                GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                 dt2_sbolR [Occ=Once]
                                                 dt3_sbolS [Occ=Once] ->
                    let {
                      sat_sbom5 [Occ=Once]
                        :: GHC.IO.Handle.Types.Handle__
                           -> GHC.Types.IO GHC.IO.Handle.Types.Handle__
                      [LclId] =
                          [wild_sbolo path_sbolK dt1_sbolM] \r [w2__sbolT s_sbolU]
                              case GHC.IO.Handle.Internals.hClose_help1 w2__sbolT s_sbolU of {
                                (#,#) ipv_sbolW [Occ=Once] _ [Occ=Dead] ->
                                    let {
                                      sat_sbom4 [Occ=Once]
                                        :: GHC.IO.Handle.Types.Handle__
                                           -> GHC.Types.IO
                                                (GHC.IO.Handle.Types.Handle__,
                                                 GHC.IO.Handle.Types.Handle__)
                                      [LclId] =
                                          [wild_sbolo path_sbolK w2__sbolT] \r [h__sbolY s1_sbolZ]
                                              case
                                                  dupHandleTo_rbnWN
                                                      path_sbolK
                                                      wild_sbolo
                                                      GHC.Base.Nothing
                                                      w2__sbolT
                                                      h__sbolY
                                                      lvl21_rbnX3
                                                      s1_sbolZ
                                              of
                                              { (#,#) ipv2_sbom1 [Occ=Once] ipv3_sbom2 [Occ=Once] ->
                                                    let {
                                                      sat_sbom3 [Occ=Once]
                                                        :: (GHC.IO.Handle.Types.Handle__,
                                                            GHC.IO.Handle.Types.Handle__)
                                                      [LclId] =
                                                          CCCS (,)! [h__sbolY ipv3_sbom2];
                                                    } in  (#,#) [ipv2_sbom1 sat_sbom3];
                                              };
                                    } in 
                                      GHC.IO.Handle.Internals.$wwithHandle'
                                          lvl1_rbnWC wild_sbolo dt1_sbolM sat_sbom4 ipv_sbolW;
                              };
                    } in 
                      case
                          GHC.IO.Handle.Internals.$wwithHandle__'
                              lvl1_rbnWC wild1_sbolN dt3_sbolS sat_sbom5 eta_sboln
                      of
                      { (#,#) ipv_sbom7 [Occ=Once] _ [Occ=Dead] ->
                            let {
                              w1_sbom9 [Occ=OnceL] :: GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
                              [LclId, Unf=OtherCon []] =
                                  CCCS GHC.MVar.MVar! [dt1_sbolM]; } in
                            let {
                              lvl48_sboma [Occ=OnceL]
                                :: GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
                              [LclId, Unf=OtherCon []] =
                                  CCCS GHC.Base.Just! [w1_sbom9]; } in
                            let {
                              sat_sbomn [Occ=Once]
                                :: GHC.IO.Handle.Types.Handle__
                                   -> GHC.Types.IO GHC.IO.Handle.Types.Handle__
                              [LclId] =
                                  [wild_sbolo path_sbolK dt_sbolL lvl48_sboma] \r [r2__sbomb
                                                                                   s_sbomc]
                                      case
                                          GHC.IO.Handle.Internals.hClose_help1 r2__sbomb s_sbomc
                                      of
                                      { (#,#) ipv2_sbome [Occ=Once] _ [Occ=Dead] ->
                                            let {
                                              sat_sbomm [Occ=Once]
                                                :: GHC.IO.Handle.Types.Handle__
                                                   -> GHC.Types.IO
                                                        (GHC.IO.Handle.Types.Handle__,
                                                         GHC.IO.Handle.Types.Handle__)
                                              [LclId] =
                                                  [wild_sbolo
                                                   path_sbolK
                                                   lvl48_sboma
                                                   r2__sbomb] \r [h__sbomg s1_sbomh]
                                                      case
                                                          dupHandleTo_rbnWN
                                                              path_sbolK
                                                              wild_sbolo
                                                              lvl48_sboma
                                                              r2__sbomb
                                                              h__sbomg
                                                              GHC.Base.Nothing
                                                              s1_sbomh
                                                      of
                                                      { (#,#) ipv4_sbomj [Occ=Once]
                                                              ipv5_sbomk [Occ=Once] ->
                                                            let {
                                                              sat_sboml [Occ=Once]
                                                                :: (GHC.IO.Handle.Types.Handle__,
                                                                    GHC.IO.Handle.Types.Handle__)
                                                              [LclId] =
                                                                  CCCS (,)! [h__sbomg ipv5_sbomk];
                                                            } in  (#,#) [ipv4_sbomj sat_sboml];
                                                      };
                                            } in 
                                              GHC.IO.Handle.Internals.$wwithHandle'
                                                  lvl1_rbnWC
                                                  wild_sbolo
                                                  dt_sbolL
                                                  sat_sbomm
                                                  ipv2_sbome;
                                      };
                            } in 
                              GHC.IO.Handle.Internals.$wwithHandle__'
                                  lvl1_rbnWC wild1_sbolN dt2_sbolR sat_sbomn ipv_sbom7;
                      };
              };
        };

GHC.IO.Handle.hDuplicateTo
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Types.Handle -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,1*U><S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.hDuplicateTo1 eta_B3 eta_B2 eta_B1;

lvl22_rbnX4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hDuplicate"#;

lvl23_rbnX5 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl22_rbnX4;

lvl24_rbnX6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Pattern match failure in do expression at GHC/IO/Handle.hs:626:3-33"#;

lvl25_rbnX7
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_sbomo]
        case GHC.CString.unpackCString# lvl24_rbnX6 of sat_sbomp {
          __DEFAULT -> GHC.IO.failIO1 sat_sbomp eta_sbomo;
        };

lvl26_rbnX8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Pattern match failure in do expression at GHC/IO/Handle.hs:623:3-35"#;

lvl27_rbnX9
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_sbomq]
        case GHC.CString.unpackCString# lvl26_rbnX8 of sat_sbomr {
          __DEFAULT -> GHC.IO.failIO1 sat_sbomr eta_sbomq;
        };

GHC.IO.Handle.hDuplicate1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h_sboms eta_sbomt]
        case h_sboms of wild_sbomu {
          GHC.IO.Handle.Types.FileHandle path_sbomv [Occ=OnceL]
                                         dt_sbomw [Occ=Once] ->
              let {
                sat_sbon0 [Occ=Once]
                  :: GHC.IO.Handle.Types.Handle__
                     -> GHC.Types.IO
                          (GHC.IO.Handle.Types.Handle__, GHC.IO.Handle.Types.Handle)
                [LclId] =
                    [path_sbomv] \r [h__sbomx s_sbomy]
                        case h__sbomx of wild1_sbomz {
                          GHC.IO.Handle.Types.Handle__ $dIODevice_sbomA
                                                       $dBufferedIO_sbomB [Occ=Once]
                                                       $dTypeable_sbomC [Occ=Once]
                                                       ds_sbomD [Occ=Once]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead] ->
                              case GHC.IO.Handle.Internals.flushBuffer1 wild1_sbomz s_sbomy of {
                                (#,#) ipv_sbomR [Occ=Once] _ [Occ=Dead] ->
                                    case GHC.IO.Device.dup $dIODevice_sbomA ds_sbomD ipv_sbomR of {
                                      (#,#) ipv2_sbomU [Occ=Once] ipv3_sbomV [Occ=Once] ->
                                          case
                                              dupHandle__rbnWK
                                                  $dIODevice_sbomA
                                                  $dBufferedIO_sbomB
                                                  $dTypeable_sbomC
                                                  ipv3_sbomV
                                                  path_sbomv
                                                  GHC.Base.Nothing
                                                  wild1_sbomz
                                                  lvl21_rbnX3
                                                  ipv2_sbomU
                                          of
                                          { (#,#) ipv4_sbomX [Occ=Once] ipv5_sbomY [Occ=Once] ->
                                                let {
                                                  sat_sbomZ [Occ=Once]
                                                    :: (GHC.IO.Handle.Types.Handle__,
                                                        GHC.IO.Handle.Types.Handle)
                                                  [LclId] =
                                                      CCCS (,)! [wild1_sbomz ipv5_sbomY];
                                                } in  (#,#) [ipv4_sbomX sat_sbomZ];
                                          };
                                    };
                              };
                        };
              } in 
                GHC.IO.Handle.Internals.$wwithHandle'
                    lvl23_rbnX5 wild_sbomu dt_sbomw sat_sbon0 eta_sbomt;
          GHC.IO.Handle.Types.DuplexHandle path_sbon1
                                           dt_sbon2 [Occ=Once]
                                           dt1_sbon3 [Occ=Once] ->
              let {
                sat_sbonx [Occ=Once]
                  :: GHC.IO.Handle.Types.Handle__
                     -> GHC.Types.IO
                          (GHC.IO.Handle.Types.Handle__, GHC.IO.Handle.Types.Handle)
                [LclId] =
                    [path_sbon1] \r [h__sbon4 s_sbon5]
                        case h__sbon4 of wild1_sbon6 {
                          GHC.IO.Handle.Types.Handle__ $dIODevice_sbon7
                                                       $dBufferedIO_sbon8 [Occ=Once]
                                                       $dTypeable_sbon9 [Occ=Once]
                                                       ds_sbona [Occ=Once]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead] ->
                              case GHC.IO.Handle.Internals.flushBuffer1 wild1_sbon6 s_sbon5 of {
                                (#,#) ipv_sbono [Occ=Once] _ [Occ=Dead] ->
                                    case GHC.IO.Device.dup $dIODevice_sbon7 ds_sbona ipv_sbono of {
                                      (#,#) ipv2_sbonr [Occ=Once] ipv3_sbons [Occ=Once] ->
                                          case
                                              dupHandle__rbnWK
                                                  $dIODevice_sbon7
                                                  $dBufferedIO_sbon8
                                                  $dTypeable_sbon9
                                                  ipv3_sbons
                                                  path_sbon1
                                                  GHC.Base.Nothing
                                                  wild1_sbon6
                                                  lvl21_rbnX3
                                                  ipv2_sbonr
                                          of
                                          { (#,#) ipv4_sbonu [Occ=Once] ipv5_sbonv [Occ=Once] ->
                                                let {
                                                  sat_sbonw [Occ=Once]
                                                    :: (GHC.IO.Handle.Types.Handle__,
                                                        GHC.IO.Handle.Types.Handle)
                                                  [LclId] =
                                                      CCCS (,)! [wild1_sbon6 ipv5_sbonv];
                                                } in  (#,#) [ipv4_sbonu sat_sbonw];
                                          };
                                    };
                              };
                        };
              } in 
                case
                    GHC.IO.Handle.Internals.$wwithHandle'
                        lvl23_rbnX5 wild_sbomu dt1_sbon3 sat_sbonx eta_sbomt
                of
                { (#,#) ipv_sbonz [Occ=Once*] ipv1_sbonA [Occ=Once!] ->
                      case ipv1_sbonA of {
                        GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt2_sbonD ->
                            let {
                              write_m_sbonE [Occ=OnceL]
                                :: GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
                              [LclId, Unf=OtherCon []] =
                                  CCCS GHC.MVar.MVar! [dt2_sbonD]; } in
                            let {
                              lvl48_sbonF [Occ=OnceL]
                                :: GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
                              [LclId, Unf=OtherCon []] =
                                  CCCS GHC.Base.Just! [write_m_sbonE]; } in
                            let {
                              sat_sboou [Occ=Once]
                                :: GHC.IO.Handle.Types.Handle__
                                   -> GHC.Types.IO
                                        (GHC.IO.Handle.Types.Handle__, GHC.IO.Handle.Types.Handle)
                              [LclId] =
                                  [wild_sbomu path_sbon1 dt2_sbonD lvl48_sbonF] \r [h__sbonG
                                                                                    s_sbonH]
                                      case h__sbonG of wild2_sbonI {
                                        GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead] ->
                                            case
                                                GHC.IO.Handle.Internals.flushBuffer1
                                                    wild2_sbonI s_sbonH
                                            of
                                            { (#,#) ipv2_sboo0 [Occ=Once] _ [Occ=Dead] ->
                                                  let {
                                                    sat_sboop [Occ=Once]
                                                      :: GHC.IO.Handle.Types.Handle__
                                                         -> GHC.Types.IO
                                                              (GHC.IO.Handle.Types.Handle__,
                                                               GHC.IO.Handle.Types.Handle)
                                                    [LclId] =
                                                        [path_sbon1
                                                         lvl48_sbonF
                                                         wild2_sbonI] \r [h_1_sboo2 s1_sboo3]
                                                            case h_1_sboo2 of wild3_sboo4 {
                                                              GHC.IO.Handle.Types.Handle__ $dIODevice1_sboo5 [Occ=Once]
                                                                                           $dBufferedIO1_sboo6 [Occ=Once]
                                                                                           $dTypeable1_sboo7 [Occ=Once]
                                                                                           ds12_sboo8 [Occ=Once]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead] ->
                                                                  case
                                                                      dupHandle__rbnWK
                                                                          $dIODevice1_sboo5
                                                                          $dBufferedIO1_sboo6
                                                                          $dTypeable1_sboo7
                                                                          ds12_sboo8
                                                                          path_sbon1
                                                                          lvl48_sbonF
                                                                          wild2_sbonI
                                                                          GHC.Base.Nothing
                                                                          s1_sboo3
                                                                  of
                                                                  { (#,#) ipv4_sboom [Occ=Once]
                                                                          ipv5_sboon [Occ=Once] ->
                                                                        let {
                                                                          sat_sbooo [Occ=Once]
                                                                            :: (GHC.IO.Handle.Types.Handle__,
                                                                                GHC.IO.Handle.Types.Handle)
                                                                          [LclId] =
                                                                              CCCS (,)! [wild3_sboo4
                                                                                         ipv5_sboon];
                                                                        } in 
                                                                          (#,#) [ipv4_sboom
                                                                                 sat_sbooo];
                                                                  };
                                                            };
                                                  } in 
                                                    case
                                                        GHC.IO.Handle.Internals.$wwithHandle'
                                                            lvl7_rbnWP
                                                            wild_sbomu
                                                            dt2_sbonD
                                                            sat_sboop
                                                            ipv2_sboo0
                                                    of
                                                    { (#,#) ipv4_sboor [Occ=Once]
                                                            ipv5_sboos [Occ=Once] ->
                                                          let {
                                                            sat_sboot [Occ=Once]
                                                              :: (GHC.IO.Handle.Types.Handle__,
                                                                  GHC.IO.Handle.Types.Handle)
                                                            [LclId] =
                                                                CCCS (,)! [wild2_sbonI ipv5_sboos];
                                                          } in  (#,#) [ipv4_sboor sat_sboot];
                                                    };
                                            };
                                      };
                            } in 
                              case
                                  GHC.IO.Handle.Internals.$wwithHandle'
                                      lvl23_rbnX5 wild_sbomu dt_sbon2 sat_sboou ipv_sbonz
                              of
                              { (#,#) ipv2_sboow [Occ=Once*] ipv3_sboox [Occ=Once!] ->
                                    case ipv3_sboox of {
                                      GHC.IO.Handle.Types.FileHandle _ [Occ=Dead]
                                                                     dt3_sbooA [Occ=Once] ->
                                          let {
                                            sat_sbooB [Occ=Once] :: GHC.IO.Handle.Types.Handle
                                            [LclId] =
                                                CCCS GHC.IO.Handle.Types.DuplexHandle! [path_sbon1
                                                                                        dt3_sbooA
                                                                                        dt2_sbonD];
                                          } in  (#,#) [ipv2_sboow sat_sbooB];
                                      GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                          lvl25_rbnX7 ipv2_sboow;
                                    };
                              };
                        GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                         _ [Occ=Dead]
                                                         _ [Occ=Dead] ->
                            lvl27_rbnX9 ipv_sbonz;
                      };
                };
        };

GHC.IO.Handle.hDuplicate
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hDuplicate1 eta_B2 eta_B1;

GHC.IO.Handle.hGetEcho4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hGetEcho"#;

GHC.IO.Handle.hGetEcho3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hGetEcho4;

GHC.IO.Handle.hGetEcho2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool) #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h__sbooI s1_sbooJ]
        case h__sbooI of wild_sbooK {
          GHC.IO.Handle.Types.Handle__ $dIODevice_sbooL [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds_sbooO [Occ=Once]
                                       ds1_sbooP [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds1_sbooP of {
                __DEFAULT ->
                    case GHC.IO.Device.getEcho $dIODevice_sbooL ds_sbooO s1_sbooJ of {
                      (#,#) ipv_sbop3 [Occ=Once] ipv1_sbop4 [Occ=Once] ->
                          let {
                            sat_sbop5 [Occ=Once]
                              :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                            [LclId] =
                                CCCS (,)! [wild_sbooK ipv1_sbop4];
                          } in  (#,#) [ipv_sbop3 sat_sbop5];
                    };
                GHC.IO.Handle.Types.ClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_closedHandle1 s1_sbooJ;
              };
        };

GHC.IO.Handle.hGetEcho1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbop7 s_sbop8]
        case GHC.IO.Handle.hGetEcho5 handle_sbop7 s_sbop8 of {
          (#,#) ipv_sbopa [Occ=Once*] ipv1_sbopb [Occ=Once!] ->
              case ipv1_sbopb of {
                GHC.Types.False -> (#,#) [ipv_sbopa GHC.Types.False];
                GHC.Types.True ->
                    case handle_sbop7 of wild1_sbopd {
                      GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbopf ->
                          case getMaskingState# [ipv_sbopa] of {
                            (#,#) ipv2_sboph [Occ=Once*] ipv3_sbopi [Occ=Once!] ->
                                let {
                                  io_sbopj [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                                  [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                      [wild1_sbopd dt_sbopf] \r [s1_sbopk]
                                          case
                                              GHC.IO.Handle.Internals.$wdo_operation
                                                  GHC.IO.Handle.hGetEcho3
                                                  wild1_sbopd
                                                  GHC.IO.Handle.hGetEcho2
                                                  dt_sbopf
                                                  s1_sbopk
                                          of
                                          { (#,#) ipv4_sbopm [Occ=Once] ipv5_sbopn [Occ=Once!] ->
                                                case ipv5_sbopn of {
                                                  (,) h'_sbopp [Occ=Once] v_sbopq [Occ=Once] ->
                                                      case
                                                          putMVar# [dt_sbopf h'_sbopp ipv4_sbopm]
                                                      of
                                                      s2#_sbopr
                                                      { __DEFAULT -> (#,#) [s2#_sbopr v_sbopq];
                                                      };
                                                };
                                          };
                                } in 
                                  case ipv3_sbopi of {
                                    __DEFAULT -> io_sbopj ipv2_sboph;
                                    0# -> maskAsyncExceptions# [io_sbopj ipv2_sboph];
                                  };
                          };
                      GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                       dt_sbopu
                                                       _ [Occ=Dead] ->
                          case getMaskingState# [ipv_sbopa] of {
                            (#,#) ipv2_sbopx [Occ=Once*] ipv3_sbopy [Occ=Once!] ->
                                let {
                                  io_sbopz [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                                  [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                      [wild1_sbopd dt_sbopu] \r [s1_sbopA]
                                          case
                                              GHC.IO.Handle.Internals.$wdo_operation
                                                  GHC.IO.Handle.hGetEcho3
                                                  wild1_sbopd
                                                  GHC.IO.Handle.hGetEcho2
                                                  dt_sbopu
                                                  s1_sbopA
                                          of
                                          { (#,#) ipv4_sbopC [Occ=Once] ipv5_sbopD [Occ=Once!] ->
                                                case ipv5_sbopD of {
                                                  (,) h'_sbopF [Occ=Once] v_sbopG [Occ=Once] ->
                                                      case
                                                          putMVar# [dt_sbopu h'_sbopF ipv4_sbopC]
                                                      of
                                                      s2#_sbopH
                                                      { __DEFAULT -> (#,#) [s2#_sbopH v_sbopG];
                                                      };
                                                };
                                          };
                                } in 
                                  case ipv3_sbopy of {
                                    __DEFAULT -> io_sbopz ipv2_sbopx;
                                    0# -> maskAsyncExceptions# [io_sbopz ipv2_sbopx];
                                  };
                          };
                    };
              };
        };

GHC.IO.Handle.hGetEcho
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hGetEcho1 eta_B2 eta_B1;

GHC.IO.Handle.hSetEcho3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hSetEcho"#;

GHC.IO.Handle.hSetEcho2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hSetEcho3;

GHC.IO.Handle.hSetEcho1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Types.Bool
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbopJ on_sbopK s_sbopL]
        case GHC.IO.Handle.hGetEcho5 handle_sbopJ s_sbopL of {
          (#,#) ipv_sbopN [Occ=Once*] ipv1_sbopO [Occ=Once!] ->
              case ipv1_sbopO of {
                GHC.Types.False -> (#,#) [ipv_sbopN GHC.Tuple.()];
                GHC.Types.True ->
                    case handle_sbopJ of wild1_sbopQ {
                      GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbopS ->
                          case getMaskingState# [ipv_sbopN] of {
                            (#,#) ipv2_sbopU [Occ=Once*] ipv3_sbopV [Occ=Once!] ->
                                let {
                                  io_sbopW [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                  [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                      [on_sbopK wild1_sbopQ dt_sbopS] \r [s1_sbopX]
                                          let {
                                            sat_sboqn [Occ=Once]
                                              :: GHC.IO.Handle.Types.Handle__
                                                 -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, ())
                                            [LclId] =
                                                [on_sbopK] \r [h__sbopY s2_sbopZ]
                                                    case h__sbopY of wild2_sboq0 {
                                                      GHC.IO.Handle.Types.Handle__ $dIODevice_sboq1 [Occ=Once]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   ds3_sboq4 [Occ=Once]
                                                                                   ds4_sboq5 [Occ=Once!]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead] ->
                                                          case ds4_sboq5 of {
                                                            __DEFAULT ->
                                                                case
                                                                    GHC.IO.Device.setEcho
                                                                        $dIODevice_sboq1
                                                                        ds3_sboq4
                                                                        on_sbopK
                                                                        s2_sbopZ
                                                                of
                                                                { (#,#) ipv4_sboqj [Occ=Once]
                                                                        ipv5_sboqk [Occ=Once] ->
                                                                      let {
                                                                        sat_sboql [Occ=Once]
                                                                          :: (GHC.IO.Handle.Types.Handle__,
                                                                              ())
                                                                        [LclId] =
                                                                            CCCS (,)! [wild2_sboq0
                                                                                       ipv5_sboqk];
                                                                      } in 
                                                                        (#,#) [ipv4_sboqj
                                                                               sat_sboql];
                                                                };
                                                            GHC.IO.Handle.Types.ClosedHandle ->
                                                                GHC.IO.Handle.Internals.ioe_closedHandle1
                                                                    s2_sbopZ;
                                                          };
                                                    };
                                          } in 
                                            case
                                                GHC.IO.Handle.Internals.$wdo_operation
                                                    GHC.IO.Handle.hSetEcho2
                                                    wild1_sbopQ
                                                    sat_sboqn
                                                    dt_sbopS
                                                    s1_sbopX
                                            of
                                            { (#,#) ipv4_sboqp [Occ=Once] ipv5_sboqq [Occ=Once!] ->
                                                  case ipv5_sboqq of {
                                                    (,) h'_sboqs [Occ=Once] v_sboqt [Occ=Once] ->
                                                        case
                                                            putMVar# [dt_sbopS h'_sboqs ipv4_sboqp]
                                                        of
                                                        s2#_sboqu
                                                        { __DEFAULT -> (#,#) [s2#_sboqu v_sboqt];
                                                        };
                                                  };
                                            };
                                } in 
                                  case ipv3_sbopV of {
                                    __DEFAULT -> io_sbopW ipv2_sbopU;
                                    0# -> maskAsyncExceptions# [io_sbopW ipv2_sbopU];
                                  };
                          };
                      GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                       dt_sboqx
                                                       _ [Occ=Dead] ->
                          case getMaskingState# [ipv_sbopN] of {
                            (#,#) ipv2_sboqA [Occ=Once*] ipv3_sboqB [Occ=Once!] ->
                                let {
                                  io_sboqC [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                  [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                      [on_sbopK wild1_sbopQ dt_sboqx] \r [s1_sboqD]
                                          let {
                                            sat_sbor3 [Occ=Once]
                                              :: GHC.IO.Handle.Types.Handle__
                                                 -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, ())
                                            [LclId] =
                                                [on_sbopK] \r [h__sboqE s2_sboqF]
                                                    case h__sboqE of wild2_sboqG {
                                                      GHC.IO.Handle.Types.Handle__ $dIODevice_sboqH [Occ=Once]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   ds3_sboqK [Occ=Once]
                                                                                   ds4_sboqL [Occ=Once!]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead] ->
                                                          case ds4_sboqL of {
                                                            __DEFAULT ->
                                                                case
                                                                    GHC.IO.Device.setEcho
                                                                        $dIODevice_sboqH
                                                                        ds3_sboqK
                                                                        on_sbopK
                                                                        s2_sboqF
                                                                of
                                                                { (#,#) ipv4_sboqZ [Occ=Once]
                                                                        ipv5_sbor0 [Occ=Once] ->
                                                                      let {
                                                                        sat_sbor1 [Occ=Once]
                                                                          :: (GHC.IO.Handle.Types.Handle__,
                                                                              ())
                                                                        [LclId] =
                                                                            CCCS (,)! [wild2_sboqG
                                                                                       ipv5_sbor0];
                                                                      } in 
                                                                        (#,#) [ipv4_sboqZ
                                                                               sat_sbor1];
                                                                };
                                                            GHC.IO.Handle.Types.ClosedHandle ->
                                                                GHC.IO.Handle.Internals.ioe_closedHandle1
                                                                    s2_sboqF;
                                                          };
                                                    };
                                          } in 
                                            case
                                                GHC.IO.Handle.Internals.$wdo_operation
                                                    GHC.IO.Handle.hSetEcho2
                                                    wild1_sbopQ
                                                    sat_sbor3
                                                    dt_sboqx
                                                    s1_sboqD
                                            of
                                            { (#,#) ipv4_sbor5 [Occ=Once] ipv5_sbor6 [Occ=Once!] ->
                                                  case ipv5_sbor6 of {
                                                    (,) h'_sbor8 [Occ=Once] v_sbor9 [Occ=Once] ->
                                                        case
                                                            putMVar# [dt_sboqx h'_sbor8 ipv4_sbor5]
                                                        of
                                                        s2#_sbora
                                                        { __DEFAULT -> (#,#) [s2#_sbora v_sbor9];
                                                        };
                                                  };
                                            };
                                } in 
                                  case ipv3_sboqB of {
                                    __DEFAULT -> io_sboqC ipv2_sboqA;
                                    0# -> maskAsyncExceptions# [io_sboqC ipv2_sboqA];
                                  };
                          };
                    };
              };
        };

GHC.IO.Handle.hSetEcho
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.Bool -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.hSetEcho1 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.hGetBuffering3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hGetBuffering"#;

GHC.IO.Handle.hGetBuffering_fun :: GHC.Base.String
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hGetBuffering3;

GHC.IO.Handle.hGetBuffering2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, GHC.IO.Handle.Types.BufferMode) #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h__sborc s1_sbord]
        case h__sborc of wild_sbore {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds2_sborj [Occ=Once!]
                                       _ [Occ=Dead]
                                       ds3_sborl [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds2_sborj of {
                __DEFAULT ->
                    let {
                      sat_sborw [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__, GHC.IO.Handle.Types.BufferMode)
                      [LclId] =
                          CCCS (,)! [wild_sbore ds3_sborl];
                    } in  (#,#) [s1_sbord sat_sborw];
                GHC.IO.Handle.Types.ClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_closedHandle1 s1_sbord;
              };
        };

GHC.IO.Handle.hGetBuffering1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.BufferMode #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbory eta_sborz]
        case handle_sbory of wild_sborA {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sborC ->
              case getMaskingState# [eta_sborz] of {
                (#,#) ipv_sborE [Occ=Once*] ipv1_sborF [Occ=Once!] ->
                    let {
                      io_sborG [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 GHC.IO.Handle.Types.BufferMode #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sborA dt_sborC] \r [s_sborH]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hGetBuffering_fun
                                      wild_sborA
                                      GHC.IO.Handle.hGetBuffering2
                                      dt_sborC
                                      s_sborH
                              of
                              { (#,#) ipv2_sborJ [Occ=Once] ipv3_sborK [Occ=Once!] ->
                                    case ipv3_sborK of {
                                      (,) h'_sborM [Occ=Once] v_sborN [Occ=Once] ->
                                          case
                                              putMVar# [dt_sborC h'_sborM ipv2_sborJ]
                                          of
                                          s2#_sborO
                                          { __DEFAULT -> (#,#) [s2#_sborO v_sborN];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sborF of {
                        __DEFAULT -> io_sborG ipv_sborE;
                        0# -> maskAsyncExceptions# [io_sborG ipv_sborE];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sborR
                                           _ [Occ=Dead] ->
              case getMaskingState# [eta_sborz] of {
                (#,#) ipv_sborU [Occ=Once*] ipv1_sborV [Occ=Once!] ->
                    let {
                      io_sborW [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 GHC.IO.Handle.Types.BufferMode #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sborA dt_sborR] \r [s_sborX]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hGetBuffering_fun
                                      wild_sborA
                                      GHC.IO.Handle.hGetBuffering2
                                      dt_sborR
                                      s_sborX
                              of
                              { (#,#) ipv2_sborZ [Occ=Once] ipv3_sbos0 [Occ=Once!] ->
                                    case ipv3_sbos0 of {
                                      (,) h'_sbos2 [Occ=Once] v_sbos3 [Occ=Once] ->
                                          case
                                              putMVar# [dt_sborR h'_sbos2 ipv2_sborZ]
                                          of
                                          s2#_sbos4
                                          { __DEFAULT -> (#,#) [s2#_sbos4 v_sbos3];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sborV of {
                        __DEFAULT -> io_sborW ipv_sborU;
                        0# -> maskAsyncExceptions# [io_sborW ipv_sborU];
                      };
              };
        };

GHC.IO.Handle.hGetBuffering
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Types.IO GHC.IO.Handle.Types.BufferMode
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hGetBuffering1 eta_B2 eta_B1;

GHC.IO.Handle.hIsWritable4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hIsWritable"#;

GHC.IO.Handle.hIsWritable3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hIsWritable4;

GHC.IO.Handle.hIsWritable2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool) #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h__sbos6 s1_sbos7]
        case h__sbos6 of wild_sbos8 {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds2_sbosd [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds2_sbosd of wild1_sbosp {
                __DEFAULT ->
                    let {
                      sat_sbosr [Occ=Once] :: GHC.Types.Bool
                      [LclId] =
                          [wild1_sbosp] \u []
                              case wild1_sbosp of {
                                GHC.IO.Handle.Types.ReadHandle -> GHC.Types.False [];
                                GHC.IO.Handle.Types.WriteHandle -> GHC.Types.True [];
                                GHC.IO.Handle.Types.AppendHandle -> GHC.Types.True [];
                                GHC.IO.Handle.Types.ReadWriteHandle -> GHC.Types.True [];
                              }; } in
                    let {
                      sat_sboss [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                      [LclId] =
                          CCCS (,)! [wild_sbos8 sat_sbosr];
                    } in  (#,#) [s1_sbos7 sat_sboss];
                GHC.IO.Handle.Types.ClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_closedHandle1 s1_sbos7;
                GHC.IO.Handle.Types.SemiClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_semiclosedHandle1 s1_sbos7;
              };
        };

GHC.IO.Handle.hIsWritable1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [ds_sbosv eta_sbosw]
        case ds_sbosv of wild_sbosx {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] ipv1_sbosz ->
              case getMaskingState# [eta_sbosw] of {
                (#,#) ipv2_sbosB [Occ=Once*] ipv3_sbosC [Occ=Once!] ->
                    let {
                      io_sbosD [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbosx ipv1_sbosz] \r [s_sbosE]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hIsWritable3
                                      wild_sbosx
                                      GHC.IO.Handle.hIsWritable2
                                      ipv1_sbosz
                                      s_sbosE
                              of
                              { (#,#) ipv4_sbosG [Occ=Once] ipv5_sbosH [Occ=Once!] ->
                                    case ipv5_sbosH of {
                                      (,) h'_sbosJ [Occ=Once] v_sbosK [Occ=Once] ->
                                          case
                                              putMVar# [ipv1_sbosz h'_sbosJ ipv4_sbosG]
                                          of
                                          s2#_sbosL
                                          { __DEFAULT -> (#,#) [s2#_sbosL v_sbosK];
                                          };
                                    };
                              };
                    } in 
                      case ipv3_sbosC of {
                        __DEFAULT -> io_sbosD ipv2_sbosB;
                        0# -> maskAsyncExceptions# [io_sbosD ipv2_sbosB];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              (#,#) [eta_sbosw GHC.Types.True];
        };

GHC.IO.Handle.hIsWritable
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hIsWritable1 eta_B2 eta_B1;

GHC.IO.Handle.hIsReadable4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hIsReadable"#;

GHC.IO.Handle.hIsReadable3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hIsReadable4;

GHC.IO.Handle.hIsReadable2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool) #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h__sbosQ s1_sbosR]
        case h__sbosQ of wild_sbosS {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds2_sbosX [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds2_sbosX of wild1_sbot9 {
                __DEFAULT ->
                    let {
                      sat_sbotb [Occ=Once] :: GHC.Types.Bool
                      [LclId] =
                          [wild1_sbot9] \u []
                              case wild1_sbot9 of {
                                __DEFAULT -> GHC.Types.False [];
                                GHC.IO.Handle.Types.ReadHandle -> GHC.Types.True [];
                                GHC.IO.Handle.Types.ReadWriteHandle -> GHC.Types.True [];
                              }; } in
                    let {
                      sat_sbotc [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                      [LclId] =
                          CCCS (,)! [wild_sbosS sat_sbotb];
                    } in  (#,#) [s1_sbosR sat_sbotc];
                GHC.IO.Handle.Types.ClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_closedHandle1 s1_sbosR;
                GHC.IO.Handle.Types.SemiClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_semiclosedHandle1 s1_sbosR;
              };
        };

GHC.IO.Handle.hIsReadable1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [ds_sbotf eta_sbotg]
        case ds_sbotf of wild_sboth {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] ipv1_sbotj ->
              case getMaskingState# [eta_sbotg] of {
                (#,#) ipv2_sbotl [Occ=Once*] ipv3_sbotm [Occ=Once!] ->
                    let {
                      io_sbotn [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sboth ipv1_sbotj] \r [s_sboto]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hIsReadable3
                                      wild_sboth
                                      GHC.IO.Handle.hIsReadable2
                                      ipv1_sbotj
                                      s_sboto
                              of
                              { (#,#) ipv4_sbotq [Occ=Once] ipv5_sbotr [Occ=Once!] ->
                                    case ipv5_sbotr of {
                                      (,) h'_sbott [Occ=Once] v_sbotu [Occ=Once] ->
                                          case
                                              putMVar# [ipv1_sbotj h'_sbott ipv4_sbotq]
                                          of
                                          s2#_sbotv
                                          { __DEFAULT -> (#,#) [s2#_sbotv v_sbotu];
                                          };
                                    };
                              };
                    } in 
                      case ipv3_sbotm of {
                        __DEFAULT -> io_sbotn ipv2_sbotl;
                        0# -> maskAsyncExceptions# [io_sbotn ipv2_sbotl];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              (#,#) [eta_sbotg GHC.Types.True];
        };

GHC.IO.Handle.hIsReadable
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hIsReadable1 eta_B2 eta_B1;

GHC.IO.Handle.hIsClosed4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hIsClosed"#;

GHC.IO.Handle.hIsClosed3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hIsClosed4;

GHC.IO.Handle.hIsClosed2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool) #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [h__sbotA s1_sbotB]
        case h__sbotA of wild_sbotC {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds2_sbotH [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds2_sbotH of {
                __DEFAULT ->
                    let {
                      sat_sbotU [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                      [LclId] =
                          CCCS (,)! [wild_sbotC GHC.Types.False];
                    } in  (#,#) [s1_sbotB sat_sbotU];
                GHC.IO.Handle.Types.ClosedHandle ->
                    let {
                      sat_sbotV [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                      [LclId] =
                          CCCS (,)! [wild_sbotC GHC.Types.True];
                    } in  (#,#) [s1_sbotB sat_sbotV];
              };
        };

GHC.IO.Handle.hIsClosed1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbotW eta_sbotX]
        case handle_sbotW of wild_sbotY {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbou0 ->
              case getMaskingState# [eta_sbotX] of {
                (#,#) ipv_sbou2 [Occ=Once*] ipv1_sbou3 [Occ=Once!] ->
                    let {
                      io_sbou4 [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbotY dt_sbou0] \r [s_sbou5]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hIsClosed3
                                      wild_sbotY
                                      GHC.IO.Handle.hIsClosed2
                                      dt_sbou0
                                      s_sbou5
                              of
                              { (#,#) ipv2_sbou7 [Occ=Once] ipv3_sbou8 [Occ=Once!] ->
                                    case ipv3_sbou8 of {
                                      (,) h'_sboua [Occ=Once] v_sboub [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbou0 h'_sboua ipv2_sbou7]
                                          of
                                          s2#_sbouc
                                          { __DEFAULT -> (#,#) [s2#_sbouc v_sboub];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbou3 of {
                        __DEFAULT -> io_sbou4 ipv_sbou2;
                        0# -> maskAsyncExceptions# [io_sbou4 ipv_sbou2];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sbouf
                                           _ [Occ=Dead] ->
              case getMaskingState# [eta_sbotX] of {
                (#,#) ipv_sboui [Occ=Once*] ipv1_sbouj [Occ=Once!] ->
                    let {
                      io_sbouk [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbotY dt_sbouf] \r [s_sboul]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hIsClosed3
                                      wild_sbotY
                                      GHC.IO.Handle.hIsClosed2
                                      dt_sbouf
                                      s_sboul
                              of
                              { (#,#) ipv2_sboun [Occ=Once] ipv3_sbouo [Occ=Once!] ->
                                    case ipv3_sbouo of {
                                      (,) h'_sbouq [Occ=Once] v_sbour [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbouf h'_sbouq ipv2_sboun]
                                          of
                                          s2#_sbous
                                          { __DEFAULT -> (#,#) [s2#_sbous v_sbour];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbouj of {
                        __DEFAULT -> io_sbouk ipv_sboui;
                        0# -> maskAsyncExceptions# [io_sbouk ipv_sboui];
                      };
              };
        };

GHC.IO.Handle.hIsClosed
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hIsClosed1 eta_B2 eta_B1;

GHC.IO.Handle.hIsOpen4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hIsOpen"#;

GHC.IO.Handle.hIsOpen3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hIsOpen4;

GHC.IO.Handle.hIsOpen2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool) #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [h__sbouu s1_sbouv]
        case h__sbouu of wild_sbouw {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds2_sbouB [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds2_sbouB of {
                __DEFAULT ->
                    let {
                      sat_sbouO [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                      [LclId] =
                          CCCS (,)! [wild_sbouw GHC.Types.True];
                    } in  (#,#) [s1_sbouv sat_sbouO];
                GHC.IO.Handle.Types.ClosedHandle ->
                    let {
                      sat_sbouP [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                      [LclId] =
                          CCCS (,)! [wild_sbouw GHC.Types.False];
                    } in  (#,#) [s1_sbouv sat_sbouP];
                GHC.IO.Handle.Types.SemiClosedHandle ->
                    let {
                      sat_sbouQ [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                      [LclId] =
                          CCCS (,)! [wild_sbouw GHC.Types.False];
                    } in  (#,#) [s1_sbouv sat_sbouQ];
              };
        };

GHC.IO.Handle.hIsOpen1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbouR eta_sbouS]
        case handle_sbouR of wild_sbouT {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbouV ->
              case getMaskingState# [eta_sbouS] of {
                (#,#) ipv_sbouX [Occ=Once*] ipv1_sbouY [Occ=Once!] ->
                    let {
                      io_sbouZ [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbouT dt_sbouV] \r [s_sbov0]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hIsOpen3
                                      wild_sbouT
                                      GHC.IO.Handle.hIsOpen2
                                      dt_sbouV
                                      s_sbov0
                              of
                              { (#,#) ipv2_sbov2 [Occ=Once] ipv3_sbov3 [Occ=Once!] ->
                                    case ipv3_sbov3 of {
                                      (,) h'_sbov5 [Occ=Once] v_sbov6 [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbouV h'_sbov5 ipv2_sbov2]
                                          of
                                          s2#_sbov7
                                          { __DEFAULT -> (#,#) [s2#_sbov7 v_sbov6];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbouY of {
                        __DEFAULT -> io_sbouZ ipv_sbouX;
                        0# -> maskAsyncExceptions# [io_sbouZ ipv_sbouX];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sbova
                                           _ [Occ=Dead] ->
              case getMaskingState# [eta_sbouS] of {
                (#,#) ipv_sbovd [Occ=Once*] ipv1_sbove [Occ=Once!] ->
                    let {
                      io_sbovf [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbouT dt_sbova] \r [s_sbovg]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hIsOpen3
                                      wild_sbouT
                                      GHC.IO.Handle.hIsOpen2
                                      dt_sbova
                                      s_sbovg
                              of
                              { (#,#) ipv2_sbovi [Occ=Once] ipv3_sbovj [Occ=Once!] ->
                                    case ipv3_sbovj of {
                                      (,) h'_sbovl [Occ=Once] v_sbovm [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbova h'_sbovl ipv2_sbovi]
                                          of
                                          s2#_sbovn
                                          { __DEFAULT -> (#,#) [s2#_sbovn v_sbovm];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbove of {
                        __DEFAULT -> io_sbovf ipv_sbovd;
                        0# -> maskAsyncExceptions# [io_sbovf ipv_sbovd];
                      };
              };
        };

GHC.IO.Handle.hIsOpen
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hIsOpen1 eta_B2 eta_B1;

GHC.IO.Handle.hGetPosn1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.HandlePosn #)
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbovp s_sbovq]
        case
            GHC.IO.Handle.Internals.wantSeekableHandle1
                GHC.IO.Handle.hGetPosn3
                handle_sbovp
                GHC.IO.Handle.hGetPosn2
                s_sbovq
        of
        { (#,#) ipv_sbovs [Occ=Once] ipv1_sbovt [Occ=Once] ->
              let {
                sat_sbovu [Occ=Once] :: GHC.IO.Handle.HandlePosn
                [LclId] =
                    CCCS GHC.IO.Handle.HandlePosn! [handle_sbovp ipv1_sbovt];
              } in  (#,#) [ipv_sbovs sat_sbovu];
        };

GHC.IO.Handle.hGetPosn
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Types.IO GHC.IO.Handle.HandlePosn
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hGetPosn1 eta_B2 eta_B1;

GHC.IO.Handle.hClose3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hClose"#;

GHC.IO.Handle.hClose2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hClose3;

GHC.IO.Handle.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Exception.IOErrorType
     -> GHC.Base.String
     -> GHC.Base.Maybe Foreign.C.Types.CInt
     -> GHC.Base.Maybe GHC.IO.FilePath
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=6,
 Str=<B,U><B,U><B,U><B,U><B,1*U><B,U>x,
 Unf=OtherCon []] =
    [] \r [w_sbovv ww_sbovw ww1_sbovx ww2_sbovy ww3_sbovz w1_sbovA]
        let {
          sat_sbovM [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [w_sbovv ww_sbovw ww1_sbovx ww2_sbovy ww3_sbovz] \u []
                  let {
                    sat_sbovK [Occ=Once] :: GHC.Base.Maybe GHC.IO.FilePath
                    [LclId] =
                        [w_sbovv ww3_sbovz] \u []
                            case ww3_sbovz of wild1_sbovC {
                              GHC.Base.Nothing ->
                                  case w_sbovv of {
                                    GHC.IO.Handle.Types.FileHandle path_sbovE [Occ=Once]
                                                                   _ [Occ=Dead] ->
                                        GHC.Base.Just [path_sbovE];
                                    GHC.IO.Handle.Types.DuplexHandle path_sbovG [Occ=Once]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead] ->
                                        GHC.Base.Just [path_sbovG];
                                  };
                              GHC.Base.Just _ [Occ=Dead] -> wild1_sbovC;
                            }; } in
                  let {
                    sat_sbovB [Occ=Once] :: GHC.Base.Maybe GHC.IO.Handle.Types.Handle
                    [LclId] =
                        CCCS GHC.Base.Just! [w_sbovv]; } in
                  let {
                    sat_sbovL [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        CCCS GHC.IO.Exception.IOError! [sat_sbovB
                                                        ww_sbovw
                                                        GHC.IO.Handle.hClose2
                                                        ww1_sbovx
                                                        ww2_sbovy
                                                        sat_sbovK];
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sbovL;
        } in  raiseIO# [sat_sbovM w1_sbovA];

GHC.IO.Handle.hClose1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h_sbovN eta_sbovO]
        case h_sbovN of wild_sbovP {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbovR [Occ=Once] ->
              case
                  GHC.IO.Handle.Internals.$wwithHandle'
                      GHC.IO.Handle.hClose2
                      wild_sbovP
                      dt_sbovR
                      GHC.IO.Handle.Internals.hClose_help1
                      eta_sbovO
              of
              { (#,#) ipv_sbovT [Occ=Once*] ipv1_sbovU [Occ=Once!] ->
                    case ipv1_sbovU of {
                      GHC.Base.Nothing -> (#,#) [ipv_sbovT GHC.Tuple.()];
                      GHC.Base.Just e_sbovW [Occ=Once!] ->
                          case e_sbovW of wild2_sbovX {
                            GHC.Exception.SomeException $dException1_sbovY [Occ=Once]
                                                        e2_sbovZ [Occ=Once] ->
                                case GHC.Exception.$p1Exception $dException1_sbovY of sat_sbow0 {
                                  __DEFAULT ->
                                      case
                                          Data.Typeable.Internal.sameTypeRep
                                              sat_sbow0 GHC.IO.Exception.$fExceptionIOException4
                                      of
                                      { GHC.Types.False -> raiseIO# [wild2_sbovX ipv_sbovT];
                                        GHC.Types.True ->
                                            case e2_sbovZ of {
                                              GHC.IO.Exception.IOError _ [Occ=Dead]
                                                                       ww2_sbow4 [Occ=Once]
                                                                       _ [Occ=Dead]
                                                                       ww4_sbow6 [Occ=Once]
                                                                       ww5_sbow7 [Occ=Once]
                                                                       ww6_sbow8 [Occ=Once] ->
                                                  GHC.IO.Handle.$wlvl
                                                      wild_sbovP
                                                      ww2_sbow4
                                                      ww4_sbow6
                                                      ww5_sbow7
                                                      ww6_sbow8
                                                      ipv_sbovT;
                                            };
                                      };
                                };
                          };
                    };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sbowa [Occ=Once]
                                           dt1_sbowb [Occ=Once] ->
              case
                  GHC.IO.Handle.Internals.$wwithHandle'
                      GHC.IO.Handle.hClose2
                      wild_sbovP
                      dt_sbowa
                      GHC.IO.Handle.Internals.hClose_help1
                      eta_sbovO
              of
              { (#,#) ipv_sbowd [Occ=Once] ipv1_sbowe [Occ=Once] ->
                    case
                        GHC.IO.Handle.Internals.$wwithHandle'
                            GHC.IO.Handle.hClose2
                            wild_sbovP
                            dt1_sbowb
                            GHC.IO.Handle.Internals.hClose_help1
                            ipv_sbowd
                    of
                    { (#,#) ipv2_sbowg [Occ=Once*] ipv3_sbowh [Occ=Once] ->
                          let {
                            sat_sbowi [Occ=Once]
                              :: [GHC.Base.Maybe GHC.Exception.SomeException]
                            [LclId] =
                                CCCS :! [ipv3_sbowh GHC.Types.[]]; } in
                          let {
                            sat_sbowj [Occ=Once]
                              :: [GHC.Base.Maybe GHC.Exception.SomeException]
                            [LclId] =
                                CCCS :! [ipv1_sbowe sat_sbowi];
                          } in 
                            case Data.Maybe.catMaybes1 sat_sbowj of {
                              [] -> (#,#) [ipv2_sbowg GHC.Tuple.()];
                              : y_sbowl [Occ=Once!] _ [Occ=Dead] ->
                                  case y_sbowl of wild2_sbown {
                                    GHC.Exception.SomeException $dException1_sbowo [Occ=Once]
                                                                e2_sbowp [Occ=Once] ->
                                        case
                                            GHC.Exception.$p1Exception $dException1_sbowo
                                        of
                                        sat_sbowq
                                        { __DEFAULT ->
                                              case
                                                  Data.Typeable.Internal.sameTypeRep
                                                      sat_sbowq
                                                      GHC.IO.Exception.$fExceptionIOException4
                                              of
                                              { GHC.Types.False ->
                                                    raiseIO# [wild2_sbown ipv2_sbowg];
                                                GHC.Types.True ->
                                                    case e2_sbowp of {
                                                      GHC.IO.Exception.IOError _ [Occ=Dead]
                                                                               ww2_sbowu [Occ=Once]
                                                                               _ [Occ=Dead]
                                                                               ww4_sboww [Occ=Once]
                                                                               ww5_sbowx [Occ=Once]
                                                                               ww6_sbowy [Occ=Once] ->
                                                          GHC.IO.Handle.$wlvl
                                                              wild_sbovP
                                                              ww2_sbowu
                                                              ww4_sboww
                                                              ww5_sbowx
                                                              ww6_sbowy
                                                              ipv2_sbowg;
                                                    };
                                              };
                                        };
                                  };
                            };
                    };
              };
        };

GHC.IO.Handle.hClose
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO ()
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hClose1 eta_B2 eta_B1;

lvl28_rbnXa :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['{'#];

lvl29_rbnXb :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! [','#];

lvl30_rbnXc :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "duplex (read-write)"#;

lvl31_rbnXd :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl30_rbnXc;

lvl32_rbnXe :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "none"#;

lvl33_rbnXf :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl32_rbnXe;

lvl34_rbnXg :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "line"#;

lvl35_rbnXh :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl34_rbnXg;

lvl36_rbnXi :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "showHandle"#;

lvl37_rbnXj :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl36_rbnXi;

lvl38_rbnXk :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "loc="#;

lvl39_rbnXl :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "type="#;

lvl40_rbnXm :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "buffering="#;

lvl41_rbnXn :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "}"#;

lvl42_rbnXo :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl41_rbnXn;

lvl43_rbnXp :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.Base.++ lvl33_rbnXf lvl42_rbnXo;

lvl44_rbnXq :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.Base.++ lvl35_rbnXh lvl42_rbnXo;

lvl45_rbnXr :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "block "#;

lvl46_rbnXs :: [GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.$fShow(,)2 lvl42_rbnXo];

lvl47_rbnXt :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.Base.++ GHC.IO.Handle.Types.$fShowHandleType11 lvl42_rbnXo;

GHC.IO.Handle.hShow2
  :: GHC.Base.String
     -> GHC.Types.Bool
     -> GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
[GblId, Arity=4, Str=<L,U><L,U><S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [filepath_sbowz is_duplex_sbowA h_sbowB eta_sbowC]
        let {
          act_sbowD [Occ=OnceL*!, Dmd=<L,C(C1(U(U,U)))>]
            :: GHC.IO.Handle.Types.Handle__
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
          [LclId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
              sat-only [filepath_sbowz is_duplex_sbowA] \r [hdl__sbowE s_sbowF]
                  let {
                    sat_sboxD [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [filepath_sbowz is_duplex_sbowA hdl__sbowE] \u []
                            case hdl__sbowE of {
                              GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           ds2_sbowL [Occ=Once!]
                                                           _ [Occ=Dead]
                                                           ds3_sbowN [Occ=Once!]
                                                           _ [Occ=Dead]
                                                           dt2_sbowP [Occ=Once]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead] ->
                                  case ds2_sbowL of wild1_sbowX {
                                    __DEFAULT ->
                                        let {
                                          sat_sboxC [Occ=Once] :: [GHC.Types.Char]
                                          [LclId] =
                                              [filepath_sbowz
                                               is_duplex_sbowA
                                               ds3_sbowN
                                               dt2_sbowP
                                               wild1_sbowX] \u []
                                                  let {
                                                    sat_sboxA [Occ=Once] :: [GHC.Types.Char]
                                                    [LclId] =
                                                        [is_duplex_sbowA
                                                         ds3_sbowN
                                                         dt2_sbowP
                                                         wild1_sbowX] \u []
                                                            let {
                                                              sat_sboxz [Occ=Once]
                                                                :: [GHC.Types.Char]
                                                              [LclId] =
                                                                  [is_duplex_sbowA
                                                                   ds3_sbowN
                                                                   dt2_sbowP
                                                                   wild1_sbowX] \u []
                                                                      let {
                                                                        karg_sbowY [Occ=Once*]
                                                                          :: [GHC.Types.Char]
                                                                        [LclId] =
                                                                            [ds3_sbowN
                                                                             dt2_sbowP] \u []
                                                                                let {
                                                                                  sat_sboxq [Occ=Once]
                                                                                    :: [GHC.Types.Char]
                                                                                  [LclId] =
                                                                                      [ds3_sbowN
                                                                                       dt2_sbowP] \u []
                                                                                          case
                                                                                              ds3_sbowN
                                                                                          of
                                                                                          { GHC.IO.Handle.Types.NoBuffering ->
                                                                                                lvl43_rbnXp;
                                                                                            GHC.IO.Handle.Types.LineBuffering ->
                                                                                                lvl44_rbnXq;
                                                                                            GHC.IO.Handle.Types.BlockBuffering ds_sbox0 [Occ=Once!] ->
                                                                                                case
                                                                                                    ds_sbox0
                                                                                                of
                                                                                                { GHC.Base.Nothing ->
                                                                                                      let {
                                                                                                        sat_sboxg [Occ=Once]
                                                                                                          :: [GHC.Types.Char]
                                                                                                        [LclId] =
                                                                                                            [dt2_sbowP] \u []
                                                                                                                case
                                                                                                                    case
                                                                                                                        noDuplicate# [GHC.Prim.realWorld#]
                                                                                                                    of
                                                                                                                    s'_sbox2
                                                                                                                    { __DEFAULT ->
                                                                                                                          readMutVar# [dt2_sbowP
                                                                                                                                       s'_sbox2];
                                                                                                                    }
                                                                                                                of
                                                                                                                { (#,#) _ [Occ=Dead]
                                                                                                                        ipv1_sbox5 [Occ=Once!] ->
                                                                                                                      case
                                                                                                                          ipv1_sbox5
                                                                                                                      of
                                                                                                                      { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                                                                             _ [Occ=Dead]
                                                                                                                                             _ [Occ=Dead]
                                                                                                                                             dt6_sboxa [Occ=Once]
                                                                                                                                             _ [Occ=Dead]
                                                                                                                                             _ [Occ=Dead] ->
                                                                                                                            case
                                                                                                                                GHC.Show.$wshowSignedInt
                                                                                                                                    0#
                                                                                                                                    dt6_sboxa
                                                                                                                                    lvl46_rbnXs
                                                                                                                            of
                                                                                                                            { (#,#) ww5_sboxe [Occ=Once]
                                                                                                                                    ww6_sboxf [Occ=Once] ->
                                                                                                                                  : [ww5_sboxe
                                                                                                                                     ww6_sboxf];
                                                                                                                            };
                                                                                                                      };
                                                                                                                }; } in
                                                                                                      let {
                                                                                                        sat_sboxh [Occ=Once]
                                                                                                          :: [GHC.Types.Char]
                                                                                                        [LclId] =
                                                                                                            CCCS :! [GHC.Show.$fShow(,)4
                                                                                                                     sat_sboxg];
                                                                                                      } in 
                                                                                                        GHC.CString.unpackAppendCString#
                                                                                                            lvl45_rbnXr
                                                                                                            sat_sboxh;
                                                                                                  GHC.Base.Just n_sboxi [Occ=Once!] ->
                                                                                                      let {
                                                                                                        sat_sboxo [Occ=Once]
                                                                                                          :: [GHC.Types.Char]
                                                                                                        [LclId] =
                                                                                                            [n_sboxi] \u []
                                                                                                                case
                                                                                                                    n_sboxi
                                                                                                                of
                                                                                                                { GHC.Types.I# ww3_sboxk [Occ=Once] ->
                                                                                                                      case
                                                                                                                          GHC.Show.$wshowSignedInt
                                                                                                                              0#
                                                                                                                              ww3_sboxk
                                                                                                                              lvl46_rbnXs
                                                                                                                      of
                                                                                                                      { (#,#) ww5_sboxm [Occ=Once]
                                                                                                                              ww6_sboxn [Occ=Once] ->
                                                                                                                            : [ww5_sboxm
                                                                                                                               ww6_sboxn];
                                                                                                                      };
                                                                                                                }; } in
                                                                                                      let {
                                                                                                        sat_sboxp [Occ=Once]
                                                                                                          :: [GHC.Types.Char]
                                                                                                        [LclId] =
                                                                                                            CCCS :! [GHC.Show.$fShow(,)4
                                                                                                                     sat_sboxo];
                                                                                                      } in 
                                                                                                        GHC.CString.unpackAppendCString#
                                                                                                            lvl45_rbnXr
                                                                                                            sat_sboxp;
                                                                                                };
                                                                                          };
                                                                                } in 
                                                                                  GHC.CString.unpackAppendCString#
                                                                                      lvl40_rbnXm
                                                                                      sat_sboxq;
                                                                      } in 
                                                                        case is_duplex_sbowA of {
                                                                          GHC.Types.False ->
                                                                              case wild1_sbowX of {
                                                                                GHC.IO.Handle.Types.SemiClosedHandle ->
                                                                                    let {
                                                                                      sat_sboxt [Occ=Once]
                                                                                        :: [GHC.Types.Char]
                                                                                      [LclId] =
                                                                                          CCCS :! [lvl29_rbnXb
                                                                                                   karg_sbowY];
                                                                                    } in 
                                                                                      GHC.Base.++
                                                                                          GHC.IO.Handle.Types.$fShowHandleType9
                                                                                          sat_sboxt;
                                                                                GHC.IO.Handle.Types.ReadHandle ->
                                                                                    let {
                                                                                      sat_sboxu [Occ=Once]
                                                                                        :: [GHC.Types.Char]
                                                                                      [LclId] =
                                                                                          CCCS :! [lvl29_rbnXb
                                                                                                   karg_sbowY];
                                                                                    } in 
                                                                                      GHC.Base.++
                                                                                          GHC.IO.Handle.Types.$fShowHandleType7
                                                                                          sat_sboxu;
                                                                                GHC.IO.Handle.Types.WriteHandle ->
                                                                                    let {
                                                                                      sat_sboxv [Occ=Once]
                                                                                        :: [GHC.Types.Char]
                                                                                      [LclId] =
                                                                                          CCCS :! [lvl29_rbnXb
                                                                                                   karg_sbowY];
                                                                                    } in 
                                                                                      GHC.Base.++
                                                                                          GHC.IO.Handle.Types.$fShowHandleType5
                                                                                          sat_sboxv;
                                                                                GHC.IO.Handle.Types.AppendHandle ->
                                                                                    let {
                                                                                      sat_sboxw [Occ=Once]
                                                                                        :: [GHC.Types.Char]
                                                                                      [LclId] =
                                                                                          CCCS :! [lvl29_rbnXb
                                                                                                   karg_sbowY];
                                                                                    } in 
                                                                                      GHC.Base.++
                                                                                          GHC.IO.Handle.Types.$fShowHandleType3
                                                                                          sat_sboxw;
                                                                                GHC.IO.Handle.Types.ReadWriteHandle ->
                                                                                    let {
                                                                                      sat_sboxx [Occ=Once]
                                                                                        :: [GHC.Types.Char]
                                                                                      [LclId] =
                                                                                          CCCS :! [lvl29_rbnXb
                                                                                                   karg_sbowY];
                                                                                    } in 
                                                                                      GHC.Base.++
                                                                                          GHC.IO.Handle.Types.$fShowHandleType1
                                                                                          sat_sboxx;
                                                                              };
                                                                          GHC.Types.True ->
                                                                              let {
                                                                                sat_sboxy [Occ=Once]
                                                                                  :: [GHC.Types.Char]
                                                                                [LclId] =
                                                                                    CCCS :! [lvl29_rbnXb
                                                                                             karg_sbowY];
                                                                              } in 
                                                                                GHC.Base.++
                                                                                    lvl31_rbnXd
                                                                                    sat_sboxy;
                                                                        };
                                                            } in 
                                                              GHC.CString.unpackAppendCString#
                                                                  lvl39_rbnXl sat_sboxz; } in
                                                  let {
                                                    sat_sboxB [Occ=Once] :: [GHC.Types.Char]
                                                    [LclId] =
                                                        CCCS :! [lvl29_rbnXb sat_sboxA];
                                                  } in  GHC.Base.++ filepath_sbowz sat_sboxB;
                                        } in 
                                          GHC.CString.unpackAppendCString# lvl38_rbnXk sat_sboxC;
                                    GHC.IO.Handle.Types.ClosedHandle -> lvl47_rbnXt;
                                  };
                            }; } in
                  let {
                    sat_sboxE [Occ=Once] :: GHC.Base.String
                    [LclId] =
                        CCCS :! [lvl28_rbnXa sat_sboxD];
                  } in  (#,#) [s_sbowF sat_sboxE];
        } in 
          case h_sbowB of wild_sboxF {
            GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sboxH ->
                case getMaskingState# [eta_sbowC] of {
                  (#,#) ipv_sboxJ [Occ=Once*] ipv1_sboxK [Occ=Once!] ->
                      let {
                        io_sboxL [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                          :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
                        [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                            [act_sbowD wild_sboxF dt_sboxH] \r [s_sboxM]
                                let {
                                  sat_sboxT [Occ=Once]
                                    :: GHC.IO.Handle.Types.Handle__
                                       -> GHC.Types.IO
                                            (GHC.IO.Handle.Types.Handle__, GHC.Base.String)
                                  [LclId] =
                                      [act_sbowD] \r [h__sboxN s1_sboxO]
                                          case act_sbowD h__sboxN s1_sboxO of {
                                            (#,#) ipv2_sboxQ [Occ=Once] ipv3_sboxR [Occ=Once] ->
                                                let {
                                                  sat_sboxS [Occ=Once]
                                                    :: (GHC.IO.Handle.Types.Handle__,
                                                        GHC.Base.String)
                                                  [LclId] =
                                                      CCCS (,)! [h__sboxN ipv3_sboxR];
                                                } in  (#,#) [ipv2_sboxQ sat_sboxS];
                                          };
                                } in 
                                  case
                                      GHC.IO.Handle.Internals.$wdo_operation
                                          lvl37_rbnXj wild_sboxF sat_sboxT dt_sboxH s_sboxM
                                  of
                                  { (#,#) ipv2_sboxV [Occ=Once] ipv3_sboxW [Occ=Once!] ->
                                        case ipv3_sboxW of {
                                          (,) h'_sboxY [Occ=Once] v_sboxZ [Occ=Once] ->
                                              case
                                                  putMVar# [dt_sboxH h'_sboxY ipv2_sboxV]
                                              of
                                              s2#_sboy0
                                              { __DEFAULT -> (#,#) [s2#_sboy0 v_sboxZ];
                                              };
                                        };
                                  };
                      } in 
                        case ipv1_sboxK of {
                          __DEFAULT -> io_sboxL ipv_sboxJ;
                          0# -> maskAsyncExceptions# [io_sboxL ipv_sboxJ];
                        };
                };
            GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                             dt_sboy3
                                             _ [Occ=Dead] ->
                case getMaskingState# [eta_sbowC] of {
                  (#,#) ipv_sboy6 [Occ=Once*] ipv1_sboy7 [Occ=Once!] ->
                      let {
                        io_sboy8 [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                          :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
                        [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                            [act_sbowD wild_sboxF dt_sboy3] \r [s_sboy9]
                                let {
                                  sat_sboyg [Occ=Once]
                                    :: GHC.IO.Handle.Types.Handle__
                                       -> GHC.Types.IO
                                            (GHC.IO.Handle.Types.Handle__, GHC.Base.String)
                                  [LclId] =
                                      [act_sbowD] \r [h__sboya s1_sboyb]
                                          case act_sbowD h__sboya s1_sboyb of {
                                            (#,#) ipv2_sboyd [Occ=Once] ipv3_sboye [Occ=Once] ->
                                                let {
                                                  sat_sboyf [Occ=Once]
                                                    :: (GHC.IO.Handle.Types.Handle__,
                                                        GHC.Base.String)
                                                  [LclId] =
                                                      CCCS (,)! [h__sboya ipv3_sboye];
                                                } in  (#,#) [ipv2_sboyd sat_sboyf];
                                          };
                                } in 
                                  case
                                      GHC.IO.Handle.Internals.$wdo_operation
                                          lvl37_rbnXj wild_sboxF sat_sboyg dt_sboy3 s_sboy9
                                  of
                                  { (#,#) ipv2_sboyi [Occ=Once] ipv3_sboyj [Occ=Once!] ->
                                        case ipv3_sboyj of {
                                          (,) h'_sboyl [Occ=Once] v_sboym [Occ=Once] ->
                                              case
                                                  putMVar# [dt_sboy3 h'_sboyl ipv2_sboyi]
                                              of
                                              s2#_sboyn
                                              { __DEFAULT -> (#,#) [s2#_sboyn v_sboym];
                                              };
                                        };
                                  };
                      } in 
                        case ipv1_sboy7 of {
                          __DEFAULT -> io_sboy8 ipv_sboy6;
                          0# -> maskAsyncExceptions# [io_sboy8 ipv_sboy6];
                        };
                };
          };

GHC.IO.Handle.hShow1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h_sboyp eta_sboyq]
        case h_sboyp of wild_sboyr {
          GHC.IO.Handle.Types.FileHandle path_sboys [Occ=Once]
                                         _ [Occ=Dead] ->
              GHC.IO.Handle.hShow2
                  path_sboys GHC.Types.False wild_sboyr eta_sboyq;
          GHC.IO.Handle.Types.DuplexHandle path_sboyu [Occ=Once]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              GHC.IO.Handle.hShow2
                  path_sboyu GHC.Types.True wild_sboyr eta_sboyq;
        };

GHC.IO.Handle.hShow
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hShow1 eta_B2 eta_B1;

GHC.IO.Handle.HandlePosn
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.HandlePosition -> GHC.IO.Handle.HandlePosn
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.HandlePosn [eta_B2 eta_B1];


==================== STG syntax: ====================
2018-03-16 16:06:16.148410002 UTC

GHC.IO.Handle.$w$c== [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.HandlePosition
     -> GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.HandlePosition
     -> GHC.Types.Bool
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*U><S,1*U><L,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_sbnXv ww1_sbnXw ww2_sbnXx ww3_sbnXy]
        case GHC.Integer.Type.eqInteger# ww1_sbnXw ww3_sbnXy of {
          __DEFAULT -> GHC.Types.False [];
          1# -> GHC.IO.Handle.Types.$fEqHandle_$c== ww_sbnXv ww2_sbnXx;
        };

GHC.IO.Handle.$fEqHandlePosn_$c== [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.HandlePosn
     -> GHC.IO.Handle.HandlePosn -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(LS),1*U(1*U,1*U)><S(LS),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [w_sbnXA w1_sbnXB]
        case w_sbnXA of {
          GHC.IO.Handle.HandlePosn ww1_sbnXD [Occ=Once]
                                   ww2_sbnXE [Occ=Once] ->
              case w1_sbnXB of {
                GHC.IO.Handle.HandlePosn ww4_sbnXG [Occ=Once]
                                         ww5_sbnXH [Occ=Once] ->
                    GHC.IO.Handle.$w$c== ww1_sbnXD ww2_sbnXE ww4_sbnXG ww5_sbnXH;
              };
        };

GHC.IO.Handle.$fEqHandlePosn_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.IO.Handle.HandlePosn
     -> GHC.IO.Handle.HandlePosn -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(LS),1*U(1*U,1*U)><S(LS),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [eta_sbnXI eta1_sbnXJ]
        case eta_sbnXI of {
          GHC.IO.Handle.HandlePosn h1_sbnXL [Occ=Once!]
                                   p1_sbnXM [Occ=Once] ->
              case eta1_sbnXJ of {
                GHC.IO.Handle.HandlePosn h2_sbnXO [Occ=Once*!]
                                         p2_sbnXP [Occ=Once] ->
                    case GHC.Integer.Type.eqInteger# p1_sbnXM p2_sbnXP of {
                      __DEFAULT -> GHC.Types.True [];
                      1# ->
                          case h1_sbnXL of {
                            GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbnXT [Occ=Once] ->
                                case h2_sbnXO of {
                                  GHC.IO.Handle.Types.FileHandle _ [Occ=Dead]
                                                                 dt1_sbnXW [Occ=Once] ->
                                      case sameMVar# [dt_sbnXT dt1_sbnXW] of {
                                        __DEFAULT -> GHC.Types.True [];
                                        1# -> GHC.Types.False [];
                                      };
                                  GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                                   _ [Occ=Dead]
                                                                   _ [Occ=Dead] ->
                                      GHC.Types.True [];
                                };
                            GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                             dt_sbnY2 [Occ=Once]
                                                             _ [Occ=Dead] ->
                                case h2_sbnXO of {
                                  GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] _ [Occ=Dead] ->
                                      GHC.Types.True [];
                                  GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                                   dt2_sbnY8 [Occ=Once]
                                                                   _ [Occ=Dead] ->
                                      case sameMVar# [dt_sbnY2 dt2_sbnY8] of {
                                        __DEFAULT -> GHC.Types.True [];
                                        1# -> GHC.Types.False [];
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.$fEqHandlePosn [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.IO.Handle.HandlePosn
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.IO.Handle.$fEqHandlePosn_$c==
                                     GHC.IO.Handle.$fEqHandlePosn_$c/=];

GHC.IO.Handle.$fShowHandlePosn2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    " at position "#;

GHC.IO.Handle.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.HandlePosition
     -> GHC.Base.String
     -> GHC.Base.String
[GblId, Arity=3, Str=<S,1*U><L,U><L,U>, Unf=OtherCon []] =
    [] \r [ww_sbnYb ww1_sbnYc w_sbnYd]
        case ww_sbnYb of {
          GHC.IO.Handle.Types.FileHandle file_sbnYf [Occ=Once]
                                         _ [Occ=Dead] ->
              let {
                sat_sbnYn [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [ww1_sbnYc w_sbnYd file_sbnYf] \u []
                        let {
                          sat_sbnYm [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                          [LclId] =
                              [ww1_sbnYc w_sbnYd] \s []
                                  let {
                                    sat_sbnYl [Occ=Once] :: [GHC.Types.Char]
                                    [LclId] =
                                        [ww1_sbnYc w_sbnYd] \u []
                                            let {
                                              sat_sbnYk [Occ=Once] :: [GHC.Types.Char]
                                              [LclId] =
                                                  [ww1_sbnYc w_sbnYd] \u []
                                                      case
                                                          GHC.Show.$w$cshowsPrec4
                                                              0# ww1_sbnYc w_sbnYd
                                                      of
                                                      { (#,#) ww3_sbnYi [Occ=Once]
                                                              ww4_sbnYj [Occ=Once] ->
                                                            : [ww3_sbnYi ww4_sbnYj];
                                                      };
                                            } in 
                                              GHC.CString.unpackAppendCString#
                                                  GHC.IO.Handle.$fShowHandlePosn2 sat_sbnYk;
                                  } in 
                                    GHC.CString.unpackAppendCString#
                                        GHC.IO.Handle.Types.$fReadNewlineMode5 sat_sbnYl;
                        } in  GHC.Base.++ file_sbnYf sat_sbnYm;
              } in 
                GHC.CString.unpackAppendCString#
                    GHC.IO.Handle.Types.showHandle1 sat_sbnYn;
          GHC.IO.Handle.Types.DuplexHandle file_sbnYo [Occ=Once]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              let {
                sat_sbnYx [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [ww1_sbnYc w_sbnYd file_sbnYo] \u []
                        let {
                          sat_sbnYw [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                          [LclId] =
                              [ww1_sbnYc w_sbnYd] \s []
                                  let {
                                    sat_sbnYv [Occ=Once] :: [GHC.Types.Char]
                                    [LclId] =
                                        [ww1_sbnYc w_sbnYd] \u []
                                            let {
                                              sat_sbnYu [Occ=Once] :: [GHC.Types.Char]
                                              [LclId] =
                                                  [ww1_sbnYc w_sbnYd] \u []
                                                      case
                                                          GHC.Show.$w$cshowsPrec4
                                                              0# ww1_sbnYc w_sbnYd
                                                      of
                                                      { (#,#) ww3_sbnYs [Occ=Once]
                                                              ww4_sbnYt [Occ=Once] ->
                                                            : [ww3_sbnYs ww4_sbnYt];
                                                      };
                                            } in 
                                              GHC.CString.unpackAppendCString#
                                                  GHC.IO.Handle.$fShowHandlePosn2 sat_sbnYu;
                                  } in 
                                    GHC.CString.unpackAppendCString#
                                        GHC.IO.Handle.Types.$fReadNewlineMode5 sat_sbnYv;
                        } in  GHC.Base.++ file_sbnYo sat_sbnYw;
              } in 
                GHC.CString.unpackAppendCString#
                    GHC.IO.Handle.Types.showHandle1 sat_sbnYx;
        };

GHC.IO.Handle.$fShowHandlePosn_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.IO.Handle.HandlePosn -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,A><S(SL),1*U(1*U,U)><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sbnYy w1_sbnYz w2_sbnYA]
        case w1_sbnYz of {
          GHC.IO.Handle.HandlePosn ww1_sbnYC [Occ=Once]
                                   ww2_sbnYD [Occ=Once] ->
              GHC.IO.Handle.$w$cshowsPrec ww1_sbnYC ww2_sbnYD w2_sbnYA;
        };

GHC.IO.Handle.$fShowHandlePosn3 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.IO.Handle.$fShowHandlePosn_$cshow
  :: GHC.IO.Handle.HandlePosn -> GHC.Base.String
[GblId, Arity=1, Str=<S(SL),1*U(1*U,U)>, Unf=OtherCon []] =
    [] \r [x_sbnYE]
        case x_sbnYE of {
          GHC.IO.Handle.HandlePosn ww1_sbnYG [Occ=Once]
                                   ww2_sbnYH [Occ=Once] ->
              GHC.IO.Handle.$w$cshowsPrec ww1_sbnYG ww2_sbnYH GHC.Types.[];
        };

GHC.IO.Handle.$fShowHandlePosn1
  :: GHC.IO.Handle.HandlePosn -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S(SL),1*U(1*U,U)><L,U>, Unf=OtherCon []] =
    [] \r [w_sbnYI w1_sbnYJ]
        case w_sbnYI of {
          GHC.IO.Handle.HandlePosn ww1_sbnYL [Occ=Once]
                                   ww2_sbnYM [Occ=Once] ->
              GHC.IO.Handle.$w$cshowsPrec ww1_sbnYL ww2_sbnYM w1_sbnYJ;
        };

GHC.IO.Handle.$fShowHandlePosn_$cshowList
  :: [GHC.IO.Handle.HandlePosn] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sbnYN s_sbnYO]
        GHC.Show.showList__
            GHC.IO.Handle.$fShowHandlePosn1 ls_sbnYN s_sbnYO;

GHC.IO.Handle.$fShowHandlePosn [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Handle.HandlePosn
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Handle.$fShowHandlePosn_$cshowsPrec
                                    GHC.IO.Handle.$fShowHandlePosn_$cshow
                                    GHC.IO.Handle.$fShowHandlePosn_$cshowList];

GHC.IO.Handle.hLookAhead3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hLookAhead"#;

GHC.IO.Handle.hLookAhead2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hLookAhead3;

GHC.IO.Handle.hLookAhead1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Char #)
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [handle_sbnYP void_0E]
        GHC.IO.Handle.Internals.wantReadableHandle_1
            GHC.IO.Handle.hLookAhead2
            handle_sbnYP
            GHC.IO.Handle.Internals.hLookAhead_1
            GHC.Prim.void#;

GHC.IO.Handle.hLookAhead
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Char
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.hLookAhead1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.hFlush3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hFlush"#;

GHC.IO.Handle.hFlush2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hFlush3;

GHC.IO.Handle.hFlush1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [handle_sbnYQ void_0E]
        GHC.IO.Handle.Internals.wantWritableHandle1
            GHC.IO.Handle.hFlush2
            handle_sbnYQ
            GHC.IO.Handle.Internals.flushWriteBuffer1
            GHC.Prim.void#;

GHC.IO.Handle.hFlush
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] GHC.IO.Handle.hFlush1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.hFlushAll4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hFlushAll"#;

GHC.IO.Handle.hFlushAll3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hFlushAll4;

GHC.IO.Handle.hFlushAll2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, ()) #)
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [h__sbnYR void_0E]
        case
            GHC.IO.Handle.Internals.flushBuffer1 h__sbnYR GHC.Prim.void#
        of
        { Unit# ipv1_sbnYV [Occ=Once] ->
              let {
                sat_sbnYW [Occ=Once] :: (GHC.IO.Handle.Types.Handle__, ())
                [LclId] =
                    CCCS (,)! [h__sbnYR ipv1_sbnYV];
              } in  Unit# [sat_sbnYW];
        };

GHC.IO.Handle.hFlushAll1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbnYX void_0E]
        case handle_sbnYX of wild_sbnYZ {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbnZ1 ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sbnZ4 [Occ=Once!] ->
                    let {
                      io_sbnZ5 [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbnYZ dt_sbnZ1] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hFlushAll3
                                      wild_sbnYZ
                                      GHC.IO.Handle.hFlushAll2
                                      dt_sbnZ1
                                      GHC.Prim.void#
                              of
                              { Unit# ipv3_sbnZ9 [Occ=Once!] ->
                                    case ipv3_sbnZ9 of {
                                      (,) h'_sbnZb [Occ=Once] v_sbnZc [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbnZ1 h'_sbnZb GHC.Prim.void#]
                                          of
                                          s2#_sbnZd
                                          { (##) -> Unit# [v_sbnZc];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbnZ4 of {
                        __DEFAULT -> io_sbnZ5 GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sbnZ5 GHC.Prim.void#];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sbnZg
                                           _ [Occ=Dead] ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sbnZk [Occ=Once!] ->
                    let {
                      io_sbnZl [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbnYZ dt_sbnZg] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hFlushAll3
                                      wild_sbnYZ
                                      GHC.IO.Handle.hFlushAll2
                                      dt_sbnZg
                                      GHC.Prim.void#
                              of
                              { Unit# ipv3_sbnZp [Occ=Once!] ->
                                    case ipv3_sbnZp of {
                                      (,) h'_sbnZr [Occ=Once] v_sbnZs [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbnZg h'_sbnZr GHC.Prim.void#]
                                          of
                                          s2#_sbnZt
                                          { (##) -> Unit# [v_sbnZs];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbnZk of {
                        __DEFAULT -> io_sbnZl GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sbnZl GHC.Prim.void#];
                      };
              };
        };

GHC.IO.Handle.hFlushAll
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO ()
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.hFlushAll1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.hGetEcho7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hIsTerminalDevice"#;

GHC.IO.Handle.hGetEcho_fun :: GHC.Base.String
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hGetEcho7;

GHC.IO.Handle.hGetEcho6
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool) #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h__sbnZv void_0E]
        case h__sbnZv of wild_sbnZx {
          GHC.IO.Handle.Types.Handle__ $dIODevice_sbnZy [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds_sbnZB [Occ=Once]
                                       ds1_sbnZC [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds1_sbnZC of {
                __DEFAULT ->
                    case
                        GHC.IO.Device.isTerminal $dIODevice_sbnZy ds_sbnZB GHC.Prim.void#
                    of
                    { Unit# ipv1_sbnZR [Occ=Once] ->
                          let {
                            sat_sbnZS [Occ=Once]
                              :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                            [LclId] =
                                CCCS (,)! [wild_sbnZx ipv1_sbnZR];
                          } in  Unit# [sat_sbnZS];
                    };
                GHC.IO.Handle.Types.ClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_closedHandle1 GHC.Prim.void#;
              };
        };

GHC.IO.Handle.hGetEcho5
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbnZU void_0E]
        case handle_sbnZU of wild_sbnZW {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbnZY ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sbo01 [Occ=Once!] ->
                    let {
                      io_sbo02 [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbnZW dt_sbnZY] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hGetEcho_fun
                                      wild_sbnZW
                                      GHC.IO.Handle.hGetEcho6
                                      dt_sbnZY
                                      GHC.Prim.void#
                              of
                              { Unit# ipv3_sbo06 [Occ=Once!] ->
                                    case ipv3_sbo06 of {
                                      (,) h'_sbo08 [Occ=Once] v_sbo09 [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbnZY h'_sbo08 GHC.Prim.void#]
                                          of
                                          s2#_sbo0a
                                          { (##) -> Unit# [v_sbo09];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbo01 of {
                        __DEFAULT -> io_sbo02 GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sbo02 GHC.Prim.void#];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sbo0d
                                           _ [Occ=Dead] ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sbo0h [Occ=Once!] ->
                    let {
                      io_sbo0i [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbnZW dt_sbo0d] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hGetEcho_fun
                                      wild_sbnZW
                                      GHC.IO.Handle.hGetEcho6
                                      dt_sbo0d
                                      GHC.Prim.void#
                              of
                              { Unit# ipv3_sbo0m [Occ=Once!] ->
                                    case ipv3_sbo0m of {
                                      (,) h'_sbo0o [Occ=Once] v_sbo0p [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbo0d h'_sbo0o GHC.Prim.void#]
                                          of
                                          s2#_sbo0q
                                          { (##) -> Unit# [v_sbo0p];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbo0h of {
                        __DEFAULT -> io_sbo0i GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sbo0i GHC.Prim.void#];
                      };
              };
        };

GHC.IO.Handle.hIsTerminalDevice
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.hGetEcho5 eta_B2 GHC.Prim.void#;

lvl_rbnWB :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hDuplicateTo"#;

lvl1_rbnWC :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl_rbnWB;

lvl2_rbnWD :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "handles are incompatible"#;

lvl3_rbnWE :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl2_rbnWD;

ioe_dupHandlesNotCompatible_rbnWF
  :: forall a.
     GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [h_sbo0s void_0E]
        let {
          sat_sbo0w [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [h_sbo0s] \u []
                  let {
                    sat_sbo0u [Occ=Once] :: GHC.Base.Maybe GHC.IO.Handle.Types.Handle
                    [LclId] =
                        CCCS GHC.Base.Just! [h_sbo0s]; } in
                  let {
                    sat_sbo0v [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        CCCS GHC.IO.Exception.IOError! [sat_sbo0u
                                                        GHC.IO.Exception.IllegalOperation
                                                        lvl1_rbnWC
                                                        lvl3_rbnWE
                                                        GHC.Base.Nothing
                                                        GHC.Base.Nothing];
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sbo0v;
        } in  raiseIO# [sat_sbo0w GHC.Prim.void#];

GHC.IO.Handle.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.Handle.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.$trModule4];

GHC.IO.Handle.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Handle"#;

GHC.IO.Handle.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.$trModule2];

GHC.IO.Handle.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Handle.$trModule3
                                     GHC.IO.Handle.$trModule1];

$krep_rbnWG :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Integer.Type.$tcInteger
                                              GHC.Types.[]];

$krep1_rbnWH :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcHandle
                                              GHC.Types.[]];

GHC.IO.Handle.$tcHandlePosn2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "HandlePosn"#;

GHC.IO.Handle.$tcHandlePosn1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.$tcHandlePosn2];

GHC.IO.Handle.$tcHandlePosn :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [14603627022044816180##
                                    6047646306417636971##
                                    GHC.IO.Handle.$trModule
                                    GHC.IO.Handle.$tcHandlePosn1
                                    0#
                                    GHC.Types.krep$*];

$krep2_rbnWI :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.$tcHandlePosn
                                              GHC.Types.[]];

$krep3_rbnWJ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_rbnWG $krep2_rbnWI];

GHC.IO.Handle.$tc'HandlePosn1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_rbnWH $krep3_rbnWJ];

GHC.IO.Handle.$tc'HandlePosn3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'HandlePosn"#;

GHC.IO.Handle.$tc'HandlePosn2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.$tc'HandlePosn3];

GHC.IO.Handle.$tc'HandlePosn :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2346493220596692855##
                                    1604707260447826943##
                                    GHC.IO.Handle.$trModule
                                    GHC.IO.Handle.$tc'HandlePosn2
                                    0#
                                    GHC.IO.Handle.$tc'HandlePosn1];

dupHandle__rbnWK
  :: forall dev.
     (GHC.IO.Device.IODevice dev, GHC.IO.BufferedIO.BufferedIO dev,
      Data.Typeable.Internal.Typeable dev) =>
     dev
     -> GHC.IO.FilePath
     -> GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
     -> GHC.IO.Handle.Types.Handle__
     -> GHC.Base.Maybe GHC.IO.Handle.Internals.HandleFinalizer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId,
 Arity=9,
 Str=<L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U)><L,U><L,U><L,U><L,U><S,1*U><L,1*U><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [$dIODevice_sbo0x
                    $dBufferedIO_sbo0y
                    $dTypeable_sbo0z
                    new_dev_sbo0A
                    filepath_sbo0B
                    other_side_sbo0C
                    h__sbo0D
                    mb_finalizer_sbo0E
                    void_0E]
        case h__sbo0D of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds1_sbo0L [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds3_sbo0R [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds6_sbo0U [Occ=Once]
                                       ds7_sbo0V [Occ=Once]
                                       _ [Occ=Dead] ->
              let-no-escape {
                $j_sbo0X [Occ=Once*!T[2], Dmd=<L,1*C1(C1(U(U,U)))>]
                  :: GHC.Prim.State# GHC.Prim.RealWorld
                     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                           GHC.IO.Handle.Types.Handle #)
                [LclId[JoinId(2)], Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
                    sat-only [$dIODevice_sbo0x
                              $dBufferedIO_sbo0y
                              $dTypeable_sbo0z
                              new_dev_sbo0A
                              filepath_sbo0B
                              other_side_sbo0C
                              mb_finalizer_sbo0E
                              ds1_sbo0L
                              ds6_sbo0U
                              ds7_sbo0V] \r [void_0E ipv1_sbo0Z]
                        let {
                          sat_sbo10 [Occ=Once] :: GHC.IO.Handle.Types.NewlineMode
                          [LclId] =
                              CCCS GHC.IO.Handle.Types.NewlineMode! [ds6_sbo0U ds7_sbo0V];
                        } in 
                          GHC.IO.Handle.Internals.mkDuplexHandle5
                              $dIODevice_sbo0x
                              $dBufferedIO_sbo0y
                              $dTypeable_sbo0z
                              new_dev_sbo0A
                              filepath_sbo0B
                              ds1_sbo0L
                              GHC.Types.True
                              ipv1_sbo0Z
                              sat_sbo10
                              mb_finalizer_sbo0E
                              other_side_sbo0C
                              GHC.Prim.void#;
              } in 
                case ds3_sbo0R of {
                  GHC.Base.Nothing -> $j_sbo0X GHC.Prim.void# GHC.Base.Nothing;
                  GHC.Base.Just _ [Occ=Dead] ->
                      case GHC.IO.Encoding.getLocaleEncoding1 of {
                        (,) getLocaleEncoding3_sbo14 [Occ=Once] _ [Occ=Dead] ->
                            case getLocaleEncoding3_sbo14 GHC.Prim.void# of {
                              Unit# ipv2_sbo18 [Occ=Once] ->
                                  let {
                                    sat_sbo19 [Occ=Once]
                                      :: GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
                                    [LclId] =
                                        CCCS GHC.Base.Just! [ipv2_sbo18];
                                  } in  $j_sbo0X GHC.Prim.void# sat_sbo19;
                            };
                      };
                };
        };

lvl4_rbnWL :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Pattern match failure in do expression at GHC/IO/Handle.hs:713:7-20"#;

lvl5_rbnWM
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle__ #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    sat-only [] \r [void_0E]
        case GHC.CString.unpackCString# lvl4_rbnWL of sat_sbo1b {
          __DEFAULT -> GHC.IO.failIO1 sat_sbo1b GHC.Prim.void#;
        };

dupHandleTo_rbnWN
  :: GHC.IO.FilePath
     -> GHC.IO.Handle.Types.Handle
     -> GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
     -> GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Handle.Types.Handle__
     -> GHC.Base.Maybe GHC.IO.Handle.Internals.HandleFinalizer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle__ #)
[GblId,
 Arity=7,
 Str=<L,U><L,U><L,U><S,1*U><S,1*U><L,1*U><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [filepath_sbo1c
                    h_sbo1d
                    other_side_sbo1e
                    hto__sbo1f
                    h__sbo1g
                    mb_finalizer_sbo1h
                    void_0E]
        case hto__sbo1f of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       $dTypeable_sbo1m [Occ=Once]
                                       ds_sbo1n
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case h__sbo1g of wild1_sbo1A {
                GHC.IO.Handle.Types.Handle__ $dIODevice1_sbo1B
                                             $dBufferedIO1_sbo1C [Occ=Once]
                                             $dTypeable1_sbo1D
                                             ds9_sbo1E [Occ=Once]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead] ->
                    case
                        GHC.IO.Handle.Internals.flushBuffer1 wild1_sbo1A GHC.Prim.void#
                    of
                    { Unit# _ [Occ=Dead] ->
                          case
                              Data.Typeable.Internal.sameTypeRep
                                  $dTypeable_sbo1m $dTypeable1_sbo1D
                          of
                          { GHC.Types.False ->
                                ioe_dupHandlesNotCompatible_rbnWF h_sbo1d GHC.Prim.void#;
                            GHC.Types.True ->
                                case
                                    GHC.IO.Device.dup2
                                        $dIODevice1_sbo1B ds9_sbo1E ds_sbo1n GHC.Prim.void#
                                of
                                { Unit# _ [Occ=Dead] ->
                                      case
                                          dupHandle__rbnWK
                                              $dIODevice1_sbo1B
                                              $dBufferedIO1_sbo1C
                                              $dTypeable1_sbo1D
                                              ds_sbo1n
                                              filepath_sbo1c
                                              other_side_sbo1e
                                              wild1_sbo1A
                                              mb_finalizer_sbo1h
                                              GHC.Prim.void#
                                      of
                                      { Unit# ipv5_sbo20 [Occ=Once!] ->
                                            case ipv5_sbo20 of {
                                              GHC.IO.Handle.Types.FileHandle _ [Occ=Dead]
                                                                             dt8_sbo23 [Occ=Once] ->
                                                  takeMVar# [dt8_sbo23 GHC.Prim.void#];
                                              GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                                               _ [Occ=Dead]
                                                                               _ [Occ=Dead] ->
                                                  lvl5_rbnWM GHC.Prim.void#;
                                            };
                                      };
                                };
                          };
                    };
              };
        };

lvl6_rbnWO :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "dupHandle"#;

lvl7_rbnWP :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl6_rbnWO;

GHC.IO.Handle.hSetNewlineMode3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hSetNewlineMode"#;

GHC.IO.Handle.hSetNewlineMode2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hSetNewlineMode3;

GHC.IO.Handle.$whSetNewlineMode [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=4, Str=<S,1*U><L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [w_sbo27 ww_sbo28 ww1_sbo29 void_0E]
        let {
          sat_sbo2y [Occ=Once]
            :: GHC.IO.Handle.Types.Handle__
               -> GHC.Types.IO GHC.IO.Handle.Types.Handle__
          [LclId] =
              [ww_sbo28 ww1_sbo29] \r [h__sbo2b void_0E]
                  case h__sbo2b of wild_sbo2d {
                    GHC.IO.Handle.Types.Handle__ $dIODevice_sbo2e [Occ=Once]
                                                 $dBufferedIO_sbo2f [Occ=Once]
                                                 $dTypeable_sbo2g [Occ=Once]
                                                 ds_sbo2h [Occ=Once]
                                                 ds1_sbo2i [Occ=Once]
                                                 dt_sbo2j [Occ=Once]
                                                 ds2_sbo2k [Occ=Once]
                                                 dt1_sbo2l [Occ=Once]
                                                 dt2_sbo2m [Occ=Once]
                                                 dt3_sbo2n [Occ=Once]
                                                 ds3_sbo2o [Occ=Once]
                                                 ds4_sbo2p [Occ=Once]
                                                 ds5_sbo2q [Occ=Once]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 ds8_sbo2t [Occ=Once] ->
                        case
                            GHC.IO.Handle.Internals.flushBuffer1 wild_sbo2d GHC.Prim.void#
                        of
                        { Unit# _ [Occ=Dead] ->
                              let {
                                sat_sbo2x [Occ=Once] :: GHC.IO.Handle.Types.Handle__
                                [LclId] =
                                    CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbo2e
                                                                        $dBufferedIO_sbo2f
                                                                        $dTypeable_sbo2g
                                                                        ds_sbo2h
                                                                        ds1_sbo2i
                                                                        dt_sbo2j
                                                                        ds2_sbo2k
                                                                        dt1_sbo2l
                                                                        dt2_sbo2m
                                                                        dt3_sbo2n
                                                                        ds3_sbo2o
                                                                        ds4_sbo2p
                                                                        ds5_sbo2q
                                                                        ww_sbo28
                                                                        ww1_sbo29
                                                                        ds8_sbo2t];
                              } in  Unit# [sat_sbo2x];
                        };
                  };
        } in 
          GHC.IO.Handle.Internals.withAllHandles__1
              GHC.IO.Handle.hSetNewlineMode2 w_sbo27 sat_sbo2y GHC.Prim.void#;

GHC.IO.Handle.hSetNewlineMode1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Types.NewlineMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><S,1*U(U,U)><S,U>, Unf=OtherCon []] =
    [] \r [w_sbo2z w1_sbo2A void_0E]
        case w1_sbo2A of {
          GHC.IO.Handle.Types.NewlineMode ww1_sbo2D [Occ=Once]
                                          ww2_sbo2E [Occ=Once] ->
              GHC.IO.Handle.$whSetNewlineMode
                  w_sbo2z ww1_sbo2D ww2_sbo2E GHC.Prim.void#;
        };

GHC.IO.Handle.hSetNewlineMode
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Types.NewlineMode -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,1*U><S,1*U(U,U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.hSetNewlineMode1 eta_B3 eta_B2 GHC.Prim.void#;

lvl8_rbnWQ :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hSetBinaryMode"#;

lvl9_rbnWR :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl8_rbnWQ;

lvl10_rbnWS :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "codec_state"#;

lvl11_rbnWT :: forall ds. ds
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl10_rbnWS of sat_sbo2F {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sbo2F;
        };

GHC.IO.Handle.hSetBinaryMode1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Types.Bool
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbo2G bin_sbo2H void_0E]
        let {
          lvl48_sbo2J :: GHC.IO.Handle.Types.Newline
          [LclId] =
              [bin_sbo2H] \u []
                  case bin_sbo2H of { __DEFAULT -> GHC.IO.Handle.Types.LF []; }; } in
        let {
          sat_sbo6i [Occ=Once]
            :: GHC.IO.Handle.Types.Handle__
               -> GHC.Types.IO GHC.IO.Handle.Types.Handle__
          [LclId] =
              [bin_sbo2H lvl48_sbo2J] \r [h__sbo2L void_0E]
                  case h__sbo2L of {
                    GHC.IO.Handle.Types.Handle__ $dIODevice_sbo2O [Occ=Once*]
                                                 $dBufferedIO_sbo2P [Occ=Once*]
                                                 $dTypeable_sbo2Q [Occ=Once*]
                                                 ds_sbo2R [Occ=Once*]
                                                 ds1_sbo2S
                                                 dt_sbo2T
                                                 ds2_sbo2U [Occ=Once*]
                                                 dt1_sbo2V [Occ=Once]
                                                 dt2_sbo2W
                                                 dt3_sbo2X [Occ=Once*]
                                                 ds3_sbo2Y [Occ=Once*!]
                                                 ds4_sbo2Z
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 ds8_sbo33 [Occ=Once*] ->
                        case readMutVar# [dt2_sbo2W GHC.Prim.void#] of {
                          Unit# ipv1_sbo36 [Occ=Once!] ->
                              case ipv1_sbo36 of {
                                GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                     _ [Occ=Dead]
                                                     ds10_sbo3a [Occ=Once!]
                                                     _ [Occ=Dead]
                                                     dt7_sbo3c [Occ=Once]
                                                     dt8_sbo3d [Occ=Once] ->
                                    let-no-escape {
                                      $w$j_sbo3e [InlPrag=NOUSERINLINE[0],
                                                  Occ=Once*!T[1],
                                                  Dmd=<L,1*C1(U)>]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                 GHC.IO.Handle.Types.Handle__ #)
                                      [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                          sat-only [bin_sbo2H
                                                    lvl48_sbo2J
                                                    $dIODevice_sbo2O
                                                    $dBufferedIO_sbo2P
                                                    $dTypeable_sbo2Q
                                                    ds_sbo2R
                                                    ds1_sbo2S
                                                    dt_sbo2T
                                                    ds2_sbo2U
                                                    dt2_sbo2W
                                                    dt3_sbo2X
                                                    ds3_sbo2Y
                                                    ds4_sbo2Z
                                                    ds8_sbo33] \r [void_0E]
                                              let-no-escape {
                                                $w$j1_sbo3g [InlPrag=NOUSERINLINE[0],
                                                             Occ=Once*!T[1],
                                                             Dmd=<L,1*C1(U)>]
                                                  :: GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.IO.Handle.Types.Handle__ #)
                                                [LclId[JoinId(1)],
                                                 Arity=1,
                                                 Str=<S,U>,
                                                 Unf=OtherCon []] =
                                                    sat-only [bin_sbo2H
                                                              lvl48_sbo2J
                                                              $dIODevice_sbo2O
                                                              $dBufferedIO_sbo2P
                                                              $dTypeable_sbo2Q
                                                              ds_sbo2R
                                                              ds1_sbo2S
                                                              dt_sbo2T
                                                              ds2_sbo2U
                                                              dt2_sbo2W
                                                              dt3_sbo2X
                                                              ds8_sbo33] \r [void_0E]
                                                        let-no-escape {
                                                          $j_sbo3i [Occ=Once*!T[2],
                                                                    Dmd=<L,1*C1(C1(U))>]
                                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> GHC.Base.Maybe
                                                                    GHC.IO.Encoding.Types.TextEncoding
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.IO.Handle.Types.Handle__ #)
                                                          [LclId[JoinId(2)],
                                                           Arity=2,
                                                           Str=<S,U><S,1*U>,
                                                           Unf=OtherCon []] =
                                                              sat-only [lvl48_sbo2J
                                                                        $dIODevice_sbo2O
                                                                        $dBufferedIO_sbo2P
                                                                        $dTypeable_sbo2Q
                                                                        ds_sbo2R
                                                                        ds1_sbo2S
                                                                        dt_sbo2T
                                                                        ds2_sbo2U
                                                                        dt2_sbo2W
                                                                        dt3_sbo2X
                                                                        ds8_sbo33] \r [void_0E
                                                                                       ipv3_sbo3k]
                                                                  case ipv3_sbo3k of wild2_sbo3l {
                                                                    GHC.Base.Nothing ->
                                                                        case
                                                                            readMutVar# [dt_sbo2T
                                                                                         GHC.Prim.void#]
                                                                        of
                                                                        { Unit# ipv5_sbo3o [Occ=Once] ->
                                                                              let {
                                                                                sat_sbo3p [Occ=Once]
                                                                                  :: (GHC.Types.Any,
                                                                                      GHC.IO.Buffer.Buffer
                                                                                        GHC.Word.Word8)
                                                                                [LclId] =
                                                                                    CCCS (,)! [lvl11_rbnWT
                                                                                               ipv5_sbo3o];
                                                                              } in 
                                                                                case
                                                                                    newMutVar# [sat_sbo3p
                                                                                                GHC.Prim.void#]
                                                                                of
                                                                                { Unit# ipv7_sbo3s [Occ=Once] ->
                                                                                      let {
                                                                                        sat_sbo3t [Occ=Once]
                                                                                          :: GHC.IO.Handle.Types.Handle__
                                                                                        [LclId] =
                                                                                            CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbo2O
                                                                                                                                $dBufferedIO_sbo2P
                                                                                                                                $dTypeable_sbo2Q
                                                                                                                                ds_sbo2R
                                                                                                                                ds1_sbo2S
                                                                                                                                dt_sbo2T
                                                                                                                                ds2_sbo2U
                                                                                                                                ipv7_sbo3s
                                                                                                                                dt2_sbo2W
                                                                                                                                dt3_sbo2X
                                                                                                                                GHC.Base.Nothing
                                                                                                                                GHC.Base.Nothing
                                                                                                                                GHC.Base.Nothing
                                                                                                                                lvl48_sbo2J
                                                                                                                                lvl48_sbo2J
                                                                                                                                ds8_sbo33];
                                                                                      } in 
                                                                                        Unit# [sat_sbo3t];
                                                                                };
                                                                        };
                                                                    GHC.Base.Just ds12_sbo3u [Occ=Once!] ->
                                                                        case ds12_sbo3u of {
                                                                          GHC.IO.Encoding.Types.TextEncoding _ [Occ=Dead]
                                                                                                             ds14_sbo3x [Occ=Once*]
                                                                                                             ds15_sbo3y [Occ=Once*] ->
                                                                              let-no-escape {
                                                                                $j1_sbo3z [Occ=Once*!T[2],
                                                                                           Dmd=<L,1*C1(C1(U))>]
                                                                                  :: GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                     -> GHC.Base.Maybe
                                                                                          (GHC.IO.Encoding.Types.TextDecoder
                                                                                             dstate_ibkNi)
                                                                                     -> (# GHC.Prim.State#
                                                                                             GHC.Prim.RealWorld,
                                                                                           GHC.IO.Handle.Types.Handle__ #)
                                                                                [LclId[JoinId(2)],
                                                                                 Arity=2,
                                                                                 Str=<S,U><L,U>,
                                                                                 Unf=OtherCon []] =
                                                                                    sat-only [lvl48_sbo2J
                                                                                              $dIODevice_sbo2O
                                                                                              $dBufferedIO_sbo2P
                                                                                              $dTypeable_sbo2Q
                                                                                              ds_sbo2R
                                                                                              ds1_sbo2S
                                                                                              dt_sbo2T
                                                                                              ds2_sbo2U
                                                                                              dt2_sbo2W
                                                                                              dt3_sbo2X
                                                                                              ds8_sbo33
                                                                                              wild2_sbo3l
                                                                                              ds15_sbo3y] \r [void_0E
                                                                                                              ipv5_sbo3B]
                                                                                        case
                                                                                            ds1_sbo2S
                                                                                        of
                                                                                        wild4_sbo3C
                                                                                        { __DEFAULT ->
                                                                                              case
                                                                                                  readMutVar# [dt_sbo2T
                                                                                                               GHC.Prim.void#]
                                                                                              of
                                                                                              { Unit# ipv7_sbo3F [Occ=Once] ->
                                                                                                    let {
                                                                                                      sat_sbo3G [Occ=Once]
                                                                                                        :: (dstate_ibkNi,
                                                                                                            GHC.IO.Buffer.Buffer
                                                                                                              GHC.Word.Word8)
                                                                                                      [LclId] =
                                                                                                          CCCS (,)! [lvl11_rbnWT
                                                                                                                     ipv7_sbo3F];
                                                                                                    } in 
                                                                                                      case
                                                                                                          newMutVar# [sat_sbo3G
                                                                                                                      GHC.Prim.void#]
                                                                                                      of
                                                                                                      { Unit# ipv9_sbo3J [Occ=Once] ->
                                                                                                            let {
                                                                                                              sat_sbo3K [Occ=Once]
                                                                                                                :: GHC.IO.Handle.Types.Handle__
                                                                                                              [LclId] =
                                                                                                                  CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbo2O
                                                                                                                                                      $dBufferedIO_sbo2P
                                                                                                                                                      $dTypeable_sbo2Q
                                                                                                                                                      ds_sbo2R
                                                                                                                                                      wild4_sbo3C
                                                                                                                                                      dt_sbo2T
                                                                                                                                                      ds2_sbo2U
                                                                                                                                                      ipv9_sbo3J
                                                                                                                                                      dt2_sbo2W
                                                                                                                                                      dt3_sbo2X
                                                                                                                                                      GHC.Base.Nothing
                                                                                                                                                      ipv5_sbo3B
                                                                                                                                                      wild2_sbo3l
                                                                                                                                                      lvl48_sbo2J
                                                                                                                                                      lvl48_sbo2J
                                                                                                                                                      ds8_sbo33];
                                                                                                            } in 
                                                                                                              Unit# [sat_sbo3K];
                                                                                                      };
                                                                                              };
                                                                                          GHC.IO.Handle.Types.WriteHandle ->
                                                                                              case
                                                                                                  ds15_sbo3y
                                                                                                      GHC.Prim.void#
                                                                                              of
                                                                                              { Unit# ipv7_sbo3N [Occ=Once] ->
                                                                                                    case
                                                                                                        readMutVar# [dt_sbo2T
                                                                                                                     GHC.Prim.void#]
                                                                                                    of
                                                                                                    { Unit# ipv9_sbo3Q [Occ=Once] ->
                                                                                                          let {
                                                                                                            sat_sbo3R [Occ=Once]
                                                                                                              :: (dstate_ibkNi,
                                                                                                                  GHC.IO.Buffer.Buffer
                                                                                                                    GHC.Word.Word8)
                                                                                                            [LclId] =
                                                                                                                CCCS (,)! [lvl11_rbnWT
                                                                                                                           ipv9_sbo3Q];
                                                                                                          } in 
                                                                                                            case
                                                                                                                newMutVar# [sat_sbo3R
                                                                                                                            GHC.Prim.void#]
                                                                                                            of
                                                                                                            { Unit# ipv11_sbo3U [Occ=Once] ->
                                                                                                                  let {
                                                                                                                    sat_sbo3V [Occ=Once]
                                                                                                                      :: GHC.Base.Maybe
                                                                                                                           (GHC.IO.Encoding.Types.TextEncoder
                                                                                                                              estate_ibkNj)
                                                                                                                    [LclId] =
                                                                                                                        CCCS GHC.Base.Just! [ipv7_sbo3N]; } in
                                                                                                                  let {
                                                                                                                    sat_sbo3W [Occ=Once]
                                                                                                                      :: GHC.IO.Handle.Types.Handle__
                                                                                                                    [LclId] =
                                                                                                                        CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbo2O
                                                                                                                                                            $dBufferedIO_sbo2P
                                                                                                                                                            $dTypeable_sbo2Q
                                                                                                                                                            ds_sbo2R
                                                                                                                                                            GHC.IO.Handle.Types.WriteHandle
                                                                                                                                                            dt_sbo2T
                                                                                                                                                            ds2_sbo2U
                                                                                                                                                            ipv11_sbo3U
                                                                                                                                                            dt2_sbo2W
                                                                                                                                                            dt3_sbo2X
                                                                                                                                                            sat_sbo3V
                                                                                                                                                            ipv5_sbo3B
                                                                                                                                                            wild2_sbo3l
                                                                                                                                                            lvl48_sbo2J
                                                                                                                                                            lvl48_sbo2J
                                                                                                                                                            ds8_sbo33];
                                                                                                                  } in 
                                                                                                                    Unit# [sat_sbo3W];
                                                                                                            };
                                                                                                    };
                                                                                              };
                                                                                          GHC.IO.Handle.Types.AppendHandle ->
                                                                                              case
                                                                                                  ds15_sbo3y
                                                                                                      GHC.Prim.void#
                                                                                              of
                                                                                              { Unit# ipv7_sbo3Z [Occ=Once] ->
                                                                                                    case
                                                                                                        readMutVar# [dt_sbo2T
                                                                                                                     GHC.Prim.void#]
                                                                                                    of
                                                                                                    { Unit# ipv9_sbo42 [Occ=Once] ->
                                                                                                          let {
                                                                                                            sat_sbo43 [Occ=Once]
                                                                                                              :: (dstate_ibkNi,
                                                                                                                  GHC.IO.Buffer.Buffer
                                                                                                                    GHC.Word.Word8)
                                                                                                            [LclId] =
                                                                                                                CCCS (,)! [lvl11_rbnWT
                                                                                                                           ipv9_sbo42];
                                                                                                          } in 
                                                                                                            case
                                                                                                                newMutVar# [sat_sbo43
                                                                                                                            GHC.Prim.void#]
                                                                                                            of
                                                                                                            { Unit# ipv11_sbo46 [Occ=Once] ->
                                                                                                                  let {
                                                                                                                    sat_sbo47 [Occ=Once]
                                                                                                                      :: GHC.Base.Maybe
                                                                                                                           (GHC.IO.Encoding.Types.TextEncoder
                                                                                                                              estate_ibkNj)
                                                                                                                    [LclId] =
                                                                                                                        CCCS GHC.Base.Just! [ipv7_sbo3Z]; } in
                                                                                                                  let {
                                                                                                                    sat_sbo48 [Occ=Once]
                                                                                                                      :: GHC.IO.Handle.Types.Handle__
                                                                                                                    [LclId] =
                                                                                                                        CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbo2O
                                                                                                                                                            $dBufferedIO_sbo2P
                                                                                                                                                            $dTypeable_sbo2Q
                                                                                                                                                            ds_sbo2R
                                                                                                                                                            GHC.IO.Handle.Types.AppendHandle
                                                                                                                                                            dt_sbo2T
                                                                                                                                                            ds2_sbo2U
                                                                                                                                                            ipv11_sbo46
                                                                                                                                                            dt2_sbo2W
                                                                                                                                                            dt3_sbo2X
                                                                                                                                                            sat_sbo47
                                                                                                                                                            ipv5_sbo3B
                                                                                                                                                            wild2_sbo3l
                                                                                                                                                            lvl48_sbo2J
                                                                                                                                                            lvl48_sbo2J
                                                                                                                                                            ds8_sbo33];
                                                                                                                  } in 
                                                                                                                    Unit# [sat_sbo48];
                                                                                                            };
                                                                                                    };
                                                                                              };
                                                                                          GHC.IO.Handle.Types.ReadWriteHandle ->
                                                                                              case
                                                                                                  ds15_sbo3y
                                                                                                      GHC.Prim.void#
                                                                                              of
                                                                                              { Unit# ipv7_sbo4b [Occ=Once] ->
                                                                                                    case
                                                                                                        readMutVar# [dt_sbo2T
                                                                                                                     GHC.Prim.void#]
                                                                                                    of
                                                                                                    { Unit# ipv9_sbo4e [Occ=Once] ->
                                                                                                          let {
                                                                                                            sat_sbo4f [Occ=Once]
                                                                                                              :: (dstate_ibkNi,
                                                                                                                  GHC.IO.Buffer.Buffer
                                                                                                                    GHC.Word.Word8)
                                                                                                            [LclId] =
                                                                                                                CCCS (,)! [lvl11_rbnWT
                                                                                                                           ipv9_sbo4e];
                                                                                                          } in 
                                                                                                            case
                                                                                                                newMutVar# [sat_sbo4f
                                                                                                                            GHC.Prim.void#]
                                                                                                            of
                                                                                                            { Unit# ipv11_sbo4i [Occ=Once] ->
                                                                                                                  let {
                                                                                                                    sat_sbo4j [Occ=Once]
                                                                                                                      :: GHC.Base.Maybe
                                                                                                                           (GHC.IO.Encoding.Types.TextEncoder
                                                                                                                              estate_ibkNj)
                                                                                                                    [LclId] =
                                                                                                                        CCCS GHC.Base.Just! [ipv7_sbo4b]; } in
                                                                                                                  let {
                                                                                                                    sat_sbo4k [Occ=Once]
                                                                                                                      :: GHC.IO.Handle.Types.Handle__
                                                                                                                    [LclId] =
                                                                                                                        CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbo2O
                                                                                                                                                            $dBufferedIO_sbo2P
                                                                                                                                                            $dTypeable_sbo2Q
                                                                                                                                                            ds_sbo2R
                                                                                                                                                            GHC.IO.Handle.Types.ReadWriteHandle
                                                                                                                                                            dt_sbo2T
                                                                                                                                                            ds2_sbo2U
                                                                                                                                                            ipv11_sbo4i
                                                                                                                                                            dt2_sbo2W
                                                                                                                                                            dt3_sbo2X
                                                                                                                                                            sat_sbo4j
                                                                                                                                                            ipv5_sbo3B
                                                                                                                                                            wild2_sbo3l
                                                                                                                                                            lvl48_sbo2J
                                                                                                                                                            lvl48_sbo2J
                                                                                                                                                            ds8_sbo33];
                                                                                                                  } in 
                                                                                                                    Unit# [sat_sbo4k];
                                                                                                            };
                                                                                                    };
                                                                                              };
                                                                                        };
                                                                              } in 
                                                                                case ds1_sbo2S of {
                                                                                  __DEFAULT ->
                                                                                      $j1_sbo3z
                                                                                          GHC.Prim.void#
                                                                                          GHC.Base.Nothing;
                                                                                  GHC.IO.Handle.Types.ReadHandle ->
                                                                                      case
                                                                                          ds14_sbo3x
                                                                                              GHC.Prim.void#
                                                                                      of
                                                                                      { Unit# ipv5_sbo4o [Occ=Once] ->
                                                                                            let {
                                                                                              sat_sbo4p [Occ=Once]
                                                                                                :: GHC.Base.Maybe
                                                                                                     (GHC.IO.Encoding.Types.TextDecoder
                                                                                                        dstate_ibkNi)
                                                                                              [LclId] =
                                                                                                  CCCS GHC.Base.Just! [ipv5_sbo4o];
                                                                                            } in 
                                                                                              $j1_sbo3z
                                                                                                  GHC.Prim.void#
                                                                                                  sat_sbo4p;
                                                                                      };
                                                                                  GHC.IO.Handle.Types.ReadWriteHandle ->
                                                                                      case
                                                                                          ds14_sbo3x
                                                                                              GHC.Prim.void#
                                                                                      of
                                                                                      { Unit# ipv5_sbo4s [Occ=Once] ->
                                                                                            let {
                                                                                              sat_sbo4t [Occ=Once]
                                                                                                :: GHC.Base.Maybe
                                                                                                     (GHC.IO.Encoding.Types.TextDecoder
                                                                                                        dstate_ibkNi)
                                                                                              [LclId] =
                                                                                                  CCCS GHC.Base.Just! [ipv5_sbo4s];
                                                                                            } in 
                                                                                              $j1_sbo3z
                                                                                                  GHC.Prim.void#
                                                                                                  sat_sbo4t;
                                                                                      };
                                                                                };
                                                                        };
                                                                  };
                                                        } in 
                                                          case bin_sbo2H of {
                                                            GHC.Types.False ->
                                                                case
                                                                    GHC.IO.Encoding.getLocaleEncoding1
                                                                of
                                                                { (,) getLocaleEncoding3_sbo4w [Occ=Once]
                                                                      _ [Occ=Dead] ->
                                                                      case
                                                                          getLocaleEncoding3_sbo4w
                                                                              GHC.Prim.void#
                                                                      of
                                                                      { Unit# ipv3_sbo4A [Occ=Once] ->
                                                                            let {
                                                                              sat_sbo4B [Occ=Once]
                                                                                :: GHC.Base.Maybe
                                                                                     GHC.IO.Encoding.Types.TextEncoding
                                                                              [LclId] =
                                                                                  CCCS GHC.Base.Just! [ipv3_sbo4A];
                                                                            } in 
                                                                              $j_sbo3i
                                                                                  GHC.Prim.void#
                                                                                  sat_sbo4B;
                                                                      };
                                                                };
                                                            GHC.Types.True ->
                                                                $j_sbo3i
                                                                    GHC.Prim.void# GHC.Base.Nothing;
                                                          };
                                              } in 
                                                case ds4_sbo2Z of {
                                                  GHC.Base.Nothing ->
                                                      case ds3_sbo2Y of {
                                                        GHC.Base.Nothing ->
                                                            $w$j1_sbo3g GHC.Prim.void#;
                                                        GHC.Base.Just d_sbo4E [Occ=Once!] ->
                                                            case d_sbo4E of {
                                                              GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                                _ [Occ=Dead]
                                                                                                ds13_sbo4I [Occ=Once]
                                                                                                _ [Occ=Dead]
                                                                                                _ [Occ=Dead] ->
                                                                  case
                                                                      ds13_sbo4I GHC.Prim.void#
                                                                  of
                                                                  { Unit# _ [Occ=Dead] ->
                                                                        $w$j1_sbo3g GHC.Prim.void#;
                                                                  };
                                                            };
                                                      };
                                                  GHC.Base.Just d_sbo4O [Occ=Once!] ->
                                                      case d_sbo4O of {
                                                        GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                          _ [Occ=Dead]
                                                                                          ds13_sbo4S [Occ=Once]
                                                                                          _ [Occ=Dead]
                                                                                          _ [Occ=Dead] ->
                                                            case ds13_sbo4S GHC.Prim.void# of {
                                                              Unit# _ [Occ=Dead] ->
                                                                  case ds3_sbo2Y of {
                                                                    GHC.Base.Nothing ->
                                                                        $w$j1_sbo3g GHC.Prim.void#;
                                                                    GHC.Base.Just d1_sbo4Z [Occ=Once!] ->
                                                                        case d1_sbo4Z of {
                                                                          GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                                            _ [Occ=Dead]
                                                                                                            ds19_sbo53 [Occ=Once]
                                                                                                            _ [Occ=Dead]
                                                                                                            _ [Occ=Dead] ->
                                                                              case
                                                                                  ds19_sbo53
                                                                                      GHC.Prim.void#
                                                                              of
                                                                              { Unit# _ [Occ=Dead] ->
                                                                                    $w$j1_sbo3g
                                                                                        GHC.Prim.void#;
                                                                              };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                    } in 
                                      case ds10_sbo3a of {
                                        GHC.IO.Buffer.ReadBuffer ->
                                            case readMutVar# [dt2_sbo2W GHC.Prim.void#] of {
                                              Unit# ipv3_sbo5c [Occ=Once!] ->
                                                  case ipv3_sbo5c of {
                                                    GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                         _ [Occ=Dead]
                                                                         ds11_sbo5g [Occ=Once!]
                                                                         _ [Occ=Dead]
                                                                         dt13_sbo5i [Occ=Once]
                                                                         dt14_sbo5j [Occ=Once] ->
                                                        case ds11_sbo5g of {
                                                          GHC.IO.Buffer.ReadBuffer ->
                                                              case ==# [dt13_sbo5i dt14_sbo5j] of {
                                                                __DEFAULT ->
                                                                    case
                                                                        readMutVar# [dt1_sbo2V
                                                                                     GHC.Prim.void#]
                                                                    of
                                                                    { Unit# ipv5_sbo5o [Occ=Once!] ->
                                                                          case ipv5_sbo5o of {
                                                                            (,) codec_state_sbo5q [Occ=Once]
                                                                                bbuf0_sbo5r [Occ=Once*] ->
                                                                                case
                                                                                    readMutVar# [dt2_sbo2W
                                                                                                 GHC.Prim.void#]
                                                                                of
                                                                                { Unit# ipv7_sbo5u ->
                                                                                      let {
                                                                                        sat_sbo5C [Occ=Once]
                                                                                          :: GHC.IO.Buffer.Buffer
                                                                                               GHC.IO.Buffer.CharBufElem
                                                                                        [LclId] =
                                                                                            [ipv7_sbo5u] \u []
                                                                                                case
                                                                                                    ipv7_sbo5u
                                                                                                of
                                                                                                { GHC.IO.Buffer.Buffer dt9_sbo5w [Occ=Once]
                                                                                                                       dt15_sbo5x [Occ=Once]
                                                                                                                       ds15_sbo5y [Occ=Once]
                                                                                                                       dt16_sbo5z [Occ=Once]
                                                                                                                       _ [Occ=Dead]
                                                                                                                       _ [Occ=Dead] ->
                                                                                                      GHC.IO.Buffer.Buffer [dt9_sbo5w
                                                                                                                            dt15_sbo5x
                                                                                                                            ds15_sbo5y
                                                                                                                            dt16_sbo5z
                                                                                                                            0#
                                                                                                                            0#];
                                                                                                };
                                                                                      } in 
                                                                                        case
                                                                                            writeMutVar# [dt2_sbo2W
                                                                                                          sat_sbo5C
                                                                                                          GHC.Prim.void#]
                                                                                        of
                                                                                        s2#_sbo5D
                                                                                        { (##) ->
                                                                                              case
                                                                                                  ipv7_sbo5u
                                                                                              of
                                                                                              { GHC.IO.Buffer.Buffer dt9_sbo5F [Occ=Once]
                                                                                                                     dt15_sbo5G [Occ=Once]
                                                                                                                     ds15_sbo5H [Occ=Once]
                                                                                                                     _ [Occ=Dead]
                                                                                                                     dt17_sbo5J [Occ=Once!]
                                                                                                                     _ [Occ=Dead] ->
                                                                                                    case
                                                                                                        dt17_sbo5J
                                                                                                    of
                                                                                                    wild7_sbo5L
                                                                                                    { __DEFAULT ->
                                                                                                          case
                                                                                                              ds4_sbo2Z
                                                                                                          of
                                                                                                          { GHC.Base.Nothing ->
                                                                                                                let {
                                                                                                                  sat_sbo5V [Occ=Once]
                                                                                                                    :: GHC.IO.Buffer.Buffer
                                                                                                                         GHC.Word.Word8
                                                                                                                  [LclId] =
                                                                                                                      [bbuf0_sbo5r
                                                                                                                       wild7_sbo5L] \u []
                                                                                                                          case
                                                                                                                              bbuf0_sbo5r
                                                                                                                          of
                                                                                                                          { GHC.IO.Buffer.Buffer dt19_sbo5O [Occ=Once]
                                                                                                                                                 dt20_sbo5P [Occ=Once]
                                                                                                                                                 ds16_sbo5Q [Occ=Once]
                                                                                                                                                 dt21_sbo5R [Occ=Once]
                                                                                                                                                 dt22_sbo5S [Occ=Once]
                                                                                                                                                 dt23_sbo5T [Occ=Once] ->
                                                                                                                                case
                                                                                                                                    +# [dt22_sbo5S
                                                                                                                                        wild7_sbo5L]
                                                                                                                                of
                                                                                                                                sat_sbo5U
                                                                                                                                { __DEFAULT ->
                                                                                                                                      GHC.IO.Buffer.Buffer [dt19_sbo5O
                                                                                                                                                            dt20_sbo5P
                                                                                                                                                            ds16_sbo5Q
                                                                                                                                                            dt21_sbo5R
                                                                                                                                                            sat_sbo5U
                                                                                                                                                            dt23_sbo5T];
                                                                                                                                };
                                                                                                                          };
                                                                                                                } in 
                                                                                                                  case
                                                                                                                      writeMutVar# [dt_sbo2T
                                                                                                                                    sat_sbo5V
                                                                                                                                    GHC.Prim.void#]
                                                                                                                  of
                                                                                                                  s2#1_sbo5W
                                                                                                                  { (##) ->
                                                                                                                        $w$j_sbo3e
                                                                                                                            GHC.Prim.void#;
                                                                                                                  };
                                                                                                            GHC.Base.Just decoder_sbo5X [Occ=Once!] ->
                                                                                                                case
                                                                                                                    decoder_sbo5X
                                                                                                                of
                                                                                                                { GHC.IO.Encoding.Types.BufferCodec ds16_sbo5Z [Occ=Once]
                                                                                                                                                    ds17_sbo60 [Occ=Once]
                                                                                                                                                    _ [Occ=Dead]
                                                                                                                                                    _ [Occ=Dead]
                                                                                                                                                    ds20_sbo63 [Occ=Once!] ->
                                                                                                                      case
                                                                                                                          ds20_sbo63
                                                                                                                              codec_state_sbo5q
                                                                                                                              GHC.Prim.void#
                                                                                                                      of
                                                                                                                      { Unit# _ [Occ=Dead] ->
                                                                                                                            let {
                                                                                                                              sat_sbo67 [Occ=Once]
                                                                                                                                :: GHC.IO.Buffer.Buffer
                                                                                                                                     GHC.IO.Buffer.CharBufElem
                                                                                                                              [LclId] =
                                                                                                                                  CCCS GHC.IO.Buffer.Buffer! [dt9_sbo5F
                                                                                                                                                              dt15_sbo5G
                                                                                                                                                              ds15_sbo5H
                                                                                                                                                              wild7_sbo5L
                                                                                                                                                              0#
                                                                                                                                                              0#];
                                                                                                                            } in 
                                                                                                                              case
                                                                                                                                  GHC.IO.Handle.Internals.$wstreamEncode
                                                                                                                                      ds16_sbo5Z
                                                                                                                                      ds17_sbo60
                                                                                                                                      bbuf0_sbo5r
                                                                                                                                      sat_sbo67
                                                                                                                                      GHC.Prim.void#
                                                                                                                              of
                                                                                                                              { Unit# ipv11_sbo6a [Occ=Once!] ->
                                                                                                                                    case
                                                                                                                                        ipv11_sbo6a
                                                                                                                                    of
                                                                                                                                    { (,) bbuf1_sbo6c [Occ=Once]
                                                                                                                                          _ [Occ=Dead] ->
                                                                                                                                          case
                                                                                                                                              writeMutVar# [dt_sbo2T
                                                                                                                                                            bbuf1_sbo6c
                                                                                                                                                            GHC.Prim.void#]
                                                                                                                                          of
                                                                                                                                          s2#1_sbo6e
                                                                                                                                          { (##) ->
                                                                                                                                                $w$j_sbo3e
                                                                                                                                                    GHC.Prim.void#;
                                                                                                                                          };
                                                                                                                                    };
                                                                                                                              };
                                                                                                                      };
                                                                                                                };
                                                                                                          };
                                                                                                      0# ->
                                                                                                          case
                                                                                                              writeMutVar# [dt_sbo2T
                                                                                                                            bbuf0_sbo5r
                                                                                                                            GHC.Prim.void#]
                                                                                                          of
                                                                                                          s2#1_sbo6f
                                                                                                          { (##) ->
                                                                                                                $w$j_sbo3e
                                                                                                                    GHC.Prim.void#;
                                                                                                          };
                                                                                                    };
                                                                                              };
                                                                                        };
                                                                                };
                                                                          };
                                                                    };
                                                                1# -> $w$j_sbo3e GHC.Prim.void#;
                                                              };
                                                          GHC.IO.Buffer.WriteBuffer ->
                                                              $w$j_sbo3e GHC.Prim.void#;
                                                        };
                                                  };
                                            };
                                        GHC.IO.Buffer.WriteBuffer ->
                                            case ==# [dt7_sbo3c dt8_sbo3d] of {
                                              __DEFAULT -> GHC.IO.Handle.Internals.flushCharBuffer2;
                                              1# -> $w$j_sbo3e GHC.Prim.void#;
                                            };
                                      };
                              };
                        };
                  };
        } in 
          GHC.IO.Handle.Internals.withAllHandles__1
              lvl9_rbnWR handle_sbo2G sat_sbo6i GHC.Prim.void#;

GHC.IO.Handle.hSetBinaryMode
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.Bool -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.hSetBinaryMode1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.hIsSeekable4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hIsSeekable"#;

GHC.IO.Handle.hIsSeekable3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hIsSeekable4;

GHC.IO.Handle.hIsSeekable2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool) #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h__sbo6j void_0E]
        case h__sbo6j of wild_sbo6l {
          GHC.IO.Handle.Types.Handle__ $dIODevice_sbo6m [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds_sbo6p [Occ=Once]
                                       ds1_sbo6q [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds1_sbo6q of {
                __DEFAULT ->
                    case
                        GHC.IO.Device.isSeekable $dIODevice_sbo6m ds_sbo6p GHC.Prim.void#
                    of
                    { Unit# ipv1_sbo6F [Occ=Once] ->
                          let {
                            sat_sbo6G [Occ=Once]
                              :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                            [LclId] =
                                CCCS (,)! [wild_sbo6l ipv1_sbo6F];
                          } in  Unit# [sat_sbo6G];
                    };
                GHC.IO.Handle.Types.ClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_closedHandle1 GHC.Prim.void#;
                GHC.IO.Handle.Types.SemiClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_semiclosedHandle1 GHC.Prim.void#;
                GHC.IO.Handle.Types.AppendHandle ->
                    let {
                      sat_sbo6J [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                      [LclId] =
                          CCCS (,)! [wild_sbo6l GHC.Types.False];
                    } in  Unit# [sat_sbo6J];
              };
        };

GHC.IO.Handle.hIsSeekable1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbo6K void_0E]
        case handle_sbo6K of wild_sbo6M {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbo6O ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sbo6R [Occ=Once!] ->
                    let {
                      io_sbo6S [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbo6M dt_sbo6O] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hIsSeekable3
                                      wild_sbo6M
                                      GHC.IO.Handle.hIsSeekable2
                                      dt_sbo6O
                                      GHC.Prim.void#
                              of
                              { Unit# ipv3_sbo6W [Occ=Once!] ->
                                    case ipv3_sbo6W of {
                                      (,) h'_sbo6Y [Occ=Once] v_sbo6Z [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbo6O h'_sbo6Y GHC.Prim.void#]
                                          of
                                          s2#_sbo70
                                          { (##) -> Unit# [v_sbo6Z];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbo6R of {
                        __DEFAULT -> io_sbo6S GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sbo6S GHC.Prim.void#];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sbo73
                                           _ [Occ=Dead] ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sbo77 [Occ=Once!] ->
                    let {
                      io_sbo78 [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbo6M dt_sbo73] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hIsSeekable3
                                      wild_sbo6M
                                      GHC.IO.Handle.hIsSeekable2
                                      dt_sbo73
                                      GHC.Prim.void#
                              of
                              { Unit# ipv3_sbo7c [Occ=Once!] ->
                                    case ipv3_sbo7c of {
                                      (,) h'_sbo7e [Occ=Once] v_sbo7f [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbo73 h'_sbo7e GHC.Prim.void#]
                                          of
                                          s2#_sbo7g
                                          { (##) -> Unit# [v_sbo7f];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbo77 of {
                        __DEFAULT -> io_sbo78 GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sbo78 GHC.Prim.void#];
                      };
              };
        };

GHC.IO.Handle.hIsSeekable
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.hIsSeekable1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.hGetPosn4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hGetPosn"#;

GHC.IO.Handle.hGetPosn3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hGetPosn4;

GHC.IO.Handle.hGetPosn2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Integer.Type.Integer #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle__sbo7i void_0E]
        case handle__sbo7i of {
          GHC.IO.Handle.Types.Handle__ $dIODevice_sbo7l [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds_sbo7o [Occ=Once]
                                       _ [Occ=Dead]
                                       dt_sbo7q
                                       _ [Occ=Dead]
                                       dt1_sbo7s [Occ=Once]
                                       dt2_sbo7t
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds4_sbo7w [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case
                  GHC.IO.Device.tell $dIODevice_sbo7l ds_sbo7o GHC.Prim.void#
              of
              { Unit# ipv1_sbo7D [Occ=Once*] ->
                    case readMutVar# [dt2_sbo7t GHC.Prim.void#] of {
                      Unit# ipv3_sbo7G [Occ=Once!] ->
                          case ipv3_sbo7G of {
                            GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 ds11_sbo7K [Occ=Once!]
                                                 _ [Occ=Dead]
                                                 dt7_sbo7M [Occ=Once]
                                                 dt8_sbo7N [Occ=Once] ->
                                let-no-escape {
                                  $w$j_sbo7O [InlPrag=NOUSERINLINE[0],
                                              Occ=Once*!T[1],
                                              Dmd=<L,1*C1(U(U,U))>]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                             GHC.Integer.Type.Integer #)
                                  [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                      sat-only [dt_sbo7q dt2_sbo7t ipv1_sbo7D] \r [void_0E]
                                          case readMutVar# [dt_sbo7q GHC.Prim.void#] of {
                                            Unit# ipv5_sbo7S [Occ=Once!] ->
                                                case readMutVar# [dt2_sbo7t GHC.Prim.void#] of {
                                                  Unit# _ [Occ=Dead] ->
                                                      let {
                                                        sat_sbo88 [Occ=Once]
                                                          :: GHC.Integer.Type.Integer
                                                        [LclId] =
                                                            [ipv1_sbo7D ipv5_sbo7S] \u []
                                                                case ipv5_sbo7S of {
                                                                  GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                       _ [Occ=Dead]
                                                                                       ds14_sbo7Z [Occ=Once!]
                                                                                       _ [Occ=Dead]
                                                                                       dt13_sbo81 [Occ=Once*]
                                                                                       dt14_sbo82 [Occ=Once*] ->
                                                                      case ds14_sbo7Z of {
                                                                        GHC.IO.Buffer.ReadBuffer ->
                                                                            case
                                                                                -# [dt14_sbo82
                                                                                    dt13_sbo81]
                                                                            of
                                                                            sat_sbo84
                                                                            { __DEFAULT ->
                                                                                  case
                                                                                      GHC.Integer.Type.smallInteger
                                                                                          sat_sbo84
                                                                                  of
                                                                                  sat_sbo85
                                                                                  { __DEFAULT ->
                                                                                        GHC.Integer.Type.minusInteger
                                                                                            ipv1_sbo7D
                                                                                            sat_sbo85;
                                                                                  };
                                                                            };
                                                                        GHC.IO.Buffer.WriteBuffer ->
                                                                            case
                                                                                -# [dt14_sbo82
                                                                                    dt13_sbo81]
                                                                            of
                                                                            sat_sbo86
                                                                            { __DEFAULT ->
                                                                                  case
                                                                                      GHC.Integer.Type.smallInteger
                                                                                          sat_sbo86
                                                                                  of
                                                                                  sat_sbo87
                                                                                  { __DEFAULT ->
                                                                                        GHC.Integer.Type.plusInteger
                                                                                            ipv1_sbo7D
                                                                                            sat_sbo87;
                                                                                  };
                                                                            };
                                                                      };
                                                                };
                                                      } in  Unit# [sat_sbo88];
                                                };
                                          };
                                } in 
                                  case ds11_sbo7K of {
                                    GHC.IO.Buffer.ReadBuffer ->
                                        case readMutVar# [dt2_sbo7t GHC.Prim.void#] of {
                                          Unit# ipv5_sbo8c [Occ=Once!] ->
                                              case ipv5_sbo8c of {
                                                GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     ds13_sbo8g [Occ=Once!]
                                                                     _ [Occ=Dead]
                                                                     dt13_sbo8i [Occ=Once]
                                                                     dt14_sbo8j [Occ=Once] ->
                                                    case ds13_sbo8g of {
                                                      GHC.IO.Buffer.ReadBuffer ->
                                                          case ==# [dt13_sbo8i dt14_sbo8j] of {
                                                            __DEFAULT ->
                                                                case
                                                                    readMutVar# [dt1_sbo7s
                                                                                 GHC.Prim.void#]
                                                                of
                                                                { Unit# ipv7_sbo8o [Occ=Once!] ->
                                                                      case ipv7_sbo8o of {
                                                                        (,) codec_state_sbo8q [Occ=Once]
                                                                            bbuf0_sbo8r [Occ=Once*] ->
                                                                            case
                                                                                readMutVar# [dt2_sbo7t
                                                                                             GHC.Prim.void#]
                                                                            of
                                                                            { Unit# ipv9_sbo8u ->
                                                                                  let {
                                                                                    sat_sbo8C [Occ=Once]
                                                                                      :: GHC.IO.Buffer.Buffer
                                                                                           GHC.IO.Buffer.CharBufElem
                                                                                    [LclId] =
                                                                                        [ipv9_sbo8u] \u []
                                                                                            case
                                                                                                ipv9_sbo8u
                                                                                            of
                                                                                            { GHC.IO.Buffer.Buffer dt9_sbo8w [Occ=Once]
                                                                                                                   dt15_sbo8x [Occ=Once]
                                                                                                                   ds16_sbo8y [Occ=Once]
                                                                                                                   dt16_sbo8z [Occ=Once]
                                                                                                                   _ [Occ=Dead]
                                                                                                                   _ [Occ=Dead] ->
                                                                                                  GHC.IO.Buffer.Buffer [dt9_sbo8w
                                                                                                                        dt15_sbo8x
                                                                                                                        ds16_sbo8y
                                                                                                                        dt16_sbo8z
                                                                                                                        0#
                                                                                                                        0#];
                                                                                            };
                                                                                  } in 
                                                                                    case
                                                                                        writeMutVar# [dt2_sbo7t
                                                                                                      sat_sbo8C
                                                                                                      GHC.Prim.void#]
                                                                                    of
                                                                                    s2#_sbo8D
                                                                                    { (##) ->
                                                                                          case
                                                                                              ipv9_sbo8u
                                                                                          of
                                                                                          { GHC.IO.Buffer.Buffer dt9_sbo8F [Occ=Once]
                                                                                                                 dt15_sbo8G [Occ=Once]
                                                                                                                 ds16_sbo8H [Occ=Once]
                                                                                                                 _ [Occ=Dead]
                                                                                                                 dt17_sbo8J [Occ=Once!]
                                                                                                                 _ [Occ=Dead] ->
                                                                                                case
                                                                                                    dt17_sbo8J
                                                                                                of
                                                                                                wild7_sbo8L
                                                                                                { __DEFAULT ->
                                                                                                      case
                                                                                                          ds4_sbo7w
                                                                                                      of
                                                                                                      { GHC.Base.Nothing ->
                                                                                                            let {
                                                                                                              sat_sbo8V [Occ=Once]
                                                                                                                :: GHC.IO.Buffer.Buffer
                                                                                                                     GHC.Word.Word8
                                                                                                              [LclId] =
                                                                                                                  [bbuf0_sbo8r
                                                                                                                   wild7_sbo8L] \u []
                                                                                                                      case
                                                                                                                          bbuf0_sbo8r
                                                                                                                      of
                                                                                                                      { GHC.IO.Buffer.Buffer dt19_sbo8O [Occ=Once]
                                                                                                                                             dt20_sbo8P [Occ=Once]
                                                                                                                                             ds17_sbo8Q [Occ=Once]
                                                                                                                                             dt21_sbo8R [Occ=Once]
                                                                                                                                             dt22_sbo8S [Occ=Once]
                                                                                                                                             dt23_sbo8T [Occ=Once] ->
                                                                                                                            case
                                                                                                                                +# [dt22_sbo8S
                                                                                                                                    wild7_sbo8L]
                                                                                                                            of
                                                                                                                            sat_sbo8U
                                                                                                                            { __DEFAULT ->
                                                                                                                                  GHC.IO.Buffer.Buffer [dt19_sbo8O
                                                                                                                                                        dt20_sbo8P
                                                                                                                                                        ds17_sbo8Q
                                                                                                                                                        dt21_sbo8R
                                                                                                                                                        sat_sbo8U
                                                                                                                                                        dt23_sbo8T];
                                                                                                                            };
                                                                                                                      };
                                                                                                            } in 
                                                                                                              case
                                                                                                                  writeMutVar# [dt_sbo7q
                                                                                                                                sat_sbo8V
                                                                                                                                GHC.Prim.void#]
                                                                                                              of
                                                                                                              s2#1_sbo8W
                                                                                                              { (##) ->
                                                                                                                    $w$j_sbo7O
                                                                                                                        GHC.Prim.void#;
                                                                                                              };
                                                                                                        GHC.Base.Just decoder_sbo8X [Occ=Once!] ->
                                                                                                            case
                                                                                                                decoder_sbo8X
                                                                                                            of
                                                                                                            { GHC.IO.Encoding.Types.BufferCodec ds17_sbo8Z [Occ=Once]
                                                                                                                                                ds18_sbo90 [Occ=Once]
                                                                                                                                                _ [Occ=Dead]
                                                                                                                                                _ [Occ=Dead]
                                                                                                                                                ds21_sbo93 [Occ=Once!] ->
                                                                                                                  case
                                                                                                                      ds21_sbo93
                                                                                                                          codec_state_sbo8q
                                                                                                                          GHC.Prim.void#
                                                                                                                  of
                                                                                                                  { Unit# _ [Occ=Dead] ->
                                                                                                                        let {
                                                                                                                          sat_sbo97 [Occ=Once]
                                                                                                                            :: GHC.IO.Buffer.Buffer
                                                                                                                                 GHC.IO.Buffer.CharBufElem
                                                                                                                          [LclId] =
                                                                                                                              CCCS GHC.IO.Buffer.Buffer! [dt9_sbo8F
                                                                                                                                                          dt15_sbo8G
                                                                                                                                                          ds16_sbo8H
                                                                                                                                                          wild7_sbo8L
                                                                                                                                                          0#
                                                                                                                                                          0#];
                                                                                                                        } in 
                                                                                                                          case
                                                                                                                              GHC.IO.Handle.Internals.$wstreamEncode
                                                                                                                                  ds17_sbo8Z
                                                                                                                                  ds18_sbo90
                                                                                                                                  bbuf0_sbo8r
                                                                                                                                  sat_sbo97
                                                                                                                                  GHC.Prim.void#
                                                                                                                          of
                                                                                                                          { Unit# ipv13_sbo9a [Occ=Once!] ->
                                                                                                                                case
                                                                                                                                    ipv13_sbo9a
                                                                                                                                of
                                                                                                                                { (,) bbuf1_sbo9c [Occ=Once]
                                                                                                                                      _ [Occ=Dead] ->
                                                                                                                                      case
                                                                                                                                          writeMutVar# [dt_sbo7q
                                                                                                                                                        bbuf1_sbo9c
                                                                                                                                                        GHC.Prim.void#]
                                                                                                                                      of
                                                                                                                                      s2#1_sbo9e
                                                                                                                                      { (##) ->
                                                                                                                                            $w$j_sbo7O
                                                                                                                                                GHC.Prim.void#;
                                                                                                                                      };
                                                                                                                                };
                                                                                                                          };
                                                                                                                  };
                                                                                                            };
                                                                                                      };
                                                                                                  0# ->
                                                                                                      case
                                                                                                          writeMutVar# [dt_sbo7q
                                                                                                                        bbuf0_sbo8r
                                                                                                                        GHC.Prim.void#]
                                                                                                      of
                                                                                                      s2#1_sbo9f
                                                                                                      { (##) ->
                                                                                                            $w$j_sbo7O
                                                                                                                GHC.Prim.void#;
                                                                                                      };
                                                                                                };
                                                                                          };
                                                                                    };
                                                                            };
                                                                      };
                                                                };
                                                            1# -> $w$j_sbo7O GHC.Prim.void#;
                                                          };
                                                      GHC.IO.Buffer.WriteBuffer ->
                                                          $w$j_sbo7O GHC.Prim.void#;
                                                    };
                                              };
                                        };
                                    GHC.IO.Buffer.WriteBuffer ->
                                        case ==# [dt7_sbo7M dt8_sbo7N] of {
                                          __DEFAULT -> GHC.IO.Handle.Internals.flushCharBuffer2;
                                          1# -> $w$j_sbo7O GHC.Prim.void#;
                                        };
                                  };
                          };
                    };
              };
        };

GHC.IO.Handle.hTell1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Integer.Type.Integer #)
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [handle_sbo9i void_0E]
        GHC.IO.Handle.Internals.wantSeekableHandle1
            GHC.IO.Handle.hGetPosn3
            handle_sbo9i
            GHC.IO.Handle.hGetPosn2
            GHC.Prim.void#;

GHC.IO.Handle.hTell
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Types.IO GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] GHC.IO.Handle.hTell1 eta_B2 GHC.Prim.void#;

lvl12_rbnWU :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hSeek"#;

lvl13_rbnWV :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl12_rbnWU;

lvl14_rbnWW :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

GHC.IO.Handle.hSeek1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Device.SeekMode
     -> GHC.Integer.Type.Integer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=4, Str=<S,1*U><L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbo9j mode_sbo9k offset_sbo9l void_0E]
        let {
          lvl48_sbo9n [Occ=OnceL!, Dmd=<L,U(U)>] :: GHC.Types.Int
          [LclId] =
              [offset_sbo9l] \u []
                  case GHC.Integer.Type.integerToInt offset_sbo9l of wild_sbo9o {
                    __DEFAULT -> GHC.Types.I# [wild_sbo9o];
                  }; } in
        let {
          lvl49_sbo9p [Occ=OnceL!, Dmd=<L,U(U)>] :: GHC.Types.Int
          [LclId] =
              [offset_sbo9l] \u []
                  case
                      GHC.Integer.Type.geInteger# offset_sbo9l lvl14_rbnWW
                  of
                  v_sbo9q
                  { __DEFAULT -> GHC.Types.I# [v_sbo9q];
                  }; } in
        let {
          sat_sbobV [Occ=Once]
            :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
          [LclId] =
              [mode_sbo9k offset_sbo9l lvl48_sbo9n lvl49_sbo9p] \r [handle__sbo9r
                                                                    void_0E]
                  case handle__sbo9r of wild_sbo9t {
                    GHC.IO.Handle.Types.Handle__ $dIODevice_sbo9u [Occ=Once*]
                                                 $dBufferedIO_sbo9v [Occ=Once]
                                                 _ [Occ=Dead]
                                                 ds_sbo9x
                                                 _ [Occ=Dead]
                                                 dt_sbo9z
                                                 _ [Occ=Dead]
                                                 dt1_sbo9B [Occ=Once]
                                                 dt2_sbo9C
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 ds4_sbo9F
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead] ->
                        case readMutVar# [dt2_sbo9C GHC.Prim.void#] of {
                          Unit# ipv1_sbo9M [Occ=Once!] ->
                              case ipv1_sbo9M of {
                                GHC.IO.Buffer.Buffer dt4_sbo9O [Occ=Once]
                                                     dt5_sbo9P [Occ=Once]
                                                     ds10_sbo9Q [Occ=Once!]
                                                     dt6_sbo9R [Occ=Once]
                                                     dt7_sbo9S
                                                     dt8_sbo9T ->
                                    case ds10_sbo9Q of {
                                      GHC.IO.Buffer.ReadBuffer ->
                                          let-no-escape {
                                            $j_sbo9V [Occ=Once*T[0], Dmd=<L,1*U(U,U)>]
                                              :: (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                            [LclId[JoinId(0)], Unf=OtherCon []] =
                                                [mode_sbo9k
                                                 offset_sbo9l
                                                 wild_sbo9t
                                                 $dIODevice_sbo9u
                                                 ds_sbo9x
                                                 dt_sbo9z
                                                 dt1_sbo9B
                                                 dt2_sbo9C
                                                 ds4_sbo9F] \r []
                                                    case readMutVar# [dt2_sbo9C GHC.Prim.void#] of {
                                                      Unit# ipv3_sbo9Y [Occ=Once!] ->
                                                          case ipv3_sbo9Y of {
                                                            GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                 _ [Occ=Dead]
                                                                                 ds12_sboa2 [Occ=Once!]
                                                                                 _ [Occ=Dead]
                                                                                 dt12_sboa4 [Occ=Once]
                                                                                 dt13_sboa5 [Occ=Once] ->
                                                                case ds12_sboa2 of {
                                                                  GHC.IO.Buffer.ReadBuffer ->
                                                                      case
                                                                          ==# [dt12_sboa4
                                                                               dt13_sboa5]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            case
                                                                                readMutVar# [dt1_sbo9B
                                                                                             GHC.Prim.void#]
                                                                            of
                                                                            { Unit# ipv5_sboaa [Occ=Once!] ->
                                                                                  case
                                                                                      ipv5_sboaa
                                                                                  of
                                                                                  { (,) codec_state_sboac [Occ=Once]
                                                                                        bbuf0_sboad [Occ=Once*] ->
                                                                                        case
                                                                                            readMutVar# [dt2_sbo9C
                                                                                                         GHC.Prim.void#]
                                                                                        of
                                                                                        { Unit# ipv7_sboag ->
                                                                                              let {
                                                                                                sat_sboao [Occ=Once]
                                                                                                  :: GHC.IO.Buffer.Buffer
                                                                                                       GHC.IO.Buffer.CharBufElem
                                                                                                [LclId] =
                                                                                                    [ipv7_sboag] \u []
                                                                                                        case
                                                                                                            ipv7_sboag
                                                                                                        of
                                                                                                        { GHC.IO.Buffer.Buffer dt14_sboai [Occ=Once]
                                                                                                                               dt15_sboaj [Occ=Once]
                                                                                                                               ds15_sboak [Occ=Once]
                                                                                                                               dt16_sboal [Occ=Once]
                                                                                                                               _ [Occ=Dead]
                                                                                                                               _ [Occ=Dead] ->
                                                                                                              GHC.IO.Buffer.Buffer [dt14_sboai
                                                                                                                                    dt15_sboaj
                                                                                                                                    ds15_sboak
                                                                                                                                    dt16_sboal
                                                                                                                                    0#
                                                                                                                                    0#];
                                                                                                        };
                                                                                              } in 
                                                                                                case
                                                                                                    writeMutVar# [dt2_sbo9C
                                                                                                                  sat_sboao
                                                                                                                  GHC.Prim.void#]
                                                                                                of
                                                                                                s2#_sboap
                                                                                                { (##) ->
                                                                                                      case
                                                                                                          ipv7_sboag
                                                                                                      of
                                                                                                      { GHC.IO.Buffer.Buffer dt14_sboar [Occ=Once]
                                                                                                                             dt15_sboas [Occ=Once]
                                                                                                                             ds15_sboat [Occ=Once]
                                                                                                                             _ [Occ=Dead]
                                                                                                                             dt17_sboav [Occ=Once!]
                                                                                                                             _ [Occ=Dead] ->
                                                                                                            case
                                                                                                                dt17_sboav
                                                                                                            of
                                                                                                            wild7_sboax
                                                                                                            { __DEFAULT ->
                                                                                                                  case
                                                                                                                      ds4_sbo9F
                                                                                                                  of
                                                                                                                  { GHC.Base.Nothing ->
                                                                                                                        let {
                                                                                                                          sat_sboaH [Occ=Once]
                                                                                                                            :: GHC.IO.Buffer.Buffer
                                                                                                                                 GHC.Word.Word8
                                                                                                                          [LclId] =
                                                                                                                              [bbuf0_sboad
                                                                                                                               wild7_sboax] \u []
                                                                                                                                  case
                                                                                                                                      bbuf0_sboad
                                                                                                                                  of
                                                                                                                                  { GHC.IO.Buffer.Buffer dt19_sboaA [Occ=Once]
                                                                                                                                                         dt20_sboaB [Occ=Once]
                                                                                                                                                         ds16_sboaC [Occ=Once]
                                                                                                                                                         dt21_sboaD [Occ=Once]
                                                                                                                                                         dt22_sboaE [Occ=Once]
                                                                                                                                                         dt23_sboaF [Occ=Once] ->
                                                                                                                                        case
                                                                                                                                            +# [dt22_sboaE
                                                                                                                                                wild7_sboax]
                                                                                                                                        of
                                                                                                                                        sat_sboaG
                                                                                                                                        { __DEFAULT ->
                                                                                                                                              GHC.IO.Buffer.Buffer [dt19_sboaA
                                                                                                                                                                    dt20_sboaB
                                                                                                                                                                    ds16_sboaC
                                                                                                                                                                    dt21_sboaD
                                                                                                                                                                    sat_sboaG
                                                                                                                                                                    dt23_sboaF];
                                                                                                                                        };
                                                                                                                                  };
                                                                                                                        } in 
                                                                                                                          case
                                                                                                                              writeMutVar# [dt_sbo9z
                                                                                                                                            sat_sboaH
                                                                                                                                            GHC.Prim.void#]
                                                                                                                          of
                                                                                                                          s2#1_sboaI
                                                                                                                          { (##) ->
                                                                                                                                case
                                                                                                                                    GHC.IO.Handle.Internals.flushBuffer2
                                                                                                                                        wild_sbo9t
                                                                                                                                        GHC.Prim.void#
                                                                                                                                of
                                                                                                                                { Unit# _ [Occ=Dead] ->
                                                                                                                                      GHC.IO.Device.seek
                                                                                                                                          $dIODevice_sbo9u
                                                                                                                                          ds_sbo9x
                                                                                                                                          mode_sbo9k
                                                                                                                                          offset_sbo9l
                                                                                                                                          GHC.Prim.void#;
                                                                                                                                };
                                                                                                                          };
                                                                                                                    GHC.Base.Just decoder_sboaM [Occ=Once!] ->
                                                                                                                        case
                                                                                                                            decoder_sboaM
                                                                                                                        of
                                                                                                                        { GHC.IO.Encoding.Types.BufferCodec ds16_sboaO [Occ=Once]
                                                                                                                                                            ds17_sboaP [Occ=Once]
                                                                                                                                                            _ [Occ=Dead]
                                                                                                                                                            _ [Occ=Dead]
                                                                                                                                                            ds20_sboaS [Occ=Once!] ->
                                                                                                                              case
                                                                                                                                  ds20_sboaS
                                                                                                                                      codec_state_sboac
                                                                                                                                      GHC.Prim.void#
                                                                                                                              of
                                                                                                                              { Unit# _ [Occ=Dead] ->
                                                                                                                                    let {
                                                                                                                                      sat_sboaW [Occ=Once]
                                                                                                                                        :: GHC.IO.Buffer.Buffer
                                                                                                                                             GHC.IO.Buffer.CharBufElem
                                                                                                                                      [LclId] =
                                                                                                                                          CCCS GHC.IO.Buffer.Buffer! [dt14_sboar
                                                                                                                                                                      dt15_sboas
                                                                                                                                                                      ds15_sboat
                                                                                                                                                                      wild7_sboax
                                                                                                                                                                      0#
                                                                                                                                                                      0#];
                                                                                                                                    } in 
                                                                                                                                      case
                                                                                                                                          GHC.IO.Handle.Internals.$wstreamEncode
                                                                                                                                              ds16_sboaO
                                                                                                                                              ds17_sboaP
                                                                                                                                              bbuf0_sboad
                                                                                                                                              sat_sboaW
                                                                                                                                              GHC.Prim.void#
                                                                                                                                      of
                                                                                                                                      { Unit# ipv11_sboaZ [Occ=Once!] ->
                                                                                                                                            case
                                                                                                                                                ipv11_sboaZ
                                                                                                                                            of
                                                                                                                                            { (,) bbuf1_sbob1 [Occ=Once]
                                                                                                                                                  _ [Occ=Dead] ->
                                                                                                                                                  case
                                                                                                                                                      writeMutVar# [dt_sbo9z
                                                                                                                                                                    bbuf1_sbob1
                                                                                                                                                                    GHC.Prim.void#]
                                                                                                                                                  of
                                                                                                                                                  s2#1_sbob3
                                                                                                                                                  { (##) ->
                                                                                                                                                        case
                                                                                                                                                            GHC.IO.Handle.Internals.flushBuffer2
                                                                                                                                                                wild_sbo9t
                                                                                                                                                                GHC.Prim.void#
                                                                                                                                                        of
                                                                                                                                                        { Unit# _ [Occ=Dead] ->
                                                                                                                                                              GHC.IO.Device.seek
                                                                                                                                                                  $dIODevice_sbo9u
                                                                                                                                                                  ds_sbo9x
                                                                                                                                                                  mode_sbo9k
                                                                                                                                                                  offset_sbo9l
                                                                                                                                                                  GHC.Prim.void#;
                                                                                                                                                        };
                                                                                                                                                  };
                                                                                                                                            };
                                                                                                                                      };
                                                                                                                              };
                                                                                                                        };
                                                                                                                  };
                                                                                                              0# ->
                                                                                                                  case
                                                                                                                      writeMutVar# [dt_sbo9z
                                                                                                                                    bbuf0_sboad
                                                                                                                                    GHC.Prim.void#]
                                                                                                                  of
                                                                                                                  s2#1_sbob7
                                                                                                                  { (##) ->
                                                                                                                        case
                                                                                                                            GHC.IO.Handle.Internals.flushBuffer2
                                                                                                                                wild_sbo9t
                                                                                                                                GHC.Prim.void#
                                                                                                                        of
                                                                                                                        { Unit# _ [Occ=Dead] ->
                                                                                                                              GHC.IO.Device.seek
                                                                                                                                  $dIODevice_sbo9u
                                                                                                                                  ds_sbo9x
                                                                                                                                  mode_sbo9k
                                                                                                                                  offset_sbo9l
                                                                                                                                  GHC.Prim.void#;
                                                                                                                        };
                                                                                                                  };
                                                                                                            };
                                                                                                      };
                                                                                                };
                                                                                        };
                                                                                  };
                                                                            };
                                                                        1# ->
                                                                            case
                                                                                GHC.IO.Handle.Internals.flushBuffer2
                                                                                    wild_sbo9t
                                                                                    GHC.Prim.void#
                                                                            of
                                                                            { Unit# _ [Occ=Dead] ->
                                                                                  GHC.IO.Device.seek
                                                                                      $dIODevice_sbo9u
                                                                                      ds_sbo9x
                                                                                      mode_sbo9k
                                                                                      offset_sbo9l
                                                                                      GHC.Prim.void#;
                                                                            };
                                                                      };
                                                                  GHC.IO.Buffer.WriteBuffer ->
                                                                      case
                                                                          GHC.IO.Handle.Internals.flushBuffer2
                                                                              wild_sbo9t
                                                                              GHC.Prim.void#
                                                                      of
                                                                      { Unit# _ [Occ=Dead] ->
                                                                            GHC.IO.Device.seek
                                                                                $dIODevice_sbo9u
                                                                                ds_sbo9x
                                                                                mode_sbo9k
                                                                                offset_sbo9l
                                                                                GHC.Prim.void#;
                                                                      };
                                                                };
                                                          };
                                                    };
                                          } in 
                                            case mode_sbo9k of {
                                              __DEFAULT -> $j_sbo9V;
                                              GHC.IO.Device.RelativeSeek ->
                                                  case ds4_sbo9F of {
                                                    GHC.Base.Nothing ->
                                                        case lvl49_sbo9p of {
                                                          GHC.Types.I# v1_sbobk [Occ=Once!] ->
                                                              case v1_sbobk of {
                                                                __DEFAULT -> $j_sbo9V;
                                                                1# ->
                                                                    case
                                                                        -# [dt8_sbo9T dt7_sbo9S]
                                                                    of
                                                                    sat_sbobm
                                                                    { __DEFAULT ->
                                                                          case
                                                                              GHC.Integer.Type.smallInteger
                                                                                  sat_sbobm
                                                                          of
                                                                          sat_sbobn
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    GHC.Integer.Type.ltInteger#
                                                                                        offset_sbo9l
                                                                                        sat_sbobn
                                                                                of
                                                                                { __DEFAULT ->
                                                                                      $j_sbo9V;
                                                                                  1# ->
                                                                                      let {
                                                                                        sat_sbobs [Occ=Once]
                                                                                          :: GHC.IO.Buffer.Buffer
                                                                                               GHC.IO.Buffer.CharBufElem
                                                                                        [LclId] =
                                                                                            [lvl48_sbo9n
                                                                                             dt4_sbo9O
                                                                                             dt5_sbo9P
                                                                                             dt6_sbo9R
                                                                                             dt7_sbo9S
                                                                                             dt8_sbo9T] \u []
                                                                                                case
                                                                                                    lvl48_sbo9n
                                                                                                of
                                                                                                { GHC.Types.I# y_sbobq [Occ=Once] ->
                                                                                                      case
                                                                                                          +# [dt7_sbo9S
                                                                                                              y_sbobq]
                                                                                                      of
                                                                                                      sat_sbobr
                                                                                                      { __DEFAULT ->
                                                                                                            GHC.IO.Buffer.Buffer [dt4_sbo9O
                                                                                                                                  dt5_sbo9P
                                                                                                                                  GHC.IO.Buffer.ReadBuffer
                                                                                                                                  dt6_sbo9R
                                                                                                                                  sat_sbobr
                                                                                                                                  dt8_sbo9T];
                                                                                                      };
                                                                                                };
                                                                                      } in 
                                                                                        case
                                                                                            writeMutVar# [dt2_sbo9C
                                                                                                          sat_sbobs
                                                                                                          GHC.Prim.void#]
                                                                                        of
                                                                                        s2#_sbobt
                                                                                        { (##) ->
                                                                                              Unit# [GHC.Tuple.()];
                                                                                        };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                    GHC.Base.Just _ [Occ=Dead] -> $j_sbo9V;
                                                  };
                                            };
                                      GHC.IO.Buffer.WriteBuffer ->
                                          case readMutVar# [dt_sbo9z GHC.Prim.void#] of {
                                            Unit# ipv3_sbobx [Occ=Once!] ->
                                                case ipv3_sbobx of {
                                                  GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       ds12_sbobB [Occ=Once!]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                                      case ds12_sbobB of {
                                                        GHC.IO.Buffer.ReadBuffer ->
                                                            GHC.IO.Device.seek
                                                                $dIODevice_sbo9u
                                                                ds_sbo9x
                                                                mode_sbo9k
                                                                offset_sbo9l
                                                                GHC.Prim.void#;
                                                        GHC.IO.Buffer.WriteBuffer ->
                                                            case
                                                                readMutVar# [dt_sbo9z
                                                                             GHC.Prim.void#]
                                                            of
                                                            { Unit# ipv5_sbobI [Occ=Once!] ->
                                                                  case ipv5_sbobI of wild5_sbobJ {
                                                                    GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         dt17_sbobO [Occ=Once]
                                                                                         dt18_sbobP [Occ=Once] ->
                                                                        case
                                                                            ==# [dt17_sbobO
                                                                                 dt18_sbobP]
                                                                        of
                                                                        { __DEFAULT ->
                                                                              case
                                                                                  GHC.IO.BufferedIO.flushWriteBuffer
                                                                                      $dBufferedIO_sbo9v
                                                                                      ds_sbo9x
                                                                                      wild5_sbobJ
                                                                                      GHC.Prim.void#
                                                                              of
                                                                              { Unit# ipv7_sbobT [Occ=Once] ->
                                                                                    case
                                                                                        writeMutVar# [dt_sbo9z
                                                                                                      ipv7_sbobT
                                                                                                      GHC.Prim.void#]
                                                                                    of
                                                                                    s2#_sbobU
                                                                                    { (##) ->
                                                                                          GHC.IO.Device.seek
                                                                                              $dIODevice_sbo9u
                                                                                              ds_sbo9x
                                                                                              mode_sbo9k
                                                                                              offset_sbo9l
                                                                                              GHC.Prim.void#;
                                                                                    };
                                                                              };
                                                                          1# ->
                                                                              GHC.IO.Device.seek
                                                                                  $dIODevice_sbo9u
                                                                                  ds_sbo9x
                                                                                  mode_sbo9k
                                                                                  offset_sbo9l
                                                                                  GHC.Prim.void#;
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
                  };
        } in 
          GHC.IO.Handle.Internals.wantSeekableHandle1
              lvl13_rbnWV handle_sbo9j sat_sbobV GHC.Prim.void#;

GHC.IO.Handle.hSeek
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Device.SeekMode
     -> GHC.Integer.Type.Integer
     -> GHC.Types.IO ()
[GblId, Arity=4, Str=<S,1*U><L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.hSeek1 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.hSetPosn1
  :: GHC.IO.Handle.HandlePosn
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S(SL),1*U(1*U,U)><S,U>, Unf=OtherCon []] =
    [] \r [ds_sbobW void_0E]
        case ds_sbobW of {
          GHC.IO.Handle.HandlePosn h_sbobZ [Occ=Once] i_sboc0 [Occ=Once] ->
              GHC.IO.Handle.hSeek1
                  h_sbobZ GHC.IO.Device.AbsoluteSeek i_sboc0 GHC.Prim.void#;
        };

GHC.IO.Handle.hSetPosn
  :: GHC.IO.Handle.HandlePosn -> GHC.Types.IO ()
[GblId, Arity=2, Str=<S(SL),1*U(1*U,U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.hSetPosn1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.hGetEncoding4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hGetEncoding"#;

GHC.IO.Handle.hGetEncoding3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hGetEncoding4;

GHC.IO.Handle.hGetEncoding2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__,
            GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding) #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [h__sboc1 void_0E]
        case h__sboc1 of wild_sboc3 {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds5_sbocg [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              let {
                sat_sbock [Occ=Once]
                  :: (GHC.IO.Handle.Types.Handle__,
                      GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding)
                [LclId] =
                    CCCS (,)! [wild_sboc3 ds5_sbocg];
              } in  Unit# [sat_sbock];
        };

GHC.IO.Handle.hGetEncoding1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [hdl_sbocl void_0E]
        case hdl_sbocl of wild_sbocn {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbocp ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sbocs [Occ=Once!] ->
                    let {
                      io_sboct [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbocn dt_sbocp] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hGetEncoding3
                                      wild_sbocn
                                      GHC.IO.Handle.hGetEncoding2
                                      dt_sbocp
                                      GHC.Prim.void#
                              of
                              { Unit# ipv3_sbocx [Occ=Once!] ->
                                    case ipv3_sbocx of {
                                      (,) h'_sbocz [Occ=Once] v_sbocA [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbocp h'_sbocz GHC.Prim.void#]
                                          of
                                          s2#_sbocB
                                          { (##) -> Unit# [v_sbocA];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbocs of {
                        __DEFAULT -> io_sboct GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sboct GHC.Prim.void#];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sbocE
                                           _ [Occ=Dead] ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sbocI [Occ=Once!] ->
                    let {
                      io_sbocJ [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbocn dt_sbocE] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hGetEncoding3
                                      wild_sbocn
                                      GHC.IO.Handle.hGetEncoding2
                                      dt_sbocE
                                      GHC.Prim.void#
                              of
                              { Unit# ipv3_sbocN [Occ=Once!] ->
                                    case ipv3_sbocN of {
                                      (,) h'_sbocP [Occ=Once] v_sbocQ [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbocE h'_sbocP GHC.Prim.void#]
                                          of
                                          s2#_sbocR
                                          { (##) -> Unit# [v_sbocQ];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbocI of {
                        __DEFAULT -> io_sbocJ GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sbocJ GHC.Prim.void#];
                      };
              };
        };

GHC.IO.Handle.hGetEncoding
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Types.IO (GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.hGetEncoding1 eta_B2 GHC.Prim.void#;

lvl15_rbnWX :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hSetEncoding"#;

lvl16_rbnWY :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl15_rbnWX;

lvl17_rbnWZ :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "last_decode"#;

lvl18_rbnX0 :: forall ds. (ds, GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl17_rbnWZ of sat_sbocT {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sbocT;
        };

GHC.IO.Handle.hSetEncoding1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Encoding.Types.TextEncoding
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [hdl_sbocU encoding_sbocV void_0E]
        let {
          lvl48_sbocX [Occ=OnceL*]
            :: GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
          [LclId, Unf=OtherCon []] =
              CCCS GHC.Base.Just! [encoding_sbocV]; } in
        let {
          sat_sbog6 [Occ=Once]
            :: GHC.IO.Handle.Types.Handle__
               -> GHC.Types.IO GHC.IO.Handle.Types.Handle__
          [LclId] =
              [encoding_sbocV lvl48_sbocX] \r [h__sbocY void_0E]
                  case h__sbocY of {
                    GHC.IO.Handle.Types.Handle__ $dIODevice_sbod1 [Occ=Once*]
                                                 $dBufferedIO_sbod2 [Occ=Once*]
                                                 $dTypeable_sbod3 [Occ=Once*]
                                                 ds_sbod4 [Occ=Once*]
                                                 ds1_sbod5
                                                 dt_sbod6
                                                 ds2_sbod7 [Occ=Once*]
                                                 dt1_sbod8 [Occ=Once]
                                                 dt2_sbod9
                                                 dt3_sboda [Occ=Once*]
                                                 ds3_sbodb [Occ=Once*!]
                                                 ds4_sbodc
                                                 _ [Occ=Dead]
                                                 ds6_sbode [Occ=Once*]
                                                 ds7_sbodf [Occ=Once*]
                                                 ds8_sbodg [Occ=Once*] ->
                        case readMutVar# [dt2_sbod9 GHC.Prim.void#] of {
                          Unit# ipv1_sbodj [Occ=Once!] ->
                              case ipv1_sbodj of {
                                GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                     _ [Occ=Dead]
                                                     ds10_sbodn [Occ=Once!]
                                                     _ [Occ=Dead]
                                                     dt7_sbodp [Occ=Once]
                                                     dt8_sbodq [Occ=Once] ->
                                    let-no-escape {
                                      $w$j_sbodr [InlPrag=NOUSERINLINE[0],
                                                  Occ=Once*!T[1],
                                                  Dmd=<L,1*C1(U)>]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                 GHC.IO.Handle.Types.Handle__ #)
                                      [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                          sat-only [encoding_sbocV
                                                    lvl48_sbocX
                                                    $dIODevice_sbod1
                                                    $dBufferedIO_sbod2
                                                    $dTypeable_sbod3
                                                    ds_sbod4
                                                    ds1_sbod5
                                                    dt_sbod6
                                                    ds2_sbod7
                                                    dt2_sbod9
                                                    dt3_sboda
                                                    ds3_sbodb
                                                    ds4_sbodc
                                                    ds6_sbode
                                                    ds7_sbodf
                                                    ds8_sbodg] \r [void_0E]
                                              let-no-escape {
                                                $w$j1_sbodt [InlPrag=NOUSERINLINE[0],
                                                             Occ=Once*!T[1],
                                                             Dmd=<L,1*C1(U)>]
                                                  :: GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.IO.Handle.Types.Handle__ #)
                                                [LclId[JoinId(1)],
                                                 Arity=1,
                                                 Str=<S,U>,
                                                 Unf=OtherCon []] =
                                                    sat-only [encoding_sbocV
                                                              lvl48_sbocX
                                                              $dIODevice_sbod1
                                                              $dBufferedIO_sbod2
                                                              $dTypeable_sbod3
                                                              ds_sbod4
                                                              ds1_sbod5
                                                              dt_sbod6
                                                              ds2_sbod7
                                                              dt2_sbod9
                                                              dt3_sboda
                                                              ds6_sbode
                                                              ds7_sbodf
                                                              ds8_sbodg] \r [void_0E]
                                                        case encoding_sbocV of {
                                                          GHC.IO.Encoding.Types.TextEncoding _ [Occ=Dead]
                                                                                             ds13_sbodx [Occ=Once*]
                                                                                             ds14_sbody [Occ=Once*] ->
                                                              let-no-escape {
                                                                $j_sbodz [Occ=Once*!T[2],
                                                                          Dmd=<L,1*C1(C1(U))>]
                                                                  :: GHC.Prim.State#
                                                                       GHC.Prim.RealWorld
                                                                     -> GHC.Base.Maybe
                                                                          (GHC.IO.Encoding.Types.TextDecoder
                                                                             dstate_ibkNi)
                                                                     -> (# GHC.Prim.State#
                                                                             GHC.Prim.RealWorld,
                                                                           GHC.IO.Handle.Types.Handle__ #)
                                                                [LclId[JoinId(2)],
                                                                 Arity=2,
                                                                 Str=<S,U><L,U>,
                                                                 Unf=OtherCon []] =
                                                                    sat-only [lvl48_sbocX
                                                                              $dIODevice_sbod1
                                                                              $dBufferedIO_sbod2
                                                                              $dTypeable_sbod3
                                                                              ds_sbod4
                                                                              ds1_sbod5
                                                                              dt_sbod6
                                                                              ds2_sbod7
                                                                              dt2_sbod9
                                                                              dt3_sboda
                                                                              ds6_sbode
                                                                              ds7_sbodf
                                                                              ds8_sbodg
                                                                              ds14_sbody] \r [void_0E
                                                                                              ipv3_sbodB]
                                                                        case
                                                                            ds1_sbod5
                                                                        of
                                                                        wild3_sbodC
                                                                        { __DEFAULT ->
                                                                              case
                                                                                  readMutVar# [dt_sbod6
                                                                                               GHC.Prim.void#]
                                                                              of
                                                                              { Unit# _ [Occ=Dead] ->
                                                                                    case
                                                                                        newMutVar# [lvl18_rbnX0
                                                                                                    GHC.Prim.void#]
                                                                                    of
                                                                                    { Unit# ipv7_sbodI [Occ=Once] ->
                                                                                          let {
                                                                                            sat_sbodJ [Occ=Once]
                                                                                              :: GHC.IO.Handle.Types.Handle__
                                                                                            [LclId] =
                                                                                                CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbod1
                                                                                                                                    $dBufferedIO_sbod2
                                                                                                                                    $dTypeable_sbod3
                                                                                                                                    ds_sbod4
                                                                                                                                    wild3_sbodC
                                                                                                                                    dt_sbod6
                                                                                                                                    ds2_sbod7
                                                                                                                                    ipv7_sbodI
                                                                                                                                    dt2_sbod9
                                                                                                                                    dt3_sboda
                                                                                                                                    GHC.Base.Nothing
                                                                                                                                    ipv3_sbodB
                                                                                                                                    lvl48_sbocX
                                                                                                                                    ds6_sbode
                                                                                                                                    ds7_sbodf
                                                                                                                                    ds8_sbodg];
                                                                                          } in 
                                                                                            Unit# [sat_sbodJ];
                                                                                    };
                                                                              };
                                                                          GHC.IO.Handle.Types.WriteHandle ->
                                                                              case
                                                                                  ds14_sbody
                                                                                      GHC.Prim.void#
                                                                              of
                                                                              { Unit# ipv5_sbodM [Occ=Once] ->
                                                                                    case
                                                                                        readMutVar# [dt_sbod6
                                                                                                     GHC.Prim.void#]
                                                                                    of
                                                                                    { Unit# _ [Occ=Dead] ->
                                                                                          case
                                                                                              newMutVar# [lvl18_rbnX0
                                                                                                          GHC.Prim.void#]
                                                                                          of
                                                                                          { Unit# ipv9_sbodS [Occ=Once] ->
                                                                                                let {
                                                                                                  sat_sbodT [Occ=Once]
                                                                                                    :: GHC.Base.Maybe
                                                                                                         (GHC.IO.Encoding.Types.TextEncoder
                                                                                                            estate_ibkNj)
                                                                                                  [LclId] =
                                                                                                      CCCS GHC.Base.Just! [ipv5_sbodM]; } in
                                                                                                let {
                                                                                                  sat_sbodU [Occ=Once]
                                                                                                    :: GHC.IO.Handle.Types.Handle__
                                                                                                  [LclId] =
                                                                                                      CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbod1
                                                                                                                                          $dBufferedIO_sbod2
                                                                                                                                          $dTypeable_sbod3
                                                                                                                                          ds_sbod4
                                                                                                                                          GHC.IO.Handle.Types.WriteHandle
                                                                                                                                          dt_sbod6
                                                                                                                                          ds2_sbod7
                                                                                                                                          ipv9_sbodS
                                                                                                                                          dt2_sbod9
                                                                                                                                          dt3_sboda
                                                                                                                                          sat_sbodT
                                                                                                                                          ipv3_sbodB
                                                                                                                                          lvl48_sbocX
                                                                                                                                          ds6_sbode
                                                                                                                                          ds7_sbodf
                                                                                                                                          ds8_sbodg];
                                                                                                } in 
                                                                                                  Unit# [sat_sbodU];
                                                                                          };
                                                                                    };
                                                                              };
                                                                          GHC.IO.Handle.Types.AppendHandle ->
                                                                              case
                                                                                  ds14_sbody
                                                                                      GHC.Prim.void#
                                                                              of
                                                                              { Unit# ipv5_sbodX [Occ=Once] ->
                                                                                    case
                                                                                        readMutVar# [dt_sbod6
                                                                                                     GHC.Prim.void#]
                                                                                    of
                                                                                    { Unit# _ [Occ=Dead] ->
                                                                                          case
                                                                                              newMutVar# [lvl18_rbnX0
                                                                                                          GHC.Prim.void#]
                                                                                          of
                                                                                          { Unit# ipv9_sboe3 [Occ=Once] ->
                                                                                                let {
                                                                                                  sat_sboe4 [Occ=Once]
                                                                                                    :: GHC.Base.Maybe
                                                                                                         (GHC.IO.Encoding.Types.TextEncoder
                                                                                                            estate_ibkNj)
                                                                                                  [LclId] =
                                                                                                      CCCS GHC.Base.Just! [ipv5_sbodX]; } in
                                                                                                let {
                                                                                                  sat_sboe5 [Occ=Once]
                                                                                                    :: GHC.IO.Handle.Types.Handle__
                                                                                                  [LclId] =
                                                                                                      CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbod1
                                                                                                                                          $dBufferedIO_sbod2
                                                                                                                                          $dTypeable_sbod3
                                                                                                                                          ds_sbod4
                                                                                                                                          GHC.IO.Handle.Types.AppendHandle
                                                                                                                                          dt_sbod6
                                                                                                                                          ds2_sbod7
                                                                                                                                          ipv9_sboe3
                                                                                                                                          dt2_sbod9
                                                                                                                                          dt3_sboda
                                                                                                                                          sat_sboe4
                                                                                                                                          ipv3_sbodB
                                                                                                                                          lvl48_sbocX
                                                                                                                                          ds6_sbode
                                                                                                                                          ds7_sbodf
                                                                                                                                          ds8_sbodg];
                                                                                                } in 
                                                                                                  Unit# [sat_sboe5];
                                                                                          };
                                                                                    };
                                                                              };
                                                                          GHC.IO.Handle.Types.ReadWriteHandle ->
                                                                              case
                                                                                  ds14_sbody
                                                                                      GHC.Prim.void#
                                                                              of
                                                                              { Unit# ipv5_sboe8 [Occ=Once] ->
                                                                                    case
                                                                                        readMutVar# [dt_sbod6
                                                                                                     GHC.Prim.void#]
                                                                                    of
                                                                                    { Unit# _ [Occ=Dead] ->
                                                                                          case
                                                                                              newMutVar# [lvl18_rbnX0
                                                                                                          GHC.Prim.void#]
                                                                                          of
                                                                                          { Unit# ipv9_sboee [Occ=Once] ->
                                                                                                let {
                                                                                                  sat_sboef [Occ=Once]
                                                                                                    :: GHC.Base.Maybe
                                                                                                         (GHC.IO.Encoding.Types.TextEncoder
                                                                                                            estate_ibkNj)
                                                                                                  [LclId] =
                                                                                                      CCCS GHC.Base.Just! [ipv5_sboe8]; } in
                                                                                                let {
                                                                                                  sat_sboeg [Occ=Once]
                                                                                                    :: GHC.IO.Handle.Types.Handle__
                                                                                                  [LclId] =
                                                                                                      CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbod1
                                                                                                                                          $dBufferedIO_sbod2
                                                                                                                                          $dTypeable_sbod3
                                                                                                                                          ds_sbod4
                                                                                                                                          GHC.IO.Handle.Types.ReadWriteHandle
                                                                                                                                          dt_sbod6
                                                                                                                                          ds2_sbod7
                                                                                                                                          ipv9_sboee
                                                                                                                                          dt2_sbod9
                                                                                                                                          dt3_sboda
                                                                                                                                          sat_sboef
                                                                                                                                          ipv3_sbodB
                                                                                                                                          lvl48_sbocX
                                                                                                                                          ds6_sbode
                                                                                                                                          ds7_sbodf
                                                                                                                                          ds8_sbodg];
                                                                                                } in 
                                                                                                  Unit# [sat_sboeg];
                                                                                          };
                                                                                    };
                                                                              };
                                                                        };
                                                              } in 
                                                                case ds1_sbod5 of {
                                                                  __DEFAULT ->
                                                                      $j_sbodz
                                                                          GHC.Prim.void#
                                                                          GHC.Base.Nothing;
                                                                  GHC.IO.Handle.Types.ReadHandle ->
                                                                      case
                                                                          ds13_sbodx GHC.Prim.void#
                                                                      of
                                                                      { Unit# ipv3_sboek [Occ=Once] ->
                                                                            let {
                                                                              sat_sboel [Occ=Once]
                                                                                :: GHC.Base.Maybe
                                                                                     (GHC.IO.Encoding.Types.TextDecoder
                                                                                        dstate_ibkNi)
                                                                              [LclId] =
                                                                                  CCCS GHC.Base.Just! [ipv3_sboek];
                                                                            } in 
                                                                              $j_sbodz
                                                                                  GHC.Prim.void#
                                                                                  sat_sboel;
                                                                      };
                                                                  GHC.IO.Handle.Types.ReadWriteHandle ->
                                                                      case
                                                                          ds13_sbodx GHC.Prim.void#
                                                                      of
                                                                      { Unit# ipv3_sboeo [Occ=Once] ->
                                                                            let {
                                                                              sat_sboep [Occ=Once]
                                                                                :: GHC.Base.Maybe
                                                                                     (GHC.IO.Encoding.Types.TextDecoder
                                                                                        dstate_ibkNi)
                                                                              [LclId] =
                                                                                  CCCS GHC.Base.Just! [ipv3_sboeo];
                                                                            } in 
                                                                              $j_sbodz
                                                                                  GHC.Prim.void#
                                                                                  sat_sboep;
                                                                      };
                                                                };
                                                        };
                                              } in 
                                                case ds4_sbodc of {
                                                  GHC.Base.Nothing ->
                                                      case ds3_sbodb of {
                                                        GHC.Base.Nothing ->
                                                            $w$j1_sbodt GHC.Prim.void#;
                                                        GHC.Base.Just d_sboes [Occ=Once!] ->
                                                            case d_sboes of {
                                                              GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                                _ [Occ=Dead]
                                                                                                ds13_sboew [Occ=Once]
                                                                                                _ [Occ=Dead]
                                                                                                _ [Occ=Dead] ->
                                                                  case
                                                                      ds13_sboew GHC.Prim.void#
                                                                  of
                                                                  { Unit# _ [Occ=Dead] ->
                                                                        $w$j1_sbodt GHC.Prim.void#;
                                                                  };
                                                            };
                                                      };
                                                  GHC.Base.Just d_sboeC [Occ=Once!] ->
                                                      case d_sboeC of {
                                                        GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                          _ [Occ=Dead]
                                                                                          ds13_sboeG [Occ=Once]
                                                                                          _ [Occ=Dead]
                                                                                          _ [Occ=Dead] ->
                                                            case ds13_sboeG GHC.Prim.void# of {
                                                              Unit# _ [Occ=Dead] ->
                                                                  case ds3_sbodb of {
                                                                    GHC.Base.Nothing ->
                                                                        $w$j1_sbodt GHC.Prim.void#;
                                                                    GHC.Base.Just d1_sboeN [Occ=Once!] ->
                                                                        case d1_sboeN of {
                                                                          GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                                            _ [Occ=Dead]
                                                                                                            ds19_sboeR [Occ=Once]
                                                                                                            _ [Occ=Dead]
                                                                                                            _ [Occ=Dead] ->
                                                                              case
                                                                                  ds19_sboeR
                                                                                      GHC.Prim.void#
                                                                              of
                                                                              { Unit# _ [Occ=Dead] ->
                                                                                    $w$j1_sbodt
                                                                                        GHC.Prim.void#;
                                                                              };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                    } in 
                                      case ds10_sbodn of {
                                        GHC.IO.Buffer.ReadBuffer ->
                                            case readMutVar# [dt2_sbod9 GHC.Prim.void#] of {
                                              Unit# ipv3_sbof0 [Occ=Once!] ->
                                                  case ipv3_sbof0 of {
                                                    GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                         _ [Occ=Dead]
                                                                         ds11_sbof4 [Occ=Once!]
                                                                         _ [Occ=Dead]
                                                                         dt13_sbof6 [Occ=Once]
                                                                         dt14_sbof7 [Occ=Once] ->
                                                        case ds11_sbof4 of {
                                                          GHC.IO.Buffer.ReadBuffer ->
                                                              case ==# [dt13_sbof6 dt14_sbof7] of {
                                                                __DEFAULT ->
                                                                    case
                                                                        readMutVar# [dt1_sbod8
                                                                                     GHC.Prim.void#]
                                                                    of
                                                                    { Unit# ipv5_sbofc [Occ=Once!] ->
                                                                          case ipv5_sbofc of {
                                                                            (,) codec_state_sbofe [Occ=Once]
                                                                                bbuf0_sboff [Occ=Once*] ->
                                                                                case
                                                                                    readMutVar# [dt2_sbod9
                                                                                                 GHC.Prim.void#]
                                                                                of
                                                                                { Unit# ipv7_sbofi ->
                                                                                      let {
                                                                                        sat_sbofq [Occ=Once]
                                                                                          :: GHC.IO.Buffer.Buffer
                                                                                               GHC.IO.Buffer.CharBufElem
                                                                                        [LclId] =
                                                                                            [ipv7_sbofi] \u []
                                                                                                case
                                                                                                    ipv7_sbofi
                                                                                                of
                                                                                                { GHC.IO.Buffer.Buffer dt9_sbofk [Occ=Once]
                                                                                                                       dt15_sbofl [Occ=Once]
                                                                                                                       ds15_sbofm [Occ=Once]
                                                                                                                       dt16_sbofn [Occ=Once]
                                                                                                                       _ [Occ=Dead]
                                                                                                                       _ [Occ=Dead] ->
                                                                                                      GHC.IO.Buffer.Buffer [dt9_sbofk
                                                                                                                            dt15_sbofl
                                                                                                                            ds15_sbofm
                                                                                                                            dt16_sbofn
                                                                                                                            0#
                                                                                                                            0#];
                                                                                                };
                                                                                      } in 
                                                                                        case
                                                                                            writeMutVar# [dt2_sbod9
                                                                                                          sat_sbofq
                                                                                                          GHC.Prim.void#]
                                                                                        of
                                                                                        s2#_sbofr
                                                                                        { (##) ->
                                                                                              case
                                                                                                  ipv7_sbofi
                                                                                              of
                                                                                              { GHC.IO.Buffer.Buffer dt9_sboft [Occ=Once]
                                                                                                                     dt15_sbofu [Occ=Once]
                                                                                                                     ds15_sbofv [Occ=Once]
                                                                                                                     _ [Occ=Dead]
                                                                                                                     dt17_sbofx [Occ=Once!]
                                                                                                                     _ [Occ=Dead] ->
                                                                                                    case
                                                                                                        dt17_sbofx
                                                                                                    of
                                                                                                    wild7_sbofz
                                                                                                    { __DEFAULT ->
                                                                                                          case
                                                                                                              ds4_sbodc
                                                                                                          of
                                                                                                          { GHC.Base.Nothing ->
                                                                                                                let {
                                                                                                                  sat_sbofJ [Occ=Once]
                                                                                                                    :: GHC.IO.Buffer.Buffer
                                                                                                                         GHC.Word.Word8
                                                                                                                  [LclId] =
                                                                                                                      [bbuf0_sboff
                                                                                                                       wild7_sbofz] \u []
                                                                                                                          case
                                                                                                                              bbuf0_sboff
                                                                                                                          of
                                                                                                                          { GHC.IO.Buffer.Buffer dt19_sbofC [Occ=Once]
                                                                                                                                                 dt20_sbofD [Occ=Once]
                                                                                                                                                 ds16_sbofE [Occ=Once]
                                                                                                                                                 dt21_sbofF [Occ=Once]
                                                                                                                                                 dt22_sbofG [Occ=Once]
                                                                                                                                                 dt23_sbofH [Occ=Once] ->
                                                                                                                                case
                                                                                                                                    +# [dt22_sbofG
                                                                                                                                        wild7_sbofz]
                                                                                                                                of
                                                                                                                                sat_sbofI
                                                                                                                                { __DEFAULT ->
                                                                                                                                      GHC.IO.Buffer.Buffer [dt19_sbofC
                                                                                                                                                            dt20_sbofD
                                                                                                                                                            ds16_sbofE
                                                                                                                                                            dt21_sbofF
                                                                                                                                                            sat_sbofI
                                                                                                                                                            dt23_sbofH];
                                                                                                                                };
                                                                                                                          };
                                                                                                                } in 
                                                                                                                  case
                                                                                                                      writeMutVar# [dt_sbod6
                                                                                                                                    sat_sbofJ
                                                                                                                                    GHC.Prim.void#]
                                                                                                                  of
                                                                                                                  s2#1_sbofK
                                                                                                                  { (##) ->
                                                                                                                        $w$j_sbodr
                                                                                                                            GHC.Prim.void#;
                                                                                                                  };
                                                                                                            GHC.Base.Just decoder_sbofL [Occ=Once!] ->
                                                                                                                case
                                                                                                                    decoder_sbofL
                                                                                                                of
                                                                                                                { GHC.IO.Encoding.Types.BufferCodec ds16_sbofN [Occ=Once]
                                                                                                                                                    ds17_sbofO [Occ=Once]
                                                                                                                                                    _ [Occ=Dead]
                                                                                                                                                    _ [Occ=Dead]
                                                                                                                                                    ds20_sbofR [Occ=Once!] ->
                                                                                                                      case
                                                                                                                          ds20_sbofR
                                                                                                                              codec_state_sbofe
                                                                                                                              GHC.Prim.void#
                                                                                                                      of
                                                                                                                      { Unit# _ [Occ=Dead] ->
                                                                                                                            let {
                                                                                                                              sat_sbofV [Occ=Once]
                                                                                                                                :: GHC.IO.Buffer.Buffer
                                                                                                                                     GHC.IO.Buffer.CharBufElem
                                                                                                                              [LclId] =
                                                                                                                                  CCCS GHC.IO.Buffer.Buffer! [dt9_sboft
                                                                                                                                                              dt15_sbofu
                                                                                                                                                              ds15_sbofv
                                                                                                                                                              wild7_sbofz
                                                                                                                                                              0#
                                                                                                                                                              0#];
                                                                                                                            } in 
                                                                                                                              case
                                                                                                                                  GHC.IO.Handle.Internals.$wstreamEncode
                                                                                                                                      ds16_sbofN
                                                                                                                                      ds17_sbofO
                                                                                                                                      bbuf0_sboff
                                                                                                                                      sat_sbofV
                                                                                                                                      GHC.Prim.void#
                                                                                                                              of
                                                                                                                              { Unit# ipv11_sbofY [Occ=Once!] ->
                                                                                                                                    case
                                                                                                                                        ipv11_sbofY
                                                                                                                                    of
                                                                                                                                    { (,) bbuf1_sbog0 [Occ=Once]
                                                                                                                                          _ [Occ=Dead] ->
                                                                                                                                          case
                                                                                                                                              writeMutVar# [dt_sbod6
                                                                                                                                                            bbuf1_sbog0
                                                                                                                                                            GHC.Prim.void#]
                                                                                                                                          of
                                                                                                                                          s2#1_sbog2
                                                                                                                                          { (##) ->
                                                                                                                                                $w$j_sbodr
                                                                                                                                                    GHC.Prim.void#;
                                                                                                                                          };
                                                                                                                                    };
                                                                                                                              };
                                                                                                                      };
                                                                                                                };
                                                                                                          };
                                                                                                      0# ->
                                                                                                          case
                                                                                                              writeMutVar# [dt_sbod6
                                                                                                                            bbuf0_sboff
                                                                                                                            GHC.Prim.void#]
                                                                                                          of
                                                                                                          s2#1_sbog3
                                                                                                          { (##) ->
                                                                                                                $w$j_sbodr
                                                                                                                    GHC.Prim.void#;
                                                                                                          };
                                                                                                    };
                                                                                              };
                                                                                        };
                                                                                };
                                                                          };
                                                                    };
                                                                1# -> $w$j_sbodr GHC.Prim.void#;
                                                              };
                                                          GHC.IO.Buffer.WriteBuffer ->
                                                              $w$j_sbodr GHC.Prim.void#;
                                                        };
                                                  };
                                            };
                                        GHC.IO.Buffer.WriteBuffer ->
                                            case ==# [dt7_sbodp dt8_sbodq] of {
                                              __DEFAULT -> GHC.IO.Handle.Internals.flushCharBuffer2;
                                              1# -> $w$j_sbodr GHC.Prim.void#;
                                            };
                                      };
                              };
                        };
                  };
        } in 
          GHC.IO.Handle.Internals.withAllHandles__1
              lvl16_rbnWY hdl_sbocU sat_sbog6 GHC.Prim.void#;

GHC.IO.Handle.hSetEncoding
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.hSetEncoding1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.hSetBuffering3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hSetBuffering"#;

GHC.IO.Handle.hSetBuffering2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hSetBuffering3;

GHC.IO.Handle.hSetBuffering1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Types.BufferMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbog7 mode_sbog8 void_0E]
        let {
          sat_sbohh [Occ=Once]
            :: GHC.IO.Handle.Types.Handle__
               -> GHC.Types.IO GHC.IO.Handle.Types.Handle__
          [LclId] =
              [mode_sbog8] \r [handle__sboga void_0E]
                  case handle__sboga of wild_sbogc {
                    GHC.IO.Handle.Types.Handle__ $dIODevice_sbogd
                                                 $dBufferedIO_sboge
                                                 $dTypeable_sbogf
                                                 ds_sbogg
                                                 ds1_sbogh [Occ=Once!]
                                                 dt_sbogi
                                                 ds2_sbogj [Occ=Once*!]
                                                 dt1_sbogk
                                                 dt2_sbogl
                                                 dt3_sbogm
                                                 ds3_sbogn
                                                 ds4_sbogo
                                                 ds5_sbogp
                                                 ds6_sbogq
                                                 ds7_sbogr
                                                 ds8_sbogs ->
                        case ds1_sbogh of wild1_sbogt {
                          __DEFAULT ->
                              let-no-escape {
                                $j_sbogu [Occ=Once*T[0], Dmd=<L,1*U>]
                                  :: (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        GHC.IO.Handle.Types.Handle__ #)
                                [LclId[JoinId(0)], Unf=OtherCon []] =
                                    [mode_sbog8
                                     $dIODevice_sbogd
                                     $dBufferedIO_sboge
                                     $dTypeable_sbogf
                                     ds_sbogg
                                     dt_sbogi
                                     dt1_sbogk
                                     dt2_sbogl
                                     dt3_sbogm
                                     ds3_sbogn
                                     ds4_sbogo
                                     ds5_sbogp
                                     ds6_sbogq
                                     ds7_sbogr
                                     ds8_sbogs
                                     wild1_sbogt] \r []
                                        let-no-escape {
                                          $w$j_sbogv [InlPrag=NOUSERINLINE[0],
                                                      Occ=Once*!T[1],
                                                      Dmd=<C(S),1*C1(U)>]
                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                     GHC.IO.Handle.Types.Handle__ #)
                                          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                              sat-only [mode_sbog8
                                                        $dIODevice_sbogd
                                                        $dBufferedIO_sboge
                                                        $dTypeable_sbogf
                                                        ds_sbogg
                                                        dt_sbogi
                                                        dt1_sbogk
                                                        dt2_sbogl
                                                        dt3_sbogm
                                                        ds3_sbogn
                                                        ds4_sbogo
                                                        ds5_sbogp
                                                        ds6_sbogq
                                                        ds7_sbogr
                                                        ds8_sbogs
                                                        wild1_sbogt] \r [void_0E]
                                                  case
                                                      GHC.IO.Device.isTerminal
                                                          $dIODevice_sbogd ds_sbogg GHC.Prim.void#
                                                  of
                                                  { Unit# ipv1_sbogz [Occ=Once!] ->
                                                        case ipv1_sbogz of {
                                                          GHC.Types.False ->
                                                              case
                                                                  writeMutVar# [dt3_sbogm
                                                                                GHC.IO.Handle.Types.BufferListNil
                                                                                GHC.Prim.void#]
                                                              of
                                                              s2#_sbogB
                                                              { (##) ->
                                                                    let {
                                                                      sat_sbogC [Occ=Once]
                                                                        :: GHC.IO.Handle.Types.Handle__
                                                                      [LclId] =
                                                                          CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbogd
                                                                                                              $dBufferedIO_sboge
                                                                                                              $dTypeable_sbogf
                                                                                                              ds_sbogg
                                                                                                              wild1_sbogt
                                                                                                              dt_sbogi
                                                                                                              mode_sbog8
                                                                                                              dt1_sbogk
                                                                                                              dt2_sbogl
                                                                                                              dt3_sbogm
                                                                                                              ds3_sbogn
                                                                                                              ds4_sbogo
                                                                                                              ds5_sbogp
                                                                                                              ds6_sbogq
                                                                                                              ds7_sbogr
                                                                                                              ds8_sbogs];
                                                                    } in  Unit# [sat_sbogC];
                                                              };
                                                          GHC.Types.True ->
                                                              let-no-escape {
                                                                $j1_sbogD [Occ=Once*T[0],
                                                                           Dmd=<L,1*U>]
                                                                  :: (# GHC.Prim.State#
                                                                          GHC.Prim.RealWorld,
                                                                        GHC.IO.Handle.Types.Handle__ #)
                                                                [LclId[JoinId(0)],
                                                                 Unf=OtherCon []] =
                                                                    [mode_sbog8
                                                                     $dIODevice_sbogd
                                                                     $dBufferedIO_sboge
                                                                     $dTypeable_sbogf
                                                                     ds_sbogg
                                                                     dt_sbogi
                                                                     dt1_sbogk
                                                                     dt2_sbogl
                                                                     dt3_sbogm
                                                                     ds3_sbogn
                                                                     ds4_sbogo
                                                                     ds5_sbogp
                                                                     ds6_sbogq
                                                                     ds7_sbogr
                                                                     ds8_sbogs
                                                                     wild1_sbogt] \r []
                                                                        case
                                                                            mode_sbog8
                                                                        of
                                                                        wild3_sbogE
                                                                        { __DEFAULT ->
                                                                              case
                                                                                  GHC.IO.Device.setRaw
                                                                                      $dIODevice_sbogd
                                                                                      ds_sbogg
                                                                                      GHC.Types.False
                                                                                      GHC.Prim.void#
                                                                              of
                                                                              { Unit# _ [Occ=Dead] ->
                                                                                    case
                                                                                        writeMutVar# [dt3_sbogm
                                                                                                      GHC.IO.Handle.Types.BufferListNil
                                                                                                      GHC.Prim.void#]
                                                                                    of
                                                                                    s2#_sbogI
                                                                                    { (##) ->
                                                                                          let {
                                                                                            sat_sbogJ [Occ=Once]
                                                                                              :: GHC.IO.Handle.Types.Handle__
                                                                                            [LclId] =
                                                                                                CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbogd
                                                                                                                                    $dBufferedIO_sboge
                                                                                                                                    $dTypeable_sbogf
                                                                                                                                    ds_sbogg
                                                                                                                                    wild1_sbogt
                                                                                                                                    dt_sbogi
                                                                                                                                    wild3_sbogE
                                                                                                                                    dt1_sbogk
                                                                                                                                    dt2_sbogl
                                                                                                                                    dt3_sbogm
                                                                                                                                    ds3_sbogn
                                                                                                                                    ds4_sbogo
                                                                                                                                    ds5_sbogp
                                                                                                                                    ds6_sbogq
                                                                                                                                    ds7_sbogr
                                                                                                                                    ds8_sbogs];
                                                                                          } in 
                                                                                            Unit# [sat_sbogJ];
                                                                                    };
                                                                              };
                                                                          GHC.IO.Handle.Types.NoBuffering ->
                                                                              case
                                                                                  GHC.IO.Device.setRaw
                                                                                      $dIODevice_sbogd
                                                                                      ds_sbogg
                                                                                      GHC.Types.True
                                                                                      GHC.Prim.void#
                                                                              of
                                                                              { Unit# _ [Occ=Dead] ->
                                                                                    case
                                                                                        writeMutVar# [dt3_sbogm
                                                                                                      GHC.IO.Handle.Types.BufferListNil
                                                                                                      GHC.Prim.void#]
                                                                                    of
                                                                                    s2#_sbogN
                                                                                    { (##) ->
                                                                                          let {
                                                                                            sat_sbogO [Occ=Once]
                                                                                              :: GHC.IO.Handle.Types.Handle__
                                                                                            [LclId] =
                                                                                                CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbogd
                                                                                                                                    $dBufferedIO_sboge
                                                                                                                                    $dTypeable_sbogf
                                                                                                                                    ds_sbogg
                                                                                                                                    wild1_sbogt
                                                                                                                                    dt_sbogi
                                                                                                                                    GHC.IO.Handle.Types.NoBuffering
                                                                                                                                    dt1_sbogk
                                                                                                                                    dt2_sbogl
                                                                                                                                    dt3_sbogm
                                                                                                                                    ds3_sbogn
                                                                                                                                    ds4_sbogo
                                                                                                                                    ds5_sbogp
                                                                                                                                    ds6_sbogq
                                                                                                                                    ds7_sbogr
                                                                                                                                    ds8_sbogs];
                                                                                          } in 
                                                                                            Unit# [sat_sbogO];
                                                                                    };
                                                                              };
                                                                        };
                                                              } in 
                                                                case wild1_sbogt of wild3_sbogP {
                                                                  __DEFAULT ->
                                                                      case
                                                                          writeMutVar# [dt3_sbogm
                                                                                        GHC.IO.Handle.Types.BufferListNil
                                                                                        GHC.Prim.void#]
                                                                      of
                                                                      s2#_sbogQ
                                                                      { (##) ->
                                                                            let {
                                                                              sat_sbogR [Occ=Once]
                                                                                :: GHC.IO.Handle.Types.Handle__
                                                                              [LclId] =
                                                                                  CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbogd
                                                                                                                      $dBufferedIO_sboge
                                                                                                                      $dTypeable_sbogf
                                                                                                                      ds_sbogg
                                                                                                                      wild3_sbogP
                                                                                                                      dt_sbogi
                                                                                                                      mode_sbog8
                                                                                                                      dt1_sbogk
                                                                                                                      dt2_sbogl
                                                                                                                      dt3_sbogm
                                                                                                                      ds3_sbogn
                                                                                                                      ds4_sbogo
                                                                                                                      ds5_sbogp
                                                                                                                      ds6_sbogq
                                                                                                                      ds7_sbogr
                                                                                                                      ds8_sbogs];
                                                                            } in  Unit# [sat_sbogR];
                                                                      };
                                                                  GHC.IO.Handle.Types.ReadHandle ->
                                                                      $j1_sbogD;
                                                                  GHC.IO.Handle.Types.ReadWriteHandle ->
                                                                      $j1_sbogD;
                                                                };
                                                        };
                                                  };
                                        } in 
                                          case mode_sbog8 of {
                                            __DEFAULT -> $w$j_sbogv GHC.Prim.void#;
                                            GHC.IO.Handle.Types.BlockBuffering ds9_sbogT [Occ=Once!] ->
                                                case ds9_sbogT of {
                                                  GHC.Base.Nothing -> $w$j_sbogv GHC.Prim.void#;
                                                  GHC.Base.Just n_sbogV [Occ=Once!] ->
                                                      case n_sbogV of {
                                                        GHC.Types.I# x_sbogX ->
                                                            case <=# [x_sbogX 0#] of {
                                                              __DEFAULT ->
                                                                  $w$j_sbogv GHC.Prim.void#;
                                                              1# ->
                                                                  GHC.IO.Handle.Internals.$wioe_bufsiz
                                                                      x_sbogX GHC.Prim.void#;
                                                            };
                                                      };
                                                };
                                          };
                              } in 
                                case mode_sbog8 of {
                                  GHC.IO.Handle.Types.NoBuffering ->
                                      case ds2_sbogj of {
                                        __DEFAULT -> $j_sbogu;
                                        GHC.IO.Handle.Types.NoBuffering -> Unit# [wild_sbogc];
                                      };
                                  GHC.IO.Handle.Types.LineBuffering ->
                                      case ds2_sbogj of {
                                        __DEFAULT -> $j_sbogu;
                                        GHC.IO.Handle.Types.LineBuffering -> Unit# [wild_sbogc];
                                      };
                                  GHC.IO.Handle.Types.BlockBuffering a1_sboh3 [Occ=Once!] ->
                                      case ds2_sbogj of {
                                        __DEFAULT -> $j_sbogu;
                                        GHC.IO.Handle.Types.BlockBuffering b1_sboh5 [Occ=Once*!] ->
                                            case a1_sboh3 of {
                                              GHC.Base.Nothing ->
                                                  case b1_sboh5 of {
                                                    GHC.Base.Nothing -> Unit# [wild_sbogc];
                                                    GHC.Base.Just _ [Occ=Dead] -> $j_sbogu;
                                                  };
                                              GHC.Base.Just a2_sboh9 [Occ=Once!] ->
                                                  case b1_sboh5 of {
                                                    GHC.Base.Nothing -> $j_sbogu;
                                                    GHC.Base.Just b2_sbohb [Occ=Once!] ->
                                                        case a2_sboh9 of {
                                                          GHC.Types.I# x_sbohd [Occ=Once] ->
                                                              case b2_sbohb of {
                                                                GHC.Types.I# y_sbohf [Occ=Once] ->
                                                                    case ==# [x_sbohd y_sbohf] of {
                                                                      __DEFAULT -> $j_sbogu;
                                                                      1# -> Unit# [wild_sbogc];
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          GHC.IO.Handle.Types.ClosedHandle ->
                              GHC.IO.Handle.Internals.ioe_closedHandle1 GHC.Prim.void#;
                        };
                  };
        } in 
          GHC.IO.Handle.Internals.withAllHandles__1
              GHC.IO.Handle.hSetBuffering2 handle_sbog7 sat_sbohh GHC.Prim.void#;

GHC.IO.Handle.hSetBuffering
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Types.BufferMode -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.hSetBuffering1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.hIsEOF4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hIsEOF"#;

GHC.IO.Handle.hIsEOF3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hIsEOF4;

GHC.IO.Handle.hIsEOF2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_sbohi void_0E]
        case ds_sbohi of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       $dBufferedIO_sbohm [Occ=Once]
                                       _ [Occ=Dead]
                                       ds1_sboho [Occ=Once]
                                       _ [Occ=Dead]
                                       dt_sbohq
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       dt2_sboht [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt2_sboht GHC.Prim.void#] of {
                Unit# ipv1_sbohD [Occ=Once!] ->
                    case ipv1_sbohD of {
                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           dt7_sbohJ [Occ=Once]
                                           dt8_sbohK [Occ=Once] ->
                          case ==# [dt7_sbohJ dt8_sbohK] of {
                            __DEFAULT -> Unit# [GHC.Types.False];
                            1# ->
                                case readMutVar# [dt_sbohq GHC.Prim.void#] of {
                                  Unit# ipv3_sbohO [Occ=Once!] ->
                                      case ipv3_sbohO of wild2_sbohP {
                                        GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             dt12_sbohU [Occ=Once]
                                                             dt13_sbohV [Occ=Once] ->
                                            case ==# [dt12_sbohU dt13_sbohV] of {
                                              __DEFAULT -> Unit# [GHC.Types.False];
                                              1# ->
                                                  case
                                                      GHC.IO.BufferedIO.fillReadBuffer
                                                          $dBufferedIO_sbohm
                                                          ds1_sboho
                                                          wild2_sbohP
                                                          GHC.Prim.void#
                                                  of
                                                  { Unit# ipv5_sbohZ [Occ=Once!] ->
                                                        case ipv5_sbohZ of {
                                                          (,) r_sboi1 [Occ=Once!]
                                                              bbuf'_sboi2 [Occ=Once] ->
                                                              case r_sboi1 of {
                                                                GHC.Types.I# x_sboi4 [Occ=Once!] ->
                                                                    case x_sboi4 of {
                                                                      __DEFAULT ->
                                                                          case
                                                                              writeMutVar# [dt_sbohq
                                                                                            bbuf'_sboi2
                                                                                            GHC.Prim.void#]
                                                                          of
                                                                          s2#_sboi6
                                                                          { (##) ->
                                                                                Unit# [GHC.Types.False];
                                                                          };
                                                                      0# -> Unit# [GHC.Types.True];
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.hIsEOF1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [handle_sboi7 void_0E]
        GHC.IO.Handle.Internals.wantReadableHandle_1
            GHC.IO.Handle.hIsEOF3
            handle_sboi7
            GHC.IO.Handle.hIsEOF2
            GHC.Prim.void#;

GHC.IO.Handle.hIsEOF
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] GHC.IO.Handle.hIsEOF1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.isEOF1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [void_0E]
        GHC.IO.Handle.Internals.wantReadableHandle_1
            GHC.IO.Handle.hIsEOF3
            GHC.IO.Handle.FD.stdin
            GHC.IO.Handle.hIsEOF2
            GHC.Prim.void#;

GHC.IO.Handle.isEOF :: GHC.Types.IO GHC.Types.Bool
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [void_0E] GHC.IO.Handle.isEOF1 GHC.Prim.void#;

lvl19_rbnX1 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hSetFileSize"#;

lvl20_rbnX2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl19_rbnX1;

GHC.IO.Handle.hSetFileSize1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Integer.Type.Integer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sboi8 size_sboi9 void_0E]
        let {
          act_sboib [Occ=OnceL*!, Dmd=<L,C(C1(U(U,U)))>]
            :: GHC.IO.Handle.Types.Handle__
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
          [LclId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
              sat-only [size_sboi9] \r [handle__sboic void_0E]
                  case handle__sboic of {
                    GHC.IO.Handle.Types.Handle__ $dIODevice_sboif [Occ=Once*]
                                                 $dBufferedIO_sboig [Occ=Once]
                                                 _ [Occ=Dead]
                                                 ds_sboii
                                                 ds1_sboij [Occ=Once!]
                                                 dt_sboik
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead] ->
                        case ds1_sboij of {
                          __DEFAULT ->
                              case readMutVar# [dt_sboik GHC.Prim.void#] of {
                                Unit# ipv1_sboiy [Occ=Once!] ->
                                    case ipv1_sboiy of {
                                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           ds10_sboiC [Occ=Once!]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead] ->
                                          case ds10_sboiC of {
                                            GHC.IO.Buffer.ReadBuffer ->
                                                case
                                                    GHC.IO.Device.setSize
                                                        $dIODevice_sboif
                                                        ds_sboii
                                                        size_sboi9
                                                        GHC.Prim.void#
                                                of
                                                { Unit# _ [Occ=Dead] -> Unit# [GHC.Tuple.()];
                                                };
                                            GHC.IO.Buffer.WriteBuffer ->
                                                case readMutVar# [dt_sboik GHC.Prim.void#] of {
                                                  Unit# ipv3_sboiM [Occ=Once!] ->
                                                      case ipv3_sboiM of wild4_sboiN {
                                                        GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                             _ [Occ=Dead]
                                                                             _ [Occ=Dead]
                                                                             _ [Occ=Dead]
                                                                             dt12_sboiS [Occ=Once]
                                                                             dt13_sboiT [Occ=Once] ->
                                                            case ==# [dt12_sboiS dt13_sboiT] of {
                                                              __DEFAULT ->
                                                                  case
                                                                      GHC.IO.BufferedIO.flushWriteBuffer
                                                                          $dBufferedIO_sboig
                                                                          ds_sboii
                                                                          wild4_sboiN
                                                                          GHC.Prim.void#
                                                                  of
                                                                  { Unit# ipv5_sboiX [Occ=Once] ->
                                                                        case
                                                                            writeMutVar# [dt_sboik
                                                                                          ipv5_sboiX
                                                                                          GHC.Prim.void#]
                                                                        of
                                                                        s2#_sboiY
                                                                        { (##) ->
                                                                              case
                                                                                  GHC.IO.Device.setSize
                                                                                      $dIODevice_sboif
                                                                                      ds_sboii
                                                                                      size_sboi9
                                                                                      GHC.Prim.void#
                                                                              of
                                                                              { Unit# _ [Occ=Dead] ->
                                                                                    Unit# [GHC.Tuple.()];
                                                                              };
                                                                        };
                                                                  };
                                                              1# ->
                                                                  case
                                                                      GHC.IO.Device.setSize
                                                                          $dIODevice_sboif
                                                                          ds_sboii
                                                                          size_sboi9
                                                                          GHC.Prim.void#
                                                                  of
                                                                  { Unit# _ [Occ=Dead] ->
                                                                        Unit# [GHC.Tuple.()];
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                          GHC.IO.Handle.Types.ClosedHandle ->
                              GHC.IO.Handle.Internals.ioe_closedHandle1 GHC.Prim.void#;
                          GHC.IO.Handle.Types.SemiClosedHandle ->
                              GHC.IO.Handle.Internals.ioe_semiclosedHandle1 GHC.Prim.void#;
                        };
                  };
        } in 
          case handle_sboi8 of wild_sboj5 {
            GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sboj7 ->
                case getMaskingState# [GHC.Prim.void#] of {
                  Unit# ipv1_sboja [Occ=Once!] ->
                      let {
                        io_sbojb [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                          :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                        [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                            [act_sboib wild_sboj5 dt_sboj7] \r [void_0E]
                                let {
                                  sat_sbojj [Occ=Once]
                                    :: GHC.IO.Handle.Types.Handle__
                                       -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, ())
                                  [LclId] =
                                      [act_sboib] \r [h__sbojd void_0E]
                                          case act_sboib h__sbojd GHC.Prim.void# of {
                                            Unit# ipv3_sbojh [Occ=Once] ->
                                                let {
                                                  sat_sboji [Occ=Once]
                                                    :: (GHC.IO.Handle.Types.Handle__, ())
                                                  [LclId] =
                                                      CCCS (,)! [h__sbojd ipv3_sbojh];
                                                } in  Unit# [sat_sboji];
                                          };
                                } in 
                                  case
                                      GHC.IO.Handle.Internals.$wdo_operation
                                          lvl20_rbnX2 wild_sboj5 sat_sbojj dt_sboj7 GHC.Prim.void#
                                  of
                                  { Unit# ipv3_sbojm [Occ=Once!] ->
                                        case ipv3_sbojm of {
                                          (,) h'_sbojo [Occ=Once] v_sbojp [Occ=Once] ->
                                              case
                                                  putMVar# [dt_sboj7 h'_sbojo GHC.Prim.void#]
                                              of
                                              s2#_sbojq
                                              { (##) -> Unit# [v_sbojp];
                                              };
                                        };
                                  };
                      } in 
                        case ipv1_sboja of {
                          __DEFAULT -> io_sbojb GHC.Prim.void#;
                          0# -> maskAsyncExceptions# [io_sbojb GHC.Prim.void#];
                        };
                };
            GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                             dt_sbojt
                                             _ [Occ=Dead] ->
                case getMaskingState# [GHC.Prim.void#] of {
                  Unit# ipv1_sbojx [Occ=Once!] ->
                      let {
                        io_sbojy [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                          :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                        [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                            [act_sboib wild_sboj5 dt_sbojt] \r [void_0E]
                                let {
                                  sat_sbojG [Occ=Once]
                                    :: GHC.IO.Handle.Types.Handle__
                                       -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, ())
                                  [LclId] =
                                      [act_sboib] \r [h__sbojA void_0E]
                                          case act_sboib h__sbojA GHC.Prim.void# of {
                                            Unit# ipv3_sbojE [Occ=Once] ->
                                                let {
                                                  sat_sbojF [Occ=Once]
                                                    :: (GHC.IO.Handle.Types.Handle__, ())
                                                  [LclId] =
                                                      CCCS (,)! [h__sbojA ipv3_sbojE];
                                                } in  Unit# [sat_sbojF];
                                          };
                                } in 
                                  case
                                      GHC.IO.Handle.Internals.$wdo_operation
                                          lvl20_rbnX2 wild_sboj5 sat_sbojG dt_sbojt GHC.Prim.void#
                                  of
                                  { Unit# ipv3_sbojJ [Occ=Once!] ->
                                        case ipv3_sbojJ of {
                                          (,) h'_sbojL [Occ=Once] v_sbojM [Occ=Once] ->
                                              case
                                                  putMVar# [dt_sbojt h'_sbojL GHC.Prim.void#]
                                              of
                                              s2#_sbojN
                                              { (##) -> Unit# [v_sbojM];
                                              };
                                        };
                                  };
                      } in 
                        case ipv1_sbojx of {
                          __DEFAULT -> io_sbojy GHC.Prim.void#;
                          0# -> maskAsyncExceptions# [io_sbojy GHC.Prim.void#];
                        };
                };
          };

GHC.IO.Handle.hSetFileSize
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Integer.Type.Integer -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.hSetFileSize1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.hFileSize9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hFileSize"#;

GHC.IO.Handle.hFileSize8 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hFileSize9;

GHC.IO.Handle.hFileSize7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "not a regular file"#;

GHC.IO.Handle.hFileSize6 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hFileSize7;

GHC.IO.Handle.hFileSize5 :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.InappropriateType
                                             GHC.IO.Handle.hFileSize8
                                             GHC.IO.Handle.hFileSize6
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Handle.hFileSize4 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Handle.hFileSize5;

sat_sbojP :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

sat_sbojQ :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sbojP GHC.Types.[]];

GHC.IO.Handle.hFileSize10 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.False sat_sbojQ;

GHC.IO.Handle.hFileSize3
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Integer.Type.Integer #)
[GblId, Arity=2, Str=<S,1*U><S,U>m, Unf=OtherCon []] =
    [] \r [handle__sbojR void_0E]
        case handle__sbojR of {
          GHC.IO.Handle.Types.Handle__ $dIODevice_sbojU [Occ=Once]
                                       $dBufferedIO_sbojV [Occ=Once]
                                       _ [Occ=Dead]
                                       ds_sbojX
                                       ds1_sbojY [Occ=Once!]
                                       dt_sbojZ
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds1_sbojY of {
                __DEFAULT ->
                    case readMutVar# [dt_sbojZ GHC.Prim.void#] of {
                      Unit# ipv1_sbokd [Occ=Once!] ->
                          case ipv1_sbokd of {
                            GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 ds10_sbokh [Occ=Once!]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead] ->
                                let-no-escape {
                                  $w$j_sbokl [InlPrag=NOUSERINLINE[0],
                                              Occ=Once*!T[1],
                                              Dmd=<L,1*C1(U(U,U))>]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                             GHC.Integer.Type.Integer #)
                                  [LclId[JoinId(1)], Arity=1, Str=<S,U>m, Unf=OtherCon []] =
                                      sat-only [$dIODevice_sbojU ds_sbojX] \r [void_0E]
                                          case
                                              GHC.IO.Device.getSize
                                                  $dIODevice_sbojU ds_sbojX GHC.Prim.void#
                                          of
                                          ds12_sbokn
                                          { Unit# ipv3_sbokp [Occ=Once] ->
                                                case
                                                    GHC.Integer.Type.neqInteger#
                                                        ipv3_sbokp GHC.IO.Handle.hFileSize10
                                                of
                                                { __DEFAULT ->
                                                      raiseIO# [GHC.IO.Handle.hFileSize4
                                                                GHC.Prim.void#];
                                                  1# -> Unit# [ipv3_sbokp];
                                                };
                                          };
                                } in 
                                  case ds10_sbokh of {
                                    GHC.IO.Buffer.ReadBuffer -> $w$j_sbokl GHC.Prim.void#;
                                    GHC.IO.Buffer.WriteBuffer ->
                                        case readMutVar# [dt_sbojZ GHC.Prim.void#] of {
                                          Unit# ipv3_sboku [Occ=Once!] ->
                                              case ipv3_sboku of wild4_sbokv {
                                                GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     dt12_sbokA [Occ=Once]
                                                                     dt13_sbokB [Occ=Once] ->
                                                    case ==# [dt12_sbokA dt13_sbokB] of {
                                                      __DEFAULT ->
                                                          case
                                                              GHC.IO.BufferedIO.flushWriteBuffer
                                                                  $dBufferedIO_sbojV
                                                                  ds_sbojX
                                                                  wild4_sbokv
                                                                  GHC.Prim.void#
                                                          of
                                                          { Unit# ipv5_sbokF [Occ=Once] ->
                                                                case
                                                                    writeMutVar# [dt_sbojZ
                                                                                  ipv5_sbokF
                                                                                  GHC.Prim.void#]
                                                                of
                                                                s2#_sbokG
                                                                { (##) -> $w$j_sbokl GHC.Prim.void#;
                                                                };
                                                          };
                                                      1# -> $w$j_sbokl GHC.Prim.void#;
                                                    };
                                              };
                                        };
                                  };
                          };
                    };
                GHC.IO.Handle.Types.ClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_closedHandle1 GHC.Prim.void#;
                GHC.IO.Handle.Types.SemiClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_semiclosedHandle1 GHC.Prim.void#;
              };
        };

GHC.IO.Handle.hFileSize2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, GHC.Integer.Type.Integer) #)
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [h__sbokH void_0E]
        case GHC.IO.Handle.hFileSize3 h__sbokH GHC.Prim.void# of {
          Unit# ipv1_sbokL [Occ=Once] ->
              let {
                sat_sbokM [Occ=Once]
                  :: (GHC.IO.Handle.Types.Handle__, GHC.Integer.Type.Integer)
                [LclId] =
                    CCCS (,)! [h__sbokH ipv1_sbokL];
              } in  Unit# [sat_sbokM];
        };

GHC.IO.Handle.hFileSize1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Integer.Type.Integer #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbokN void_0E]
        case handle_sbokN of wild_sbokP {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbokR ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sbokU [Occ=Once!] ->
                    let {
                      io_sbokV [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 GHC.Integer.Type.Integer #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbokP dt_sbokR] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hFileSize8
                                      wild_sbokP
                                      GHC.IO.Handle.hFileSize2
                                      dt_sbokR
                                      GHC.Prim.void#
                              of
                              { Unit# ipv3_sbokZ [Occ=Once!] ->
                                    case ipv3_sbokZ of {
                                      (,) h'_sbol1 [Occ=Once] v_sbol2 [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbokR h'_sbol1 GHC.Prim.void#]
                                          of
                                          s2#_sbol3
                                          { (##) -> Unit# [v_sbol2];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbokU of {
                        __DEFAULT -> io_sbokV GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sbokV GHC.Prim.void#];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sbol6
                                           _ [Occ=Dead] ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sbola [Occ=Once!] ->
                    let {
                      io_sbolb [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 GHC.Integer.Type.Integer #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbokP dt_sbol6] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hFileSize8
                                      wild_sbokP
                                      GHC.IO.Handle.hFileSize2
                                      dt_sbol6
                                      GHC.Prim.void#
                              of
                              { Unit# ipv3_sbolf [Occ=Once!] ->
                                    case ipv3_sbolf of {
                                      (,) h'_sbolh [Occ=Once] v_sboli [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbol6 h'_sbolh GHC.Prim.void#]
                                          of
                                          s2#_sbolj
                                          { (##) -> Unit# [v_sboli];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbola of {
                        __DEFAULT -> io_sbolb GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sbolb GHC.Prim.void#];
                      };
              };
        };

GHC.IO.Handle.hFileSize
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Types.IO GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.hFileSize1 eta_B2 GHC.Prim.void#;

lvl21_rbnX3
  :: GHC.Base.Maybe
       (GHC.IO.FilePath
        -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ())
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.IO.Handle.Internals.handleFinalizer1];

GHC.IO.Handle.hDuplicateTo1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h1_sboll h2_sbolm void_0E]
        case h1_sboll of wild_sbolo {
          GHC.IO.Handle.Types.FileHandle path_sbolp [Occ=OnceL]
                                         dt_sbolq [Occ=OnceL] ->
              case h2_sbolm of wild1_sbolr {
                GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt1_sbolt [Occ=Once] ->
                    let {
                      sat_sbolG [Occ=Once]
                        :: GHC.IO.Handle.Types.Handle__
                           -> GHC.Types.IO GHC.IO.Handle.Types.Handle__
                      [LclId] =
                          [wild_sbolo path_sbolp dt_sbolq] \r [h2__sbolu void_0E]
                              case
                                  GHC.IO.Handle.Internals.hClose_help1 h2__sbolu GHC.Prim.void#
                              of
                              { Unit# _ [Occ=Dead] ->
                                    let {
                                      sat_sbolF [Occ=Once]
                                        :: GHC.IO.Handle.Types.Handle__
                                           -> GHC.Types.IO
                                                (GHC.IO.Handle.Types.Handle__,
                                                 GHC.IO.Handle.Types.Handle__)
                                      [LclId] =
                                          [wild_sbolo path_sbolp h2__sbolu] \r [h__sbolz void_0E]
                                              case
                                                  dupHandleTo_rbnWN
                                                      path_sbolp
                                                      wild_sbolo
                                                      GHC.Base.Nothing
                                                      h2__sbolu
                                                      h__sbolz
                                                      lvl21_rbnX3
                                                      GHC.Prim.void#
                                              of
                                              { Unit# ipv3_sbolD [Occ=Once] ->
                                                    let {
                                                      sat_sbolE [Occ=Once]
                                                        :: (GHC.IO.Handle.Types.Handle__,
                                                            GHC.IO.Handle.Types.Handle__)
                                                      [LclId] =
                                                          CCCS (,)! [h__sbolz ipv3_sbolD];
                                                    } in  Unit# [sat_sbolE];
                                              };
                                    } in 
                                      GHC.IO.Handle.Internals.$wwithHandle'
                                          lvl1_rbnWC wild_sbolo dt_sbolq sat_sbolF GHC.Prim.void#;
                              };
                    } in 
                      GHC.IO.Handle.Internals.$wwithHandle__'
                          lvl1_rbnWC wild1_sbolr dt1_sbolt sat_sbolG GHC.Prim.void#;
                GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead] ->
                    ioe_dupHandlesNotCompatible_rbnWF wild_sbolo GHC.Prim.void#;
              };
          GHC.IO.Handle.Types.DuplexHandle path_sbolK
                                           dt_sbolL [Occ=OnceL]
                                           dt1_sbolM ->
              case h2_sbolm of wild1_sbolN {
                GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] _ [Occ=Dead] ->
                    ioe_dupHandlesNotCompatible_rbnWF wild_sbolo GHC.Prim.void#;
                GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                 dt2_sbolR [Occ=Once]
                                                 dt3_sbolS [Occ=Once] ->
                    let {
                      sat_sbom5 [Occ=Once]
                        :: GHC.IO.Handle.Types.Handle__
                           -> GHC.Types.IO GHC.IO.Handle.Types.Handle__
                      [LclId] =
                          [wild_sbolo path_sbolK dt1_sbolM] \r [w2__sbolT void_0E]
                              case
                                  GHC.IO.Handle.Internals.hClose_help1 w2__sbolT GHC.Prim.void#
                              of
                              { Unit# _ [Occ=Dead] ->
                                    let {
                                      sat_sbom4 [Occ=Once]
                                        :: GHC.IO.Handle.Types.Handle__
                                           -> GHC.Types.IO
                                                (GHC.IO.Handle.Types.Handle__,
                                                 GHC.IO.Handle.Types.Handle__)
                                      [LclId] =
                                          [wild_sbolo path_sbolK w2__sbolT] \r [h__sbolY void_0E]
                                              case
                                                  dupHandleTo_rbnWN
                                                      path_sbolK
                                                      wild_sbolo
                                                      GHC.Base.Nothing
                                                      w2__sbolT
                                                      h__sbolY
                                                      lvl21_rbnX3
                                                      GHC.Prim.void#
                                              of
                                              { Unit# ipv3_sbom2 [Occ=Once] ->
                                                    let {
                                                      sat_sbom3 [Occ=Once]
                                                        :: (GHC.IO.Handle.Types.Handle__,
                                                            GHC.IO.Handle.Types.Handle__)
                                                      [LclId] =
                                                          CCCS (,)! [h__sbolY ipv3_sbom2];
                                                    } in  Unit# [sat_sbom3];
                                              };
                                    } in 
                                      GHC.IO.Handle.Internals.$wwithHandle'
                                          lvl1_rbnWC wild_sbolo dt1_sbolM sat_sbom4 GHC.Prim.void#;
                              };
                    } in 
                      case
                          GHC.IO.Handle.Internals.$wwithHandle__'
                              lvl1_rbnWC wild1_sbolN dt3_sbolS sat_sbom5 GHC.Prim.void#
                      of
                      { Unit# _ [Occ=Dead] ->
                            let {
                              w1_sbom9 [Occ=OnceL] :: GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
                              [LclId, Unf=OtherCon []] =
                                  CCCS GHC.MVar.MVar! [dt1_sbolM]; } in
                            let {
                              lvl48_sboma [Occ=OnceL]
                                :: GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
                              [LclId, Unf=OtherCon []] =
                                  CCCS GHC.Base.Just! [w1_sbom9]; } in
                            let {
                              sat_sbomn [Occ=Once]
                                :: GHC.IO.Handle.Types.Handle__
                                   -> GHC.Types.IO GHC.IO.Handle.Types.Handle__
                              [LclId] =
                                  [wild_sbolo path_sbolK dt_sbolL lvl48_sboma] \r [r2__sbomb
                                                                                   void_0E]
                                      case
                                          GHC.IO.Handle.Internals.hClose_help1
                                              r2__sbomb GHC.Prim.void#
                                      of
                                      { Unit# _ [Occ=Dead] ->
                                            let {
                                              sat_sbomm [Occ=Once]
                                                :: GHC.IO.Handle.Types.Handle__
                                                   -> GHC.Types.IO
                                                        (GHC.IO.Handle.Types.Handle__,
                                                         GHC.IO.Handle.Types.Handle__)
                                              [LclId] =
                                                  [wild_sbolo
                                                   path_sbolK
                                                   lvl48_sboma
                                                   r2__sbomb] \r [h__sbomg void_0E]
                                                      case
                                                          dupHandleTo_rbnWN
                                                              path_sbolK
                                                              wild_sbolo
                                                              lvl48_sboma
                                                              r2__sbomb
                                                              h__sbomg
                                                              GHC.Base.Nothing
                                                              GHC.Prim.void#
                                                      of
                                                      { Unit# ipv5_sbomk [Occ=Once] ->
                                                            let {
                                                              sat_sboml [Occ=Once]
                                                                :: (GHC.IO.Handle.Types.Handle__,
                                                                    GHC.IO.Handle.Types.Handle__)
                                                              [LclId] =
                                                                  CCCS (,)! [h__sbomg ipv5_sbomk];
                                                            } in  Unit# [sat_sboml];
                                                      };
                                            } in 
                                              GHC.IO.Handle.Internals.$wwithHandle'
                                                  lvl1_rbnWC
                                                  wild_sbolo
                                                  dt_sbolL
                                                  sat_sbomm
                                                  GHC.Prim.void#;
                                      };
                            } in 
                              GHC.IO.Handle.Internals.$wwithHandle__'
                                  lvl1_rbnWC wild1_sbolN dt2_sbolR sat_sbomn GHC.Prim.void#;
                      };
              };
        };

GHC.IO.Handle.hDuplicateTo
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Types.Handle -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,1*U><S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.hDuplicateTo1 eta_B3 eta_B2 GHC.Prim.void#;

lvl22_rbnX4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hDuplicate"#;

lvl23_rbnX5 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl22_rbnX4;

lvl24_rbnX6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Pattern match failure in do expression at GHC/IO/Handle.hs:626:3-33"#;

lvl25_rbnX7
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    sat-only [] \r [void_0E]
        case GHC.CString.unpackCString# lvl24_rbnX6 of sat_sbomp {
          __DEFAULT -> GHC.IO.failIO1 sat_sbomp GHC.Prim.void#;
        };

lvl26_rbnX8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Pattern match failure in do expression at GHC/IO/Handle.hs:623:3-35"#;

lvl27_rbnX9
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    sat-only [] \r [void_0E]
        case GHC.CString.unpackCString# lvl26_rbnX8 of sat_sbomr {
          __DEFAULT -> GHC.IO.failIO1 sat_sbomr GHC.Prim.void#;
        };

GHC.IO.Handle.hDuplicate1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h_sboms void_0E]
        case h_sboms of wild_sbomu {
          GHC.IO.Handle.Types.FileHandle path_sbomv [Occ=OnceL]
                                         dt_sbomw [Occ=Once] ->
              let {
                sat_sbon0 [Occ=Once]
                  :: GHC.IO.Handle.Types.Handle__
                     -> GHC.Types.IO
                          (GHC.IO.Handle.Types.Handle__, GHC.IO.Handle.Types.Handle)
                [LclId] =
                    [path_sbomv] \r [h__sbomx void_0E]
                        case h__sbomx of wild1_sbomz {
                          GHC.IO.Handle.Types.Handle__ $dIODevice_sbomA
                                                       $dBufferedIO_sbomB [Occ=Once]
                                                       $dTypeable_sbomC [Occ=Once]
                                                       ds_sbomD [Occ=Once]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead] ->
                              case
                                  GHC.IO.Handle.Internals.flushBuffer1 wild1_sbomz GHC.Prim.void#
                              of
                              { Unit# _ [Occ=Dead] ->
                                    case
                                        GHC.IO.Device.dup $dIODevice_sbomA ds_sbomD GHC.Prim.void#
                                    of
                                    { Unit# ipv3_sbomV [Occ=Once] ->
                                          case
                                              dupHandle__rbnWK
                                                  $dIODevice_sbomA
                                                  $dBufferedIO_sbomB
                                                  $dTypeable_sbomC
                                                  ipv3_sbomV
                                                  path_sbomv
                                                  GHC.Base.Nothing
                                                  wild1_sbomz
                                                  lvl21_rbnX3
                                                  GHC.Prim.void#
                                          of
                                          { Unit# ipv5_sbomY [Occ=Once] ->
                                                let {
                                                  sat_sbomZ [Occ=Once]
                                                    :: (GHC.IO.Handle.Types.Handle__,
                                                        GHC.IO.Handle.Types.Handle)
                                                  [LclId] =
                                                      CCCS (,)! [wild1_sbomz ipv5_sbomY];
                                                } in  Unit# [sat_sbomZ];
                                          };
                                    };
                              };
                        };
              } in 
                GHC.IO.Handle.Internals.$wwithHandle'
                    lvl23_rbnX5 wild_sbomu dt_sbomw sat_sbon0 GHC.Prim.void#;
          GHC.IO.Handle.Types.DuplexHandle path_sbon1
                                           dt_sbon2 [Occ=Once]
                                           dt1_sbon3 [Occ=Once] ->
              let {
                sat_sbonx [Occ=Once]
                  :: GHC.IO.Handle.Types.Handle__
                     -> GHC.Types.IO
                          (GHC.IO.Handle.Types.Handle__, GHC.IO.Handle.Types.Handle)
                [LclId] =
                    [path_sbon1] \r [h__sbon4 void_0E]
                        case h__sbon4 of wild1_sbon6 {
                          GHC.IO.Handle.Types.Handle__ $dIODevice_sbon7
                                                       $dBufferedIO_sbon8 [Occ=Once]
                                                       $dTypeable_sbon9 [Occ=Once]
                                                       ds_sbona [Occ=Once]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead] ->
                              case
                                  GHC.IO.Handle.Internals.flushBuffer1 wild1_sbon6 GHC.Prim.void#
                              of
                              { Unit# _ [Occ=Dead] ->
                                    case
                                        GHC.IO.Device.dup $dIODevice_sbon7 ds_sbona GHC.Prim.void#
                                    of
                                    { Unit# ipv3_sbons [Occ=Once] ->
                                          case
                                              dupHandle__rbnWK
                                                  $dIODevice_sbon7
                                                  $dBufferedIO_sbon8
                                                  $dTypeable_sbon9
                                                  ipv3_sbons
                                                  path_sbon1
                                                  GHC.Base.Nothing
                                                  wild1_sbon6
                                                  lvl21_rbnX3
                                                  GHC.Prim.void#
                                          of
                                          { Unit# ipv5_sbonv [Occ=Once] ->
                                                let {
                                                  sat_sbonw [Occ=Once]
                                                    :: (GHC.IO.Handle.Types.Handle__,
                                                        GHC.IO.Handle.Types.Handle)
                                                  [LclId] =
                                                      CCCS (,)! [wild1_sbon6 ipv5_sbonv];
                                                } in  Unit# [sat_sbonw];
                                          };
                                    };
                              };
                        };
              } in 
                case
                    GHC.IO.Handle.Internals.$wwithHandle'
                        lvl23_rbnX5 wild_sbomu dt1_sbon3 sat_sbonx GHC.Prim.void#
                of
                { Unit# ipv1_sbonA [Occ=Once!] ->
                      case ipv1_sbonA of {
                        GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt2_sbonD ->
                            let {
                              write_m_sbonE [Occ=OnceL]
                                :: GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
                              [LclId, Unf=OtherCon []] =
                                  CCCS GHC.MVar.MVar! [dt2_sbonD]; } in
                            let {
                              lvl48_sbonF [Occ=OnceL]
                                :: GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
                              [LclId, Unf=OtherCon []] =
                                  CCCS GHC.Base.Just! [write_m_sbonE]; } in
                            let {
                              sat_sboou [Occ=Once]
                                :: GHC.IO.Handle.Types.Handle__
                                   -> GHC.Types.IO
                                        (GHC.IO.Handle.Types.Handle__, GHC.IO.Handle.Types.Handle)
                              [LclId] =
                                  [wild_sbomu path_sbon1 dt2_sbonD lvl48_sbonF] \r [h__sbonG
                                                                                    void_0E]
                                      case h__sbonG of wild2_sbonI {
                                        GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead] ->
                                            case
                                                GHC.IO.Handle.Internals.flushBuffer1
                                                    wild2_sbonI GHC.Prim.void#
                                            of
                                            { Unit# _ [Occ=Dead] ->
                                                  let {
                                                    sat_sboop [Occ=Once]
                                                      :: GHC.IO.Handle.Types.Handle__
                                                         -> GHC.Types.IO
                                                              (GHC.IO.Handle.Types.Handle__,
                                                               GHC.IO.Handle.Types.Handle)
                                                    [LclId] =
                                                        [path_sbon1
                                                         lvl48_sbonF
                                                         wild2_sbonI] \r [h_1_sboo2 void_0E]
                                                            case h_1_sboo2 of wild3_sboo4 {
                                                              GHC.IO.Handle.Types.Handle__ $dIODevice1_sboo5 [Occ=Once]
                                                                                           $dBufferedIO1_sboo6 [Occ=Once]
                                                                                           $dTypeable1_sboo7 [Occ=Once]
                                                                                           ds12_sboo8 [Occ=Once]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead] ->
                                                                  case
                                                                      dupHandle__rbnWK
                                                                          $dIODevice1_sboo5
                                                                          $dBufferedIO1_sboo6
                                                                          $dTypeable1_sboo7
                                                                          ds12_sboo8
                                                                          path_sbon1
                                                                          lvl48_sbonF
                                                                          wild2_sbonI
                                                                          GHC.Base.Nothing
                                                                          GHC.Prim.void#
                                                                  of
                                                                  { Unit# ipv5_sboon [Occ=Once] ->
                                                                        let {
                                                                          sat_sbooo [Occ=Once]
                                                                            :: (GHC.IO.Handle.Types.Handle__,
                                                                                GHC.IO.Handle.Types.Handle)
                                                                          [LclId] =
                                                                              CCCS (,)! [wild3_sboo4
                                                                                         ipv5_sboon];
                                                                        } in  Unit# [sat_sbooo];
                                                                  };
                                                            };
                                                  } in 
                                                    case
                                                        GHC.IO.Handle.Internals.$wwithHandle'
                                                            lvl7_rbnWP
                                                            wild_sbomu
                                                            dt2_sbonD
                                                            sat_sboop
                                                            GHC.Prim.void#
                                                    of
                                                    { Unit# ipv5_sboos [Occ=Once] ->
                                                          let {
                                                            sat_sboot [Occ=Once]
                                                              :: (GHC.IO.Handle.Types.Handle__,
                                                                  GHC.IO.Handle.Types.Handle)
                                                            [LclId] =
                                                                CCCS (,)! [wild2_sbonI ipv5_sboos];
                                                          } in  Unit# [sat_sboot];
                                                    };
                                            };
                                      };
                            } in 
                              case
                                  GHC.IO.Handle.Internals.$wwithHandle'
                                      lvl23_rbnX5 wild_sbomu dt_sbon2 sat_sboou GHC.Prim.void#
                              of
                              { Unit# ipv3_sboox [Occ=Once!] ->
                                    case ipv3_sboox of {
                                      GHC.IO.Handle.Types.FileHandle _ [Occ=Dead]
                                                                     dt3_sbooA [Occ=Once] ->
                                          let {
                                            sat_sbooB [Occ=Once] :: GHC.IO.Handle.Types.Handle
                                            [LclId] =
                                                CCCS GHC.IO.Handle.Types.DuplexHandle! [path_sbon1
                                                                                        dt3_sbooA
                                                                                        dt2_sbonD];
                                          } in  Unit# [sat_sbooB];
                                      GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                          lvl25_rbnX7 GHC.Prim.void#;
                                    };
                              };
                        GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                         _ [Occ=Dead]
                                                         _ [Occ=Dead] ->
                            lvl27_rbnX9 GHC.Prim.void#;
                      };
                };
        };

GHC.IO.Handle.hDuplicate
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.hDuplicate1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.hGetEcho4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hGetEcho"#;

GHC.IO.Handle.hGetEcho3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hGetEcho4;

GHC.IO.Handle.hGetEcho2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool) #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h__sbooI void_0E]
        case h__sbooI of wild_sbooK {
          GHC.IO.Handle.Types.Handle__ $dIODevice_sbooL [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds_sbooO [Occ=Once]
                                       ds1_sbooP [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds1_sbooP of {
                __DEFAULT ->
                    case
                        GHC.IO.Device.getEcho $dIODevice_sbooL ds_sbooO GHC.Prim.void#
                    of
                    { Unit# ipv1_sbop4 [Occ=Once] ->
                          let {
                            sat_sbop5 [Occ=Once]
                              :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                            [LclId] =
                                CCCS (,)! [wild_sbooK ipv1_sbop4];
                          } in  Unit# [sat_sbop5];
                    };
                GHC.IO.Handle.Types.ClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_closedHandle1 GHC.Prim.void#;
              };
        };

GHC.IO.Handle.hGetEcho1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbop7 void_0E]
        case GHC.IO.Handle.hGetEcho5 handle_sbop7 GHC.Prim.void# of {
          Unit# ipv1_sbopb [Occ=Once!] ->
              case ipv1_sbopb of {
                GHC.Types.False -> Unit# [GHC.Types.False];
                GHC.Types.True ->
                    case handle_sbop7 of wild1_sbopd {
                      GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbopf ->
                          case getMaskingState# [GHC.Prim.void#] of {
                            Unit# ipv3_sbopi [Occ=Once!] ->
                                let {
                                  io_sbopj [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                                  [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                      [wild1_sbopd dt_sbopf] \r [void_0E]
                                          case
                                              GHC.IO.Handle.Internals.$wdo_operation
                                                  GHC.IO.Handle.hGetEcho3
                                                  wild1_sbopd
                                                  GHC.IO.Handle.hGetEcho2
                                                  dt_sbopf
                                                  GHC.Prim.void#
                                          of
                                          { Unit# ipv5_sbopn [Occ=Once!] ->
                                                case ipv5_sbopn of {
                                                  (,) h'_sbopp [Occ=Once] v_sbopq [Occ=Once] ->
                                                      case
                                                          putMVar# [dt_sbopf
                                                                    h'_sbopp
                                                                    GHC.Prim.void#]
                                                      of
                                                      s2#_sbopr
                                                      { (##) -> Unit# [v_sbopq];
                                                      };
                                                };
                                          };
                                } in 
                                  case ipv3_sbopi of {
                                    __DEFAULT -> io_sbopj GHC.Prim.void#;
                                    0# -> maskAsyncExceptions# [io_sbopj GHC.Prim.void#];
                                  };
                          };
                      GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                       dt_sbopu
                                                       _ [Occ=Dead] ->
                          case getMaskingState# [GHC.Prim.void#] of {
                            Unit# ipv3_sbopy [Occ=Once!] ->
                                let {
                                  io_sbopz [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                                  [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                      [wild1_sbopd dt_sbopu] \r [void_0E]
                                          case
                                              GHC.IO.Handle.Internals.$wdo_operation
                                                  GHC.IO.Handle.hGetEcho3
                                                  wild1_sbopd
                                                  GHC.IO.Handle.hGetEcho2
                                                  dt_sbopu
                                                  GHC.Prim.void#
                                          of
                                          { Unit# ipv5_sbopD [Occ=Once!] ->
                                                case ipv5_sbopD of {
                                                  (,) h'_sbopF [Occ=Once] v_sbopG [Occ=Once] ->
                                                      case
                                                          putMVar# [dt_sbopu
                                                                    h'_sbopF
                                                                    GHC.Prim.void#]
                                                      of
                                                      s2#_sbopH
                                                      { (##) -> Unit# [v_sbopG];
                                                      };
                                                };
                                          };
                                } in 
                                  case ipv3_sbopy of {
                                    __DEFAULT -> io_sbopz GHC.Prim.void#;
                                    0# -> maskAsyncExceptions# [io_sbopz GHC.Prim.void#];
                                  };
                          };
                    };
              };
        };

GHC.IO.Handle.hGetEcho
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.hGetEcho1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.hSetEcho3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hSetEcho"#;

GHC.IO.Handle.hSetEcho2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hSetEcho3;

GHC.IO.Handle.hSetEcho1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Types.Bool
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbopJ on_sbopK void_0E]
        case GHC.IO.Handle.hGetEcho5 handle_sbopJ GHC.Prim.void# of {
          Unit# ipv1_sbopO [Occ=Once!] ->
              case ipv1_sbopO of {
                GHC.Types.False -> Unit# [GHC.Tuple.()];
                GHC.Types.True ->
                    case handle_sbopJ of wild1_sbopQ {
                      GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbopS ->
                          case getMaskingState# [GHC.Prim.void#] of {
                            Unit# ipv3_sbopV [Occ=Once!] ->
                                let {
                                  io_sbopW [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                  [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                      [on_sbopK wild1_sbopQ dt_sbopS] \r [void_0E]
                                          let {
                                            sat_sboqn [Occ=Once]
                                              :: GHC.IO.Handle.Types.Handle__
                                                 -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, ())
                                            [LclId] =
                                                [on_sbopK] \r [h__sbopY void_0E]
                                                    case h__sbopY of wild2_sboq0 {
                                                      GHC.IO.Handle.Types.Handle__ $dIODevice_sboq1 [Occ=Once]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   ds3_sboq4 [Occ=Once]
                                                                                   ds4_sboq5 [Occ=Once!]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead] ->
                                                          case ds4_sboq5 of {
                                                            __DEFAULT ->
                                                                case
                                                                    GHC.IO.Device.setEcho
                                                                        $dIODevice_sboq1
                                                                        ds3_sboq4
                                                                        on_sbopK
                                                                        GHC.Prim.void#
                                                                of
                                                                { Unit# ipv5_sboqk [Occ=Once] ->
                                                                      let {
                                                                        sat_sboql [Occ=Once]
                                                                          :: (GHC.IO.Handle.Types.Handle__,
                                                                              ())
                                                                        [LclId] =
                                                                            CCCS (,)! [wild2_sboq0
                                                                                       ipv5_sboqk];
                                                                      } in  Unit# [sat_sboql];
                                                                };
                                                            GHC.IO.Handle.Types.ClosedHandle ->
                                                                GHC.IO.Handle.Internals.ioe_closedHandle1
                                                                    GHC.Prim.void#;
                                                          };
                                                    };
                                          } in 
                                            case
                                                GHC.IO.Handle.Internals.$wdo_operation
                                                    GHC.IO.Handle.hSetEcho2
                                                    wild1_sbopQ
                                                    sat_sboqn
                                                    dt_sbopS
                                                    GHC.Prim.void#
                                            of
                                            { Unit# ipv5_sboqq [Occ=Once!] ->
                                                  case ipv5_sboqq of {
                                                    (,) h'_sboqs [Occ=Once] v_sboqt [Occ=Once] ->
                                                        case
                                                            putMVar# [dt_sbopS
                                                                      h'_sboqs
                                                                      GHC.Prim.void#]
                                                        of
                                                        s2#_sboqu
                                                        { (##) -> Unit# [v_sboqt];
                                                        };
                                                  };
                                            };
                                } in 
                                  case ipv3_sbopV of {
                                    __DEFAULT -> io_sbopW GHC.Prim.void#;
                                    0# -> maskAsyncExceptions# [io_sbopW GHC.Prim.void#];
                                  };
                          };
                      GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                       dt_sboqx
                                                       _ [Occ=Dead] ->
                          case getMaskingState# [GHC.Prim.void#] of {
                            Unit# ipv3_sboqB [Occ=Once!] ->
                                let {
                                  io_sboqC [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                  [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                      [on_sbopK wild1_sbopQ dt_sboqx] \r [void_0E]
                                          let {
                                            sat_sbor3 [Occ=Once]
                                              :: GHC.IO.Handle.Types.Handle__
                                                 -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, ())
                                            [LclId] =
                                                [on_sbopK] \r [h__sboqE void_0E]
                                                    case h__sboqE of wild2_sboqG {
                                                      GHC.IO.Handle.Types.Handle__ $dIODevice_sboqH [Occ=Once]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   ds3_sboqK [Occ=Once]
                                                                                   ds4_sboqL [Occ=Once!]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead] ->
                                                          case ds4_sboqL of {
                                                            __DEFAULT ->
                                                                case
                                                                    GHC.IO.Device.setEcho
                                                                        $dIODevice_sboqH
                                                                        ds3_sboqK
                                                                        on_sbopK
                                                                        GHC.Prim.void#
                                                                of
                                                                { Unit# ipv5_sbor0 [Occ=Once] ->
                                                                      let {
                                                                        sat_sbor1 [Occ=Once]
                                                                          :: (GHC.IO.Handle.Types.Handle__,
                                                                              ())
                                                                        [LclId] =
                                                                            CCCS (,)! [wild2_sboqG
                                                                                       ipv5_sbor0];
                                                                      } in  Unit# [sat_sbor1];
                                                                };
                                                            GHC.IO.Handle.Types.ClosedHandle ->
                                                                GHC.IO.Handle.Internals.ioe_closedHandle1
                                                                    GHC.Prim.void#;
                                                          };
                                                    };
                                          } in 
                                            case
                                                GHC.IO.Handle.Internals.$wdo_operation
                                                    GHC.IO.Handle.hSetEcho2
                                                    wild1_sbopQ
                                                    sat_sbor3
                                                    dt_sboqx
                                                    GHC.Prim.void#
                                            of
                                            { Unit# ipv5_sbor6 [Occ=Once!] ->
                                                  case ipv5_sbor6 of {
                                                    (,) h'_sbor8 [Occ=Once] v_sbor9 [Occ=Once] ->
                                                        case
                                                            putMVar# [dt_sboqx
                                                                      h'_sbor8
                                                                      GHC.Prim.void#]
                                                        of
                                                        s2#_sbora
                                                        { (##) -> Unit# [v_sbor9];
                                                        };
                                                  };
                                            };
                                } in 
                                  case ipv3_sboqB of {
                                    __DEFAULT -> io_sboqC GHC.Prim.void#;
                                    0# -> maskAsyncExceptions# [io_sboqC GHC.Prim.void#];
                                  };
                          };
                    };
              };
        };

GHC.IO.Handle.hSetEcho
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.Bool -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.hSetEcho1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.hGetBuffering3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hGetBuffering"#;

GHC.IO.Handle.hGetBuffering_fun :: GHC.Base.String
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hGetBuffering3;

GHC.IO.Handle.hGetBuffering2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, GHC.IO.Handle.Types.BufferMode) #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h__sborc void_0E]
        case h__sborc of wild_sbore {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds2_sborj [Occ=Once!]
                                       _ [Occ=Dead]
                                       ds3_sborl [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds2_sborj of {
                __DEFAULT ->
                    let {
                      sat_sborw [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__, GHC.IO.Handle.Types.BufferMode)
                      [LclId] =
                          CCCS (,)! [wild_sbore ds3_sborl];
                    } in  Unit# [sat_sborw];
                GHC.IO.Handle.Types.ClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_closedHandle1 GHC.Prim.void#;
              };
        };

GHC.IO.Handle.hGetBuffering1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.BufferMode #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbory void_0E]
        case handle_sbory of wild_sborA {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sborC ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sborF [Occ=Once!] ->
                    let {
                      io_sborG [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 GHC.IO.Handle.Types.BufferMode #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sborA dt_sborC] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hGetBuffering_fun
                                      wild_sborA
                                      GHC.IO.Handle.hGetBuffering2
                                      dt_sborC
                                      GHC.Prim.void#
                              of
                              { Unit# ipv3_sborK [Occ=Once!] ->
                                    case ipv3_sborK of {
                                      (,) h'_sborM [Occ=Once] v_sborN [Occ=Once] ->
                                          case
                                              putMVar# [dt_sborC h'_sborM GHC.Prim.void#]
                                          of
                                          s2#_sborO
                                          { (##) -> Unit# [v_sborN];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sborF of {
                        __DEFAULT -> io_sborG GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sborG GHC.Prim.void#];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sborR
                                           _ [Occ=Dead] ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sborV [Occ=Once!] ->
                    let {
                      io_sborW [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 GHC.IO.Handle.Types.BufferMode #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sborA dt_sborR] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hGetBuffering_fun
                                      wild_sborA
                                      GHC.IO.Handle.hGetBuffering2
                                      dt_sborR
                                      GHC.Prim.void#
                              of
                              { Unit# ipv3_sbos0 [Occ=Once!] ->
                                    case ipv3_sbos0 of {
                                      (,) h'_sbos2 [Occ=Once] v_sbos3 [Occ=Once] ->
                                          case
                                              putMVar# [dt_sborR h'_sbos2 GHC.Prim.void#]
                                          of
                                          s2#_sbos4
                                          { (##) -> Unit# [v_sbos3];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sborV of {
                        __DEFAULT -> io_sborW GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sborW GHC.Prim.void#];
                      };
              };
        };

GHC.IO.Handle.hGetBuffering
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Types.IO GHC.IO.Handle.Types.BufferMode
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.hGetBuffering1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.hIsWritable4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hIsWritable"#;

GHC.IO.Handle.hIsWritable3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hIsWritable4;

GHC.IO.Handle.hIsWritable2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool) #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h__sbos6 void_0E]
        case h__sbos6 of wild_sbos8 {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds2_sbosd [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds2_sbosd of wild1_sbosp {
                __DEFAULT ->
                    let {
                      sat_sbosr [Occ=Once] :: GHC.Types.Bool
                      [LclId] =
                          [wild1_sbosp] \u []
                              case wild1_sbosp of {
                                GHC.IO.Handle.Types.ReadHandle -> GHC.Types.False [];
                                GHC.IO.Handle.Types.WriteHandle -> GHC.Types.True [];
                                GHC.IO.Handle.Types.AppendHandle -> GHC.Types.True [];
                                GHC.IO.Handle.Types.ReadWriteHandle -> GHC.Types.True [];
                              }; } in
                    let {
                      sat_sboss [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                      [LclId] =
                          CCCS (,)! [wild_sbos8 sat_sbosr];
                    } in  Unit# [sat_sboss];
                GHC.IO.Handle.Types.ClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_closedHandle1 GHC.Prim.void#;
                GHC.IO.Handle.Types.SemiClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_semiclosedHandle1 GHC.Prim.void#;
              };
        };

GHC.IO.Handle.hIsWritable1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [ds_sbosv void_0E]
        case ds_sbosv of wild_sbosx {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] ipv1_sbosz ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv3_sbosC [Occ=Once!] ->
                    let {
                      io_sbosD [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbosx ipv1_sbosz] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hIsWritable3
                                      wild_sbosx
                                      GHC.IO.Handle.hIsWritable2
                                      ipv1_sbosz
                                      GHC.Prim.void#
                              of
                              { Unit# ipv5_sbosH [Occ=Once!] ->
                                    case ipv5_sbosH of {
                                      (,) h'_sbosJ [Occ=Once] v_sbosK [Occ=Once] ->
                                          case
                                              putMVar# [ipv1_sbosz h'_sbosJ GHC.Prim.void#]
                                          of
                                          s2#_sbosL
                                          { (##) -> Unit# [v_sbosK];
                                          };
                                    };
                              };
                    } in 
                      case ipv3_sbosC of {
                        __DEFAULT -> io_sbosD GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sbosD GHC.Prim.void#];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              Unit# [GHC.Types.True];
        };

GHC.IO.Handle.hIsWritable
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.hIsWritable1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.hIsReadable4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hIsReadable"#;

GHC.IO.Handle.hIsReadable3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hIsReadable4;

GHC.IO.Handle.hIsReadable2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool) #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h__sbosQ void_0E]
        case h__sbosQ of wild_sbosS {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds2_sbosX [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds2_sbosX of wild1_sbot9 {
                __DEFAULT ->
                    let {
                      sat_sbotb [Occ=Once] :: GHC.Types.Bool
                      [LclId] =
                          [wild1_sbot9] \u []
                              case wild1_sbot9 of {
                                __DEFAULT -> GHC.Types.False [];
                                GHC.IO.Handle.Types.ReadHandle -> GHC.Types.True [];
                                GHC.IO.Handle.Types.ReadWriteHandle -> GHC.Types.True [];
                              }; } in
                    let {
                      sat_sbotc [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                      [LclId] =
                          CCCS (,)! [wild_sbosS sat_sbotb];
                    } in  Unit# [sat_sbotc];
                GHC.IO.Handle.Types.ClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_closedHandle1 GHC.Prim.void#;
                GHC.IO.Handle.Types.SemiClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_semiclosedHandle1 GHC.Prim.void#;
              };
        };

GHC.IO.Handle.hIsReadable1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [ds_sbotf void_0E]
        case ds_sbotf of wild_sboth {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] ipv1_sbotj ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv3_sbotm [Occ=Once!] ->
                    let {
                      io_sbotn [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sboth ipv1_sbotj] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hIsReadable3
                                      wild_sboth
                                      GHC.IO.Handle.hIsReadable2
                                      ipv1_sbotj
                                      GHC.Prim.void#
                              of
                              { Unit# ipv5_sbotr [Occ=Once!] ->
                                    case ipv5_sbotr of {
                                      (,) h'_sbott [Occ=Once] v_sbotu [Occ=Once] ->
                                          case
                                              putMVar# [ipv1_sbotj h'_sbott GHC.Prim.void#]
                                          of
                                          s2#_sbotv
                                          { (##) -> Unit# [v_sbotu];
                                          };
                                    };
                              };
                    } in 
                      case ipv3_sbotm of {
                        __DEFAULT -> io_sbotn GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sbotn GHC.Prim.void#];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              Unit# [GHC.Types.True];
        };

GHC.IO.Handle.hIsReadable
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.hIsReadable1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.hIsClosed4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hIsClosed"#;

GHC.IO.Handle.hIsClosed3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hIsClosed4;

GHC.IO.Handle.hIsClosed2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool) #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [h__sbotA void_0E]
        case h__sbotA of wild_sbotC {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds2_sbotH [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds2_sbotH of {
                __DEFAULT ->
                    let {
                      sat_sbotU [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                      [LclId] =
                          CCCS (,)! [wild_sbotC GHC.Types.False];
                    } in  Unit# [sat_sbotU];
                GHC.IO.Handle.Types.ClosedHandle ->
                    let {
                      sat_sbotV [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                      [LclId] =
                          CCCS (,)! [wild_sbotC GHC.Types.True];
                    } in  Unit# [sat_sbotV];
              };
        };

GHC.IO.Handle.hIsClosed1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbotW void_0E]
        case handle_sbotW of wild_sbotY {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbou0 ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sbou3 [Occ=Once!] ->
                    let {
                      io_sbou4 [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbotY dt_sbou0] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hIsClosed3
                                      wild_sbotY
                                      GHC.IO.Handle.hIsClosed2
                                      dt_sbou0
                                      GHC.Prim.void#
                              of
                              { Unit# ipv3_sbou8 [Occ=Once!] ->
                                    case ipv3_sbou8 of {
                                      (,) h'_sboua [Occ=Once] v_sboub [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbou0 h'_sboua GHC.Prim.void#]
                                          of
                                          s2#_sbouc
                                          { (##) -> Unit# [v_sboub];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbou3 of {
                        __DEFAULT -> io_sbou4 GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sbou4 GHC.Prim.void#];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sbouf
                                           _ [Occ=Dead] ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sbouj [Occ=Once!] ->
                    let {
                      io_sbouk [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbotY dt_sbouf] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hIsClosed3
                                      wild_sbotY
                                      GHC.IO.Handle.hIsClosed2
                                      dt_sbouf
                                      GHC.Prim.void#
                              of
                              { Unit# ipv3_sbouo [Occ=Once!] ->
                                    case ipv3_sbouo of {
                                      (,) h'_sbouq [Occ=Once] v_sbour [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbouf h'_sbouq GHC.Prim.void#]
                                          of
                                          s2#_sbous
                                          { (##) -> Unit# [v_sbour];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbouj of {
                        __DEFAULT -> io_sbouk GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sbouk GHC.Prim.void#];
                      };
              };
        };

GHC.IO.Handle.hIsClosed
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.hIsClosed1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.hIsOpen4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hIsOpen"#;

GHC.IO.Handle.hIsOpen3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hIsOpen4;

GHC.IO.Handle.hIsOpen2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool) #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [h__sbouu void_0E]
        case h__sbouu of wild_sbouw {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds2_sbouB [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds2_sbouB of {
                __DEFAULT ->
                    let {
                      sat_sbouO [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                      [LclId] =
                          CCCS (,)! [wild_sbouw GHC.Types.True];
                    } in  Unit# [sat_sbouO];
                GHC.IO.Handle.Types.ClosedHandle ->
                    let {
                      sat_sbouP [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                      [LclId] =
                          CCCS (,)! [wild_sbouw GHC.Types.False];
                    } in  Unit# [sat_sbouP];
                GHC.IO.Handle.Types.SemiClosedHandle ->
                    let {
                      sat_sbouQ [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                      [LclId] =
                          CCCS (,)! [wild_sbouw GHC.Types.False];
                    } in  Unit# [sat_sbouQ];
              };
        };

GHC.IO.Handle.hIsOpen1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbouR void_0E]
        case handle_sbouR of wild_sbouT {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbouV ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sbouY [Occ=Once!] ->
                    let {
                      io_sbouZ [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbouT dt_sbouV] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hIsOpen3
                                      wild_sbouT
                                      GHC.IO.Handle.hIsOpen2
                                      dt_sbouV
                                      GHC.Prim.void#
                              of
                              { Unit# ipv3_sbov3 [Occ=Once!] ->
                                    case ipv3_sbov3 of {
                                      (,) h'_sbov5 [Occ=Once] v_sbov6 [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbouV h'_sbov5 GHC.Prim.void#]
                                          of
                                          s2#_sbov7
                                          { (##) -> Unit# [v_sbov6];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbouY of {
                        __DEFAULT -> io_sbouZ GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sbouZ GHC.Prim.void#];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sbova
                                           _ [Occ=Dead] ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sbove [Occ=Once!] ->
                    let {
                      io_sbovf [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbouT dt_sbova] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hIsOpen3
                                      wild_sbouT
                                      GHC.IO.Handle.hIsOpen2
                                      dt_sbova
                                      GHC.Prim.void#
                              of
                              { Unit# ipv3_sbovj [Occ=Once!] ->
                                    case ipv3_sbovj of {
                                      (,) h'_sbovl [Occ=Once] v_sbovm [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbova h'_sbovl GHC.Prim.void#]
                                          of
                                          s2#_sbovn
                                          { (##) -> Unit# [v_sbovm];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbove of {
                        __DEFAULT -> io_sbovf GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sbovf GHC.Prim.void#];
                      };
              };
        };

GHC.IO.Handle.hIsOpen
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.hIsOpen1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.hGetPosn1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.HandlePosn #)
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbovp void_0E]
        case
            GHC.IO.Handle.Internals.wantSeekableHandle1
                GHC.IO.Handle.hGetPosn3
                handle_sbovp
                GHC.IO.Handle.hGetPosn2
                GHC.Prim.void#
        of
        { Unit# ipv1_sbovt [Occ=Once] ->
              let {
                sat_sbovu [Occ=Once] :: GHC.IO.Handle.HandlePosn
                [LclId] =
                    CCCS GHC.IO.Handle.HandlePosn! [handle_sbovp ipv1_sbovt];
              } in  Unit# [sat_sbovu];
        };

GHC.IO.Handle.hGetPosn
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Types.IO GHC.IO.Handle.HandlePosn
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.hGetPosn1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.hClose3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hClose"#;

GHC.IO.Handle.hClose2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hClose3;

GHC.IO.Handle.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Exception.IOErrorType
     -> GHC.Base.String
     -> GHC.Base.Maybe Foreign.C.Types.CInt
     -> GHC.Base.Maybe GHC.IO.FilePath
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=6,
 Str=<B,U><B,U><B,U><B,U><B,1*U><B,U>x,
 Unf=OtherCon []] =
    [] \r [w_sbovv ww_sbovw ww1_sbovx ww2_sbovy ww3_sbovz void_0E]
        let {
          sat_sbovM [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [w_sbovv ww_sbovw ww1_sbovx ww2_sbovy ww3_sbovz] \u []
                  let {
                    sat_sbovK [Occ=Once] :: GHC.Base.Maybe GHC.IO.FilePath
                    [LclId] =
                        [w_sbovv ww3_sbovz] \u []
                            case ww3_sbovz of wild1_sbovC {
                              GHC.Base.Nothing ->
                                  case w_sbovv of {
                                    GHC.IO.Handle.Types.FileHandle path_sbovE [Occ=Once]
                                                                   _ [Occ=Dead] ->
                                        GHC.Base.Just [path_sbovE];
                                    GHC.IO.Handle.Types.DuplexHandle path_sbovG [Occ=Once]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead] ->
                                        GHC.Base.Just [path_sbovG];
                                  };
                              GHC.Base.Just _ [Occ=Dead] -> wild1_sbovC;
                            }; } in
                  let {
                    sat_sbovB [Occ=Once] :: GHC.Base.Maybe GHC.IO.Handle.Types.Handle
                    [LclId] =
                        CCCS GHC.Base.Just! [w_sbovv]; } in
                  let {
                    sat_sbovL [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        CCCS GHC.IO.Exception.IOError! [sat_sbovB
                                                        ww_sbovw
                                                        GHC.IO.Handle.hClose2
                                                        ww1_sbovx
                                                        ww2_sbovy
                                                        sat_sbovK];
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sbovL;
        } in  raiseIO# [sat_sbovM GHC.Prim.void#];

GHC.IO.Handle.hClose1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h_sbovN void_0E]
        case h_sbovN of wild_sbovP {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbovR [Occ=Once] ->
              case
                  GHC.IO.Handle.Internals.$wwithHandle'
                      GHC.IO.Handle.hClose2
                      wild_sbovP
                      dt_sbovR
                      GHC.IO.Handle.Internals.hClose_help1
                      GHC.Prim.void#
              of
              { Unit# ipv1_sbovU [Occ=Once!] ->
                    case ipv1_sbovU of {
                      GHC.Base.Nothing -> Unit# [GHC.Tuple.()];
                      GHC.Base.Just e_sbovW [Occ=Once!] ->
                          case e_sbovW of wild2_sbovX {
                            GHC.Exception.SomeException $dException1_sbovY [Occ=Once]
                                                        e2_sbovZ [Occ=Once] ->
                                case GHC.Exception.$p1Exception $dException1_sbovY of sat_sbow0 {
                                  __DEFAULT ->
                                      case
                                          Data.Typeable.Internal.sameTypeRep
                                              sat_sbow0 GHC.IO.Exception.$fExceptionIOException4
                                      of
                                      { GHC.Types.False -> raiseIO# [wild2_sbovX GHC.Prim.void#];
                                        GHC.Types.True ->
                                            case e2_sbovZ of {
                                              GHC.IO.Exception.IOError _ [Occ=Dead]
                                                                       ww2_sbow4 [Occ=Once]
                                                                       _ [Occ=Dead]
                                                                       ww4_sbow6 [Occ=Once]
                                                                       ww5_sbow7 [Occ=Once]
                                                                       ww6_sbow8 [Occ=Once] ->
                                                  GHC.IO.Handle.$wlvl
                                                      wild_sbovP
                                                      ww2_sbow4
                                                      ww4_sbow6
                                                      ww5_sbow7
                                                      ww6_sbow8
                                                      GHC.Prim.void#;
                                            };
                                      };
                                };
                          };
                    };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sbowa [Occ=Once]
                                           dt1_sbowb [Occ=Once] ->
              case
                  GHC.IO.Handle.Internals.$wwithHandle'
                      GHC.IO.Handle.hClose2
                      wild_sbovP
                      dt_sbowa
                      GHC.IO.Handle.Internals.hClose_help1
                      GHC.Prim.void#
              of
              { Unit# ipv1_sbowe [Occ=Once] ->
                    case
                        GHC.IO.Handle.Internals.$wwithHandle'
                            GHC.IO.Handle.hClose2
                            wild_sbovP
                            dt1_sbowb
                            GHC.IO.Handle.Internals.hClose_help1
                            GHC.Prim.void#
                    of
                    { Unit# ipv3_sbowh [Occ=Once] ->
                          let {
                            sat_sbowi [Occ=Once]
                              :: [GHC.Base.Maybe GHC.Exception.SomeException]
                            [LclId] =
                                CCCS :! [ipv3_sbowh GHC.Types.[]]; } in
                          let {
                            sat_sbowj [Occ=Once]
                              :: [GHC.Base.Maybe GHC.Exception.SomeException]
                            [LclId] =
                                CCCS :! [ipv1_sbowe sat_sbowi];
                          } in 
                            case Data.Maybe.catMaybes1 sat_sbowj of {
                              [] -> Unit# [GHC.Tuple.()];
                              : y_sbowl [Occ=Once!] _ [Occ=Dead] ->
                                  case y_sbowl of wild2_sbown {
                                    GHC.Exception.SomeException $dException1_sbowo [Occ=Once]
                                                                e2_sbowp [Occ=Once] ->
                                        case
                                            GHC.Exception.$p1Exception $dException1_sbowo
                                        of
                                        sat_sbowq
                                        { __DEFAULT ->
                                              case
                                                  Data.Typeable.Internal.sameTypeRep
                                                      sat_sbowq
                                                      GHC.IO.Exception.$fExceptionIOException4
                                              of
                                              { GHC.Types.False ->
                                                    raiseIO# [wild2_sbown GHC.Prim.void#];
                                                GHC.Types.True ->
                                                    case e2_sbowp of {
                                                      GHC.IO.Exception.IOError _ [Occ=Dead]
                                                                               ww2_sbowu [Occ=Once]
                                                                               _ [Occ=Dead]
                                                                               ww4_sboww [Occ=Once]
                                                                               ww5_sbowx [Occ=Once]
                                                                               ww6_sbowy [Occ=Once] ->
                                                          GHC.IO.Handle.$wlvl
                                                              wild_sbovP
                                                              ww2_sbowu
                                                              ww4_sboww
                                                              ww5_sbowx
                                                              ww6_sbowy
                                                              GHC.Prim.void#;
                                                    };
                                              };
                                        };
                                  };
                            };
                    };
              };
        };

GHC.IO.Handle.hClose
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO ()
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] GHC.IO.Handle.hClose1 eta_B2 GHC.Prim.void#;

lvl28_rbnXa :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['{'#];

lvl29_rbnXb :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! [','#];

lvl30_rbnXc :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "duplex (read-write)"#;

lvl31_rbnXd :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl30_rbnXc;

lvl32_rbnXe :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "none"#;

lvl33_rbnXf :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl32_rbnXe;

lvl34_rbnXg :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "line"#;

lvl35_rbnXh :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl34_rbnXg;

lvl36_rbnXi :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "showHandle"#;

lvl37_rbnXj :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl36_rbnXi;

lvl38_rbnXk :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "loc="#;

lvl39_rbnXl :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "type="#;

lvl40_rbnXm :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "buffering="#;

lvl41_rbnXn :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "}"#;

lvl42_rbnXo :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl41_rbnXn;

lvl43_rbnXp :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.Base.++ lvl33_rbnXf lvl42_rbnXo;

lvl44_rbnXq :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.Base.++ lvl35_rbnXh lvl42_rbnXo;

lvl45_rbnXr :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "block "#;

lvl46_rbnXs :: [GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.$fShow(,)2 lvl42_rbnXo];

lvl47_rbnXt :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.Base.++ GHC.IO.Handle.Types.$fShowHandleType11 lvl42_rbnXo;

GHC.IO.Handle.hShow2
  :: GHC.Base.String
     -> GHC.Types.Bool
     -> GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
[GblId, Arity=4, Str=<L,U><L,U><S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [filepath_sbowz is_duplex_sbowA h_sbowB void_0E]
        let {
          act_sbowD [Occ=OnceL*!, Dmd=<L,C(C1(U(U,U)))>]
            :: GHC.IO.Handle.Types.Handle__
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
          [LclId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
              sat-only [filepath_sbowz is_duplex_sbowA] \r [hdl__sbowE void_0E]
                  let {
                    sat_sboxD [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [filepath_sbowz is_duplex_sbowA hdl__sbowE] \u []
                            case hdl__sbowE of {
                              GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           ds2_sbowL [Occ=Once!]
                                                           _ [Occ=Dead]
                                                           ds3_sbowN [Occ=Once!]
                                                           _ [Occ=Dead]
                                                           dt2_sbowP [Occ=Once]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead] ->
                                  case ds2_sbowL of wild1_sbowX {
                                    __DEFAULT ->
                                        let {
                                          sat_sboxC [Occ=Once] :: [GHC.Types.Char]
                                          [LclId] =
                                              [filepath_sbowz
                                               is_duplex_sbowA
                                               ds3_sbowN
                                               dt2_sbowP
                                               wild1_sbowX] \u []
                                                  let {
                                                    sat_sboxA [Occ=Once] :: [GHC.Types.Char]
                                                    [LclId] =
                                                        [is_duplex_sbowA
                                                         ds3_sbowN
                                                         dt2_sbowP
                                                         wild1_sbowX] \u []
                                                            let {
                                                              sat_sboxz [Occ=Once]
                                                                :: [GHC.Types.Char]
                                                              [LclId] =
                                                                  [is_duplex_sbowA
                                                                   ds3_sbowN
                                                                   dt2_sbowP
                                                                   wild1_sbowX] \u []
                                                                      let {
                                                                        karg_sbowY [Occ=Once*]
                                                                          :: [GHC.Types.Char]
                                                                        [LclId] =
                                                                            [ds3_sbowN
                                                                             dt2_sbowP] \u []
                                                                                let {
                                                                                  sat_sboxq [Occ=Once]
                                                                                    :: [GHC.Types.Char]
                                                                                  [LclId] =
                                                                                      [ds3_sbowN
                                                                                       dt2_sbowP] \u []
                                                                                          case
                                                                                              ds3_sbowN
                                                                                          of
                                                                                          { GHC.IO.Handle.Types.NoBuffering ->
                                                                                                lvl43_rbnXp;
                                                                                            GHC.IO.Handle.Types.LineBuffering ->
                                                                                                lvl44_rbnXq;
                                                                                            GHC.IO.Handle.Types.BlockBuffering ds_sbox0 [Occ=Once!] ->
                                                                                                case
                                                                                                    ds_sbox0
                                                                                                of
                                                                                                { GHC.Base.Nothing ->
                                                                                                      let {
                                                                                                        sat_sboxg [Occ=Once]
                                                                                                          :: [GHC.Types.Char]
                                                                                                        [LclId] =
                                                                                                            [dt2_sbowP] \u []
                                                                                                                case
                                                                                                                    case
                                                                                                                        noDuplicate# [GHC.Prim.realWorld#]
                                                                                                                    of
                                                                                                                    s'_sbox2
                                                                                                                    { (##) ->
                                                                                                                          readMutVar# [dt2_sbowP
                                                                                                                                       GHC.Prim.void#];
                                                                                                                    }
                                                                                                                of
                                                                                                                { Unit# ipv1_sbox5 [Occ=Once!] ->
                                                                                                                      case
                                                                                                                          ipv1_sbox5
                                                                                                                      of
                                                                                                                      { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                                                                             _ [Occ=Dead]
                                                                                                                                             _ [Occ=Dead]
                                                                                                                                             dt6_sboxa [Occ=Once]
                                                                                                                                             _ [Occ=Dead]
                                                                                                                                             _ [Occ=Dead] ->
                                                                                                                            case
                                                                                                                                GHC.Show.$wshowSignedInt
                                                                                                                                    0#
                                                                                                                                    dt6_sboxa
                                                                                                                                    lvl46_rbnXs
                                                                                                                            of
                                                                                                                            { (#,#) ww5_sboxe [Occ=Once]
                                                                                                                                    ww6_sboxf [Occ=Once] ->
                                                                                                                                  : [ww5_sboxe
                                                                                                                                     ww6_sboxf];
                                                                                                                            };
                                                                                                                      };
                                                                                                                }; } in
                                                                                                      let {
                                                                                                        sat_sboxh [Occ=Once]
                                                                                                          :: [GHC.Types.Char]
                                                                                                        [LclId] =
                                                                                                            CCCS :! [GHC.Show.$fShow(,)4
                                                                                                                     sat_sboxg];
                                                                                                      } in 
                                                                                                        GHC.CString.unpackAppendCString#
                                                                                                            lvl45_rbnXr
                                                                                                            sat_sboxh;
                                                                                                  GHC.Base.Just n_sboxi [Occ=Once!] ->
                                                                                                      let {
                                                                                                        sat_sboxo [Occ=Once]
                                                                                                          :: [GHC.Types.Char]
                                                                                                        [LclId] =
                                                                                                            [n_sboxi] \u []
                                                                                                                case
                                                                                                                    n_sboxi
                                                                                                                of
                                                                                                                { GHC.Types.I# ww3_sboxk [Occ=Once] ->
                                                                                                                      case
                                                                                                                          GHC.Show.$wshowSignedInt
                                                                                                                              0#
                                                                                                                              ww3_sboxk
                                                                                                                              lvl46_rbnXs
                                                                                                                      of
                                                                                                                      { (#,#) ww5_sboxm [Occ=Once]
                                                                                                                              ww6_sboxn [Occ=Once] ->
                                                                                                                            : [ww5_sboxm
                                                                                                                               ww6_sboxn];
                                                                                                                      };
                                                                                                                }; } in
                                                                                                      let {
                                                                                                        sat_sboxp [Occ=Once]
                                                                                                          :: [GHC.Types.Char]
                                                                                                        [LclId] =
                                                                                                            CCCS :! [GHC.Show.$fShow(,)4
                                                                                                                     sat_sboxo];
                                                                                                      } in 
                                                                                                        GHC.CString.unpackAppendCString#
                                                                                                            lvl45_rbnXr
                                                                                                            sat_sboxp;
                                                                                                };
                                                                                          };
                                                                                } in 
                                                                                  GHC.CString.unpackAppendCString#
                                                                                      lvl40_rbnXm
                                                                                      sat_sboxq;
                                                                      } in 
                                                                        case is_duplex_sbowA of {
                                                                          GHC.Types.False ->
                                                                              case wild1_sbowX of {
                                                                                GHC.IO.Handle.Types.SemiClosedHandle ->
                                                                                    let {
                                                                                      sat_sboxt [Occ=Once]
                                                                                        :: [GHC.Types.Char]
                                                                                      [LclId] =
                                                                                          CCCS :! [lvl29_rbnXb
                                                                                                   karg_sbowY];
                                                                                    } in 
                                                                                      GHC.Base.++
                                                                                          GHC.IO.Handle.Types.$fShowHandleType9
                                                                                          sat_sboxt;
                                                                                GHC.IO.Handle.Types.ReadHandle ->
                                                                                    let {
                                                                                      sat_sboxu [Occ=Once]
                                                                                        :: [GHC.Types.Char]
                                                                                      [LclId] =
                                                                                          CCCS :! [lvl29_rbnXb
                                                                                                   karg_sbowY];
                                                                                    } in 
                                                                                      GHC.Base.++
                                                                                          GHC.IO.Handle.Types.$fShowHandleType7
                                                                                          sat_sboxu;
                                                                                GHC.IO.Handle.Types.WriteHandle ->
                                                                                    let {
                                                                                      sat_sboxv [Occ=Once]
                                                                                        :: [GHC.Types.Char]
                                                                                      [LclId] =
                                                                                          CCCS :! [lvl29_rbnXb
                                                                                                   karg_sbowY];
                                                                                    } in 
                                                                                      GHC.Base.++
                                                                                          GHC.IO.Handle.Types.$fShowHandleType5
                                                                                          sat_sboxv;
                                                                                GHC.IO.Handle.Types.AppendHandle ->
                                                                                    let {
                                                                                      sat_sboxw [Occ=Once]
                                                                                        :: [GHC.Types.Char]
                                                                                      [LclId] =
                                                                                          CCCS :! [lvl29_rbnXb
                                                                                                   karg_sbowY];
                                                                                    } in 
                                                                                      GHC.Base.++
                                                                                          GHC.IO.Handle.Types.$fShowHandleType3
                                                                                          sat_sboxw;
                                                                                GHC.IO.Handle.Types.ReadWriteHandle ->
                                                                                    let {
                                                                                      sat_sboxx [Occ=Once]
                                                                                        :: [GHC.Types.Char]
                                                                                      [LclId] =
                                                                                          CCCS :! [lvl29_rbnXb
                                                                                                   karg_sbowY];
                                                                                    } in 
                                                                                      GHC.Base.++
                                                                                          GHC.IO.Handle.Types.$fShowHandleType1
                                                                                          sat_sboxx;
                                                                              };
                                                                          GHC.Types.True ->
                                                                              let {
                                                                                sat_sboxy [Occ=Once]
                                                                                  :: [GHC.Types.Char]
                                                                                [LclId] =
                                                                                    CCCS :! [lvl29_rbnXb
                                                                                             karg_sbowY];
                                                                              } in 
                                                                                GHC.Base.++
                                                                                    lvl31_rbnXd
                                                                                    sat_sboxy;
                                                                        };
                                                            } in 
                                                              GHC.CString.unpackAppendCString#
                                                                  lvl39_rbnXl sat_sboxz; } in
                                                  let {
                                                    sat_sboxB [Occ=Once] :: [GHC.Types.Char]
                                                    [LclId] =
                                                        CCCS :! [lvl29_rbnXb sat_sboxA];
                                                  } in  GHC.Base.++ filepath_sbowz sat_sboxB;
                                        } in 
                                          GHC.CString.unpackAppendCString# lvl38_rbnXk sat_sboxC;
                                    GHC.IO.Handle.Types.ClosedHandle -> lvl47_rbnXt;
                                  };
                            }; } in
                  let {
                    sat_sboxE [Occ=Once] :: GHC.Base.String
                    [LclId] =
                        CCCS :! [lvl28_rbnXa sat_sboxD];
                  } in  Unit# [sat_sboxE];
        } in 
          case h_sbowB of wild_sboxF {
            GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sboxH ->
                case getMaskingState# [GHC.Prim.void#] of {
                  Unit# ipv1_sboxK [Occ=Once!] ->
                      let {
                        io_sboxL [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                          :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
                        [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                            [act_sbowD wild_sboxF dt_sboxH] \r [void_0E]
                                let {
                                  sat_sboxT [Occ=Once]
                                    :: GHC.IO.Handle.Types.Handle__
                                       -> GHC.Types.IO
                                            (GHC.IO.Handle.Types.Handle__, GHC.Base.String)
                                  [LclId] =
                                      [act_sbowD] \r [h__sboxN void_0E]
                                          case act_sbowD h__sboxN GHC.Prim.void# of {
                                            Unit# ipv3_sboxR [Occ=Once] ->
                                                let {
                                                  sat_sboxS [Occ=Once]
                                                    :: (GHC.IO.Handle.Types.Handle__,
                                                        GHC.Base.String)
                                                  [LclId] =
                                                      CCCS (,)! [h__sboxN ipv3_sboxR];
                                                } in  Unit# [sat_sboxS];
                                          };
                                } in 
                                  case
                                      GHC.IO.Handle.Internals.$wdo_operation
                                          lvl37_rbnXj wild_sboxF sat_sboxT dt_sboxH GHC.Prim.void#
                                  of
                                  { Unit# ipv3_sboxW [Occ=Once!] ->
                                        case ipv3_sboxW of {
                                          (,) h'_sboxY [Occ=Once] v_sboxZ [Occ=Once] ->
                                              case
                                                  putMVar# [dt_sboxH h'_sboxY GHC.Prim.void#]
                                              of
                                              s2#_sboy0
                                              { (##) -> Unit# [v_sboxZ];
                                              };
                                        };
                                  };
                      } in 
                        case ipv1_sboxK of {
                          __DEFAULT -> io_sboxL GHC.Prim.void#;
                          0# -> maskAsyncExceptions# [io_sboxL GHC.Prim.void#];
                        };
                };
            GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                             dt_sboy3
                                             _ [Occ=Dead] ->
                case getMaskingState# [GHC.Prim.void#] of {
                  Unit# ipv1_sboy7 [Occ=Once!] ->
                      let {
                        io_sboy8 [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                          :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
                        [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                            [act_sbowD wild_sboxF dt_sboy3] \r [void_0E]
                                let {
                                  sat_sboyg [Occ=Once]
                                    :: GHC.IO.Handle.Types.Handle__
                                       -> GHC.Types.IO
                                            (GHC.IO.Handle.Types.Handle__, GHC.Base.String)
                                  [LclId] =
                                      [act_sbowD] \r [h__sboya void_0E]
                                          case act_sbowD h__sboya GHC.Prim.void# of {
                                            Unit# ipv3_sboye [Occ=Once] ->
                                                let {
                                                  sat_sboyf [Occ=Once]
                                                    :: (GHC.IO.Handle.Types.Handle__,
                                                        GHC.Base.String)
                                                  [LclId] =
                                                      CCCS (,)! [h__sboya ipv3_sboye];
                                                } in  Unit# [sat_sboyf];
                                          };
                                } in 
                                  case
                                      GHC.IO.Handle.Internals.$wdo_operation
                                          lvl37_rbnXj wild_sboxF sat_sboyg dt_sboy3 GHC.Prim.void#
                                  of
                                  { Unit# ipv3_sboyj [Occ=Once!] ->
                                        case ipv3_sboyj of {
                                          (,) h'_sboyl [Occ=Once] v_sboym [Occ=Once] ->
                                              case
                                                  putMVar# [dt_sboy3 h'_sboyl GHC.Prim.void#]
                                              of
                                              s2#_sboyn
                                              { (##) -> Unit# [v_sboym];
                                              };
                                        };
                                  };
                      } in 
                        case ipv1_sboy7 of {
                          __DEFAULT -> io_sboy8 GHC.Prim.void#;
                          0# -> maskAsyncExceptions# [io_sboy8 GHC.Prim.void#];
                        };
                };
          };

GHC.IO.Handle.hShow1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h_sboyp void_0E]
        case h_sboyp of wild_sboyr {
          GHC.IO.Handle.Types.FileHandle path_sboys [Occ=Once]
                                         _ [Occ=Dead] ->
              GHC.IO.Handle.hShow2
                  path_sboys GHC.Types.False wild_sboyr GHC.Prim.void#;
          GHC.IO.Handle.Types.DuplexHandle path_sboyu [Occ=Once]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              GHC.IO.Handle.hShow2
                  path_sboyu GHC.Types.True wild_sboyr GHC.Prim.void#;
        };

GHC.IO.Handle.hShow
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] GHC.IO.Handle.hShow1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.HandlePosn
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.HandlePosition -> GHC.IO.Handle.HandlePosn
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.HandlePosn [eta_B2 eta_B1];


==================== Pre unarise: ====================
2018-03-16 16:06:27.303325628 UTC

GHC.IO.Handle.$w$c== [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.HandlePosition
     -> GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.HandlePosition
     -> GHC.Types.Bool
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*U><S,1*U><L,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_sbtVU ww1_sbtVV ww2_sbtVW ww3_sbtVX]
        case GHC.Integer.Type.eqInteger# ww1_sbtVV ww3_sbtVX of {
          __DEFAULT -> GHC.Types.False [];
          1# -> GHC.IO.Handle.Types.$fEqHandle_$c== ww_sbtVU ww2_sbtVW;
        };

GHC.IO.Handle.$fEqHandlePosn_$c== [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.HandlePosn
     -> GHC.IO.Handle.HandlePosn -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(LS),1*U(1*U,1*U)><S(LS),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [w_sbtVZ w1_sbtW0]
        case w_sbtVZ of {
          GHC.IO.Handle.HandlePosn ww1_sbtW2 [Occ=Once]
                                   ww2_sbtW3 [Occ=Once] ->
              case w1_sbtW0 of {
                GHC.IO.Handle.HandlePosn ww4_sbtW5 [Occ=Once]
                                         ww5_sbtW6 [Occ=Once] ->
                    GHC.IO.Handle.$w$c== ww1_sbtW2 ww2_sbtW3 ww4_sbtW5 ww5_sbtW6;
              };
        };

GHC.IO.Handle.$fEqHandlePosn_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.IO.Handle.HandlePosn
     -> GHC.IO.Handle.HandlePosn -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(LS),1*U(1*U,1*U)><S(LS),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [eta_sbtW7 eta1_sbtW8]
        case eta_sbtW7 of {
          GHC.IO.Handle.HandlePosn h1_sbtWa [Occ=Once!]
                                   p1_sbtWb [Occ=Once] ->
              case eta1_sbtW8 of {
                GHC.IO.Handle.HandlePosn h2_sbtWd [Occ=Once*!]
                                         p2_sbtWe [Occ=Once] ->
                    case GHC.Integer.Type.eqInteger# p1_sbtWb p2_sbtWe of {
                      __DEFAULT -> GHC.Types.True [];
                      1# ->
                          case h1_sbtWa of {
                            GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbtWi [Occ=Once] ->
                                case h2_sbtWd of {
                                  GHC.IO.Handle.Types.FileHandle _ [Occ=Dead]
                                                                 dt1_sbtWl [Occ=Once] ->
                                      case sameMVar# [dt_sbtWi dt1_sbtWl] of {
                                        __DEFAULT -> GHC.Types.True [];
                                        1# -> GHC.Types.False [];
                                      };
                                  GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                                   _ [Occ=Dead]
                                                                   _ [Occ=Dead] ->
                                      GHC.Types.True [];
                                };
                            GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                             dt_sbtWr [Occ=Once]
                                                             _ [Occ=Dead] ->
                                case h2_sbtWd of {
                                  GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] _ [Occ=Dead] ->
                                      GHC.Types.True [];
                                  GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                                   dt2_sbtWx [Occ=Once]
                                                                   _ [Occ=Dead] ->
                                      case sameMVar# [dt_sbtWr dt2_sbtWx] of {
                                        __DEFAULT -> GHC.Types.True [];
                                        1# -> GHC.Types.False [];
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.$fEqHandlePosn [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.IO.Handle.HandlePosn
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.IO.Handle.$fEqHandlePosn_$c==
                                     GHC.IO.Handle.$fEqHandlePosn_$c/=];

GHC.IO.Handle.$fShowHandlePosn2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    " at position "#;

GHC.IO.Handle.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.HandlePosition
     -> GHC.Base.String
     -> GHC.Base.String
[GblId, Arity=3, Str=<S,1*U><L,U><L,U>, Unf=OtherCon []] =
    [] \r [ww_sbtWA ww1_sbtWB w_sbtWC]
        case ww_sbtWA of {
          GHC.IO.Handle.Types.FileHandle file_sbtWE [Occ=Once]
                                         _ [Occ=Dead] ->
              let {
                sat_sbtWM [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [ww1_sbtWB w_sbtWC file_sbtWE] \u []
                        let {
                          sat_sbtWL [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                          [LclId] =
                              [ww1_sbtWB w_sbtWC] \s []
                                  let {
                                    sat_sbtWK [Occ=Once] :: [GHC.Types.Char]
                                    [LclId] =
                                        [ww1_sbtWB w_sbtWC] \u []
                                            let {
                                              sat_sbtWJ [Occ=Once] :: [GHC.Types.Char]
                                              [LclId] =
                                                  [ww1_sbtWB w_sbtWC] \u []
                                                      case
                                                          GHC.Show.$w$cshowsPrec4
                                                              0# ww1_sbtWB w_sbtWC
                                                      of
                                                      { (#,#) ww3_sbtWH [Occ=Once]
                                                              ww4_sbtWI [Occ=Once] ->
                                                            : [ww3_sbtWH ww4_sbtWI];
                                                      };
                                            } in 
                                              GHC.CString.unpackAppendCString#
                                                  GHC.IO.Handle.$fShowHandlePosn2 sat_sbtWJ;
                                  } in 
                                    GHC.CString.unpackAppendCString#
                                        GHC.IO.Handle.Types.$fReadNewlineMode5 sat_sbtWK;
                        } in  GHC.Base.++ file_sbtWE sat_sbtWL;
              } in 
                GHC.CString.unpackAppendCString#
                    GHC.IO.Handle.Types.showHandle1 sat_sbtWM;
          GHC.IO.Handle.Types.DuplexHandle file_sbtWN [Occ=Once]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              let {
                sat_sbtWW [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [ww1_sbtWB w_sbtWC file_sbtWN] \u []
                        let {
                          sat_sbtWV [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                          [LclId] =
                              [ww1_sbtWB w_sbtWC] \s []
                                  let {
                                    sat_sbtWU [Occ=Once] :: [GHC.Types.Char]
                                    [LclId] =
                                        [ww1_sbtWB w_sbtWC] \u []
                                            let {
                                              sat_sbtWT [Occ=Once] :: [GHC.Types.Char]
                                              [LclId] =
                                                  [ww1_sbtWB w_sbtWC] \u []
                                                      case
                                                          GHC.Show.$w$cshowsPrec4
                                                              0# ww1_sbtWB w_sbtWC
                                                      of
                                                      { (#,#) ww3_sbtWR [Occ=Once]
                                                              ww4_sbtWS [Occ=Once] ->
                                                            : [ww3_sbtWR ww4_sbtWS];
                                                      };
                                            } in 
                                              GHC.CString.unpackAppendCString#
                                                  GHC.IO.Handle.$fShowHandlePosn2 sat_sbtWT;
                                  } in 
                                    GHC.CString.unpackAppendCString#
                                        GHC.IO.Handle.Types.$fReadNewlineMode5 sat_sbtWU;
                        } in  GHC.Base.++ file_sbtWN sat_sbtWV;
              } in 
                GHC.CString.unpackAppendCString#
                    GHC.IO.Handle.Types.showHandle1 sat_sbtWW;
        };

GHC.IO.Handle.$fShowHandlePosn_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.IO.Handle.HandlePosn -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,A><S(SL),1*U(1*U,U)><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sbtWX w1_sbtWY w2_sbtWZ]
        case w1_sbtWY of {
          GHC.IO.Handle.HandlePosn ww1_sbtX1 [Occ=Once]
                                   ww2_sbtX2 [Occ=Once] ->
              GHC.IO.Handle.$w$cshowsPrec ww1_sbtX1 ww2_sbtX2 w2_sbtWZ;
        };

GHC.IO.Handle.$fShowHandlePosn3 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.IO.Handle.$fShowHandlePosn_$cshow
  :: GHC.IO.Handle.HandlePosn -> GHC.Base.String
[GblId, Arity=1, Str=<S(SL),1*U(1*U,U)>, Unf=OtherCon []] =
    [] \r [x_sbtX3]
        case x_sbtX3 of {
          GHC.IO.Handle.HandlePosn ww1_sbtX5 [Occ=Once]
                                   ww2_sbtX6 [Occ=Once] ->
              GHC.IO.Handle.$w$cshowsPrec ww1_sbtX5 ww2_sbtX6 GHC.Types.[];
        };

GHC.IO.Handle.$fShowHandlePosn1
  :: GHC.IO.Handle.HandlePosn -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S(SL),1*U(1*U,U)><L,U>, Unf=OtherCon []] =
    [] \r [w_sbtX7 w1_sbtX8]
        case w_sbtX7 of {
          GHC.IO.Handle.HandlePosn ww1_sbtXa [Occ=Once]
                                   ww2_sbtXb [Occ=Once] ->
              GHC.IO.Handle.$w$cshowsPrec ww1_sbtXa ww2_sbtXb w1_sbtX8;
        };

GHC.IO.Handle.$fShowHandlePosn_$cshowList
  :: [GHC.IO.Handle.HandlePosn] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sbtXc s_sbtXd]
        GHC.Show.showList__
            GHC.IO.Handle.$fShowHandlePosn1 ls_sbtXc s_sbtXd;

GHC.IO.Handle.$fShowHandlePosn [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Handle.HandlePosn
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Handle.$fShowHandlePosn_$cshowsPrec
                                    GHC.IO.Handle.$fShowHandlePosn_$cshow
                                    GHC.IO.Handle.$fShowHandlePosn_$cshowList];

GHC.IO.Handle.hLookAhead3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hLookAhead"#;

GHC.IO.Handle.hLookAhead2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hLookAhead3;

GHC.IO.Handle.hLookAhead1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Char #)
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [handle_sbtXe eta_B1]
        GHC.IO.Handle.Internals.wantReadableHandle_1
            GHC.IO.Handle.hLookAhead2
            handle_sbtXe
            GHC.IO.Handle.Internals.hLookAhead_1
            eta_B1;

GHC.IO.Handle.hLookAhead
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Char
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hLookAhead1 eta_B2 eta_B1;

GHC.IO.Handle.hFlush3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hFlush"#;

GHC.IO.Handle.hFlush2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hFlush3;

GHC.IO.Handle.hFlush1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [handle_sbtXf eta_B1]
        GHC.IO.Handle.Internals.wantWritableHandle1
            GHC.IO.Handle.hFlush2
            handle_sbtXf
            GHC.IO.Handle.Internals.flushWriteBuffer1
            eta_B1;

GHC.IO.Handle.hFlush
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hFlush1 eta_B2 eta_B1;

GHC.IO.Handle.hFlushAll4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hFlushAll"#;

GHC.IO.Handle.hFlushAll3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hFlushAll4;

GHC.IO.Handle.hFlushAll2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, ()) #)
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [h__sbtXg s1_sbtXh]
        case GHC.IO.Handle.Internals.flushBuffer1 h__sbtXg s1_sbtXh of {
          (#,#) ipv_sbtXj [Occ=Once] ipv1_sbtXk [Occ=Once] ->
              let {
                sat_sbtXl [Occ=Once] :: (GHC.IO.Handle.Types.Handle__, ())
                [LclId] =
                    CCCS (,)! [h__sbtXg ipv1_sbtXk];
              } in  (#,#) [ipv_sbtXj sat_sbtXl];
        };

GHC.IO.Handle.hFlushAll1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbtXm eta_sbtXn]
        case handle_sbtXm of wild_sbtXo {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbtXq ->
              case getMaskingState# [eta_sbtXn] of {
                (#,#) ipv_sbtXs [Occ=Once*] ipv1_sbtXt [Occ=Once!] ->
                    let {
                      io_sbtXu [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbtXo dt_sbtXq] \r [s_sbtXv]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hFlushAll3
                                      wild_sbtXo
                                      GHC.IO.Handle.hFlushAll2
                                      dt_sbtXq
                                      s_sbtXv
                              of
                              { (#,#) ipv2_sbtXx [Occ=Once] ipv3_sbtXy [Occ=Once!] ->
                                    case ipv3_sbtXy of {
                                      (,) h'_sbtXA [Occ=Once] v_sbtXB [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbtXq h'_sbtXA ipv2_sbtXx]
                                          of
                                          s2#_sbtXC
                                          { __DEFAULT -> (#,#) [s2#_sbtXC v_sbtXB];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbtXt of {
                        __DEFAULT -> io_sbtXu ipv_sbtXs;
                        0# -> maskAsyncExceptions# [io_sbtXu ipv_sbtXs];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sbtXF
                                           _ [Occ=Dead] ->
              case getMaskingState# [eta_sbtXn] of {
                (#,#) ipv_sbtXI [Occ=Once*] ipv1_sbtXJ [Occ=Once!] ->
                    let {
                      io_sbtXK [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbtXo dt_sbtXF] \r [s_sbtXL]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hFlushAll3
                                      wild_sbtXo
                                      GHC.IO.Handle.hFlushAll2
                                      dt_sbtXF
                                      s_sbtXL
                              of
                              { (#,#) ipv2_sbtXN [Occ=Once] ipv3_sbtXO [Occ=Once!] ->
                                    case ipv3_sbtXO of {
                                      (,) h'_sbtXQ [Occ=Once] v_sbtXR [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbtXF h'_sbtXQ ipv2_sbtXN]
                                          of
                                          s2#_sbtXS
                                          { __DEFAULT -> (#,#) [s2#_sbtXS v_sbtXR];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbtXJ of {
                        __DEFAULT -> io_sbtXK ipv_sbtXI;
                        0# -> maskAsyncExceptions# [io_sbtXK ipv_sbtXI];
                      };
              };
        };

GHC.IO.Handle.hFlushAll
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO ()
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hFlushAll1 eta_B2 eta_B1;

GHC.IO.Handle.hGetEcho7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hIsTerminalDevice"#;

GHC.IO.Handle.hGetEcho_fun :: GHC.Base.String
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hGetEcho7;

GHC.IO.Handle.hGetEcho6
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool) #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h__sbtXU s1_sbtXV]
        case h__sbtXU of wild_sbtXW {
          GHC.IO.Handle.Types.Handle__ $dIODevice_sbtXX [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds_sbtY0 [Occ=Once]
                                       ds1_sbtY1 [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds1_sbtY1 of {
                __DEFAULT ->
                    case
                        GHC.IO.Device.isTerminal $dIODevice_sbtXX ds_sbtY0 s1_sbtXV
                    of
                    { (#,#) ipv_sbtYf [Occ=Once] ipv1_sbtYg [Occ=Once] ->
                          let {
                            sat_sbtYh [Occ=Once]
                              :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                            [LclId] =
                                CCCS (,)! [wild_sbtXW ipv1_sbtYg];
                          } in  (#,#) [ipv_sbtYf sat_sbtYh];
                    };
                GHC.IO.Handle.Types.ClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_closedHandle1 s1_sbtXV;
              };
        };

GHC.IO.Handle.hGetEcho5
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbtYj eta_sbtYk]
        case handle_sbtYj of wild_sbtYl {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbtYn ->
              case getMaskingState# [eta_sbtYk] of {
                (#,#) ipv_sbtYp [Occ=Once*] ipv1_sbtYq [Occ=Once!] ->
                    let {
                      io_sbtYr [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbtYl dt_sbtYn] \r [s_sbtYs]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hGetEcho_fun
                                      wild_sbtYl
                                      GHC.IO.Handle.hGetEcho6
                                      dt_sbtYn
                                      s_sbtYs
                              of
                              { (#,#) ipv2_sbtYu [Occ=Once] ipv3_sbtYv [Occ=Once!] ->
                                    case ipv3_sbtYv of {
                                      (,) h'_sbtYx [Occ=Once] v_sbtYy [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbtYn h'_sbtYx ipv2_sbtYu]
                                          of
                                          s2#_sbtYz
                                          { __DEFAULT -> (#,#) [s2#_sbtYz v_sbtYy];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbtYq of {
                        __DEFAULT -> io_sbtYr ipv_sbtYp;
                        0# -> maskAsyncExceptions# [io_sbtYr ipv_sbtYp];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sbtYC
                                           _ [Occ=Dead] ->
              case getMaskingState# [eta_sbtYk] of {
                (#,#) ipv_sbtYF [Occ=Once*] ipv1_sbtYG [Occ=Once!] ->
                    let {
                      io_sbtYH [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbtYl dt_sbtYC] \r [s_sbtYI]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hGetEcho_fun
                                      wild_sbtYl
                                      GHC.IO.Handle.hGetEcho6
                                      dt_sbtYC
                                      s_sbtYI
                              of
                              { (#,#) ipv2_sbtYK [Occ=Once] ipv3_sbtYL [Occ=Once!] ->
                                    case ipv3_sbtYL of {
                                      (,) h'_sbtYN [Occ=Once] v_sbtYO [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbtYC h'_sbtYN ipv2_sbtYK]
                                          of
                                          s2#_sbtYP
                                          { __DEFAULT -> (#,#) [s2#_sbtYP v_sbtYO];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbtYG of {
                        __DEFAULT -> io_sbtYH ipv_sbtYF;
                        0# -> maskAsyncExceptions# [io_sbtYH ipv_sbtYF];
                      };
              };
        };

GHC.IO.Handle.hIsTerminalDevice
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hGetEcho5 eta_B2 eta_B1;

lvl_rbnWB :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hDuplicateTo"#;

lvl1_rbnWC :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl_rbnWB;

lvl2_rbnWD :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "handles are incompatible"#;

lvl3_rbnWE :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl2_rbnWD;

ioe_dupHandlesNotCompatible_rbnWF
  :: forall a.
     GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [h_sbtYR eta_sbtYS]
        let {
          sat_sbtYV [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [h_sbtYR] \u []
                  let {
                    sat_sbtYT [Occ=Once] :: GHC.Base.Maybe GHC.IO.Handle.Types.Handle
                    [LclId] =
                        CCCS GHC.Base.Just! [h_sbtYR]; } in
                  let {
                    sat_sbtYU [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        CCCS GHC.IO.Exception.IOError! [sat_sbtYT
                                                        GHC.IO.Exception.IllegalOperation
                                                        lvl1_rbnWC
                                                        lvl3_rbnWE
                                                        GHC.Base.Nothing
                                                        GHC.Base.Nothing];
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sbtYU;
        } in  raiseIO# [sat_sbtYV eta_sbtYS];

GHC.IO.Handle.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.Handle.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.$trModule4];

GHC.IO.Handle.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Handle"#;

GHC.IO.Handle.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.$trModule2];

GHC.IO.Handle.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Handle.$trModule3
                                     GHC.IO.Handle.$trModule1];

$krep_rbnWG :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Integer.Type.$tcInteger
                                              GHC.Types.[]];

$krep1_rbnWH :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcHandle
                                              GHC.Types.[]];

GHC.IO.Handle.$tcHandlePosn2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "HandlePosn"#;

GHC.IO.Handle.$tcHandlePosn1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.$tcHandlePosn2];

GHC.IO.Handle.$tcHandlePosn :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [14603627022044816180##
                                    6047646306417636971##
                                    GHC.IO.Handle.$trModule
                                    GHC.IO.Handle.$tcHandlePosn1
                                    0#
                                    GHC.Types.krep$*];

$krep2_rbnWI :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.$tcHandlePosn
                                              GHC.Types.[]];

$krep3_rbnWJ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_rbnWG $krep2_rbnWI];

GHC.IO.Handle.$tc'HandlePosn1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_rbnWH $krep3_rbnWJ];

GHC.IO.Handle.$tc'HandlePosn3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'HandlePosn"#;

GHC.IO.Handle.$tc'HandlePosn2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.$tc'HandlePosn3];

GHC.IO.Handle.$tc'HandlePosn :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2346493220596692855##
                                    1604707260447826943##
                                    GHC.IO.Handle.$trModule
                                    GHC.IO.Handle.$tc'HandlePosn2
                                    0#
                                    GHC.IO.Handle.$tc'HandlePosn1];

dupHandle__rbnWK
  :: forall dev.
     (GHC.IO.Device.IODevice dev, GHC.IO.BufferedIO.BufferedIO dev,
      Data.Typeable.Internal.Typeable dev) =>
     dev
     -> GHC.IO.FilePath
     -> GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
     -> GHC.IO.Handle.Types.Handle__
     -> GHC.Base.Maybe GHC.IO.Handle.Internals.HandleFinalizer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId,
 Arity=9,
 Str=<L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U)><L,U><L,U><L,U><L,U><S,1*U><L,1*U><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [$dIODevice_sbtYW
                    $dBufferedIO_sbtYX
                    $dTypeable_sbtYY
                    new_dev_sbtYZ
                    filepath_sbtZ0
                    other_side_sbtZ1
                    h__sbtZ2
                    mb_finalizer_sbtZ3
                    eta_sbtZ4]
        case h__sbtZ2 of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds1_sbtZa [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds3_sbtZg [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds6_sbtZj [Occ=Once]
                                       ds7_sbtZk [Occ=Once]
                                       _ [Occ=Dead] ->
              let-no-escape {
                $j_sbtZm [Occ=Once*!T[2], Dmd=<L,1*C1(C1(U(U,U)))>]
                  :: GHC.Prim.State# GHC.Prim.RealWorld
                     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                           GHC.IO.Handle.Types.Handle #)
                [LclId[JoinId(2)], Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
                    sat-only [$dIODevice_sbtYW
                              $dBufferedIO_sbtYX
                              $dTypeable_sbtYY
                              new_dev_sbtYZ
                              filepath_sbtZ0
                              other_side_sbtZ1
                              mb_finalizer_sbtZ3
                              ds1_sbtZa
                              ds6_sbtZj
                              ds7_sbtZk] \r [ipv_sbtZn ipv1_sbtZo]
                        let {
                          sat_sbtZp [Occ=Once] :: GHC.IO.Handle.Types.NewlineMode
                          [LclId] =
                              CCCS GHC.IO.Handle.Types.NewlineMode! [ds6_sbtZj ds7_sbtZk];
                        } in 
                          GHC.IO.Handle.Internals.mkDuplexHandle5
                              $dIODevice_sbtYW
                              $dBufferedIO_sbtYX
                              $dTypeable_sbtYY
                              new_dev_sbtYZ
                              filepath_sbtZ0
                              ds1_sbtZa
                              GHC.Types.True
                              ipv1_sbtZo
                              sat_sbtZp
                              mb_finalizer_sbtZ3
                              other_side_sbtZ1
                              ipv_sbtZn;
              } in 
                case ds3_sbtZg of {
                  GHC.Base.Nothing -> $j_sbtZm eta_sbtZ4 GHC.Base.Nothing;
                  GHC.Base.Just _ [Occ=Dead] ->
                      case GHC.IO.Encoding.getLocaleEncoding1 of {
                        (,) getLocaleEncoding3_sbtZt [Occ=Once] _ [Occ=Dead] ->
                            case getLocaleEncoding3_sbtZt eta_sbtZ4 of {
                              (#,#) ipv1_sbtZw [Occ=Once] ipv2_sbtZx [Occ=Once] ->
                                  let {
                                    sat_sbtZy [Occ=Once]
                                      :: GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
                                    [LclId] =
                                        CCCS GHC.Base.Just! [ipv2_sbtZx];
                                  } in  $j_sbtZm ipv1_sbtZw sat_sbtZy;
                            };
                      };
                };
        };

lvl4_rbnWL :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Pattern match failure in do expression at GHC/IO/Handle.hs:713:7-20"#;

lvl5_rbnWM
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle__ #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_sbtZz]
        case GHC.CString.unpackCString# lvl4_rbnWL of sat_sbtZA {
          __DEFAULT -> GHC.IO.failIO1 sat_sbtZA eta_sbtZz;
        };

dupHandleTo_rbnWN
  :: GHC.IO.FilePath
     -> GHC.IO.Handle.Types.Handle
     -> GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
     -> GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Handle.Types.Handle__
     -> GHC.Base.Maybe GHC.IO.Handle.Internals.HandleFinalizer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle__ #)
[GblId,
 Arity=7,
 Str=<L,U><L,U><L,U><S,1*U><S,1*U><L,1*U><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [filepath_sbtZB
                    h_sbtZC
                    other_side_sbtZD
                    hto__sbtZE
                    h__sbtZF
                    mb_finalizer_sbtZG
                    eta_sbtZH]
        case hto__sbtZE of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       $dTypeable_sbtZL [Occ=Once]
                                       ds_sbtZM
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case h__sbtZF of wild1_sbtZZ {
                GHC.IO.Handle.Types.Handle__ $dIODevice1_sbu00
                                             $dBufferedIO1_sbu01 [Occ=Once]
                                             $dTypeable1_sbu02
                                             ds9_sbu03 [Occ=Once]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead] ->
                    case
                        GHC.IO.Handle.Internals.flushBuffer1 wild1_sbtZZ eta_sbtZH
                    of
                    { (#,#) ipv_sbu0h [Occ=Once*] _ [Occ=Dead] ->
                          case
                              Data.Typeable.Internal.sameTypeRep
                                  $dTypeable_sbtZL $dTypeable1_sbu02
                          of
                          { GHC.Types.False ->
                                ioe_dupHandlesNotCompatible_rbnWF h_sbtZC ipv_sbu0h;
                            GHC.Types.True ->
                                case
                                    GHC.IO.Device.dup2
                                        $dIODevice1_sbu00 ds9_sbu03 ds_sbtZM ipv_sbu0h
                                of
                                { (#,#) ipv2_sbu0l [Occ=Once] _ [Occ=Dead] ->
                                      case
                                          dupHandle__rbnWK
                                              $dIODevice1_sbu00
                                              $dBufferedIO1_sbu01
                                              $dTypeable1_sbu02
                                              ds_sbtZM
                                              filepath_sbtZB
                                              other_side_sbtZD
                                              wild1_sbtZZ
                                              mb_finalizer_sbtZG
                                              ipv2_sbu0l
                                      of
                                      { (#,#) ipv4_sbu0o [Occ=Once*] ipv5_sbu0p [Occ=Once!] ->
                                            case ipv5_sbu0p of {
                                              GHC.IO.Handle.Types.FileHandle _ [Occ=Dead]
                                                                             dt8_sbu0s [Occ=Once] ->
                                                  takeMVar# [dt8_sbu0s ipv4_sbu0o];
                                              GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                                               _ [Occ=Dead]
                                                                               _ [Occ=Dead] ->
                                                  lvl5_rbnWM ipv4_sbu0o;
                                            };
                                      };
                                };
                          };
                    };
              };
        };

lvl6_rbnWO :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "dupHandle"#;

lvl7_rbnWP :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl6_rbnWO;

GHC.IO.Handle.hSetNewlineMode3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hSetNewlineMode"#;

GHC.IO.Handle.hSetNewlineMode2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hSetNewlineMode3;

GHC.IO.Handle.$whSetNewlineMode [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=4, Str=<S,1*U><L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [w_sbu0w ww_sbu0x ww1_sbu0y w1_sbu0z]
        let {
          sat_sbu0X [Occ=Once]
            :: GHC.IO.Handle.Types.Handle__
               -> GHC.Types.IO GHC.IO.Handle.Types.Handle__
          [LclId] =
              [ww_sbu0x ww1_sbu0y] \r [h__sbu0A eta_sbu0B]
                  case h__sbu0A of wild_sbu0C {
                    GHC.IO.Handle.Types.Handle__ $dIODevice_sbu0D [Occ=Once]
                                                 $dBufferedIO_sbu0E [Occ=Once]
                                                 $dTypeable_sbu0F [Occ=Once]
                                                 ds_sbu0G [Occ=Once]
                                                 ds1_sbu0H [Occ=Once]
                                                 dt_sbu0I [Occ=Once]
                                                 ds2_sbu0J [Occ=Once]
                                                 dt1_sbu0K [Occ=Once]
                                                 dt2_sbu0L [Occ=Once]
                                                 dt3_sbu0M [Occ=Once]
                                                 ds3_sbu0N [Occ=Once]
                                                 ds4_sbu0O [Occ=Once]
                                                 ds5_sbu0P [Occ=Once]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 ds8_sbu0S [Occ=Once] ->
                        case GHC.IO.Handle.Internals.flushBuffer1 wild_sbu0C eta_sbu0B of {
                          (#,#) ipv_sbu0U [Occ=Once] _ [Occ=Dead] ->
                              let {
                                sat_sbu0W [Occ=Once] :: GHC.IO.Handle.Types.Handle__
                                [LclId] =
                                    CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbu0D
                                                                        $dBufferedIO_sbu0E
                                                                        $dTypeable_sbu0F
                                                                        ds_sbu0G
                                                                        ds1_sbu0H
                                                                        dt_sbu0I
                                                                        ds2_sbu0J
                                                                        dt1_sbu0K
                                                                        dt2_sbu0L
                                                                        dt3_sbu0M
                                                                        ds3_sbu0N
                                                                        ds4_sbu0O
                                                                        ds5_sbu0P
                                                                        ww_sbu0x
                                                                        ww1_sbu0y
                                                                        ds8_sbu0S];
                              } in  (#,#) [ipv_sbu0U sat_sbu0W];
                        };
                  };
        } in 
          GHC.IO.Handle.Internals.withAllHandles__1
              GHC.IO.Handle.hSetNewlineMode2 w_sbu0w sat_sbu0X w1_sbu0z;

GHC.IO.Handle.hSetNewlineMode1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Types.NewlineMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><S,1*U(U,U)><S,U>, Unf=OtherCon []] =
    [] \r [w_sbu0Y w1_sbu0Z w2_sbu10]
        case w1_sbu0Z of {
          GHC.IO.Handle.Types.NewlineMode ww1_sbu12 [Occ=Once]
                                          ww2_sbu13 [Occ=Once] ->
              GHC.IO.Handle.$whSetNewlineMode
                  w_sbu0Y ww1_sbu12 ww2_sbu13 w2_sbu10;
        };

GHC.IO.Handle.hSetNewlineMode
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Types.NewlineMode -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,1*U><S,1*U(U,U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.hSetNewlineMode1 eta_B3 eta_B2 eta_B1;

lvl8_rbnWQ :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hSetBinaryMode"#;

lvl9_rbnWR :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl8_rbnWQ;

lvl10_rbnWS :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "codec_state"#;

lvl11_rbnWT :: forall ds. ds
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl10_rbnWS of sat_sbu14 {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sbu14;
        };

GHC.IO.Handle.hSetBinaryMode1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Types.Bool
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbu15 bin_sbu16 eta_sbu17]
        let {
          lvl48_sbu18 :: GHC.IO.Handle.Types.Newline
          [LclId] =
              [bin_sbu16] \u []
                  case bin_sbu16 of { __DEFAULT -> GHC.IO.Handle.Types.LF []; }; } in
        let {
          sat_sbu4H [Occ=Once]
            :: GHC.IO.Handle.Types.Handle__
               -> GHC.Types.IO GHC.IO.Handle.Types.Handle__
          [LclId] =
              [bin_sbu16 lvl48_sbu18] \r [h__sbu1a eta1_sbu1b]
                  case h__sbu1a of {
                    GHC.IO.Handle.Types.Handle__ $dIODevice_sbu1d [Occ=Once*]
                                                 $dBufferedIO_sbu1e [Occ=Once*]
                                                 $dTypeable_sbu1f [Occ=Once*]
                                                 ds_sbu1g [Occ=Once*]
                                                 ds1_sbu1h
                                                 dt_sbu1i
                                                 ds2_sbu1j [Occ=Once*]
                                                 dt1_sbu1k [Occ=Once]
                                                 dt2_sbu1l
                                                 dt3_sbu1m [Occ=Once*]
                                                 ds3_sbu1n [Occ=Once*!]
                                                 ds4_sbu1o
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 ds8_sbu1s [Occ=Once*] ->
                        case readMutVar# [dt2_sbu1l eta1_sbu1b] of {
                          (#,#) ipv_sbu1u [Occ=Once*] ipv1_sbu1v [Occ=Once!] ->
                              case ipv1_sbu1v of {
                                GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                     _ [Occ=Dead]
                                                     ds10_sbu1z [Occ=Once!]
                                                     _ [Occ=Dead]
                                                     dt7_sbu1B [Occ=Once]
                                                     dt8_sbu1C [Occ=Once] ->
                                    let-no-escape {
                                      $w$j_sbu1D [InlPrag=NOUSERINLINE[0],
                                                  Occ=Once*!T[1],
                                                  Dmd=<L,1*C1(U)>]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                 GHC.IO.Handle.Types.Handle__ #)
                                      [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                          sat-only [bin_sbu16
                                                    lvl48_sbu18
                                                    $dIODevice_sbu1d
                                                    $dBufferedIO_sbu1e
                                                    $dTypeable_sbu1f
                                                    ds_sbu1g
                                                    ds1_sbu1h
                                                    dt_sbu1i
                                                    ds2_sbu1j
                                                    dt2_sbu1l
                                                    dt3_sbu1m
                                                    ds3_sbu1n
                                                    ds4_sbu1o
                                                    ds8_sbu1s] \r [w_sbu1E]
                                              let-no-escape {
                                                $w$j1_sbu1F [InlPrag=NOUSERINLINE[0],
                                                             Occ=Once*!T[1],
                                                             Dmd=<L,1*C1(U)>]
                                                  :: GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.IO.Handle.Types.Handle__ #)
                                                [LclId[JoinId(1)],
                                                 Arity=1,
                                                 Str=<S,U>,
                                                 Unf=OtherCon []] =
                                                    sat-only [bin_sbu16
                                                              lvl48_sbu18
                                                              $dIODevice_sbu1d
                                                              $dBufferedIO_sbu1e
                                                              $dTypeable_sbu1f
                                                              ds_sbu1g
                                                              ds1_sbu1h
                                                              dt_sbu1i
                                                              ds2_sbu1j
                                                              dt2_sbu1l
                                                              dt3_sbu1m
                                                              ds8_sbu1s] \r [w1_sbu1G]
                                                        let-no-escape {
                                                          $j_sbu1H [Occ=Once*!T[2],
                                                                    Dmd=<L,1*C1(C1(U))>]
                                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> GHC.Base.Maybe
                                                                    GHC.IO.Encoding.Types.TextEncoding
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.IO.Handle.Types.Handle__ #)
                                                          [LclId[JoinId(2)],
                                                           Arity=2,
                                                           Str=<S,U><S,1*U>,
                                                           Unf=OtherCon []] =
                                                              sat-only [lvl48_sbu18
                                                                        $dIODevice_sbu1d
                                                                        $dBufferedIO_sbu1e
                                                                        $dTypeable_sbu1f
                                                                        ds_sbu1g
                                                                        ds1_sbu1h
                                                                        dt_sbu1i
                                                                        ds2_sbu1j
                                                                        dt2_sbu1l
                                                                        dt3_sbu1m
                                                                        ds8_sbu1s] \r [ipv2_sbu1I
                                                                                       ipv3_sbu1J]
                                                                  case ipv3_sbu1J of wild2_sbu1K {
                                                                    GHC.Base.Nothing ->
                                                                        case
                                                                            readMutVar# [dt_sbu1i
                                                                                         ipv2_sbu1I]
                                                                        of
                                                                        { (#,#) ipv4_sbu1M [Occ=Once]
                                                                                ipv5_sbu1N [Occ=Once] ->
                                                                              let {
                                                                                sat_sbu1O [Occ=Once]
                                                                                  :: (GHC.Types.Any,
                                                                                      GHC.IO.Buffer.Buffer
                                                                                        GHC.Word.Word8)
                                                                                [LclId] =
                                                                                    CCCS (,)! [lvl11_rbnWT
                                                                                               ipv5_sbu1N];
                                                                              } in 
                                                                                case
                                                                                    newMutVar# [sat_sbu1O
                                                                                                ipv4_sbu1M]
                                                                                of
                                                                                { (#,#) ipv6_sbu1Q [Occ=Once]
                                                                                        ipv7_sbu1R [Occ=Once] ->
                                                                                      let {
                                                                                        sat_sbu1S [Occ=Once]
                                                                                          :: GHC.IO.Handle.Types.Handle__
                                                                                        [LclId] =
                                                                                            CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbu1d
                                                                                                                                $dBufferedIO_sbu1e
                                                                                                                                $dTypeable_sbu1f
                                                                                                                                ds_sbu1g
                                                                                                                                ds1_sbu1h
                                                                                                                                dt_sbu1i
                                                                                                                                ds2_sbu1j
                                                                                                                                ipv7_sbu1R
                                                                                                                                dt2_sbu1l
                                                                                                                                dt3_sbu1m
                                                                                                                                GHC.Base.Nothing
                                                                                                                                GHC.Base.Nothing
                                                                                                                                GHC.Base.Nothing
                                                                                                                                lvl48_sbu18
                                                                                                                                lvl48_sbu18
                                                                                                                                ds8_sbu1s];
                                                                                      } in 
                                                                                        (#,#) [ipv6_sbu1Q
                                                                                               sat_sbu1S];
                                                                                };
                                                                        };
                                                                    GHC.Base.Just ds12_sbu1T [Occ=Once!] ->
                                                                        case ds12_sbu1T of {
                                                                          GHC.IO.Encoding.Types.TextEncoding _ [Occ=Dead]
                                                                                                             ds14_sbu1W [Occ=Once*]
                                                                                                             ds15_sbu1X [Occ=Once*] ->
                                                                              let-no-escape {
                                                                                $j1_sbu1Y [Occ=Once*!T[2],
                                                                                           Dmd=<L,1*C1(C1(U))>]
                                                                                  :: GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                     -> GHC.Base.Maybe
                                                                                          (GHC.IO.Encoding.Types.TextDecoder
                                                                                             dstate_ibkNi)
                                                                                     -> (# GHC.Prim.State#
                                                                                             GHC.Prim.RealWorld,
                                                                                           GHC.IO.Handle.Types.Handle__ #)
                                                                                [LclId[JoinId(2)],
                                                                                 Arity=2,
                                                                                 Str=<S,U><L,U>,
                                                                                 Unf=OtherCon []] =
                                                                                    sat-only [lvl48_sbu18
                                                                                              $dIODevice_sbu1d
                                                                                              $dBufferedIO_sbu1e
                                                                                              $dTypeable_sbu1f
                                                                                              ds_sbu1g
                                                                                              ds1_sbu1h
                                                                                              dt_sbu1i
                                                                                              ds2_sbu1j
                                                                                              dt2_sbu1l
                                                                                              dt3_sbu1m
                                                                                              ds8_sbu1s
                                                                                              wild2_sbu1K
                                                                                              ds15_sbu1X] \r [ipv4_sbu1Z
                                                                                                              ipv5_sbu20]
                                                                                        case
                                                                                            ds1_sbu1h
                                                                                        of
                                                                                        wild4_sbu21
                                                                                        { __DEFAULT ->
                                                                                              case
                                                                                                  readMutVar# [dt_sbu1i
                                                                                                               ipv4_sbu1Z]
                                                                                              of
                                                                                              { (#,#) ipv6_sbu23 [Occ=Once]
                                                                                                      ipv7_sbu24 [Occ=Once] ->
                                                                                                    let {
                                                                                                      sat_sbu25 [Occ=Once]
                                                                                                        :: (dstate_ibkNi,
                                                                                                            GHC.IO.Buffer.Buffer
                                                                                                              GHC.Word.Word8)
                                                                                                      [LclId] =
                                                                                                          CCCS (,)! [lvl11_rbnWT
                                                                                                                     ipv7_sbu24];
                                                                                                    } in 
                                                                                                      case
                                                                                                          newMutVar# [sat_sbu25
                                                                                                                      ipv6_sbu23]
                                                                                                      of
                                                                                                      { (#,#) ipv8_sbu27 [Occ=Once]
                                                                                                              ipv9_sbu28 [Occ=Once] ->
                                                                                                            let {
                                                                                                              sat_sbu29 [Occ=Once]
                                                                                                                :: GHC.IO.Handle.Types.Handle__
                                                                                                              [LclId] =
                                                                                                                  CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbu1d
                                                                                                                                                      $dBufferedIO_sbu1e
                                                                                                                                                      $dTypeable_sbu1f
                                                                                                                                                      ds_sbu1g
                                                                                                                                                      wild4_sbu21
                                                                                                                                                      dt_sbu1i
                                                                                                                                                      ds2_sbu1j
                                                                                                                                                      ipv9_sbu28
                                                                                                                                                      dt2_sbu1l
                                                                                                                                                      dt3_sbu1m
                                                                                                                                                      GHC.Base.Nothing
                                                                                                                                                      ipv5_sbu20
                                                                                                                                                      wild2_sbu1K
                                                                                                                                                      lvl48_sbu18
                                                                                                                                                      lvl48_sbu18
                                                                                                                                                      ds8_sbu1s];
                                                                                                            } in 
                                                                                                              (#,#) [ipv8_sbu27
                                                                                                                     sat_sbu29];
                                                                                                      };
                                                                                              };
                                                                                          GHC.IO.Handle.Types.WriteHandle ->
                                                                                              case
                                                                                                  ds15_sbu1X
                                                                                                      ipv4_sbu1Z
                                                                                              of
                                                                                              { (#,#) ipv6_sbu2b [Occ=Once]
                                                                                                      ipv7_sbu2c [Occ=Once] ->
                                                                                                    case
                                                                                                        readMutVar# [dt_sbu1i
                                                                                                                     ipv6_sbu2b]
                                                                                                    of
                                                                                                    { (#,#) ipv8_sbu2e [Occ=Once]
                                                                                                            ipv9_sbu2f [Occ=Once] ->
                                                                                                          let {
                                                                                                            sat_sbu2g [Occ=Once]
                                                                                                              :: (dstate_ibkNi,
                                                                                                                  GHC.IO.Buffer.Buffer
                                                                                                                    GHC.Word.Word8)
                                                                                                            [LclId] =
                                                                                                                CCCS (,)! [lvl11_rbnWT
                                                                                                                           ipv9_sbu2f];
                                                                                                          } in 
                                                                                                            case
                                                                                                                newMutVar# [sat_sbu2g
                                                                                                                            ipv8_sbu2e]
                                                                                                            of
                                                                                                            { (#,#) ipv10_sbu2i [Occ=Once]
                                                                                                                    ipv11_sbu2j [Occ=Once] ->
                                                                                                                  let {
                                                                                                                    sat_sbu2k [Occ=Once]
                                                                                                                      :: GHC.Base.Maybe
                                                                                                                           (GHC.IO.Encoding.Types.TextEncoder
                                                                                                                              estate_ibkNj)
                                                                                                                    [LclId] =
                                                                                                                        CCCS GHC.Base.Just! [ipv7_sbu2c]; } in
                                                                                                                  let {
                                                                                                                    sat_sbu2l [Occ=Once]
                                                                                                                      :: GHC.IO.Handle.Types.Handle__
                                                                                                                    [LclId] =
                                                                                                                        CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbu1d
                                                                                                                                                            $dBufferedIO_sbu1e
                                                                                                                                                            $dTypeable_sbu1f
                                                                                                                                                            ds_sbu1g
                                                                                                                                                            GHC.IO.Handle.Types.WriteHandle
                                                                                                                                                            dt_sbu1i
                                                                                                                                                            ds2_sbu1j
                                                                                                                                                            ipv11_sbu2j
                                                                                                                                                            dt2_sbu1l
                                                                                                                                                            dt3_sbu1m
                                                                                                                                                            sat_sbu2k
                                                                                                                                                            ipv5_sbu20
                                                                                                                                                            wild2_sbu1K
                                                                                                                                                            lvl48_sbu18
                                                                                                                                                            lvl48_sbu18
                                                                                                                                                            ds8_sbu1s];
                                                                                                                  } in 
                                                                                                                    (#,#) [ipv10_sbu2i
                                                                                                                           sat_sbu2l];
                                                                                                            };
                                                                                                    };
                                                                                              };
                                                                                          GHC.IO.Handle.Types.AppendHandle ->
                                                                                              case
                                                                                                  ds15_sbu1X
                                                                                                      ipv4_sbu1Z
                                                                                              of
                                                                                              { (#,#) ipv6_sbu2n [Occ=Once]
                                                                                                      ipv7_sbu2o [Occ=Once] ->
                                                                                                    case
                                                                                                        readMutVar# [dt_sbu1i
                                                                                                                     ipv6_sbu2n]
                                                                                                    of
                                                                                                    { (#,#) ipv8_sbu2q [Occ=Once]
                                                                                                            ipv9_sbu2r [Occ=Once] ->
                                                                                                          let {
                                                                                                            sat_sbu2s [Occ=Once]
                                                                                                              :: (dstate_ibkNi,
                                                                                                                  GHC.IO.Buffer.Buffer
                                                                                                                    GHC.Word.Word8)
                                                                                                            [LclId] =
                                                                                                                CCCS (,)! [lvl11_rbnWT
                                                                                                                           ipv9_sbu2r];
                                                                                                          } in 
                                                                                                            case
                                                                                                                newMutVar# [sat_sbu2s
                                                                                                                            ipv8_sbu2q]
                                                                                                            of
                                                                                                            { (#,#) ipv10_sbu2u [Occ=Once]
                                                                                                                    ipv11_sbu2v [Occ=Once] ->
                                                                                                                  let {
                                                                                                                    sat_sbu2w [Occ=Once]
                                                                                                                      :: GHC.Base.Maybe
                                                                                                                           (GHC.IO.Encoding.Types.TextEncoder
                                                                                                                              estate_ibkNj)
                                                                                                                    [LclId] =
                                                                                                                        CCCS GHC.Base.Just! [ipv7_sbu2o]; } in
                                                                                                                  let {
                                                                                                                    sat_sbu2x [Occ=Once]
                                                                                                                      :: GHC.IO.Handle.Types.Handle__
                                                                                                                    [LclId] =
                                                                                                                        CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbu1d
                                                                                                                                                            $dBufferedIO_sbu1e
                                                                                                                                                            $dTypeable_sbu1f
                                                                                                                                                            ds_sbu1g
                                                                                                                                                            GHC.IO.Handle.Types.AppendHandle
                                                                                                                                                            dt_sbu1i
                                                                                                                                                            ds2_sbu1j
                                                                                                                                                            ipv11_sbu2v
                                                                                                                                                            dt2_sbu1l
                                                                                                                                                            dt3_sbu1m
                                                                                                                                                            sat_sbu2w
                                                                                                                                                            ipv5_sbu20
                                                                                                                                                            wild2_sbu1K
                                                                                                                                                            lvl48_sbu18
                                                                                                                                                            lvl48_sbu18
                                                                                                                                                            ds8_sbu1s];
                                                                                                                  } in 
                                                                                                                    (#,#) [ipv10_sbu2u
                                                                                                                           sat_sbu2x];
                                                                                                            };
                                                                                                    };
                                                                                              };
                                                                                          GHC.IO.Handle.Types.ReadWriteHandle ->
                                                                                              case
                                                                                                  ds15_sbu1X
                                                                                                      ipv4_sbu1Z
                                                                                              of
                                                                                              { (#,#) ipv6_sbu2z [Occ=Once]
                                                                                                      ipv7_sbu2A [Occ=Once] ->
                                                                                                    case
                                                                                                        readMutVar# [dt_sbu1i
                                                                                                                     ipv6_sbu2z]
                                                                                                    of
                                                                                                    { (#,#) ipv8_sbu2C [Occ=Once]
                                                                                                            ipv9_sbu2D [Occ=Once] ->
                                                                                                          let {
                                                                                                            sat_sbu2E [Occ=Once]
                                                                                                              :: (dstate_ibkNi,
                                                                                                                  GHC.IO.Buffer.Buffer
                                                                                                                    GHC.Word.Word8)
                                                                                                            [LclId] =
                                                                                                                CCCS (,)! [lvl11_rbnWT
                                                                                                                           ipv9_sbu2D];
                                                                                                          } in 
                                                                                                            case
                                                                                                                newMutVar# [sat_sbu2E
                                                                                                                            ipv8_sbu2C]
                                                                                                            of
                                                                                                            { (#,#) ipv10_sbu2G [Occ=Once]
                                                                                                                    ipv11_sbu2H [Occ=Once] ->
                                                                                                                  let {
                                                                                                                    sat_sbu2I [Occ=Once]
                                                                                                                      :: GHC.Base.Maybe
                                                                                                                           (GHC.IO.Encoding.Types.TextEncoder
                                                                                                                              estate_ibkNj)
                                                                                                                    [LclId] =
                                                                                                                        CCCS GHC.Base.Just! [ipv7_sbu2A]; } in
                                                                                                                  let {
                                                                                                                    sat_sbu2J [Occ=Once]
                                                                                                                      :: GHC.IO.Handle.Types.Handle__
                                                                                                                    [LclId] =
                                                                                                                        CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbu1d
                                                                                                                                                            $dBufferedIO_sbu1e
                                                                                                                                                            $dTypeable_sbu1f
                                                                                                                                                            ds_sbu1g
                                                                                                                                                            GHC.IO.Handle.Types.ReadWriteHandle
                                                                                                                                                            dt_sbu1i
                                                                                                                                                            ds2_sbu1j
                                                                                                                                                            ipv11_sbu2H
                                                                                                                                                            dt2_sbu1l
                                                                                                                                                            dt3_sbu1m
                                                                                                                                                            sat_sbu2I
                                                                                                                                                            ipv5_sbu20
                                                                                                                                                            wild2_sbu1K
                                                                                                                                                            lvl48_sbu18
                                                                                                                                                            lvl48_sbu18
                                                                                                                                                            ds8_sbu1s];
                                                                                                                  } in 
                                                                                                                    (#,#) [ipv10_sbu2G
                                                                                                                           sat_sbu2J];
                                                                                                            };
                                                                                                    };
                                                                                              };
                                                                                        };
                                                                              } in 
                                                                                case ds1_sbu1h of {
                                                                                  __DEFAULT ->
                                                                                      $j1_sbu1Y
                                                                                          ipv2_sbu1I
                                                                                          GHC.Base.Nothing;
                                                                                  GHC.IO.Handle.Types.ReadHandle ->
                                                                                      case
                                                                                          ds14_sbu1W
                                                                                              ipv2_sbu1I
                                                                                      of
                                                                                      { (#,#) ipv4_sbu2M [Occ=Once]
                                                                                              ipv5_sbu2N [Occ=Once] ->
                                                                                            let {
                                                                                              sat_sbu2O [Occ=Once]
                                                                                                :: GHC.Base.Maybe
                                                                                                     (GHC.IO.Encoding.Types.TextDecoder
                                                                                                        dstate_ibkNi)
                                                                                              [LclId] =
                                                                                                  CCCS GHC.Base.Just! [ipv5_sbu2N];
                                                                                            } in 
                                                                                              $j1_sbu1Y
                                                                                                  ipv4_sbu2M
                                                                                                  sat_sbu2O;
                                                                                      };
                                                                                  GHC.IO.Handle.Types.ReadWriteHandle ->
                                                                                      case
                                                                                          ds14_sbu1W
                                                                                              ipv2_sbu1I
                                                                                      of
                                                                                      { (#,#) ipv4_sbu2Q [Occ=Once]
                                                                                              ipv5_sbu2R [Occ=Once] ->
                                                                                            let {
                                                                                              sat_sbu2S [Occ=Once]
                                                                                                :: GHC.Base.Maybe
                                                                                                     (GHC.IO.Encoding.Types.TextDecoder
                                                                                                        dstate_ibkNi)
                                                                                              [LclId] =
                                                                                                  CCCS GHC.Base.Just! [ipv5_sbu2R];
                                                                                            } in 
                                                                                              $j1_sbu1Y
                                                                                                  ipv4_sbu2Q
                                                                                                  sat_sbu2S;
                                                                                      };
                                                                                };
                                                                        };
                                                                  };
                                                        } in 
                                                          case bin_sbu16 of {
                                                            GHC.Types.False ->
                                                                case
                                                                    GHC.IO.Encoding.getLocaleEncoding1
                                                                of
                                                                { (,) getLocaleEncoding3_sbu2V [Occ=Once]
                                                                      _ [Occ=Dead] ->
                                                                      case
                                                                          getLocaleEncoding3_sbu2V
                                                                              w1_sbu1G
                                                                      of
                                                                      { (#,#) ipv2_sbu2Y [Occ=Once]
                                                                              ipv3_sbu2Z [Occ=Once] ->
                                                                            let {
                                                                              sat_sbu30 [Occ=Once]
                                                                                :: GHC.Base.Maybe
                                                                                     GHC.IO.Encoding.Types.TextEncoding
                                                                              [LclId] =
                                                                                  CCCS GHC.Base.Just! [ipv3_sbu2Z];
                                                                            } in 
                                                                              $j_sbu1H
                                                                                  ipv2_sbu2Y
                                                                                  sat_sbu30;
                                                                      };
                                                                };
                                                            GHC.Types.True ->
                                                                $j_sbu1H w1_sbu1G GHC.Base.Nothing;
                                                          };
                                              } in 
                                                case ds4_sbu1o of {
                                                  GHC.Base.Nothing ->
                                                      case ds3_sbu1n of {
                                                        GHC.Base.Nothing -> $w$j1_sbu1F w_sbu1E;
                                                        GHC.Base.Just d_sbu33 [Occ=Once!] ->
                                                            case d_sbu33 of {
                                                              GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                                _ [Occ=Dead]
                                                                                                ds13_sbu37 [Occ=Once]
                                                                                                _ [Occ=Dead]
                                                                                                _ [Occ=Dead] ->
                                                                  case ds13_sbu37 w_sbu1E of {
                                                                    (#,#) ipv2_sbu3b [Occ=Once]
                                                                          _ [Occ=Dead] ->
                                                                        $w$j1_sbu1F ipv2_sbu3b;
                                                                  };
                                                            };
                                                      };
                                                  GHC.Base.Just d_sbu3d [Occ=Once!] ->
                                                      case d_sbu3d of {
                                                        GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                          _ [Occ=Dead]
                                                                                          ds13_sbu3h [Occ=Once]
                                                                                          _ [Occ=Dead]
                                                                                          _ [Occ=Dead] ->
                                                            case ds13_sbu3h w_sbu1E of {
                                                              (#,#) ipv2_sbu3l [Occ=Once*]
                                                                    _ [Occ=Dead] ->
                                                                  case ds3_sbu1n of {
                                                                    GHC.Base.Nothing ->
                                                                        $w$j1_sbu1F ipv2_sbu3l;
                                                                    GHC.Base.Just d1_sbu3o [Occ=Once!] ->
                                                                        case d1_sbu3o of {
                                                                          GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                                            _ [Occ=Dead]
                                                                                                            ds19_sbu3s [Occ=Once]
                                                                                                            _ [Occ=Dead]
                                                                                                            _ [Occ=Dead] ->
                                                                              case
                                                                                  ds19_sbu3s
                                                                                      ipv2_sbu3l
                                                                              of
                                                                              { (#,#) ipv4_sbu3w [Occ=Once]
                                                                                      _ [Occ=Dead] ->
                                                                                    $w$j1_sbu1F
                                                                                        ipv4_sbu3w;
                                                                              };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                    } in 
                                      case ds10_sbu1z of {
                                        GHC.IO.Buffer.ReadBuffer ->
                                            case readMutVar# [dt2_sbu1l ipv_sbu1u] of {
                                              (#,#) ipv2_sbu3A [Occ=Once*] ipv3_sbu3B [Occ=Once!] ->
                                                  case ipv3_sbu3B of {
                                                    GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                         _ [Occ=Dead]
                                                                         ds11_sbu3F [Occ=Once!]
                                                                         _ [Occ=Dead]
                                                                         dt13_sbu3H [Occ=Once]
                                                                         dt14_sbu3I [Occ=Once] ->
                                                        case ds11_sbu3F of {
                                                          GHC.IO.Buffer.ReadBuffer ->
                                                              case ==# [dt13_sbu3H dt14_sbu3I] of {
                                                                __DEFAULT ->
                                                                    case
                                                                        readMutVar# [dt1_sbu1k
                                                                                     ipv2_sbu3A]
                                                                    of
                                                                    { (#,#) ipv4_sbu3M [Occ=Once]
                                                                            ipv5_sbu3N [Occ=Once!] ->
                                                                          case ipv5_sbu3N of {
                                                                            (,) codec_state_sbu3P [Occ=Once]
                                                                                bbuf0_sbu3Q [Occ=Once*] ->
                                                                                case
                                                                                    readMutVar# [dt2_sbu1l
                                                                                                 ipv4_sbu3M]
                                                                                of
                                                                                { (#,#) ipv6_sbu3S [Occ=Once]
                                                                                        ipv7_sbu3T ->
                                                                                      let {
                                                                                        sat_sbu41 [Occ=Once]
                                                                                          :: GHC.IO.Buffer.Buffer
                                                                                               GHC.IO.Buffer.CharBufElem
                                                                                        [LclId] =
                                                                                            [ipv7_sbu3T] \u []
                                                                                                case
                                                                                                    ipv7_sbu3T
                                                                                                of
                                                                                                { GHC.IO.Buffer.Buffer dt9_sbu3V [Occ=Once]
                                                                                                                       dt15_sbu3W [Occ=Once]
                                                                                                                       ds15_sbu3X [Occ=Once]
                                                                                                                       dt16_sbu3Y [Occ=Once]
                                                                                                                       _ [Occ=Dead]
                                                                                                                       _ [Occ=Dead] ->
                                                                                                      GHC.IO.Buffer.Buffer [dt9_sbu3V
                                                                                                                            dt15_sbu3W
                                                                                                                            ds15_sbu3X
                                                                                                                            dt16_sbu3Y
                                                                                                                            0#
                                                                                                                            0#];
                                                                                                };
                                                                                      } in 
                                                                                        case
                                                                                            writeMutVar# [dt2_sbu1l
                                                                                                          sat_sbu41
                                                                                                          ipv6_sbu3S]
                                                                                        of
                                                                                        s2#_sbu42
                                                                                        { __DEFAULT ->
                                                                                              case
                                                                                                  ipv7_sbu3T
                                                                                              of
                                                                                              { GHC.IO.Buffer.Buffer dt9_sbu44 [Occ=Once]
                                                                                                                     dt15_sbu45 [Occ=Once]
                                                                                                                     ds15_sbu46 [Occ=Once]
                                                                                                                     _ [Occ=Dead]
                                                                                                                     dt17_sbu48 [Occ=Once!]
                                                                                                                     _ [Occ=Dead] ->
                                                                                                    case
                                                                                                        dt17_sbu48
                                                                                                    of
                                                                                                    wild7_sbu4a
                                                                                                    { __DEFAULT ->
                                                                                                          case
                                                                                                              ds4_sbu1o
                                                                                                          of
                                                                                                          { GHC.Base.Nothing ->
                                                                                                                let {
                                                                                                                  sat_sbu4k [Occ=Once]
                                                                                                                    :: GHC.IO.Buffer.Buffer
                                                                                                                         GHC.Word.Word8
                                                                                                                  [LclId] =
                                                                                                                      [bbuf0_sbu3Q
                                                                                                                       wild7_sbu4a] \u []
                                                                                                                          case
                                                                                                                              bbuf0_sbu3Q
                                                                                                                          of
                                                                                                                          { GHC.IO.Buffer.Buffer dt19_sbu4d [Occ=Once]
                                                                                                                                                 dt20_sbu4e [Occ=Once]
                                                                                                                                                 ds16_sbu4f [Occ=Once]
                                                                                                                                                 dt21_sbu4g [Occ=Once]
                                                                                                                                                 dt22_sbu4h [Occ=Once]
                                                                                                                                                 dt23_sbu4i [Occ=Once] ->
                                                                                                                                case
                                                                                                                                    +# [dt22_sbu4h
                                                                                                                                        wild7_sbu4a]
                                                                                                                                of
                                                                                                                                sat_sbu4j
                                                                                                                                { __DEFAULT ->
                                                                                                                                      GHC.IO.Buffer.Buffer [dt19_sbu4d
                                                                                                                                                            dt20_sbu4e
                                                                                                                                                            ds16_sbu4f
                                                                                                                                                            dt21_sbu4g
                                                                                                                                                            sat_sbu4j
                                                                                                                                                            dt23_sbu4i];
                                                                                                                                };
                                                                                                                          };
                                                                                                                } in 
                                                                                                                  case
                                                                                                                      writeMutVar# [dt_sbu1i
                                                                                                                                    sat_sbu4k
                                                                                                                                    s2#_sbu42]
                                                                                                                  of
                                                                                                                  s2#1_sbu4l
                                                                                                                  { __DEFAULT ->
                                                                                                                        $w$j_sbu1D
                                                                                                                            s2#1_sbu4l;
                                                                                                                  };
                                                                                                            GHC.Base.Just decoder_sbu4m [Occ=Once!] ->
                                                                                                                case
                                                                                                                    decoder_sbu4m
                                                                                                                of
                                                                                                                { GHC.IO.Encoding.Types.BufferCodec ds16_sbu4o [Occ=Once]
                                                                                                                                                    ds17_sbu4p [Occ=Once]
                                                                                                                                                    _ [Occ=Dead]
                                                                                                                                                    _ [Occ=Dead]
                                                                                                                                                    ds20_sbu4s [Occ=Once!] ->
                                                                                                                      case
                                                                                                                          ds20_sbu4s
                                                                                                                              codec_state_sbu3P
                                                                                                                              s2#_sbu42
                                                                                                                      of
                                                                                                                      { (#,#) ipv8_sbu4u [Occ=Once]
                                                                                                                              _ [Occ=Dead] ->
                                                                                                                            let {
                                                                                                                              sat_sbu4w [Occ=Once]
                                                                                                                                :: GHC.IO.Buffer.Buffer
                                                                                                                                     GHC.IO.Buffer.CharBufElem
                                                                                                                              [LclId] =
                                                                                                                                  CCCS GHC.IO.Buffer.Buffer! [dt9_sbu44
                                                                                                                                                              dt15_sbu45
                                                                                                                                                              ds15_sbu46
                                                                                                                                                              wild7_sbu4a
                                                                                                                                                              0#
                                                                                                                                                              0#];
                                                                                                                            } in 
                                                                                                                              case
                                                                                                                                  GHC.IO.Handle.Internals.$wstreamEncode
                                                                                                                                      ds16_sbu4o
                                                                                                                                      ds17_sbu4p
                                                                                                                                      bbuf0_sbu3Q
                                                                                                                                      sat_sbu4w
                                                                                                                                      ipv8_sbu4u
                                                                                                                              of
                                                                                                                              { (#,#) ipv10_sbu4y [Occ=Once]
                                                                                                                                      ipv11_sbu4z [Occ=Once!] ->
                                                                                                                                    case
                                                                                                                                        ipv11_sbu4z
                                                                                                                                    of
                                                                                                                                    { (,) bbuf1_sbu4B [Occ=Once]
                                                                                                                                          _ [Occ=Dead] ->
                                                                                                                                          case
                                                                                                                                              writeMutVar# [dt_sbu1i
                                                                                                                                                            bbuf1_sbu4B
                                                                                                                                                            ipv10_sbu4y]
                                                                                                                                          of
                                                                                                                                          s2#1_sbu4D
                                                                                                                                          { __DEFAULT ->
                                                                                                                                                $w$j_sbu1D
                                                                                                                                                    s2#1_sbu4D;
                                                                                                                                          };
                                                                                                                                    };
                                                                                                                              };
                                                                                                                      };
                                                                                                                };
                                                                                                          };
                                                                                                      0# ->
                                                                                                          case
                                                                                                              writeMutVar# [dt_sbu1i
                                                                                                                            bbuf0_sbu3Q
                                                                                                                            s2#_sbu42]
                                                                                                          of
                                                                                                          s2#1_sbu4E
                                                                                                          { __DEFAULT ->
                                                                                                                $w$j_sbu1D
                                                                                                                    s2#1_sbu4E;
                                                                                                          };
                                                                                                    };
                                                                                              };
                                                                                        };
                                                                                };
                                                                          };
                                                                    };
                                                                1# -> $w$j_sbu1D ipv2_sbu3A;
                                                              };
                                                          GHC.IO.Buffer.WriteBuffer ->
                                                              $w$j_sbu1D ipv2_sbu3A;
                                                        };
                                                  };
                                            };
                                        GHC.IO.Buffer.WriteBuffer ->
                                            case ==# [dt7_sbu1B dt8_sbu1C] of {
                                              __DEFAULT -> GHC.IO.Handle.Internals.flushCharBuffer2;
                                              1# -> $w$j_sbu1D ipv_sbu1u;
                                            };
                                      };
                              };
                        };
                  };
        } in 
          GHC.IO.Handle.Internals.withAllHandles__1
              lvl9_rbnWR handle_sbu15 sat_sbu4H eta_sbu17;

GHC.IO.Handle.hSetBinaryMode
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.Bool -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.hSetBinaryMode1 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.hIsSeekable4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hIsSeekable"#;

GHC.IO.Handle.hIsSeekable3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hIsSeekable4;

GHC.IO.Handle.hIsSeekable2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool) #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h__sbu4I s1_sbu4J]
        case h__sbu4I of wild_sbu4K {
          GHC.IO.Handle.Types.Handle__ $dIODevice_sbu4L [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds_sbu4O [Occ=Once]
                                       ds1_sbu4P [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds1_sbu4P of {
                __DEFAULT ->
                    case
                        GHC.IO.Device.isSeekable $dIODevice_sbu4L ds_sbu4O s1_sbu4J
                    of
                    { (#,#) ipv_sbu53 [Occ=Once] ipv1_sbu54 [Occ=Once] ->
                          let {
                            sat_sbu55 [Occ=Once]
                              :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                            [LclId] =
                                CCCS (,)! [wild_sbu4K ipv1_sbu54];
                          } in  (#,#) [ipv_sbu53 sat_sbu55];
                    };
                GHC.IO.Handle.Types.ClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_closedHandle1 s1_sbu4J;
                GHC.IO.Handle.Types.SemiClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_semiclosedHandle1 s1_sbu4J;
                GHC.IO.Handle.Types.AppendHandle ->
                    let {
                      sat_sbu58 [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                      [LclId] =
                          CCCS (,)! [wild_sbu4K GHC.Types.False];
                    } in  (#,#) [s1_sbu4J sat_sbu58];
              };
        };

GHC.IO.Handle.hIsSeekable1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbu59 eta_sbu5a]
        case handle_sbu59 of wild_sbu5b {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbu5d ->
              case getMaskingState# [eta_sbu5a] of {
                (#,#) ipv_sbu5f [Occ=Once*] ipv1_sbu5g [Occ=Once!] ->
                    let {
                      io_sbu5h [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbu5b dt_sbu5d] \r [s_sbu5i]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hIsSeekable3
                                      wild_sbu5b
                                      GHC.IO.Handle.hIsSeekable2
                                      dt_sbu5d
                                      s_sbu5i
                              of
                              { (#,#) ipv2_sbu5k [Occ=Once] ipv3_sbu5l [Occ=Once!] ->
                                    case ipv3_sbu5l of {
                                      (,) h'_sbu5n [Occ=Once] v_sbu5o [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbu5d h'_sbu5n ipv2_sbu5k]
                                          of
                                          s2#_sbu5p
                                          { __DEFAULT -> (#,#) [s2#_sbu5p v_sbu5o];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbu5g of {
                        __DEFAULT -> io_sbu5h ipv_sbu5f;
                        0# -> maskAsyncExceptions# [io_sbu5h ipv_sbu5f];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sbu5s
                                           _ [Occ=Dead] ->
              case getMaskingState# [eta_sbu5a] of {
                (#,#) ipv_sbu5v [Occ=Once*] ipv1_sbu5w [Occ=Once!] ->
                    let {
                      io_sbu5x [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbu5b dt_sbu5s] \r [s_sbu5y]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hIsSeekable3
                                      wild_sbu5b
                                      GHC.IO.Handle.hIsSeekable2
                                      dt_sbu5s
                                      s_sbu5y
                              of
                              { (#,#) ipv2_sbu5A [Occ=Once] ipv3_sbu5B [Occ=Once!] ->
                                    case ipv3_sbu5B of {
                                      (,) h'_sbu5D [Occ=Once] v_sbu5E [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbu5s h'_sbu5D ipv2_sbu5A]
                                          of
                                          s2#_sbu5F
                                          { __DEFAULT -> (#,#) [s2#_sbu5F v_sbu5E];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbu5w of {
                        __DEFAULT -> io_sbu5x ipv_sbu5v;
                        0# -> maskAsyncExceptions# [io_sbu5x ipv_sbu5v];
                      };
              };
        };

GHC.IO.Handle.hIsSeekable
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hIsSeekable1 eta_B2 eta_B1;

GHC.IO.Handle.hGetPosn4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hGetPosn"#;

GHC.IO.Handle.hGetPosn3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hGetPosn4;

GHC.IO.Handle.hGetPosn2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Integer.Type.Integer #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle__sbu5H eta_sbu5I]
        case handle__sbu5H of {
          GHC.IO.Handle.Types.Handle__ $dIODevice_sbu5K [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds_sbu5N [Occ=Once]
                                       _ [Occ=Dead]
                                       dt_sbu5P
                                       _ [Occ=Dead]
                                       dt1_sbu5R [Occ=Once]
                                       dt2_sbu5S
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds4_sbu5V [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case GHC.IO.Device.tell $dIODevice_sbu5K ds_sbu5N eta_sbu5I of {
                (#,#) ipv_sbu61 [Occ=Once] ipv1_sbu62 [Occ=Once*] ->
                    case readMutVar# [dt2_sbu5S ipv_sbu61] of {
                      (#,#) ipv2_sbu64 [Occ=Once*] ipv3_sbu65 [Occ=Once!] ->
                          case ipv3_sbu65 of {
                            GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 ds11_sbu69 [Occ=Once!]
                                                 _ [Occ=Dead]
                                                 dt7_sbu6b [Occ=Once]
                                                 dt8_sbu6c [Occ=Once] ->
                                let-no-escape {
                                  $w$j_sbu6d [InlPrag=NOUSERINLINE[0],
                                              Occ=Once*!T[1],
                                              Dmd=<L,1*C1(U(U,U))>]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                             GHC.Integer.Type.Integer #)
                                  [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                      sat-only [dt_sbu5P dt2_sbu5S ipv1_sbu62] \r [w_sbu6e]
                                          case readMutVar# [dt_sbu5P w_sbu6e] of {
                                            (#,#) ipv4_sbu6g [Occ=Once] ipv5_sbu6h [Occ=Once!] ->
                                                case readMutVar# [dt2_sbu5S ipv4_sbu6g] of {
                                                  (#,#) ipv6_sbu6j [Occ=Once] _ [Occ=Dead] ->
                                                      let {
                                                        sat_sbu6x [Occ=Once]
                                                          :: GHC.Integer.Type.Integer
                                                        [LclId] =
                                                            [ipv1_sbu62 ipv5_sbu6h] \u []
                                                                case ipv5_sbu6h of {
                                                                  GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                       _ [Occ=Dead]
                                                                                       ds14_sbu6o [Occ=Once!]
                                                                                       _ [Occ=Dead]
                                                                                       dt13_sbu6q [Occ=Once*]
                                                                                       dt14_sbu6r [Occ=Once*] ->
                                                                      case ds14_sbu6o of {
                                                                        GHC.IO.Buffer.ReadBuffer ->
                                                                            case
                                                                                -# [dt14_sbu6r
                                                                                    dt13_sbu6q]
                                                                            of
                                                                            sat_sbu6t
                                                                            { __DEFAULT ->
                                                                                  case
                                                                                      GHC.Integer.Type.smallInteger
                                                                                          sat_sbu6t
                                                                                  of
                                                                                  sat_sbu6u
                                                                                  { __DEFAULT ->
                                                                                        GHC.Integer.Type.minusInteger
                                                                                            ipv1_sbu62
                                                                                            sat_sbu6u;
                                                                                  };
                                                                            };
                                                                        GHC.IO.Buffer.WriteBuffer ->
                                                                            case
                                                                                -# [dt14_sbu6r
                                                                                    dt13_sbu6q]
                                                                            of
                                                                            sat_sbu6v
                                                                            { __DEFAULT ->
                                                                                  case
                                                                                      GHC.Integer.Type.smallInteger
                                                                                          sat_sbu6v
                                                                                  of
                                                                                  sat_sbu6w
                                                                                  { __DEFAULT ->
                                                                                        GHC.Integer.Type.plusInteger
                                                                                            ipv1_sbu62
                                                                                            sat_sbu6w;
                                                                                  };
                                                                            };
                                                                      };
                                                                };
                                                      } in  (#,#) [ipv6_sbu6j sat_sbu6x];
                                                };
                                          };
                                } in 
                                  case ds11_sbu69 of {
                                    GHC.IO.Buffer.ReadBuffer ->
                                        case readMutVar# [dt2_sbu5S ipv2_sbu64] of {
                                          (#,#) ipv4_sbu6A [Occ=Once*] ipv5_sbu6B [Occ=Once!] ->
                                              case ipv5_sbu6B of {
                                                GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     ds13_sbu6F [Occ=Once!]
                                                                     _ [Occ=Dead]
                                                                     dt13_sbu6H [Occ=Once]
                                                                     dt14_sbu6I [Occ=Once] ->
                                                    case ds13_sbu6F of {
                                                      GHC.IO.Buffer.ReadBuffer ->
                                                          case ==# [dt13_sbu6H dt14_sbu6I] of {
                                                            __DEFAULT ->
                                                                case
                                                                    readMutVar# [dt1_sbu5R
                                                                                 ipv4_sbu6A]
                                                                of
                                                                { (#,#) ipv6_sbu6M [Occ=Once]
                                                                        ipv7_sbu6N [Occ=Once!] ->
                                                                      case ipv7_sbu6N of {
                                                                        (,) codec_state_sbu6P [Occ=Once]
                                                                            bbuf0_sbu6Q [Occ=Once*] ->
                                                                            case
                                                                                readMutVar# [dt2_sbu5S
                                                                                             ipv6_sbu6M]
                                                                            of
                                                                            { (#,#) ipv8_sbu6S [Occ=Once]
                                                                                    ipv9_sbu6T ->
                                                                                  let {
                                                                                    sat_sbu71 [Occ=Once]
                                                                                      :: GHC.IO.Buffer.Buffer
                                                                                           GHC.IO.Buffer.CharBufElem
                                                                                    [LclId] =
                                                                                        [ipv9_sbu6T] \u []
                                                                                            case
                                                                                                ipv9_sbu6T
                                                                                            of
                                                                                            { GHC.IO.Buffer.Buffer dt9_sbu6V [Occ=Once]
                                                                                                                   dt15_sbu6W [Occ=Once]
                                                                                                                   ds16_sbu6X [Occ=Once]
                                                                                                                   dt16_sbu6Y [Occ=Once]
                                                                                                                   _ [Occ=Dead]
                                                                                                                   _ [Occ=Dead] ->
                                                                                                  GHC.IO.Buffer.Buffer [dt9_sbu6V
                                                                                                                        dt15_sbu6W
                                                                                                                        ds16_sbu6X
                                                                                                                        dt16_sbu6Y
                                                                                                                        0#
                                                                                                                        0#];
                                                                                            };
                                                                                  } in 
                                                                                    case
                                                                                        writeMutVar# [dt2_sbu5S
                                                                                                      sat_sbu71
                                                                                                      ipv8_sbu6S]
                                                                                    of
                                                                                    s2#_sbu72
                                                                                    { __DEFAULT ->
                                                                                          case
                                                                                              ipv9_sbu6T
                                                                                          of
                                                                                          { GHC.IO.Buffer.Buffer dt9_sbu74 [Occ=Once]
                                                                                                                 dt15_sbu75 [Occ=Once]
                                                                                                                 ds16_sbu76 [Occ=Once]
                                                                                                                 _ [Occ=Dead]
                                                                                                                 dt17_sbu78 [Occ=Once!]
                                                                                                                 _ [Occ=Dead] ->
                                                                                                case
                                                                                                    dt17_sbu78
                                                                                                of
                                                                                                wild7_sbu7a
                                                                                                { __DEFAULT ->
                                                                                                      case
                                                                                                          ds4_sbu5V
                                                                                                      of
                                                                                                      { GHC.Base.Nothing ->
                                                                                                            let {
                                                                                                              sat_sbu7k [Occ=Once]
                                                                                                                :: GHC.IO.Buffer.Buffer
                                                                                                                     GHC.Word.Word8
                                                                                                              [LclId] =
                                                                                                                  [bbuf0_sbu6Q
                                                                                                                   wild7_sbu7a] \u []
                                                                                                                      case
                                                                                                                          bbuf0_sbu6Q
                                                                                                                      of
                                                                                                                      { GHC.IO.Buffer.Buffer dt19_sbu7d [Occ=Once]
                                                                                                                                             dt20_sbu7e [Occ=Once]
                                                                                                                                             ds17_sbu7f [Occ=Once]
                                                                                                                                             dt21_sbu7g [Occ=Once]
                                                                                                                                             dt22_sbu7h [Occ=Once]
                                                                                                                                             dt23_sbu7i [Occ=Once] ->
                                                                                                                            case
                                                                                                                                +# [dt22_sbu7h
                                                                                                                                    wild7_sbu7a]
                                                                                                                            of
                                                                                                                            sat_sbu7j
                                                                                                                            { __DEFAULT ->
                                                                                                                                  GHC.IO.Buffer.Buffer [dt19_sbu7d
                                                                                                                                                        dt20_sbu7e
                                                                                                                                                        ds17_sbu7f
                                                                                                                                                        dt21_sbu7g
                                                                                                                                                        sat_sbu7j
                                                                                                                                                        dt23_sbu7i];
                                                                                                                            };
                                                                                                                      };
                                                                                                            } in 
                                                                                                              case
                                                                                                                  writeMutVar# [dt_sbu5P
                                                                                                                                sat_sbu7k
                                                                                                                                s2#_sbu72]
                                                                                                              of
                                                                                                              s2#1_sbu7l
                                                                                                              { __DEFAULT ->
                                                                                                                    $w$j_sbu6d
                                                                                                                        s2#1_sbu7l;
                                                                                                              };
                                                                                                        GHC.Base.Just decoder_sbu7m [Occ=Once!] ->
                                                                                                            case
                                                                                                                decoder_sbu7m
                                                                                                            of
                                                                                                            { GHC.IO.Encoding.Types.BufferCodec ds17_sbu7o [Occ=Once]
                                                                                                                                                ds18_sbu7p [Occ=Once]
                                                                                                                                                _ [Occ=Dead]
                                                                                                                                                _ [Occ=Dead]
                                                                                                                                                ds21_sbu7s [Occ=Once!] ->
                                                                                                                  case
                                                                                                                      ds21_sbu7s
                                                                                                                          codec_state_sbu6P
                                                                                                                          s2#_sbu72
                                                                                                                  of
                                                                                                                  { (#,#) ipv10_sbu7u [Occ=Once]
                                                                                                                          _ [Occ=Dead] ->
                                                                                                                        let {
                                                                                                                          sat_sbu7w [Occ=Once]
                                                                                                                            :: GHC.IO.Buffer.Buffer
                                                                                                                                 GHC.IO.Buffer.CharBufElem
                                                                                                                          [LclId] =
                                                                                                                              CCCS GHC.IO.Buffer.Buffer! [dt9_sbu74
                                                                                                                                                          dt15_sbu75
                                                                                                                                                          ds16_sbu76
                                                                                                                                                          wild7_sbu7a
                                                                                                                                                          0#
                                                                                                                                                          0#];
                                                                                                                        } in 
                                                                                                                          case
                                                                                                                              GHC.IO.Handle.Internals.$wstreamEncode
                                                                                                                                  ds17_sbu7o
                                                                                                                                  ds18_sbu7p
                                                                                                                                  bbuf0_sbu6Q
                                                                                                                                  sat_sbu7w
                                                                                                                                  ipv10_sbu7u
                                                                                                                          of
                                                                                                                          { (#,#) ipv12_sbu7y [Occ=Once]
                                                                                                                                  ipv13_sbu7z [Occ=Once!] ->
                                                                                                                                case
                                                                                                                                    ipv13_sbu7z
                                                                                                                                of
                                                                                                                                { (,) bbuf1_sbu7B [Occ=Once]
                                                                                                                                      _ [Occ=Dead] ->
                                                                                                                                      case
                                                                                                                                          writeMutVar# [dt_sbu5P
                                                                                                                                                        bbuf1_sbu7B
                                                                                                                                                        ipv12_sbu7y]
                                                                                                                                      of
                                                                                                                                      s2#1_sbu7D
                                                                                                                                      { __DEFAULT ->
                                                                                                                                            $w$j_sbu6d
                                                                                                                                                s2#1_sbu7D;
                                                                                                                                      };
                                                                                                                                };
                                                                                                                          };
                                                                                                                  };
                                                                                                            };
                                                                                                      };
                                                                                                  0# ->
                                                                                                      case
                                                                                                          writeMutVar# [dt_sbu5P
                                                                                                                        bbuf0_sbu6Q
                                                                                                                        s2#_sbu72]
                                                                                                      of
                                                                                                      s2#1_sbu7E
                                                                                                      { __DEFAULT ->
                                                                                                            $w$j_sbu6d
                                                                                                                s2#1_sbu7E;
                                                                                                      };
                                                                                                };
                                                                                          };
                                                                                    };
                                                                            };
                                                                      };
                                                                };
                                                            1# -> $w$j_sbu6d ipv4_sbu6A;
                                                          };
                                                      GHC.IO.Buffer.WriteBuffer ->
                                                          $w$j_sbu6d ipv4_sbu6A;
                                                    };
                                              };
                                        };
                                    GHC.IO.Buffer.WriteBuffer ->
                                        case ==# [dt7_sbu6b dt8_sbu6c] of {
                                          __DEFAULT -> GHC.IO.Handle.Internals.flushCharBuffer2;
                                          1# -> $w$j_sbu6d ipv2_sbu64;
                                        };
                                  };
                          };
                    };
              };
        };

GHC.IO.Handle.hTell1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Integer.Type.Integer #)
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [handle_sbu7H eta_B1]
        GHC.IO.Handle.Internals.wantSeekableHandle1
            GHC.IO.Handle.hGetPosn3
            handle_sbu7H
            GHC.IO.Handle.hGetPosn2
            eta_B1;

GHC.IO.Handle.hTell
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Types.IO GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hTell1 eta_B2 eta_B1;

lvl12_rbnWU :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hSeek"#;

lvl13_rbnWV :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl12_rbnWU;

lvl14_rbnWW :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

GHC.IO.Handle.hSeek1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Device.SeekMode
     -> GHC.Integer.Type.Integer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=4, Str=<S,1*U><L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbu7I mode_sbu7J offset_sbu7K eta_sbu7L]
        let {
          lvl48_sbu7M [Occ=OnceL!, Dmd=<L,U(U)>] :: GHC.Types.Int
          [LclId] =
              [offset_sbu7K] \u []
                  case GHC.Integer.Type.integerToInt offset_sbu7K of wild_sbu7N {
                    __DEFAULT -> GHC.Types.I# [wild_sbu7N];
                  }; } in
        let {
          lvl49_sbu7O [Occ=OnceL!, Dmd=<L,U(U)>] :: GHC.Types.Int
          [LclId] =
              [offset_sbu7K] \u []
                  case
                      GHC.Integer.Type.geInteger# offset_sbu7K lvl14_rbnWW
                  of
                  v_sbu7P
                  { __DEFAULT -> GHC.Types.I# [v_sbu7P];
                  }; } in
        let {
          sat_sbuak [Occ=Once]
            :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
          [LclId] =
              [mode_sbu7J offset_sbu7K lvl48_sbu7M lvl49_sbu7O] \r [handle__sbu7Q
                                                                    eta1_sbu7R]
                  case handle__sbu7Q of wild_sbu7S {
                    GHC.IO.Handle.Types.Handle__ $dIODevice_sbu7T [Occ=Once*]
                                                 $dBufferedIO_sbu7U [Occ=Once]
                                                 _ [Occ=Dead]
                                                 ds_sbu7W
                                                 _ [Occ=Dead]
                                                 dt_sbu7Y
                                                 _ [Occ=Dead]
                                                 dt1_sbu80 [Occ=Once]
                                                 dt2_sbu81
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 ds4_sbu84
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead] ->
                        case readMutVar# [dt2_sbu81 eta1_sbu7R] of {
                          (#,#) ipv_sbu8a ipv1_sbu8b [Occ=Once!] ->
                              case ipv1_sbu8b of {
                                GHC.IO.Buffer.Buffer dt4_sbu8d [Occ=Once]
                                                     dt5_sbu8e [Occ=Once]
                                                     ds10_sbu8f [Occ=Once!]
                                                     dt6_sbu8g [Occ=Once]
                                                     dt7_sbu8h
                                                     dt8_sbu8i ->
                                    case ds10_sbu8f of {
                                      GHC.IO.Buffer.ReadBuffer ->
                                          let-no-escape {
                                            $j_sbu8k [Occ=Once*T[0], Dmd=<L,1*U(U,U)>]
                                              :: (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                            [LclId[JoinId(0)], Unf=OtherCon []] =
                                                [mode_sbu7J
                                                 offset_sbu7K
                                                 wild_sbu7S
                                                 $dIODevice_sbu7T
                                                 ds_sbu7W
                                                 dt_sbu7Y
                                                 dt1_sbu80
                                                 dt2_sbu81
                                                 ds4_sbu84
                                                 ipv_sbu8a] \r []
                                                    case readMutVar# [dt2_sbu81 ipv_sbu8a] of {
                                                      (#,#) ipv2_sbu8m [Occ=Once*]
                                                            ipv3_sbu8n [Occ=Once!] ->
                                                          case ipv3_sbu8n of {
                                                            GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                 _ [Occ=Dead]
                                                                                 ds12_sbu8r [Occ=Once!]
                                                                                 _ [Occ=Dead]
                                                                                 dt12_sbu8t [Occ=Once]
                                                                                 dt13_sbu8u [Occ=Once] ->
                                                                case ds12_sbu8r of {
                                                                  GHC.IO.Buffer.ReadBuffer ->
                                                                      case
                                                                          ==# [dt12_sbu8t
                                                                               dt13_sbu8u]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            case
                                                                                readMutVar# [dt1_sbu80
                                                                                             ipv2_sbu8m]
                                                                            of
                                                                            { (#,#) ipv4_sbu8y [Occ=Once]
                                                                                    ipv5_sbu8z [Occ=Once!] ->
                                                                                  case
                                                                                      ipv5_sbu8z
                                                                                  of
                                                                                  { (,) codec_state_sbu8B [Occ=Once]
                                                                                        bbuf0_sbu8C [Occ=Once*] ->
                                                                                        case
                                                                                            readMutVar# [dt2_sbu81
                                                                                                         ipv4_sbu8y]
                                                                                        of
                                                                                        { (#,#) ipv6_sbu8E [Occ=Once]
                                                                                                ipv7_sbu8F ->
                                                                                              let {
                                                                                                sat_sbu8N [Occ=Once]
                                                                                                  :: GHC.IO.Buffer.Buffer
                                                                                                       GHC.IO.Buffer.CharBufElem
                                                                                                [LclId] =
                                                                                                    [ipv7_sbu8F] \u []
                                                                                                        case
                                                                                                            ipv7_sbu8F
                                                                                                        of
                                                                                                        { GHC.IO.Buffer.Buffer dt14_sbu8H [Occ=Once]
                                                                                                                               dt15_sbu8I [Occ=Once]
                                                                                                                               ds15_sbu8J [Occ=Once]
                                                                                                                               dt16_sbu8K [Occ=Once]
                                                                                                                               _ [Occ=Dead]
                                                                                                                               _ [Occ=Dead] ->
                                                                                                              GHC.IO.Buffer.Buffer [dt14_sbu8H
                                                                                                                                    dt15_sbu8I
                                                                                                                                    ds15_sbu8J
                                                                                                                                    dt16_sbu8K
                                                                                                                                    0#
                                                                                                                                    0#];
                                                                                                        };
                                                                                              } in 
                                                                                                case
                                                                                                    writeMutVar# [dt2_sbu81
                                                                                                                  sat_sbu8N
                                                                                                                  ipv6_sbu8E]
                                                                                                of
                                                                                                s2#_sbu8O
                                                                                                { __DEFAULT ->
                                                                                                      case
                                                                                                          ipv7_sbu8F
                                                                                                      of
                                                                                                      { GHC.IO.Buffer.Buffer dt14_sbu8Q [Occ=Once]
                                                                                                                             dt15_sbu8R [Occ=Once]
                                                                                                                             ds15_sbu8S [Occ=Once]
                                                                                                                             _ [Occ=Dead]
                                                                                                                             dt17_sbu8U [Occ=Once!]
                                                                                                                             _ [Occ=Dead] ->
                                                                                                            case
                                                                                                                dt17_sbu8U
                                                                                                            of
                                                                                                            wild7_sbu8W
                                                                                                            { __DEFAULT ->
                                                                                                                  case
                                                                                                                      ds4_sbu84
                                                                                                                  of
                                                                                                                  { GHC.Base.Nothing ->
                                                                                                                        let {
                                                                                                                          sat_sbu96 [Occ=Once]
                                                                                                                            :: GHC.IO.Buffer.Buffer
                                                                                                                                 GHC.Word.Word8
                                                                                                                          [LclId] =
                                                                                                                              [bbuf0_sbu8C
                                                                                                                               wild7_sbu8W] \u []
                                                                                                                                  case
                                                                                                                                      bbuf0_sbu8C
                                                                                                                                  of
                                                                                                                                  { GHC.IO.Buffer.Buffer dt19_sbu8Z [Occ=Once]
                                                                                                                                                         dt20_sbu90 [Occ=Once]
                                                                                                                                                         ds16_sbu91 [Occ=Once]
                                                                                                                                                         dt21_sbu92 [Occ=Once]
                                                                                                                                                         dt22_sbu93 [Occ=Once]
                                                                                                                                                         dt23_sbu94 [Occ=Once] ->
                                                                                                                                        case
                                                                                                                                            +# [dt22_sbu93
                                                                                                                                                wild7_sbu8W]
                                                                                                                                        of
                                                                                                                                        sat_sbu95
                                                                                                                                        { __DEFAULT ->
                                                                                                                                              GHC.IO.Buffer.Buffer [dt19_sbu8Z
                                                                                                                                                                    dt20_sbu90
                                                                                                                                                                    ds16_sbu91
                                                                                                                                                                    dt21_sbu92
                                                                                                                                                                    sat_sbu95
                                                                                                                                                                    dt23_sbu94];
                                                                                                                                        };
                                                                                                                                  };
                                                                                                                        } in 
                                                                                                                          case
                                                                                                                              writeMutVar# [dt_sbu7Y
                                                                                                                                            sat_sbu96
                                                                                                                                            s2#_sbu8O]
                                                                                                                          of
                                                                                                                          s2#1_sbu97
                                                                                                                          { __DEFAULT ->
                                                                                                                                case
                                                                                                                                    GHC.IO.Handle.Internals.flushBuffer2
                                                                                                                                        wild_sbu7S
                                                                                                                                        s2#1_sbu97
                                                                                                                                of
                                                                                                                                { (#,#) ipv8_sbu99 [Occ=Once]
                                                                                                                                        _ [Occ=Dead] ->
                                                                                                                                      GHC.IO.Device.seek
                                                                                                                                          $dIODevice_sbu7T
                                                                                                                                          ds_sbu7W
                                                                                                                                          mode_sbu7J
                                                                                                                                          offset_sbu7K
                                                                                                                                          ipv8_sbu99;
                                                                                                                                };
                                                                                                                          };
                                                                                                                    GHC.Base.Just decoder_sbu9b [Occ=Once!] ->
                                                                                                                        case
                                                                                                                            decoder_sbu9b
                                                                                                                        of
                                                                                                                        { GHC.IO.Encoding.Types.BufferCodec ds16_sbu9d [Occ=Once]
                                                                                                                                                            ds17_sbu9e [Occ=Once]
                                                                                                                                                            _ [Occ=Dead]
                                                                                                                                                            _ [Occ=Dead]
                                                                                                                                                            ds20_sbu9h [Occ=Once!] ->
                                                                                                                              case
                                                                                                                                  ds20_sbu9h
                                                                                                                                      codec_state_sbu8B
                                                                                                                                      s2#_sbu8O
                                                                                                                              of
                                                                                                                              { (#,#) ipv8_sbu9j [Occ=Once]
                                                                                                                                      _ [Occ=Dead] ->
                                                                                                                                    let {
                                                                                                                                      sat_sbu9l [Occ=Once]
                                                                                                                                        :: GHC.IO.Buffer.Buffer
                                                                                                                                             GHC.IO.Buffer.CharBufElem
                                                                                                                                      [LclId] =
                                                                                                                                          CCCS GHC.IO.Buffer.Buffer! [dt14_sbu8Q
                                                                                                                                                                      dt15_sbu8R
                                                                                                                                                                      ds15_sbu8S
                                                                                                                                                                      wild7_sbu8W
                                                                                                                                                                      0#
                                                                                                                                                                      0#];
                                                                                                                                    } in 
                                                                                                                                      case
                                                                                                                                          GHC.IO.Handle.Internals.$wstreamEncode
                                                                                                                                              ds16_sbu9d
                                                                                                                                              ds17_sbu9e
                                                                                                                                              bbuf0_sbu8C
                                                                                                                                              sat_sbu9l
                                                                                                                                              ipv8_sbu9j
                                                                                                                                      of
                                                                                                                                      { (#,#) ipv10_sbu9n [Occ=Once]
                                                                                                                                              ipv11_sbu9o [Occ=Once!] ->
                                                                                                                                            case
                                                                                                                                                ipv11_sbu9o
                                                                                                                                            of
                                                                                                                                            { (,) bbuf1_sbu9q [Occ=Once]
                                                                                                                                                  _ [Occ=Dead] ->
                                                                                                                                                  case
                                                                                                                                                      writeMutVar# [dt_sbu7Y
                                                                                                                                                                    bbuf1_sbu9q
                                                                                                                                                                    ipv10_sbu9n]
                                                                                                                                                  of
                                                                                                                                                  s2#1_sbu9s
                                                                                                                                                  { __DEFAULT ->
                                                                                                                                                        case
                                                                                                                                                            GHC.IO.Handle.Internals.flushBuffer2
                                                                                                                                                                wild_sbu7S
                                                                                                                                                                s2#1_sbu9s
                                                                                                                                                        of
                                                                                                                                                        { (#,#) ipv12_sbu9u [Occ=Once]
                                                                                                                                                                _ [Occ=Dead] ->
                                                                                                                                                              GHC.IO.Device.seek
                                                                                                                                                                  $dIODevice_sbu7T
                                                                                                                                                                  ds_sbu7W
                                                                                                                                                                  mode_sbu7J
                                                                                                                                                                  offset_sbu7K
                                                                                                                                                                  ipv12_sbu9u;
                                                                                                                                                        };
                                                                                                                                                  };
                                                                                                                                            };
                                                                                                                                      };
                                                                                                                              };
                                                                                                                        };
                                                                                                                  };
                                                                                                              0# ->
                                                                                                                  case
                                                                                                                      writeMutVar# [dt_sbu7Y
                                                                                                                                    bbuf0_sbu8C
                                                                                                                                    s2#_sbu8O]
                                                                                                                  of
                                                                                                                  s2#1_sbu9w
                                                                                                                  { __DEFAULT ->
                                                                                                                        case
                                                                                                                            GHC.IO.Handle.Internals.flushBuffer2
                                                                                                                                wild_sbu7S
                                                                                                                                s2#1_sbu9w
                                                                                                                        of
                                                                                                                        { (#,#) ipv8_sbu9y [Occ=Once]
                                                                                                                                _ [Occ=Dead] ->
                                                                                                                              GHC.IO.Device.seek
                                                                                                                                  $dIODevice_sbu7T
                                                                                                                                  ds_sbu7W
                                                                                                                                  mode_sbu7J
                                                                                                                                  offset_sbu7K
                                                                                                                                  ipv8_sbu9y;
                                                                                                                        };
                                                                                                                  };
                                                                                                            };
                                                                                                      };
                                                                                                };
                                                                                        };
                                                                                  };
                                                                            };
                                                                        1# ->
                                                                            case
                                                                                GHC.IO.Handle.Internals.flushBuffer2
                                                                                    wild_sbu7S
                                                                                    ipv2_sbu8m
                                                                            of
                                                                            { (#,#) ipv4_sbu9B [Occ=Once]
                                                                                    _ [Occ=Dead] ->
                                                                                  GHC.IO.Device.seek
                                                                                      $dIODevice_sbu7T
                                                                                      ds_sbu7W
                                                                                      mode_sbu7J
                                                                                      offset_sbu7K
                                                                                      ipv4_sbu9B;
                                                                            };
                                                                      };
                                                                  GHC.IO.Buffer.WriteBuffer ->
                                                                      case
                                                                          GHC.IO.Handle.Internals.flushBuffer2
                                                                              wild_sbu7S ipv2_sbu8m
                                                                      of
                                                                      { (#,#) ipv4_sbu9E [Occ=Once]
                                                                              _ [Occ=Dead] ->
                                                                            GHC.IO.Device.seek
                                                                                $dIODevice_sbu7T
                                                                                ds_sbu7W
                                                                                mode_sbu7J
                                                                                offset_sbu7K
                                                                                ipv4_sbu9E;
                                                                      };
                                                                };
                                                          };
                                                    };
                                          } in 
                                            case mode_sbu7J of {
                                              __DEFAULT -> $j_sbu8k;
                                              GHC.IO.Device.RelativeSeek ->
                                                  case ds4_sbu84 of {
                                                    GHC.Base.Nothing ->
                                                        case lvl49_sbu7O of {
                                                          GHC.Types.I# v1_sbu9J [Occ=Once!] ->
                                                              case v1_sbu9J of {
                                                                __DEFAULT -> $j_sbu8k;
                                                                1# ->
                                                                    case
                                                                        -# [dt8_sbu8i dt7_sbu8h]
                                                                    of
                                                                    sat_sbu9L
                                                                    { __DEFAULT ->
                                                                          case
                                                                              GHC.Integer.Type.smallInteger
                                                                                  sat_sbu9L
                                                                          of
                                                                          sat_sbu9M
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    GHC.Integer.Type.ltInteger#
                                                                                        offset_sbu7K
                                                                                        sat_sbu9M
                                                                                of
                                                                                { __DEFAULT ->
                                                                                      $j_sbu8k;
                                                                                  1# ->
                                                                                      let {
                                                                                        sat_sbu9R [Occ=Once]
                                                                                          :: GHC.IO.Buffer.Buffer
                                                                                               GHC.IO.Buffer.CharBufElem
                                                                                        [LclId] =
                                                                                            [lvl48_sbu7M
                                                                                             dt4_sbu8d
                                                                                             dt5_sbu8e
                                                                                             dt6_sbu8g
                                                                                             dt7_sbu8h
                                                                                             dt8_sbu8i] \u []
                                                                                                case
                                                                                                    lvl48_sbu7M
                                                                                                of
                                                                                                { GHC.Types.I# y_sbu9P [Occ=Once] ->
                                                                                                      case
                                                                                                          +# [dt7_sbu8h
                                                                                                              y_sbu9P]
                                                                                                      of
                                                                                                      sat_sbu9Q
                                                                                                      { __DEFAULT ->
                                                                                                            GHC.IO.Buffer.Buffer [dt4_sbu8d
                                                                                                                                  dt5_sbu8e
                                                                                                                                  GHC.IO.Buffer.ReadBuffer
                                                                                                                                  dt6_sbu8g
                                                                                                                                  sat_sbu9Q
                                                                                                                                  dt8_sbu8i];
                                                                                                      };
                                                                                                };
                                                                                      } in 
                                                                                        case
                                                                                            writeMutVar# [dt2_sbu81
                                                                                                          sat_sbu9R
                                                                                                          ipv_sbu8a]
                                                                                        of
                                                                                        s2#_sbu9S
                                                                                        { __DEFAULT ->
                                                                                              (#,#) [s2#_sbu9S
                                                                                                     GHC.Tuple.()];
                                                                                        };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                    GHC.Base.Just _ [Occ=Dead] -> $j_sbu8k;
                                                  };
                                            };
                                      GHC.IO.Buffer.WriteBuffer ->
                                          case readMutVar# [dt_sbu7Y ipv_sbu8a] of {
                                            (#,#) ipv2_sbu9V [Occ=Once*] ipv3_sbu9W [Occ=Once!] ->
                                                case ipv3_sbu9W of {
                                                  GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       ds12_sbua0 [Occ=Once!]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                                      case ds12_sbua0 of {
                                                        GHC.IO.Buffer.ReadBuffer ->
                                                            GHC.IO.Device.seek
                                                                $dIODevice_sbu7T
                                                                ds_sbu7W
                                                                mode_sbu7J
                                                                offset_sbu7K
                                                                ipv2_sbu9V;
                                                        GHC.IO.Buffer.WriteBuffer ->
                                                            case
                                                                readMutVar# [dt_sbu7Y ipv2_sbu9V]
                                                            of
                                                            { (#,#) ipv4_sbua6 [Occ=Once*]
                                                                    ipv5_sbua7 [Occ=Once!] ->
                                                                  case ipv5_sbua7 of wild5_sbua8 {
                                                                    GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         dt17_sbuad [Occ=Once]
                                                                                         dt18_sbuae [Occ=Once] ->
                                                                        case
                                                                            ==# [dt17_sbuad
                                                                                 dt18_sbuae]
                                                                        of
                                                                        { __DEFAULT ->
                                                                              case
                                                                                  GHC.IO.BufferedIO.flushWriteBuffer
                                                                                      $dBufferedIO_sbu7U
                                                                                      ds_sbu7W
                                                                                      wild5_sbua8
                                                                                      ipv4_sbua6
                                                                              of
                                                                              { (#,#) ipv6_sbuah [Occ=Once]
                                                                                      ipv7_sbuai [Occ=Once] ->
                                                                                    case
                                                                                        writeMutVar# [dt_sbu7Y
                                                                                                      ipv7_sbuai
                                                                                                      ipv6_sbuah]
                                                                                    of
                                                                                    s2#_sbuaj
                                                                                    { __DEFAULT ->
                                                                                          GHC.IO.Device.seek
                                                                                              $dIODevice_sbu7T
                                                                                              ds_sbu7W
                                                                                              mode_sbu7J
                                                                                              offset_sbu7K
                                                                                              s2#_sbuaj;
                                                                                    };
                                                                              };
                                                                          1# ->
                                                                              GHC.IO.Device.seek
                                                                                  $dIODevice_sbu7T
                                                                                  ds_sbu7W
                                                                                  mode_sbu7J
                                                                                  offset_sbu7K
                                                                                  ipv4_sbua6;
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
                  };
        } in 
          GHC.IO.Handle.Internals.wantSeekableHandle1
              lvl13_rbnWV handle_sbu7I sat_sbuak eta_sbu7L;

GHC.IO.Handle.hSeek
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Device.SeekMode
     -> GHC.Integer.Type.Integer
     -> GHC.Types.IO ()
[GblId, Arity=4, Str=<S,1*U><L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.hSeek1 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.hSetPosn1
  :: GHC.IO.Handle.HandlePosn
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S(SL),1*U(1*U,U)><S,U>, Unf=OtherCon []] =
    [] \r [ds_sbual eta_sbuam]
        case ds_sbual of {
          GHC.IO.Handle.HandlePosn h_sbuao [Occ=Once] i_sbuap [Occ=Once] ->
              GHC.IO.Handle.hSeek1
                  h_sbuao GHC.IO.Device.AbsoluteSeek i_sbuap eta_sbuam;
        };

GHC.IO.Handle.hSetPosn
  :: GHC.IO.Handle.HandlePosn -> GHC.Types.IO ()
[GblId, Arity=2, Str=<S(SL),1*U(1*U,U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hSetPosn1 eta_B2 eta_B1;

GHC.IO.Handle.hGetEncoding4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hGetEncoding"#;

GHC.IO.Handle.hGetEncoding3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hGetEncoding4;

GHC.IO.Handle.hGetEncoding2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__,
            GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding) #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [h__sbuaq s1_sbuar]
        case h__sbuaq of wild_sbuas {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds5_sbuaF [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              let {
                sat_sbuaJ [Occ=Once]
                  :: (GHC.IO.Handle.Types.Handle__,
                      GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding)
                [LclId] =
                    CCCS (,)! [wild_sbuas ds5_sbuaF];
              } in  (#,#) [s1_sbuar sat_sbuaJ];
        };

GHC.IO.Handle.hGetEncoding1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [hdl_sbuaK eta_sbuaL]
        case hdl_sbuaK of wild_sbuaM {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbuaO ->
              case getMaskingState# [eta_sbuaL] of {
                (#,#) ipv_sbuaQ [Occ=Once*] ipv1_sbuaR [Occ=Once!] ->
                    let {
                      io_sbuaS [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbuaM dt_sbuaO] \r [s_sbuaT]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hGetEncoding3
                                      wild_sbuaM
                                      GHC.IO.Handle.hGetEncoding2
                                      dt_sbuaO
                                      s_sbuaT
                              of
                              { (#,#) ipv2_sbuaV [Occ=Once] ipv3_sbuaW [Occ=Once!] ->
                                    case ipv3_sbuaW of {
                                      (,) h'_sbuaY [Occ=Once] v_sbuaZ [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbuaO h'_sbuaY ipv2_sbuaV]
                                          of
                                          s2#_sbub0
                                          { __DEFAULT -> (#,#) [s2#_sbub0 v_sbuaZ];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbuaR of {
                        __DEFAULT -> io_sbuaS ipv_sbuaQ;
                        0# -> maskAsyncExceptions# [io_sbuaS ipv_sbuaQ];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sbub3
                                           _ [Occ=Dead] ->
              case getMaskingState# [eta_sbuaL] of {
                (#,#) ipv_sbub6 [Occ=Once*] ipv1_sbub7 [Occ=Once!] ->
                    let {
                      io_sbub8 [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbuaM dt_sbub3] \r [s_sbub9]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hGetEncoding3
                                      wild_sbuaM
                                      GHC.IO.Handle.hGetEncoding2
                                      dt_sbub3
                                      s_sbub9
                              of
                              { (#,#) ipv2_sbubb [Occ=Once] ipv3_sbubc [Occ=Once!] ->
                                    case ipv3_sbubc of {
                                      (,) h'_sbube [Occ=Once] v_sbubf [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbub3 h'_sbube ipv2_sbubb]
                                          of
                                          s2#_sbubg
                                          { __DEFAULT -> (#,#) [s2#_sbubg v_sbubf];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbub7 of {
                        __DEFAULT -> io_sbub8 ipv_sbub6;
                        0# -> maskAsyncExceptions# [io_sbub8 ipv_sbub6];
                      };
              };
        };

GHC.IO.Handle.hGetEncoding
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Types.IO (GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hGetEncoding1 eta_B2 eta_B1;

lvl15_rbnWX :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hSetEncoding"#;

lvl16_rbnWY :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl15_rbnWX;

lvl17_rbnWZ :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "last_decode"#;

lvl18_rbnX0 :: forall ds. (ds, GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl17_rbnWZ of sat_sbubi {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sbubi;
        };

GHC.IO.Handle.hSetEncoding1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Encoding.Types.TextEncoding
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [hdl_sbubj encoding_sbubk eta_sbubl]
        let {
          lvl48_sbubm [Occ=OnceL*]
            :: GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
          [LclId, Unf=OtherCon []] =
              CCCS GHC.Base.Just! [encoding_sbubk]; } in
        let {
          sat_sbuev [Occ=Once]
            :: GHC.IO.Handle.Types.Handle__
               -> GHC.Types.IO GHC.IO.Handle.Types.Handle__
          [LclId] =
              [encoding_sbubk lvl48_sbubm] \r [h__sbubn eta1_sbubo]
                  case h__sbubn of {
                    GHC.IO.Handle.Types.Handle__ $dIODevice_sbubq [Occ=Once*]
                                                 $dBufferedIO_sbubr [Occ=Once*]
                                                 $dTypeable_sbubs [Occ=Once*]
                                                 ds_sbubt [Occ=Once*]
                                                 ds1_sbubu
                                                 dt_sbubv
                                                 ds2_sbubw [Occ=Once*]
                                                 dt1_sbubx [Occ=Once]
                                                 dt2_sbuby
                                                 dt3_sbubz [Occ=Once*]
                                                 ds3_sbubA [Occ=Once*!]
                                                 ds4_sbubB
                                                 _ [Occ=Dead]
                                                 ds6_sbubD [Occ=Once*]
                                                 ds7_sbubE [Occ=Once*]
                                                 ds8_sbubF [Occ=Once*] ->
                        case readMutVar# [dt2_sbuby eta1_sbubo] of {
                          (#,#) ipv_sbubH [Occ=Once*] ipv1_sbubI [Occ=Once!] ->
                              case ipv1_sbubI of {
                                GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                     _ [Occ=Dead]
                                                     ds10_sbubM [Occ=Once!]
                                                     _ [Occ=Dead]
                                                     dt7_sbubO [Occ=Once]
                                                     dt8_sbubP [Occ=Once] ->
                                    let-no-escape {
                                      $w$j_sbubQ [InlPrag=NOUSERINLINE[0],
                                                  Occ=Once*!T[1],
                                                  Dmd=<L,1*C1(U)>]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                 GHC.IO.Handle.Types.Handle__ #)
                                      [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                          sat-only [encoding_sbubk
                                                    lvl48_sbubm
                                                    $dIODevice_sbubq
                                                    $dBufferedIO_sbubr
                                                    $dTypeable_sbubs
                                                    ds_sbubt
                                                    ds1_sbubu
                                                    dt_sbubv
                                                    ds2_sbubw
                                                    dt2_sbuby
                                                    dt3_sbubz
                                                    ds3_sbubA
                                                    ds4_sbubB
                                                    ds6_sbubD
                                                    ds7_sbubE
                                                    ds8_sbubF] \r [w_sbubR]
                                              let-no-escape {
                                                $w$j1_sbubS [InlPrag=NOUSERINLINE[0],
                                                             Occ=Once*!T[1],
                                                             Dmd=<L,1*C1(U)>]
                                                  :: GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.IO.Handle.Types.Handle__ #)
                                                [LclId[JoinId(1)],
                                                 Arity=1,
                                                 Str=<S,U>,
                                                 Unf=OtherCon []] =
                                                    sat-only [encoding_sbubk
                                                              lvl48_sbubm
                                                              $dIODevice_sbubq
                                                              $dBufferedIO_sbubr
                                                              $dTypeable_sbubs
                                                              ds_sbubt
                                                              ds1_sbubu
                                                              dt_sbubv
                                                              ds2_sbubw
                                                              dt2_sbuby
                                                              dt3_sbubz
                                                              ds6_sbubD
                                                              ds7_sbubE
                                                              ds8_sbubF] \r [w1_sbubT]
                                                        case encoding_sbubk of {
                                                          GHC.IO.Encoding.Types.TextEncoding _ [Occ=Dead]
                                                                                             ds13_sbubW [Occ=Once*]
                                                                                             ds14_sbubX [Occ=Once*] ->
                                                              let-no-escape {
                                                                $j_sbubY [Occ=Once*!T[2],
                                                                          Dmd=<L,1*C1(C1(U))>]
                                                                  :: GHC.Prim.State#
                                                                       GHC.Prim.RealWorld
                                                                     -> GHC.Base.Maybe
                                                                          (GHC.IO.Encoding.Types.TextDecoder
                                                                             dstate_ibkNi)
                                                                     -> (# GHC.Prim.State#
                                                                             GHC.Prim.RealWorld,
                                                                           GHC.IO.Handle.Types.Handle__ #)
                                                                [LclId[JoinId(2)],
                                                                 Arity=2,
                                                                 Str=<S,U><L,U>,
                                                                 Unf=OtherCon []] =
                                                                    sat-only [lvl48_sbubm
                                                                              $dIODevice_sbubq
                                                                              $dBufferedIO_sbubr
                                                                              $dTypeable_sbubs
                                                                              ds_sbubt
                                                                              ds1_sbubu
                                                                              dt_sbubv
                                                                              ds2_sbubw
                                                                              dt2_sbuby
                                                                              dt3_sbubz
                                                                              ds6_sbubD
                                                                              ds7_sbubE
                                                                              ds8_sbubF
                                                                              ds14_sbubX] \r [ipv2_sbubZ
                                                                                              ipv3_sbuc0]
                                                                        case
                                                                            ds1_sbubu
                                                                        of
                                                                        wild3_sbuc1
                                                                        { __DEFAULT ->
                                                                              case
                                                                                  readMutVar# [dt_sbubv
                                                                                               ipv2_sbubZ]
                                                                              of
                                                                              { (#,#) ipv4_sbuc3 [Occ=Once]
                                                                                      _ [Occ=Dead] ->
                                                                                    case
                                                                                        newMutVar# [lvl18_rbnX0
                                                                                                    ipv4_sbuc3]
                                                                                    of
                                                                                    { (#,#) ipv6_sbuc6 [Occ=Once]
                                                                                            ipv7_sbuc7 [Occ=Once] ->
                                                                                          let {
                                                                                            sat_sbuc8 [Occ=Once]
                                                                                              :: GHC.IO.Handle.Types.Handle__
                                                                                            [LclId] =
                                                                                                CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbubq
                                                                                                                                    $dBufferedIO_sbubr
                                                                                                                                    $dTypeable_sbubs
                                                                                                                                    ds_sbubt
                                                                                                                                    wild3_sbuc1
                                                                                                                                    dt_sbubv
                                                                                                                                    ds2_sbubw
                                                                                                                                    ipv7_sbuc7
                                                                                                                                    dt2_sbuby
                                                                                                                                    dt3_sbubz
                                                                                                                                    GHC.Base.Nothing
                                                                                                                                    ipv3_sbuc0
                                                                                                                                    lvl48_sbubm
                                                                                                                                    ds6_sbubD
                                                                                                                                    ds7_sbubE
                                                                                                                                    ds8_sbubF];
                                                                                          } in 
                                                                                            (#,#) [ipv6_sbuc6
                                                                                                   sat_sbuc8];
                                                                                    };
                                                                              };
                                                                          GHC.IO.Handle.Types.WriteHandle ->
                                                                              case
                                                                                  ds14_sbubX
                                                                                      ipv2_sbubZ
                                                                              of
                                                                              { (#,#) ipv4_sbuca [Occ=Once]
                                                                                      ipv5_sbucb [Occ=Once] ->
                                                                                    case
                                                                                        readMutVar# [dt_sbubv
                                                                                                     ipv4_sbuca]
                                                                                    of
                                                                                    { (#,#) ipv6_sbucd [Occ=Once]
                                                                                            _ [Occ=Dead] ->
                                                                                          case
                                                                                              newMutVar# [lvl18_rbnX0
                                                                                                          ipv6_sbucd]
                                                                                          of
                                                                                          { (#,#) ipv8_sbucg [Occ=Once]
                                                                                                  ipv9_sbuch [Occ=Once] ->
                                                                                                let {
                                                                                                  sat_sbuci [Occ=Once]
                                                                                                    :: GHC.Base.Maybe
                                                                                                         (GHC.IO.Encoding.Types.TextEncoder
                                                                                                            estate_ibkNj)
                                                                                                  [LclId] =
                                                                                                      CCCS GHC.Base.Just! [ipv5_sbucb]; } in
                                                                                                let {
                                                                                                  sat_sbucj [Occ=Once]
                                                                                                    :: GHC.IO.Handle.Types.Handle__
                                                                                                  [LclId] =
                                                                                                      CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbubq
                                                                                                                                          $dBufferedIO_sbubr
                                                                                                                                          $dTypeable_sbubs
                                                                                                                                          ds_sbubt
                                                                                                                                          GHC.IO.Handle.Types.WriteHandle
                                                                                                                                          dt_sbubv
                                                                                                                                          ds2_sbubw
                                                                                                                                          ipv9_sbuch
                                                                                                                                          dt2_sbuby
                                                                                                                                          dt3_sbubz
                                                                                                                                          sat_sbuci
                                                                                                                                          ipv3_sbuc0
                                                                                                                                          lvl48_sbubm
                                                                                                                                          ds6_sbubD
                                                                                                                                          ds7_sbubE
                                                                                                                                          ds8_sbubF];
                                                                                                } in 
                                                                                                  (#,#) [ipv8_sbucg
                                                                                                         sat_sbucj];
                                                                                          };
                                                                                    };
                                                                              };
                                                                          GHC.IO.Handle.Types.AppendHandle ->
                                                                              case
                                                                                  ds14_sbubX
                                                                                      ipv2_sbubZ
                                                                              of
                                                                              { (#,#) ipv4_sbucl [Occ=Once]
                                                                                      ipv5_sbucm [Occ=Once] ->
                                                                                    case
                                                                                        readMutVar# [dt_sbubv
                                                                                                     ipv4_sbucl]
                                                                                    of
                                                                                    { (#,#) ipv6_sbuco [Occ=Once]
                                                                                            _ [Occ=Dead] ->
                                                                                          case
                                                                                              newMutVar# [lvl18_rbnX0
                                                                                                          ipv6_sbuco]
                                                                                          of
                                                                                          { (#,#) ipv8_sbucr [Occ=Once]
                                                                                                  ipv9_sbucs [Occ=Once] ->
                                                                                                let {
                                                                                                  sat_sbuct [Occ=Once]
                                                                                                    :: GHC.Base.Maybe
                                                                                                         (GHC.IO.Encoding.Types.TextEncoder
                                                                                                            estate_ibkNj)
                                                                                                  [LclId] =
                                                                                                      CCCS GHC.Base.Just! [ipv5_sbucm]; } in
                                                                                                let {
                                                                                                  sat_sbucu [Occ=Once]
                                                                                                    :: GHC.IO.Handle.Types.Handle__
                                                                                                  [LclId] =
                                                                                                      CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbubq
                                                                                                                                          $dBufferedIO_sbubr
                                                                                                                                          $dTypeable_sbubs
                                                                                                                                          ds_sbubt
                                                                                                                                          GHC.IO.Handle.Types.AppendHandle
                                                                                                                                          dt_sbubv
                                                                                                                                          ds2_sbubw
                                                                                                                                          ipv9_sbucs
                                                                                                                                          dt2_sbuby
                                                                                                                                          dt3_sbubz
                                                                                                                                          sat_sbuct
                                                                                                                                          ipv3_sbuc0
                                                                                                                                          lvl48_sbubm
                                                                                                                                          ds6_sbubD
                                                                                                                                          ds7_sbubE
                                                                                                                                          ds8_sbubF];
                                                                                                } in 
                                                                                                  (#,#) [ipv8_sbucr
                                                                                                         sat_sbucu];
                                                                                          };
                                                                                    };
                                                                              };
                                                                          GHC.IO.Handle.Types.ReadWriteHandle ->
                                                                              case
                                                                                  ds14_sbubX
                                                                                      ipv2_sbubZ
                                                                              of
                                                                              { (#,#) ipv4_sbucw [Occ=Once]
                                                                                      ipv5_sbucx [Occ=Once] ->
                                                                                    case
                                                                                        readMutVar# [dt_sbubv
                                                                                                     ipv4_sbucw]
                                                                                    of
                                                                                    { (#,#) ipv6_sbucz [Occ=Once]
                                                                                            _ [Occ=Dead] ->
                                                                                          case
                                                                                              newMutVar# [lvl18_rbnX0
                                                                                                          ipv6_sbucz]
                                                                                          of
                                                                                          { (#,#) ipv8_sbucC [Occ=Once]
                                                                                                  ipv9_sbucD [Occ=Once] ->
                                                                                                let {
                                                                                                  sat_sbucE [Occ=Once]
                                                                                                    :: GHC.Base.Maybe
                                                                                                         (GHC.IO.Encoding.Types.TextEncoder
                                                                                                            estate_ibkNj)
                                                                                                  [LclId] =
                                                                                                      CCCS GHC.Base.Just! [ipv5_sbucx]; } in
                                                                                                let {
                                                                                                  sat_sbucF [Occ=Once]
                                                                                                    :: GHC.IO.Handle.Types.Handle__
                                                                                                  [LclId] =
                                                                                                      CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbubq
                                                                                                                                          $dBufferedIO_sbubr
                                                                                                                                          $dTypeable_sbubs
                                                                                                                                          ds_sbubt
                                                                                                                                          GHC.IO.Handle.Types.ReadWriteHandle
                                                                                                                                          dt_sbubv
                                                                                                                                          ds2_sbubw
                                                                                                                                          ipv9_sbucD
                                                                                                                                          dt2_sbuby
                                                                                                                                          dt3_sbubz
                                                                                                                                          sat_sbucE
                                                                                                                                          ipv3_sbuc0
                                                                                                                                          lvl48_sbubm
                                                                                                                                          ds6_sbubD
                                                                                                                                          ds7_sbubE
                                                                                                                                          ds8_sbubF];
                                                                                                } in 
                                                                                                  (#,#) [ipv8_sbucC
                                                                                                         sat_sbucF];
                                                                                          };
                                                                                    };
                                                                              };
                                                                        };
                                                              } in 
                                                                case ds1_sbubu of {
                                                                  __DEFAULT ->
                                                                      $j_sbubY
                                                                          w1_sbubT GHC.Base.Nothing;
                                                                  GHC.IO.Handle.Types.ReadHandle ->
                                                                      case ds13_sbubW w1_sbubT of {
                                                                        (#,#) ipv2_sbucI [Occ=Once]
                                                                              ipv3_sbucJ [Occ=Once] ->
                                                                            let {
                                                                              sat_sbucK [Occ=Once]
                                                                                :: GHC.Base.Maybe
                                                                                     (GHC.IO.Encoding.Types.TextDecoder
                                                                                        dstate_ibkNi)
                                                                              [LclId] =
                                                                                  CCCS GHC.Base.Just! [ipv3_sbucJ];
                                                                            } in 
                                                                              $j_sbubY
                                                                                  ipv2_sbucI
                                                                                  sat_sbucK;
                                                                      };
                                                                  GHC.IO.Handle.Types.ReadWriteHandle ->
                                                                      case ds13_sbubW w1_sbubT of {
                                                                        (#,#) ipv2_sbucM [Occ=Once]
                                                                              ipv3_sbucN [Occ=Once] ->
                                                                            let {
                                                                              sat_sbucO [Occ=Once]
                                                                                :: GHC.Base.Maybe
                                                                                     (GHC.IO.Encoding.Types.TextDecoder
                                                                                        dstate_ibkNi)
                                                                              [LclId] =
                                                                                  CCCS GHC.Base.Just! [ipv3_sbucN];
                                                                            } in 
                                                                              $j_sbubY
                                                                                  ipv2_sbucM
                                                                                  sat_sbucO;
                                                                      };
                                                                };
                                                        };
                                              } in 
                                                case ds4_sbubB of {
                                                  GHC.Base.Nothing ->
                                                      case ds3_sbubA of {
                                                        GHC.Base.Nothing -> $w$j1_sbubS w_sbubR;
                                                        GHC.Base.Just d_sbucR [Occ=Once!] ->
                                                            case d_sbucR of {
                                                              GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                                _ [Occ=Dead]
                                                                                                ds13_sbucV [Occ=Once]
                                                                                                _ [Occ=Dead]
                                                                                                _ [Occ=Dead] ->
                                                                  case ds13_sbucV w_sbubR of {
                                                                    (#,#) ipv2_sbucZ [Occ=Once]
                                                                          _ [Occ=Dead] ->
                                                                        $w$j1_sbubS ipv2_sbucZ;
                                                                  };
                                                            };
                                                      };
                                                  GHC.Base.Just d_sbud1 [Occ=Once!] ->
                                                      case d_sbud1 of {
                                                        GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                          _ [Occ=Dead]
                                                                                          ds13_sbud5 [Occ=Once]
                                                                                          _ [Occ=Dead]
                                                                                          _ [Occ=Dead] ->
                                                            case ds13_sbud5 w_sbubR of {
                                                              (#,#) ipv2_sbud9 [Occ=Once*]
                                                                    _ [Occ=Dead] ->
                                                                  case ds3_sbubA of {
                                                                    GHC.Base.Nothing ->
                                                                        $w$j1_sbubS ipv2_sbud9;
                                                                    GHC.Base.Just d1_sbudc [Occ=Once!] ->
                                                                        case d1_sbudc of {
                                                                          GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                                            _ [Occ=Dead]
                                                                                                            ds19_sbudg [Occ=Once]
                                                                                                            _ [Occ=Dead]
                                                                                                            _ [Occ=Dead] ->
                                                                              case
                                                                                  ds19_sbudg
                                                                                      ipv2_sbud9
                                                                              of
                                                                              { (#,#) ipv4_sbudk [Occ=Once]
                                                                                      _ [Occ=Dead] ->
                                                                                    $w$j1_sbubS
                                                                                        ipv4_sbudk;
                                                                              };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                    } in 
                                      case ds10_sbubM of {
                                        GHC.IO.Buffer.ReadBuffer ->
                                            case readMutVar# [dt2_sbuby ipv_sbubH] of {
                                              (#,#) ipv2_sbudo [Occ=Once*] ipv3_sbudp [Occ=Once!] ->
                                                  case ipv3_sbudp of {
                                                    GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                         _ [Occ=Dead]
                                                                         ds11_sbudt [Occ=Once!]
                                                                         _ [Occ=Dead]
                                                                         dt13_sbudv [Occ=Once]
                                                                         dt14_sbudw [Occ=Once] ->
                                                        case ds11_sbudt of {
                                                          GHC.IO.Buffer.ReadBuffer ->
                                                              case ==# [dt13_sbudv dt14_sbudw] of {
                                                                __DEFAULT ->
                                                                    case
                                                                        readMutVar# [dt1_sbubx
                                                                                     ipv2_sbudo]
                                                                    of
                                                                    { (#,#) ipv4_sbudA [Occ=Once]
                                                                            ipv5_sbudB [Occ=Once!] ->
                                                                          case ipv5_sbudB of {
                                                                            (,) codec_state_sbudD [Occ=Once]
                                                                                bbuf0_sbudE [Occ=Once*] ->
                                                                                case
                                                                                    readMutVar# [dt2_sbuby
                                                                                                 ipv4_sbudA]
                                                                                of
                                                                                { (#,#) ipv6_sbudG [Occ=Once]
                                                                                        ipv7_sbudH ->
                                                                                      let {
                                                                                        sat_sbudP [Occ=Once]
                                                                                          :: GHC.IO.Buffer.Buffer
                                                                                               GHC.IO.Buffer.CharBufElem
                                                                                        [LclId] =
                                                                                            [ipv7_sbudH] \u []
                                                                                                case
                                                                                                    ipv7_sbudH
                                                                                                of
                                                                                                { GHC.IO.Buffer.Buffer dt9_sbudJ [Occ=Once]
                                                                                                                       dt15_sbudK [Occ=Once]
                                                                                                                       ds15_sbudL [Occ=Once]
                                                                                                                       dt16_sbudM [Occ=Once]
                                                                                                                       _ [Occ=Dead]
                                                                                                                       _ [Occ=Dead] ->
                                                                                                      GHC.IO.Buffer.Buffer [dt9_sbudJ
                                                                                                                            dt15_sbudK
                                                                                                                            ds15_sbudL
                                                                                                                            dt16_sbudM
                                                                                                                            0#
                                                                                                                            0#];
                                                                                                };
                                                                                      } in 
                                                                                        case
                                                                                            writeMutVar# [dt2_sbuby
                                                                                                          sat_sbudP
                                                                                                          ipv6_sbudG]
                                                                                        of
                                                                                        s2#_sbudQ
                                                                                        { __DEFAULT ->
                                                                                              case
                                                                                                  ipv7_sbudH
                                                                                              of
                                                                                              { GHC.IO.Buffer.Buffer dt9_sbudS [Occ=Once]
                                                                                                                     dt15_sbudT [Occ=Once]
                                                                                                                     ds15_sbudU [Occ=Once]
                                                                                                                     _ [Occ=Dead]
                                                                                                                     dt17_sbudW [Occ=Once!]
                                                                                                                     _ [Occ=Dead] ->
                                                                                                    case
                                                                                                        dt17_sbudW
                                                                                                    of
                                                                                                    wild7_sbudY
                                                                                                    { __DEFAULT ->
                                                                                                          case
                                                                                                              ds4_sbubB
                                                                                                          of
                                                                                                          { GHC.Base.Nothing ->
                                                                                                                let {
                                                                                                                  sat_sbue8 [Occ=Once]
                                                                                                                    :: GHC.IO.Buffer.Buffer
                                                                                                                         GHC.Word.Word8
                                                                                                                  [LclId] =
                                                                                                                      [bbuf0_sbudE
                                                                                                                       wild7_sbudY] \u []
                                                                                                                          case
                                                                                                                              bbuf0_sbudE
                                                                                                                          of
                                                                                                                          { GHC.IO.Buffer.Buffer dt19_sbue1 [Occ=Once]
                                                                                                                                                 dt20_sbue2 [Occ=Once]
                                                                                                                                                 ds16_sbue3 [Occ=Once]
                                                                                                                                                 dt21_sbue4 [Occ=Once]
                                                                                                                                                 dt22_sbue5 [Occ=Once]
                                                                                                                                                 dt23_sbue6 [Occ=Once] ->
                                                                                                                                case
                                                                                                                                    +# [dt22_sbue5
                                                                                                                                        wild7_sbudY]
                                                                                                                                of
                                                                                                                                sat_sbue7
                                                                                                                                { __DEFAULT ->
                                                                                                                                      GHC.IO.Buffer.Buffer [dt19_sbue1
                                                                                                                                                            dt20_sbue2
                                                                                                                                                            ds16_sbue3
                                                                                                                                                            dt21_sbue4
                                                                                                                                                            sat_sbue7
                                                                                                                                                            dt23_sbue6];
                                                                                                                                };
                                                                                                                          };
                                                                                                                } in 
                                                                                                                  case
                                                                                                                      writeMutVar# [dt_sbubv
                                                                                                                                    sat_sbue8
                                                                                                                                    s2#_sbudQ]
                                                                                                                  of
                                                                                                                  s2#1_sbue9
                                                                                                                  { __DEFAULT ->
                                                                                                                        $w$j_sbubQ
                                                                                                                            s2#1_sbue9;
                                                                                                                  };
                                                                                                            GHC.Base.Just decoder_sbuea [Occ=Once!] ->
                                                                                                                case
                                                                                                                    decoder_sbuea
                                                                                                                of
                                                                                                                { GHC.IO.Encoding.Types.BufferCodec ds16_sbuec [Occ=Once]
                                                                                                                                                    ds17_sbued [Occ=Once]
                                                                                                                                                    _ [Occ=Dead]
                                                                                                                                                    _ [Occ=Dead]
                                                                                                                                                    ds20_sbueg [Occ=Once!] ->
                                                                                                                      case
                                                                                                                          ds20_sbueg
                                                                                                                              codec_state_sbudD
                                                                                                                              s2#_sbudQ
                                                                                                                      of
                                                                                                                      { (#,#) ipv8_sbuei [Occ=Once]
                                                                                                                              _ [Occ=Dead] ->
                                                                                                                            let {
                                                                                                                              sat_sbuek [Occ=Once]
                                                                                                                                :: GHC.IO.Buffer.Buffer
                                                                                                                                     GHC.IO.Buffer.CharBufElem
                                                                                                                              [LclId] =
                                                                                                                                  CCCS GHC.IO.Buffer.Buffer! [dt9_sbudS
                                                                                                                                                              dt15_sbudT
                                                                                                                                                              ds15_sbudU
                                                                                                                                                              wild7_sbudY
                                                                                                                                                              0#
                                                                                                                                                              0#];
                                                                                                                            } in 
                                                                                                                              case
                                                                                                                                  GHC.IO.Handle.Internals.$wstreamEncode
                                                                                                                                      ds16_sbuec
                                                                                                                                      ds17_sbued
                                                                                                                                      bbuf0_sbudE
                                                                                                                                      sat_sbuek
                                                                                                                                      ipv8_sbuei
                                                                                                                              of
                                                                                                                              { (#,#) ipv10_sbuem [Occ=Once]
                                                                                                                                      ipv11_sbuen [Occ=Once!] ->
                                                                                                                                    case
                                                                                                                                        ipv11_sbuen
                                                                                                                                    of
                                                                                                                                    { (,) bbuf1_sbuep [Occ=Once]
                                                                                                                                          _ [Occ=Dead] ->
                                                                                                                                          case
                                                                                                                                              writeMutVar# [dt_sbubv
                                                                                                                                                            bbuf1_sbuep
                                                                                                                                                            ipv10_sbuem]
                                                                                                                                          of
                                                                                                                                          s2#1_sbuer
                                                                                                                                          { __DEFAULT ->
                                                                                                                                                $w$j_sbubQ
                                                                                                                                                    s2#1_sbuer;
                                                                                                                                          };
                                                                                                                                    };
                                                                                                                              };
                                                                                                                      };
                                                                                                                };
                                                                                                          };
                                                                                                      0# ->
                                                                                                          case
                                                                                                              writeMutVar# [dt_sbubv
                                                                                                                            bbuf0_sbudE
                                                                                                                            s2#_sbudQ]
                                                                                                          of
                                                                                                          s2#1_sbues
                                                                                                          { __DEFAULT ->
                                                                                                                $w$j_sbubQ
                                                                                                                    s2#1_sbues;
                                                                                                          };
                                                                                                    };
                                                                                              };
                                                                                        };
                                                                                };
                                                                          };
                                                                    };
                                                                1# -> $w$j_sbubQ ipv2_sbudo;
                                                              };
                                                          GHC.IO.Buffer.WriteBuffer ->
                                                              $w$j_sbubQ ipv2_sbudo;
                                                        };
                                                  };
                                            };
                                        GHC.IO.Buffer.WriteBuffer ->
                                            case ==# [dt7_sbubO dt8_sbubP] of {
                                              __DEFAULT -> GHC.IO.Handle.Internals.flushCharBuffer2;
                                              1# -> $w$j_sbubQ ipv_sbubH;
                                            };
                                      };
                              };
                        };
                  };
        } in 
          GHC.IO.Handle.Internals.withAllHandles__1
              lvl16_rbnWY hdl_sbubj sat_sbuev eta_sbubl;

GHC.IO.Handle.hSetEncoding
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.hSetEncoding1 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.hSetBuffering3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hSetBuffering"#;

GHC.IO.Handle.hSetBuffering2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hSetBuffering3;

GHC.IO.Handle.hSetBuffering1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Types.BufferMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbuew mode_sbuex eta_sbuey]
        let {
          sat_sbufG [Occ=Once]
            :: GHC.IO.Handle.Types.Handle__
               -> GHC.Types.IO GHC.IO.Handle.Types.Handle__
          [LclId] =
              [mode_sbuex] \r [handle__sbuez eta1_sbueA]
                  case handle__sbuez of wild_sbueB {
                    GHC.IO.Handle.Types.Handle__ $dIODevice_sbueC
                                                 $dBufferedIO_sbueD
                                                 $dTypeable_sbueE
                                                 ds_sbueF
                                                 ds1_sbueG [Occ=Once!]
                                                 dt_sbueH
                                                 ds2_sbueI [Occ=Once*!]
                                                 dt1_sbueJ
                                                 dt2_sbueK
                                                 dt3_sbueL
                                                 ds3_sbueM
                                                 ds4_sbueN
                                                 ds5_sbueO
                                                 ds6_sbueP
                                                 ds7_sbueQ
                                                 ds8_sbueR ->
                        case ds1_sbueG of wild1_sbueS {
                          __DEFAULT ->
                              let-no-escape {
                                $j_sbueT [Occ=Once*T[0], Dmd=<L,1*U>]
                                  :: (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        GHC.IO.Handle.Types.Handle__ #)
                                [LclId[JoinId(0)], Unf=OtherCon []] =
                                    [mode_sbuex
                                     eta1_sbueA
                                     $dIODevice_sbueC
                                     $dBufferedIO_sbueD
                                     $dTypeable_sbueE
                                     ds_sbueF
                                     dt_sbueH
                                     dt1_sbueJ
                                     dt2_sbueK
                                     dt3_sbueL
                                     ds3_sbueM
                                     ds4_sbueN
                                     ds5_sbueO
                                     ds6_sbueP
                                     ds7_sbueQ
                                     ds8_sbueR
                                     wild1_sbueS] \r []
                                        let-no-escape {
                                          $w$j_sbueU [InlPrag=NOUSERINLINE[0],
                                                      Occ=Once*!T[1],
                                                      Dmd=<C(S),1*C1(U)>]
                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                     GHC.IO.Handle.Types.Handle__ #)
                                          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                              sat-only [mode_sbuex
                                                        $dIODevice_sbueC
                                                        $dBufferedIO_sbueD
                                                        $dTypeable_sbueE
                                                        ds_sbueF
                                                        dt_sbueH
                                                        dt1_sbueJ
                                                        dt2_sbueK
                                                        dt3_sbueL
                                                        ds3_sbueM
                                                        ds4_sbueN
                                                        ds5_sbueO
                                                        ds6_sbueP
                                                        ds7_sbueQ
                                                        ds8_sbueR
                                                        wild1_sbueS] \r [w_sbueV]
                                                  case
                                                      GHC.IO.Device.isTerminal
                                                          $dIODevice_sbueC ds_sbueF w_sbueV
                                                  of
                                                  { (#,#) ipv_sbueX ipv1_sbueY [Occ=Once!] ->
                                                        case ipv1_sbueY of {
                                                          GHC.Types.False ->
                                                              case
                                                                  writeMutVar# [dt3_sbueL
                                                                                GHC.IO.Handle.Types.BufferListNil
                                                                                ipv_sbueX]
                                                              of
                                                              s2#_sbuf0
                                                              { __DEFAULT ->
                                                                    let {
                                                                      sat_sbuf1 [Occ=Once]
                                                                        :: GHC.IO.Handle.Types.Handle__
                                                                      [LclId] =
                                                                          CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbueC
                                                                                                              $dBufferedIO_sbueD
                                                                                                              $dTypeable_sbueE
                                                                                                              ds_sbueF
                                                                                                              wild1_sbueS
                                                                                                              dt_sbueH
                                                                                                              mode_sbuex
                                                                                                              dt1_sbueJ
                                                                                                              dt2_sbueK
                                                                                                              dt3_sbueL
                                                                                                              ds3_sbueM
                                                                                                              ds4_sbueN
                                                                                                              ds5_sbueO
                                                                                                              ds6_sbueP
                                                                                                              ds7_sbueQ
                                                                                                              ds8_sbueR];
                                                                    } in 
                                                                      (#,#) [s2#_sbuf0 sat_sbuf1];
                                                              };
                                                          GHC.Types.True ->
                                                              let-no-escape {
                                                                $j1_sbuf2 [Occ=Once*T[0],
                                                                           Dmd=<L,1*U>]
                                                                  :: (# GHC.Prim.State#
                                                                          GHC.Prim.RealWorld,
                                                                        GHC.IO.Handle.Types.Handle__ #)
                                                                [LclId[JoinId(0)],
                                                                 Unf=OtherCon []] =
                                                                    [mode_sbuex
                                                                     $dIODevice_sbueC
                                                                     $dBufferedIO_sbueD
                                                                     $dTypeable_sbueE
                                                                     ds_sbueF
                                                                     dt_sbueH
                                                                     dt1_sbueJ
                                                                     dt2_sbueK
                                                                     dt3_sbueL
                                                                     ds3_sbueM
                                                                     ds4_sbueN
                                                                     ds5_sbueO
                                                                     ds6_sbueP
                                                                     ds7_sbueQ
                                                                     ds8_sbueR
                                                                     wild1_sbueS
                                                                     ipv_sbueX] \r []
                                                                        case
                                                                            mode_sbuex
                                                                        of
                                                                        wild3_sbuf3
                                                                        { __DEFAULT ->
                                                                              case
                                                                                  GHC.IO.Device.setRaw
                                                                                      $dIODevice_sbueC
                                                                                      ds_sbueF
                                                                                      GHC.Types.False
                                                                                      ipv_sbueX
                                                                              of
                                                                              { (#,#) ipv2_sbuf5 [Occ=Once]
                                                                                      _ [Occ=Dead] ->
                                                                                    case
                                                                                        writeMutVar# [dt3_sbueL
                                                                                                      GHC.IO.Handle.Types.BufferListNil
                                                                                                      ipv2_sbuf5]
                                                                                    of
                                                                                    s2#_sbuf7
                                                                                    { __DEFAULT ->
                                                                                          let {
                                                                                            sat_sbuf8 [Occ=Once]
                                                                                              :: GHC.IO.Handle.Types.Handle__
                                                                                            [LclId] =
                                                                                                CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbueC
                                                                                                                                    $dBufferedIO_sbueD
                                                                                                                                    $dTypeable_sbueE
                                                                                                                                    ds_sbueF
                                                                                                                                    wild1_sbueS
                                                                                                                                    dt_sbueH
                                                                                                                                    wild3_sbuf3
                                                                                                                                    dt1_sbueJ
                                                                                                                                    dt2_sbueK
                                                                                                                                    dt3_sbueL
                                                                                                                                    ds3_sbueM
                                                                                                                                    ds4_sbueN
                                                                                                                                    ds5_sbueO
                                                                                                                                    ds6_sbueP
                                                                                                                                    ds7_sbueQ
                                                                                                                                    ds8_sbueR];
                                                                                          } in 
                                                                                            (#,#) [s2#_sbuf7
                                                                                                   sat_sbuf8];
                                                                                    };
                                                                              };
                                                                          GHC.IO.Handle.Types.NoBuffering ->
                                                                              case
                                                                                  GHC.IO.Device.setRaw
                                                                                      $dIODevice_sbueC
                                                                                      ds_sbueF
                                                                                      GHC.Types.True
                                                                                      ipv_sbueX
                                                                              of
                                                                              { (#,#) ipv2_sbufa [Occ=Once]
                                                                                      _ [Occ=Dead] ->
                                                                                    case
                                                                                        writeMutVar# [dt3_sbueL
                                                                                                      GHC.IO.Handle.Types.BufferListNil
                                                                                                      ipv2_sbufa]
                                                                                    of
                                                                                    s2#_sbufc
                                                                                    { __DEFAULT ->
                                                                                          let {
                                                                                            sat_sbufd [Occ=Once]
                                                                                              :: GHC.IO.Handle.Types.Handle__
                                                                                            [LclId] =
                                                                                                CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbueC
                                                                                                                                    $dBufferedIO_sbueD
                                                                                                                                    $dTypeable_sbueE
                                                                                                                                    ds_sbueF
                                                                                                                                    wild1_sbueS
                                                                                                                                    dt_sbueH
                                                                                                                                    GHC.IO.Handle.Types.NoBuffering
                                                                                                                                    dt1_sbueJ
                                                                                                                                    dt2_sbueK
                                                                                                                                    dt3_sbueL
                                                                                                                                    ds3_sbueM
                                                                                                                                    ds4_sbueN
                                                                                                                                    ds5_sbueO
                                                                                                                                    ds6_sbueP
                                                                                                                                    ds7_sbueQ
                                                                                                                                    ds8_sbueR];
                                                                                          } in 
                                                                                            (#,#) [s2#_sbufc
                                                                                                   sat_sbufd];
                                                                                    };
                                                                              };
                                                                        };
                                                              } in 
                                                                case wild1_sbueS of wild3_sbufe {
                                                                  __DEFAULT ->
                                                                      case
                                                                          writeMutVar# [dt3_sbueL
                                                                                        GHC.IO.Handle.Types.BufferListNil
                                                                                        ipv_sbueX]
                                                                      of
                                                                      s2#_sbuff
                                                                      { __DEFAULT ->
                                                                            let {
                                                                              sat_sbufg [Occ=Once]
                                                                                :: GHC.IO.Handle.Types.Handle__
                                                                              [LclId] =
                                                                                  CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbueC
                                                                                                                      $dBufferedIO_sbueD
                                                                                                                      $dTypeable_sbueE
                                                                                                                      ds_sbueF
                                                                                                                      wild3_sbufe
                                                                                                                      dt_sbueH
                                                                                                                      mode_sbuex
                                                                                                                      dt1_sbueJ
                                                                                                                      dt2_sbueK
                                                                                                                      dt3_sbueL
                                                                                                                      ds3_sbueM
                                                                                                                      ds4_sbueN
                                                                                                                      ds5_sbueO
                                                                                                                      ds6_sbueP
                                                                                                                      ds7_sbueQ
                                                                                                                      ds8_sbueR];
                                                                            } in 
                                                                              (#,#) [s2#_sbuff
                                                                                     sat_sbufg];
                                                                      };
                                                                  GHC.IO.Handle.Types.ReadHandle ->
                                                                      $j1_sbuf2;
                                                                  GHC.IO.Handle.Types.ReadWriteHandle ->
                                                                      $j1_sbuf2;
                                                                };
                                                        };
                                                  };
                                        } in 
                                          case mode_sbuex of {
                                            __DEFAULT -> $w$j_sbueU eta1_sbueA;
                                            GHC.IO.Handle.Types.BlockBuffering ds9_sbufi [Occ=Once!] ->
                                                case ds9_sbufi of {
                                                  GHC.Base.Nothing -> $w$j_sbueU eta1_sbueA;
                                                  GHC.Base.Just n_sbufk [Occ=Once!] ->
                                                      case n_sbufk of {
                                                        GHC.Types.I# x_sbufm ->
                                                            case <=# [x_sbufm 0#] of {
                                                              __DEFAULT -> $w$j_sbueU eta1_sbueA;
                                                              1# ->
                                                                  GHC.IO.Handle.Internals.$wioe_bufsiz
                                                                      x_sbufm eta1_sbueA;
                                                            };
                                                      };
                                                };
                                          };
                              } in 
                                case mode_sbuex of {
                                  GHC.IO.Handle.Types.NoBuffering ->
                                      case ds2_sbueI of {
                                        __DEFAULT -> $j_sbueT;
                                        GHC.IO.Handle.Types.NoBuffering ->
                                            (#,#) [eta1_sbueA wild_sbueB];
                                      };
                                  GHC.IO.Handle.Types.LineBuffering ->
                                      case ds2_sbueI of {
                                        __DEFAULT -> $j_sbueT;
                                        GHC.IO.Handle.Types.LineBuffering ->
                                            (#,#) [eta1_sbueA wild_sbueB];
                                      };
                                  GHC.IO.Handle.Types.BlockBuffering a1_sbufs [Occ=Once!] ->
                                      case ds2_sbueI of {
                                        __DEFAULT -> $j_sbueT;
                                        GHC.IO.Handle.Types.BlockBuffering b1_sbufu [Occ=Once*!] ->
                                            case a1_sbufs of {
                                              GHC.Base.Nothing ->
                                                  case b1_sbufu of {
                                                    GHC.Base.Nothing ->
                                                        (#,#) [eta1_sbueA wild_sbueB];
                                                    GHC.Base.Just _ [Occ=Dead] -> $j_sbueT;
                                                  };
                                              GHC.Base.Just a2_sbufy [Occ=Once!] ->
                                                  case b1_sbufu of {
                                                    GHC.Base.Nothing -> $j_sbueT;
                                                    GHC.Base.Just b2_sbufA [Occ=Once!] ->
                                                        case a2_sbufy of {
                                                          GHC.Types.I# x_sbufC [Occ=Once] ->
                                                              case b2_sbufA of {
                                                                GHC.Types.I# y_sbufE [Occ=Once] ->
                                                                    case ==# [x_sbufC y_sbufE] of {
                                                                      __DEFAULT -> $j_sbueT;
                                                                      1# ->
                                                                          (#,#) [eta1_sbueA
                                                                                 wild_sbueB];
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          GHC.IO.Handle.Types.ClosedHandle ->
                              GHC.IO.Handle.Internals.ioe_closedHandle1 eta1_sbueA;
                        };
                  };
        } in 
          GHC.IO.Handle.Internals.withAllHandles__1
              GHC.IO.Handle.hSetBuffering2 handle_sbuew sat_sbufG eta_sbuey;

GHC.IO.Handle.hSetBuffering
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Types.BufferMode -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.hSetBuffering1 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.hIsEOF4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hIsEOF"#;

GHC.IO.Handle.hIsEOF3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hIsEOF4;

GHC.IO.Handle.hIsEOF2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_sbufH eta_sbufI]
        case ds_sbufH of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       $dBufferedIO_sbufL [Occ=Once]
                                       _ [Occ=Dead]
                                       ds1_sbufN [Occ=Once]
                                       _ [Occ=Dead]
                                       dt_sbufP
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       dt2_sbufS [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt2_sbufS eta_sbufI] of {
                (#,#) ipv_sbug1 [Occ=Once*] ipv1_sbug2 [Occ=Once!] ->
                    case ipv1_sbug2 of {
                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           dt7_sbug8 [Occ=Once]
                                           dt8_sbug9 [Occ=Once] ->
                          case ==# [dt7_sbug8 dt8_sbug9] of {
                            __DEFAULT -> (#,#) [ipv_sbug1 GHC.Types.False];
                            1# ->
                                case readMutVar# [dt_sbufP ipv_sbug1] of {
                                  (#,#) ipv2_sbugc [Occ=Once*] ipv3_sbugd [Occ=Once!] ->
                                      case ipv3_sbugd of wild2_sbuge {
                                        GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             dt12_sbugj [Occ=Once]
                                                             dt13_sbugk [Occ=Once] ->
                                            case ==# [dt12_sbugj dt13_sbugk] of {
                                              __DEFAULT -> (#,#) [ipv2_sbugc GHC.Types.False];
                                              1# ->
                                                  case
                                                      GHC.IO.BufferedIO.fillReadBuffer
                                                          $dBufferedIO_sbufL
                                                          ds1_sbufN
                                                          wild2_sbuge
                                                          ipv2_sbugc
                                                  of
                                                  { (#,#) ipv4_sbugn [Occ=Once*]
                                                          ipv5_sbugo [Occ=Once!] ->
                                                        case ipv5_sbugo of {
                                                          (,) r_sbugq [Occ=Once!]
                                                              bbuf'_sbugr [Occ=Once] ->
                                                              case r_sbugq of {
                                                                GHC.Types.I# x_sbugt [Occ=Once!] ->
                                                                    case x_sbugt of {
                                                                      __DEFAULT ->
                                                                          case
                                                                              writeMutVar# [dt_sbufP
                                                                                            bbuf'_sbugr
                                                                                            ipv4_sbugn]
                                                                          of
                                                                          s2#_sbugv
                                                                          { __DEFAULT ->
                                                                                (#,#) [s2#_sbugv
                                                                                       GHC.Types.False];
                                                                          };
                                                                      0# ->
                                                                          (#,#) [ipv4_sbugn
                                                                                 GHC.Types.True];
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.hIsEOF1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [handle_sbugw eta_B1]
        GHC.IO.Handle.Internals.wantReadableHandle_1
            GHC.IO.Handle.hIsEOF3 handle_sbugw GHC.IO.Handle.hIsEOF2 eta_B1;

GHC.IO.Handle.hIsEOF
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hIsEOF1 eta_B2 eta_B1;

GHC.IO.Handle.isEOF1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.IO.Handle.Internals.wantReadableHandle_1
            GHC.IO.Handle.hIsEOF3
            GHC.IO.Handle.FD.stdin
            GHC.IO.Handle.hIsEOF2
            eta_B1;

GHC.IO.Handle.isEOF :: GHC.Types.IO GHC.Types.Bool
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.IO.Handle.isEOF1 eta_B1;

lvl19_rbnX1 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hSetFileSize"#;

lvl20_rbnX2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl19_rbnX1;

GHC.IO.Handle.hSetFileSize1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Integer.Type.Integer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbugx size_sbugy eta_sbugz]
        let {
          act_sbugA [Occ=OnceL*!, Dmd=<L,C(C1(U(U,U)))>]
            :: GHC.IO.Handle.Types.Handle__
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
          [LclId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
              sat-only [size_sbugy] \r [handle__sbugB eta1_sbugC]
                  case handle__sbugB of {
                    GHC.IO.Handle.Types.Handle__ $dIODevice_sbugE [Occ=Once*]
                                                 $dBufferedIO_sbugF [Occ=Once]
                                                 _ [Occ=Dead]
                                                 ds_sbugH
                                                 ds1_sbugI [Occ=Once!]
                                                 dt_sbugJ
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead] ->
                        case ds1_sbugI of {
                          __DEFAULT ->
                              case readMutVar# [dt_sbugJ eta1_sbugC] of {
                                (#,#) ipv_sbugW [Occ=Once*] ipv1_sbugX [Occ=Once!] ->
                                    case ipv1_sbugX of {
                                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           ds10_sbuh1 [Occ=Once!]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead] ->
                                          case ds10_sbuh1 of {
                                            GHC.IO.Buffer.ReadBuffer ->
                                                case
                                                    GHC.IO.Device.setSize
                                                        $dIODevice_sbugE
                                                        ds_sbugH
                                                        size_sbugy
                                                        ipv_sbugW
                                                of
                                                { (#,#) ipv2_sbuh7 [Occ=Once] _ [Occ=Dead] ->
                                                      (#,#) [ipv2_sbuh7 GHC.Tuple.()];
                                                };
                                            GHC.IO.Buffer.WriteBuffer ->
                                                case readMutVar# [dt_sbugJ ipv_sbugW] of {
                                                  (#,#) ipv2_sbuha [Occ=Once*]
                                                        ipv3_sbuhb [Occ=Once!] ->
                                                      case ipv3_sbuhb of wild4_sbuhc {
                                                        GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                             _ [Occ=Dead]
                                                                             _ [Occ=Dead]
                                                                             _ [Occ=Dead]
                                                                             dt12_sbuhh [Occ=Once]
                                                                             dt13_sbuhi [Occ=Once] ->
                                                            case ==# [dt12_sbuhh dt13_sbuhi] of {
                                                              __DEFAULT ->
                                                                  case
                                                                      GHC.IO.BufferedIO.flushWriteBuffer
                                                                          $dBufferedIO_sbugF
                                                                          ds_sbugH
                                                                          wild4_sbuhc
                                                                          ipv2_sbuha
                                                                  of
                                                                  { (#,#) ipv4_sbuhl [Occ=Once]
                                                                          ipv5_sbuhm [Occ=Once] ->
                                                                        case
                                                                            writeMutVar# [dt_sbugJ
                                                                                          ipv5_sbuhm
                                                                                          ipv4_sbuhl]
                                                                        of
                                                                        s2#_sbuhn
                                                                        { __DEFAULT ->
                                                                              case
                                                                                  GHC.IO.Device.setSize
                                                                                      $dIODevice_sbugE
                                                                                      ds_sbugH
                                                                                      size_sbugy
                                                                                      s2#_sbuhn
                                                                              of
                                                                              { (#,#) ipv7_sbuhp [Occ=Once]
                                                                                      _ [Occ=Dead] ->
                                                                                    (#,#) [ipv7_sbuhp
                                                                                           GHC.Tuple.()];
                                                                              };
                                                                        };
                                                                  };
                                                              1# ->
                                                                  case
                                                                      GHC.IO.Device.setSize
                                                                          $dIODevice_sbugE
                                                                          ds_sbugH
                                                                          size_sbugy
                                                                          ipv2_sbuha
                                                                  of
                                                                  { (#,#) ipv4_sbuhs [Occ=Once]
                                                                          _ [Occ=Dead] ->
                                                                        (#,#) [ipv4_sbuhs
                                                                               GHC.Tuple.()];
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                          GHC.IO.Handle.Types.ClosedHandle ->
                              GHC.IO.Handle.Internals.ioe_closedHandle1 eta1_sbugC;
                          GHC.IO.Handle.Types.SemiClosedHandle ->
                              GHC.IO.Handle.Internals.ioe_semiclosedHandle1 eta1_sbugC;
                        };
                  };
        } in 
          case handle_sbugx of wild_sbuhu {
            GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbuhw ->
                case getMaskingState# [eta_sbugz] of {
                  (#,#) ipv_sbuhy [Occ=Once*] ipv1_sbuhz [Occ=Once!] ->
                      let {
                        io_sbuhA [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                          :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                        [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                            [act_sbugA wild_sbuhu dt_sbuhw] \r [s_sbuhB]
                                let {
                                  sat_sbuhI [Occ=Once]
                                    :: GHC.IO.Handle.Types.Handle__
                                       -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, ())
                                  [LclId] =
                                      [act_sbugA] \r [h__sbuhC s1_sbuhD]
                                          case act_sbugA h__sbuhC s1_sbuhD of {
                                            (#,#) ipv2_sbuhF [Occ=Once] ipv3_sbuhG [Occ=Once] ->
                                                let {
                                                  sat_sbuhH [Occ=Once]
                                                    :: (GHC.IO.Handle.Types.Handle__, ())
                                                  [LclId] =
                                                      CCCS (,)! [h__sbuhC ipv3_sbuhG];
                                                } in  (#,#) [ipv2_sbuhF sat_sbuhH];
                                          };
                                } in 
                                  case
                                      GHC.IO.Handle.Internals.$wdo_operation
                                          lvl20_rbnX2 wild_sbuhu sat_sbuhI dt_sbuhw s_sbuhB
                                  of
                                  { (#,#) ipv2_sbuhK [Occ=Once] ipv3_sbuhL [Occ=Once!] ->
                                        case ipv3_sbuhL of {
                                          (,) h'_sbuhN [Occ=Once] v_sbuhO [Occ=Once] ->
                                              case
                                                  putMVar# [dt_sbuhw h'_sbuhN ipv2_sbuhK]
                                              of
                                              s2#_sbuhP
                                              { __DEFAULT -> (#,#) [s2#_sbuhP v_sbuhO];
                                              };
                                        };
                                  };
                      } in 
                        case ipv1_sbuhz of {
                          __DEFAULT -> io_sbuhA ipv_sbuhy;
                          0# -> maskAsyncExceptions# [io_sbuhA ipv_sbuhy];
                        };
                };
            GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                             dt_sbuhS
                                             _ [Occ=Dead] ->
                case getMaskingState# [eta_sbugz] of {
                  (#,#) ipv_sbuhV [Occ=Once*] ipv1_sbuhW [Occ=Once!] ->
                      let {
                        io_sbuhX [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                          :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                        [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                            [act_sbugA wild_sbuhu dt_sbuhS] \r [s_sbuhY]
                                let {
                                  sat_sbui5 [Occ=Once]
                                    :: GHC.IO.Handle.Types.Handle__
                                       -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, ())
                                  [LclId] =
                                      [act_sbugA] \r [h__sbuhZ s1_sbui0]
                                          case act_sbugA h__sbuhZ s1_sbui0 of {
                                            (#,#) ipv2_sbui2 [Occ=Once] ipv3_sbui3 [Occ=Once] ->
                                                let {
                                                  sat_sbui4 [Occ=Once]
                                                    :: (GHC.IO.Handle.Types.Handle__, ())
                                                  [LclId] =
                                                      CCCS (,)! [h__sbuhZ ipv3_sbui3];
                                                } in  (#,#) [ipv2_sbui2 sat_sbui4];
                                          };
                                } in 
                                  case
                                      GHC.IO.Handle.Internals.$wdo_operation
                                          lvl20_rbnX2 wild_sbuhu sat_sbui5 dt_sbuhS s_sbuhY
                                  of
                                  { (#,#) ipv2_sbui7 [Occ=Once] ipv3_sbui8 [Occ=Once!] ->
                                        case ipv3_sbui8 of {
                                          (,) h'_sbuia [Occ=Once] v_sbuib [Occ=Once] ->
                                              case
                                                  putMVar# [dt_sbuhS h'_sbuia ipv2_sbui7]
                                              of
                                              s2#_sbuic
                                              { __DEFAULT -> (#,#) [s2#_sbuic v_sbuib];
                                              };
                                        };
                                  };
                      } in 
                        case ipv1_sbuhW of {
                          __DEFAULT -> io_sbuhX ipv_sbuhV;
                          0# -> maskAsyncExceptions# [io_sbuhX ipv_sbuhV];
                        };
                };
          };

GHC.IO.Handle.hSetFileSize
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Integer.Type.Integer -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.hSetFileSize1 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.hFileSize9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hFileSize"#;

GHC.IO.Handle.hFileSize8 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hFileSize9;

GHC.IO.Handle.hFileSize7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "not a regular file"#;

GHC.IO.Handle.hFileSize6 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hFileSize7;

GHC.IO.Handle.hFileSize5 :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.InappropriateType
                                             GHC.IO.Handle.hFileSize8
                                             GHC.IO.Handle.hFileSize6
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Handle.hFileSize4 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Handle.hFileSize5;

sat_sbuie :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

sat_sbuif :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sbuie GHC.Types.[]];

GHC.IO.Handle.hFileSize10 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.False sat_sbuif;

GHC.IO.Handle.hFileSize3
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Integer.Type.Integer #)
[GblId, Arity=2, Str=<S,1*U><S,U>m, Unf=OtherCon []] =
    [] \r [handle__sbuig eta_sbuih]
        case handle__sbuig of {
          GHC.IO.Handle.Types.Handle__ $dIODevice_sbuij [Occ=Once]
                                       $dBufferedIO_sbuik [Occ=Once]
                                       _ [Occ=Dead]
                                       ds_sbuim
                                       ds1_sbuin [Occ=Once!]
                                       dt_sbuio
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds1_sbuin of {
                __DEFAULT ->
                    case readMutVar# [dt_sbuio eta_sbuih] of {
                      (#,#) ipv_sbuiB [Occ=Once*] ipv1_sbuiC [Occ=Once!] ->
                          case ipv1_sbuiC of {
                            GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 ds10_sbuiG [Occ=Once!]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead] ->
                                let-no-escape {
                                  $w$j_sbuiK [InlPrag=NOUSERINLINE[0],
                                              Occ=Once*!T[1],
                                              Dmd=<L,1*C1(U(U,U))>]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                             GHC.Integer.Type.Integer #)
                                  [LclId[JoinId(1)], Arity=1, Str=<S,U>m, Unf=OtherCon []] =
                                      sat-only [$dIODevice_sbuij ds_sbuim] \r [w_sbuiL]
                                          case
                                              GHC.IO.Device.getSize
                                                  $dIODevice_sbuij ds_sbuim w_sbuiL
                                          of
                                          ds12_sbuiM
                                          { (#,#) ipv2_sbuiN [Occ=Once] ipv3_sbuiO [Occ=Once] ->
                                                case
                                                    GHC.Integer.Type.neqInteger#
                                                        ipv3_sbuiO GHC.IO.Handle.hFileSize10
                                                of
                                                { __DEFAULT ->
                                                      raiseIO# [GHC.IO.Handle.hFileSize4
                                                                ipv2_sbuiN];
                                                  1# -> ds12_sbuiM;
                                                };
                                          };
                                } in 
                                  case ds10_sbuiG of {
                                    GHC.IO.Buffer.ReadBuffer -> $w$j_sbuiK ipv_sbuiB;
                                    GHC.IO.Buffer.WriteBuffer ->
                                        case readMutVar# [dt_sbuio ipv_sbuiB] of {
                                          (#,#) ipv2_sbuiS [Occ=Once*] ipv3_sbuiT [Occ=Once!] ->
                                              case ipv3_sbuiT of wild4_sbuiU {
                                                GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     dt12_sbuiZ [Occ=Once]
                                                                     dt13_sbuj0 [Occ=Once] ->
                                                    case ==# [dt12_sbuiZ dt13_sbuj0] of {
                                                      __DEFAULT ->
                                                          case
                                                              GHC.IO.BufferedIO.flushWriteBuffer
                                                                  $dBufferedIO_sbuik
                                                                  ds_sbuim
                                                                  wild4_sbuiU
                                                                  ipv2_sbuiS
                                                          of
                                                          { (#,#) ipv4_sbuj3 [Occ=Once]
                                                                  ipv5_sbuj4 [Occ=Once] ->
                                                                case
                                                                    writeMutVar# [dt_sbuio
                                                                                  ipv5_sbuj4
                                                                                  ipv4_sbuj3]
                                                                of
                                                                s2#_sbuj5
                                                                { __DEFAULT -> $w$j_sbuiK s2#_sbuj5;
                                                                };
                                                          };
                                                      1# -> $w$j_sbuiK ipv2_sbuiS;
                                                    };
                                              };
                                        };
                                  };
                          };
                    };
                GHC.IO.Handle.Types.ClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_closedHandle1 eta_sbuih;
                GHC.IO.Handle.Types.SemiClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_semiclosedHandle1 eta_sbuih;
              };
        };

GHC.IO.Handle.hFileSize2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, GHC.Integer.Type.Integer) #)
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [h__sbuj6 s1_sbuj7]
        case GHC.IO.Handle.hFileSize3 h__sbuj6 s1_sbuj7 of {
          (#,#) ipv_sbuj9 [Occ=Once] ipv1_sbuja [Occ=Once] ->
              let {
                sat_sbujb [Occ=Once]
                  :: (GHC.IO.Handle.Types.Handle__, GHC.Integer.Type.Integer)
                [LclId] =
                    CCCS (,)! [h__sbuj6 ipv1_sbuja];
              } in  (#,#) [ipv_sbuj9 sat_sbujb];
        };

GHC.IO.Handle.hFileSize1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Integer.Type.Integer #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbujc eta_sbujd]
        case handle_sbujc of wild_sbuje {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbujg ->
              case getMaskingState# [eta_sbujd] of {
                (#,#) ipv_sbuji [Occ=Once*] ipv1_sbujj [Occ=Once!] ->
                    let {
                      io_sbujk [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 GHC.Integer.Type.Integer #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbuje dt_sbujg] \r [s_sbujl]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hFileSize8
                                      wild_sbuje
                                      GHC.IO.Handle.hFileSize2
                                      dt_sbujg
                                      s_sbujl
                              of
                              { (#,#) ipv2_sbujn [Occ=Once] ipv3_sbujo [Occ=Once!] ->
                                    case ipv3_sbujo of {
                                      (,) h'_sbujq [Occ=Once] v_sbujr [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbujg h'_sbujq ipv2_sbujn]
                                          of
                                          s2#_sbujs
                                          { __DEFAULT -> (#,#) [s2#_sbujs v_sbujr];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbujj of {
                        __DEFAULT -> io_sbujk ipv_sbuji;
                        0# -> maskAsyncExceptions# [io_sbujk ipv_sbuji];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sbujv
                                           _ [Occ=Dead] ->
              case getMaskingState# [eta_sbujd] of {
                (#,#) ipv_sbujy [Occ=Once*] ipv1_sbujz [Occ=Once!] ->
                    let {
                      io_sbujA [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 GHC.Integer.Type.Integer #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbuje dt_sbujv] \r [s_sbujB]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hFileSize8
                                      wild_sbuje
                                      GHC.IO.Handle.hFileSize2
                                      dt_sbujv
                                      s_sbujB
                              of
                              { (#,#) ipv2_sbujD [Occ=Once] ipv3_sbujE [Occ=Once!] ->
                                    case ipv3_sbujE of {
                                      (,) h'_sbujG [Occ=Once] v_sbujH [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbujv h'_sbujG ipv2_sbujD]
                                          of
                                          s2#_sbujI
                                          { __DEFAULT -> (#,#) [s2#_sbujI v_sbujH];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbujz of {
                        __DEFAULT -> io_sbujA ipv_sbujy;
                        0# -> maskAsyncExceptions# [io_sbujA ipv_sbujy];
                      };
              };
        };

GHC.IO.Handle.hFileSize
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Types.IO GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hFileSize1 eta_B2 eta_B1;

lvl21_rbnX3
  :: GHC.Base.Maybe
       (GHC.IO.FilePath
        -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ())
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.IO.Handle.Internals.handleFinalizer1];

GHC.IO.Handle.hDuplicateTo1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h1_sbujK h2_sbujL eta_sbujM]
        case h1_sbujK of wild_sbujN {
          GHC.IO.Handle.Types.FileHandle path_sbujO [Occ=OnceL]
                                         dt_sbujP [Occ=OnceL] ->
              case h2_sbujL of wild1_sbujQ {
                GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt1_sbujS [Occ=Once] ->
                    let {
                      sat_sbuk5 [Occ=Once]
                        :: GHC.IO.Handle.Types.Handle__
                           -> GHC.Types.IO GHC.IO.Handle.Types.Handle__
                      [LclId] =
                          [wild_sbujN path_sbujO dt_sbujP] \r [h2__sbujT s_sbujU]
                              case GHC.IO.Handle.Internals.hClose_help1 h2__sbujT s_sbujU of {
                                (#,#) ipv_sbujW [Occ=Once] _ [Occ=Dead] ->
                                    let {
                                      sat_sbuk4 [Occ=Once]
                                        :: GHC.IO.Handle.Types.Handle__
                                           -> GHC.Types.IO
                                                (GHC.IO.Handle.Types.Handle__,
                                                 GHC.IO.Handle.Types.Handle__)
                                      [LclId] =
                                          [wild_sbujN path_sbujO h2__sbujT] \r [h__sbujY s1_sbujZ]
                                              case
                                                  dupHandleTo_rbnWN
                                                      path_sbujO
                                                      wild_sbujN
                                                      GHC.Base.Nothing
                                                      h2__sbujT
                                                      h__sbujY
                                                      lvl21_rbnX3
                                                      s1_sbujZ
                                              of
                                              { (#,#) ipv2_sbuk1 [Occ=Once] ipv3_sbuk2 [Occ=Once] ->
                                                    let {
                                                      sat_sbuk3 [Occ=Once]
                                                        :: (GHC.IO.Handle.Types.Handle__,
                                                            GHC.IO.Handle.Types.Handle__)
                                                      [LclId] =
                                                          CCCS (,)! [h__sbujY ipv3_sbuk2];
                                                    } in  (#,#) [ipv2_sbuk1 sat_sbuk3];
                                              };
                                    } in 
                                      GHC.IO.Handle.Internals.$wwithHandle'
                                          lvl1_rbnWC wild_sbujN dt_sbujP sat_sbuk4 ipv_sbujW;
                              };
                    } in 
                      GHC.IO.Handle.Internals.$wwithHandle__'
                          lvl1_rbnWC wild1_sbujQ dt1_sbujS sat_sbuk5 eta_sbujM;
                GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead] ->
                    ioe_dupHandlesNotCompatible_rbnWF wild_sbujN eta_sbujM;
              };
          GHC.IO.Handle.Types.DuplexHandle path_sbuk9
                                           dt_sbuka [Occ=OnceL]
                                           dt1_sbukb ->
              case h2_sbujL of wild1_sbukc {
                GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] _ [Occ=Dead] ->
                    ioe_dupHandlesNotCompatible_rbnWF wild_sbujN eta_sbujM;
                GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                 dt2_sbukg [Occ=Once]
                                                 dt3_sbukh [Occ=Once] ->
                    let {
                      sat_sbuku [Occ=Once]
                        :: GHC.IO.Handle.Types.Handle__
                           -> GHC.Types.IO GHC.IO.Handle.Types.Handle__
                      [LclId] =
                          [wild_sbujN path_sbuk9 dt1_sbukb] \r [w2__sbuki s_sbukj]
                              case GHC.IO.Handle.Internals.hClose_help1 w2__sbuki s_sbukj of {
                                (#,#) ipv_sbukl [Occ=Once] _ [Occ=Dead] ->
                                    let {
                                      sat_sbukt [Occ=Once]
                                        :: GHC.IO.Handle.Types.Handle__
                                           -> GHC.Types.IO
                                                (GHC.IO.Handle.Types.Handle__,
                                                 GHC.IO.Handle.Types.Handle__)
                                      [LclId] =
                                          [wild_sbujN path_sbuk9 w2__sbuki] \r [h__sbukn s1_sbuko]
                                              case
                                                  dupHandleTo_rbnWN
                                                      path_sbuk9
                                                      wild_sbujN
                                                      GHC.Base.Nothing
                                                      w2__sbuki
                                                      h__sbukn
                                                      lvl21_rbnX3
                                                      s1_sbuko
                                              of
                                              { (#,#) ipv2_sbukq [Occ=Once] ipv3_sbukr [Occ=Once] ->
                                                    let {
                                                      sat_sbuks [Occ=Once]
                                                        :: (GHC.IO.Handle.Types.Handle__,
                                                            GHC.IO.Handle.Types.Handle__)
                                                      [LclId] =
                                                          CCCS (,)! [h__sbukn ipv3_sbukr];
                                                    } in  (#,#) [ipv2_sbukq sat_sbuks];
                                              };
                                    } in 
                                      GHC.IO.Handle.Internals.$wwithHandle'
                                          lvl1_rbnWC wild_sbujN dt1_sbukb sat_sbukt ipv_sbukl;
                              };
                    } in 
                      case
                          GHC.IO.Handle.Internals.$wwithHandle__'
                              lvl1_rbnWC wild1_sbukc dt3_sbukh sat_sbuku eta_sbujM
                      of
                      { (#,#) ipv_sbukw [Occ=Once] _ [Occ=Dead] ->
                            let {
                              w1_sbuky [Occ=OnceL] :: GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
                              [LclId, Unf=OtherCon []] =
                                  CCCS GHC.MVar.MVar! [dt1_sbukb]; } in
                            let {
                              lvl48_sbukz [Occ=OnceL]
                                :: GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
                              [LclId, Unf=OtherCon []] =
                                  CCCS GHC.Base.Just! [w1_sbuky]; } in
                            let {
                              sat_sbukM [Occ=Once]
                                :: GHC.IO.Handle.Types.Handle__
                                   -> GHC.Types.IO GHC.IO.Handle.Types.Handle__
                              [LclId] =
                                  [wild_sbujN path_sbuk9 dt_sbuka lvl48_sbukz] \r [r2__sbukA
                                                                                   s_sbukB]
                                      case
                                          GHC.IO.Handle.Internals.hClose_help1 r2__sbukA s_sbukB
                                      of
                                      { (#,#) ipv2_sbukD [Occ=Once] _ [Occ=Dead] ->
                                            let {
                                              sat_sbukL [Occ=Once]
                                                :: GHC.IO.Handle.Types.Handle__
                                                   -> GHC.Types.IO
                                                        (GHC.IO.Handle.Types.Handle__,
                                                         GHC.IO.Handle.Types.Handle__)
                                              [LclId] =
                                                  [wild_sbujN
                                                   path_sbuk9
                                                   lvl48_sbukz
                                                   r2__sbukA] \r [h__sbukF s1_sbukG]
                                                      case
                                                          dupHandleTo_rbnWN
                                                              path_sbuk9
                                                              wild_sbujN
                                                              lvl48_sbukz
                                                              r2__sbukA
                                                              h__sbukF
                                                              GHC.Base.Nothing
                                                              s1_sbukG
                                                      of
                                                      { (#,#) ipv4_sbukI [Occ=Once]
                                                              ipv5_sbukJ [Occ=Once] ->
                                                            let {
                                                              sat_sbukK [Occ=Once]
                                                                :: (GHC.IO.Handle.Types.Handle__,
                                                                    GHC.IO.Handle.Types.Handle__)
                                                              [LclId] =
                                                                  CCCS (,)! [h__sbukF ipv5_sbukJ];
                                                            } in  (#,#) [ipv4_sbukI sat_sbukK];
                                                      };
                                            } in 
                                              GHC.IO.Handle.Internals.$wwithHandle'
                                                  lvl1_rbnWC
                                                  wild_sbujN
                                                  dt_sbuka
                                                  sat_sbukL
                                                  ipv2_sbukD;
                                      };
                            } in 
                              GHC.IO.Handle.Internals.$wwithHandle__'
                                  lvl1_rbnWC wild1_sbukc dt2_sbukg sat_sbukM ipv_sbukw;
                      };
              };
        };

GHC.IO.Handle.hDuplicateTo
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Types.Handle -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,1*U><S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.hDuplicateTo1 eta_B3 eta_B2 eta_B1;

lvl22_rbnX4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hDuplicate"#;

lvl23_rbnX5 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl22_rbnX4;

lvl24_rbnX6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Pattern match failure in do expression at GHC/IO/Handle.hs:626:3-33"#;

lvl25_rbnX7
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_sbukN]
        case GHC.CString.unpackCString# lvl24_rbnX6 of sat_sbukO {
          __DEFAULT -> GHC.IO.failIO1 sat_sbukO eta_sbukN;
        };

lvl26_rbnX8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Pattern match failure in do expression at GHC/IO/Handle.hs:623:3-35"#;

lvl27_rbnX9
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_sbukP]
        case GHC.CString.unpackCString# lvl26_rbnX8 of sat_sbukQ {
          __DEFAULT -> GHC.IO.failIO1 sat_sbukQ eta_sbukP;
        };

GHC.IO.Handle.hDuplicate1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h_sbukR eta_sbukS]
        case h_sbukR of wild_sbukT {
          GHC.IO.Handle.Types.FileHandle path_sbukU [Occ=OnceL]
                                         dt_sbukV [Occ=Once] ->
              let {
                sat_sbulp [Occ=Once]
                  :: GHC.IO.Handle.Types.Handle__
                     -> GHC.Types.IO
                          (GHC.IO.Handle.Types.Handle__, GHC.IO.Handle.Types.Handle)
                [LclId] =
                    [path_sbukU] \r [h__sbukW s_sbukX]
                        case h__sbukW of wild1_sbukY {
                          GHC.IO.Handle.Types.Handle__ $dIODevice_sbukZ
                                                       $dBufferedIO_sbul0 [Occ=Once]
                                                       $dTypeable_sbul1 [Occ=Once]
                                                       ds_sbul2 [Occ=Once]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead] ->
                              case GHC.IO.Handle.Internals.flushBuffer1 wild1_sbukY s_sbukX of {
                                (#,#) ipv_sbulg [Occ=Once] _ [Occ=Dead] ->
                                    case GHC.IO.Device.dup $dIODevice_sbukZ ds_sbul2 ipv_sbulg of {
                                      (#,#) ipv2_sbulj [Occ=Once] ipv3_sbulk [Occ=Once] ->
                                          case
                                              dupHandle__rbnWK
                                                  $dIODevice_sbukZ
                                                  $dBufferedIO_sbul0
                                                  $dTypeable_sbul1
                                                  ipv3_sbulk
                                                  path_sbukU
                                                  GHC.Base.Nothing
                                                  wild1_sbukY
                                                  lvl21_rbnX3
                                                  ipv2_sbulj
                                          of
                                          { (#,#) ipv4_sbulm [Occ=Once] ipv5_sbuln [Occ=Once] ->
                                                let {
                                                  sat_sbulo [Occ=Once]
                                                    :: (GHC.IO.Handle.Types.Handle__,
                                                        GHC.IO.Handle.Types.Handle)
                                                  [LclId] =
                                                      CCCS (,)! [wild1_sbukY ipv5_sbuln];
                                                } in  (#,#) [ipv4_sbulm sat_sbulo];
                                          };
                                    };
                              };
                        };
              } in 
                GHC.IO.Handle.Internals.$wwithHandle'
                    lvl23_rbnX5 wild_sbukT dt_sbukV sat_sbulp eta_sbukS;
          GHC.IO.Handle.Types.DuplexHandle path_sbulq
                                           dt_sbulr [Occ=Once]
                                           dt1_sbuls [Occ=Once] ->
              let {
                sat_sbulW [Occ=Once]
                  :: GHC.IO.Handle.Types.Handle__
                     -> GHC.Types.IO
                          (GHC.IO.Handle.Types.Handle__, GHC.IO.Handle.Types.Handle)
                [LclId] =
                    [path_sbulq] \r [h__sbult s_sbulu]
                        case h__sbult of wild1_sbulv {
                          GHC.IO.Handle.Types.Handle__ $dIODevice_sbulw
                                                       $dBufferedIO_sbulx [Occ=Once]
                                                       $dTypeable_sbuly [Occ=Once]
                                                       ds_sbulz [Occ=Once]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead] ->
                              case GHC.IO.Handle.Internals.flushBuffer1 wild1_sbulv s_sbulu of {
                                (#,#) ipv_sbulN [Occ=Once] _ [Occ=Dead] ->
                                    case GHC.IO.Device.dup $dIODevice_sbulw ds_sbulz ipv_sbulN of {
                                      (#,#) ipv2_sbulQ [Occ=Once] ipv3_sbulR [Occ=Once] ->
                                          case
                                              dupHandle__rbnWK
                                                  $dIODevice_sbulw
                                                  $dBufferedIO_sbulx
                                                  $dTypeable_sbuly
                                                  ipv3_sbulR
                                                  path_sbulq
                                                  GHC.Base.Nothing
                                                  wild1_sbulv
                                                  lvl21_rbnX3
                                                  ipv2_sbulQ
                                          of
                                          { (#,#) ipv4_sbulT [Occ=Once] ipv5_sbulU [Occ=Once] ->
                                                let {
                                                  sat_sbulV [Occ=Once]
                                                    :: (GHC.IO.Handle.Types.Handle__,
                                                        GHC.IO.Handle.Types.Handle)
                                                  [LclId] =
                                                      CCCS (,)! [wild1_sbulv ipv5_sbulU];
                                                } in  (#,#) [ipv4_sbulT sat_sbulV];
                                          };
                                    };
                              };
                        };
              } in 
                case
                    GHC.IO.Handle.Internals.$wwithHandle'
                        lvl23_rbnX5 wild_sbukT dt1_sbuls sat_sbulW eta_sbukS
                of
                { (#,#) ipv_sbulY [Occ=Once*] ipv1_sbulZ [Occ=Once!] ->
                      case ipv1_sbulZ of {
                        GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt2_sbum2 ->
                            let {
                              write_m_sbum3 [Occ=OnceL]
                                :: GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
                              [LclId, Unf=OtherCon []] =
                                  CCCS GHC.MVar.MVar! [dt2_sbum2]; } in
                            let {
                              lvl48_sbum4 [Occ=OnceL]
                                :: GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
                              [LclId, Unf=OtherCon []] =
                                  CCCS GHC.Base.Just! [write_m_sbum3]; } in
                            let {
                              sat_sbumT [Occ=Once]
                                :: GHC.IO.Handle.Types.Handle__
                                   -> GHC.Types.IO
                                        (GHC.IO.Handle.Types.Handle__, GHC.IO.Handle.Types.Handle)
                              [LclId] =
                                  [wild_sbukT path_sbulq dt2_sbum2 lvl48_sbum4] \r [h__sbum5
                                                                                    s_sbum6]
                                      case h__sbum5 of wild2_sbum7 {
                                        GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead] ->
                                            case
                                                GHC.IO.Handle.Internals.flushBuffer1
                                                    wild2_sbum7 s_sbum6
                                            of
                                            { (#,#) ipv2_sbump [Occ=Once] _ [Occ=Dead] ->
                                                  let {
                                                    sat_sbumO [Occ=Once]
                                                      :: GHC.IO.Handle.Types.Handle__
                                                         -> GHC.Types.IO
                                                              (GHC.IO.Handle.Types.Handle__,
                                                               GHC.IO.Handle.Types.Handle)
                                                    [LclId] =
                                                        [path_sbulq
                                                         lvl48_sbum4
                                                         wild2_sbum7] \r [h_1_sbumr s1_sbums]
                                                            case h_1_sbumr of wild3_sbumt {
                                                              GHC.IO.Handle.Types.Handle__ $dIODevice1_sbumu [Occ=Once]
                                                                                           $dBufferedIO1_sbumv [Occ=Once]
                                                                                           $dTypeable1_sbumw [Occ=Once]
                                                                                           ds12_sbumx [Occ=Once]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead] ->
                                                                  case
                                                                      dupHandle__rbnWK
                                                                          $dIODevice1_sbumu
                                                                          $dBufferedIO1_sbumv
                                                                          $dTypeable1_sbumw
                                                                          ds12_sbumx
                                                                          path_sbulq
                                                                          lvl48_sbum4
                                                                          wild2_sbum7
                                                                          GHC.Base.Nothing
                                                                          s1_sbums
                                                                  of
                                                                  { (#,#) ipv4_sbumL [Occ=Once]
                                                                          ipv5_sbumM [Occ=Once] ->
                                                                        let {
                                                                          sat_sbumN [Occ=Once]
                                                                            :: (GHC.IO.Handle.Types.Handle__,
                                                                                GHC.IO.Handle.Types.Handle)
                                                                          [LclId] =
                                                                              CCCS (,)! [wild3_sbumt
                                                                                         ipv5_sbumM];
                                                                        } in 
                                                                          (#,#) [ipv4_sbumL
                                                                                 sat_sbumN];
                                                                  };
                                                            };
                                                  } in 
                                                    case
                                                        GHC.IO.Handle.Internals.$wwithHandle'
                                                            lvl7_rbnWP
                                                            wild_sbukT
                                                            dt2_sbum2
                                                            sat_sbumO
                                                            ipv2_sbump
                                                    of
                                                    { (#,#) ipv4_sbumQ [Occ=Once]
                                                            ipv5_sbumR [Occ=Once] ->
                                                          let {
                                                            sat_sbumS [Occ=Once]
                                                              :: (GHC.IO.Handle.Types.Handle__,
                                                                  GHC.IO.Handle.Types.Handle)
                                                            [LclId] =
                                                                CCCS (,)! [wild2_sbum7 ipv5_sbumR];
                                                          } in  (#,#) [ipv4_sbumQ sat_sbumS];
                                                    };
                                            };
                                      };
                            } in 
                              case
                                  GHC.IO.Handle.Internals.$wwithHandle'
                                      lvl23_rbnX5 wild_sbukT dt_sbulr sat_sbumT ipv_sbulY
                              of
                              { (#,#) ipv2_sbumV [Occ=Once*] ipv3_sbumW [Occ=Once!] ->
                                    case ipv3_sbumW of {
                                      GHC.IO.Handle.Types.FileHandle _ [Occ=Dead]
                                                                     dt3_sbumZ [Occ=Once] ->
                                          let {
                                            sat_sbun0 [Occ=Once] :: GHC.IO.Handle.Types.Handle
                                            [LclId] =
                                                CCCS GHC.IO.Handle.Types.DuplexHandle! [path_sbulq
                                                                                        dt3_sbumZ
                                                                                        dt2_sbum2];
                                          } in  (#,#) [ipv2_sbumV sat_sbun0];
                                      GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                          lvl25_rbnX7 ipv2_sbumV;
                                    };
                              };
                        GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                         _ [Occ=Dead]
                                                         _ [Occ=Dead] ->
                            lvl27_rbnX9 ipv_sbulY;
                      };
                };
        };

GHC.IO.Handle.hDuplicate
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hDuplicate1 eta_B2 eta_B1;

GHC.IO.Handle.hGetEcho4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hGetEcho"#;

GHC.IO.Handle.hGetEcho3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hGetEcho4;

GHC.IO.Handle.hGetEcho2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool) #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h__sbun7 s1_sbun8]
        case h__sbun7 of wild_sbun9 {
          GHC.IO.Handle.Types.Handle__ $dIODevice_sbuna [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds_sbund [Occ=Once]
                                       ds1_sbune [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds1_sbune of {
                __DEFAULT ->
                    case GHC.IO.Device.getEcho $dIODevice_sbuna ds_sbund s1_sbun8 of {
                      (#,#) ipv_sbuns [Occ=Once] ipv1_sbunt [Occ=Once] ->
                          let {
                            sat_sbunu [Occ=Once]
                              :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                            [LclId] =
                                CCCS (,)! [wild_sbun9 ipv1_sbunt];
                          } in  (#,#) [ipv_sbuns sat_sbunu];
                    };
                GHC.IO.Handle.Types.ClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_closedHandle1 s1_sbun8;
              };
        };

GHC.IO.Handle.hGetEcho1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbunw s_sbunx]
        case GHC.IO.Handle.hGetEcho5 handle_sbunw s_sbunx of {
          (#,#) ipv_sbunz [Occ=Once*] ipv1_sbunA [Occ=Once!] ->
              case ipv1_sbunA of {
                GHC.Types.False -> (#,#) [ipv_sbunz GHC.Types.False];
                GHC.Types.True ->
                    case handle_sbunw of wild1_sbunC {
                      GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbunE ->
                          case getMaskingState# [ipv_sbunz] of {
                            (#,#) ipv2_sbunG [Occ=Once*] ipv3_sbunH [Occ=Once!] ->
                                let {
                                  io_sbunI [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                                  [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                      [wild1_sbunC dt_sbunE] \r [s1_sbunJ]
                                          case
                                              GHC.IO.Handle.Internals.$wdo_operation
                                                  GHC.IO.Handle.hGetEcho3
                                                  wild1_sbunC
                                                  GHC.IO.Handle.hGetEcho2
                                                  dt_sbunE
                                                  s1_sbunJ
                                          of
                                          { (#,#) ipv4_sbunL [Occ=Once] ipv5_sbunM [Occ=Once!] ->
                                                case ipv5_sbunM of {
                                                  (,) h'_sbunO [Occ=Once] v_sbunP [Occ=Once] ->
                                                      case
                                                          putMVar# [dt_sbunE h'_sbunO ipv4_sbunL]
                                                      of
                                                      s2#_sbunQ
                                                      { __DEFAULT -> (#,#) [s2#_sbunQ v_sbunP];
                                                      };
                                                };
                                          };
                                } in 
                                  case ipv3_sbunH of {
                                    __DEFAULT -> io_sbunI ipv2_sbunG;
                                    0# -> maskAsyncExceptions# [io_sbunI ipv2_sbunG];
                                  };
                          };
                      GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                       dt_sbunT
                                                       _ [Occ=Dead] ->
                          case getMaskingState# [ipv_sbunz] of {
                            (#,#) ipv2_sbunW [Occ=Once*] ipv3_sbunX [Occ=Once!] ->
                                let {
                                  io_sbunY [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                                  [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                      [wild1_sbunC dt_sbunT] \r [s1_sbunZ]
                                          case
                                              GHC.IO.Handle.Internals.$wdo_operation
                                                  GHC.IO.Handle.hGetEcho3
                                                  wild1_sbunC
                                                  GHC.IO.Handle.hGetEcho2
                                                  dt_sbunT
                                                  s1_sbunZ
                                          of
                                          { (#,#) ipv4_sbuo1 [Occ=Once] ipv5_sbuo2 [Occ=Once!] ->
                                                case ipv5_sbuo2 of {
                                                  (,) h'_sbuo4 [Occ=Once] v_sbuo5 [Occ=Once] ->
                                                      case
                                                          putMVar# [dt_sbunT h'_sbuo4 ipv4_sbuo1]
                                                      of
                                                      s2#_sbuo6
                                                      { __DEFAULT -> (#,#) [s2#_sbuo6 v_sbuo5];
                                                      };
                                                };
                                          };
                                } in 
                                  case ipv3_sbunX of {
                                    __DEFAULT -> io_sbunY ipv2_sbunW;
                                    0# -> maskAsyncExceptions# [io_sbunY ipv2_sbunW];
                                  };
                          };
                    };
              };
        };

GHC.IO.Handle.hGetEcho
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hGetEcho1 eta_B2 eta_B1;

GHC.IO.Handle.hSetEcho3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hSetEcho"#;

GHC.IO.Handle.hSetEcho2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hSetEcho3;

GHC.IO.Handle.hSetEcho1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Types.Bool
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbuo8 on_sbuo9 s_sbuoa]
        case GHC.IO.Handle.hGetEcho5 handle_sbuo8 s_sbuoa of {
          (#,#) ipv_sbuoc [Occ=Once*] ipv1_sbuod [Occ=Once!] ->
              case ipv1_sbuod of {
                GHC.Types.False -> (#,#) [ipv_sbuoc GHC.Tuple.()];
                GHC.Types.True ->
                    case handle_sbuo8 of wild1_sbuof {
                      GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbuoh ->
                          case getMaskingState# [ipv_sbuoc] of {
                            (#,#) ipv2_sbuoj [Occ=Once*] ipv3_sbuok [Occ=Once!] ->
                                let {
                                  io_sbuol [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                  [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                      [on_sbuo9 wild1_sbuof dt_sbuoh] \r [s1_sbuom]
                                          let {
                                            sat_sbuoM [Occ=Once]
                                              :: GHC.IO.Handle.Types.Handle__
                                                 -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, ())
                                            [LclId] =
                                                [on_sbuo9] \r [h__sbuon s2_sbuoo]
                                                    case h__sbuon of wild2_sbuop {
                                                      GHC.IO.Handle.Types.Handle__ $dIODevice_sbuoq [Occ=Once]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   ds3_sbuot [Occ=Once]
                                                                                   ds4_sbuou [Occ=Once!]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead] ->
                                                          case ds4_sbuou of {
                                                            __DEFAULT ->
                                                                case
                                                                    GHC.IO.Device.setEcho
                                                                        $dIODevice_sbuoq
                                                                        ds3_sbuot
                                                                        on_sbuo9
                                                                        s2_sbuoo
                                                                of
                                                                { (#,#) ipv4_sbuoI [Occ=Once]
                                                                        ipv5_sbuoJ [Occ=Once] ->
                                                                      let {
                                                                        sat_sbuoK [Occ=Once]
                                                                          :: (GHC.IO.Handle.Types.Handle__,
                                                                              ())
                                                                        [LclId] =
                                                                            CCCS (,)! [wild2_sbuop
                                                                                       ipv5_sbuoJ];
                                                                      } in 
                                                                        (#,#) [ipv4_sbuoI
                                                                               sat_sbuoK];
                                                                };
                                                            GHC.IO.Handle.Types.ClosedHandle ->
                                                                GHC.IO.Handle.Internals.ioe_closedHandle1
                                                                    s2_sbuoo;
                                                          };
                                                    };
                                          } in 
                                            case
                                                GHC.IO.Handle.Internals.$wdo_operation
                                                    GHC.IO.Handle.hSetEcho2
                                                    wild1_sbuof
                                                    sat_sbuoM
                                                    dt_sbuoh
                                                    s1_sbuom
                                            of
                                            { (#,#) ipv4_sbuoO [Occ=Once] ipv5_sbuoP [Occ=Once!] ->
                                                  case ipv5_sbuoP of {
                                                    (,) h'_sbuoR [Occ=Once] v_sbuoS [Occ=Once] ->
                                                        case
                                                            putMVar# [dt_sbuoh h'_sbuoR ipv4_sbuoO]
                                                        of
                                                        s2#_sbuoT
                                                        { __DEFAULT -> (#,#) [s2#_sbuoT v_sbuoS];
                                                        };
                                                  };
                                            };
                                } in 
                                  case ipv3_sbuok of {
                                    __DEFAULT -> io_sbuol ipv2_sbuoj;
                                    0# -> maskAsyncExceptions# [io_sbuol ipv2_sbuoj];
                                  };
                          };
                      GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                       dt_sbuoW
                                                       _ [Occ=Dead] ->
                          case getMaskingState# [ipv_sbuoc] of {
                            (#,#) ipv2_sbuoZ [Occ=Once*] ipv3_sbup0 [Occ=Once!] ->
                                let {
                                  io_sbup1 [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                  [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                      [on_sbuo9 wild1_sbuof dt_sbuoW] \r [s1_sbup2]
                                          let {
                                            sat_sbups [Occ=Once]
                                              :: GHC.IO.Handle.Types.Handle__
                                                 -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, ())
                                            [LclId] =
                                                [on_sbuo9] \r [h__sbup3 s2_sbup4]
                                                    case h__sbup3 of wild2_sbup5 {
                                                      GHC.IO.Handle.Types.Handle__ $dIODevice_sbup6 [Occ=Once]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   ds3_sbup9 [Occ=Once]
                                                                                   ds4_sbupa [Occ=Once!]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead] ->
                                                          case ds4_sbupa of {
                                                            __DEFAULT ->
                                                                case
                                                                    GHC.IO.Device.setEcho
                                                                        $dIODevice_sbup6
                                                                        ds3_sbup9
                                                                        on_sbuo9
                                                                        s2_sbup4
                                                                of
                                                                { (#,#) ipv4_sbupo [Occ=Once]
                                                                        ipv5_sbupp [Occ=Once] ->
                                                                      let {
                                                                        sat_sbupq [Occ=Once]
                                                                          :: (GHC.IO.Handle.Types.Handle__,
                                                                              ())
                                                                        [LclId] =
                                                                            CCCS (,)! [wild2_sbup5
                                                                                       ipv5_sbupp];
                                                                      } in 
                                                                        (#,#) [ipv4_sbupo
                                                                               sat_sbupq];
                                                                };
                                                            GHC.IO.Handle.Types.ClosedHandle ->
                                                                GHC.IO.Handle.Internals.ioe_closedHandle1
                                                                    s2_sbup4;
                                                          };
                                                    };
                                          } in 
                                            case
                                                GHC.IO.Handle.Internals.$wdo_operation
                                                    GHC.IO.Handle.hSetEcho2
                                                    wild1_sbuof
                                                    sat_sbups
                                                    dt_sbuoW
                                                    s1_sbup2
                                            of
                                            { (#,#) ipv4_sbupu [Occ=Once] ipv5_sbupv [Occ=Once!] ->
                                                  case ipv5_sbupv of {
                                                    (,) h'_sbupx [Occ=Once] v_sbupy [Occ=Once] ->
                                                        case
                                                            putMVar# [dt_sbuoW h'_sbupx ipv4_sbupu]
                                                        of
                                                        s2#_sbupz
                                                        { __DEFAULT -> (#,#) [s2#_sbupz v_sbupy];
                                                        };
                                                  };
                                            };
                                } in 
                                  case ipv3_sbup0 of {
                                    __DEFAULT -> io_sbup1 ipv2_sbuoZ;
                                    0# -> maskAsyncExceptions# [io_sbup1 ipv2_sbuoZ];
                                  };
                          };
                    };
              };
        };

GHC.IO.Handle.hSetEcho
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.Bool -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.hSetEcho1 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.hGetBuffering3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hGetBuffering"#;

GHC.IO.Handle.hGetBuffering_fun :: GHC.Base.String
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hGetBuffering3;

GHC.IO.Handle.hGetBuffering2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, GHC.IO.Handle.Types.BufferMode) #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h__sbupB s1_sbupC]
        case h__sbupB of wild_sbupD {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds2_sbupI [Occ=Once!]
                                       _ [Occ=Dead]
                                       ds3_sbupK [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds2_sbupI of {
                __DEFAULT ->
                    let {
                      sat_sbupV [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__, GHC.IO.Handle.Types.BufferMode)
                      [LclId] =
                          CCCS (,)! [wild_sbupD ds3_sbupK];
                    } in  (#,#) [s1_sbupC sat_sbupV];
                GHC.IO.Handle.Types.ClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_closedHandle1 s1_sbupC;
              };
        };

GHC.IO.Handle.hGetBuffering1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.BufferMode #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbupX eta_sbupY]
        case handle_sbupX of wild_sbupZ {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbuq1 ->
              case getMaskingState# [eta_sbupY] of {
                (#,#) ipv_sbuq3 [Occ=Once*] ipv1_sbuq4 [Occ=Once!] ->
                    let {
                      io_sbuq5 [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 GHC.IO.Handle.Types.BufferMode #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbupZ dt_sbuq1] \r [s_sbuq6]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hGetBuffering_fun
                                      wild_sbupZ
                                      GHC.IO.Handle.hGetBuffering2
                                      dt_sbuq1
                                      s_sbuq6
                              of
                              { (#,#) ipv2_sbuq8 [Occ=Once] ipv3_sbuq9 [Occ=Once!] ->
                                    case ipv3_sbuq9 of {
                                      (,) h'_sbuqb [Occ=Once] v_sbuqc [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbuq1 h'_sbuqb ipv2_sbuq8]
                                          of
                                          s2#_sbuqd
                                          { __DEFAULT -> (#,#) [s2#_sbuqd v_sbuqc];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbuq4 of {
                        __DEFAULT -> io_sbuq5 ipv_sbuq3;
                        0# -> maskAsyncExceptions# [io_sbuq5 ipv_sbuq3];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sbuqg
                                           _ [Occ=Dead] ->
              case getMaskingState# [eta_sbupY] of {
                (#,#) ipv_sbuqj [Occ=Once*] ipv1_sbuqk [Occ=Once!] ->
                    let {
                      io_sbuql [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 GHC.IO.Handle.Types.BufferMode #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbupZ dt_sbuqg] \r [s_sbuqm]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hGetBuffering_fun
                                      wild_sbupZ
                                      GHC.IO.Handle.hGetBuffering2
                                      dt_sbuqg
                                      s_sbuqm
                              of
                              { (#,#) ipv2_sbuqo [Occ=Once] ipv3_sbuqp [Occ=Once!] ->
                                    case ipv3_sbuqp of {
                                      (,) h'_sbuqr [Occ=Once] v_sbuqs [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbuqg h'_sbuqr ipv2_sbuqo]
                                          of
                                          s2#_sbuqt
                                          { __DEFAULT -> (#,#) [s2#_sbuqt v_sbuqs];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbuqk of {
                        __DEFAULT -> io_sbuql ipv_sbuqj;
                        0# -> maskAsyncExceptions# [io_sbuql ipv_sbuqj];
                      };
              };
        };

GHC.IO.Handle.hGetBuffering
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Types.IO GHC.IO.Handle.Types.BufferMode
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hGetBuffering1 eta_B2 eta_B1;

GHC.IO.Handle.hIsWritable4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hIsWritable"#;

GHC.IO.Handle.hIsWritable3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hIsWritable4;

GHC.IO.Handle.hIsWritable2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool) #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h__sbuqv s1_sbuqw]
        case h__sbuqv of wild_sbuqx {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds2_sbuqC [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds2_sbuqC of wild1_sbuqO {
                __DEFAULT ->
                    let {
                      sat_sbuqQ [Occ=Once] :: GHC.Types.Bool
                      [LclId] =
                          [wild1_sbuqO] \u []
                              case wild1_sbuqO of {
                                GHC.IO.Handle.Types.ReadHandle -> GHC.Types.False [];
                                GHC.IO.Handle.Types.WriteHandle -> GHC.Types.True [];
                                GHC.IO.Handle.Types.AppendHandle -> GHC.Types.True [];
                                GHC.IO.Handle.Types.ReadWriteHandle -> GHC.Types.True [];
                              }; } in
                    let {
                      sat_sbuqR [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                      [LclId] =
                          CCCS (,)! [wild_sbuqx sat_sbuqQ];
                    } in  (#,#) [s1_sbuqw sat_sbuqR];
                GHC.IO.Handle.Types.ClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_closedHandle1 s1_sbuqw;
                GHC.IO.Handle.Types.SemiClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_semiclosedHandle1 s1_sbuqw;
              };
        };

GHC.IO.Handle.hIsWritable1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [ds_sbuqU eta_sbuqV]
        case ds_sbuqU of wild_sbuqW {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] ipv1_sbuqY ->
              case getMaskingState# [eta_sbuqV] of {
                (#,#) ipv2_sbur0 [Occ=Once*] ipv3_sbur1 [Occ=Once!] ->
                    let {
                      io_sbur2 [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbuqW ipv1_sbuqY] \r [s_sbur3]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hIsWritable3
                                      wild_sbuqW
                                      GHC.IO.Handle.hIsWritable2
                                      ipv1_sbuqY
                                      s_sbur3
                              of
                              { (#,#) ipv4_sbur5 [Occ=Once] ipv5_sbur6 [Occ=Once!] ->
                                    case ipv5_sbur6 of {
                                      (,) h'_sbur8 [Occ=Once] v_sbur9 [Occ=Once] ->
                                          case
                                              putMVar# [ipv1_sbuqY h'_sbur8 ipv4_sbur5]
                                          of
                                          s2#_sbura
                                          { __DEFAULT -> (#,#) [s2#_sbura v_sbur9];
                                          };
                                    };
                              };
                    } in 
                      case ipv3_sbur1 of {
                        __DEFAULT -> io_sbur2 ipv2_sbur0;
                        0# -> maskAsyncExceptions# [io_sbur2 ipv2_sbur0];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              (#,#) [eta_sbuqV GHC.Types.True];
        };

GHC.IO.Handle.hIsWritable
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hIsWritable1 eta_B2 eta_B1;

GHC.IO.Handle.hIsReadable4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hIsReadable"#;

GHC.IO.Handle.hIsReadable3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hIsReadable4;

GHC.IO.Handle.hIsReadable2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool) #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h__sburf s1_sburg]
        case h__sburf of wild_sburh {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds2_sburm [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds2_sburm of wild1_sbury {
                __DEFAULT ->
                    let {
                      sat_sburA [Occ=Once] :: GHC.Types.Bool
                      [LclId] =
                          [wild1_sbury] \u []
                              case wild1_sbury of {
                                __DEFAULT -> GHC.Types.False [];
                                GHC.IO.Handle.Types.ReadHandle -> GHC.Types.True [];
                                GHC.IO.Handle.Types.ReadWriteHandle -> GHC.Types.True [];
                              }; } in
                    let {
                      sat_sburB [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                      [LclId] =
                          CCCS (,)! [wild_sburh sat_sburA];
                    } in  (#,#) [s1_sburg sat_sburB];
                GHC.IO.Handle.Types.ClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_closedHandle1 s1_sburg;
                GHC.IO.Handle.Types.SemiClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_semiclosedHandle1 s1_sburg;
              };
        };

GHC.IO.Handle.hIsReadable1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [ds_sburE eta_sburF]
        case ds_sburE of wild_sburG {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] ipv1_sburI ->
              case getMaskingState# [eta_sburF] of {
                (#,#) ipv2_sburK [Occ=Once*] ipv3_sburL [Occ=Once!] ->
                    let {
                      io_sburM [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sburG ipv1_sburI] \r [s_sburN]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hIsReadable3
                                      wild_sburG
                                      GHC.IO.Handle.hIsReadable2
                                      ipv1_sburI
                                      s_sburN
                              of
                              { (#,#) ipv4_sburP [Occ=Once] ipv5_sburQ [Occ=Once!] ->
                                    case ipv5_sburQ of {
                                      (,) h'_sburS [Occ=Once] v_sburT [Occ=Once] ->
                                          case
                                              putMVar# [ipv1_sburI h'_sburS ipv4_sburP]
                                          of
                                          s2#_sburU
                                          { __DEFAULT -> (#,#) [s2#_sburU v_sburT];
                                          };
                                    };
                              };
                    } in 
                      case ipv3_sburL of {
                        __DEFAULT -> io_sburM ipv2_sburK;
                        0# -> maskAsyncExceptions# [io_sburM ipv2_sburK];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              (#,#) [eta_sburF GHC.Types.True];
        };

GHC.IO.Handle.hIsReadable
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hIsReadable1 eta_B2 eta_B1;

GHC.IO.Handle.hIsClosed4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hIsClosed"#;

GHC.IO.Handle.hIsClosed3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hIsClosed4;

GHC.IO.Handle.hIsClosed2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool) #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [h__sburZ s1_sbus0]
        case h__sburZ of wild_sbus1 {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds2_sbus6 [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds2_sbus6 of {
                __DEFAULT ->
                    let {
                      sat_sbusj [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                      [LclId] =
                          CCCS (,)! [wild_sbus1 GHC.Types.False];
                    } in  (#,#) [s1_sbus0 sat_sbusj];
                GHC.IO.Handle.Types.ClosedHandle ->
                    let {
                      sat_sbusk [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                      [LclId] =
                          CCCS (,)! [wild_sbus1 GHC.Types.True];
                    } in  (#,#) [s1_sbus0 sat_sbusk];
              };
        };

GHC.IO.Handle.hIsClosed1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbusl eta_sbusm]
        case handle_sbusl of wild_sbusn {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbusp ->
              case getMaskingState# [eta_sbusm] of {
                (#,#) ipv_sbusr [Occ=Once*] ipv1_sbuss [Occ=Once!] ->
                    let {
                      io_sbust [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbusn dt_sbusp] \r [s_sbusu]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hIsClosed3
                                      wild_sbusn
                                      GHC.IO.Handle.hIsClosed2
                                      dt_sbusp
                                      s_sbusu
                              of
                              { (#,#) ipv2_sbusw [Occ=Once] ipv3_sbusx [Occ=Once!] ->
                                    case ipv3_sbusx of {
                                      (,) h'_sbusz [Occ=Once] v_sbusA [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbusp h'_sbusz ipv2_sbusw]
                                          of
                                          s2#_sbusB
                                          { __DEFAULT -> (#,#) [s2#_sbusB v_sbusA];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbuss of {
                        __DEFAULT -> io_sbust ipv_sbusr;
                        0# -> maskAsyncExceptions# [io_sbust ipv_sbusr];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sbusE
                                           _ [Occ=Dead] ->
              case getMaskingState# [eta_sbusm] of {
                (#,#) ipv_sbusH [Occ=Once*] ipv1_sbusI [Occ=Once!] ->
                    let {
                      io_sbusJ [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbusn dt_sbusE] \r [s_sbusK]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hIsClosed3
                                      wild_sbusn
                                      GHC.IO.Handle.hIsClosed2
                                      dt_sbusE
                                      s_sbusK
                              of
                              { (#,#) ipv2_sbusM [Occ=Once] ipv3_sbusN [Occ=Once!] ->
                                    case ipv3_sbusN of {
                                      (,) h'_sbusP [Occ=Once] v_sbusQ [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbusE h'_sbusP ipv2_sbusM]
                                          of
                                          s2#_sbusR
                                          { __DEFAULT -> (#,#) [s2#_sbusR v_sbusQ];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbusI of {
                        __DEFAULT -> io_sbusJ ipv_sbusH;
                        0# -> maskAsyncExceptions# [io_sbusJ ipv_sbusH];
                      };
              };
        };

GHC.IO.Handle.hIsClosed
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hIsClosed1 eta_B2 eta_B1;

GHC.IO.Handle.hIsOpen4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hIsOpen"#;

GHC.IO.Handle.hIsOpen3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hIsOpen4;

GHC.IO.Handle.hIsOpen2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool) #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [h__sbusT s1_sbusU]
        case h__sbusT of wild_sbusV {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds2_sbut0 [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds2_sbut0 of {
                __DEFAULT ->
                    let {
                      sat_sbutd [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                      [LclId] =
                          CCCS (,)! [wild_sbusV GHC.Types.True];
                    } in  (#,#) [s1_sbusU sat_sbutd];
                GHC.IO.Handle.Types.ClosedHandle ->
                    let {
                      sat_sbute [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                      [LclId] =
                          CCCS (,)! [wild_sbusV GHC.Types.False];
                    } in  (#,#) [s1_sbusU sat_sbute];
                GHC.IO.Handle.Types.SemiClosedHandle ->
                    let {
                      sat_sbutf [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                      [LclId] =
                          CCCS (,)! [wild_sbusV GHC.Types.False];
                    } in  (#,#) [s1_sbusU sat_sbutf];
              };
        };

GHC.IO.Handle.hIsOpen1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbutg eta_sbuth]
        case handle_sbutg of wild_sbuti {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbutk ->
              case getMaskingState# [eta_sbuth] of {
                (#,#) ipv_sbutm [Occ=Once*] ipv1_sbutn [Occ=Once!] ->
                    let {
                      io_sbuto [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbuti dt_sbutk] \r [s_sbutp]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hIsOpen3
                                      wild_sbuti
                                      GHC.IO.Handle.hIsOpen2
                                      dt_sbutk
                                      s_sbutp
                              of
                              { (#,#) ipv2_sbutr [Occ=Once] ipv3_sbuts [Occ=Once!] ->
                                    case ipv3_sbuts of {
                                      (,) h'_sbutu [Occ=Once] v_sbutv [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbutk h'_sbutu ipv2_sbutr]
                                          of
                                          s2#_sbutw
                                          { __DEFAULT -> (#,#) [s2#_sbutw v_sbutv];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbutn of {
                        __DEFAULT -> io_sbuto ipv_sbutm;
                        0# -> maskAsyncExceptions# [io_sbuto ipv_sbutm];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sbutz
                                           _ [Occ=Dead] ->
              case getMaskingState# [eta_sbuth] of {
                (#,#) ipv_sbutC [Occ=Once*] ipv1_sbutD [Occ=Once!] ->
                    let {
                      io_sbutE [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbuti dt_sbutz] \r [s_sbutF]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hIsOpen3
                                      wild_sbuti
                                      GHC.IO.Handle.hIsOpen2
                                      dt_sbutz
                                      s_sbutF
                              of
                              { (#,#) ipv2_sbutH [Occ=Once] ipv3_sbutI [Occ=Once!] ->
                                    case ipv3_sbutI of {
                                      (,) h'_sbutK [Occ=Once] v_sbutL [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbutz h'_sbutK ipv2_sbutH]
                                          of
                                          s2#_sbutM
                                          { __DEFAULT -> (#,#) [s2#_sbutM v_sbutL];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbutD of {
                        __DEFAULT -> io_sbutE ipv_sbutC;
                        0# -> maskAsyncExceptions# [io_sbutE ipv_sbutC];
                      };
              };
        };

GHC.IO.Handle.hIsOpen
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hIsOpen1 eta_B2 eta_B1;

GHC.IO.Handle.hGetPosn1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.HandlePosn #)
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbutO s_sbutP]
        case
            GHC.IO.Handle.Internals.wantSeekableHandle1
                GHC.IO.Handle.hGetPosn3
                handle_sbutO
                GHC.IO.Handle.hGetPosn2
                s_sbutP
        of
        { (#,#) ipv_sbutR [Occ=Once] ipv1_sbutS [Occ=Once] ->
              let {
                sat_sbutT [Occ=Once] :: GHC.IO.Handle.HandlePosn
                [LclId] =
                    CCCS GHC.IO.Handle.HandlePosn! [handle_sbutO ipv1_sbutS];
              } in  (#,#) [ipv_sbutR sat_sbutT];
        };

GHC.IO.Handle.hGetPosn
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Types.IO GHC.IO.Handle.HandlePosn
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hGetPosn1 eta_B2 eta_B1;

GHC.IO.Handle.hClose3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hClose"#;

GHC.IO.Handle.hClose2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hClose3;

GHC.IO.Handle.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Exception.IOErrorType
     -> GHC.Base.String
     -> GHC.Base.Maybe Foreign.C.Types.CInt
     -> GHC.Base.Maybe GHC.IO.FilePath
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=6,
 Str=<B,U><B,U><B,U><B,U><B,1*U><B,U>x,
 Unf=OtherCon []] =
    [] \r [w_sbutU ww_sbutV ww1_sbutW ww2_sbutX ww3_sbutY w1_sbutZ]
        let {
          sat_sbuub [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [w_sbutU ww_sbutV ww1_sbutW ww2_sbutX ww3_sbutY] \u []
                  let {
                    sat_sbuu9 [Occ=Once] :: GHC.Base.Maybe GHC.IO.FilePath
                    [LclId] =
                        [w_sbutU ww3_sbutY] \u []
                            case ww3_sbutY of wild1_sbuu1 {
                              GHC.Base.Nothing ->
                                  case w_sbutU of {
                                    GHC.IO.Handle.Types.FileHandle path_sbuu3 [Occ=Once]
                                                                   _ [Occ=Dead] ->
                                        GHC.Base.Just [path_sbuu3];
                                    GHC.IO.Handle.Types.DuplexHandle path_sbuu5 [Occ=Once]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead] ->
                                        GHC.Base.Just [path_sbuu5];
                                  };
                              GHC.Base.Just _ [Occ=Dead] -> wild1_sbuu1;
                            }; } in
                  let {
                    sat_sbuu0 [Occ=Once] :: GHC.Base.Maybe GHC.IO.Handle.Types.Handle
                    [LclId] =
                        CCCS GHC.Base.Just! [w_sbutU]; } in
                  let {
                    sat_sbuua [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        CCCS GHC.IO.Exception.IOError! [sat_sbuu0
                                                        ww_sbutV
                                                        GHC.IO.Handle.hClose2
                                                        ww1_sbutW
                                                        ww2_sbutX
                                                        sat_sbuu9];
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sbuua;
        } in  raiseIO# [sat_sbuub w1_sbutZ];

GHC.IO.Handle.hClose1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h_sbuuc eta_sbuud]
        case h_sbuuc of wild_sbuue {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbuug [Occ=Once] ->
              case
                  GHC.IO.Handle.Internals.$wwithHandle'
                      GHC.IO.Handle.hClose2
                      wild_sbuue
                      dt_sbuug
                      GHC.IO.Handle.Internals.hClose_help1
                      eta_sbuud
              of
              { (#,#) ipv_sbuui [Occ=Once*] ipv1_sbuuj [Occ=Once!] ->
                    case ipv1_sbuuj of {
                      GHC.Base.Nothing -> (#,#) [ipv_sbuui GHC.Tuple.()];
                      GHC.Base.Just e_sbuul [Occ=Once!] ->
                          case e_sbuul of wild2_sbuum {
                            GHC.Exception.SomeException $dException1_sbuun [Occ=Once]
                                                        e2_sbuuo [Occ=Once] ->
                                case GHC.Exception.$p1Exception $dException1_sbuun of sat_sbuup {
                                  __DEFAULT ->
                                      case
                                          Data.Typeable.Internal.sameTypeRep
                                              sat_sbuup GHC.IO.Exception.$fExceptionIOException4
                                      of
                                      { GHC.Types.False -> raiseIO# [wild2_sbuum ipv_sbuui];
                                        GHC.Types.True ->
                                            case e2_sbuuo of {
                                              GHC.IO.Exception.IOError _ [Occ=Dead]
                                                                       ww2_sbuut [Occ=Once]
                                                                       _ [Occ=Dead]
                                                                       ww4_sbuuv [Occ=Once]
                                                                       ww5_sbuuw [Occ=Once]
                                                                       ww6_sbuux [Occ=Once] ->
                                                  GHC.IO.Handle.$wlvl
                                                      wild_sbuue
                                                      ww2_sbuut
                                                      ww4_sbuuv
                                                      ww5_sbuuw
                                                      ww6_sbuux
                                                      ipv_sbuui;
                                            };
                                      };
                                };
                          };
                    };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sbuuz [Occ=Once]
                                           dt1_sbuuA [Occ=Once] ->
              case
                  GHC.IO.Handle.Internals.$wwithHandle'
                      GHC.IO.Handle.hClose2
                      wild_sbuue
                      dt_sbuuz
                      GHC.IO.Handle.Internals.hClose_help1
                      eta_sbuud
              of
              { (#,#) ipv_sbuuC [Occ=Once] ipv1_sbuuD [Occ=Once] ->
                    case
                        GHC.IO.Handle.Internals.$wwithHandle'
                            GHC.IO.Handle.hClose2
                            wild_sbuue
                            dt1_sbuuA
                            GHC.IO.Handle.Internals.hClose_help1
                            ipv_sbuuC
                    of
                    { (#,#) ipv2_sbuuF [Occ=Once*] ipv3_sbuuG [Occ=Once] ->
                          let {
                            sat_sbuuH [Occ=Once]
                              :: [GHC.Base.Maybe GHC.Exception.SomeException]
                            [LclId] =
                                CCCS :! [ipv3_sbuuG GHC.Types.[]]; } in
                          let {
                            sat_sbuuI [Occ=Once]
                              :: [GHC.Base.Maybe GHC.Exception.SomeException]
                            [LclId] =
                                CCCS :! [ipv1_sbuuD sat_sbuuH];
                          } in 
                            case Data.Maybe.catMaybes1 sat_sbuuI of {
                              [] -> (#,#) [ipv2_sbuuF GHC.Tuple.()];
                              : y_sbuuK [Occ=Once!] _ [Occ=Dead] ->
                                  case y_sbuuK of wild2_sbuuM {
                                    GHC.Exception.SomeException $dException1_sbuuN [Occ=Once]
                                                                e2_sbuuO [Occ=Once] ->
                                        case
                                            GHC.Exception.$p1Exception $dException1_sbuuN
                                        of
                                        sat_sbuuP
                                        { __DEFAULT ->
                                              case
                                                  Data.Typeable.Internal.sameTypeRep
                                                      sat_sbuuP
                                                      GHC.IO.Exception.$fExceptionIOException4
                                              of
                                              { GHC.Types.False ->
                                                    raiseIO# [wild2_sbuuM ipv2_sbuuF];
                                                GHC.Types.True ->
                                                    case e2_sbuuO of {
                                                      GHC.IO.Exception.IOError _ [Occ=Dead]
                                                                               ww2_sbuuT [Occ=Once]
                                                                               _ [Occ=Dead]
                                                                               ww4_sbuuV [Occ=Once]
                                                                               ww5_sbuuW [Occ=Once]
                                                                               ww6_sbuuX [Occ=Once] ->
                                                          GHC.IO.Handle.$wlvl
                                                              wild_sbuue
                                                              ww2_sbuuT
                                                              ww4_sbuuV
                                                              ww5_sbuuW
                                                              ww6_sbuuX
                                                              ipv2_sbuuF;
                                                    };
                                              };
                                        };
                                  };
                            };
                    };
              };
        };

GHC.IO.Handle.hClose
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO ()
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hClose1 eta_B2 eta_B1;

lvl28_rbnXa :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['{'#];

lvl29_rbnXb :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! [','#];

lvl30_rbnXc :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "duplex (read-write)"#;

lvl31_rbnXd :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl30_rbnXc;

lvl32_rbnXe :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "none"#;

lvl33_rbnXf :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl32_rbnXe;

lvl34_rbnXg :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "line"#;

lvl35_rbnXh :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl34_rbnXg;

lvl36_rbnXi :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "showHandle"#;

lvl37_rbnXj :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl36_rbnXi;

lvl38_rbnXk :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "loc="#;

lvl39_rbnXl :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "type="#;

lvl40_rbnXm :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "buffering="#;

lvl41_rbnXn :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "}"#;

lvl42_rbnXo :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl41_rbnXn;

lvl43_rbnXp :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.Base.++ lvl33_rbnXf lvl42_rbnXo;

lvl44_rbnXq :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.Base.++ lvl35_rbnXh lvl42_rbnXo;

lvl45_rbnXr :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "block "#;

lvl46_rbnXs :: [GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.$fShow(,)2 lvl42_rbnXo];

lvl47_rbnXt :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.Base.++ GHC.IO.Handle.Types.$fShowHandleType11 lvl42_rbnXo;

GHC.IO.Handle.hShow2
  :: GHC.Base.String
     -> GHC.Types.Bool
     -> GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
[GblId, Arity=4, Str=<L,U><L,U><S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [filepath_sbuuY is_duplex_sbuuZ h_sbuv0 eta_sbuv1]
        let {
          act_sbuv2 [Occ=OnceL*!, Dmd=<L,C(C1(U(U,U)))>]
            :: GHC.IO.Handle.Types.Handle__
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
          [LclId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
              sat-only [filepath_sbuuY is_duplex_sbuuZ] \r [hdl__sbuv3 s_sbuv4]
                  let {
                    sat_sbuw2 [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [filepath_sbuuY is_duplex_sbuuZ hdl__sbuv3] \u []
                            case hdl__sbuv3 of {
                              GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           ds2_sbuva [Occ=Once!]
                                                           _ [Occ=Dead]
                                                           ds3_sbuvc [Occ=Once!]
                                                           _ [Occ=Dead]
                                                           dt2_sbuve [Occ=Once]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead] ->
                                  case ds2_sbuva of wild1_sbuvm {
                                    __DEFAULT ->
                                        let {
                                          sat_sbuw1 [Occ=Once] :: [GHC.Types.Char]
                                          [LclId] =
                                              [filepath_sbuuY
                                               is_duplex_sbuuZ
                                               ds3_sbuvc
                                               dt2_sbuve
                                               wild1_sbuvm] \u []
                                                  let {
                                                    sat_sbuvZ [Occ=Once] :: [GHC.Types.Char]
                                                    [LclId] =
                                                        [is_duplex_sbuuZ
                                                         ds3_sbuvc
                                                         dt2_sbuve
                                                         wild1_sbuvm] \u []
                                                            let {
                                                              sat_sbuvY [Occ=Once]
                                                                :: [GHC.Types.Char]
                                                              [LclId] =
                                                                  [is_duplex_sbuuZ
                                                                   ds3_sbuvc
                                                                   dt2_sbuve
                                                                   wild1_sbuvm] \u []
                                                                      let {
                                                                        karg_sbuvn [Occ=Once*]
                                                                          :: [GHC.Types.Char]
                                                                        [LclId] =
                                                                            [ds3_sbuvc
                                                                             dt2_sbuve] \u []
                                                                                let {
                                                                                  sat_sbuvP [Occ=Once]
                                                                                    :: [GHC.Types.Char]
                                                                                  [LclId] =
                                                                                      [ds3_sbuvc
                                                                                       dt2_sbuve] \u []
                                                                                          case
                                                                                              ds3_sbuvc
                                                                                          of
                                                                                          { GHC.IO.Handle.Types.NoBuffering ->
                                                                                                lvl43_rbnXp;
                                                                                            GHC.IO.Handle.Types.LineBuffering ->
                                                                                                lvl44_rbnXq;
                                                                                            GHC.IO.Handle.Types.BlockBuffering ds_sbuvp [Occ=Once!] ->
                                                                                                case
                                                                                                    ds_sbuvp
                                                                                                of
                                                                                                { GHC.Base.Nothing ->
                                                                                                      let {
                                                                                                        sat_sbuvF [Occ=Once]
                                                                                                          :: [GHC.Types.Char]
                                                                                                        [LclId] =
                                                                                                            [dt2_sbuve] \u []
                                                                                                                case
                                                                                                                    case
                                                                                                                        noDuplicate# [GHC.Prim.realWorld#]
                                                                                                                    of
                                                                                                                    s'_sbuvr
                                                                                                                    { __DEFAULT ->
                                                                                                                          readMutVar# [dt2_sbuve
                                                                                                                                       s'_sbuvr];
                                                                                                                    }
                                                                                                                of
                                                                                                                { (#,#) _ [Occ=Dead]
                                                                                                                        ipv1_sbuvu [Occ=Once!] ->
                                                                                                                      case
                                                                                                                          ipv1_sbuvu
                                                                                                                      of
                                                                                                                      { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                                                                             _ [Occ=Dead]
                                                                                                                                             _ [Occ=Dead]
                                                                                                                                             dt6_sbuvz [Occ=Once]
                                                                                                                                             _ [Occ=Dead]
                                                                                                                                             _ [Occ=Dead] ->
                                                                                                                            case
                                                                                                                                GHC.Show.$wshowSignedInt
                                                                                                                                    0#
                                                                                                                                    dt6_sbuvz
                                                                                                                                    lvl46_rbnXs
                                                                                                                            of
                                                                                                                            { (#,#) ww5_sbuvD [Occ=Once]
                                                                                                                                    ww6_sbuvE [Occ=Once] ->
                                                                                                                                  : [ww5_sbuvD
                                                                                                                                     ww6_sbuvE];
                                                                                                                            };
                                                                                                                      };
                                                                                                                }; } in
                                                                                                      let {
                                                                                                        sat_sbuvG [Occ=Once]
                                                                                                          :: [GHC.Types.Char]
                                                                                                        [LclId] =
                                                                                                            CCCS :! [GHC.Show.$fShow(,)4
                                                                                                                     sat_sbuvF];
                                                                                                      } in 
                                                                                                        GHC.CString.unpackAppendCString#
                                                                                                            lvl45_rbnXr
                                                                                                            sat_sbuvG;
                                                                                                  GHC.Base.Just n_sbuvH [Occ=Once!] ->
                                                                                                      let {
                                                                                                        sat_sbuvN [Occ=Once]
                                                                                                          :: [GHC.Types.Char]
                                                                                                        [LclId] =
                                                                                                            [n_sbuvH] \u []
                                                                                                                case
                                                                                                                    n_sbuvH
                                                                                                                of
                                                                                                                { GHC.Types.I# ww3_sbuvJ [Occ=Once] ->
                                                                                                                      case
                                                                                                                          GHC.Show.$wshowSignedInt
                                                                                                                              0#
                                                                                                                              ww3_sbuvJ
                                                                                                                              lvl46_rbnXs
                                                                                                                      of
                                                                                                                      { (#,#) ww5_sbuvL [Occ=Once]
                                                                                                                              ww6_sbuvM [Occ=Once] ->
                                                                                                                            : [ww5_sbuvL
                                                                                                                               ww6_sbuvM];
                                                                                                                      };
                                                                                                                }; } in
                                                                                                      let {
                                                                                                        sat_sbuvO [Occ=Once]
                                                                                                          :: [GHC.Types.Char]
                                                                                                        [LclId] =
                                                                                                            CCCS :! [GHC.Show.$fShow(,)4
                                                                                                                     sat_sbuvN];
                                                                                                      } in 
                                                                                                        GHC.CString.unpackAppendCString#
                                                                                                            lvl45_rbnXr
                                                                                                            sat_sbuvO;
                                                                                                };
                                                                                          };
                                                                                } in 
                                                                                  GHC.CString.unpackAppendCString#
                                                                                      lvl40_rbnXm
                                                                                      sat_sbuvP;
                                                                      } in 
                                                                        case is_duplex_sbuuZ of {
                                                                          GHC.Types.False ->
                                                                              case wild1_sbuvm of {
                                                                                GHC.IO.Handle.Types.SemiClosedHandle ->
                                                                                    let {
                                                                                      sat_sbuvS [Occ=Once]
                                                                                        :: [GHC.Types.Char]
                                                                                      [LclId] =
                                                                                          CCCS :! [lvl29_rbnXb
                                                                                                   karg_sbuvn];
                                                                                    } in 
                                                                                      GHC.Base.++
                                                                                          GHC.IO.Handle.Types.$fShowHandleType9
                                                                                          sat_sbuvS;
                                                                                GHC.IO.Handle.Types.ReadHandle ->
                                                                                    let {
                                                                                      sat_sbuvT [Occ=Once]
                                                                                        :: [GHC.Types.Char]
                                                                                      [LclId] =
                                                                                          CCCS :! [lvl29_rbnXb
                                                                                                   karg_sbuvn];
                                                                                    } in 
                                                                                      GHC.Base.++
                                                                                          GHC.IO.Handle.Types.$fShowHandleType7
                                                                                          sat_sbuvT;
                                                                                GHC.IO.Handle.Types.WriteHandle ->
                                                                                    let {
                                                                                      sat_sbuvU [Occ=Once]
                                                                                        :: [GHC.Types.Char]
                                                                                      [LclId] =
                                                                                          CCCS :! [lvl29_rbnXb
                                                                                                   karg_sbuvn];
                                                                                    } in 
                                                                                      GHC.Base.++
                                                                                          GHC.IO.Handle.Types.$fShowHandleType5
                                                                                          sat_sbuvU;
                                                                                GHC.IO.Handle.Types.AppendHandle ->
                                                                                    let {
                                                                                      sat_sbuvV [Occ=Once]
                                                                                        :: [GHC.Types.Char]
                                                                                      [LclId] =
                                                                                          CCCS :! [lvl29_rbnXb
                                                                                                   karg_sbuvn];
                                                                                    } in 
                                                                                      GHC.Base.++
                                                                                          GHC.IO.Handle.Types.$fShowHandleType3
                                                                                          sat_sbuvV;
                                                                                GHC.IO.Handle.Types.ReadWriteHandle ->
                                                                                    let {
                                                                                      sat_sbuvW [Occ=Once]
                                                                                        :: [GHC.Types.Char]
                                                                                      [LclId] =
                                                                                          CCCS :! [lvl29_rbnXb
                                                                                                   karg_sbuvn];
                                                                                    } in 
                                                                                      GHC.Base.++
                                                                                          GHC.IO.Handle.Types.$fShowHandleType1
                                                                                          sat_sbuvW;
                                                                              };
                                                                          GHC.Types.True ->
                                                                              let {
                                                                                sat_sbuvX [Occ=Once]
                                                                                  :: [GHC.Types.Char]
                                                                                [LclId] =
                                                                                    CCCS :! [lvl29_rbnXb
                                                                                             karg_sbuvn];
                                                                              } in 
                                                                                GHC.Base.++
                                                                                    lvl31_rbnXd
                                                                                    sat_sbuvX;
                                                                        };
                                                            } in 
                                                              GHC.CString.unpackAppendCString#
                                                                  lvl39_rbnXl sat_sbuvY; } in
                                                  let {
                                                    sat_sbuw0 [Occ=Once] :: [GHC.Types.Char]
                                                    [LclId] =
                                                        CCCS :! [lvl29_rbnXb sat_sbuvZ];
                                                  } in  GHC.Base.++ filepath_sbuuY sat_sbuw0;
                                        } in 
                                          GHC.CString.unpackAppendCString# lvl38_rbnXk sat_sbuw1;
                                    GHC.IO.Handle.Types.ClosedHandle -> lvl47_rbnXt;
                                  };
                            }; } in
                  let {
                    sat_sbuw3 [Occ=Once] :: GHC.Base.String
                    [LclId] =
                        CCCS :! [lvl28_rbnXa sat_sbuw2];
                  } in  (#,#) [s_sbuv4 sat_sbuw3];
        } in 
          case h_sbuv0 of wild_sbuw4 {
            GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbuw6 ->
                case getMaskingState# [eta_sbuv1] of {
                  (#,#) ipv_sbuw8 [Occ=Once*] ipv1_sbuw9 [Occ=Once!] ->
                      let {
                        io_sbuwa [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                          :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
                        [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                            [act_sbuv2 wild_sbuw4 dt_sbuw6] \r [s_sbuwb]
                                let {
                                  sat_sbuwi [Occ=Once]
                                    :: GHC.IO.Handle.Types.Handle__
                                       -> GHC.Types.IO
                                            (GHC.IO.Handle.Types.Handle__, GHC.Base.String)
                                  [LclId] =
                                      [act_sbuv2] \r [h__sbuwc s1_sbuwd]
                                          case act_sbuv2 h__sbuwc s1_sbuwd of {
                                            (#,#) ipv2_sbuwf [Occ=Once] ipv3_sbuwg [Occ=Once] ->
                                                let {
                                                  sat_sbuwh [Occ=Once]
                                                    :: (GHC.IO.Handle.Types.Handle__,
                                                        GHC.Base.String)
                                                  [LclId] =
                                                      CCCS (,)! [h__sbuwc ipv3_sbuwg];
                                                } in  (#,#) [ipv2_sbuwf sat_sbuwh];
                                          };
                                } in 
                                  case
                                      GHC.IO.Handle.Internals.$wdo_operation
                                          lvl37_rbnXj wild_sbuw4 sat_sbuwi dt_sbuw6 s_sbuwb
                                  of
                                  { (#,#) ipv2_sbuwk [Occ=Once] ipv3_sbuwl [Occ=Once!] ->
                                        case ipv3_sbuwl of {
                                          (,) h'_sbuwn [Occ=Once] v_sbuwo [Occ=Once] ->
                                              case
                                                  putMVar# [dt_sbuw6 h'_sbuwn ipv2_sbuwk]
                                              of
                                              s2#_sbuwp
                                              { __DEFAULT -> (#,#) [s2#_sbuwp v_sbuwo];
                                              };
                                        };
                                  };
                      } in 
                        case ipv1_sbuw9 of {
                          __DEFAULT -> io_sbuwa ipv_sbuw8;
                          0# -> maskAsyncExceptions# [io_sbuwa ipv_sbuw8];
                        };
                };
            GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                             dt_sbuws
                                             _ [Occ=Dead] ->
                case getMaskingState# [eta_sbuv1] of {
                  (#,#) ipv_sbuwv [Occ=Once*] ipv1_sbuww [Occ=Once!] ->
                      let {
                        io_sbuwx [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                          :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
                        [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                            [act_sbuv2 wild_sbuw4 dt_sbuws] \r [s_sbuwy]
                                let {
                                  sat_sbuwF [Occ=Once]
                                    :: GHC.IO.Handle.Types.Handle__
                                       -> GHC.Types.IO
                                            (GHC.IO.Handle.Types.Handle__, GHC.Base.String)
                                  [LclId] =
                                      [act_sbuv2] \r [h__sbuwz s1_sbuwA]
                                          case act_sbuv2 h__sbuwz s1_sbuwA of {
                                            (#,#) ipv2_sbuwC [Occ=Once] ipv3_sbuwD [Occ=Once] ->
                                                let {
                                                  sat_sbuwE [Occ=Once]
                                                    :: (GHC.IO.Handle.Types.Handle__,
                                                        GHC.Base.String)
                                                  [LclId] =
                                                      CCCS (,)! [h__sbuwz ipv3_sbuwD];
                                                } in  (#,#) [ipv2_sbuwC sat_sbuwE];
                                          };
                                } in 
                                  case
                                      GHC.IO.Handle.Internals.$wdo_operation
                                          lvl37_rbnXj wild_sbuw4 sat_sbuwF dt_sbuws s_sbuwy
                                  of
                                  { (#,#) ipv2_sbuwH [Occ=Once] ipv3_sbuwI [Occ=Once!] ->
                                        case ipv3_sbuwI of {
                                          (,) h'_sbuwK [Occ=Once] v_sbuwL [Occ=Once] ->
                                              case
                                                  putMVar# [dt_sbuws h'_sbuwK ipv2_sbuwH]
                                              of
                                              s2#_sbuwM
                                              { __DEFAULT -> (#,#) [s2#_sbuwM v_sbuwL];
                                              };
                                        };
                                  };
                      } in 
                        case ipv1_sbuww of {
                          __DEFAULT -> io_sbuwx ipv_sbuwv;
                          0# -> maskAsyncExceptions# [io_sbuwx ipv_sbuwv];
                        };
                };
          };

GHC.IO.Handle.hShow1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h_sbuwO eta_sbuwP]
        case h_sbuwO of wild_sbuwQ {
          GHC.IO.Handle.Types.FileHandle path_sbuwR [Occ=Once]
                                         _ [Occ=Dead] ->
              GHC.IO.Handle.hShow2
                  path_sbuwR GHC.Types.False wild_sbuwQ eta_sbuwP;
          GHC.IO.Handle.Types.DuplexHandle path_sbuwT [Occ=Once]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              GHC.IO.Handle.hShow2
                  path_sbuwT GHC.Types.True wild_sbuwQ eta_sbuwP;
        };

GHC.IO.Handle.hShow
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.hShow1 eta_B2 eta_B1;

GHC.IO.Handle.HandlePosn
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.HandlePosition -> GHC.IO.Handle.HandlePosn
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.HandlePosn [eta_B2 eta_B1];


==================== STG syntax: ====================
2018-03-16 16:06:27.733032428 UTC

GHC.IO.Handle.$w$c== [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.HandlePosition
     -> GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.HandlePosition
     -> GHC.Types.Bool
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*U><S,1*U><L,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_sbtVU ww1_sbtVV ww2_sbtVW ww3_sbtVX]
        case GHC.Integer.Type.eqInteger# ww1_sbtVV ww3_sbtVX of {
          __DEFAULT -> GHC.Types.False [];
          1# -> GHC.IO.Handle.Types.$fEqHandle_$c== ww_sbtVU ww2_sbtVW;
        };

GHC.IO.Handle.$fEqHandlePosn_$c== [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.HandlePosn
     -> GHC.IO.Handle.HandlePosn -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(LS),1*U(1*U,1*U)><S(LS),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [w_sbtVZ w1_sbtW0]
        case w_sbtVZ of {
          GHC.IO.Handle.HandlePosn ww1_sbtW2 [Occ=Once]
                                   ww2_sbtW3 [Occ=Once] ->
              case w1_sbtW0 of {
                GHC.IO.Handle.HandlePosn ww4_sbtW5 [Occ=Once]
                                         ww5_sbtW6 [Occ=Once] ->
                    GHC.IO.Handle.$w$c== ww1_sbtW2 ww2_sbtW3 ww4_sbtW5 ww5_sbtW6;
              };
        };

GHC.IO.Handle.$fEqHandlePosn_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.IO.Handle.HandlePosn
     -> GHC.IO.Handle.HandlePosn -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(LS),1*U(1*U,1*U)><S(LS),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [eta_sbtW7 eta1_sbtW8]
        case eta_sbtW7 of {
          GHC.IO.Handle.HandlePosn h1_sbtWa [Occ=Once!]
                                   p1_sbtWb [Occ=Once] ->
              case eta1_sbtW8 of {
                GHC.IO.Handle.HandlePosn h2_sbtWd [Occ=Once*!]
                                         p2_sbtWe [Occ=Once] ->
                    case GHC.Integer.Type.eqInteger# p1_sbtWb p2_sbtWe of {
                      __DEFAULT -> GHC.Types.True [];
                      1# ->
                          case h1_sbtWa of {
                            GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbtWi [Occ=Once] ->
                                case h2_sbtWd of {
                                  GHC.IO.Handle.Types.FileHandle _ [Occ=Dead]
                                                                 dt1_sbtWl [Occ=Once] ->
                                      case sameMVar# [dt_sbtWi dt1_sbtWl] of {
                                        __DEFAULT -> GHC.Types.True [];
                                        1# -> GHC.Types.False [];
                                      };
                                  GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                                   _ [Occ=Dead]
                                                                   _ [Occ=Dead] ->
                                      GHC.Types.True [];
                                };
                            GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                             dt_sbtWr [Occ=Once]
                                                             _ [Occ=Dead] ->
                                case h2_sbtWd of {
                                  GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] _ [Occ=Dead] ->
                                      GHC.Types.True [];
                                  GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                                   dt2_sbtWx [Occ=Once]
                                                                   _ [Occ=Dead] ->
                                      case sameMVar# [dt_sbtWr dt2_sbtWx] of {
                                        __DEFAULT -> GHC.Types.True [];
                                        1# -> GHC.Types.False [];
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.$fEqHandlePosn [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.IO.Handle.HandlePosn
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.IO.Handle.$fEqHandlePosn_$c==
                                     GHC.IO.Handle.$fEqHandlePosn_$c/=];

GHC.IO.Handle.$fShowHandlePosn2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    " at position "#;

GHC.IO.Handle.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.HandlePosition
     -> GHC.Base.String
     -> GHC.Base.String
[GblId, Arity=3, Str=<S,1*U><L,U><L,U>, Unf=OtherCon []] =
    [] \r [ww_sbtWA ww1_sbtWB w_sbtWC]
        case ww_sbtWA of {
          GHC.IO.Handle.Types.FileHandle file_sbtWE [Occ=Once]
                                         _ [Occ=Dead] ->
              let {
                sat_sbtWM [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [ww1_sbtWB w_sbtWC file_sbtWE] \u []
                        let {
                          sat_sbtWL [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                          [LclId] =
                              [ww1_sbtWB w_sbtWC] \s []
                                  let {
                                    sat_sbtWK [Occ=Once] :: [GHC.Types.Char]
                                    [LclId] =
                                        [ww1_sbtWB w_sbtWC] \u []
                                            let {
                                              sat_sbtWJ [Occ=Once] :: [GHC.Types.Char]
                                              [LclId] =
                                                  [ww1_sbtWB w_sbtWC] \u []
                                                      case
                                                          GHC.Show.$w$cshowsPrec4
                                                              0# ww1_sbtWB w_sbtWC
                                                      of
                                                      { (#,#) ww3_sbtWH [Occ=Once]
                                                              ww4_sbtWI [Occ=Once] ->
                                                            : [ww3_sbtWH ww4_sbtWI];
                                                      };
                                            } in 
                                              GHC.CString.unpackAppendCString#
                                                  GHC.IO.Handle.$fShowHandlePosn2 sat_sbtWJ;
                                  } in 
                                    GHC.CString.unpackAppendCString#
                                        GHC.IO.Handle.Types.$fReadNewlineMode5 sat_sbtWK;
                        } in  GHC.Base.++ file_sbtWE sat_sbtWL;
              } in 
                GHC.CString.unpackAppendCString#
                    GHC.IO.Handle.Types.showHandle1 sat_sbtWM;
          GHC.IO.Handle.Types.DuplexHandle file_sbtWN [Occ=Once]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              let {
                sat_sbtWW [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [ww1_sbtWB w_sbtWC file_sbtWN] \u []
                        let {
                          sat_sbtWV [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                          [LclId] =
                              [ww1_sbtWB w_sbtWC] \s []
                                  let {
                                    sat_sbtWU [Occ=Once] :: [GHC.Types.Char]
                                    [LclId] =
                                        [ww1_sbtWB w_sbtWC] \u []
                                            let {
                                              sat_sbtWT [Occ=Once] :: [GHC.Types.Char]
                                              [LclId] =
                                                  [ww1_sbtWB w_sbtWC] \u []
                                                      case
                                                          GHC.Show.$w$cshowsPrec4
                                                              0# ww1_sbtWB w_sbtWC
                                                      of
                                                      { (#,#) ww3_sbtWR [Occ=Once]
                                                              ww4_sbtWS [Occ=Once] ->
                                                            : [ww3_sbtWR ww4_sbtWS];
                                                      };
                                            } in 
                                              GHC.CString.unpackAppendCString#
                                                  GHC.IO.Handle.$fShowHandlePosn2 sat_sbtWT;
                                  } in 
                                    GHC.CString.unpackAppendCString#
                                        GHC.IO.Handle.Types.$fReadNewlineMode5 sat_sbtWU;
                        } in  GHC.Base.++ file_sbtWN sat_sbtWV;
              } in 
                GHC.CString.unpackAppendCString#
                    GHC.IO.Handle.Types.showHandle1 sat_sbtWW;
        };

GHC.IO.Handle.$fShowHandlePosn_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.IO.Handle.HandlePosn -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,A><S(SL),1*U(1*U,U)><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sbtWX w1_sbtWY w2_sbtWZ]
        case w1_sbtWY of {
          GHC.IO.Handle.HandlePosn ww1_sbtX1 [Occ=Once]
                                   ww2_sbtX2 [Occ=Once] ->
              GHC.IO.Handle.$w$cshowsPrec ww1_sbtX1 ww2_sbtX2 w2_sbtWZ;
        };

GHC.IO.Handle.$fShowHandlePosn3 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.IO.Handle.$fShowHandlePosn_$cshow
  :: GHC.IO.Handle.HandlePosn -> GHC.Base.String
[GblId, Arity=1, Str=<S(SL),1*U(1*U,U)>, Unf=OtherCon []] =
    [] \r [x_sbtX3]
        case x_sbtX3 of {
          GHC.IO.Handle.HandlePosn ww1_sbtX5 [Occ=Once]
                                   ww2_sbtX6 [Occ=Once] ->
              GHC.IO.Handle.$w$cshowsPrec ww1_sbtX5 ww2_sbtX6 GHC.Types.[];
        };

GHC.IO.Handle.$fShowHandlePosn1
  :: GHC.IO.Handle.HandlePosn -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S(SL),1*U(1*U,U)><L,U>, Unf=OtherCon []] =
    [] \r [w_sbtX7 w1_sbtX8]
        case w_sbtX7 of {
          GHC.IO.Handle.HandlePosn ww1_sbtXa [Occ=Once]
                                   ww2_sbtXb [Occ=Once] ->
              GHC.IO.Handle.$w$cshowsPrec ww1_sbtXa ww2_sbtXb w1_sbtX8;
        };

GHC.IO.Handle.$fShowHandlePosn_$cshowList
  :: [GHC.IO.Handle.HandlePosn] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sbtXc s_sbtXd]
        GHC.Show.showList__
            GHC.IO.Handle.$fShowHandlePosn1 ls_sbtXc s_sbtXd;

GHC.IO.Handle.$fShowHandlePosn [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Handle.HandlePosn
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Handle.$fShowHandlePosn_$cshowsPrec
                                    GHC.IO.Handle.$fShowHandlePosn_$cshow
                                    GHC.IO.Handle.$fShowHandlePosn_$cshowList];

GHC.IO.Handle.hLookAhead3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hLookAhead"#;

GHC.IO.Handle.hLookAhead2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hLookAhead3;

GHC.IO.Handle.hLookAhead1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Char #)
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [handle_sbtXe void_0E]
        GHC.IO.Handle.Internals.wantReadableHandle_1
            GHC.IO.Handle.hLookAhead2
            handle_sbtXe
            GHC.IO.Handle.Internals.hLookAhead_1
            GHC.Prim.void#;

GHC.IO.Handle.hLookAhead
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Char
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.hLookAhead1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.hFlush3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hFlush"#;

GHC.IO.Handle.hFlush2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hFlush3;

GHC.IO.Handle.hFlush1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [handle_sbtXf void_0E]
        GHC.IO.Handle.Internals.wantWritableHandle1
            GHC.IO.Handle.hFlush2
            handle_sbtXf
            GHC.IO.Handle.Internals.flushWriteBuffer1
            GHC.Prim.void#;

GHC.IO.Handle.hFlush
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] GHC.IO.Handle.hFlush1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.hFlushAll4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hFlushAll"#;

GHC.IO.Handle.hFlushAll3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hFlushAll4;

GHC.IO.Handle.hFlushAll2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, ()) #)
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [h__sbtXg void_0E]
        case
            GHC.IO.Handle.Internals.flushBuffer1 h__sbtXg GHC.Prim.void#
        of
        { Unit# ipv1_sbtXk [Occ=Once] ->
              let {
                sat_sbtXl [Occ=Once] :: (GHC.IO.Handle.Types.Handle__, ())
                [LclId] =
                    CCCS (,)! [h__sbtXg ipv1_sbtXk];
              } in  Unit# [sat_sbtXl];
        };

GHC.IO.Handle.hFlushAll1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbtXm void_0E]
        case handle_sbtXm of wild_sbtXo {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbtXq ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sbtXt [Occ=Once!] ->
                    let {
                      io_sbtXu [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbtXo dt_sbtXq] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hFlushAll3
                                      wild_sbtXo
                                      GHC.IO.Handle.hFlushAll2
                                      dt_sbtXq
                                      GHC.Prim.void#
                              of
                              { Unit# ipv3_sbtXy [Occ=Once!] ->
                                    case ipv3_sbtXy of {
                                      (,) h'_sbtXA [Occ=Once] v_sbtXB [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbtXq h'_sbtXA GHC.Prim.void#]
                                          of
                                          s2#_sbtXC
                                          { (##) -> Unit# [v_sbtXB];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbtXt of {
                        __DEFAULT -> io_sbtXu GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sbtXu GHC.Prim.void#];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sbtXF
                                           _ [Occ=Dead] ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sbtXJ [Occ=Once!] ->
                    let {
                      io_sbtXK [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbtXo dt_sbtXF] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hFlushAll3
                                      wild_sbtXo
                                      GHC.IO.Handle.hFlushAll2
                                      dt_sbtXF
                                      GHC.Prim.void#
                              of
                              { Unit# ipv3_sbtXO [Occ=Once!] ->
                                    case ipv3_sbtXO of {
                                      (,) h'_sbtXQ [Occ=Once] v_sbtXR [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbtXF h'_sbtXQ GHC.Prim.void#]
                                          of
                                          s2#_sbtXS
                                          { (##) -> Unit# [v_sbtXR];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbtXJ of {
                        __DEFAULT -> io_sbtXK GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sbtXK GHC.Prim.void#];
                      };
              };
        };

GHC.IO.Handle.hFlushAll
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO ()
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.hFlushAll1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.hGetEcho7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hIsTerminalDevice"#;

GHC.IO.Handle.hGetEcho_fun :: GHC.Base.String
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hGetEcho7;

GHC.IO.Handle.hGetEcho6
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool) #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h__sbtXU void_0E]
        case h__sbtXU of wild_sbtXW {
          GHC.IO.Handle.Types.Handle__ $dIODevice_sbtXX [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds_sbtY0 [Occ=Once]
                                       ds1_sbtY1 [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds1_sbtY1 of {
                __DEFAULT ->
                    case
                        GHC.IO.Device.isTerminal $dIODevice_sbtXX ds_sbtY0 GHC.Prim.void#
                    of
                    { Unit# ipv1_sbtYg [Occ=Once] ->
                          let {
                            sat_sbtYh [Occ=Once]
                              :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                            [LclId] =
                                CCCS (,)! [wild_sbtXW ipv1_sbtYg];
                          } in  Unit# [sat_sbtYh];
                    };
                GHC.IO.Handle.Types.ClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_closedHandle1 GHC.Prim.void#;
              };
        };

GHC.IO.Handle.hGetEcho5
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbtYj void_0E]
        case handle_sbtYj of wild_sbtYl {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbtYn ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sbtYq [Occ=Once!] ->
                    let {
                      io_sbtYr [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbtYl dt_sbtYn] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hGetEcho_fun
                                      wild_sbtYl
                                      GHC.IO.Handle.hGetEcho6
                                      dt_sbtYn
                                      GHC.Prim.void#
                              of
                              { Unit# ipv3_sbtYv [Occ=Once!] ->
                                    case ipv3_sbtYv of {
                                      (,) h'_sbtYx [Occ=Once] v_sbtYy [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbtYn h'_sbtYx GHC.Prim.void#]
                                          of
                                          s2#_sbtYz
                                          { (##) -> Unit# [v_sbtYy];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbtYq of {
                        __DEFAULT -> io_sbtYr GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sbtYr GHC.Prim.void#];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sbtYC
                                           _ [Occ=Dead] ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sbtYG [Occ=Once!] ->
                    let {
                      io_sbtYH [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbtYl dt_sbtYC] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hGetEcho_fun
                                      wild_sbtYl
                                      GHC.IO.Handle.hGetEcho6
                                      dt_sbtYC
                                      GHC.Prim.void#
                              of
                              { Unit# ipv3_sbtYL [Occ=Once!] ->
                                    case ipv3_sbtYL of {
                                      (,) h'_sbtYN [Occ=Once] v_sbtYO [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbtYC h'_sbtYN GHC.Prim.void#]
                                          of
                                          s2#_sbtYP
                                          { (##) -> Unit# [v_sbtYO];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbtYG of {
                        __DEFAULT -> io_sbtYH GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sbtYH GHC.Prim.void#];
                      };
              };
        };

GHC.IO.Handle.hIsTerminalDevice
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.hGetEcho5 eta_B2 GHC.Prim.void#;

lvl_rbnWB :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hDuplicateTo"#;

lvl1_rbnWC :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl_rbnWB;

lvl2_rbnWD :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "handles are incompatible"#;

lvl3_rbnWE :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl2_rbnWD;

ioe_dupHandlesNotCompatible_rbnWF
  :: forall a.
     GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [h_sbtYR void_0E]
        let {
          sat_sbtYV [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [h_sbtYR] \u []
                  let {
                    sat_sbtYT [Occ=Once] :: GHC.Base.Maybe GHC.IO.Handle.Types.Handle
                    [LclId] =
                        CCCS GHC.Base.Just! [h_sbtYR]; } in
                  let {
                    sat_sbtYU [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        CCCS GHC.IO.Exception.IOError! [sat_sbtYT
                                                        GHC.IO.Exception.IllegalOperation
                                                        lvl1_rbnWC
                                                        lvl3_rbnWE
                                                        GHC.Base.Nothing
                                                        GHC.Base.Nothing];
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sbtYU;
        } in  raiseIO# [sat_sbtYV GHC.Prim.void#];

GHC.IO.Handle.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.Handle.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.$trModule4];

GHC.IO.Handle.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Handle"#;

GHC.IO.Handle.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.$trModule2];

GHC.IO.Handle.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Handle.$trModule3
                                     GHC.IO.Handle.$trModule1];

$krep_rbnWG :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Integer.Type.$tcInteger
                                              GHC.Types.[]];

$krep1_rbnWH :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcHandle
                                              GHC.Types.[]];

GHC.IO.Handle.$tcHandlePosn2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "HandlePosn"#;

GHC.IO.Handle.$tcHandlePosn1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.$tcHandlePosn2];

GHC.IO.Handle.$tcHandlePosn :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [14603627022044816180##
                                    6047646306417636971##
                                    GHC.IO.Handle.$trModule
                                    GHC.IO.Handle.$tcHandlePosn1
                                    0#
                                    GHC.Types.krep$*];

$krep2_rbnWI :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.$tcHandlePosn
                                              GHC.Types.[]];

$krep3_rbnWJ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_rbnWG $krep2_rbnWI];

GHC.IO.Handle.$tc'HandlePosn1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_rbnWH $krep3_rbnWJ];

GHC.IO.Handle.$tc'HandlePosn3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'HandlePosn"#;

GHC.IO.Handle.$tc'HandlePosn2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.$tc'HandlePosn3];

GHC.IO.Handle.$tc'HandlePosn :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2346493220596692855##
                                    1604707260447826943##
                                    GHC.IO.Handle.$trModule
                                    GHC.IO.Handle.$tc'HandlePosn2
                                    0#
                                    GHC.IO.Handle.$tc'HandlePosn1];

dupHandle__rbnWK
  :: forall dev.
     (GHC.IO.Device.IODevice dev, GHC.IO.BufferedIO.BufferedIO dev,
      Data.Typeable.Internal.Typeable dev) =>
     dev
     -> GHC.IO.FilePath
     -> GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
     -> GHC.IO.Handle.Types.Handle__
     -> GHC.Base.Maybe GHC.IO.Handle.Internals.HandleFinalizer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId,
 Arity=9,
 Str=<L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U)><L,U><L,U><L,U><L,U><S,1*U><L,1*U><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [$dIODevice_sbtYW
                    $dBufferedIO_sbtYX
                    $dTypeable_sbtYY
                    new_dev_sbtYZ
                    filepath_sbtZ0
                    other_side_sbtZ1
                    h__sbtZ2
                    mb_finalizer_sbtZ3
                    void_0E]
        case h__sbtZ2 of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds1_sbtZa [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds3_sbtZg [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds6_sbtZj [Occ=Once]
                                       ds7_sbtZk [Occ=Once]
                                       _ [Occ=Dead] ->
              let-no-escape {
                $j_sbtZm [Occ=Once*!T[2], Dmd=<L,1*C1(C1(U(U,U)))>]
                  :: GHC.Prim.State# GHC.Prim.RealWorld
                     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                           GHC.IO.Handle.Types.Handle #)
                [LclId[JoinId(2)], Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
                    sat-only [$dIODevice_sbtYW
                              $dBufferedIO_sbtYX
                              $dTypeable_sbtYY
                              new_dev_sbtYZ
                              filepath_sbtZ0
                              other_side_sbtZ1
                              mb_finalizer_sbtZ3
                              ds1_sbtZa
                              ds6_sbtZj
                              ds7_sbtZk] \r [void_0E ipv1_sbtZo]
                        let {
                          sat_sbtZp [Occ=Once] :: GHC.IO.Handle.Types.NewlineMode
                          [LclId] =
                              CCCS GHC.IO.Handle.Types.NewlineMode! [ds6_sbtZj ds7_sbtZk];
                        } in 
                          GHC.IO.Handle.Internals.mkDuplexHandle5
                              $dIODevice_sbtYW
                              $dBufferedIO_sbtYX
                              $dTypeable_sbtYY
                              new_dev_sbtYZ
                              filepath_sbtZ0
                              ds1_sbtZa
                              GHC.Types.True
                              ipv1_sbtZo
                              sat_sbtZp
                              mb_finalizer_sbtZ3
                              other_side_sbtZ1
                              GHC.Prim.void#;
              } in 
                case ds3_sbtZg of {
                  GHC.Base.Nothing -> $j_sbtZm GHC.Prim.void# GHC.Base.Nothing;
                  GHC.Base.Just _ [Occ=Dead] ->
                      case GHC.IO.Encoding.getLocaleEncoding1 of {
                        (,) getLocaleEncoding3_sbtZt [Occ=Once] _ [Occ=Dead] ->
                            case getLocaleEncoding3_sbtZt GHC.Prim.void# of {
                              Unit# ipv2_sbtZx [Occ=Once] ->
                                  let {
                                    sat_sbtZy [Occ=Once]
                                      :: GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
                                    [LclId] =
                                        CCCS GHC.Base.Just! [ipv2_sbtZx];
                                  } in  $j_sbtZm GHC.Prim.void# sat_sbtZy;
                            };
                      };
                };
        };

lvl4_rbnWL :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Pattern match failure in do expression at GHC/IO/Handle.hs:713:7-20"#;

lvl5_rbnWM
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle__ #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    sat-only [] \r [void_0E]
        case GHC.CString.unpackCString# lvl4_rbnWL of sat_sbtZA {
          __DEFAULT -> GHC.IO.failIO1 sat_sbtZA GHC.Prim.void#;
        };

dupHandleTo_rbnWN
  :: GHC.IO.FilePath
     -> GHC.IO.Handle.Types.Handle
     -> GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
     -> GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Handle.Types.Handle__
     -> GHC.Base.Maybe GHC.IO.Handle.Internals.HandleFinalizer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle__ #)
[GblId,
 Arity=7,
 Str=<L,U><L,U><L,U><S,1*U><S,1*U><L,1*U><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [filepath_sbtZB
                    h_sbtZC
                    other_side_sbtZD
                    hto__sbtZE
                    h__sbtZF
                    mb_finalizer_sbtZG
                    void_0E]
        case hto__sbtZE of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       $dTypeable_sbtZL [Occ=Once]
                                       ds_sbtZM
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case h__sbtZF of wild1_sbtZZ {
                GHC.IO.Handle.Types.Handle__ $dIODevice1_sbu00
                                             $dBufferedIO1_sbu01 [Occ=Once]
                                             $dTypeable1_sbu02
                                             ds9_sbu03 [Occ=Once]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead] ->
                    case
                        GHC.IO.Handle.Internals.flushBuffer1 wild1_sbtZZ GHC.Prim.void#
                    of
                    { Unit# _ [Occ=Dead] ->
                          case
                              Data.Typeable.Internal.sameTypeRep
                                  $dTypeable_sbtZL $dTypeable1_sbu02
                          of
                          { GHC.Types.False ->
                                ioe_dupHandlesNotCompatible_rbnWF h_sbtZC GHC.Prim.void#;
                            GHC.Types.True ->
                                case
                                    GHC.IO.Device.dup2
                                        $dIODevice1_sbu00 ds9_sbu03 ds_sbtZM GHC.Prim.void#
                                of
                                { Unit# _ [Occ=Dead] ->
                                      case
                                          dupHandle__rbnWK
                                              $dIODevice1_sbu00
                                              $dBufferedIO1_sbu01
                                              $dTypeable1_sbu02
                                              ds_sbtZM
                                              filepath_sbtZB
                                              other_side_sbtZD
                                              wild1_sbtZZ
                                              mb_finalizer_sbtZG
                                              GHC.Prim.void#
                                      of
                                      { Unit# ipv5_sbu0p [Occ=Once!] ->
                                            case ipv5_sbu0p of {
                                              GHC.IO.Handle.Types.FileHandle _ [Occ=Dead]
                                                                             dt8_sbu0s [Occ=Once] ->
                                                  takeMVar# [dt8_sbu0s GHC.Prim.void#];
                                              GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                                               _ [Occ=Dead]
                                                                               _ [Occ=Dead] ->
                                                  lvl5_rbnWM GHC.Prim.void#;
                                            };
                                      };
                                };
                          };
                    };
              };
        };

lvl6_rbnWO :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "dupHandle"#;

lvl7_rbnWP :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl6_rbnWO;

GHC.IO.Handle.hSetNewlineMode3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hSetNewlineMode"#;

GHC.IO.Handle.hSetNewlineMode2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hSetNewlineMode3;

GHC.IO.Handle.$whSetNewlineMode [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=4, Str=<S,1*U><L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [w_sbu0w ww_sbu0x ww1_sbu0y void_0E]
        let {
          sat_sbu0X [Occ=Once]
            :: GHC.IO.Handle.Types.Handle__
               -> GHC.Types.IO GHC.IO.Handle.Types.Handle__
          [LclId] =
              [ww_sbu0x ww1_sbu0y] \r [h__sbu0A void_0E]
                  case h__sbu0A of wild_sbu0C {
                    GHC.IO.Handle.Types.Handle__ $dIODevice_sbu0D [Occ=Once]
                                                 $dBufferedIO_sbu0E [Occ=Once]
                                                 $dTypeable_sbu0F [Occ=Once]
                                                 ds_sbu0G [Occ=Once]
                                                 ds1_sbu0H [Occ=Once]
                                                 dt_sbu0I [Occ=Once]
                                                 ds2_sbu0J [Occ=Once]
                                                 dt1_sbu0K [Occ=Once]
                                                 dt2_sbu0L [Occ=Once]
                                                 dt3_sbu0M [Occ=Once]
                                                 ds3_sbu0N [Occ=Once]
                                                 ds4_sbu0O [Occ=Once]
                                                 ds5_sbu0P [Occ=Once]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 ds8_sbu0S [Occ=Once] ->
                        case
                            GHC.IO.Handle.Internals.flushBuffer1 wild_sbu0C GHC.Prim.void#
                        of
                        { Unit# _ [Occ=Dead] ->
                              let {
                                sat_sbu0W [Occ=Once] :: GHC.IO.Handle.Types.Handle__
                                [LclId] =
                                    CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbu0D
                                                                        $dBufferedIO_sbu0E
                                                                        $dTypeable_sbu0F
                                                                        ds_sbu0G
                                                                        ds1_sbu0H
                                                                        dt_sbu0I
                                                                        ds2_sbu0J
                                                                        dt1_sbu0K
                                                                        dt2_sbu0L
                                                                        dt3_sbu0M
                                                                        ds3_sbu0N
                                                                        ds4_sbu0O
                                                                        ds5_sbu0P
                                                                        ww_sbu0x
                                                                        ww1_sbu0y
                                                                        ds8_sbu0S];
                              } in  Unit# [sat_sbu0W];
                        };
                  };
        } in 
          GHC.IO.Handle.Internals.withAllHandles__1
              GHC.IO.Handle.hSetNewlineMode2 w_sbu0w sat_sbu0X GHC.Prim.void#;

GHC.IO.Handle.hSetNewlineMode1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Types.NewlineMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><S,1*U(U,U)><S,U>, Unf=OtherCon []] =
    [] \r [w_sbu0Y w1_sbu0Z void_0E]
        case w1_sbu0Z of {
          GHC.IO.Handle.Types.NewlineMode ww1_sbu12 [Occ=Once]
                                          ww2_sbu13 [Occ=Once] ->
              GHC.IO.Handle.$whSetNewlineMode
                  w_sbu0Y ww1_sbu12 ww2_sbu13 GHC.Prim.void#;
        };

GHC.IO.Handle.hSetNewlineMode
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Types.NewlineMode -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,1*U><S,1*U(U,U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.hSetNewlineMode1 eta_B3 eta_B2 GHC.Prim.void#;

lvl8_rbnWQ :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hSetBinaryMode"#;

lvl9_rbnWR :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl8_rbnWQ;

lvl10_rbnWS :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "codec_state"#;

lvl11_rbnWT :: forall ds. ds
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl10_rbnWS of sat_sbu14 {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sbu14;
        };

GHC.IO.Handle.hSetBinaryMode1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Types.Bool
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbu15 bin_sbu16 void_0E]
        let {
          lvl48_sbu18 :: GHC.IO.Handle.Types.Newline
          [LclId] =
              [bin_sbu16] \u []
                  case bin_sbu16 of { __DEFAULT -> GHC.IO.Handle.Types.LF []; }; } in
        let {
          sat_sbu4H [Occ=Once]
            :: GHC.IO.Handle.Types.Handle__
               -> GHC.Types.IO GHC.IO.Handle.Types.Handle__
          [LclId] =
              [bin_sbu16 lvl48_sbu18] \r [h__sbu1a void_0E]
                  case h__sbu1a of {
                    GHC.IO.Handle.Types.Handle__ $dIODevice_sbu1d [Occ=Once*]
                                                 $dBufferedIO_sbu1e [Occ=Once*]
                                                 $dTypeable_sbu1f [Occ=Once*]
                                                 ds_sbu1g [Occ=Once*]
                                                 ds1_sbu1h
                                                 dt_sbu1i
                                                 ds2_sbu1j [Occ=Once*]
                                                 dt1_sbu1k [Occ=Once]
                                                 dt2_sbu1l
                                                 dt3_sbu1m [Occ=Once*]
                                                 ds3_sbu1n [Occ=Once*!]
                                                 ds4_sbu1o
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 ds8_sbu1s [Occ=Once*] ->
                        case readMutVar# [dt2_sbu1l GHC.Prim.void#] of {
                          Unit# ipv1_sbu1v [Occ=Once!] ->
                              case ipv1_sbu1v of {
                                GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                     _ [Occ=Dead]
                                                     ds10_sbu1z [Occ=Once!]
                                                     _ [Occ=Dead]
                                                     dt7_sbu1B [Occ=Once]
                                                     dt8_sbu1C [Occ=Once] ->
                                    let-no-escape {
                                      $w$j_sbu1D [InlPrag=NOUSERINLINE[0],
                                                  Occ=Once*!T[1],
                                                  Dmd=<L,1*C1(U)>]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                 GHC.IO.Handle.Types.Handle__ #)
                                      [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                          sat-only [bin_sbu16
                                                    lvl48_sbu18
                                                    $dIODevice_sbu1d
                                                    $dBufferedIO_sbu1e
                                                    $dTypeable_sbu1f
                                                    ds_sbu1g
                                                    ds1_sbu1h
                                                    dt_sbu1i
                                                    ds2_sbu1j
                                                    dt2_sbu1l
                                                    dt3_sbu1m
                                                    ds3_sbu1n
                                                    ds4_sbu1o
                                                    ds8_sbu1s] \r [void_0E]
                                              let-no-escape {
                                                $w$j1_sbu1F [InlPrag=NOUSERINLINE[0],
                                                             Occ=Once*!T[1],
                                                             Dmd=<L,1*C1(U)>]
                                                  :: GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.IO.Handle.Types.Handle__ #)
                                                [LclId[JoinId(1)],
                                                 Arity=1,
                                                 Str=<S,U>,
                                                 Unf=OtherCon []] =
                                                    sat-only [bin_sbu16
                                                              lvl48_sbu18
                                                              $dIODevice_sbu1d
                                                              $dBufferedIO_sbu1e
                                                              $dTypeable_sbu1f
                                                              ds_sbu1g
                                                              ds1_sbu1h
                                                              dt_sbu1i
                                                              ds2_sbu1j
                                                              dt2_sbu1l
                                                              dt3_sbu1m
                                                              ds8_sbu1s] \r [void_0E]
                                                        let-no-escape {
                                                          $j_sbu1H [Occ=Once*!T[2],
                                                                    Dmd=<L,1*C1(C1(U))>]
                                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> GHC.Base.Maybe
                                                                    GHC.IO.Encoding.Types.TextEncoding
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.IO.Handle.Types.Handle__ #)
                                                          [LclId[JoinId(2)],
                                                           Arity=2,
                                                           Str=<S,U><S,1*U>,
                                                           Unf=OtherCon []] =
                                                              sat-only [lvl48_sbu18
                                                                        $dIODevice_sbu1d
                                                                        $dBufferedIO_sbu1e
                                                                        $dTypeable_sbu1f
                                                                        ds_sbu1g
                                                                        ds1_sbu1h
                                                                        dt_sbu1i
                                                                        ds2_sbu1j
                                                                        dt2_sbu1l
                                                                        dt3_sbu1m
                                                                        ds8_sbu1s] \r [void_0E
                                                                                       ipv3_sbu1J]
                                                                  case ipv3_sbu1J of wild2_sbu1K {
                                                                    GHC.Base.Nothing ->
                                                                        case
                                                                            readMutVar# [dt_sbu1i
                                                                                         GHC.Prim.void#]
                                                                        of
                                                                        { Unit# ipv5_sbu1N [Occ=Once] ->
                                                                              let {
                                                                                sat_sbu1O [Occ=Once]
                                                                                  :: (GHC.Types.Any,
                                                                                      GHC.IO.Buffer.Buffer
                                                                                        GHC.Word.Word8)
                                                                                [LclId] =
                                                                                    CCCS (,)! [lvl11_rbnWT
                                                                                               ipv5_sbu1N];
                                                                              } in 
                                                                                case
                                                                                    newMutVar# [sat_sbu1O
                                                                                                GHC.Prim.void#]
                                                                                of
                                                                                { Unit# ipv7_sbu1R [Occ=Once] ->
                                                                                      let {
                                                                                        sat_sbu1S [Occ=Once]
                                                                                          :: GHC.IO.Handle.Types.Handle__
                                                                                        [LclId] =
                                                                                            CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbu1d
                                                                                                                                $dBufferedIO_sbu1e
                                                                                                                                $dTypeable_sbu1f
                                                                                                                                ds_sbu1g
                                                                                                                                ds1_sbu1h
                                                                                                                                dt_sbu1i
                                                                                                                                ds2_sbu1j
                                                                                                                                ipv7_sbu1R
                                                                                                                                dt2_sbu1l
                                                                                                                                dt3_sbu1m
                                                                                                                                GHC.Base.Nothing
                                                                                                                                GHC.Base.Nothing
                                                                                                                                GHC.Base.Nothing
                                                                                                                                lvl48_sbu18
                                                                                                                                lvl48_sbu18
                                                                                                                                ds8_sbu1s];
                                                                                      } in 
                                                                                        Unit# [sat_sbu1S];
                                                                                };
                                                                        };
                                                                    GHC.Base.Just ds12_sbu1T [Occ=Once!] ->
                                                                        case ds12_sbu1T of {
                                                                          GHC.IO.Encoding.Types.TextEncoding _ [Occ=Dead]
                                                                                                             ds14_sbu1W [Occ=Once*]
                                                                                                             ds15_sbu1X [Occ=Once*] ->
                                                                              let-no-escape {
                                                                                $j1_sbu1Y [Occ=Once*!T[2],
                                                                                           Dmd=<L,1*C1(C1(U))>]
                                                                                  :: GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                     -> GHC.Base.Maybe
                                                                                          (GHC.IO.Encoding.Types.TextDecoder
                                                                                             dstate_ibkNi)
                                                                                     -> (# GHC.Prim.State#
                                                                                             GHC.Prim.RealWorld,
                                                                                           GHC.IO.Handle.Types.Handle__ #)
                                                                                [LclId[JoinId(2)],
                                                                                 Arity=2,
                                                                                 Str=<S,U><L,U>,
                                                                                 Unf=OtherCon []] =
                                                                                    sat-only [lvl48_sbu18
                                                                                              $dIODevice_sbu1d
                                                                                              $dBufferedIO_sbu1e
                                                                                              $dTypeable_sbu1f
                                                                                              ds_sbu1g
                                                                                              ds1_sbu1h
                                                                                              dt_sbu1i
                                                                                              ds2_sbu1j
                                                                                              dt2_sbu1l
                                                                                              dt3_sbu1m
                                                                                              ds8_sbu1s
                                                                                              wild2_sbu1K
                                                                                              ds15_sbu1X] \r [void_0E
                                                                                                              ipv5_sbu20]
                                                                                        case
                                                                                            ds1_sbu1h
                                                                                        of
                                                                                        wild4_sbu21
                                                                                        { __DEFAULT ->
                                                                                              case
                                                                                                  readMutVar# [dt_sbu1i
                                                                                                               GHC.Prim.void#]
                                                                                              of
                                                                                              { Unit# ipv7_sbu24 [Occ=Once] ->
                                                                                                    let {
                                                                                                      sat_sbu25 [Occ=Once]
                                                                                                        :: (dstate_ibkNi,
                                                                                                            GHC.IO.Buffer.Buffer
                                                                                                              GHC.Word.Word8)
                                                                                                      [LclId] =
                                                                                                          CCCS (,)! [lvl11_rbnWT
                                                                                                                     ipv7_sbu24];
                                                                                                    } in 
                                                                                                      case
                                                                                                          newMutVar# [sat_sbu25
                                                                                                                      GHC.Prim.void#]
                                                                                                      of
                                                                                                      { Unit# ipv9_sbu28 [Occ=Once] ->
                                                                                                            let {
                                                                                                              sat_sbu29 [Occ=Once]
                                                                                                                :: GHC.IO.Handle.Types.Handle__
                                                                                                              [LclId] =
                                                                                                                  CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbu1d
                                                                                                                                                      $dBufferedIO_sbu1e
                                                                                                                                                      $dTypeable_sbu1f
                                                                                                                                                      ds_sbu1g
                                                                                                                                                      wild4_sbu21
                                                                                                                                                      dt_sbu1i
                                                                                                                                                      ds2_sbu1j
                                                                                                                                                      ipv9_sbu28
                                                                                                                                                      dt2_sbu1l
                                                                                                                                                      dt3_sbu1m
                                                                                                                                                      GHC.Base.Nothing
                                                                                                                                                      ipv5_sbu20
                                                                                                                                                      wild2_sbu1K
                                                                                                                                                      lvl48_sbu18
                                                                                                                                                      lvl48_sbu18
                                                                                                                                                      ds8_sbu1s];
                                                                                                            } in 
                                                                                                              Unit# [sat_sbu29];
                                                                                                      };
                                                                                              };
                                                                                          GHC.IO.Handle.Types.WriteHandle ->
                                                                                              case
                                                                                                  ds15_sbu1X
                                                                                                      GHC.Prim.void#
                                                                                              of
                                                                                              { Unit# ipv7_sbu2c [Occ=Once] ->
                                                                                                    case
                                                                                                        readMutVar# [dt_sbu1i
                                                                                                                     GHC.Prim.void#]
                                                                                                    of
                                                                                                    { Unit# ipv9_sbu2f [Occ=Once] ->
                                                                                                          let {
                                                                                                            sat_sbu2g [Occ=Once]
                                                                                                              :: (dstate_ibkNi,
                                                                                                                  GHC.IO.Buffer.Buffer
                                                                                                                    GHC.Word.Word8)
                                                                                                            [LclId] =
                                                                                                                CCCS (,)! [lvl11_rbnWT
                                                                                                                           ipv9_sbu2f];
                                                                                                          } in 
                                                                                                            case
                                                                                                                newMutVar# [sat_sbu2g
                                                                                                                            GHC.Prim.void#]
                                                                                                            of
                                                                                                            { Unit# ipv11_sbu2j [Occ=Once] ->
                                                                                                                  let {
                                                                                                                    sat_sbu2k [Occ=Once]
                                                                                                                      :: GHC.Base.Maybe
                                                                                                                           (GHC.IO.Encoding.Types.TextEncoder
                                                                                                                              estate_ibkNj)
                                                                                                                    [LclId] =
                                                                                                                        CCCS GHC.Base.Just! [ipv7_sbu2c]; } in
                                                                                                                  let {
                                                                                                                    sat_sbu2l [Occ=Once]
                                                                                                                      :: GHC.IO.Handle.Types.Handle__
                                                                                                                    [LclId] =
                                                                                                                        CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbu1d
                                                                                                                                                            $dBufferedIO_sbu1e
                                                                                                                                                            $dTypeable_sbu1f
                                                                                                                                                            ds_sbu1g
                                                                                                                                                            GHC.IO.Handle.Types.WriteHandle
                                                                                                                                                            dt_sbu1i
                                                                                                                                                            ds2_sbu1j
                                                                                                                                                            ipv11_sbu2j
                                                                                                                                                            dt2_sbu1l
                                                                                                                                                            dt3_sbu1m
                                                                                                                                                            sat_sbu2k
                                                                                                                                                            ipv5_sbu20
                                                                                                                                                            wild2_sbu1K
                                                                                                                                                            lvl48_sbu18
                                                                                                                                                            lvl48_sbu18
                                                                                                                                                            ds8_sbu1s];
                                                                                                                  } in 
                                                                                                                    Unit# [sat_sbu2l];
                                                                                                            };
                                                                                                    };
                                                                                              };
                                                                                          GHC.IO.Handle.Types.AppendHandle ->
                                                                                              case
                                                                                                  ds15_sbu1X
                                                                                                      GHC.Prim.void#
                                                                                              of
                                                                                              { Unit# ipv7_sbu2o [Occ=Once] ->
                                                                                                    case
                                                                                                        readMutVar# [dt_sbu1i
                                                                                                                     GHC.Prim.void#]
                                                                                                    of
                                                                                                    { Unit# ipv9_sbu2r [Occ=Once] ->
                                                                                                          let {
                                                                                                            sat_sbu2s [Occ=Once]
                                                                                                              :: (dstate_ibkNi,
                                                                                                                  GHC.IO.Buffer.Buffer
                                                                                                                    GHC.Word.Word8)
                                                                                                            [LclId] =
                                                                                                                CCCS (,)! [lvl11_rbnWT
                                                                                                                           ipv9_sbu2r];
                                                                                                          } in 
                                                                                                            case
                                                                                                                newMutVar# [sat_sbu2s
                                                                                                                            GHC.Prim.void#]
                                                                                                            of
                                                                                                            { Unit# ipv11_sbu2v [Occ=Once] ->
                                                                                                                  let {
                                                                                                                    sat_sbu2w [Occ=Once]
                                                                                                                      :: GHC.Base.Maybe
                                                                                                                           (GHC.IO.Encoding.Types.TextEncoder
                                                                                                                              estate_ibkNj)
                                                                                                                    [LclId] =
                                                                                                                        CCCS GHC.Base.Just! [ipv7_sbu2o]; } in
                                                                                                                  let {
                                                                                                                    sat_sbu2x [Occ=Once]
                                                                                                                      :: GHC.IO.Handle.Types.Handle__
                                                                                                                    [LclId] =
                                                                                                                        CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbu1d
                                                                                                                                                            $dBufferedIO_sbu1e
                                                                                                                                                            $dTypeable_sbu1f
                                                                                                                                                            ds_sbu1g
                                                                                                                                                            GHC.IO.Handle.Types.AppendHandle
                                                                                                                                                            dt_sbu1i
                                                                                                                                                            ds2_sbu1j
                                                                                                                                                            ipv11_sbu2v
                                                                                                                                                            dt2_sbu1l
                                                                                                                                                            dt3_sbu1m
                                                                                                                                                            sat_sbu2w
                                                                                                                                                            ipv5_sbu20
                                                                                                                                                            wild2_sbu1K
                                                                                                                                                            lvl48_sbu18
                                                                                                                                                            lvl48_sbu18
                                                                                                                                                            ds8_sbu1s];
                                                                                                                  } in 
                                                                                                                    Unit# [sat_sbu2x];
                                                                                                            };
                                                                                                    };
                                                                                              };
                                                                                          GHC.IO.Handle.Types.ReadWriteHandle ->
                                                                                              case
                                                                                                  ds15_sbu1X
                                                                                                      GHC.Prim.void#
                                                                                              of
                                                                                              { Unit# ipv7_sbu2A [Occ=Once] ->
                                                                                                    case
                                                                                                        readMutVar# [dt_sbu1i
                                                                                                                     GHC.Prim.void#]
                                                                                                    of
                                                                                                    { Unit# ipv9_sbu2D [Occ=Once] ->
                                                                                                          let {
                                                                                                            sat_sbu2E [Occ=Once]
                                                                                                              :: (dstate_ibkNi,
                                                                                                                  GHC.IO.Buffer.Buffer
                                                                                                                    GHC.Word.Word8)
                                                                                                            [LclId] =
                                                                                                                CCCS (,)! [lvl11_rbnWT
                                                                                                                           ipv9_sbu2D];
                                                                                                          } in 
                                                                                                            case
                                                                                                                newMutVar# [sat_sbu2E
                                                                                                                            GHC.Prim.void#]
                                                                                                            of
                                                                                                            { Unit# ipv11_sbu2H [Occ=Once] ->
                                                                                                                  let {
                                                                                                                    sat_sbu2I [Occ=Once]
                                                                                                                      :: GHC.Base.Maybe
                                                                                                                           (GHC.IO.Encoding.Types.TextEncoder
                                                                                                                              estate_ibkNj)
                                                                                                                    [LclId] =
                                                                                                                        CCCS GHC.Base.Just! [ipv7_sbu2A]; } in
                                                                                                                  let {
                                                                                                                    sat_sbu2J [Occ=Once]
                                                                                                                      :: GHC.IO.Handle.Types.Handle__
                                                                                                                    [LclId] =
                                                                                                                        CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbu1d
                                                                                                                                                            $dBufferedIO_sbu1e
                                                                                                                                                            $dTypeable_sbu1f
                                                                                                                                                            ds_sbu1g
                                                                                                                                                            GHC.IO.Handle.Types.ReadWriteHandle
                                                                                                                                                            dt_sbu1i
                                                                                                                                                            ds2_sbu1j
                                                                                                                                                            ipv11_sbu2H
                                                                                                                                                            dt2_sbu1l
                                                                                                                                                            dt3_sbu1m
                                                                                                                                                            sat_sbu2I
                                                                                                                                                            ipv5_sbu20
                                                                                                                                                            wild2_sbu1K
                                                                                                                                                            lvl48_sbu18
                                                                                                                                                            lvl48_sbu18
                                                                                                                                                            ds8_sbu1s];
                                                                                                                  } in 
                                                                                                                    Unit# [sat_sbu2J];
                                                                                                            };
                                                                                                    };
                                                                                              };
                                                                                        };
                                                                              } in 
                                                                                case ds1_sbu1h of {
                                                                                  __DEFAULT ->
                                                                                      $j1_sbu1Y
                                                                                          GHC.Prim.void#
                                                                                          GHC.Base.Nothing;
                                                                                  GHC.IO.Handle.Types.ReadHandle ->
                                                                                      case
                                                                                          ds14_sbu1W
                                                                                              GHC.Prim.void#
                                                                                      of
                                                                                      { Unit# ipv5_sbu2N [Occ=Once] ->
                                                                                            let {
                                                                                              sat_sbu2O [Occ=Once]
                                                                                                :: GHC.Base.Maybe
                                                                                                     (GHC.IO.Encoding.Types.TextDecoder
                                                                                                        dstate_ibkNi)
                                                                                              [LclId] =
                                                                                                  CCCS GHC.Base.Just! [ipv5_sbu2N];
                                                                                            } in 
                                                                                              $j1_sbu1Y
                                                                                                  GHC.Prim.void#
                                                                                                  sat_sbu2O;
                                                                                      };
                                                                                  GHC.IO.Handle.Types.ReadWriteHandle ->
                                                                                      case
                                                                                          ds14_sbu1W
                                                                                              GHC.Prim.void#
                                                                                      of
                                                                                      { Unit# ipv5_sbu2R [Occ=Once] ->
                                                                                            let {
                                                                                              sat_sbu2S [Occ=Once]
                                                                                                :: GHC.Base.Maybe
                                                                                                     (GHC.IO.Encoding.Types.TextDecoder
                                                                                                        dstate_ibkNi)
                                                                                              [LclId] =
                                                                                                  CCCS GHC.Base.Just! [ipv5_sbu2R];
                                                                                            } in 
                                                                                              $j1_sbu1Y
                                                                                                  GHC.Prim.void#
                                                                                                  sat_sbu2S;
                                                                                      };
                                                                                };
                                                                        };
                                                                  };
                                                        } in 
                                                          case bin_sbu16 of {
                                                            GHC.Types.False ->
                                                                case
                                                                    GHC.IO.Encoding.getLocaleEncoding1
                                                                of
                                                                { (,) getLocaleEncoding3_sbu2V [Occ=Once]
                                                                      _ [Occ=Dead] ->
                                                                      case
                                                                          getLocaleEncoding3_sbu2V
                                                                              GHC.Prim.void#
                                                                      of
                                                                      { Unit# ipv3_sbu2Z [Occ=Once] ->
                                                                            let {
                                                                              sat_sbu30 [Occ=Once]
                                                                                :: GHC.Base.Maybe
                                                                                     GHC.IO.Encoding.Types.TextEncoding
                                                                              [LclId] =
                                                                                  CCCS GHC.Base.Just! [ipv3_sbu2Z];
                                                                            } in 
                                                                              $j_sbu1H
                                                                                  GHC.Prim.void#
                                                                                  sat_sbu30;
                                                                      };
                                                                };
                                                            GHC.Types.True ->
                                                                $j_sbu1H
                                                                    GHC.Prim.void# GHC.Base.Nothing;
                                                          };
                                              } in 
                                                case ds4_sbu1o of {
                                                  GHC.Base.Nothing ->
                                                      case ds3_sbu1n of {
                                                        GHC.Base.Nothing ->
                                                            $w$j1_sbu1F GHC.Prim.void#;
                                                        GHC.Base.Just d_sbu33 [Occ=Once!] ->
                                                            case d_sbu33 of {
                                                              GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                                _ [Occ=Dead]
                                                                                                ds13_sbu37 [Occ=Once]
                                                                                                _ [Occ=Dead]
                                                                                                _ [Occ=Dead] ->
                                                                  case
                                                                      ds13_sbu37 GHC.Prim.void#
                                                                  of
                                                                  { Unit# _ [Occ=Dead] ->
                                                                        $w$j1_sbu1F GHC.Prim.void#;
                                                                  };
                                                            };
                                                      };
                                                  GHC.Base.Just d_sbu3d [Occ=Once!] ->
                                                      case d_sbu3d of {
                                                        GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                          _ [Occ=Dead]
                                                                                          ds13_sbu3h [Occ=Once]
                                                                                          _ [Occ=Dead]
                                                                                          _ [Occ=Dead] ->
                                                            case ds13_sbu3h GHC.Prim.void# of {
                                                              Unit# _ [Occ=Dead] ->
                                                                  case ds3_sbu1n of {
                                                                    GHC.Base.Nothing ->
                                                                        $w$j1_sbu1F GHC.Prim.void#;
                                                                    GHC.Base.Just d1_sbu3o [Occ=Once!] ->
                                                                        case d1_sbu3o of {
                                                                          GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                                            _ [Occ=Dead]
                                                                                                            ds19_sbu3s [Occ=Once]
                                                                                                            _ [Occ=Dead]
                                                                                                            _ [Occ=Dead] ->
                                                                              case
                                                                                  ds19_sbu3s
                                                                                      GHC.Prim.void#
                                                                              of
                                                                              { Unit# _ [Occ=Dead] ->
                                                                                    $w$j1_sbu1F
                                                                                        GHC.Prim.void#;
                                                                              };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                    } in 
                                      case ds10_sbu1z of {
                                        GHC.IO.Buffer.ReadBuffer ->
                                            case readMutVar# [dt2_sbu1l GHC.Prim.void#] of {
                                              Unit# ipv3_sbu3B [Occ=Once!] ->
                                                  case ipv3_sbu3B of {
                                                    GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                         _ [Occ=Dead]
                                                                         ds11_sbu3F [Occ=Once!]
                                                                         _ [Occ=Dead]
                                                                         dt13_sbu3H [Occ=Once]
                                                                         dt14_sbu3I [Occ=Once] ->
                                                        case ds11_sbu3F of {
                                                          GHC.IO.Buffer.ReadBuffer ->
                                                              case ==# [dt13_sbu3H dt14_sbu3I] of {
                                                                __DEFAULT ->
                                                                    case
                                                                        readMutVar# [dt1_sbu1k
                                                                                     GHC.Prim.void#]
                                                                    of
                                                                    { Unit# ipv5_sbu3N [Occ=Once!] ->
                                                                          case ipv5_sbu3N of {
                                                                            (,) codec_state_sbu3P [Occ=Once]
                                                                                bbuf0_sbu3Q [Occ=Once*] ->
                                                                                case
                                                                                    readMutVar# [dt2_sbu1l
                                                                                                 GHC.Prim.void#]
                                                                                of
                                                                                { Unit# ipv7_sbu3T ->
                                                                                      let {
                                                                                        sat_sbu41 [Occ=Once]
                                                                                          :: GHC.IO.Buffer.Buffer
                                                                                               GHC.IO.Buffer.CharBufElem
                                                                                        [LclId] =
                                                                                            [ipv7_sbu3T] \u []
                                                                                                case
                                                                                                    ipv7_sbu3T
                                                                                                of
                                                                                                { GHC.IO.Buffer.Buffer dt9_sbu3V [Occ=Once]
                                                                                                                       dt15_sbu3W [Occ=Once]
                                                                                                                       ds15_sbu3X [Occ=Once]
                                                                                                                       dt16_sbu3Y [Occ=Once]
                                                                                                                       _ [Occ=Dead]
                                                                                                                       _ [Occ=Dead] ->
                                                                                                      GHC.IO.Buffer.Buffer [dt9_sbu3V
                                                                                                                            dt15_sbu3W
                                                                                                                            ds15_sbu3X
                                                                                                                            dt16_sbu3Y
                                                                                                                            0#
                                                                                                                            0#];
                                                                                                };
                                                                                      } in 
                                                                                        case
                                                                                            writeMutVar# [dt2_sbu1l
                                                                                                          sat_sbu41
                                                                                                          GHC.Prim.void#]
                                                                                        of
                                                                                        s2#_sbu42
                                                                                        { (##) ->
                                                                                              case
                                                                                                  ipv7_sbu3T
                                                                                              of
                                                                                              { GHC.IO.Buffer.Buffer dt9_sbu44 [Occ=Once]
                                                                                                                     dt15_sbu45 [Occ=Once]
                                                                                                                     ds15_sbu46 [Occ=Once]
                                                                                                                     _ [Occ=Dead]
                                                                                                                     dt17_sbu48 [Occ=Once!]
                                                                                                                     _ [Occ=Dead] ->
                                                                                                    case
                                                                                                        dt17_sbu48
                                                                                                    of
                                                                                                    wild7_sbu4a
                                                                                                    { __DEFAULT ->
                                                                                                          case
                                                                                                              ds4_sbu1o
                                                                                                          of
                                                                                                          { GHC.Base.Nothing ->
                                                                                                                let {
                                                                                                                  sat_sbu4k [Occ=Once]
                                                                                                                    :: GHC.IO.Buffer.Buffer
                                                                                                                         GHC.Word.Word8
                                                                                                                  [LclId] =
                                                                                                                      [bbuf0_sbu3Q
                                                                                                                       wild7_sbu4a] \u []
                                                                                                                          case
                                                                                                                              bbuf0_sbu3Q
                                                                                                                          of
                                                                                                                          { GHC.IO.Buffer.Buffer dt19_sbu4d [Occ=Once]
                                                                                                                                                 dt20_sbu4e [Occ=Once]
                                                                                                                                                 ds16_sbu4f [Occ=Once]
                                                                                                                                                 dt21_sbu4g [Occ=Once]
                                                                                                                                                 dt22_sbu4h [Occ=Once]
                                                                                                                                                 dt23_sbu4i [Occ=Once] ->
                                                                                                                                case
                                                                                                                                    +# [dt22_sbu4h
                                                                                                                                        wild7_sbu4a]
                                                                                                                                of
                                                                                                                                sat_sbu4j
                                                                                                                                { __DEFAULT ->
                                                                                                                                      GHC.IO.Buffer.Buffer [dt19_sbu4d
                                                                                                                                                            dt20_sbu4e
                                                                                                                                                            ds16_sbu4f
                                                                                                                                                            dt21_sbu4g
                                                                                                                                                            sat_sbu4j
                                                                                                                                                            dt23_sbu4i];
                                                                                                                                };
                                                                                                                          };
                                                                                                                } in 
                                                                                                                  case
                                                                                                                      writeMutVar# [dt_sbu1i
                                                                                                                                    sat_sbu4k
                                                                                                                                    GHC.Prim.void#]
                                                                                                                  of
                                                                                                                  s2#1_sbu4l
                                                                                                                  { (##) ->
                                                                                                                        $w$j_sbu1D
                                                                                                                            GHC.Prim.void#;
                                                                                                                  };
                                                                                                            GHC.Base.Just decoder_sbu4m [Occ=Once!] ->
                                                                                                                case
                                                                                                                    decoder_sbu4m
                                                                                                                of
                                                                                                                { GHC.IO.Encoding.Types.BufferCodec ds16_sbu4o [Occ=Once]
                                                                                                                                                    ds17_sbu4p [Occ=Once]
                                                                                                                                                    _ [Occ=Dead]
                                                                                                                                                    _ [Occ=Dead]
                                                                                                                                                    ds20_sbu4s [Occ=Once!] ->
                                                                                                                      case
                                                                                                                          ds20_sbu4s
                                                                                                                              codec_state_sbu3P
                                                                                                                              GHC.Prim.void#
                                                                                                                      of
                                                                                                                      { Unit# _ [Occ=Dead] ->
                                                                                                                            let {
                                                                                                                              sat_sbu4w [Occ=Once]
                                                                                                                                :: GHC.IO.Buffer.Buffer
                                                                                                                                     GHC.IO.Buffer.CharBufElem
                                                                                                                              [LclId] =
                                                                                                                                  CCCS GHC.IO.Buffer.Buffer! [dt9_sbu44
                                                                                                                                                              dt15_sbu45
                                                                                                                                                              ds15_sbu46
                                                                                                                                                              wild7_sbu4a
                                                                                                                                                              0#
                                                                                                                                                              0#];
                                                                                                                            } in 
                                                                                                                              case
                                                                                                                                  GHC.IO.Handle.Internals.$wstreamEncode
                                                                                                                                      ds16_sbu4o
                                                                                                                                      ds17_sbu4p
                                                                                                                                      bbuf0_sbu3Q
                                                                                                                                      sat_sbu4w
                                                                                                                                      GHC.Prim.void#
                                                                                                                              of
                                                                                                                              { Unit# ipv11_sbu4z [Occ=Once!] ->
                                                                                                                                    case
                                                                                                                                        ipv11_sbu4z
                                                                                                                                    of
                                                                                                                                    { (,) bbuf1_sbu4B [Occ=Once]
                                                                                                                                          _ [Occ=Dead] ->
                                                                                                                                          case
                                                                                                                                              writeMutVar# [dt_sbu1i
                                                                                                                                                            bbuf1_sbu4B
                                                                                                                                                            GHC.Prim.void#]
                                                                                                                                          of
                                                                                                                                          s2#1_sbu4D
                                                                                                                                          { (##) ->
                                                                                                                                                $w$j_sbu1D
                                                                                                                                                    GHC.Prim.void#;
                                                                                                                                          };
                                                                                                                                    };
                                                                                                                              };
                                                                                                                      };
                                                                                                                };
                                                                                                          };
                                                                                                      0# ->
                                                                                                          case
                                                                                                              writeMutVar# [dt_sbu1i
                                                                                                                            bbuf0_sbu3Q
                                                                                                                            GHC.Prim.void#]
                                                                                                          of
                                                                                                          s2#1_sbu4E
                                                                                                          { (##) ->
                                                                                                                $w$j_sbu1D
                                                                                                                    GHC.Prim.void#;
                                                                                                          };
                                                                                                    };
                                                                                              };
                                                                                        };
                                                                                };
                                                                          };
                                                                    };
                                                                1# -> $w$j_sbu1D GHC.Prim.void#;
                                                              };
                                                          GHC.IO.Buffer.WriteBuffer ->
                                                              $w$j_sbu1D GHC.Prim.void#;
                                                        };
                                                  };
                                            };
                                        GHC.IO.Buffer.WriteBuffer ->
                                            case ==# [dt7_sbu1B dt8_sbu1C] of {
                                              __DEFAULT -> GHC.IO.Handle.Internals.flushCharBuffer2;
                                              1# -> $w$j_sbu1D GHC.Prim.void#;
                                            };
                                      };
                              };
                        };
                  };
        } in 
          GHC.IO.Handle.Internals.withAllHandles__1
              lvl9_rbnWR handle_sbu15 sat_sbu4H GHC.Prim.void#;

GHC.IO.Handle.hSetBinaryMode
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.Bool -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.hSetBinaryMode1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.hIsSeekable4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hIsSeekable"#;

GHC.IO.Handle.hIsSeekable3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hIsSeekable4;

GHC.IO.Handle.hIsSeekable2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool) #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h__sbu4I void_0E]
        case h__sbu4I of wild_sbu4K {
          GHC.IO.Handle.Types.Handle__ $dIODevice_sbu4L [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds_sbu4O [Occ=Once]
                                       ds1_sbu4P [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds1_sbu4P of {
                __DEFAULT ->
                    case
                        GHC.IO.Device.isSeekable $dIODevice_sbu4L ds_sbu4O GHC.Prim.void#
                    of
                    { Unit# ipv1_sbu54 [Occ=Once] ->
                          let {
                            sat_sbu55 [Occ=Once]
                              :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                            [LclId] =
                                CCCS (,)! [wild_sbu4K ipv1_sbu54];
                          } in  Unit# [sat_sbu55];
                    };
                GHC.IO.Handle.Types.ClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_closedHandle1 GHC.Prim.void#;
                GHC.IO.Handle.Types.SemiClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_semiclosedHandle1 GHC.Prim.void#;
                GHC.IO.Handle.Types.AppendHandle ->
                    let {
                      sat_sbu58 [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                      [LclId] =
                          CCCS (,)! [wild_sbu4K GHC.Types.False];
                    } in  Unit# [sat_sbu58];
              };
        };

GHC.IO.Handle.hIsSeekable1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbu59 void_0E]
        case handle_sbu59 of wild_sbu5b {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbu5d ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sbu5g [Occ=Once!] ->
                    let {
                      io_sbu5h [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbu5b dt_sbu5d] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hIsSeekable3
                                      wild_sbu5b
                                      GHC.IO.Handle.hIsSeekable2
                                      dt_sbu5d
                                      GHC.Prim.void#
                              of
                              { Unit# ipv3_sbu5l [Occ=Once!] ->
                                    case ipv3_sbu5l of {
                                      (,) h'_sbu5n [Occ=Once] v_sbu5o [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbu5d h'_sbu5n GHC.Prim.void#]
                                          of
                                          s2#_sbu5p
                                          { (##) -> Unit# [v_sbu5o];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbu5g of {
                        __DEFAULT -> io_sbu5h GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sbu5h GHC.Prim.void#];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sbu5s
                                           _ [Occ=Dead] ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sbu5w [Occ=Once!] ->
                    let {
                      io_sbu5x [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbu5b dt_sbu5s] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hIsSeekable3
                                      wild_sbu5b
                                      GHC.IO.Handle.hIsSeekable2
                                      dt_sbu5s
                                      GHC.Prim.void#
                              of
                              { Unit# ipv3_sbu5B [Occ=Once!] ->
                                    case ipv3_sbu5B of {
                                      (,) h'_sbu5D [Occ=Once] v_sbu5E [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbu5s h'_sbu5D GHC.Prim.void#]
                                          of
                                          s2#_sbu5F
                                          { (##) -> Unit# [v_sbu5E];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbu5w of {
                        __DEFAULT -> io_sbu5x GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sbu5x GHC.Prim.void#];
                      };
              };
        };

GHC.IO.Handle.hIsSeekable
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.hIsSeekable1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.hGetPosn4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hGetPosn"#;

GHC.IO.Handle.hGetPosn3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hGetPosn4;

GHC.IO.Handle.hGetPosn2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Integer.Type.Integer #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle__sbu5H void_0E]
        case handle__sbu5H of {
          GHC.IO.Handle.Types.Handle__ $dIODevice_sbu5K [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds_sbu5N [Occ=Once]
                                       _ [Occ=Dead]
                                       dt_sbu5P
                                       _ [Occ=Dead]
                                       dt1_sbu5R [Occ=Once]
                                       dt2_sbu5S
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds4_sbu5V [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case
                  GHC.IO.Device.tell $dIODevice_sbu5K ds_sbu5N GHC.Prim.void#
              of
              { Unit# ipv1_sbu62 [Occ=Once*] ->
                    case readMutVar# [dt2_sbu5S GHC.Prim.void#] of {
                      Unit# ipv3_sbu65 [Occ=Once!] ->
                          case ipv3_sbu65 of {
                            GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 ds11_sbu69 [Occ=Once!]
                                                 _ [Occ=Dead]
                                                 dt7_sbu6b [Occ=Once]
                                                 dt8_sbu6c [Occ=Once] ->
                                let-no-escape {
                                  $w$j_sbu6d [InlPrag=NOUSERINLINE[0],
                                              Occ=Once*!T[1],
                                              Dmd=<L,1*C1(U(U,U))>]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                             GHC.Integer.Type.Integer #)
                                  [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                      sat-only [dt_sbu5P dt2_sbu5S ipv1_sbu62] \r [void_0E]
                                          case readMutVar# [dt_sbu5P GHC.Prim.void#] of {
                                            Unit# ipv5_sbu6h [Occ=Once!] ->
                                                case readMutVar# [dt2_sbu5S GHC.Prim.void#] of {
                                                  Unit# _ [Occ=Dead] ->
                                                      let {
                                                        sat_sbu6x [Occ=Once]
                                                          :: GHC.Integer.Type.Integer
                                                        [LclId] =
                                                            [ipv1_sbu62 ipv5_sbu6h] \u []
                                                                case ipv5_sbu6h of {
                                                                  GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                       _ [Occ=Dead]
                                                                                       ds14_sbu6o [Occ=Once!]
                                                                                       _ [Occ=Dead]
                                                                                       dt13_sbu6q [Occ=Once*]
                                                                                       dt14_sbu6r [Occ=Once*] ->
                                                                      case ds14_sbu6o of {
                                                                        GHC.IO.Buffer.ReadBuffer ->
                                                                            case
                                                                                -# [dt14_sbu6r
                                                                                    dt13_sbu6q]
                                                                            of
                                                                            sat_sbu6t
                                                                            { __DEFAULT ->
                                                                                  case
                                                                                      GHC.Integer.Type.smallInteger
                                                                                          sat_sbu6t
                                                                                  of
                                                                                  sat_sbu6u
                                                                                  { __DEFAULT ->
                                                                                        GHC.Integer.Type.minusInteger
                                                                                            ipv1_sbu62
                                                                                            sat_sbu6u;
                                                                                  };
                                                                            };
                                                                        GHC.IO.Buffer.WriteBuffer ->
                                                                            case
                                                                                -# [dt14_sbu6r
                                                                                    dt13_sbu6q]
                                                                            of
                                                                            sat_sbu6v
                                                                            { __DEFAULT ->
                                                                                  case
                                                                                      GHC.Integer.Type.smallInteger
                                                                                          sat_sbu6v
                                                                                  of
                                                                                  sat_sbu6w
                                                                                  { __DEFAULT ->
                                                                                        GHC.Integer.Type.plusInteger
                                                                                            ipv1_sbu62
                                                                                            sat_sbu6w;
                                                                                  };
                                                                            };
                                                                      };
                                                                };
                                                      } in  Unit# [sat_sbu6x];
                                                };
                                          };
                                } in 
                                  case ds11_sbu69 of {
                                    GHC.IO.Buffer.ReadBuffer ->
                                        case readMutVar# [dt2_sbu5S GHC.Prim.void#] of {
                                          Unit# ipv5_sbu6B [Occ=Once!] ->
                                              case ipv5_sbu6B of {
                                                GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     ds13_sbu6F [Occ=Once!]
                                                                     _ [Occ=Dead]
                                                                     dt13_sbu6H [Occ=Once]
                                                                     dt14_sbu6I [Occ=Once] ->
                                                    case ds13_sbu6F of {
                                                      GHC.IO.Buffer.ReadBuffer ->
                                                          case ==# [dt13_sbu6H dt14_sbu6I] of {
                                                            __DEFAULT ->
                                                                case
                                                                    readMutVar# [dt1_sbu5R
                                                                                 GHC.Prim.void#]
                                                                of
                                                                { Unit# ipv7_sbu6N [Occ=Once!] ->
                                                                      case ipv7_sbu6N of {
                                                                        (,) codec_state_sbu6P [Occ=Once]
                                                                            bbuf0_sbu6Q [Occ=Once*] ->
                                                                            case
                                                                                readMutVar# [dt2_sbu5S
                                                                                             GHC.Prim.void#]
                                                                            of
                                                                            { Unit# ipv9_sbu6T ->
                                                                                  let {
                                                                                    sat_sbu71 [Occ=Once]
                                                                                      :: GHC.IO.Buffer.Buffer
                                                                                           GHC.IO.Buffer.CharBufElem
                                                                                    [LclId] =
                                                                                        [ipv9_sbu6T] \u []
                                                                                            case
                                                                                                ipv9_sbu6T
                                                                                            of
                                                                                            { GHC.IO.Buffer.Buffer dt9_sbu6V [Occ=Once]
                                                                                                                   dt15_sbu6W [Occ=Once]
                                                                                                                   ds16_sbu6X [Occ=Once]
                                                                                                                   dt16_sbu6Y [Occ=Once]
                                                                                                                   _ [Occ=Dead]
                                                                                                                   _ [Occ=Dead] ->
                                                                                                  GHC.IO.Buffer.Buffer [dt9_sbu6V
                                                                                                                        dt15_sbu6W
                                                                                                                        ds16_sbu6X
                                                                                                                        dt16_sbu6Y
                                                                                                                        0#
                                                                                                                        0#];
                                                                                            };
                                                                                  } in 
                                                                                    case
                                                                                        writeMutVar# [dt2_sbu5S
                                                                                                      sat_sbu71
                                                                                                      GHC.Prim.void#]
                                                                                    of
                                                                                    s2#_sbu72
                                                                                    { (##) ->
                                                                                          case
                                                                                              ipv9_sbu6T
                                                                                          of
                                                                                          { GHC.IO.Buffer.Buffer dt9_sbu74 [Occ=Once]
                                                                                                                 dt15_sbu75 [Occ=Once]
                                                                                                                 ds16_sbu76 [Occ=Once]
                                                                                                                 _ [Occ=Dead]
                                                                                                                 dt17_sbu78 [Occ=Once!]
                                                                                                                 _ [Occ=Dead] ->
                                                                                                case
                                                                                                    dt17_sbu78
                                                                                                of
                                                                                                wild7_sbu7a
                                                                                                { __DEFAULT ->
                                                                                                      case
                                                                                                          ds4_sbu5V
                                                                                                      of
                                                                                                      { GHC.Base.Nothing ->
                                                                                                            let {
                                                                                                              sat_sbu7k [Occ=Once]
                                                                                                                :: GHC.IO.Buffer.Buffer
                                                                                                                     GHC.Word.Word8
                                                                                                              [LclId] =
                                                                                                                  [bbuf0_sbu6Q
                                                                                                                   wild7_sbu7a] \u []
                                                                                                                      case
                                                                                                                          bbuf0_sbu6Q
                                                                                                                      of
                                                                                                                      { GHC.IO.Buffer.Buffer dt19_sbu7d [Occ=Once]
                                                                                                                                             dt20_sbu7e [Occ=Once]
                                                                                                                                             ds17_sbu7f [Occ=Once]
                                                                                                                                             dt21_sbu7g [Occ=Once]
                                                                                                                                             dt22_sbu7h [Occ=Once]
                                                                                                                                             dt23_sbu7i [Occ=Once] ->
                                                                                                                            case
                                                                                                                                +# [dt22_sbu7h
                                                                                                                                    wild7_sbu7a]
                                                                                                                            of
                                                                                                                            sat_sbu7j
                                                                                                                            { __DEFAULT ->
                                                                                                                                  GHC.IO.Buffer.Buffer [dt19_sbu7d
                                                                                                                                                        dt20_sbu7e
                                                                                                                                                        ds17_sbu7f
                                                                                                                                                        dt21_sbu7g
                                                                                                                                                        sat_sbu7j
                                                                                                                                                        dt23_sbu7i];
                                                                                                                            };
                                                                                                                      };
                                                                                                            } in 
                                                                                                              case
                                                                                                                  writeMutVar# [dt_sbu5P
                                                                                                                                sat_sbu7k
                                                                                                                                GHC.Prim.void#]
                                                                                                              of
                                                                                                              s2#1_sbu7l
                                                                                                              { (##) ->
                                                                                                                    $w$j_sbu6d
                                                                                                                        GHC.Prim.void#;
                                                                                                              };
                                                                                                        GHC.Base.Just decoder_sbu7m [Occ=Once!] ->
                                                                                                            case
                                                                                                                decoder_sbu7m
                                                                                                            of
                                                                                                            { GHC.IO.Encoding.Types.BufferCodec ds17_sbu7o [Occ=Once]
                                                                                                                                                ds18_sbu7p [Occ=Once]
                                                                                                                                                _ [Occ=Dead]
                                                                                                                                                _ [Occ=Dead]
                                                                                                                                                ds21_sbu7s [Occ=Once!] ->
                                                                                                                  case
                                                                                                                      ds21_sbu7s
                                                                                                                          codec_state_sbu6P
                                                                                                                          GHC.Prim.void#
                                                                                                                  of
                                                                                                                  { Unit# _ [Occ=Dead] ->
                                                                                                                        let {
                                                                                                                          sat_sbu7w [Occ=Once]
                                                                                                                            :: GHC.IO.Buffer.Buffer
                                                                                                                                 GHC.IO.Buffer.CharBufElem
                                                                                                                          [LclId] =
                                                                                                                              CCCS GHC.IO.Buffer.Buffer! [dt9_sbu74
                                                                                                                                                          dt15_sbu75
                                                                                                                                                          ds16_sbu76
                                                                                                                                                          wild7_sbu7a
                                                                                                                                                          0#
                                                                                                                                                          0#];
                                                                                                                        } in 
                                                                                                                          case
                                                                                                                              GHC.IO.Handle.Internals.$wstreamEncode
                                                                                                                                  ds17_sbu7o
                                                                                                                                  ds18_sbu7p
                                                                                                                                  bbuf0_sbu6Q
                                                                                                                                  sat_sbu7w
                                                                                                                                  GHC.Prim.void#
                                                                                                                          of
                                                                                                                          { Unit# ipv13_sbu7z [Occ=Once!] ->
                                                                                                                                case
                                                                                                                                    ipv13_sbu7z
                                                                                                                                of
                                                                                                                                { (,) bbuf1_sbu7B [Occ=Once]
                                                                                                                                      _ [Occ=Dead] ->
                                                                                                                                      case
                                                                                                                                          writeMutVar# [dt_sbu5P
                                                                                                                                                        bbuf1_sbu7B
                                                                                                                                                        GHC.Prim.void#]
                                                                                                                                      of
                                                                                                                                      s2#1_sbu7D
                                                                                                                                      { (##) ->
                                                                                                                                            $w$j_sbu6d
                                                                                                                                                GHC.Prim.void#;
                                                                                                                                      };
                                                                                                                                };
                                                                                                                          };
                                                                                                                  };
                                                                                                            };
                                                                                                      };
                                                                                                  0# ->
                                                                                                      case
                                                                                                          writeMutVar# [dt_sbu5P
                                                                                                                        bbuf0_sbu6Q
                                                                                                                        GHC.Prim.void#]
                                                                                                      of
                                                                                                      s2#1_sbu7E
                                                                                                      { (##) ->
                                                                                                            $w$j_sbu6d
                                                                                                                GHC.Prim.void#;
                                                                                                      };
                                                                                                };
                                                                                          };
                                                                                    };
                                                                            };
                                                                      };
                                                                };
                                                            1# -> $w$j_sbu6d GHC.Prim.void#;
                                                          };
                                                      GHC.IO.Buffer.WriteBuffer ->
                                                          $w$j_sbu6d GHC.Prim.void#;
                                                    };
                                              };
                                        };
                                    GHC.IO.Buffer.WriteBuffer ->
                                        case ==# [dt7_sbu6b dt8_sbu6c] of {
                                          __DEFAULT -> GHC.IO.Handle.Internals.flushCharBuffer2;
                                          1# -> $w$j_sbu6d GHC.Prim.void#;
                                        };
                                  };
                          };
                    };
              };
        };

GHC.IO.Handle.hTell1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Integer.Type.Integer #)
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [handle_sbu7H void_0E]
        GHC.IO.Handle.Internals.wantSeekableHandle1
            GHC.IO.Handle.hGetPosn3
            handle_sbu7H
            GHC.IO.Handle.hGetPosn2
            GHC.Prim.void#;

GHC.IO.Handle.hTell
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Types.IO GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] GHC.IO.Handle.hTell1 eta_B2 GHC.Prim.void#;

lvl12_rbnWU :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hSeek"#;

lvl13_rbnWV :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl12_rbnWU;

lvl14_rbnWW :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

GHC.IO.Handle.hSeek1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Device.SeekMode
     -> GHC.Integer.Type.Integer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=4, Str=<S,1*U><L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbu7I mode_sbu7J offset_sbu7K void_0E]
        let {
          lvl48_sbu7M [Occ=OnceL!, Dmd=<L,U(U)>] :: GHC.Types.Int
          [LclId] =
              [offset_sbu7K] \u []
                  case GHC.Integer.Type.integerToInt offset_sbu7K of wild_sbu7N {
                    __DEFAULT -> GHC.Types.I# [wild_sbu7N];
                  }; } in
        let {
          lvl49_sbu7O [Occ=OnceL!, Dmd=<L,U(U)>] :: GHC.Types.Int
          [LclId] =
              [offset_sbu7K] \u []
                  case
                      GHC.Integer.Type.geInteger# offset_sbu7K lvl14_rbnWW
                  of
                  v_sbu7P
                  { __DEFAULT -> GHC.Types.I# [v_sbu7P];
                  }; } in
        let {
          sat_sbuak [Occ=Once]
            :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
          [LclId] =
              [mode_sbu7J offset_sbu7K lvl48_sbu7M lvl49_sbu7O] \r [handle__sbu7Q
                                                                    void_0E]
                  case handle__sbu7Q of wild_sbu7S {
                    GHC.IO.Handle.Types.Handle__ $dIODevice_sbu7T [Occ=Once*]
                                                 $dBufferedIO_sbu7U [Occ=Once]
                                                 _ [Occ=Dead]
                                                 ds_sbu7W
                                                 _ [Occ=Dead]
                                                 dt_sbu7Y
                                                 _ [Occ=Dead]
                                                 dt1_sbu80 [Occ=Once]
                                                 dt2_sbu81
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 ds4_sbu84
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead] ->
                        case readMutVar# [dt2_sbu81 GHC.Prim.void#] of {
                          Unit# ipv1_sbu8b [Occ=Once!] ->
                              case ipv1_sbu8b of {
                                GHC.IO.Buffer.Buffer dt4_sbu8d [Occ=Once]
                                                     dt5_sbu8e [Occ=Once]
                                                     ds10_sbu8f [Occ=Once!]
                                                     dt6_sbu8g [Occ=Once]
                                                     dt7_sbu8h
                                                     dt8_sbu8i ->
                                    case ds10_sbu8f of {
                                      GHC.IO.Buffer.ReadBuffer ->
                                          let-no-escape {
                                            $j_sbu8k [Occ=Once*T[0], Dmd=<L,1*U(U,U)>]
                                              :: (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                            [LclId[JoinId(0)], Unf=OtherCon []] =
                                                [mode_sbu7J
                                                 offset_sbu7K
                                                 wild_sbu7S
                                                 $dIODevice_sbu7T
                                                 ds_sbu7W
                                                 dt_sbu7Y
                                                 dt1_sbu80
                                                 dt2_sbu81
                                                 ds4_sbu84] \r []
                                                    case readMutVar# [dt2_sbu81 GHC.Prim.void#] of {
                                                      Unit# ipv3_sbu8n [Occ=Once!] ->
                                                          case ipv3_sbu8n of {
                                                            GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                 _ [Occ=Dead]
                                                                                 ds12_sbu8r [Occ=Once!]
                                                                                 _ [Occ=Dead]
                                                                                 dt12_sbu8t [Occ=Once]
                                                                                 dt13_sbu8u [Occ=Once] ->
                                                                case ds12_sbu8r of {
                                                                  GHC.IO.Buffer.ReadBuffer ->
                                                                      case
                                                                          ==# [dt12_sbu8t
                                                                               dt13_sbu8u]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            case
                                                                                readMutVar# [dt1_sbu80
                                                                                             GHC.Prim.void#]
                                                                            of
                                                                            { Unit# ipv5_sbu8z [Occ=Once!] ->
                                                                                  case
                                                                                      ipv5_sbu8z
                                                                                  of
                                                                                  { (,) codec_state_sbu8B [Occ=Once]
                                                                                        bbuf0_sbu8C [Occ=Once*] ->
                                                                                        case
                                                                                            readMutVar# [dt2_sbu81
                                                                                                         GHC.Prim.void#]
                                                                                        of
                                                                                        { Unit# ipv7_sbu8F ->
                                                                                              let {
                                                                                                sat_sbu8N [Occ=Once]
                                                                                                  :: GHC.IO.Buffer.Buffer
                                                                                                       GHC.IO.Buffer.CharBufElem
                                                                                                [LclId] =
                                                                                                    [ipv7_sbu8F] \u []
                                                                                                        case
                                                                                                            ipv7_sbu8F
                                                                                                        of
                                                                                                        { GHC.IO.Buffer.Buffer dt14_sbu8H [Occ=Once]
                                                                                                                               dt15_sbu8I [Occ=Once]
                                                                                                                               ds15_sbu8J [Occ=Once]
                                                                                                                               dt16_sbu8K [Occ=Once]
                                                                                                                               _ [Occ=Dead]
                                                                                                                               _ [Occ=Dead] ->
                                                                                                              GHC.IO.Buffer.Buffer [dt14_sbu8H
                                                                                                                                    dt15_sbu8I
                                                                                                                                    ds15_sbu8J
                                                                                                                                    dt16_sbu8K
                                                                                                                                    0#
                                                                                                                                    0#];
                                                                                                        };
                                                                                              } in 
                                                                                                case
                                                                                                    writeMutVar# [dt2_sbu81
                                                                                                                  sat_sbu8N
                                                                                                                  GHC.Prim.void#]
                                                                                                of
                                                                                                s2#_sbu8O
                                                                                                { (##) ->
                                                                                                      case
                                                                                                          ipv7_sbu8F
                                                                                                      of
                                                                                                      { GHC.IO.Buffer.Buffer dt14_sbu8Q [Occ=Once]
                                                                                                                             dt15_sbu8R [Occ=Once]
                                                                                                                             ds15_sbu8S [Occ=Once]
                                                                                                                             _ [Occ=Dead]
                                                                                                                             dt17_sbu8U [Occ=Once!]
                                                                                                                             _ [Occ=Dead] ->
                                                                                                            case
                                                                                                                dt17_sbu8U
                                                                                                            of
                                                                                                            wild7_sbu8W
                                                                                                            { __DEFAULT ->
                                                                                                                  case
                                                                                                                      ds4_sbu84
                                                                                                                  of
                                                                                                                  { GHC.Base.Nothing ->
                                                                                                                        let {
                                                                                                                          sat_sbu96 [Occ=Once]
                                                                                                                            :: GHC.IO.Buffer.Buffer
                                                                                                                                 GHC.Word.Word8
                                                                                                                          [LclId] =
                                                                                                                              [bbuf0_sbu8C
                                                                                                                               wild7_sbu8W] \u []
                                                                                                                                  case
                                                                                                                                      bbuf0_sbu8C
                                                                                                                                  of
                                                                                                                                  { GHC.IO.Buffer.Buffer dt19_sbu8Z [Occ=Once]
                                                                                                                                                         dt20_sbu90 [Occ=Once]
                                                                                                                                                         ds16_sbu91 [Occ=Once]
                                                                                                                                                         dt21_sbu92 [Occ=Once]
                                                                                                                                                         dt22_sbu93 [Occ=Once]
                                                                                                                                                         dt23_sbu94 [Occ=Once] ->
                                                                                                                                        case
                                                                                                                                            +# [dt22_sbu93
                                                                                                                                                wild7_sbu8W]
                                                                                                                                        of
                                                                                                                                        sat_sbu95
                                                                                                                                        { __DEFAULT ->
                                                                                                                                              GHC.IO.Buffer.Buffer [dt19_sbu8Z
                                                                                                                                                                    dt20_sbu90
                                                                                                                                                                    ds16_sbu91
                                                                                                                                                                    dt21_sbu92
                                                                                                                                                                    sat_sbu95
                                                                                                                                                                    dt23_sbu94];
                                                                                                                                        };
                                                                                                                                  };
                                                                                                                        } in 
                                                                                                                          case
                                                                                                                              writeMutVar# [dt_sbu7Y
                                                                                                                                            sat_sbu96
                                                                                                                                            GHC.Prim.void#]
                                                                                                                          of
                                                                                                                          s2#1_sbu97
                                                                                                                          { (##) ->
                                                                                                                                case
                                                                                                                                    GHC.IO.Handle.Internals.flushBuffer2
                                                                                                                                        wild_sbu7S
                                                                                                                                        GHC.Prim.void#
                                                                                                                                of
                                                                                                                                { Unit# _ [Occ=Dead] ->
                                                                                                                                      GHC.IO.Device.seek
                                                                                                                                          $dIODevice_sbu7T
                                                                                                                                          ds_sbu7W
                                                                                                                                          mode_sbu7J
                                                                                                                                          offset_sbu7K
                                                                                                                                          GHC.Prim.void#;
                                                                                                                                };
                                                                                                                          };
                                                                                                                    GHC.Base.Just decoder_sbu9b [Occ=Once!] ->
                                                                                                                        case
                                                                                                                            decoder_sbu9b
                                                                                                                        of
                                                                                                                        { GHC.IO.Encoding.Types.BufferCodec ds16_sbu9d [Occ=Once]
                                                                                                                                                            ds17_sbu9e [Occ=Once]
                                                                                                                                                            _ [Occ=Dead]
                                                                                                                                                            _ [Occ=Dead]
                                                                                                                                                            ds20_sbu9h [Occ=Once!] ->
                                                                                                                              case
                                                                                                                                  ds20_sbu9h
                                                                                                                                      codec_state_sbu8B
                                                                                                                                      GHC.Prim.void#
                                                                                                                              of
                                                                                                                              { Unit# _ [Occ=Dead] ->
                                                                                                                                    let {
                                                                                                                                      sat_sbu9l [Occ=Once]
                                                                                                                                        :: GHC.IO.Buffer.Buffer
                                                                                                                                             GHC.IO.Buffer.CharBufElem
                                                                                                                                      [LclId] =
                                                                                                                                          CCCS GHC.IO.Buffer.Buffer! [dt14_sbu8Q
                                                                                                                                                                      dt15_sbu8R
                                                                                                                                                                      ds15_sbu8S
                                                                                                                                                                      wild7_sbu8W
                                                                                                                                                                      0#
                                                                                                                                                                      0#];
                                                                                                                                    } in 
                                                                                                                                      case
                                                                                                                                          GHC.IO.Handle.Internals.$wstreamEncode
                                                                                                                                              ds16_sbu9d
                                                                                                                                              ds17_sbu9e
                                                                                                                                              bbuf0_sbu8C
                                                                                                                                              sat_sbu9l
                                                                                                                                              GHC.Prim.void#
                                                                                                                                      of
                                                                                                                                      { Unit# ipv11_sbu9o [Occ=Once!] ->
                                                                                                                                            case
                                                                                                                                                ipv11_sbu9o
                                                                                                                                            of
                                                                                                                                            { (,) bbuf1_sbu9q [Occ=Once]
                                                                                                                                                  _ [Occ=Dead] ->
                                                                                                                                                  case
                                                                                                                                                      writeMutVar# [dt_sbu7Y
                                                                                                                                                                    bbuf1_sbu9q
                                                                                                                                                                    GHC.Prim.void#]
                                                                                                                                                  of
                                                                                                                                                  s2#1_sbu9s
                                                                                                                                                  { (##) ->
                                                                                                                                                        case
                                                                                                                                                            GHC.IO.Handle.Internals.flushBuffer2
                                                                                                                                                                wild_sbu7S
                                                                                                                                                                GHC.Prim.void#
                                                                                                                                                        of
                                                                                                                                                        { Unit# _ [Occ=Dead] ->
                                                                                                                                                              GHC.IO.Device.seek
                                                                                                                                                                  $dIODevice_sbu7T
                                                                                                                                                                  ds_sbu7W
                                                                                                                                                                  mode_sbu7J
                                                                                                                                                                  offset_sbu7K
                                                                                                                                                                  GHC.Prim.void#;
                                                                                                                                                        };
                                                                                                                                                  };
                                                                                                                                            };
                                                                                                                                      };
                                                                                                                              };
                                                                                                                        };
                                                                                                                  };
                                                                                                              0# ->
                                                                                                                  case
                                                                                                                      writeMutVar# [dt_sbu7Y
                                                                                                                                    bbuf0_sbu8C
                                                                                                                                    GHC.Prim.void#]
                                                                                                                  of
                                                                                                                  s2#1_sbu9w
                                                                                                                  { (##) ->
                                                                                                                        case
                                                                                                                            GHC.IO.Handle.Internals.flushBuffer2
                                                                                                                                wild_sbu7S
                                                                                                                                GHC.Prim.void#
                                                                                                                        of
                                                                                                                        { Unit# _ [Occ=Dead] ->
                                                                                                                              GHC.IO.Device.seek
                                                                                                                                  $dIODevice_sbu7T
                                                                                                                                  ds_sbu7W
                                                                                                                                  mode_sbu7J
                                                                                                                                  offset_sbu7K
                                                                                                                                  GHC.Prim.void#;
                                                                                                                        };
                                                                                                                  };
                                                                                                            };
                                                                                                      };
                                                                                                };
                                                                                        };
                                                                                  };
                                                                            };
                                                                        1# ->
                                                                            case
                                                                                GHC.IO.Handle.Internals.flushBuffer2
                                                                                    wild_sbu7S
                                                                                    GHC.Prim.void#
                                                                            of
                                                                            { Unit# _ [Occ=Dead] ->
                                                                                  GHC.IO.Device.seek
                                                                                      $dIODevice_sbu7T
                                                                                      ds_sbu7W
                                                                                      mode_sbu7J
                                                                                      offset_sbu7K
                                                                                      GHC.Prim.void#;
                                                                            };
                                                                      };
                                                                  GHC.IO.Buffer.WriteBuffer ->
                                                                      case
                                                                          GHC.IO.Handle.Internals.flushBuffer2
                                                                              wild_sbu7S
                                                                              GHC.Prim.void#
                                                                      of
                                                                      { Unit# _ [Occ=Dead] ->
                                                                            GHC.IO.Device.seek
                                                                                $dIODevice_sbu7T
                                                                                ds_sbu7W
                                                                                mode_sbu7J
                                                                                offset_sbu7K
                                                                                GHC.Prim.void#;
                                                                      };
                                                                };
                                                          };
                                                    };
                                          } in 
                                            case mode_sbu7J of {
                                              __DEFAULT -> $j_sbu8k;
                                              GHC.IO.Device.RelativeSeek ->
                                                  case ds4_sbu84 of {
                                                    GHC.Base.Nothing ->
                                                        case lvl49_sbu7O of {
                                                          GHC.Types.I# v1_sbu9J [Occ=Once!] ->
                                                              case v1_sbu9J of {
                                                                __DEFAULT -> $j_sbu8k;
                                                                1# ->
                                                                    case
                                                                        -# [dt8_sbu8i dt7_sbu8h]
                                                                    of
                                                                    sat_sbu9L
                                                                    { __DEFAULT ->
                                                                          case
                                                                              GHC.Integer.Type.smallInteger
                                                                                  sat_sbu9L
                                                                          of
                                                                          sat_sbu9M
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    GHC.Integer.Type.ltInteger#
                                                                                        offset_sbu7K
                                                                                        sat_sbu9M
                                                                                of
                                                                                { __DEFAULT ->
                                                                                      $j_sbu8k;
                                                                                  1# ->
                                                                                      let {
                                                                                        sat_sbu9R [Occ=Once]
                                                                                          :: GHC.IO.Buffer.Buffer
                                                                                               GHC.IO.Buffer.CharBufElem
                                                                                        [LclId] =
                                                                                            [lvl48_sbu7M
                                                                                             dt4_sbu8d
                                                                                             dt5_sbu8e
                                                                                             dt6_sbu8g
                                                                                             dt7_sbu8h
                                                                                             dt8_sbu8i] \u []
                                                                                                case
                                                                                                    lvl48_sbu7M
                                                                                                of
                                                                                                { GHC.Types.I# y_sbu9P [Occ=Once] ->
                                                                                                      case
                                                                                                          +# [dt7_sbu8h
                                                                                                              y_sbu9P]
                                                                                                      of
                                                                                                      sat_sbu9Q
                                                                                                      { __DEFAULT ->
                                                                                                            GHC.IO.Buffer.Buffer [dt4_sbu8d
                                                                                                                                  dt5_sbu8e
                                                                                                                                  GHC.IO.Buffer.ReadBuffer
                                                                                                                                  dt6_sbu8g
                                                                                                                                  sat_sbu9Q
                                                                                                                                  dt8_sbu8i];
                                                                                                      };
                                                                                                };
                                                                                      } in 
                                                                                        case
                                                                                            writeMutVar# [dt2_sbu81
                                                                                                          sat_sbu9R
                                                                                                          GHC.Prim.void#]
                                                                                        of
                                                                                        s2#_sbu9S
                                                                                        { (##) ->
                                                                                              Unit# [GHC.Tuple.()];
                                                                                        };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                    GHC.Base.Just _ [Occ=Dead] -> $j_sbu8k;
                                                  };
                                            };
                                      GHC.IO.Buffer.WriteBuffer ->
                                          case readMutVar# [dt_sbu7Y GHC.Prim.void#] of {
                                            Unit# ipv3_sbu9W [Occ=Once!] ->
                                                case ipv3_sbu9W of {
                                                  GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       ds12_sbua0 [Occ=Once!]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                                      case ds12_sbua0 of {
                                                        GHC.IO.Buffer.ReadBuffer ->
                                                            GHC.IO.Device.seek
                                                                $dIODevice_sbu7T
                                                                ds_sbu7W
                                                                mode_sbu7J
                                                                offset_sbu7K
                                                                GHC.Prim.void#;
                                                        GHC.IO.Buffer.WriteBuffer ->
                                                            case
                                                                readMutVar# [dt_sbu7Y
                                                                             GHC.Prim.void#]
                                                            of
                                                            { Unit# ipv5_sbua7 [Occ=Once!] ->
                                                                  case ipv5_sbua7 of wild5_sbua8 {
                                                                    GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         dt17_sbuad [Occ=Once]
                                                                                         dt18_sbuae [Occ=Once] ->
                                                                        case
                                                                            ==# [dt17_sbuad
                                                                                 dt18_sbuae]
                                                                        of
                                                                        { __DEFAULT ->
                                                                              case
                                                                                  GHC.IO.BufferedIO.flushWriteBuffer
                                                                                      $dBufferedIO_sbu7U
                                                                                      ds_sbu7W
                                                                                      wild5_sbua8
                                                                                      GHC.Prim.void#
                                                                              of
                                                                              { Unit# ipv7_sbuai [Occ=Once] ->
                                                                                    case
                                                                                        writeMutVar# [dt_sbu7Y
                                                                                                      ipv7_sbuai
                                                                                                      GHC.Prim.void#]
                                                                                    of
                                                                                    s2#_sbuaj
                                                                                    { (##) ->
                                                                                          GHC.IO.Device.seek
                                                                                              $dIODevice_sbu7T
                                                                                              ds_sbu7W
                                                                                              mode_sbu7J
                                                                                              offset_sbu7K
                                                                                              GHC.Prim.void#;
                                                                                    };
                                                                              };
                                                                          1# ->
                                                                              GHC.IO.Device.seek
                                                                                  $dIODevice_sbu7T
                                                                                  ds_sbu7W
                                                                                  mode_sbu7J
                                                                                  offset_sbu7K
                                                                                  GHC.Prim.void#;
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
                  };
        } in 
          GHC.IO.Handle.Internals.wantSeekableHandle1
              lvl13_rbnWV handle_sbu7I sat_sbuak GHC.Prim.void#;

GHC.IO.Handle.hSeek
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Device.SeekMode
     -> GHC.Integer.Type.Integer
     -> GHC.Types.IO ()
[GblId, Arity=4, Str=<S,1*U><L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.hSeek1 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.hSetPosn1
  :: GHC.IO.Handle.HandlePosn
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S(SL),1*U(1*U,U)><S,U>, Unf=OtherCon []] =
    [] \r [ds_sbual void_0E]
        case ds_sbual of {
          GHC.IO.Handle.HandlePosn h_sbuao [Occ=Once] i_sbuap [Occ=Once] ->
              GHC.IO.Handle.hSeek1
                  h_sbuao GHC.IO.Device.AbsoluteSeek i_sbuap GHC.Prim.void#;
        };

GHC.IO.Handle.hSetPosn
  :: GHC.IO.Handle.HandlePosn -> GHC.Types.IO ()
[GblId, Arity=2, Str=<S(SL),1*U(1*U,U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.hSetPosn1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.hGetEncoding4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hGetEncoding"#;

GHC.IO.Handle.hGetEncoding3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hGetEncoding4;

GHC.IO.Handle.hGetEncoding2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__,
            GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding) #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [h__sbuaq void_0E]
        case h__sbuaq of wild_sbuas {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds5_sbuaF [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              let {
                sat_sbuaJ [Occ=Once]
                  :: (GHC.IO.Handle.Types.Handle__,
                      GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding)
                [LclId] =
                    CCCS (,)! [wild_sbuas ds5_sbuaF];
              } in  Unit# [sat_sbuaJ];
        };

GHC.IO.Handle.hGetEncoding1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [hdl_sbuaK void_0E]
        case hdl_sbuaK of wild_sbuaM {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbuaO ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sbuaR [Occ=Once!] ->
                    let {
                      io_sbuaS [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbuaM dt_sbuaO] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hGetEncoding3
                                      wild_sbuaM
                                      GHC.IO.Handle.hGetEncoding2
                                      dt_sbuaO
                                      GHC.Prim.void#
                              of
                              { Unit# ipv3_sbuaW [Occ=Once!] ->
                                    case ipv3_sbuaW of {
                                      (,) h'_sbuaY [Occ=Once] v_sbuaZ [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbuaO h'_sbuaY GHC.Prim.void#]
                                          of
                                          s2#_sbub0
                                          { (##) -> Unit# [v_sbuaZ];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbuaR of {
                        __DEFAULT -> io_sbuaS GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sbuaS GHC.Prim.void#];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sbub3
                                           _ [Occ=Dead] ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sbub7 [Occ=Once!] ->
                    let {
                      io_sbub8 [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbuaM dt_sbub3] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hGetEncoding3
                                      wild_sbuaM
                                      GHC.IO.Handle.hGetEncoding2
                                      dt_sbub3
                                      GHC.Prim.void#
                              of
                              { Unit# ipv3_sbubc [Occ=Once!] ->
                                    case ipv3_sbubc of {
                                      (,) h'_sbube [Occ=Once] v_sbubf [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbub3 h'_sbube GHC.Prim.void#]
                                          of
                                          s2#_sbubg
                                          { (##) -> Unit# [v_sbubf];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbub7 of {
                        __DEFAULT -> io_sbub8 GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sbub8 GHC.Prim.void#];
                      };
              };
        };

GHC.IO.Handle.hGetEncoding
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Types.IO (GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.hGetEncoding1 eta_B2 GHC.Prim.void#;

lvl15_rbnWX :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hSetEncoding"#;

lvl16_rbnWY :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl15_rbnWX;

lvl17_rbnWZ :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "last_decode"#;

lvl18_rbnX0 :: forall ds. (ds, GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl17_rbnWZ of sat_sbubi {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sbubi;
        };

GHC.IO.Handle.hSetEncoding1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Encoding.Types.TextEncoding
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [hdl_sbubj encoding_sbubk void_0E]
        let {
          lvl48_sbubm [Occ=OnceL*]
            :: GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
          [LclId, Unf=OtherCon []] =
              CCCS GHC.Base.Just! [encoding_sbubk]; } in
        let {
          sat_sbuev [Occ=Once]
            :: GHC.IO.Handle.Types.Handle__
               -> GHC.Types.IO GHC.IO.Handle.Types.Handle__
          [LclId] =
              [encoding_sbubk lvl48_sbubm] \r [h__sbubn void_0E]
                  case h__sbubn of {
                    GHC.IO.Handle.Types.Handle__ $dIODevice_sbubq [Occ=Once*]
                                                 $dBufferedIO_sbubr [Occ=Once*]
                                                 $dTypeable_sbubs [Occ=Once*]
                                                 ds_sbubt [Occ=Once*]
                                                 ds1_sbubu
                                                 dt_sbubv
                                                 ds2_sbubw [Occ=Once*]
                                                 dt1_sbubx [Occ=Once]
                                                 dt2_sbuby
                                                 dt3_sbubz [Occ=Once*]
                                                 ds3_sbubA [Occ=Once*!]
                                                 ds4_sbubB
                                                 _ [Occ=Dead]
                                                 ds6_sbubD [Occ=Once*]
                                                 ds7_sbubE [Occ=Once*]
                                                 ds8_sbubF [Occ=Once*] ->
                        case readMutVar# [dt2_sbuby GHC.Prim.void#] of {
                          Unit# ipv1_sbubI [Occ=Once!] ->
                              case ipv1_sbubI of {
                                GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                     _ [Occ=Dead]
                                                     ds10_sbubM [Occ=Once!]
                                                     _ [Occ=Dead]
                                                     dt7_sbubO [Occ=Once]
                                                     dt8_sbubP [Occ=Once] ->
                                    let-no-escape {
                                      $w$j_sbubQ [InlPrag=NOUSERINLINE[0],
                                                  Occ=Once*!T[1],
                                                  Dmd=<L,1*C1(U)>]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                 GHC.IO.Handle.Types.Handle__ #)
                                      [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                          sat-only [encoding_sbubk
                                                    lvl48_sbubm
                                                    $dIODevice_sbubq
                                                    $dBufferedIO_sbubr
                                                    $dTypeable_sbubs
                                                    ds_sbubt
                                                    ds1_sbubu
                                                    dt_sbubv
                                                    ds2_sbubw
                                                    dt2_sbuby
                                                    dt3_sbubz
                                                    ds3_sbubA
                                                    ds4_sbubB
                                                    ds6_sbubD
                                                    ds7_sbubE
                                                    ds8_sbubF] \r [void_0E]
                                              let-no-escape {
                                                $w$j1_sbubS [InlPrag=NOUSERINLINE[0],
                                                             Occ=Once*!T[1],
                                                             Dmd=<L,1*C1(U)>]
                                                  :: GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.IO.Handle.Types.Handle__ #)
                                                [LclId[JoinId(1)],
                                                 Arity=1,
                                                 Str=<S,U>,
                                                 Unf=OtherCon []] =
                                                    sat-only [encoding_sbubk
                                                              lvl48_sbubm
                                                              $dIODevice_sbubq
                                                              $dBufferedIO_sbubr
                                                              $dTypeable_sbubs
                                                              ds_sbubt
                                                              ds1_sbubu
                                                              dt_sbubv
                                                              ds2_sbubw
                                                              dt2_sbuby
                                                              dt3_sbubz
                                                              ds6_sbubD
                                                              ds7_sbubE
                                                              ds8_sbubF] \r [void_0E]
                                                        case encoding_sbubk of {
                                                          GHC.IO.Encoding.Types.TextEncoding _ [Occ=Dead]
                                                                                             ds13_sbubW [Occ=Once*]
                                                                                             ds14_sbubX [Occ=Once*] ->
                                                              let-no-escape {
                                                                $j_sbubY [Occ=Once*!T[2],
                                                                          Dmd=<L,1*C1(C1(U))>]
                                                                  :: GHC.Prim.State#
                                                                       GHC.Prim.RealWorld
                                                                     -> GHC.Base.Maybe
                                                                          (GHC.IO.Encoding.Types.TextDecoder
                                                                             dstate_ibkNi)
                                                                     -> (# GHC.Prim.State#
                                                                             GHC.Prim.RealWorld,
                                                                           GHC.IO.Handle.Types.Handle__ #)
                                                                [LclId[JoinId(2)],
                                                                 Arity=2,
                                                                 Str=<S,U><L,U>,
                                                                 Unf=OtherCon []] =
                                                                    sat-only [lvl48_sbubm
                                                                              $dIODevice_sbubq
                                                                              $dBufferedIO_sbubr
                                                                              $dTypeable_sbubs
                                                                              ds_sbubt
                                                                              ds1_sbubu
                                                                              dt_sbubv
                                                                              ds2_sbubw
                                                                              dt2_sbuby
                                                                              dt3_sbubz
                                                                              ds6_sbubD
                                                                              ds7_sbubE
                                                                              ds8_sbubF
                                                                              ds14_sbubX] \r [void_0E
                                                                                              ipv3_sbuc0]
                                                                        case
                                                                            ds1_sbubu
                                                                        of
                                                                        wild3_sbuc1
                                                                        { __DEFAULT ->
                                                                              case
                                                                                  readMutVar# [dt_sbubv
                                                                                               GHC.Prim.void#]
                                                                              of
                                                                              { Unit# _ [Occ=Dead] ->
                                                                                    case
                                                                                        newMutVar# [lvl18_rbnX0
                                                                                                    GHC.Prim.void#]
                                                                                    of
                                                                                    { Unit# ipv7_sbuc7 [Occ=Once] ->
                                                                                          let {
                                                                                            sat_sbuc8 [Occ=Once]
                                                                                              :: GHC.IO.Handle.Types.Handle__
                                                                                            [LclId] =
                                                                                                CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbubq
                                                                                                                                    $dBufferedIO_sbubr
                                                                                                                                    $dTypeable_sbubs
                                                                                                                                    ds_sbubt
                                                                                                                                    wild3_sbuc1
                                                                                                                                    dt_sbubv
                                                                                                                                    ds2_sbubw
                                                                                                                                    ipv7_sbuc7
                                                                                                                                    dt2_sbuby
                                                                                                                                    dt3_sbubz
                                                                                                                                    GHC.Base.Nothing
                                                                                                                                    ipv3_sbuc0
                                                                                                                                    lvl48_sbubm
                                                                                                                                    ds6_sbubD
                                                                                                                                    ds7_sbubE
                                                                                                                                    ds8_sbubF];
                                                                                          } in 
                                                                                            Unit# [sat_sbuc8];
                                                                                    };
                                                                              };
                                                                          GHC.IO.Handle.Types.WriteHandle ->
                                                                              case
                                                                                  ds14_sbubX
                                                                                      GHC.Prim.void#
                                                                              of
                                                                              { Unit# ipv5_sbucb [Occ=Once] ->
                                                                                    case
                                                                                        readMutVar# [dt_sbubv
                                                                                                     GHC.Prim.void#]
                                                                                    of
                                                                                    { Unit# _ [Occ=Dead] ->
                                                                                          case
                                                                                              newMutVar# [lvl18_rbnX0
                                                                                                          GHC.Prim.void#]
                                                                                          of
                                                                                          { Unit# ipv9_sbuch [Occ=Once] ->
                                                                                                let {
                                                                                                  sat_sbuci [Occ=Once]
                                                                                                    :: GHC.Base.Maybe
                                                                                                         (GHC.IO.Encoding.Types.TextEncoder
                                                                                                            estate_ibkNj)
                                                                                                  [LclId] =
                                                                                                      CCCS GHC.Base.Just! [ipv5_sbucb]; } in
                                                                                                let {
                                                                                                  sat_sbucj [Occ=Once]
                                                                                                    :: GHC.IO.Handle.Types.Handle__
                                                                                                  [LclId] =
                                                                                                      CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbubq
                                                                                                                                          $dBufferedIO_sbubr
                                                                                                                                          $dTypeable_sbubs
                                                                                                                                          ds_sbubt
                                                                                                                                          GHC.IO.Handle.Types.WriteHandle
                                                                                                                                          dt_sbubv
                                                                                                                                          ds2_sbubw
                                                                                                                                          ipv9_sbuch
                                                                                                                                          dt2_sbuby
                                                                                                                                          dt3_sbubz
                                                                                                                                          sat_sbuci
                                                                                                                                          ipv3_sbuc0
                                                                                                                                          lvl48_sbubm
                                                                                                                                          ds6_sbubD
                                                                                                                                          ds7_sbubE
                                                                                                                                          ds8_sbubF];
                                                                                                } in 
                                                                                                  Unit# [sat_sbucj];
                                                                                          };
                                                                                    };
                                                                              };
                                                                          GHC.IO.Handle.Types.AppendHandle ->
                                                                              case
                                                                                  ds14_sbubX
                                                                                      GHC.Prim.void#
                                                                              of
                                                                              { Unit# ipv5_sbucm [Occ=Once] ->
                                                                                    case
                                                                                        readMutVar# [dt_sbubv
                                                                                                     GHC.Prim.void#]
                                                                                    of
                                                                                    { Unit# _ [Occ=Dead] ->
                                                                                          case
                                                                                              newMutVar# [lvl18_rbnX0
                                                                                                          GHC.Prim.void#]
                                                                                          of
                                                                                          { Unit# ipv9_sbucs [Occ=Once] ->
                                                                                                let {
                                                                                                  sat_sbuct [Occ=Once]
                                                                                                    :: GHC.Base.Maybe
                                                                                                         (GHC.IO.Encoding.Types.TextEncoder
                                                                                                            estate_ibkNj)
                                                                                                  [LclId] =
                                                                                                      CCCS GHC.Base.Just! [ipv5_sbucm]; } in
                                                                                                let {
                                                                                                  sat_sbucu [Occ=Once]
                                                                                                    :: GHC.IO.Handle.Types.Handle__
                                                                                                  [LclId] =
                                                                                                      CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbubq
                                                                                                                                          $dBufferedIO_sbubr
                                                                                                                                          $dTypeable_sbubs
                                                                                                                                          ds_sbubt
                                                                                                                                          GHC.IO.Handle.Types.AppendHandle
                                                                                                                                          dt_sbubv
                                                                                                                                          ds2_sbubw
                                                                                                                                          ipv9_sbucs
                                                                                                                                          dt2_sbuby
                                                                                                                                          dt3_sbubz
                                                                                                                                          sat_sbuct
                                                                                                                                          ipv3_sbuc0
                                                                                                                                          lvl48_sbubm
                                                                                                                                          ds6_sbubD
                                                                                                                                          ds7_sbubE
                                                                                                                                          ds8_sbubF];
                                                                                                } in 
                                                                                                  Unit# [sat_sbucu];
                                                                                          };
                                                                                    };
                                                                              };
                                                                          GHC.IO.Handle.Types.ReadWriteHandle ->
                                                                              case
                                                                                  ds14_sbubX
                                                                                      GHC.Prim.void#
                                                                              of
                                                                              { Unit# ipv5_sbucx [Occ=Once] ->
                                                                                    case
                                                                                        readMutVar# [dt_sbubv
                                                                                                     GHC.Prim.void#]
                                                                                    of
                                                                                    { Unit# _ [Occ=Dead] ->
                                                                                          case
                                                                                              newMutVar# [lvl18_rbnX0
                                                                                                          GHC.Prim.void#]
                                                                                          of
                                                                                          { Unit# ipv9_sbucD [Occ=Once] ->
                                                                                                let {
                                                                                                  sat_sbucE [Occ=Once]
                                                                                                    :: GHC.Base.Maybe
                                                                                                         (GHC.IO.Encoding.Types.TextEncoder
                                                                                                            estate_ibkNj)
                                                                                                  [LclId] =
                                                                                                      CCCS GHC.Base.Just! [ipv5_sbucx]; } in
                                                                                                let {
                                                                                                  sat_sbucF [Occ=Once]
                                                                                                    :: GHC.IO.Handle.Types.Handle__
                                                                                                  [LclId] =
                                                                                                      CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbubq
                                                                                                                                          $dBufferedIO_sbubr
                                                                                                                                          $dTypeable_sbubs
                                                                                                                                          ds_sbubt
                                                                                                                                          GHC.IO.Handle.Types.ReadWriteHandle
                                                                                                                                          dt_sbubv
                                                                                                                                          ds2_sbubw
                                                                                                                                          ipv9_sbucD
                                                                                                                                          dt2_sbuby
                                                                                                                                          dt3_sbubz
                                                                                                                                          sat_sbucE
                                                                                                                                          ipv3_sbuc0
                                                                                                                                          lvl48_sbubm
                                                                                                                                          ds6_sbubD
                                                                                                                                          ds7_sbubE
                                                                                                                                          ds8_sbubF];
                                                                                                } in 
                                                                                                  Unit# [sat_sbucF];
                                                                                          };
                                                                                    };
                                                                              };
                                                                        };
                                                              } in 
                                                                case ds1_sbubu of {
                                                                  __DEFAULT ->
                                                                      $j_sbubY
                                                                          GHC.Prim.void#
                                                                          GHC.Base.Nothing;
                                                                  GHC.IO.Handle.Types.ReadHandle ->
                                                                      case
                                                                          ds13_sbubW GHC.Prim.void#
                                                                      of
                                                                      { Unit# ipv3_sbucJ [Occ=Once] ->
                                                                            let {
                                                                              sat_sbucK [Occ=Once]
                                                                                :: GHC.Base.Maybe
                                                                                     (GHC.IO.Encoding.Types.TextDecoder
                                                                                        dstate_ibkNi)
                                                                              [LclId] =
                                                                                  CCCS GHC.Base.Just! [ipv3_sbucJ];
                                                                            } in 
                                                                              $j_sbubY
                                                                                  GHC.Prim.void#
                                                                                  sat_sbucK;
                                                                      };
                                                                  GHC.IO.Handle.Types.ReadWriteHandle ->
                                                                      case
                                                                          ds13_sbubW GHC.Prim.void#
                                                                      of
                                                                      { Unit# ipv3_sbucN [Occ=Once] ->
                                                                            let {
                                                                              sat_sbucO [Occ=Once]
                                                                                :: GHC.Base.Maybe
                                                                                     (GHC.IO.Encoding.Types.TextDecoder
                                                                                        dstate_ibkNi)
                                                                              [LclId] =
                                                                                  CCCS GHC.Base.Just! [ipv3_sbucN];
                                                                            } in 
                                                                              $j_sbubY
                                                                                  GHC.Prim.void#
                                                                                  sat_sbucO;
                                                                      };
                                                                };
                                                        };
                                              } in 
                                                case ds4_sbubB of {
                                                  GHC.Base.Nothing ->
                                                      case ds3_sbubA of {
                                                        GHC.Base.Nothing ->
                                                            $w$j1_sbubS GHC.Prim.void#;
                                                        GHC.Base.Just d_sbucR [Occ=Once!] ->
                                                            case d_sbucR of {
                                                              GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                                _ [Occ=Dead]
                                                                                                ds13_sbucV [Occ=Once]
                                                                                                _ [Occ=Dead]
                                                                                                _ [Occ=Dead] ->
                                                                  case
                                                                      ds13_sbucV GHC.Prim.void#
                                                                  of
                                                                  { Unit# _ [Occ=Dead] ->
                                                                        $w$j1_sbubS GHC.Prim.void#;
                                                                  };
                                                            };
                                                      };
                                                  GHC.Base.Just d_sbud1 [Occ=Once!] ->
                                                      case d_sbud1 of {
                                                        GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                          _ [Occ=Dead]
                                                                                          ds13_sbud5 [Occ=Once]
                                                                                          _ [Occ=Dead]
                                                                                          _ [Occ=Dead] ->
                                                            case ds13_sbud5 GHC.Prim.void# of {
                                                              Unit# _ [Occ=Dead] ->
                                                                  case ds3_sbubA of {
                                                                    GHC.Base.Nothing ->
                                                                        $w$j1_sbubS GHC.Prim.void#;
                                                                    GHC.Base.Just d1_sbudc [Occ=Once!] ->
                                                                        case d1_sbudc of {
                                                                          GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                                            _ [Occ=Dead]
                                                                                                            ds19_sbudg [Occ=Once]
                                                                                                            _ [Occ=Dead]
                                                                                                            _ [Occ=Dead] ->
                                                                              case
                                                                                  ds19_sbudg
                                                                                      GHC.Prim.void#
                                                                              of
                                                                              { Unit# _ [Occ=Dead] ->
                                                                                    $w$j1_sbubS
                                                                                        GHC.Prim.void#;
                                                                              };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                    } in 
                                      case ds10_sbubM of {
                                        GHC.IO.Buffer.ReadBuffer ->
                                            case readMutVar# [dt2_sbuby GHC.Prim.void#] of {
                                              Unit# ipv3_sbudp [Occ=Once!] ->
                                                  case ipv3_sbudp of {
                                                    GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                         _ [Occ=Dead]
                                                                         ds11_sbudt [Occ=Once!]
                                                                         _ [Occ=Dead]
                                                                         dt13_sbudv [Occ=Once]
                                                                         dt14_sbudw [Occ=Once] ->
                                                        case ds11_sbudt of {
                                                          GHC.IO.Buffer.ReadBuffer ->
                                                              case ==# [dt13_sbudv dt14_sbudw] of {
                                                                __DEFAULT ->
                                                                    case
                                                                        readMutVar# [dt1_sbubx
                                                                                     GHC.Prim.void#]
                                                                    of
                                                                    { Unit# ipv5_sbudB [Occ=Once!] ->
                                                                          case ipv5_sbudB of {
                                                                            (,) codec_state_sbudD [Occ=Once]
                                                                                bbuf0_sbudE [Occ=Once*] ->
                                                                                case
                                                                                    readMutVar# [dt2_sbuby
                                                                                                 GHC.Prim.void#]
                                                                                of
                                                                                { Unit# ipv7_sbudH ->
                                                                                      let {
                                                                                        sat_sbudP [Occ=Once]
                                                                                          :: GHC.IO.Buffer.Buffer
                                                                                               GHC.IO.Buffer.CharBufElem
                                                                                        [LclId] =
                                                                                            [ipv7_sbudH] \u []
                                                                                                case
                                                                                                    ipv7_sbudH
                                                                                                of
                                                                                                { GHC.IO.Buffer.Buffer dt9_sbudJ [Occ=Once]
                                                                                                                       dt15_sbudK [Occ=Once]
                                                                                                                       ds15_sbudL [Occ=Once]
                                                                                                                       dt16_sbudM [Occ=Once]
                                                                                                                       _ [Occ=Dead]
                                                                                                                       _ [Occ=Dead] ->
                                                                                                      GHC.IO.Buffer.Buffer [dt9_sbudJ
                                                                                                                            dt15_sbudK
                                                                                                                            ds15_sbudL
                                                                                                                            dt16_sbudM
                                                                                                                            0#
                                                                                                                            0#];
                                                                                                };
                                                                                      } in 
                                                                                        case
                                                                                            writeMutVar# [dt2_sbuby
                                                                                                          sat_sbudP
                                                                                                          GHC.Prim.void#]
                                                                                        of
                                                                                        s2#_sbudQ
                                                                                        { (##) ->
                                                                                              case
                                                                                                  ipv7_sbudH
                                                                                              of
                                                                                              { GHC.IO.Buffer.Buffer dt9_sbudS [Occ=Once]
                                                                                                                     dt15_sbudT [Occ=Once]
                                                                                                                     ds15_sbudU [Occ=Once]
                                                                                                                     _ [Occ=Dead]
                                                                                                                     dt17_sbudW [Occ=Once!]
                                                                                                                     _ [Occ=Dead] ->
                                                                                                    case
                                                                                                        dt17_sbudW
                                                                                                    of
                                                                                                    wild7_sbudY
                                                                                                    { __DEFAULT ->
                                                                                                          case
                                                                                                              ds4_sbubB
                                                                                                          of
                                                                                                          { GHC.Base.Nothing ->
                                                                                                                let {
                                                                                                                  sat_sbue8 [Occ=Once]
                                                                                                                    :: GHC.IO.Buffer.Buffer
                                                                                                                         GHC.Word.Word8
                                                                                                                  [LclId] =
                                                                                                                      [bbuf0_sbudE
                                                                                                                       wild7_sbudY] \u []
                                                                                                                          case
                                                                                                                              bbuf0_sbudE
                                                                                                                          of
                                                                                                                          { GHC.IO.Buffer.Buffer dt19_sbue1 [Occ=Once]
                                                                                                                                                 dt20_sbue2 [Occ=Once]
                                                                                                                                                 ds16_sbue3 [Occ=Once]
                                                                                                                                                 dt21_sbue4 [Occ=Once]
                                                                                                                                                 dt22_sbue5 [Occ=Once]
                                                                                                                                                 dt23_sbue6 [Occ=Once] ->
                                                                                                                                case
                                                                                                                                    +# [dt22_sbue5
                                                                                                                                        wild7_sbudY]
                                                                                                                                of
                                                                                                                                sat_sbue7
                                                                                                                                { __DEFAULT ->
                                                                                                                                      GHC.IO.Buffer.Buffer [dt19_sbue1
                                                                                                                                                            dt20_sbue2
                                                                                                                                                            ds16_sbue3
                                                                                                                                                            dt21_sbue4
                                                                                                                                                            sat_sbue7
                                                                                                                                                            dt23_sbue6];
                                                                                                                                };
                                                                                                                          };
                                                                                                                } in 
                                                                                                                  case
                                                                                                                      writeMutVar# [dt_sbubv
                                                                                                                                    sat_sbue8
                                                                                                                                    GHC.Prim.void#]
                                                                                                                  of
                                                                                                                  s2#1_sbue9
                                                                                                                  { (##) ->
                                                                                                                        $w$j_sbubQ
                                                                                                                            GHC.Prim.void#;
                                                                                                                  };
                                                                                                            GHC.Base.Just decoder_sbuea [Occ=Once!] ->
                                                                                                                case
                                                                                                                    decoder_sbuea
                                                                                                                of
                                                                                                                { GHC.IO.Encoding.Types.BufferCodec ds16_sbuec [Occ=Once]
                                                                                                                                                    ds17_sbued [Occ=Once]
                                                                                                                                                    _ [Occ=Dead]
                                                                                                                                                    _ [Occ=Dead]
                                                                                                                                                    ds20_sbueg [Occ=Once!] ->
                                                                                                                      case
                                                                                                                          ds20_sbueg
                                                                                                                              codec_state_sbudD
                                                                                                                              GHC.Prim.void#
                                                                                                                      of
                                                                                                                      { Unit# _ [Occ=Dead] ->
                                                                                                                            let {
                                                                                                                              sat_sbuek [Occ=Once]
                                                                                                                                :: GHC.IO.Buffer.Buffer
                                                                                                                                     GHC.IO.Buffer.CharBufElem
                                                                                                                              [LclId] =
                                                                                                                                  CCCS GHC.IO.Buffer.Buffer! [dt9_sbudS
                                                                                                                                                              dt15_sbudT
                                                                                                                                                              ds15_sbudU
                                                                                                                                                              wild7_sbudY
                                                                                                                                                              0#
                                                                                                                                                              0#];
                                                                                                                            } in 
                                                                                                                              case
                                                                                                                                  GHC.IO.Handle.Internals.$wstreamEncode
                                                                                                                                      ds16_sbuec
                                                                                                                                      ds17_sbued
                                                                                                                                      bbuf0_sbudE
                                                                                                                                      sat_sbuek
                                                                                                                                      GHC.Prim.void#
                                                                                                                              of
                                                                                                                              { Unit# ipv11_sbuen [Occ=Once!] ->
                                                                                                                                    case
                                                                                                                                        ipv11_sbuen
                                                                                                                                    of
                                                                                                                                    { (,) bbuf1_sbuep [Occ=Once]
                                                                                                                                          _ [Occ=Dead] ->
                                                                                                                                          case
                                                                                                                                              writeMutVar# [dt_sbubv
                                                                                                                                                            bbuf1_sbuep
                                                                                                                                                            GHC.Prim.void#]
                                                                                                                                          of
                                                                                                                                          s2#1_sbuer
                                                                                                                                          { (##) ->
                                                                                                                                                $w$j_sbubQ
                                                                                                                                                    GHC.Prim.void#;
                                                                                                                                          };
                                                                                                                                    };
                                                                                                                              };
                                                                                                                      };
                                                                                                                };
                                                                                                          };
                                                                                                      0# ->
                                                                                                          case
                                                                                                              writeMutVar# [dt_sbubv
                                                                                                                            bbuf0_sbudE
                                                                                                                            GHC.Prim.void#]
                                                                                                          of
                                                                                                          s2#1_sbues
                                                                                                          { (##) ->
                                                                                                                $w$j_sbubQ
                                                                                                                    GHC.Prim.void#;
                                                                                                          };
                                                                                                    };
                                                                                              };
                                                                                        };
                                                                                };
                                                                          };
                                                                    };
                                                                1# -> $w$j_sbubQ GHC.Prim.void#;
                                                              };
                                                          GHC.IO.Buffer.WriteBuffer ->
                                                              $w$j_sbubQ GHC.Prim.void#;
                                                        };
                                                  };
                                            };
                                        GHC.IO.Buffer.WriteBuffer ->
                                            case ==# [dt7_sbubO dt8_sbubP] of {
                                              __DEFAULT -> GHC.IO.Handle.Internals.flushCharBuffer2;
                                              1# -> $w$j_sbubQ GHC.Prim.void#;
                                            };
                                      };
                              };
                        };
                  };
        } in 
          GHC.IO.Handle.Internals.withAllHandles__1
              lvl16_rbnWY hdl_sbubj sat_sbuev GHC.Prim.void#;

GHC.IO.Handle.hSetEncoding
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.hSetEncoding1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.hSetBuffering3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hSetBuffering"#;

GHC.IO.Handle.hSetBuffering2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hSetBuffering3;

GHC.IO.Handle.hSetBuffering1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Types.BufferMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbuew mode_sbuex void_0E]
        let {
          sat_sbufG [Occ=Once]
            :: GHC.IO.Handle.Types.Handle__
               -> GHC.Types.IO GHC.IO.Handle.Types.Handle__
          [LclId] =
              [mode_sbuex] \r [handle__sbuez void_0E]
                  case handle__sbuez of wild_sbueB {
                    GHC.IO.Handle.Types.Handle__ $dIODevice_sbueC
                                                 $dBufferedIO_sbueD
                                                 $dTypeable_sbueE
                                                 ds_sbueF
                                                 ds1_sbueG [Occ=Once!]
                                                 dt_sbueH
                                                 ds2_sbueI [Occ=Once*!]
                                                 dt1_sbueJ
                                                 dt2_sbueK
                                                 dt3_sbueL
                                                 ds3_sbueM
                                                 ds4_sbueN
                                                 ds5_sbueO
                                                 ds6_sbueP
                                                 ds7_sbueQ
                                                 ds8_sbueR ->
                        case ds1_sbueG of wild1_sbueS {
                          __DEFAULT ->
                              let-no-escape {
                                $j_sbueT [Occ=Once*T[0], Dmd=<L,1*U>]
                                  :: (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        GHC.IO.Handle.Types.Handle__ #)
                                [LclId[JoinId(0)], Unf=OtherCon []] =
                                    [mode_sbuex
                                     $dIODevice_sbueC
                                     $dBufferedIO_sbueD
                                     $dTypeable_sbueE
                                     ds_sbueF
                                     dt_sbueH
                                     dt1_sbueJ
                                     dt2_sbueK
                                     dt3_sbueL
                                     ds3_sbueM
                                     ds4_sbueN
                                     ds5_sbueO
                                     ds6_sbueP
                                     ds7_sbueQ
                                     ds8_sbueR
                                     wild1_sbueS] \r []
                                        let-no-escape {
                                          $w$j_sbueU [InlPrag=NOUSERINLINE[0],
                                                      Occ=Once*!T[1],
                                                      Dmd=<C(S),1*C1(U)>]
                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                     GHC.IO.Handle.Types.Handle__ #)
                                          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                              sat-only [mode_sbuex
                                                        $dIODevice_sbueC
                                                        $dBufferedIO_sbueD
                                                        $dTypeable_sbueE
                                                        ds_sbueF
                                                        dt_sbueH
                                                        dt1_sbueJ
                                                        dt2_sbueK
                                                        dt3_sbueL
                                                        ds3_sbueM
                                                        ds4_sbueN
                                                        ds5_sbueO
                                                        ds6_sbueP
                                                        ds7_sbueQ
                                                        ds8_sbueR
                                                        wild1_sbueS] \r [void_0E]
                                                  case
                                                      GHC.IO.Device.isTerminal
                                                          $dIODevice_sbueC ds_sbueF GHC.Prim.void#
                                                  of
                                                  { Unit# ipv1_sbueY [Occ=Once!] ->
                                                        case ipv1_sbueY of {
                                                          GHC.Types.False ->
                                                              case
                                                                  writeMutVar# [dt3_sbueL
                                                                                GHC.IO.Handle.Types.BufferListNil
                                                                                GHC.Prim.void#]
                                                              of
                                                              s2#_sbuf0
                                                              { (##) ->
                                                                    let {
                                                                      sat_sbuf1 [Occ=Once]
                                                                        :: GHC.IO.Handle.Types.Handle__
                                                                      [LclId] =
                                                                          CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbueC
                                                                                                              $dBufferedIO_sbueD
                                                                                                              $dTypeable_sbueE
                                                                                                              ds_sbueF
                                                                                                              wild1_sbueS
                                                                                                              dt_sbueH
                                                                                                              mode_sbuex
                                                                                                              dt1_sbueJ
                                                                                                              dt2_sbueK
                                                                                                              dt3_sbueL
                                                                                                              ds3_sbueM
                                                                                                              ds4_sbueN
                                                                                                              ds5_sbueO
                                                                                                              ds6_sbueP
                                                                                                              ds7_sbueQ
                                                                                                              ds8_sbueR];
                                                                    } in  Unit# [sat_sbuf1];
                                                              };
                                                          GHC.Types.True ->
                                                              let-no-escape {
                                                                $j1_sbuf2 [Occ=Once*T[0],
                                                                           Dmd=<L,1*U>]
                                                                  :: (# GHC.Prim.State#
                                                                          GHC.Prim.RealWorld,
                                                                        GHC.IO.Handle.Types.Handle__ #)
                                                                [LclId[JoinId(0)],
                                                                 Unf=OtherCon []] =
                                                                    [mode_sbuex
                                                                     $dIODevice_sbueC
                                                                     $dBufferedIO_sbueD
                                                                     $dTypeable_sbueE
                                                                     ds_sbueF
                                                                     dt_sbueH
                                                                     dt1_sbueJ
                                                                     dt2_sbueK
                                                                     dt3_sbueL
                                                                     ds3_sbueM
                                                                     ds4_sbueN
                                                                     ds5_sbueO
                                                                     ds6_sbueP
                                                                     ds7_sbueQ
                                                                     ds8_sbueR
                                                                     wild1_sbueS] \r []
                                                                        case
                                                                            mode_sbuex
                                                                        of
                                                                        wild3_sbuf3
                                                                        { __DEFAULT ->
                                                                              case
                                                                                  GHC.IO.Device.setRaw
                                                                                      $dIODevice_sbueC
                                                                                      ds_sbueF
                                                                                      GHC.Types.False
                                                                                      GHC.Prim.void#
                                                                              of
                                                                              { Unit# _ [Occ=Dead] ->
                                                                                    case
                                                                                        writeMutVar# [dt3_sbueL
                                                                                                      GHC.IO.Handle.Types.BufferListNil
                                                                                                      GHC.Prim.void#]
                                                                                    of
                                                                                    s2#_sbuf7
                                                                                    { (##) ->
                                                                                          let {
                                                                                            sat_sbuf8 [Occ=Once]
                                                                                              :: GHC.IO.Handle.Types.Handle__
                                                                                            [LclId] =
                                                                                                CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbueC
                                                                                                                                    $dBufferedIO_sbueD
                                                                                                                                    $dTypeable_sbueE
                                                                                                                                    ds_sbueF
                                                                                                                                    wild1_sbueS
                                                                                                                                    dt_sbueH
                                                                                                                                    wild3_sbuf3
                                                                                                                                    dt1_sbueJ
                                                                                                                                    dt2_sbueK
                                                                                                                                    dt3_sbueL
                                                                                                                                    ds3_sbueM
                                                                                                                                    ds4_sbueN
                                                                                                                                    ds5_sbueO
                                                                                                                                    ds6_sbueP
                                                                                                                                    ds7_sbueQ
                                                                                                                                    ds8_sbueR];
                                                                                          } in 
                                                                                            Unit# [sat_sbuf8];
                                                                                    };
                                                                              };
                                                                          GHC.IO.Handle.Types.NoBuffering ->
                                                                              case
                                                                                  GHC.IO.Device.setRaw
                                                                                      $dIODevice_sbueC
                                                                                      ds_sbueF
                                                                                      GHC.Types.True
                                                                                      GHC.Prim.void#
                                                                              of
                                                                              { Unit# _ [Occ=Dead] ->
                                                                                    case
                                                                                        writeMutVar# [dt3_sbueL
                                                                                                      GHC.IO.Handle.Types.BufferListNil
                                                                                                      GHC.Prim.void#]
                                                                                    of
                                                                                    s2#_sbufc
                                                                                    { (##) ->
                                                                                          let {
                                                                                            sat_sbufd [Occ=Once]
                                                                                              :: GHC.IO.Handle.Types.Handle__
                                                                                            [LclId] =
                                                                                                CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbueC
                                                                                                                                    $dBufferedIO_sbueD
                                                                                                                                    $dTypeable_sbueE
                                                                                                                                    ds_sbueF
                                                                                                                                    wild1_sbueS
                                                                                                                                    dt_sbueH
                                                                                                                                    GHC.IO.Handle.Types.NoBuffering
                                                                                                                                    dt1_sbueJ
                                                                                                                                    dt2_sbueK
                                                                                                                                    dt3_sbueL
                                                                                                                                    ds3_sbueM
                                                                                                                                    ds4_sbueN
                                                                                                                                    ds5_sbueO
                                                                                                                                    ds6_sbueP
                                                                                                                                    ds7_sbueQ
                                                                                                                                    ds8_sbueR];
                                                                                          } in 
                                                                                            Unit# [sat_sbufd];
                                                                                    };
                                                                              };
                                                                        };
                                                              } in 
                                                                case wild1_sbueS of wild3_sbufe {
                                                                  __DEFAULT ->
                                                                      case
                                                                          writeMutVar# [dt3_sbueL
                                                                                        GHC.IO.Handle.Types.BufferListNil
                                                                                        GHC.Prim.void#]
                                                                      of
                                                                      s2#_sbuff
                                                                      { (##) ->
                                                                            let {
                                                                              sat_sbufg [Occ=Once]
                                                                                :: GHC.IO.Handle.Types.Handle__
                                                                              [LclId] =
                                                                                  CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sbueC
                                                                                                                      $dBufferedIO_sbueD
                                                                                                                      $dTypeable_sbueE
                                                                                                                      ds_sbueF
                                                                                                                      wild3_sbufe
                                                                                                                      dt_sbueH
                                                                                                                      mode_sbuex
                                                                                                                      dt1_sbueJ
                                                                                                                      dt2_sbueK
                                                                                                                      dt3_sbueL
                                                                                                                      ds3_sbueM
                                                                                                                      ds4_sbueN
                                                                                                                      ds5_sbueO
                                                                                                                      ds6_sbueP
                                                                                                                      ds7_sbueQ
                                                                                                                      ds8_sbueR];
                                                                            } in  Unit# [sat_sbufg];
                                                                      };
                                                                  GHC.IO.Handle.Types.ReadHandle ->
                                                                      $j1_sbuf2;
                                                                  GHC.IO.Handle.Types.ReadWriteHandle ->
                                                                      $j1_sbuf2;
                                                                };
                                                        };
                                                  };
                                        } in 
                                          case mode_sbuex of {
                                            __DEFAULT -> $w$j_sbueU GHC.Prim.void#;
                                            GHC.IO.Handle.Types.BlockBuffering ds9_sbufi [Occ=Once!] ->
                                                case ds9_sbufi of {
                                                  GHC.Base.Nothing -> $w$j_sbueU GHC.Prim.void#;
                                                  GHC.Base.Just n_sbufk [Occ=Once!] ->
                                                      case n_sbufk of {
                                                        GHC.Types.I# x_sbufm ->
                                                            case <=# [x_sbufm 0#] of {
                                                              __DEFAULT ->
                                                                  $w$j_sbueU GHC.Prim.void#;
                                                              1# ->
                                                                  GHC.IO.Handle.Internals.$wioe_bufsiz
                                                                      x_sbufm GHC.Prim.void#;
                                                            };
                                                      };
                                                };
                                          };
                              } in 
                                case mode_sbuex of {
                                  GHC.IO.Handle.Types.NoBuffering ->
                                      case ds2_sbueI of {
                                        __DEFAULT -> $j_sbueT;
                                        GHC.IO.Handle.Types.NoBuffering -> Unit# [wild_sbueB];
                                      };
                                  GHC.IO.Handle.Types.LineBuffering ->
                                      case ds2_sbueI of {
                                        __DEFAULT -> $j_sbueT;
                                        GHC.IO.Handle.Types.LineBuffering -> Unit# [wild_sbueB];
                                      };
                                  GHC.IO.Handle.Types.BlockBuffering a1_sbufs [Occ=Once!] ->
                                      case ds2_sbueI of {
                                        __DEFAULT -> $j_sbueT;
                                        GHC.IO.Handle.Types.BlockBuffering b1_sbufu [Occ=Once*!] ->
                                            case a1_sbufs of {
                                              GHC.Base.Nothing ->
                                                  case b1_sbufu of {
                                                    GHC.Base.Nothing -> Unit# [wild_sbueB];
                                                    GHC.Base.Just _ [Occ=Dead] -> $j_sbueT;
                                                  };
                                              GHC.Base.Just a2_sbufy [Occ=Once!] ->
                                                  case b1_sbufu of {
                                                    GHC.Base.Nothing -> $j_sbueT;
                                                    GHC.Base.Just b2_sbufA [Occ=Once!] ->
                                                        case a2_sbufy of {
                                                          GHC.Types.I# x_sbufC [Occ=Once] ->
                                                              case b2_sbufA of {
                                                                GHC.Types.I# y_sbufE [Occ=Once] ->
                                                                    case ==# [x_sbufC y_sbufE] of {
                                                                      __DEFAULT -> $j_sbueT;
                                                                      1# -> Unit# [wild_sbueB];
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          GHC.IO.Handle.Types.ClosedHandle ->
                              GHC.IO.Handle.Internals.ioe_closedHandle1 GHC.Prim.void#;
                        };
                  };
        } in 
          GHC.IO.Handle.Internals.withAllHandles__1
              GHC.IO.Handle.hSetBuffering2 handle_sbuew sat_sbufG GHC.Prim.void#;

GHC.IO.Handle.hSetBuffering
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Types.BufferMode -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.hSetBuffering1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.hIsEOF4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hIsEOF"#;

GHC.IO.Handle.hIsEOF3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hIsEOF4;

GHC.IO.Handle.hIsEOF2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_sbufH void_0E]
        case ds_sbufH of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       $dBufferedIO_sbufL [Occ=Once]
                                       _ [Occ=Dead]
                                       ds1_sbufN [Occ=Once]
                                       _ [Occ=Dead]
                                       dt_sbufP
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       dt2_sbufS [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt2_sbufS GHC.Prim.void#] of {
                Unit# ipv1_sbug2 [Occ=Once!] ->
                    case ipv1_sbug2 of {
                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           dt7_sbug8 [Occ=Once]
                                           dt8_sbug9 [Occ=Once] ->
                          case ==# [dt7_sbug8 dt8_sbug9] of {
                            __DEFAULT -> Unit# [GHC.Types.False];
                            1# ->
                                case readMutVar# [dt_sbufP GHC.Prim.void#] of {
                                  Unit# ipv3_sbugd [Occ=Once!] ->
                                      case ipv3_sbugd of wild2_sbuge {
                                        GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             dt12_sbugj [Occ=Once]
                                                             dt13_sbugk [Occ=Once] ->
                                            case ==# [dt12_sbugj dt13_sbugk] of {
                                              __DEFAULT -> Unit# [GHC.Types.False];
                                              1# ->
                                                  case
                                                      GHC.IO.BufferedIO.fillReadBuffer
                                                          $dBufferedIO_sbufL
                                                          ds1_sbufN
                                                          wild2_sbuge
                                                          GHC.Prim.void#
                                                  of
                                                  { Unit# ipv5_sbugo [Occ=Once!] ->
                                                        case ipv5_sbugo of {
                                                          (,) r_sbugq [Occ=Once!]
                                                              bbuf'_sbugr [Occ=Once] ->
                                                              case r_sbugq of {
                                                                GHC.Types.I# x_sbugt [Occ=Once!] ->
                                                                    case x_sbugt of {
                                                                      __DEFAULT ->
                                                                          case
                                                                              writeMutVar# [dt_sbufP
                                                                                            bbuf'_sbugr
                                                                                            GHC.Prim.void#]
                                                                          of
                                                                          s2#_sbugv
                                                                          { (##) ->
                                                                                Unit# [GHC.Types.False];
                                                                          };
                                                                      0# -> Unit# [GHC.Types.True];
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.hIsEOF1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [handle_sbugw void_0E]
        GHC.IO.Handle.Internals.wantReadableHandle_1
            GHC.IO.Handle.hIsEOF3
            handle_sbugw
            GHC.IO.Handle.hIsEOF2
            GHC.Prim.void#;

GHC.IO.Handle.hIsEOF
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] GHC.IO.Handle.hIsEOF1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.isEOF1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [void_0E]
        GHC.IO.Handle.Internals.wantReadableHandle_1
            GHC.IO.Handle.hIsEOF3
            GHC.IO.Handle.FD.stdin
            GHC.IO.Handle.hIsEOF2
            GHC.Prim.void#;

GHC.IO.Handle.isEOF :: GHC.Types.IO GHC.Types.Bool
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [void_0E] GHC.IO.Handle.isEOF1 GHC.Prim.void#;

lvl19_rbnX1 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hSetFileSize"#;

lvl20_rbnX2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl19_rbnX1;

GHC.IO.Handle.hSetFileSize1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Integer.Type.Integer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbugx size_sbugy void_0E]
        let {
          act_sbugA [Occ=OnceL*!, Dmd=<L,C(C1(U(U,U)))>]
            :: GHC.IO.Handle.Types.Handle__
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
          [LclId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
              sat-only [size_sbugy] \r [handle__sbugB void_0E]
                  case handle__sbugB of {
                    GHC.IO.Handle.Types.Handle__ $dIODevice_sbugE [Occ=Once*]
                                                 $dBufferedIO_sbugF [Occ=Once]
                                                 _ [Occ=Dead]
                                                 ds_sbugH
                                                 ds1_sbugI [Occ=Once!]
                                                 dt_sbugJ
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead] ->
                        case ds1_sbugI of {
                          __DEFAULT ->
                              case readMutVar# [dt_sbugJ GHC.Prim.void#] of {
                                Unit# ipv1_sbugX [Occ=Once!] ->
                                    case ipv1_sbugX of {
                                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           ds10_sbuh1 [Occ=Once!]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead] ->
                                          case ds10_sbuh1 of {
                                            GHC.IO.Buffer.ReadBuffer ->
                                                case
                                                    GHC.IO.Device.setSize
                                                        $dIODevice_sbugE
                                                        ds_sbugH
                                                        size_sbugy
                                                        GHC.Prim.void#
                                                of
                                                { Unit# _ [Occ=Dead] -> Unit# [GHC.Tuple.()];
                                                };
                                            GHC.IO.Buffer.WriteBuffer ->
                                                case readMutVar# [dt_sbugJ GHC.Prim.void#] of {
                                                  Unit# ipv3_sbuhb [Occ=Once!] ->
                                                      case ipv3_sbuhb of wild4_sbuhc {
                                                        GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                             _ [Occ=Dead]
                                                                             _ [Occ=Dead]
                                                                             _ [Occ=Dead]
                                                                             dt12_sbuhh [Occ=Once]
                                                                             dt13_sbuhi [Occ=Once] ->
                                                            case ==# [dt12_sbuhh dt13_sbuhi] of {
                                                              __DEFAULT ->
                                                                  case
                                                                      GHC.IO.BufferedIO.flushWriteBuffer
                                                                          $dBufferedIO_sbugF
                                                                          ds_sbugH
                                                                          wild4_sbuhc
                                                                          GHC.Prim.void#
                                                                  of
                                                                  { Unit# ipv5_sbuhm [Occ=Once] ->
                                                                        case
                                                                            writeMutVar# [dt_sbugJ
                                                                                          ipv5_sbuhm
                                                                                          GHC.Prim.void#]
                                                                        of
                                                                        s2#_sbuhn
                                                                        { (##) ->
                                                                              case
                                                                                  GHC.IO.Device.setSize
                                                                                      $dIODevice_sbugE
                                                                                      ds_sbugH
                                                                                      size_sbugy
                                                                                      GHC.Prim.void#
                                                                              of
                                                                              { Unit# _ [Occ=Dead] ->
                                                                                    Unit# [GHC.Tuple.()];
                                                                              };
                                                                        };
                                                                  };
                                                              1# ->
                                                                  case
                                                                      GHC.IO.Device.setSize
                                                                          $dIODevice_sbugE
                                                                          ds_sbugH
                                                                          size_sbugy
                                                                          GHC.Prim.void#
                                                                  of
                                                                  { Unit# _ [Occ=Dead] ->
                                                                        Unit# [GHC.Tuple.()];
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                          GHC.IO.Handle.Types.ClosedHandle ->
                              GHC.IO.Handle.Internals.ioe_closedHandle1 GHC.Prim.void#;
                          GHC.IO.Handle.Types.SemiClosedHandle ->
                              GHC.IO.Handle.Internals.ioe_semiclosedHandle1 GHC.Prim.void#;
                        };
                  };
        } in 
          case handle_sbugx of wild_sbuhu {
            GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbuhw ->
                case getMaskingState# [GHC.Prim.void#] of {
                  Unit# ipv1_sbuhz [Occ=Once!] ->
                      let {
                        io_sbuhA [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                          :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                        [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                            [act_sbugA wild_sbuhu dt_sbuhw] \r [void_0E]
                                let {
                                  sat_sbuhI [Occ=Once]
                                    :: GHC.IO.Handle.Types.Handle__
                                       -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, ())
                                  [LclId] =
                                      [act_sbugA] \r [h__sbuhC void_0E]
                                          case act_sbugA h__sbuhC GHC.Prim.void# of {
                                            Unit# ipv3_sbuhG [Occ=Once] ->
                                                let {
                                                  sat_sbuhH [Occ=Once]
                                                    :: (GHC.IO.Handle.Types.Handle__, ())
                                                  [LclId] =
                                                      CCCS (,)! [h__sbuhC ipv3_sbuhG];
                                                } in  Unit# [sat_sbuhH];
                                          };
                                } in 
                                  case
                                      GHC.IO.Handle.Internals.$wdo_operation
                                          lvl20_rbnX2 wild_sbuhu sat_sbuhI dt_sbuhw GHC.Prim.void#
                                  of
                                  { Unit# ipv3_sbuhL [Occ=Once!] ->
                                        case ipv3_sbuhL of {
                                          (,) h'_sbuhN [Occ=Once] v_sbuhO [Occ=Once] ->
                                              case
                                                  putMVar# [dt_sbuhw h'_sbuhN GHC.Prim.void#]
                                              of
                                              s2#_sbuhP
                                              { (##) -> Unit# [v_sbuhO];
                                              };
                                        };
                                  };
                      } in 
                        case ipv1_sbuhz of {
                          __DEFAULT -> io_sbuhA GHC.Prim.void#;
                          0# -> maskAsyncExceptions# [io_sbuhA GHC.Prim.void#];
                        };
                };
            GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                             dt_sbuhS
                                             _ [Occ=Dead] ->
                case getMaskingState# [GHC.Prim.void#] of {
                  Unit# ipv1_sbuhW [Occ=Once!] ->
                      let {
                        io_sbuhX [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                          :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                        [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                            [act_sbugA wild_sbuhu dt_sbuhS] \r [void_0E]
                                let {
                                  sat_sbui5 [Occ=Once]
                                    :: GHC.IO.Handle.Types.Handle__
                                       -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, ())
                                  [LclId] =
                                      [act_sbugA] \r [h__sbuhZ void_0E]
                                          case act_sbugA h__sbuhZ GHC.Prim.void# of {
                                            Unit# ipv3_sbui3 [Occ=Once] ->
                                                let {
                                                  sat_sbui4 [Occ=Once]
                                                    :: (GHC.IO.Handle.Types.Handle__, ())
                                                  [LclId] =
                                                      CCCS (,)! [h__sbuhZ ipv3_sbui3];
                                                } in  Unit# [sat_sbui4];
                                          };
                                } in 
                                  case
                                      GHC.IO.Handle.Internals.$wdo_operation
                                          lvl20_rbnX2 wild_sbuhu sat_sbui5 dt_sbuhS GHC.Prim.void#
                                  of
                                  { Unit# ipv3_sbui8 [Occ=Once!] ->
                                        case ipv3_sbui8 of {
                                          (,) h'_sbuia [Occ=Once] v_sbuib [Occ=Once] ->
                                              case
                                                  putMVar# [dt_sbuhS h'_sbuia GHC.Prim.void#]
                                              of
                                              s2#_sbuic
                                              { (##) -> Unit# [v_sbuib];
                                              };
                                        };
                                  };
                      } in 
                        case ipv1_sbuhW of {
                          __DEFAULT -> io_sbuhX GHC.Prim.void#;
                          0# -> maskAsyncExceptions# [io_sbuhX GHC.Prim.void#];
                        };
                };
          };

GHC.IO.Handle.hSetFileSize
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Integer.Type.Integer -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.hSetFileSize1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.hFileSize9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hFileSize"#;

GHC.IO.Handle.hFileSize8 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hFileSize9;

GHC.IO.Handle.hFileSize7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "not a regular file"#;

GHC.IO.Handle.hFileSize6 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hFileSize7;

GHC.IO.Handle.hFileSize5 :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.InappropriateType
                                             GHC.IO.Handle.hFileSize8
                                             GHC.IO.Handle.hFileSize6
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Handle.hFileSize4 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Handle.hFileSize5;

sat_sbuie :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

sat_sbuif :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sbuie GHC.Types.[]];

GHC.IO.Handle.hFileSize10 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.False sat_sbuif;

GHC.IO.Handle.hFileSize3
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Integer.Type.Integer #)
[GblId, Arity=2, Str=<S,1*U><S,U>m, Unf=OtherCon []] =
    [] \r [handle__sbuig void_0E]
        case handle__sbuig of {
          GHC.IO.Handle.Types.Handle__ $dIODevice_sbuij [Occ=Once]
                                       $dBufferedIO_sbuik [Occ=Once]
                                       _ [Occ=Dead]
                                       ds_sbuim
                                       ds1_sbuin [Occ=Once!]
                                       dt_sbuio
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds1_sbuin of {
                __DEFAULT ->
                    case readMutVar# [dt_sbuio GHC.Prim.void#] of {
                      Unit# ipv1_sbuiC [Occ=Once!] ->
                          case ipv1_sbuiC of {
                            GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 ds10_sbuiG [Occ=Once!]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead] ->
                                let-no-escape {
                                  $w$j_sbuiK [InlPrag=NOUSERINLINE[0],
                                              Occ=Once*!T[1],
                                              Dmd=<L,1*C1(U(U,U))>]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                             GHC.Integer.Type.Integer #)
                                  [LclId[JoinId(1)], Arity=1, Str=<S,U>m, Unf=OtherCon []] =
                                      sat-only [$dIODevice_sbuij ds_sbuim] \r [void_0E]
                                          case
                                              GHC.IO.Device.getSize
                                                  $dIODevice_sbuij ds_sbuim GHC.Prim.void#
                                          of
                                          ds12_sbuiM
                                          { Unit# ipv3_sbuiO [Occ=Once] ->
                                                case
                                                    GHC.Integer.Type.neqInteger#
                                                        ipv3_sbuiO GHC.IO.Handle.hFileSize10
                                                of
                                                { __DEFAULT ->
                                                      raiseIO# [GHC.IO.Handle.hFileSize4
                                                                GHC.Prim.void#];
                                                  1# -> Unit# [ipv3_sbuiO];
                                                };
                                          };
                                } in 
                                  case ds10_sbuiG of {
                                    GHC.IO.Buffer.ReadBuffer -> $w$j_sbuiK GHC.Prim.void#;
                                    GHC.IO.Buffer.WriteBuffer ->
                                        case readMutVar# [dt_sbuio GHC.Prim.void#] of {
                                          Unit# ipv3_sbuiT [Occ=Once!] ->
                                              case ipv3_sbuiT of wild4_sbuiU {
                                                GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     dt12_sbuiZ [Occ=Once]
                                                                     dt13_sbuj0 [Occ=Once] ->
                                                    case ==# [dt12_sbuiZ dt13_sbuj0] of {
                                                      __DEFAULT ->
                                                          case
                                                              GHC.IO.BufferedIO.flushWriteBuffer
                                                                  $dBufferedIO_sbuik
                                                                  ds_sbuim
                                                                  wild4_sbuiU
                                                                  GHC.Prim.void#
                                                          of
                                                          { Unit# ipv5_sbuj4 [Occ=Once] ->
                                                                case
                                                                    writeMutVar# [dt_sbuio
                                                                                  ipv5_sbuj4
                                                                                  GHC.Prim.void#]
                                                                of
                                                                s2#_sbuj5
                                                                { (##) -> $w$j_sbuiK GHC.Prim.void#;
                                                                };
                                                          };
                                                      1# -> $w$j_sbuiK GHC.Prim.void#;
                                                    };
                                              };
                                        };
                                  };
                          };
                    };
                GHC.IO.Handle.Types.ClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_closedHandle1 GHC.Prim.void#;
                GHC.IO.Handle.Types.SemiClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_semiclosedHandle1 GHC.Prim.void#;
              };
        };

GHC.IO.Handle.hFileSize2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, GHC.Integer.Type.Integer) #)
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [h__sbuj6 void_0E]
        case GHC.IO.Handle.hFileSize3 h__sbuj6 GHC.Prim.void# of {
          Unit# ipv1_sbuja [Occ=Once] ->
              let {
                sat_sbujb [Occ=Once]
                  :: (GHC.IO.Handle.Types.Handle__, GHC.Integer.Type.Integer)
                [LclId] =
                    CCCS (,)! [h__sbuj6 ipv1_sbuja];
              } in  Unit# [sat_sbujb];
        };

GHC.IO.Handle.hFileSize1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Integer.Type.Integer #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbujc void_0E]
        case handle_sbujc of wild_sbuje {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbujg ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sbujj [Occ=Once!] ->
                    let {
                      io_sbujk [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 GHC.Integer.Type.Integer #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbuje dt_sbujg] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hFileSize8
                                      wild_sbuje
                                      GHC.IO.Handle.hFileSize2
                                      dt_sbujg
                                      GHC.Prim.void#
                              of
                              { Unit# ipv3_sbujo [Occ=Once!] ->
                                    case ipv3_sbujo of {
                                      (,) h'_sbujq [Occ=Once] v_sbujr [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbujg h'_sbujq GHC.Prim.void#]
                                          of
                                          s2#_sbujs
                                          { (##) -> Unit# [v_sbujr];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbujj of {
                        __DEFAULT -> io_sbujk GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sbujk GHC.Prim.void#];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sbujv
                                           _ [Occ=Dead] ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sbujz [Occ=Once!] ->
                    let {
                      io_sbujA [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 GHC.Integer.Type.Integer #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbuje dt_sbujv] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hFileSize8
                                      wild_sbuje
                                      GHC.IO.Handle.hFileSize2
                                      dt_sbujv
                                      GHC.Prim.void#
                              of
                              { Unit# ipv3_sbujE [Occ=Once!] ->
                                    case ipv3_sbujE of {
                                      (,) h'_sbujG [Occ=Once] v_sbujH [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbujv h'_sbujG GHC.Prim.void#]
                                          of
                                          s2#_sbujI
                                          { (##) -> Unit# [v_sbujH];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbujz of {
                        __DEFAULT -> io_sbujA GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sbujA GHC.Prim.void#];
                      };
              };
        };

GHC.IO.Handle.hFileSize
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Types.IO GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.hFileSize1 eta_B2 GHC.Prim.void#;

lvl21_rbnX3
  :: GHC.Base.Maybe
       (GHC.IO.FilePath
        -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ())
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.IO.Handle.Internals.handleFinalizer1];

GHC.IO.Handle.hDuplicateTo1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h1_sbujK h2_sbujL void_0E]
        case h1_sbujK of wild_sbujN {
          GHC.IO.Handle.Types.FileHandle path_sbujO [Occ=OnceL]
                                         dt_sbujP [Occ=OnceL] ->
              case h2_sbujL of wild1_sbujQ {
                GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt1_sbujS [Occ=Once] ->
                    let {
                      sat_sbuk5 [Occ=Once]
                        :: GHC.IO.Handle.Types.Handle__
                           -> GHC.Types.IO GHC.IO.Handle.Types.Handle__
                      [LclId] =
                          [wild_sbujN path_sbujO dt_sbujP] \r [h2__sbujT void_0E]
                              case
                                  GHC.IO.Handle.Internals.hClose_help1 h2__sbujT GHC.Prim.void#
                              of
                              { Unit# _ [Occ=Dead] ->
                                    let {
                                      sat_sbuk4 [Occ=Once]
                                        :: GHC.IO.Handle.Types.Handle__
                                           -> GHC.Types.IO
                                                (GHC.IO.Handle.Types.Handle__,
                                                 GHC.IO.Handle.Types.Handle__)
                                      [LclId] =
                                          [wild_sbujN path_sbujO h2__sbujT] \r [h__sbujY void_0E]
                                              case
                                                  dupHandleTo_rbnWN
                                                      path_sbujO
                                                      wild_sbujN
                                                      GHC.Base.Nothing
                                                      h2__sbujT
                                                      h__sbujY
                                                      lvl21_rbnX3
                                                      GHC.Prim.void#
                                              of
                                              { Unit# ipv3_sbuk2 [Occ=Once] ->
                                                    let {
                                                      sat_sbuk3 [Occ=Once]
                                                        :: (GHC.IO.Handle.Types.Handle__,
                                                            GHC.IO.Handle.Types.Handle__)
                                                      [LclId] =
                                                          CCCS (,)! [h__sbujY ipv3_sbuk2];
                                                    } in  Unit# [sat_sbuk3];
                                              };
                                    } in 
                                      GHC.IO.Handle.Internals.$wwithHandle'
                                          lvl1_rbnWC wild_sbujN dt_sbujP sat_sbuk4 GHC.Prim.void#;
                              };
                    } in 
                      GHC.IO.Handle.Internals.$wwithHandle__'
                          lvl1_rbnWC wild1_sbujQ dt1_sbujS sat_sbuk5 GHC.Prim.void#;
                GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead] ->
                    ioe_dupHandlesNotCompatible_rbnWF wild_sbujN GHC.Prim.void#;
              };
          GHC.IO.Handle.Types.DuplexHandle path_sbuk9
                                           dt_sbuka [Occ=OnceL]
                                           dt1_sbukb ->
              case h2_sbujL of wild1_sbukc {
                GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] _ [Occ=Dead] ->
                    ioe_dupHandlesNotCompatible_rbnWF wild_sbujN GHC.Prim.void#;
                GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                 dt2_sbukg [Occ=Once]
                                                 dt3_sbukh [Occ=Once] ->
                    let {
                      sat_sbuku [Occ=Once]
                        :: GHC.IO.Handle.Types.Handle__
                           -> GHC.Types.IO GHC.IO.Handle.Types.Handle__
                      [LclId] =
                          [wild_sbujN path_sbuk9 dt1_sbukb] \r [w2__sbuki void_0E]
                              case
                                  GHC.IO.Handle.Internals.hClose_help1 w2__sbuki GHC.Prim.void#
                              of
                              { Unit# _ [Occ=Dead] ->
                                    let {
                                      sat_sbukt [Occ=Once]
                                        :: GHC.IO.Handle.Types.Handle__
                                           -> GHC.Types.IO
                                                (GHC.IO.Handle.Types.Handle__,
                                                 GHC.IO.Handle.Types.Handle__)
                                      [LclId] =
                                          [wild_sbujN path_sbuk9 w2__sbuki] \r [h__sbukn void_0E]
                                              case
                                                  dupHandleTo_rbnWN
                                                      path_sbuk9
                                                      wild_sbujN
                                                      GHC.Base.Nothing
                                                      w2__sbuki
                                                      h__sbukn
                                                      lvl21_rbnX3
                                                      GHC.Prim.void#
                                              of
                                              { Unit# ipv3_sbukr [Occ=Once] ->
                                                    let {
                                                      sat_sbuks [Occ=Once]
                                                        :: (GHC.IO.Handle.Types.Handle__,
                                                            GHC.IO.Handle.Types.Handle__)
                                                      [LclId] =
                                                          CCCS (,)! [h__sbukn ipv3_sbukr];
                                                    } in  Unit# [sat_sbuks];
                                              };
                                    } in 
                                      GHC.IO.Handle.Internals.$wwithHandle'
                                          lvl1_rbnWC wild_sbujN dt1_sbukb sat_sbukt GHC.Prim.void#;
                              };
                    } in 
                      case
                          GHC.IO.Handle.Internals.$wwithHandle__'
                              lvl1_rbnWC wild1_sbukc dt3_sbukh sat_sbuku GHC.Prim.void#
                      of
                      { Unit# _ [Occ=Dead] ->
                            let {
                              w1_sbuky [Occ=OnceL] :: GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
                              [LclId, Unf=OtherCon []] =
                                  CCCS GHC.MVar.MVar! [dt1_sbukb]; } in
                            let {
                              lvl48_sbukz [Occ=OnceL]
                                :: GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
                              [LclId, Unf=OtherCon []] =
                                  CCCS GHC.Base.Just! [w1_sbuky]; } in
                            let {
                              sat_sbukM [Occ=Once]
                                :: GHC.IO.Handle.Types.Handle__
                                   -> GHC.Types.IO GHC.IO.Handle.Types.Handle__
                              [LclId] =
                                  [wild_sbujN path_sbuk9 dt_sbuka lvl48_sbukz] \r [r2__sbukA
                                                                                   void_0E]
                                      case
                                          GHC.IO.Handle.Internals.hClose_help1
                                              r2__sbukA GHC.Prim.void#
                                      of
                                      { Unit# _ [Occ=Dead] ->
                                            let {
                                              sat_sbukL [Occ=Once]
                                                :: GHC.IO.Handle.Types.Handle__
                                                   -> GHC.Types.IO
                                                        (GHC.IO.Handle.Types.Handle__,
                                                         GHC.IO.Handle.Types.Handle__)
                                              [LclId] =
                                                  [wild_sbujN
                                                   path_sbuk9
                                                   lvl48_sbukz
                                                   r2__sbukA] \r [h__sbukF void_0E]
                                                      case
                                                          dupHandleTo_rbnWN
                                                              path_sbuk9
                                                              wild_sbujN
                                                              lvl48_sbukz
                                                              r2__sbukA
                                                              h__sbukF
                                                              GHC.Base.Nothing
                                                              GHC.Prim.void#
                                                      of
                                                      { Unit# ipv5_sbukJ [Occ=Once] ->
                                                            let {
                                                              sat_sbukK [Occ=Once]
                                                                :: (GHC.IO.Handle.Types.Handle__,
                                                                    GHC.IO.Handle.Types.Handle__)
                                                              [LclId] =
                                                                  CCCS (,)! [h__sbukF ipv5_sbukJ];
                                                            } in  Unit# [sat_sbukK];
                                                      };
                                            } in 
                                              GHC.IO.Handle.Internals.$wwithHandle'
                                                  lvl1_rbnWC
                                                  wild_sbujN
                                                  dt_sbuka
                                                  sat_sbukL
                                                  GHC.Prim.void#;
                                      };
                            } in 
                              GHC.IO.Handle.Internals.$wwithHandle__'
                                  lvl1_rbnWC wild1_sbukc dt2_sbukg sat_sbukM GHC.Prim.void#;
                      };
              };
        };

GHC.IO.Handle.hDuplicateTo
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Types.Handle -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,1*U><S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.hDuplicateTo1 eta_B3 eta_B2 GHC.Prim.void#;

lvl22_rbnX4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hDuplicate"#;

lvl23_rbnX5 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl22_rbnX4;

lvl24_rbnX6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Pattern match failure in do expression at GHC/IO/Handle.hs:626:3-33"#;

lvl25_rbnX7
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    sat-only [] \r [void_0E]
        case GHC.CString.unpackCString# lvl24_rbnX6 of sat_sbukO {
          __DEFAULT -> GHC.IO.failIO1 sat_sbukO GHC.Prim.void#;
        };

lvl26_rbnX8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Pattern match failure in do expression at GHC/IO/Handle.hs:623:3-35"#;

lvl27_rbnX9
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    sat-only [] \r [void_0E]
        case GHC.CString.unpackCString# lvl26_rbnX8 of sat_sbukQ {
          __DEFAULT -> GHC.IO.failIO1 sat_sbukQ GHC.Prim.void#;
        };

GHC.IO.Handle.hDuplicate1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h_sbukR void_0E]
        case h_sbukR of wild_sbukT {
          GHC.IO.Handle.Types.FileHandle path_sbukU [Occ=OnceL]
                                         dt_sbukV [Occ=Once] ->
              let {
                sat_sbulp [Occ=Once]
                  :: GHC.IO.Handle.Types.Handle__
                     -> GHC.Types.IO
                          (GHC.IO.Handle.Types.Handle__, GHC.IO.Handle.Types.Handle)
                [LclId] =
                    [path_sbukU] \r [h__sbukW void_0E]
                        case h__sbukW of wild1_sbukY {
                          GHC.IO.Handle.Types.Handle__ $dIODevice_sbukZ
                                                       $dBufferedIO_sbul0 [Occ=Once]
                                                       $dTypeable_sbul1 [Occ=Once]
                                                       ds_sbul2 [Occ=Once]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead] ->
                              case
                                  GHC.IO.Handle.Internals.flushBuffer1 wild1_sbukY GHC.Prim.void#
                              of
                              { Unit# _ [Occ=Dead] ->
                                    case
                                        GHC.IO.Device.dup $dIODevice_sbukZ ds_sbul2 GHC.Prim.void#
                                    of
                                    { Unit# ipv3_sbulk [Occ=Once] ->
                                          case
                                              dupHandle__rbnWK
                                                  $dIODevice_sbukZ
                                                  $dBufferedIO_sbul0
                                                  $dTypeable_sbul1
                                                  ipv3_sbulk
                                                  path_sbukU
                                                  GHC.Base.Nothing
                                                  wild1_sbukY
                                                  lvl21_rbnX3
                                                  GHC.Prim.void#
                                          of
                                          { Unit# ipv5_sbuln [Occ=Once] ->
                                                let {
                                                  sat_sbulo [Occ=Once]
                                                    :: (GHC.IO.Handle.Types.Handle__,
                                                        GHC.IO.Handle.Types.Handle)
                                                  [LclId] =
                                                      CCCS (,)! [wild1_sbukY ipv5_sbuln];
                                                } in  Unit# [sat_sbulo];
                                          };
                                    };
                              };
                        };
              } in 
                GHC.IO.Handle.Internals.$wwithHandle'
                    lvl23_rbnX5 wild_sbukT dt_sbukV sat_sbulp GHC.Prim.void#;
          GHC.IO.Handle.Types.DuplexHandle path_sbulq
                                           dt_sbulr [Occ=Once]
                                           dt1_sbuls [Occ=Once] ->
              let {
                sat_sbulW [Occ=Once]
                  :: GHC.IO.Handle.Types.Handle__
                     -> GHC.Types.IO
                          (GHC.IO.Handle.Types.Handle__, GHC.IO.Handle.Types.Handle)
                [LclId] =
                    [path_sbulq] \r [h__sbult void_0E]
                        case h__sbult of wild1_sbulv {
                          GHC.IO.Handle.Types.Handle__ $dIODevice_sbulw
                                                       $dBufferedIO_sbulx [Occ=Once]
                                                       $dTypeable_sbuly [Occ=Once]
                                                       ds_sbulz [Occ=Once]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead]
                                                       _ [Occ=Dead] ->
                              case
                                  GHC.IO.Handle.Internals.flushBuffer1 wild1_sbulv GHC.Prim.void#
                              of
                              { Unit# _ [Occ=Dead] ->
                                    case
                                        GHC.IO.Device.dup $dIODevice_sbulw ds_sbulz GHC.Prim.void#
                                    of
                                    { Unit# ipv3_sbulR [Occ=Once] ->
                                          case
                                              dupHandle__rbnWK
                                                  $dIODevice_sbulw
                                                  $dBufferedIO_sbulx
                                                  $dTypeable_sbuly
                                                  ipv3_sbulR
                                                  path_sbulq
                                                  GHC.Base.Nothing
                                                  wild1_sbulv
                                                  lvl21_rbnX3
                                                  GHC.Prim.void#
                                          of
                                          { Unit# ipv5_sbulU [Occ=Once] ->
                                                let {
                                                  sat_sbulV [Occ=Once]
                                                    :: (GHC.IO.Handle.Types.Handle__,
                                                        GHC.IO.Handle.Types.Handle)
                                                  [LclId] =
                                                      CCCS (,)! [wild1_sbulv ipv5_sbulU];
                                                } in  Unit# [sat_sbulV];
                                          };
                                    };
                              };
                        };
              } in 
                case
                    GHC.IO.Handle.Internals.$wwithHandle'
                        lvl23_rbnX5 wild_sbukT dt1_sbuls sat_sbulW GHC.Prim.void#
                of
                { Unit# ipv1_sbulZ [Occ=Once!] ->
                      case ipv1_sbulZ of {
                        GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt2_sbum2 ->
                            let {
                              write_m_sbum3 [Occ=OnceL]
                                :: GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
                              [LclId, Unf=OtherCon []] =
                                  CCCS GHC.MVar.MVar! [dt2_sbum2]; } in
                            let {
                              lvl48_sbum4 [Occ=OnceL]
                                :: GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
                              [LclId, Unf=OtherCon []] =
                                  CCCS GHC.Base.Just! [write_m_sbum3]; } in
                            let {
                              sat_sbumT [Occ=Once]
                                :: GHC.IO.Handle.Types.Handle__
                                   -> GHC.Types.IO
                                        (GHC.IO.Handle.Types.Handle__, GHC.IO.Handle.Types.Handle)
                              [LclId] =
                                  [wild_sbukT path_sbulq dt2_sbum2 lvl48_sbum4] \r [h__sbum5
                                                                                    void_0E]
                                      case h__sbum5 of wild2_sbum7 {
                                        GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead] ->
                                            case
                                                GHC.IO.Handle.Internals.flushBuffer1
                                                    wild2_sbum7 GHC.Prim.void#
                                            of
                                            { Unit# _ [Occ=Dead] ->
                                                  let {
                                                    sat_sbumO [Occ=Once]
                                                      :: GHC.IO.Handle.Types.Handle__
                                                         -> GHC.Types.IO
                                                              (GHC.IO.Handle.Types.Handle__,
                                                               GHC.IO.Handle.Types.Handle)
                                                    [LclId] =
                                                        [path_sbulq
                                                         lvl48_sbum4
                                                         wild2_sbum7] \r [h_1_sbumr void_0E]
                                                            case h_1_sbumr of wild3_sbumt {
                                                              GHC.IO.Handle.Types.Handle__ $dIODevice1_sbumu [Occ=Once]
                                                                                           $dBufferedIO1_sbumv [Occ=Once]
                                                                                           $dTypeable1_sbumw [Occ=Once]
                                                                                           ds12_sbumx [Occ=Once]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead] ->
                                                                  case
                                                                      dupHandle__rbnWK
                                                                          $dIODevice1_sbumu
                                                                          $dBufferedIO1_sbumv
                                                                          $dTypeable1_sbumw
                                                                          ds12_sbumx
                                                                          path_sbulq
                                                                          lvl48_sbum4
                                                                          wild2_sbum7
                                                                          GHC.Base.Nothing
                                                                          GHC.Prim.void#
                                                                  of
                                                                  { Unit# ipv5_sbumM [Occ=Once] ->
                                                                        let {
                                                                          sat_sbumN [Occ=Once]
                                                                            :: (GHC.IO.Handle.Types.Handle__,
                                                                                GHC.IO.Handle.Types.Handle)
                                                                          [LclId] =
                                                                              CCCS (,)! [wild3_sbumt
                                                                                         ipv5_sbumM];
                                                                        } in  Unit# [sat_sbumN];
                                                                  };
                                                            };
                                                  } in 
                                                    case
                                                        GHC.IO.Handle.Internals.$wwithHandle'
                                                            lvl7_rbnWP
                                                            wild_sbukT
                                                            dt2_sbum2
                                                            sat_sbumO
                                                            GHC.Prim.void#
                                                    of
                                                    { Unit# ipv5_sbumR [Occ=Once] ->
                                                          let {
                                                            sat_sbumS [Occ=Once]
                                                              :: (GHC.IO.Handle.Types.Handle__,
                                                                  GHC.IO.Handle.Types.Handle)
                                                            [LclId] =
                                                                CCCS (,)! [wild2_sbum7 ipv5_sbumR];
                                                          } in  Unit# [sat_sbumS];
                                                    };
                                            };
                                      };
                            } in 
                              case
                                  GHC.IO.Handle.Internals.$wwithHandle'
                                      lvl23_rbnX5 wild_sbukT dt_sbulr sat_sbumT GHC.Prim.void#
                              of
                              { Unit# ipv3_sbumW [Occ=Once!] ->
                                    case ipv3_sbumW of {
                                      GHC.IO.Handle.Types.FileHandle _ [Occ=Dead]
                                                                     dt3_sbumZ [Occ=Once] ->
                                          let {
                                            sat_sbun0 [Occ=Once] :: GHC.IO.Handle.Types.Handle
                                            [LclId] =
                                                CCCS GHC.IO.Handle.Types.DuplexHandle! [path_sbulq
                                                                                        dt3_sbumZ
                                                                                        dt2_sbum2];
                                          } in  Unit# [sat_sbun0];
                                      GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                          lvl25_rbnX7 GHC.Prim.void#;
                                    };
                              };
                        GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                         _ [Occ=Dead]
                                                         _ [Occ=Dead] ->
                            lvl27_rbnX9 GHC.Prim.void#;
                      };
                };
        };

GHC.IO.Handle.hDuplicate
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.hDuplicate1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.hGetEcho4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hGetEcho"#;

GHC.IO.Handle.hGetEcho3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hGetEcho4;

GHC.IO.Handle.hGetEcho2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool) #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h__sbun7 void_0E]
        case h__sbun7 of wild_sbun9 {
          GHC.IO.Handle.Types.Handle__ $dIODevice_sbuna [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds_sbund [Occ=Once]
                                       ds1_sbune [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds1_sbune of {
                __DEFAULT ->
                    case
                        GHC.IO.Device.getEcho $dIODevice_sbuna ds_sbund GHC.Prim.void#
                    of
                    { Unit# ipv1_sbunt [Occ=Once] ->
                          let {
                            sat_sbunu [Occ=Once]
                              :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                            [LclId] =
                                CCCS (,)! [wild_sbun9 ipv1_sbunt];
                          } in  Unit# [sat_sbunu];
                    };
                GHC.IO.Handle.Types.ClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_closedHandle1 GHC.Prim.void#;
              };
        };

GHC.IO.Handle.hGetEcho1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbunw void_0E]
        case GHC.IO.Handle.hGetEcho5 handle_sbunw GHC.Prim.void# of {
          Unit# ipv1_sbunA [Occ=Once!] ->
              case ipv1_sbunA of {
                GHC.Types.False -> Unit# [GHC.Types.False];
                GHC.Types.True ->
                    case handle_sbunw of wild1_sbunC {
                      GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbunE ->
                          case getMaskingState# [GHC.Prim.void#] of {
                            Unit# ipv3_sbunH [Occ=Once!] ->
                                let {
                                  io_sbunI [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                                  [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                      [wild1_sbunC dt_sbunE] \r [void_0E]
                                          case
                                              GHC.IO.Handle.Internals.$wdo_operation
                                                  GHC.IO.Handle.hGetEcho3
                                                  wild1_sbunC
                                                  GHC.IO.Handle.hGetEcho2
                                                  dt_sbunE
                                                  GHC.Prim.void#
                                          of
                                          { Unit# ipv5_sbunM [Occ=Once!] ->
                                                case ipv5_sbunM of {
                                                  (,) h'_sbunO [Occ=Once] v_sbunP [Occ=Once] ->
                                                      case
                                                          putMVar# [dt_sbunE
                                                                    h'_sbunO
                                                                    GHC.Prim.void#]
                                                      of
                                                      s2#_sbunQ
                                                      { (##) -> Unit# [v_sbunP];
                                                      };
                                                };
                                          };
                                } in 
                                  case ipv3_sbunH of {
                                    __DEFAULT -> io_sbunI GHC.Prim.void#;
                                    0# -> maskAsyncExceptions# [io_sbunI GHC.Prim.void#];
                                  };
                          };
                      GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                       dt_sbunT
                                                       _ [Occ=Dead] ->
                          case getMaskingState# [GHC.Prim.void#] of {
                            Unit# ipv3_sbunX [Occ=Once!] ->
                                let {
                                  io_sbunY [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                                  [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                      [wild1_sbunC dt_sbunT] \r [void_0E]
                                          case
                                              GHC.IO.Handle.Internals.$wdo_operation
                                                  GHC.IO.Handle.hGetEcho3
                                                  wild1_sbunC
                                                  GHC.IO.Handle.hGetEcho2
                                                  dt_sbunT
                                                  GHC.Prim.void#
                                          of
                                          { Unit# ipv5_sbuo2 [Occ=Once!] ->
                                                case ipv5_sbuo2 of {
                                                  (,) h'_sbuo4 [Occ=Once] v_sbuo5 [Occ=Once] ->
                                                      case
                                                          putMVar# [dt_sbunT
                                                                    h'_sbuo4
                                                                    GHC.Prim.void#]
                                                      of
                                                      s2#_sbuo6
                                                      { (##) -> Unit# [v_sbuo5];
                                                      };
                                                };
                                          };
                                } in 
                                  case ipv3_sbunX of {
                                    __DEFAULT -> io_sbunY GHC.Prim.void#;
                                    0# -> maskAsyncExceptions# [io_sbunY GHC.Prim.void#];
                                  };
                          };
                    };
              };
        };

GHC.IO.Handle.hGetEcho
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.hGetEcho1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.hSetEcho3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hSetEcho"#;

GHC.IO.Handle.hSetEcho2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hSetEcho3;

GHC.IO.Handle.hSetEcho1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Types.Bool
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbuo8 on_sbuo9 void_0E]
        case GHC.IO.Handle.hGetEcho5 handle_sbuo8 GHC.Prim.void# of {
          Unit# ipv1_sbuod [Occ=Once!] ->
              case ipv1_sbuod of {
                GHC.Types.False -> Unit# [GHC.Tuple.()];
                GHC.Types.True ->
                    case handle_sbuo8 of wild1_sbuof {
                      GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbuoh ->
                          case getMaskingState# [GHC.Prim.void#] of {
                            Unit# ipv3_sbuok [Occ=Once!] ->
                                let {
                                  io_sbuol [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                  [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                      [on_sbuo9 wild1_sbuof dt_sbuoh] \r [void_0E]
                                          let {
                                            sat_sbuoM [Occ=Once]
                                              :: GHC.IO.Handle.Types.Handle__
                                                 -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, ())
                                            [LclId] =
                                                [on_sbuo9] \r [h__sbuon void_0E]
                                                    case h__sbuon of wild2_sbuop {
                                                      GHC.IO.Handle.Types.Handle__ $dIODevice_sbuoq [Occ=Once]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   ds3_sbuot [Occ=Once]
                                                                                   ds4_sbuou [Occ=Once!]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead] ->
                                                          case ds4_sbuou of {
                                                            __DEFAULT ->
                                                                case
                                                                    GHC.IO.Device.setEcho
                                                                        $dIODevice_sbuoq
                                                                        ds3_sbuot
                                                                        on_sbuo9
                                                                        GHC.Prim.void#
                                                                of
                                                                { Unit# ipv5_sbuoJ [Occ=Once] ->
                                                                      let {
                                                                        sat_sbuoK [Occ=Once]
                                                                          :: (GHC.IO.Handle.Types.Handle__,
                                                                              ())
                                                                        [LclId] =
                                                                            CCCS (,)! [wild2_sbuop
                                                                                       ipv5_sbuoJ];
                                                                      } in  Unit# [sat_sbuoK];
                                                                };
                                                            GHC.IO.Handle.Types.ClosedHandle ->
                                                                GHC.IO.Handle.Internals.ioe_closedHandle1
                                                                    GHC.Prim.void#;
                                                          };
                                                    };
                                          } in 
                                            case
                                                GHC.IO.Handle.Internals.$wdo_operation
                                                    GHC.IO.Handle.hSetEcho2
                                                    wild1_sbuof
                                                    sat_sbuoM
                                                    dt_sbuoh
                                                    GHC.Prim.void#
                                            of
                                            { Unit# ipv5_sbuoP [Occ=Once!] ->
                                                  case ipv5_sbuoP of {
                                                    (,) h'_sbuoR [Occ=Once] v_sbuoS [Occ=Once] ->
                                                        case
                                                            putMVar# [dt_sbuoh
                                                                      h'_sbuoR
                                                                      GHC.Prim.void#]
                                                        of
                                                        s2#_sbuoT
                                                        { (##) -> Unit# [v_sbuoS];
                                                        };
                                                  };
                                            };
                                } in 
                                  case ipv3_sbuok of {
                                    __DEFAULT -> io_sbuol GHC.Prim.void#;
                                    0# -> maskAsyncExceptions# [io_sbuol GHC.Prim.void#];
                                  };
                          };
                      GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                       dt_sbuoW
                                                       _ [Occ=Dead] ->
                          case getMaskingState# [GHC.Prim.void#] of {
                            Unit# ipv3_sbup0 [Occ=Once!] ->
                                let {
                                  io_sbup1 [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                  [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                      [on_sbuo9 wild1_sbuof dt_sbuoW] \r [void_0E]
                                          let {
                                            sat_sbups [Occ=Once]
                                              :: GHC.IO.Handle.Types.Handle__
                                                 -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, ())
                                            [LclId] =
                                                [on_sbuo9] \r [h__sbup3 void_0E]
                                                    case h__sbup3 of wild2_sbup5 {
                                                      GHC.IO.Handle.Types.Handle__ $dIODevice_sbup6 [Occ=Once]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   ds3_sbup9 [Occ=Once]
                                                                                   ds4_sbupa [Occ=Once!]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead]
                                                                                   _ [Occ=Dead] ->
                                                          case ds4_sbupa of {
                                                            __DEFAULT ->
                                                                case
                                                                    GHC.IO.Device.setEcho
                                                                        $dIODevice_sbup6
                                                                        ds3_sbup9
                                                                        on_sbuo9
                                                                        GHC.Prim.void#
                                                                of
                                                                { Unit# ipv5_sbupp [Occ=Once] ->
                                                                      let {
                                                                        sat_sbupq [Occ=Once]
                                                                          :: (GHC.IO.Handle.Types.Handle__,
                                                                              ())
                                                                        [LclId] =
                                                                            CCCS (,)! [wild2_sbup5
                                                                                       ipv5_sbupp];
                                                                      } in  Unit# [sat_sbupq];
                                                                };
                                                            GHC.IO.Handle.Types.ClosedHandle ->
                                                                GHC.IO.Handle.Internals.ioe_closedHandle1
                                                                    GHC.Prim.void#;
                                                          };
                                                    };
                                          } in 
                                            case
                                                GHC.IO.Handle.Internals.$wdo_operation
                                                    GHC.IO.Handle.hSetEcho2
                                                    wild1_sbuof
                                                    sat_sbups
                                                    dt_sbuoW
                                                    GHC.Prim.void#
                                            of
                                            { Unit# ipv5_sbupv [Occ=Once!] ->
                                                  case ipv5_sbupv of {
                                                    (,) h'_sbupx [Occ=Once] v_sbupy [Occ=Once] ->
                                                        case
                                                            putMVar# [dt_sbuoW
                                                                      h'_sbupx
                                                                      GHC.Prim.void#]
                                                        of
                                                        s2#_sbupz
                                                        { (##) -> Unit# [v_sbupy];
                                                        };
                                                  };
                                            };
                                } in 
                                  case ipv3_sbup0 of {
                                    __DEFAULT -> io_sbup1 GHC.Prim.void#;
                                    0# -> maskAsyncExceptions# [io_sbup1 GHC.Prim.void#];
                                  };
                          };
                    };
              };
        };

GHC.IO.Handle.hSetEcho
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.Bool -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.hSetEcho1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.hGetBuffering3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hGetBuffering"#;

GHC.IO.Handle.hGetBuffering_fun :: GHC.Base.String
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hGetBuffering3;

GHC.IO.Handle.hGetBuffering2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, GHC.IO.Handle.Types.BufferMode) #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h__sbupB void_0E]
        case h__sbupB of wild_sbupD {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds2_sbupI [Occ=Once!]
                                       _ [Occ=Dead]
                                       ds3_sbupK [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds2_sbupI of {
                __DEFAULT ->
                    let {
                      sat_sbupV [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__, GHC.IO.Handle.Types.BufferMode)
                      [LclId] =
                          CCCS (,)! [wild_sbupD ds3_sbupK];
                    } in  Unit# [sat_sbupV];
                GHC.IO.Handle.Types.ClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_closedHandle1 GHC.Prim.void#;
              };
        };

GHC.IO.Handle.hGetBuffering1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.BufferMode #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbupX void_0E]
        case handle_sbupX of wild_sbupZ {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbuq1 ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sbuq4 [Occ=Once!] ->
                    let {
                      io_sbuq5 [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 GHC.IO.Handle.Types.BufferMode #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbupZ dt_sbuq1] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hGetBuffering_fun
                                      wild_sbupZ
                                      GHC.IO.Handle.hGetBuffering2
                                      dt_sbuq1
                                      GHC.Prim.void#
                              of
                              { Unit# ipv3_sbuq9 [Occ=Once!] ->
                                    case ipv3_sbuq9 of {
                                      (,) h'_sbuqb [Occ=Once] v_sbuqc [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbuq1 h'_sbuqb GHC.Prim.void#]
                                          of
                                          s2#_sbuqd
                                          { (##) -> Unit# [v_sbuqc];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbuq4 of {
                        __DEFAULT -> io_sbuq5 GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sbuq5 GHC.Prim.void#];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sbuqg
                                           _ [Occ=Dead] ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sbuqk [Occ=Once!] ->
                    let {
                      io_sbuql [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 GHC.IO.Handle.Types.BufferMode #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbupZ dt_sbuqg] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hGetBuffering_fun
                                      wild_sbupZ
                                      GHC.IO.Handle.hGetBuffering2
                                      dt_sbuqg
                                      GHC.Prim.void#
                              of
                              { Unit# ipv3_sbuqp [Occ=Once!] ->
                                    case ipv3_sbuqp of {
                                      (,) h'_sbuqr [Occ=Once] v_sbuqs [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbuqg h'_sbuqr GHC.Prim.void#]
                                          of
                                          s2#_sbuqt
                                          { (##) -> Unit# [v_sbuqs];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbuqk of {
                        __DEFAULT -> io_sbuql GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sbuql GHC.Prim.void#];
                      };
              };
        };

GHC.IO.Handle.hGetBuffering
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Types.IO GHC.IO.Handle.Types.BufferMode
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.hGetBuffering1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.hIsWritable4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hIsWritable"#;

GHC.IO.Handle.hIsWritable3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hIsWritable4;

GHC.IO.Handle.hIsWritable2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool) #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h__sbuqv void_0E]
        case h__sbuqv of wild_sbuqx {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds2_sbuqC [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds2_sbuqC of wild1_sbuqO {
                __DEFAULT ->
                    let {
                      sat_sbuqQ [Occ=Once] :: GHC.Types.Bool
                      [LclId] =
                          [wild1_sbuqO] \u []
                              case wild1_sbuqO of {
                                GHC.IO.Handle.Types.ReadHandle -> GHC.Types.False [];
                                GHC.IO.Handle.Types.WriteHandle -> GHC.Types.True [];
                                GHC.IO.Handle.Types.AppendHandle -> GHC.Types.True [];
                                GHC.IO.Handle.Types.ReadWriteHandle -> GHC.Types.True [];
                              }; } in
                    let {
                      sat_sbuqR [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                      [LclId] =
                          CCCS (,)! [wild_sbuqx sat_sbuqQ];
                    } in  Unit# [sat_sbuqR];
                GHC.IO.Handle.Types.ClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_closedHandle1 GHC.Prim.void#;
                GHC.IO.Handle.Types.SemiClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_semiclosedHandle1 GHC.Prim.void#;
              };
        };

GHC.IO.Handle.hIsWritable1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [ds_sbuqU void_0E]
        case ds_sbuqU of wild_sbuqW {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] ipv1_sbuqY ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv3_sbur1 [Occ=Once!] ->
                    let {
                      io_sbur2 [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbuqW ipv1_sbuqY] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hIsWritable3
                                      wild_sbuqW
                                      GHC.IO.Handle.hIsWritable2
                                      ipv1_sbuqY
                                      GHC.Prim.void#
                              of
                              { Unit# ipv5_sbur6 [Occ=Once!] ->
                                    case ipv5_sbur6 of {
                                      (,) h'_sbur8 [Occ=Once] v_sbur9 [Occ=Once] ->
                                          case
                                              putMVar# [ipv1_sbuqY h'_sbur8 GHC.Prim.void#]
                                          of
                                          s2#_sbura
                                          { (##) -> Unit# [v_sbur9];
                                          };
                                    };
                              };
                    } in 
                      case ipv3_sbur1 of {
                        __DEFAULT -> io_sbur2 GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sbur2 GHC.Prim.void#];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              Unit# [GHC.Types.True];
        };

GHC.IO.Handle.hIsWritable
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.hIsWritable1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.hIsReadable4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hIsReadable"#;

GHC.IO.Handle.hIsReadable3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hIsReadable4;

GHC.IO.Handle.hIsReadable2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool) #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h__sburf void_0E]
        case h__sburf of wild_sburh {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds2_sburm [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds2_sburm of wild1_sbury {
                __DEFAULT ->
                    let {
                      sat_sburA [Occ=Once] :: GHC.Types.Bool
                      [LclId] =
                          [wild1_sbury] \u []
                              case wild1_sbury of {
                                __DEFAULT -> GHC.Types.False [];
                                GHC.IO.Handle.Types.ReadHandle -> GHC.Types.True [];
                                GHC.IO.Handle.Types.ReadWriteHandle -> GHC.Types.True [];
                              }; } in
                    let {
                      sat_sburB [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                      [LclId] =
                          CCCS (,)! [wild_sburh sat_sburA];
                    } in  Unit# [sat_sburB];
                GHC.IO.Handle.Types.ClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_closedHandle1 GHC.Prim.void#;
                GHC.IO.Handle.Types.SemiClosedHandle ->
                    GHC.IO.Handle.Internals.ioe_semiclosedHandle1 GHC.Prim.void#;
              };
        };

GHC.IO.Handle.hIsReadable1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [ds_sburE void_0E]
        case ds_sburE of wild_sburG {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] ipv1_sburI ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv3_sburL [Occ=Once!] ->
                    let {
                      io_sburM [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sburG ipv1_sburI] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hIsReadable3
                                      wild_sburG
                                      GHC.IO.Handle.hIsReadable2
                                      ipv1_sburI
                                      GHC.Prim.void#
                              of
                              { Unit# ipv5_sburQ [Occ=Once!] ->
                                    case ipv5_sburQ of {
                                      (,) h'_sburS [Occ=Once] v_sburT [Occ=Once] ->
                                          case
                                              putMVar# [ipv1_sburI h'_sburS GHC.Prim.void#]
                                          of
                                          s2#_sburU
                                          { (##) -> Unit# [v_sburT];
                                          };
                                    };
                              };
                    } in 
                      case ipv3_sburL of {
                        __DEFAULT -> io_sburM GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sburM GHC.Prim.void#];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              Unit# [GHC.Types.True];
        };

GHC.IO.Handle.hIsReadable
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.hIsReadable1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.hIsClosed4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hIsClosed"#;

GHC.IO.Handle.hIsClosed3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hIsClosed4;

GHC.IO.Handle.hIsClosed2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool) #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [h__sburZ void_0E]
        case h__sburZ of wild_sbus1 {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds2_sbus6 [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds2_sbus6 of {
                __DEFAULT ->
                    let {
                      sat_sbusj [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                      [LclId] =
                          CCCS (,)! [wild_sbus1 GHC.Types.False];
                    } in  Unit# [sat_sbusj];
                GHC.IO.Handle.Types.ClosedHandle ->
                    let {
                      sat_sbusk [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                      [LclId] =
                          CCCS (,)! [wild_sbus1 GHC.Types.True];
                    } in  Unit# [sat_sbusk];
              };
        };

GHC.IO.Handle.hIsClosed1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbusl void_0E]
        case handle_sbusl of wild_sbusn {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbusp ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sbuss [Occ=Once!] ->
                    let {
                      io_sbust [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbusn dt_sbusp] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hIsClosed3
                                      wild_sbusn
                                      GHC.IO.Handle.hIsClosed2
                                      dt_sbusp
                                      GHC.Prim.void#
                              of
                              { Unit# ipv3_sbusx [Occ=Once!] ->
                                    case ipv3_sbusx of {
                                      (,) h'_sbusz [Occ=Once] v_sbusA [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbusp h'_sbusz GHC.Prim.void#]
                                          of
                                          s2#_sbusB
                                          { (##) -> Unit# [v_sbusA];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbuss of {
                        __DEFAULT -> io_sbust GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sbust GHC.Prim.void#];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sbusE
                                           _ [Occ=Dead] ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sbusI [Occ=Once!] ->
                    let {
                      io_sbusJ [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbusn dt_sbusE] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hIsClosed3
                                      wild_sbusn
                                      GHC.IO.Handle.hIsClosed2
                                      dt_sbusE
                                      GHC.Prim.void#
                              of
                              { Unit# ipv3_sbusN [Occ=Once!] ->
                                    case ipv3_sbusN of {
                                      (,) h'_sbusP [Occ=Once] v_sbusQ [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbusE h'_sbusP GHC.Prim.void#]
                                          of
                                          s2#_sbusR
                                          { (##) -> Unit# [v_sbusQ];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbusI of {
                        __DEFAULT -> io_sbusJ GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sbusJ GHC.Prim.void#];
                      };
              };
        };

GHC.IO.Handle.hIsClosed
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.hIsClosed1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.hIsOpen4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hIsOpen"#;

GHC.IO.Handle.hIsOpen3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hIsOpen4;

GHC.IO.Handle.hIsOpen2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool) #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [h__sbusT void_0E]
        case h__sbusT of wild_sbusV {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds2_sbut0 [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds2_sbut0 of {
                __DEFAULT ->
                    let {
                      sat_sbutd [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                      [LclId] =
                          CCCS (,)! [wild_sbusV GHC.Types.True];
                    } in  Unit# [sat_sbutd];
                GHC.IO.Handle.Types.ClosedHandle ->
                    let {
                      sat_sbute [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                      [LclId] =
                          CCCS (,)! [wild_sbusV GHC.Types.False];
                    } in  Unit# [sat_sbute];
                GHC.IO.Handle.Types.SemiClosedHandle ->
                    let {
                      sat_sbutf [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__, GHC.Types.Bool)
                      [LclId] =
                          CCCS (,)! [wild_sbusV GHC.Types.False];
                    } in  Unit# [sat_sbutf];
              };
        };

GHC.IO.Handle.hIsOpen1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbutg void_0E]
        case handle_sbutg of wild_sbuti {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbutk ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sbutn [Occ=Once!] ->
                    let {
                      io_sbuto [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbuti dt_sbutk] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hIsOpen3
                                      wild_sbuti
                                      GHC.IO.Handle.hIsOpen2
                                      dt_sbutk
                                      GHC.Prim.void#
                              of
                              { Unit# ipv3_sbuts [Occ=Once!] ->
                                    case ipv3_sbuts of {
                                      (,) h'_sbutu [Occ=Once] v_sbutv [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbutk h'_sbutu GHC.Prim.void#]
                                          of
                                          s2#_sbutw
                                          { (##) -> Unit# [v_sbutv];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbutn of {
                        __DEFAULT -> io_sbuto GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sbuto GHC.Prim.void#];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sbutz
                                           _ [Occ=Dead] ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sbutD [Occ=Once!] ->
                    let {
                      io_sbutE [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [wild_sbuti dt_sbutz] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      GHC.IO.Handle.hIsOpen3
                                      wild_sbuti
                                      GHC.IO.Handle.hIsOpen2
                                      dt_sbutz
                                      GHC.Prim.void#
                              of
                              { Unit# ipv3_sbutI [Occ=Once!] ->
                                    case ipv3_sbutI of {
                                      (,) h'_sbutK [Occ=Once] v_sbutL [Occ=Once] ->
                                          case
                                              putMVar# [dt_sbutz h'_sbutK GHC.Prim.void#]
                                          of
                                          s2#_sbutM
                                          { (##) -> Unit# [v_sbutL];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sbutD of {
                        __DEFAULT -> io_sbutE GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sbutE GHC.Prim.void#];
                      };
              };
        };

GHC.IO.Handle.hIsOpen
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.hIsOpen1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.hGetPosn1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.HandlePosn #)
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [handle_sbutO void_0E]
        case
            GHC.IO.Handle.Internals.wantSeekableHandle1
                GHC.IO.Handle.hGetPosn3
                handle_sbutO
                GHC.IO.Handle.hGetPosn2
                GHC.Prim.void#
        of
        { Unit# ipv1_sbutS [Occ=Once] ->
              let {
                sat_sbutT [Occ=Once] :: GHC.IO.Handle.HandlePosn
                [LclId] =
                    CCCS GHC.IO.Handle.HandlePosn! [handle_sbutO ipv1_sbutS];
              } in  Unit# [sat_sbutT];
        };

GHC.IO.Handle.hGetPosn
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Types.IO GHC.IO.Handle.HandlePosn
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.hGetPosn1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.hClose3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hClose"#;

GHC.IO.Handle.hClose2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.hClose3;

GHC.IO.Handle.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Exception.IOErrorType
     -> GHC.Base.String
     -> GHC.Base.Maybe Foreign.C.Types.CInt
     -> GHC.Base.Maybe GHC.IO.FilePath
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=6,
 Str=<B,U><B,U><B,U><B,U><B,1*U><B,U>x,
 Unf=OtherCon []] =
    [] \r [w_sbutU ww_sbutV ww1_sbutW ww2_sbutX ww3_sbutY void_0E]
        let {
          sat_sbuub [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [w_sbutU ww_sbutV ww1_sbutW ww2_sbutX ww3_sbutY] \u []
                  let {
                    sat_sbuu9 [Occ=Once] :: GHC.Base.Maybe GHC.IO.FilePath
                    [LclId] =
                        [w_sbutU ww3_sbutY] \u []
                            case ww3_sbutY of wild1_sbuu1 {
                              GHC.Base.Nothing ->
                                  case w_sbutU of {
                                    GHC.IO.Handle.Types.FileHandle path_sbuu3 [Occ=Once]
                                                                   _ [Occ=Dead] ->
                                        GHC.Base.Just [path_sbuu3];
                                    GHC.IO.Handle.Types.DuplexHandle path_sbuu5 [Occ=Once]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead] ->
                                        GHC.Base.Just [path_sbuu5];
                                  };
                              GHC.Base.Just _ [Occ=Dead] -> wild1_sbuu1;
                            }; } in
                  let {
                    sat_sbuu0 [Occ=Once] :: GHC.Base.Maybe GHC.IO.Handle.Types.Handle
                    [LclId] =
                        CCCS GHC.Base.Just! [w_sbutU]; } in
                  let {
                    sat_sbuua [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        CCCS GHC.IO.Exception.IOError! [sat_sbuu0
                                                        ww_sbutV
                                                        GHC.IO.Handle.hClose2
                                                        ww1_sbutW
                                                        ww2_sbutX
                                                        sat_sbuu9];
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sbuua;
        } in  raiseIO# [sat_sbuub GHC.Prim.void#];

GHC.IO.Handle.hClose1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h_sbuuc void_0E]
        case h_sbuuc of wild_sbuue {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbuug [Occ=Once] ->
              case
                  GHC.IO.Handle.Internals.$wwithHandle'
                      GHC.IO.Handle.hClose2
                      wild_sbuue
                      dt_sbuug
                      GHC.IO.Handle.Internals.hClose_help1
                      GHC.Prim.void#
              of
              { Unit# ipv1_sbuuj [Occ=Once!] ->
                    case ipv1_sbuuj of {
                      GHC.Base.Nothing -> Unit# [GHC.Tuple.()];
                      GHC.Base.Just e_sbuul [Occ=Once!] ->
                          case e_sbuul of wild2_sbuum {
                            GHC.Exception.SomeException $dException1_sbuun [Occ=Once]
                                                        e2_sbuuo [Occ=Once] ->
                                case GHC.Exception.$p1Exception $dException1_sbuun of sat_sbuup {
                                  __DEFAULT ->
                                      case
                                          Data.Typeable.Internal.sameTypeRep
                                              sat_sbuup GHC.IO.Exception.$fExceptionIOException4
                                      of
                                      { GHC.Types.False -> raiseIO# [wild2_sbuum GHC.Prim.void#];
                                        GHC.Types.True ->
                                            case e2_sbuuo of {
                                              GHC.IO.Exception.IOError _ [Occ=Dead]
                                                                       ww2_sbuut [Occ=Once]
                                                                       _ [Occ=Dead]
                                                                       ww4_sbuuv [Occ=Once]
                                                                       ww5_sbuuw [Occ=Once]
                                                                       ww6_sbuux [Occ=Once] ->
                                                  GHC.IO.Handle.$wlvl
                                                      wild_sbuue
                                                      ww2_sbuut
                                                      ww4_sbuuv
                                                      ww5_sbuuw
                                                      ww6_sbuux
                                                      GHC.Prim.void#;
                                            };
                                      };
                                };
                          };
                    };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sbuuz [Occ=Once]
                                           dt1_sbuuA [Occ=Once] ->
              case
                  GHC.IO.Handle.Internals.$wwithHandle'
                      GHC.IO.Handle.hClose2
                      wild_sbuue
                      dt_sbuuz
                      GHC.IO.Handle.Internals.hClose_help1
                      GHC.Prim.void#
              of
              { Unit# ipv1_sbuuD [Occ=Once] ->
                    case
                        GHC.IO.Handle.Internals.$wwithHandle'
                            GHC.IO.Handle.hClose2
                            wild_sbuue
                            dt1_sbuuA
                            GHC.IO.Handle.Internals.hClose_help1
                            GHC.Prim.void#
                    of
                    { Unit# ipv3_sbuuG [Occ=Once] ->
                          let {
                            sat_sbuuH [Occ=Once]
                              :: [GHC.Base.Maybe GHC.Exception.SomeException]
                            [LclId] =
                                CCCS :! [ipv3_sbuuG GHC.Types.[]]; } in
                          let {
                            sat_sbuuI [Occ=Once]
                              :: [GHC.Base.Maybe GHC.Exception.SomeException]
                            [LclId] =
                                CCCS :! [ipv1_sbuuD sat_sbuuH];
                          } in 
                            case Data.Maybe.catMaybes1 sat_sbuuI of {
                              [] -> Unit# [GHC.Tuple.()];
                              : y_sbuuK [Occ=Once!] _ [Occ=Dead] ->
                                  case y_sbuuK of wild2_sbuuM {
                                    GHC.Exception.SomeException $dException1_sbuuN [Occ=Once]
                                                                e2_sbuuO [Occ=Once] ->
                                        case
                                            GHC.Exception.$p1Exception $dException1_sbuuN
                                        of
                                        sat_sbuuP
                                        { __DEFAULT ->
                                              case
                                                  Data.Typeable.Internal.sameTypeRep
                                                      sat_sbuuP
                                                      GHC.IO.Exception.$fExceptionIOException4
                                              of
                                              { GHC.Types.False ->
                                                    raiseIO# [wild2_sbuuM GHC.Prim.void#];
                                                GHC.Types.True ->
                                                    case e2_sbuuO of {
                                                      GHC.IO.Exception.IOError _ [Occ=Dead]
                                                                               ww2_sbuuT [Occ=Once]
                                                                               _ [Occ=Dead]
                                                                               ww4_sbuuV [Occ=Once]
                                                                               ww5_sbuuW [Occ=Once]
                                                                               ww6_sbuuX [Occ=Once] ->
                                                          GHC.IO.Handle.$wlvl
                                                              wild_sbuue
                                                              ww2_sbuuT
                                                              ww4_sbuuV
                                                              ww5_sbuuW
                                                              ww6_sbuuX
                                                              GHC.Prim.void#;
                                                    };
                                              };
                                        };
                                  };
                            };
                    };
              };
        };

GHC.IO.Handle.hClose
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO ()
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] GHC.IO.Handle.hClose1 eta_B2 GHC.Prim.void#;

lvl28_rbnXa :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['{'#];

lvl29_rbnXb :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! [','#];

lvl30_rbnXc :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "duplex (read-write)"#;

lvl31_rbnXd :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl30_rbnXc;

lvl32_rbnXe :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "none"#;

lvl33_rbnXf :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl32_rbnXe;

lvl34_rbnXg :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "line"#;

lvl35_rbnXh :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl34_rbnXg;

lvl36_rbnXi :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "showHandle"#;

lvl37_rbnXj :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl36_rbnXi;

lvl38_rbnXk :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "loc="#;

lvl39_rbnXl :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "type="#;

lvl40_rbnXm :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "buffering="#;

lvl41_rbnXn :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "}"#;

lvl42_rbnXo :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl41_rbnXn;

lvl43_rbnXp :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.Base.++ lvl33_rbnXf lvl42_rbnXo;

lvl44_rbnXq :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.Base.++ lvl35_rbnXh lvl42_rbnXo;

lvl45_rbnXr :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "block "#;

lvl46_rbnXs :: [GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.$fShow(,)2 lvl42_rbnXo];

lvl47_rbnXt :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.Base.++ GHC.IO.Handle.Types.$fShowHandleType11 lvl42_rbnXo;

GHC.IO.Handle.hShow2
  :: GHC.Base.String
     -> GHC.Types.Bool
     -> GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
[GblId, Arity=4, Str=<L,U><L,U><S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [filepath_sbuuY is_duplex_sbuuZ h_sbuv0 void_0E]
        let {
          act_sbuv2 [Occ=OnceL*!, Dmd=<L,C(C1(U(U,U)))>]
            :: GHC.IO.Handle.Types.Handle__
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
          [LclId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
              sat-only [filepath_sbuuY is_duplex_sbuuZ] \r [hdl__sbuv3 void_0E]
                  let {
                    sat_sbuw2 [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [filepath_sbuuY is_duplex_sbuuZ hdl__sbuv3] \u []
                            case hdl__sbuv3 of {
                              GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           ds2_sbuva [Occ=Once!]
                                                           _ [Occ=Dead]
                                                           ds3_sbuvc [Occ=Once!]
                                                           _ [Occ=Dead]
                                                           dt2_sbuve [Occ=Once]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead] ->
                                  case ds2_sbuva of wild1_sbuvm {
                                    __DEFAULT ->
                                        let {
                                          sat_sbuw1 [Occ=Once] :: [GHC.Types.Char]
                                          [LclId] =
                                              [filepath_sbuuY
                                               is_duplex_sbuuZ
                                               ds3_sbuvc
                                               dt2_sbuve
                                               wild1_sbuvm] \u []
                                                  let {
                                                    sat_sbuvZ [Occ=Once] :: [GHC.Types.Char]
                                                    [LclId] =
                                                        [is_duplex_sbuuZ
                                                         ds3_sbuvc
                                                         dt2_sbuve
                                                         wild1_sbuvm] \u []
                                                            let {
                                                              sat_sbuvY [Occ=Once]
                                                                :: [GHC.Types.Char]
                                                              [LclId] =
                                                                  [is_duplex_sbuuZ
                                                                   ds3_sbuvc
                                                                   dt2_sbuve
                                                                   wild1_sbuvm] \u []
                                                                      let {
                                                                        karg_sbuvn [Occ=Once*]
                                                                          :: [GHC.Types.Char]
                                                                        [LclId] =
                                                                            [ds3_sbuvc
                                                                             dt2_sbuve] \u []
                                                                                let {
                                                                                  sat_sbuvP [Occ=Once]
                                                                                    :: [GHC.Types.Char]
                                                                                  [LclId] =
                                                                                      [ds3_sbuvc
                                                                                       dt2_sbuve] \u []
                                                                                          case
                                                                                              ds3_sbuvc
                                                                                          of
                                                                                          { GHC.IO.Handle.Types.NoBuffering ->
                                                                                                lvl43_rbnXp;
                                                                                            GHC.IO.Handle.Types.LineBuffering ->
                                                                                                lvl44_rbnXq;
                                                                                            GHC.IO.Handle.Types.BlockBuffering ds_sbuvp [Occ=Once!] ->
                                                                                                case
                                                                                                    ds_sbuvp
                                                                                                of
                                                                                                { GHC.Base.Nothing ->
                                                                                                      let {
                                                                                                        sat_sbuvF [Occ=Once]
                                                                                                          :: [GHC.Types.Char]
                                                                                                        [LclId] =
                                                                                                            [dt2_sbuve] \u []
                                                                                                                case
                                                                                                                    case
                                                                                                                        noDuplicate# [GHC.Prim.realWorld#]
                                                                                                                    of
                                                                                                                    s'_sbuvr
                                                                                                                    { (##) ->
                                                                                                                          readMutVar# [dt2_sbuve
                                                                                                                                       GHC.Prim.void#];
                                                                                                                    }
                                                                                                                of
                                                                                                                { Unit# ipv1_sbuvu [Occ=Once!] ->
                                                                                                                      case
                                                                                                                          ipv1_sbuvu
                                                                                                                      of
                                                                                                                      { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                                                                             _ [Occ=Dead]
                                                                                                                                             _ [Occ=Dead]
                                                                                                                                             dt6_sbuvz [Occ=Once]
                                                                                                                                             _ [Occ=Dead]
                                                                                                                                             _ [Occ=Dead] ->
                                                                                                                            case
                                                                                                                                GHC.Show.$wshowSignedInt
                                                                                                                                    0#
                                                                                                                                    dt6_sbuvz
                                                                                                                                    lvl46_rbnXs
                                                                                                                            of
                                                                                                                            { (#,#) ww5_sbuvD [Occ=Once]
                                                                                                                                    ww6_sbuvE [Occ=Once] ->
                                                                                                                                  : [ww5_sbuvD
                                                                                                                                     ww6_sbuvE];
                                                                                                                            };
                                                                                                                      };
                                                                                                                }; } in
                                                                                                      let {
                                                                                                        sat_sbuvG [Occ=Once]
                                                                                                          :: [GHC.Types.Char]
                                                                                                        [LclId] =
                                                                                                            CCCS :! [GHC.Show.$fShow(,)4
                                                                                                                     sat_sbuvF];
                                                                                                      } in 
                                                                                                        GHC.CString.unpackAppendCString#
                                                                                                            lvl45_rbnXr
                                                                                                            sat_sbuvG;
                                                                                                  GHC.Base.Just n_sbuvH [Occ=Once!] ->
                                                                                                      let {
                                                                                                        sat_sbuvN [Occ=Once]
                                                                                                          :: [GHC.Types.Char]
                                                                                                        [LclId] =
                                                                                                            [n_sbuvH] \u []
                                                                                                                case
                                                                                                                    n_sbuvH
                                                                                                                of
                                                                                                                { GHC.Types.I# ww3_sbuvJ [Occ=Once] ->
                                                                                                                      case
                                                                                                                          GHC.Show.$wshowSignedInt
                                                                                                                              0#
                                                                                                                              ww3_sbuvJ
                                                                                                                              lvl46_rbnXs
                                                                                                                      of
                                                                                                                      { (#,#) ww5_sbuvL [Occ=Once]
                                                                                                                              ww6_sbuvM [Occ=Once] ->
                                                                                                                            : [ww5_sbuvL
                                                                                                                               ww6_sbuvM];
                                                                                                                      };
                                                                                                                }; } in
                                                                                                      let {
                                                                                                        sat_sbuvO [Occ=Once]
                                                                                                          :: [GHC.Types.Char]
                                                                                                        [LclId] =
                                                                                                            CCCS :! [GHC.Show.$fShow(,)4
                                                                                                                     sat_sbuvN];
                                                                                                      } in 
                                                                                                        GHC.CString.unpackAppendCString#
                                                                                                            lvl45_rbnXr
                                                                                                            sat_sbuvO;
                                                                                                };
                                                                                          };
                                                                                } in 
                                                                                  GHC.CString.unpackAppendCString#
                                                                                      lvl40_rbnXm
                                                                                      sat_sbuvP;
                                                                      } in 
                                                                        case is_duplex_sbuuZ of {
                                                                          GHC.Types.False ->
                                                                              case wild1_sbuvm of {
                                                                                GHC.IO.Handle.Types.SemiClosedHandle ->
                                                                                    let {
                                                                                      sat_sbuvS [Occ=Once]
                                                                                        :: [GHC.Types.Char]
                                                                                      [LclId] =
                                                                                          CCCS :! [lvl29_rbnXb
                                                                                                   karg_sbuvn];
                                                                                    } in 
                                                                                      GHC.Base.++
                                                                                          GHC.IO.Handle.Types.$fShowHandleType9
                                                                                          sat_sbuvS;
                                                                                GHC.IO.Handle.Types.ReadHandle ->
                                                                                    let {
                                                                                      sat_sbuvT [Occ=Once]
                                                                                        :: [GHC.Types.Char]
                                                                                      [LclId] =
                                                                                          CCCS :! [lvl29_rbnXb
                                                                                                   karg_sbuvn];
                                                                                    } in 
                                                                                      GHC.Base.++
                                                                                          GHC.IO.Handle.Types.$fShowHandleType7
                                                                                          sat_sbuvT;
                                                                                GHC.IO.Handle.Types.WriteHandle ->
                                                                                    let {
                                                                                      sat_sbuvU [Occ=Once]
                                                                                        :: [GHC.Types.Char]
                                                                                      [LclId] =
                                                                                          CCCS :! [lvl29_rbnXb
                                                                                                   karg_sbuvn];
                                                                                    } in 
                                                                                      GHC.Base.++
                                                                                          GHC.IO.Handle.Types.$fShowHandleType5
                                                                                          sat_sbuvU;
                                                                                GHC.IO.Handle.Types.AppendHandle ->
                                                                                    let {
                                                                                      sat_sbuvV [Occ=Once]
                                                                                        :: [GHC.Types.Char]
                                                                                      [LclId] =
                                                                                          CCCS :! [lvl29_rbnXb
                                                                                                   karg_sbuvn];
                                                                                    } in 
                                                                                      GHC.Base.++
                                                                                          GHC.IO.Handle.Types.$fShowHandleType3
                                                                                          sat_sbuvV;
                                                                                GHC.IO.Handle.Types.ReadWriteHandle ->
                                                                                    let {
                                                                                      sat_sbuvW [Occ=Once]
                                                                                        :: [GHC.Types.Char]
                                                                                      [LclId] =
                                                                                          CCCS :! [lvl29_rbnXb
                                                                                                   karg_sbuvn];
                                                                                    } in 
                                                                                      GHC.Base.++
                                                                                          GHC.IO.Handle.Types.$fShowHandleType1
                                                                                          sat_sbuvW;
                                                                              };
                                                                          GHC.Types.True ->
                                                                              let {
                                                                                sat_sbuvX [Occ=Once]
                                                                                  :: [GHC.Types.Char]
                                                                                [LclId] =
                                                                                    CCCS :! [lvl29_rbnXb
                                                                                             karg_sbuvn];
                                                                              } in 
                                                                                GHC.Base.++
                                                                                    lvl31_rbnXd
                                                                                    sat_sbuvX;
                                                                        };
                                                            } in 
                                                              GHC.CString.unpackAppendCString#
                                                                  lvl39_rbnXl sat_sbuvY; } in
                                                  let {
                                                    sat_sbuw0 [Occ=Once] :: [GHC.Types.Char]
                                                    [LclId] =
                                                        CCCS :! [lvl29_rbnXb sat_sbuvZ];
                                                  } in  GHC.Base.++ filepath_sbuuY sat_sbuw0;
                                        } in 
                                          GHC.CString.unpackAppendCString# lvl38_rbnXk sat_sbuw1;
                                    GHC.IO.Handle.Types.ClosedHandle -> lvl47_rbnXt;
                                  };
                            }; } in
                  let {
                    sat_sbuw3 [Occ=Once] :: GHC.Base.String
                    [LclId] =
                        CCCS :! [lvl28_rbnXa sat_sbuw2];
                  } in  Unit# [sat_sbuw3];
        } in 
          case h_sbuv0 of wild_sbuw4 {
            GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbuw6 ->
                case getMaskingState# [GHC.Prim.void#] of {
                  Unit# ipv1_sbuw9 [Occ=Once!] ->
                      let {
                        io_sbuwa [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                          :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
                        [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                            [act_sbuv2 wild_sbuw4 dt_sbuw6] \r [void_0E]
                                let {
                                  sat_sbuwi [Occ=Once]
                                    :: GHC.IO.Handle.Types.Handle__
                                       -> GHC.Types.IO
                                            (GHC.IO.Handle.Types.Handle__, GHC.Base.String)
                                  [LclId] =
                                      [act_sbuv2] \r [h__sbuwc void_0E]
                                          case act_sbuv2 h__sbuwc GHC.Prim.void# of {
                                            Unit# ipv3_sbuwg [Occ=Once] ->
                                                let {
                                                  sat_sbuwh [Occ=Once]
                                                    :: (GHC.IO.Handle.Types.Handle__,
                                                        GHC.Base.String)
                                                  [LclId] =
                                                      CCCS (,)! [h__sbuwc ipv3_sbuwg];
                                                } in  Unit# [sat_sbuwh];
                                          };
                                } in 
                                  case
                                      GHC.IO.Handle.Internals.$wdo_operation
                                          lvl37_rbnXj wild_sbuw4 sat_sbuwi dt_sbuw6 GHC.Prim.void#
                                  of
                                  { Unit# ipv3_sbuwl [Occ=Once!] ->
                                        case ipv3_sbuwl of {
                                          (,) h'_sbuwn [Occ=Once] v_sbuwo [Occ=Once] ->
                                              case
                                                  putMVar# [dt_sbuw6 h'_sbuwn GHC.Prim.void#]
                                              of
                                              s2#_sbuwp
                                              { (##) -> Unit# [v_sbuwo];
                                              };
                                        };
                                  };
                      } in 
                        case ipv1_sbuw9 of {
                          __DEFAULT -> io_sbuwa GHC.Prim.void#;
                          0# -> maskAsyncExceptions# [io_sbuwa GHC.Prim.void#];
                        };
                };
            GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                             dt_sbuws
                                             _ [Occ=Dead] ->
                case getMaskingState# [GHC.Prim.void#] of {
                  Unit# ipv1_sbuww [Occ=Once!] ->
                      let {
                        io_sbuwx [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                          :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
                        [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                            [act_sbuv2 wild_sbuw4 dt_sbuws] \r [void_0E]
                                let {
                                  sat_sbuwF [Occ=Once]
                                    :: GHC.IO.Handle.Types.Handle__
                                       -> GHC.Types.IO
                                            (GHC.IO.Handle.Types.Handle__, GHC.Base.String)
                                  [LclId] =
                                      [act_sbuv2] \r [h__sbuwz void_0E]
                                          case act_sbuv2 h__sbuwz GHC.Prim.void# of {
                                            Unit# ipv3_sbuwD [Occ=Once] ->
                                                let {
                                                  sat_sbuwE [Occ=Once]
                                                    :: (GHC.IO.Handle.Types.Handle__,
                                                        GHC.Base.String)
                                                  [LclId] =
                                                      CCCS (,)! [h__sbuwz ipv3_sbuwD];
                                                } in  Unit# [sat_sbuwE];
                                          };
                                } in 
                                  case
                                      GHC.IO.Handle.Internals.$wdo_operation
                                          lvl37_rbnXj wild_sbuw4 sat_sbuwF dt_sbuws GHC.Prim.void#
                                  of
                                  { Unit# ipv3_sbuwI [Occ=Once!] ->
                                        case ipv3_sbuwI of {
                                          (,) h'_sbuwK [Occ=Once] v_sbuwL [Occ=Once] ->
                                              case
                                                  putMVar# [dt_sbuws h'_sbuwK GHC.Prim.void#]
                                              of
                                              s2#_sbuwM
                                              { (##) -> Unit# [v_sbuwL];
                                              };
                                        };
                                  };
                      } in 
                        case ipv1_sbuww of {
                          __DEFAULT -> io_sbuwx GHC.Prim.void#;
                          0# -> maskAsyncExceptions# [io_sbuwx GHC.Prim.void#];
                        };
                };
          };

GHC.IO.Handle.hShow1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h_sbuwO void_0E]
        case h_sbuwO of wild_sbuwQ {
          GHC.IO.Handle.Types.FileHandle path_sbuwR [Occ=Once]
                                         _ [Occ=Dead] ->
              GHC.IO.Handle.hShow2
                  path_sbuwR GHC.Types.False wild_sbuwQ GHC.Prim.void#;
          GHC.IO.Handle.Types.DuplexHandle path_sbuwT [Occ=Once]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              GHC.IO.Handle.hShow2
                  path_sbuwT GHC.Types.True wild_sbuwQ GHC.Prim.void#;
        };

GHC.IO.Handle.hShow
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] GHC.IO.Handle.hShow1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.HandlePosn
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.HandlePosition -> GHC.IO.Handle.HandlePosn
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.HandlePosn [eta_B2 eta_B1];

