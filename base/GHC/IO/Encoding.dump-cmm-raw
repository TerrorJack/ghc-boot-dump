
==================== Raw Cmm ====================
2018-03-16 16:05:02.254618467 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:05:02.255770999 UTC

[section ""data" . GHC.IO.Encoding.latin1_closure" {
     GHC.IO.Encoding.latin1_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.Latin1.latin1_checked_closure;
         const 0;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.257581028 UTC

[section ""data" . GHC.IO.Encoding.utf8_closure" {
     GHC.IO.Encoding.utf8_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF8.utf8_closure;
         const 0;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.259314118 UTC

[section ""data" . GHC.IO.Encoding.utf8_bom_closure" {
     GHC.IO.Encoding.utf8_bom_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF8.utf8_bom_closure;
         const 0;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.261009068 UTC

[section ""data" . GHC.IO.Encoding.utf16_closure" {
     GHC.IO.Encoding.utf16_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF16.utf16_closure;
         const 0;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.262975857 UTC

[section ""data" . GHC.IO.Encoding.utf16le_closure" {
     GHC.IO.Encoding.utf16le_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF16.utf16le_closure;
         const 0;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.264659011 UTC

[section ""data" . GHC.IO.Encoding.utf16be_closure" {
     GHC.IO.Encoding.utf16be_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF16.utf16be_closure;
         const 0;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.266355129 UTC

[section ""data" . GHC.IO.Encoding.utf32_closure" {
     GHC.IO.Encoding.utf32_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF32.utf32_closure;
         const 0;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.267980525 UTC

[section ""data" . GHC.IO.Encoding.utf32le_closure" {
     GHC.IO.Encoding.utf32le_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF32.utf32le_closure;
         const 0;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.269703235 UTC

[section ""data" . GHC.IO.Encoding.utf32be_closure" {
     GHC.IO.Encoding.utf32be_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF32.utf32be_closure;
         const 0;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.271362486 UTC

[section ""data" . GHC.IO.Encoding.char8_closure" {
     GHC.IO.Encoding.char8_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.Latin1.latin1_closure;
         const 0;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.272996722 UTC

[section ""cstring" . lvl_r9XsW_bytes" {
     lvl_r9XsW_bytes:
         I8[] [109,107,84,101,120,116,69,110,99,111,100,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.276862563 UTC

[section ""data" . lvl1_r9XsX_closure" {
     lvl1_r9XsX_closure:
         const lvl1_r9XsX_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r9XsX_entry() //  [R1]
         { []
         }
     {offset
       c9Y5I: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Y5J; else goto c9Y5K;
       c9Y5J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y5K: // global
           (_c9Y5F::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Y5F::I64 == 0) goto c9Y5H; else goto c9Y5G;
       c9Y5H: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Y5G: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Y5F::I64;
           R2 = lvl_r9XsW_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_r9XsX_info" {
     lvl1_r9XsX_info:
         const lvl1_r9XsX_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.280417885 UTC

[section ""cstring" . lvl2_r9XsY_bytes" {
     lvl2_r9XsY_bytes:
         I8[] [117,110,107,110,111,119,110,32,101,110,99,111,100,105,110,103,58]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.283588179 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding2_closure" {
     GHC.IO.Encoding.mkTextEncoding2_closure:
         const GHC.IO.Encoding.mkTextEncoding2_info;
         const 0;
 },
 sat_s9Xt2_entry() //  [R1]
         { []
         }
     {offset
       c9Y65: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Y66; else goto c9Y67;
       c9Y66: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y67: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl2_r9XsY_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9Xt2_info" {
     sat_s9Xt2_info:
         const sat_s9Xt2_entry;
         const 1;
         const 16;
 },
 sat_s9Xt4_entry() //  [R1]
         { []
         }
     {offset
       c9Y69: // global
           _s9Xt4::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9Y6a; else goto c9Y6b;
       c9Y6b: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c9Y6d; else goto c9Y6c;
       c9Y6d: // global
           HpAlloc = 80;
           goto c9Y6a;
       c9Y6a: // global
           R1 = _s9Xt4::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y6c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9Xt4::P64;
           _s9Xt0::P64 = P64[_s9Xt4::P64 + 16];
           I64[Hp - 72] = sat_s9Xt2_info;
           P64[Hp - 56] = _s9Xt0::P64;
           I64[Hp - 48] = GHC.IO.Exception.IOError_con_info;
           P64[Hp - 40] = GHC.Base.Nothing_closure+1;
           P64[Hp - 32] = GHC.IO.Exception.NoSuchThing_closure+1;
           P64[Hp - 24] = lvl1_r9XsX_closure;
           P64[Hp - 16] = Hp - 72;
           P64[Hp - 8] = GHC.Base.Nothing_closure+1;
           P64[Hp] = GHC.Base.Nothing_closure+1;
           R2 = Hp - 47;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9Xt4_info" {
     sat_s9Xt4_info:
         const sat_s9Xt4_entry;
         const 1;
         const 12884901904;
         const S9Xwj_srt;
 },
 GHC.IO.Encoding.mkTextEncoding2_entry() //  [R2]
         { []
         }
     {offset
       c9Y6e: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Y6i; else goto c9Y6h;
       c9Y6i: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Encoding.mkTextEncoding2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Y6h: // global
           I64[Hp - 16] = sat_s9Xt4_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.mkTextEncoding2_info" {
     GHC.IO.Encoding.mkTextEncoding2_info:
         const GHC.IO.Encoding.mkTextEncoding2_entry;
         const 0;
         const 30064771086;
         const 8589934597;
         const S9Xwj_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.290894382 UTC

[section ""cstring" . GHC.IO.Encoding.$trModule4_bytes" {
     GHC.IO.Encoding.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.292518292 UTC

[section ""data" . GHC.IO.Encoding.$trModule3_closure" {
     GHC.IO.Encoding.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.29416904 UTC

[section ""cstring" . GHC.IO.Encoding.$trModule2_bytes" {
     GHC.IO.Encoding.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,46,69,110,99,111,100,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.295745731 UTC

[section ""data" . GHC.IO.Encoding.$trModule1_closure" {
     GHC.IO.Encoding.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.2976746 UTC

[section ""data" . GHC.IO.Encoding.$trModule_closure" {
     GHC.IO.Encoding.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.Encoding.$trModule3_closure+1;
         const GHC.IO.Encoding.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.299325514 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding33_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding33_bytes:
         I8[] [73,83,79,95,56,56,53,57,45,49,58,49,57,56,55]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.301595832 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding32_closure" {
     GHC.IO.Encoding.getFileSystemEncoding32_closure:
         const GHC.IO.Encoding.getFileSystemEncoding32_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding32_entry() //  [R1]
         { []
         }
     {offset
       c9Y6I: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Y6J; else goto c9Y6K;
       c9Y6J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y6K: // global
           (_c9Y6F::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Y6F::I64 == 0) goto c9Y6H; else goto c9Y6G;
       c9Y6H: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Y6G: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Y6F::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding33_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding32_info" {
     GHC.IO.Encoding.getFileSystemEncoding32_info:
         const GHC.IO.Encoding.getFileSystemEncoding32_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.305099447 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding31_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding31_bytes:
         I8[] [105,115,111,45,105,114,45,49,48,48]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.307964585 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding30_closure" {
     GHC.IO.Encoding.getFileSystemEncoding30_closure:
         const GHC.IO.Encoding.getFileSystemEncoding30_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding30_entry() //  [R1]
         { []
         }
     {offset
       c9Y6Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Y70; else goto c9Y71;
       c9Y70: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y71: // global
           (_c9Y6W::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Y6W::I64 == 0) goto c9Y6Y; else goto c9Y6X;
       c9Y6Y: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Y6X: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Y6W::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding31_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding30_info" {
     GHC.IO.Encoding.getFileSystemEncoding30_info:
         const GHC.IO.Encoding.getFileSystemEncoding30_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.311321401 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding29_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding29_bytes:
         I8[] [73,83,79,95,56,56,53,57,45,49]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.313477078 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding28_closure" {
     GHC.IO.Encoding.getFileSystemEncoding28_closure:
         const GHC.IO.Encoding.getFileSystemEncoding28_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding28_entry() //  [R1]
         { []
         }
     {offset
       c9Y7g: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Y7h; else goto c9Y7i;
       c9Y7h: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y7i: // global
           (_c9Y7d::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Y7d::I64 == 0) goto c9Y7f; else goto c9Y7e;
       c9Y7f: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Y7e: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Y7d::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding29_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding28_info" {
     GHC.IO.Encoding.getFileSystemEncoding28_info:
         const GHC.IO.Encoding.getFileSystemEncoding28_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.316881258 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding27_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding27_bytes:
         I8[] [73,83,79,45,56,56,53,57,45,49]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.319863739 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding26_closure" {
     GHC.IO.Encoding.getFileSystemEncoding26_closure:
         const GHC.IO.Encoding.getFileSystemEncoding26_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding26_entry() //  [R1]
         { []
         }
     {offset
       c9Y7x: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Y7y; else goto c9Y7z;
       c9Y7y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y7z: // global
           (_c9Y7u::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Y7u::I64 == 0) goto c9Y7w; else goto c9Y7v;
       c9Y7w: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Y7v: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Y7u::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding27_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding26_info" {
     GHC.IO.Encoding.getFileSystemEncoding26_info:
         const GHC.IO.Encoding.getFileSystemEncoding26_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.323292466 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding25_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding25_bytes:
         I8[] [108,97,116,105,110,49]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.325390483 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding24_closure" {
     GHC.IO.Encoding.getFileSystemEncoding24_closure:
         const GHC.IO.Encoding.getFileSystemEncoding24_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding24_entry() //  [R1]
         { []
         }
     {offset
       c9Y7O: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Y7P; else goto c9Y7Q;
       c9Y7P: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y7Q: // global
           (_c9Y7L::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Y7L::I64 == 0) goto c9Y7N; else goto c9Y7M;
       c9Y7N: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Y7M: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Y7L::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding25_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding24_info" {
     GHC.IO.Encoding.getFileSystemEncoding24_info:
         const GHC.IO.Encoding.getFileSystemEncoding24_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.328860598 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding23_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding23_bytes:
         I8[] [108,49]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.331427311 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding22_closure" {
     GHC.IO.Encoding.getFileSystemEncoding22_closure:
         const GHC.IO.Encoding.getFileSystemEncoding22_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding22_entry() //  [R1]
         { []
         }
     {offset
       c9Y85: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Y86; else goto c9Y87;
       c9Y86: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y87: // global
           (_c9Y82::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Y82::I64 == 0) goto c9Y84; else goto c9Y83;
       c9Y84: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Y83: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Y82::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding23_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding22_info" {
     GHC.IO.Encoding.getFileSystemEncoding22_info:
         const GHC.IO.Encoding.getFileSystemEncoding22_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.33489423 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding21_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding21_bytes:
         I8[] [73,66,77,56,49,57]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.337076364 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding20_closure" {
     GHC.IO.Encoding.getFileSystemEncoding20_closure:
         const GHC.IO.Encoding.getFileSystemEncoding20_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding20_entry() //  [R1]
         { []
         }
     {offset
       c9Y8m: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Y8n; else goto c9Y8o;
       c9Y8n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y8o: // global
           (_c9Y8j::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Y8j::I64 == 0) goto c9Y8l; else goto c9Y8k;
       c9Y8l: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Y8k: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Y8j::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding21_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding20_info" {
     GHC.IO.Encoding.getFileSystemEncoding20_info:
         const GHC.IO.Encoding.getFileSystemEncoding20_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.341511725 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding19_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding19_bytes:
         I8[] [67,80,56,49,57]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.343696887 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding18_closure" {
     GHC.IO.Encoding.getFileSystemEncoding18_closure:
         const GHC.IO.Encoding.getFileSystemEncoding18_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding18_entry() //  [R1]
         { []
         }
     {offset
       c9Y8D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Y8E; else goto c9Y8F;
       c9Y8E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y8F: // global
           (_c9Y8A::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Y8A::I64 == 0) goto c9Y8C; else goto c9Y8B;
       c9Y8C: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Y8B: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Y8A::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding19_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding18_info" {
     GHC.IO.Encoding.getFileSystemEncoding18_info:
         const GHC.IO.Encoding.getFileSystemEncoding18_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.347403381 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding17_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding17_bytes:
         I8[] [99,115,73,83,79,76,97,116,105,110,49]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.349593175 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding16_closure" {
     GHC.IO.Encoding.getFileSystemEncoding16_closure:
         const GHC.IO.Encoding.getFileSystemEncoding16_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding16_entry() //  [R1]
         { []
         }
     {offset
       c9Y8U: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Y8V; else goto c9Y8W;
       c9Y8V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y8W: // global
           (_c9Y8R::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Y8R::I64 == 0) goto c9Y8T; else goto c9Y8S;
       c9Y8T: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Y8S: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Y8R::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding17_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding16_info" {
     GHC.IO.Encoding.getFileSystemEncoding16_info:
         const GHC.IO.Encoding.getFileSystemEncoding16_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.35306144 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding15_closure" {
     GHC.IO.Encoding.getFileSystemEncoding15_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding16_closure;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.354678321 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding14_closure" {
     GHC.IO.Encoding.getFileSystemEncoding14_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding18_closure;
         const GHC.IO.Encoding.getFileSystemEncoding15_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.35640702 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding13_closure" {
     GHC.IO.Encoding.getFileSystemEncoding13_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding20_closure;
         const GHC.IO.Encoding.getFileSystemEncoding14_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.358304376 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding12_closure" {
     GHC.IO.Encoding.getFileSystemEncoding12_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding22_closure;
         const GHC.IO.Encoding.getFileSystemEncoding13_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.360026404 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding11_closure" {
     GHC.IO.Encoding.getFileSystemEncoding11_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding24_closure;
         const GHC.IO.Encoding.getFileSystemEncoding12_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.361708564 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding10_closure" {
     GHC.IO.Encoding.getFileSystemEncoding10_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding26_closure;
         const GHC.IO.Encoding.getFileSystemEncoding11_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.363402017 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding9_closure" {
     GHC.IO.Encoding.getFileSystemEncoding9_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding28_closure;
         const GHC.IO.Encoding.getFileSystemEncoding10_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.365108084 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding8_closure" {
     GHC.IO.Encoding.getFileSystemEncoding8_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding30_closure;
         const GHC.IO.Encoding.getFileSystemEncoding9_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.367369354 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding7_closure" {
     GHC.IO.Encoding.getFileSystemEncoding7_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding32_closure;
         const GHC.IO.Encoding.getFileSystemEncoding8_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.36901819 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding66_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding66_bytes:
         I8[] [65,78,83,73,95,88,51,46,52,45,49,57,54,56]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.371344832 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding65_closure" {
     GHC.IO.Encoding.getFileSystemEncoding65_closure:
         const GHC.IO.Encoding.getFileSystemEncoding65_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding65_entry() //  [R1]
         { []
         }
     {offset
       c9Y9k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Y9l; else goto c9Y9m;
       c9Y9l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y9m: // global
           (_c9Y9h::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Y9h::I64 == 0) goto c9Y9j; else goto c9Y9i;
       c9Y9j: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Y9i: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Y9h::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding66_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding65_info" {
     GHC.IO.Encoding.getFileSystemEncoding65_info:
         const GHC.IO.Encoding.getFileSystemEncoding65_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.375376677 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding64_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding64_bytes:
         I8[] [105,115,111,45,105,114,45,54]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.377687595 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding63_closure" {
     GHC.IO.Encoding.getFileSystemEncoding63_closure:
         const GHC.IO.Encoding.getFileSystemEncoding63_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding63_entry() //  [R1]
         { []
         }
     {offset
       c9Y9B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Y9C; else goto c9Y9D;
       c9Y9C: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y9D: // global
           (_c9Y9y::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Y9y::I64 == 0) goto c9Y9A; else goto c9Y9z;
       c9Y9A: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Y9z: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Y9y::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding64_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding63_info" {
     GHC.IO.Encoding.getFileSystemEncoding63_info:
         const GHC.IO.Encoding.getFileSystemEncoding63_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.381290188 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding62_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding62_bytes:
         I8[] [65,78,83,73,95,88,51,46,52,45,49,57,56,54]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.383481981 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding61_closure" {
     GHC.IO.Encoding.getFileSystemEncoding61_closure:
         const GHC.IO.Encoding.getFileSystemEncoding61_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding61_entry() //  [R1]
         { []
         }
     {offset
       c9Y9S: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Y9T; else goto c9Y9U;
       c9Y9T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y9U: // global
           (_c9Y9P::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Y9P::I64 == 0) goto c9Y9R; else goto c9Y9Q;
       c9Y9R: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Y9Q: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Y9P::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding62_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding61_info" {
     GHC.IO.Encoding.getFileSystemEncoding61_info:
         const GHC.IO.Encoding.getFileSystemEncoding61_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.387538532 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding60_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding60_bytes:
         I8[] [73,83,79,95,54,52,54,46,105,114,118,58,49,57,57,49]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.389721628 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding59_closure" {
     GHC.IO.Encoding.getFileSystemEncoding59_closure:
         const GHC.IO.Encoding.getFileSystemEncoding59_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding59_entry() //  [R1]
         { []
         }
     {offset
       c9Ya9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Yaa; else goto c9Yab;
       c9Yaa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yab: // global
           (_c9Ya6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Ya6::I64 == 0) goto c9Ya8; else goto c9Ya7;
       c9Ya8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Ya7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Ya6::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding60_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding59_info" {
     GHC.IO.Encoding.getFileSystemEncoding59_info:
         const GHC.IO.Encoding.getFileSystemEncoding59_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.393053698 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding58_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding58_bytes:
         I8[] [85,83,45,65,83,67,73,73]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.395544402 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding57_closure" {
     GHC.IO.Encoding.getFileSystemEncoding57_closure:
         const GHC.IO.Encoding.getFileSystemEncoding57_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding57_entry() //  [R1]
         { []
         }
     {offset
       c9Yaq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Yar; else goto c9Yas;
       c9Yar: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yas: // global
           (_c9Yan::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Yan::I64 == 0) goto c9Yap; else goto c9Yao;
       c9Yap: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Yao: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Yan::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding58_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding57_info" {
     GHC.IO.Encoding.getFileSystemEncoding57_info:
         const GHC.IO.Encoding.getFileSystemEncoding57_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.399551124 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding56_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding56_bytes:
         I8[] [117,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.401954846 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding55_closure" {
     GHC.IO.Encoding.getFileSystemEncoding55_closure:
         const GHC.IO.Encoding.getFileSystemEncoding55_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding55_entry() //  [R1]
         { []
         }
     {offset
       c9YaH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YaI; else goto c9YaJ;
       c9YaI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YaJ: // global
           (_c9YaE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YaE::I64 == 0) goto c9YaG; else goto c9YaF;
       c9YaG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YaF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YaE::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding56_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding55_info" {
     GHC.IO.Encoding.getFileSystemEncoding55_info:
         const GHC.IO.Encoding.getFileSystemEncoding55_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.405430925 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding54_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding54_bytes:
         I8[] [73,66,77,51,54,55]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.407497422 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding53_closure" {
     GHC.IO.Encoding.getFileSystemEncoding53_closure:
         const GHC.IO.Encoding.getFileSystemEncoding53_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding53_entry() //  [R1]
         { []
         }
     {offset
       c9YaY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YaZ; else goto c9Yb0;
       c9YaZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yb0: // global
           (_c9YaV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YaV::I64 == 0) goto c9YaX; else goto c9YaW;
       c9YaX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YaW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YaV::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding54_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding53_info" {
     GHC.IO.Encoding.getFileSystemEncoding53_info:
         const GHC.IO.Encoding.getFileSystemEncoding53_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.411075818 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding52_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding52_bytes:
         I8[] [99,112,51,54,55]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.413518384 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding51_closure" {
     GHC.IO.Encoding.getFileSystemEncoding51_closure:
         const GHC.IO.Encoding.getFileSystemEncoding51_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding51_entry() //  [R1]
         { []
         }
     {offset
       c9Ybf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Ybg; else goto c9Ybh;
       c9Ybg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Ybh: // global
           (_c9Ybc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Ybc::I64 == 0) goto c9Ybe; else goto c9Ybd;
       c9Ybe: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Ybd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Ybc::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding52_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding51_info" {
     GHC.IO.Encoding.getFileSystemEncoding51_info:
         const GHC.IO.Encoding.getFileSystemEncoding51_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.417063006 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding50_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding50_bytes:
         I8[] [99,115,65,83,67,73,73]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.419244936 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding49_closure" {
     GHC.IO.Encoding.getFileSystemEncoding49_closure:
         const GHC.IO.Encoding.getFileSystemEncoding49_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding49_entry() //  [R1]
         { []
         }
     {offset
       c9Ybw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Ybx; else goto c9Yby;
       c9Ybx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yby: // global
           (_c9Ybt::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Ybt::I64 == 0) goto c9Ybv; else goto c9Ybu;
       c9Ybv: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Ybu: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Ybt::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding50_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding49_info" {
     GHC.IO.Encoding.getFileSystemEncoding49_info:
         const GHC.IO.Encoding.getFileSystemEncoding49_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.422653253 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding48_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding48_bytes:
         I8[] [65,83,67,73,73]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.42483603 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding47_closure" {
     GHC.IO.Encoding.getFileSystemEncoding47_closure:
         const GHC.IO.Encoding.getFileSystemEncoding47_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding47_entry() //  [R1]
         { []
         }
     {offset
       c9YbN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YbO; else goto c9YbP;
       c9YbO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YbP: // global
           (_c9YbK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YbK::I64 == 0) goto c9YbM; else goto c9YbL;
       c9YbM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YbL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YbK::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding48_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding47_info" {
     GHC.IO.Encoding.getFileSystemEncoding47_info:
         const GHC.IO.Encoding.getFileSystemEncoding47_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.428742671 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding46_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding46_bytes:
         I8[] [73,83,79,54,52,54,45,85,83]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.431589311 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding45_closure" {
     GHC.IO.Encoding.getFileSystemEncoding45_closure:
         const GHC.IO.Encoding.getFileSystemEncoding45_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding45_entry() //  [R1]
         { []
         }
     {offset
       c9Yc4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Yc5; else goto c9Yc6;
       c9Yc5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yc6: // global
           (_c9Yc1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Yc1::I64 == 0) goto c9Yc3; else goto c9Yc2;
       c9Yc3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Yc2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Yc1::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding46_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding45_info" {
     GHC.IO.Encoding.getFileSystemEncoding45_info:
         const GHC.IO.Encoding.getFileSystemEncoding45_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.435585819 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding44_closure" {
     GHC.IO.Encoding.getFileSystemEncoding44_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding45_closure;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.437343561 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding43_closure" {
     GHC.IO.Encoding.getFileSystemEncoding43_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding47_closure;
         const GHC.IO.Encoding.getFileSystemEncoding44_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.439027505 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding42_closure" {
     GHC.IO.Encoding.getFileSystemEncoding42_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding49_closure;
         const GHC.IO.Encoding.getFileSystemEncoding43_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.440730423 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding41_closure" {
     GHC.IO.Encoding.getFileSystemEncoding41_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding51_closure;
         const GHC.IO.Encoding.getFileSystemEncoding42_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.442479182 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding40_closure" {
     GHC.IO.Encoding.getFileSystemEncoding40_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding53_closure;
         const GHC.IO.Encoding.getFileSystemEncoding41_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.444219525 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding39_closure" {
     GHC.IO.Encoding.getFileSystemEncoding39_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding55_closure;
         const GHC.IO.Encoding.getFileSystemEncoding40_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.445928343 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding38_closure" {
     GHC.IO.Encoding.getFileSystemEncoding38_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding57_closure;
         const GHC.IO.Encoding.getFileSystemEncoding39_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.447697382 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding37_closure" {
     GHC.IO.Encoding.getFileSystemEncoding37_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding59_closure;
         const GHC.IO.Encoding.getFileSystemEncoding38_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.449603064 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding36_closure" {
     GHC.IO.Encoding.getFileSystemEncoding36_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding61_closure;
         const GHC.IO.Encoding.getFileSystemEncoding37_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.451244278 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding35_closure" {
     GHC.IO.Encoding.getFileSystemEncoding35_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding63_closure;
         const GHC.IO.Encoding.getFileSystemEncoding36_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.452932792 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding34_closure" {
     GHC.IO.Encoding.getFileSystemEncoding34_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding65_closure;
         const GHC.IO.Encoding.getFileSystemEncoding35_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.454651872 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding68_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding68_bytes:
         I8[] [85,84,70,56]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.457412338 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding67_closure" {
     GHC.IO.Encoding.getFileSystemEncoding67_closure:
         const GHC.IO.Encoding.getFileSystemEncoding67_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding67_entry() //  [R1]
         { []
         }
     {offset
       c9Ycw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Ycx; else goto c9Ycy;
       c9Ycx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Ycy: // global
           (_c9Yct::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Yct::I64 == 0) goto c9Ycv; else goto c9Ycu;
       c9Ycv: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Ycu: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Yct::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding68_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding67_info" {
     GHC.IO.Encoding.getFileSystemEncoding67_info:
         const GHC.IO.Encoding.getFileSystemEncoding67_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.460954828 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding70_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding70_bytes:
         I8[] [85,84,70,51,50,76,69]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.463803128 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding69_closure" {
     GHC.IO.Encoding.getFileSystemEncoding69_closure:
         const GHC.IO.Encoding.getFileSystemEncoding69_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding69_entry() //  [R1]
         { []
         }
     {offset
       c9YcN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YcO; else goto c9YcP;
       c9YcO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YcP: // global
           (_c9YcK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YcK::I64 == 0) goto c9YcM; else goto c9YcL;
       c9YcM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YcL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YcK::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding70_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding69_info" {
     GHC.IO.Encoding.getFileSystemEncoding69_info:
         const GHC.IO.Encoding.getFileSystemEncoding69_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.467220431 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding72_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding72_bytes:
         I8[] [85,84,70,51,50,66,69]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.469704777 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding71_closure" {
     GHC.IO.Encoding.getFileSystemEncoding71_closure:
         const GHC.IO.Encoding.getFileSystemEncoding71_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding71_entry() //  [R1]
         { []
         }
     {offset
       c9Yd4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Yd5; else goto c9Yd6;
       c9Yd5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yd6: // global
           (_c9Yd1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Yd1::I64 == 0) goto c9Yd3; else goto c9Yd2;
       c9Yd3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Yd2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Yd1::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding72_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding71_info" {
     GHC.IO.Encoding.getFileSystemEncoding71_info:
         const GHC.IO.Encoding.getFileSystemEncoding71_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.473095025 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding74_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding74_bytes:
         I8[] [85,84,70,51,50]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.475283409 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding73_closure" {
     GHC.IO.Encoding.getFileSystemEncoding73_closure:
         const GHC.IO.Encoding.getFileSystemEncoding73_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding73_entry() //  [R1]
         { []
         }
     {offset
       c9Ydl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Ydm; else goto c9Ydn;
       c9Ydm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Ydn: // global
           (_c9Ydi::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Ydi::I64 == 0) goto c9Ydk; else goto c9Ydj;
       c9Ydk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Ydj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Ydi::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding74_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding73_info" {
     GHC.IO.Encoding.getFileSystemEncoding73_info:
         const GHC.IO.Encoding.getFileSystemEncoding73_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.478752982 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding76_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding76_bytes:
         I8[] [85,84,70,49,54,76,69]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.480995116 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding75_closure" {
     GHC.IO.Encoding.getFileSystemEncoding75_closure:
         const GHC.IO.Encoding.getFileSystemEncoding75_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding75_entry() //  [R1]
         { []
         }
     {offset
       c9YdC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YdD; else goto c9YdE;
       c9YdD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YdE: // global
           (_c9Ydz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Ydz::I64 == 0) goto c9YdB; else goto c9YdA;
       c9YdB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YdA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Ydz::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding76_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding75_info" {
     GHC.IO.Encoding.getFileSystemEncoding75_info:
         const GHC.IO.Encoding.getFileSystemEncoding75_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.484777759 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding78_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding78_bytes:
         I8[] [85,84,70,49,54,66,69]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.486990052 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding77_closure" {
     GHC.IO.Encoding.getFileSystemEncoding77_closure:
         const GHC.IO.Encoding.getFileSystemEncoding77_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding77_entry() //  [R1]
         { []
         }
     {offset
       c9YdT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YdU; else goto c9YdV;
       c9YdU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YdV: // global
           (_c9YdQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YdQ::I64 == 0) goto c9YdS; else goto c9YdR;
       c9YdS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YdR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YdQ::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding78_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding77_info" {
     GHC.IO.Encoding.getFileSystemEncoding77_info:
         const GHC.IO.Encoding.getFileSystemEncoding77_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.490943179 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding80_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding80_bytes:
         I8[] [85,84,70,49,54]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.493070618 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding79_closure" {
     GHC.IO.Encoding.getFileSystemEncoding79_closure:
         const GHC.IO.Encoding.getFileSystemEncoding79_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding79_entry() //  [R1]
         { []
         }
     {offset
       c9Yea: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Yeb; else goto c9Yec;
       c9Yeb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yec: // global
           (_c9Ye7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Ye7::I64 == 0) goto c9Ye9; else goto c9Ye8;
       c9Ye9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Ye8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Ye7::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding80_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding79_info" {
     GHC.IO.Encoding.getFileSystemEncoding79_info:
         const GHC.IO.Encoding.getFileSystemEncoding79_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.499428636 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding_go_closure" {
     GHC.IO.Encoding.getFileSystemEncoding_go_closure:
         const GHC.IO.Encoding.getFileSystemEncoding_go_info;
         const 0;
 },
 sat_s9Xtl_entry() //  [R1]
         { []
         }
     {offset
       c9YeF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YeG; else goto c9YeH;
       c9YeG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YeH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.getFileSystemEncoding_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9Xtl_info" {
     sat_s9Xtl_info:
         const sat_s9Xtl_entry;
         const 1;
         const 4294967312;
         const S9Xwj_srt+24;
 },
 sat_s9Xtk_entry() //  [R1]
         { []
         }
     {offset
       c9YeO: // global
           _s9Xtk::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9YeP; else goto c9YeQ;
       c9YeQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9YeS; else goto c9YeR;
       c9YeS: // global
           HpAlloc = 16;
           goto c9YeP;
       c9YeP: // global
           R1 = _s9Xtk::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YeR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9Xtk::P64;
           (_s9Xtg::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_towupper(I64[_s9Xtk::P64 + 16]);
           if (_s9Xtg::I64 > 1114111) goto c9Yf2; else goto c9Yf9;
       c9Yf2: // global
           Hp = Hp - 16;
           R2 = _s9Xtg::I64;
           Sp = Sp - 16;
           call GHC.Char.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c9Yf9: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _s9Xtg::I64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9Xtk_info" {
     sat_s9Xtk_info:
         const sat_s9Xtk_entry;
         const 4294967296;
         const 4294967313;
         const S9Xwj_srt+32;
 },
 GHC.IO.Encoding.getFileSystemEncoding_go_entry() //  [R2]
         { []
         }
     {offset
       c9Yfe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Yff; else goto u9Yfr;
       c9Yff: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.getFileSystemEncoding_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u9Yfr: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c9Yel() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding_go_info" {
     GHC.IO.Encoding.getFileSystemEncoding_go_info:
         const GHC.IO.Encoding.getFileSystemEncoding_go_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S9Xwj_srt+24;
 },
 _c9Yel() //  []
         { []
         }
     {offset
       c9Yel: // global
           _s9Xt5::P64 = P64[Sp];
           I64[Sp] = block_c9Yeo_info;
           R1 = _s9Xt5::P64;
           if (R1 & 7 != 0) goto u9Yft; else goto c9Yep;
       u9Yft: // global
           call _c9Yeo(R1) args: 0, res: 0, upd: 0;
       c9Yep: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Yeo() //  [R1]
         { []
         }
     {offset
       c9Yeo: // global
           if (R1 & 7 == 1) goto c9Yfb; else goto c9Yfc;
       c9Yfb: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9Yfc: // global
           I64[Sp - 8] = block_c9Yeu_info;
           _s9Xt8::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s9Xt8::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Yfu; else goto c9Yev;
       u9Yfu: // global
           call _c9Yeu(R1) args: 0, res: 0, upd: 0;
       c9Yev: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Yeo_info" {
     block_c9Yeo_info:
         const _c9Yeo;
         const 0;
         const 12884901918;
         const S9Xwj_srt+24;
 },
 _c9Yeu() //  [R1]
         { []
         }
     {offset
       c9Yeu: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9Yfm; else goto c9Yfl;
       c9Yfm: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Yfl: // global
           _s9Xt8::P64 = P64[Sp + 8];
           _s9Xtb::I64 = I64[R1 + 7];
           if (_s9Xtb::I64 != 45) goto c9Yfp; else goto c9Yfq;
       c9Yfp: // global
           I64[Hp - 64] = sat_s9Xtl_info;
           P64[Hp - 48] = _s9Xt8::P64;
           I64[Hp - 40] = sat_s9Xtk_info;
           I64[Hp - 24] = _s9Xtb::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9Yfq: // global
           Hp = Hp - 72;
           P64[Sp + 8] = _s9Xt8::P64;
           Sp = Sp + 8;
           call _c9Yel() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Yeu_info" {
     block_c9Yeu_info:
         const _c9Yeu;
         const 1;
         const 12884901918;
         const S9Xwj_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.512600349 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding6_closure" {
     GHC.IO.Encoding.getFileSystemEncoding6_closure:
         const GHC.IO.Encoding.getFileSystemEncoding6_info;
         const 0;
 },
 sat_s9Xtq_entry() //  [R1]
         { []
         }
     {offset
       c9Ygi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Ygj; else goto c9Ygk;
       c9Ygj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Ygk: // global
           I64[Sp - 8] = block_c9Yg9_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Ygz; else goto c9Yga;
       u9Ygz: // global
           call _c9Yg9(R1) args: 0, res: 0, upd: 0;
       c9Yga: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9Xtq_info" {
     sat_s9Xtq_info:
         const sat_s9Xtq_entry;
         const 1;
         const 30064771088;
         const S9Xwj_srt+40;
 },
 _c9Yg9() //  [R1]
         { []
         }
     {offset
       c9Yg9: // global
           _c9Ygh::P64 = R1 & 7;
           if (_c9Ygh::P64 < 3) goto u9Ygx; else goto u9Ygy;
       u9Ygx: // global
           if (_c9Ygh::P64 < 2) goto c9Ygd; else goto c9Yge;
       c9Ygd: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9Yge: // global
           R1 = GHC.IO.Encoding.Failure.codingFailureModeSuffix5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u9Ygy: // global
           if (_c9Ygh::P64 < 4) goto c9Ygf; else goto c9Ygg;
       c9Ygf: // global
           R1 = GHC.IO.Encoding.Failure.codingFailureModeSuffix3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c9Ygg: // global
           R1 = GHC.IO.Encoding.Failure.codingFailureModeSuffix1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Yg9_info" {
     block_c9Yg9_info:
         const _c9Yg9;
         const 0;
         const 30064771102;
         const S9Xwj_srt+40;
 },
 GHC.IO.Encoding.getFileSystemEncoding6_entry() //  [R2, R3]
         { []
         }
     {offset
       c9YgC: // global
           _s9Xtn::P64 = R3;
           _s9Xtm::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c9YgD; else goto c9YgE;
       c9YgE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9YgG; else goto c9YgF;
       c9YgG: // global
           HpAlloc = 24;
           goto c9YgD;
       c9YgD: // global
           R3 = _s9Xtn::P64;
           R2 = _s9Xtm::P64;
           R1 = GHC.IO.Encoding.getFileSystemEncoding6_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9YgF: // global
           I64[Hp - 16] = sat_s9Xtq_info;
           P64[Hp] = _s9Xtm::P64;
           I64[Sp - 8] = block_c9YgA_info;
           R3 = Hp - 16;
           R2 = _s9Xtn::P64;
           Sp = Sp - 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding6_info" {
     GHC.IO.Encoding.getFileSystemEncoding6_info:
         const GHC.IO.Encoding.getFileSystemEncoding6_entry;
         const 0;
         const 519691042830;
         const 12884901903;
         const S9Xwj_srt+16;
 },
 _c9YgA() //  [R1]
         { []
         }
     {offset
       c9YgA: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.IO.Encoding.mkTextEncoding2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9YgA_info" {
     block_c9YgA_info:
         const _c9YgA;
         const 0;
         const 4294967326;
         const S9Xwj_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.529176949 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding5_closure" {
     GHC.IO.Encoding.getFileSystemEncoding5_closure:
         const GHC.IO.Encoding.getFileSystemEncoding5_info;
         const 0;
 },
 sat_s9XtK_entry() //  [R1]
         { []
         }
     {offset
       c9YhS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YhT; else goto c9YhU;
       c9YhT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YhU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.Latin1.mkLatin1_checked_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9XtK_info" {
     sat_s9XtK_info:
         const sat_s9XtK_entry;
         const 1;
         const 4294967312;
         const S9Xwj_srt+72;
 },
 sat_s9XtL_entry() //  [R1]
         { []
         }
     {offset
       c9Yi1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Yi2; else goto c9Yi3;
       c9Yi2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yi3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.Latin1.mkAscii_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9XtL_info" {
     sat_s9XtL_info:
         const sat_s9XtL_entry;
         const 1;
         const 4294967312;
         const S9Xwj_srt+80;
 },
 sat_s9XtM_entry() //  [R1]
         { []
         }
     {offset
       c9Yia: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Yib; else goto c9Yic;
       c9Yib: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yic: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF8.mkUTF8_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9XtM_info" {
     sat_s9XtM_info:
         const sat_s9XtM_entry;
         const 1;
         const 4294967312;
         const S9Xwj_srt+88;
 },
 sat_s9XtN_entry() //  [R1]
         { []
         }
     {offset
       c9Yij: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Yik; else goto c9Yil;
       c9Yik: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yil: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF32.mkUTF32le_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9XtN_info" {
     sat_s9XtN_info:
         const sat_s9XtN_entry;
         const 1;
         const 4294967312;
         const S9Xwj_srt+96;
 },
 sat_s9XtO_entry() //  [R1]
         { []
         }
     {offset
       c9Yis: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Yit; else goto c9Yiu;
       c9Yit: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yiu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF32.mkUTF32be_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9XtO_info" {
     sat_s9XtO_info:
         const sat_s9XtO_entry;
         const 1;
         const 4294967312;
         const S9Xwj_srt+104;
 },
 sat_s9XtP_entry() //  [R1]
         { []
         }
     {offset
       c9YiB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YiC; else goto c9YiD;
       c9YiC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YiD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF32.mkUTF32_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9XtP_info" {
     sat_s9XtP_info:
         const sat_s9XtP_entry;
         const 1;
         const 4294967312;
         const S9Xwj_srt+112;
 },
 sat_s9XtQ_entry() //  [R1]
         { []
         }
     {offset
       c9YiK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YiL; else goto c9YiM;
       c9YiL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YiM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF16.mkUTF16le_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9XtQ_info" {
     sat_s9XtQ_info:
         const sat_s9XtQ_entry;
         const 1;
         const 4294967312;
         const S9Xwj_srt+120;
 },
 sat_s9XtR_entry() //  [R1]
         { []
         }
     {offset
       c9YiT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YiU; else goto c9YiV;
       c9YiU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YiV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF16.mkUTF16be_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9XtR_info" {
     sat_s9XtR_info:
         const sat_s9XtR_entry;
         const 1;
         const 4294967312;
         const S9Xwj_srt+128;
 },
 sat_s9XtS_entry() //  [R1]
         { []
         }
     {offset
       c9Yj2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Yj3; else goto c9Yj4;
       c9Yj3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yj4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF16.mkUTF16_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9XtS_info" {
     sat_s9XtS_info:
         const sat_s9XtS_entry;
         const 1;
         const 4294967312;
         const S9Xwj_srt+136;
 },
 GHC.IO.Encoding.getFileSystemEncoding5_entry() //  [R2, R3]
         { []
         }
     {offset
       c9Yj5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9Yj6; else goto c9Yj7;
       c9Yj6: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.getFileSystemEncoding5_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Yj7: // global
           I64[Sp - 24] = block_c9Yh9_info;
           _s9Xts::P64 = R2;
           R2 = R3;
           P64[Sp - 16] = _s9Xts::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.IO.Encoding.getFileSystemEncoding_go_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding5_info" {
     GHC.IO.Encoding.getFileSystemEncoding5_info:
         const GHC.IO.Encoding.getFileSystemEncoding5_entry;
         const 0;
         const 288230243007725582;
         const 12884901903;
         const S9Xwj_srt+24;
 },
 _c9Yh9() //  [R1]
         { []
         }
     {offset
       c9Yh9: // global
           I64[Sp - 8] = block_c9Yhd_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding79_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Yh9_info" {
     block_c9Yh9_info:
         const _c9Yh9;
         const 2;
         const 8998398866751518;
         const S9Xwj_srt+64;
 },
 _c9Yhd() //  [R1]
         { []
         }
     {offset
       c9Yhd: // global
           if (R1 & 7 == 1) goto c9Yjb; else goto c9Ykm;
       c9Yjb: // global
           I64[Sp] = block_c9Yhh_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding77_closure;
           R2 = P64[Sp + 8];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9Ykm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Ykp; else goto c9Yko;
       c9Ykp: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Yko: // global
           I64[Hp - 16] = sat_s9XtS_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 16;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Yhd_info" {
     block_c9Yhd_info:
         const _c9Yhd;
         const 3;
         const 4494799239381022;
         const S9Xwj_srt+64;
 },
 _c9Yhh() //  [R1]
         { []
         }
     {offset
       c9Yhh: // global
           if (R1 & 7 == 1) goto c9Yje; else goto c9Yki;
       c9Yje: // global
           I64[Sp] = block_c9Yhl_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding75_closure;
           R2 = P64[Sp + 8];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9Yki: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Ykl; else goto c9Ykk;
       c9Ykl: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Ykk: // global
           I64[Hp - 16] = sat_s9XtR_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 16;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Yhh_info" {
     block_c9Yhh_info:
         const _c9Yhh;
         const 3;
         const 2240800402440222;
         const S9Xwj_srt+64;
 },
 _c9Yhl() //  [R1]
         { []
         }
     {offset
       c9Yhl: // global
           if (R1 & 7 == 1) goto c9Yjh; else goto c9Yke;
       c9Yjh: // global
           I64[Sp] = block_c9Yhp_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding73_closure;
           R2 = P64[Sp + 8];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9Yke: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Ykh; else goto c9Ykg;
       c9Ykh: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Ykg: // global
           I64[Hp - 16] = sat_s9XtQ_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 16;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Yhl_info" {
     block_c9Yhl_info:
         const _c9Yhl;
         const 3;
         const 1113800983969822;
         const S9Xwj_srt+64;
 },
 _c9Yhp() //  [R1]
         { []
         }
     {offset
       c9Yhp: // global
           if (R1 & 7 == 1) goto c9Yjk; else goto c9Yka;
       c9Yjk: // global
           I64[Sp] = block_c9Yht_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding71_closure;
           R2 = P64[Sp + 8];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9Yka: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Ykd; else goto c9Ykc;
       c9Ykd: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Ykc: // global
           I64[Hp - 16] = sat_s9XtP_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 16;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Yhp_info" {
     block_c9Yhp_info:
         const _c9Yhp;
         const 3;
         const 550301274734622;
         const S9Xwj_srt+64;
 },
 _c9Yht() //  [R1]
         { []
         }
     {offset
       c9Yht: // global
           if (R1 & 7 == 1) goto c9Yjn; else goto c9Yk6;
       c9Yjn: // global
           I64[Sp] = block_c9Yhx_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding69_closure;
           R2 = P64[Sp + 8];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9Yk6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Yk9; else goto c9Yk8;
       c9Yk9: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Yk8: // global
           I64[Hp - 16] = sat_s9XtO_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 16;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Yht_info" {
     block_c9Yht_info:
         const _c9Yht;
         const 3;
         const 268551420117022;
         const S9Xwj_srt+64;
 },
 _c9Yhx() //  [R1]
         { []
         }
     {offset
       c9Yhx: // global
           if (R1 & 7 == 1) goto c9Yjq; else goto c9Yk2;
       c9Yjq: // global
           _s9Xtv::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9YhB_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding67_closure;
           R2 = _s9Xtv::P64;
           Sp = Sp + 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9Yk2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Yk5; else goto c9Yk4;
       c9Yk5: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Yk4: // global
           I64[Hp - 16] = sat_s9XtN_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 16;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Yhx_info" {
     block_c9Yhx_info:
         const _c9Yhx;
         const 3;
         const 127676492808222;
         const S9Xwj_srt+64;
 },
 _c9YhB() //  [R1]
         { []
         }
     {offset
       c9YhB: // global
           if (R1 & 7 == 1) goto c9Yjt; else goto c9YjY;
       c9Yjt: // global
           I64[Sp] = block_c9YhF_info;
           R4 = GHC.IO.Encoding.getFileSystemEncoding34_closure+2;
           R3 = P64[Sp + 16];
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
       c9YjY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Yk1; else goto c9Yk0;
       c9Yk1: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Yk0: // global
           I64[Hp - 16] = sat_s9XtM_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 16;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9YhB_info" {
     block_c9YhB_info:
         const _c9YhB;
         const 2;
         const 57239029153822;
         const S9Xwj_srt+64;
 },
 _c9YhF() //  [R1]
         { []
         }
     {offset
       c9YhF: // global
           if (R1 & 7 == 1) goto c9Yjw; else goto c9YjU;
       c9Yjw: // global
           I64[Sp] = block_c9YhJ_info;
           R4 = GHC.IO.Encoding.getFileSystemEncoding7_closure+2;
           R3 = P64[Sp + 16];
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
       c9YjU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9YjX; else goto c9YjW;
       c9YjX: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9YjW: // global
           I64[Hp - 16] = sat_s9XtL_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 16;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9YhF_info" {
     block_c9YhF_info:
         const _c9YhF;
         const 2;
         const 22020297326622;
         const S9Xwj_srt+64;
 },
 _c9YhJ() //  [R1]
         { []
         }
     {offset
       c9YhJ: // global
           _s9Xts::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c9YjD; else goto c9YjQ;
       c9YjD: // global
           I64[Sp] = block_c9Yjy_info;
           R3 = P64[Sp + 16];
           R2 = _s9Xts::P64;
           call GHC.IO.Encoding.Iconv.iconvEncoding2_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
       c9YjQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9YjT; else goto c9YjS;
       c9YjT: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9YjS: // global
           I64[Hp - 16] = sat_s9XtK_info;
           P64[Hp] = _s9Xts::P64;
           R1 = Hp - 16;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9YhJ_info" {
     block_c9YhJ_info:
         const _c9YhJ;
         const 2;
         const 4410931413022;
         const S9Xwj_srt+64;
 },
 _c9Yjy() //  [R1]
         { []
         }
     {offset
       c9Yjy: // global
           I64[Sp] = block_c9YjA_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u9YkA; else goto c9YjF;
       u9YkA: // global
           call _c9YjA(R1) args: 0, res: 0, upd: 0;
       c9YjF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Yjy_info" {
     block_c9Yjy_info:
         const _c9Yjy;
         const 2;
         const 4294967326;
         const S9Xwj_srt+64;
 },
 _c9YjA() //  [R1]
         { []
         }
     {offset
       c9YjA: // global
           if (R1 & 7 == 1) goto c9YjL; else goto c9YjP;
       c9YjL: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.IO.Encoding.getFileSystemEncoding6_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
       c9YjP: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9YjA_info" {
     block_c9YjA_info:
         const _c9YjA;
         const 2;
         const 4294967326;
         const S9Xwj_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.569102985 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding9_closure" {
     GHC.IO.Encoding.mkTextEncoding9_closure:
         const GHC.IO.Encoding.mkTextEncoding9_info;
 },
 GHC.IO.Encoding.mkTextEncoding9_entry() //  [R2]
         { []
         }
     {offset
       c9YmA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9YmB; else goto c9YmC;
       c9YmB: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.mkTextEncoding9_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9YmC: // global
           I64[Sp - 8] = block_c9Ymx_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9YmK; else goto c9Ymy;
       u9YmK: // global
           call _c9Ymx(R1) args: 0, res: 0, upd: 0;
       c9Ymy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.mkTextEncoding9_info" {
     GHC.IO.Encoding.mkTextEncoding9_info:
         const GHC.IO.Encoding.mkTextEncoding9_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c9Ymx() //  [R1]
         { []
         }
     {offset
       c9Ymx: // global
           if (I64[R1 + 7] == 47) goto c9YmJ; else goto c9YmI;
       c9YmJ: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9YmI: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Ymx_info" {
     block_c9Ymx_info:
         const _c9Ymx;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.57438781 UTC

[section ""cstring" . GHC.IO.Encoding.mkTextEncoding4_bytes" {
     GHC.IO.Encoding.mkTextEncoding4_bytes:
         I8[] [47,47,84,82,65,78,83,76,73,84]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.576589153 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding3_closure" {
     GHC.IO.Encoding.mkTextEncoding3_closure:
         const GHC.IO.Encoding.mkTextEncoding3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.mkTextEncoding3_entry() //  [R1]
         { []
         }
     {offset
       c9Yn3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Yn4; else goto c9Yn5;
       c9Yn4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yn5: // global
           (_c9Yn0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Yn0::I64 == 0) goto c9Yn2; else goto c9Yn1;
       c9Yn2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Yn1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Yn0::I64;
           R2 = GHC.IO.Encoding.mkTextEncoding4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.mkTextEncoding3_info" {
     GHC.IO.Encoding.mkTextEncoding3_info:
         const GHC.IO.Encoding.mkTextEncoding3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.58040641 UTC

[section ""cstring" . GHC.IO.Encoding.mkTextEncoding6_bytes" {
     GHC.IO.Encoding.mkTextEncoding6_bytes:
         I8[] [47,47,82,79,85,78,68,84,82,73,80]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.582585022 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding5_closure" {
     GHC.IO.Encoding.mkTextEncoding5_closure:
         const GHC.IO.Encoding.mkTextEncoding5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.mkTextEncoding5_entry() //  [R1]
         { []
         }
     {offset
       c9Ynk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Ynl; else goto c9Ynm;
       c9Ynl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Ynm: // global
           (_c9Ynh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Ynh::I64 == 0) goto c9Ynj; else goto c9Yni;
       c9Ynj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Yni: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Ynh::I64;
           R2 = GHC.IO.Encoding.mkTextEncoding6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.mkTextEncoding5_info" {
     GHC.IO.Encoding.mkTextEncoding5_info:
         const GHC.IO.Encoding.mkTextEncoding5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.586195263 UTC

[section ""cstring" . GHC.IO.Encoding.mkTextEncoding8_bytes" {
     GHC.IO.Encoding.mkTextEncoding8_bytes:
         I8[] [47,47,73,71,78,79,82,69]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.588409491 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding7_closure" {
     GHC.IO.Encoding.mkTextEncoding7_closure:
         const GHC.IO.Encoding.mkTextEncoding7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.mkTextEncoding7_entry() //  [R1]
         { []
         }
     {offset
       c9YnB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YnC; else goto c9YnD;
       c9YnC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YnD: // global
           (_c9Yny::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Yny::I64 == 0) goto c9YnA; else goto c9Ynz;
       c9YnA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Ynz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Yny::I64;
           R2 = GHC.IO.Encoding.mkTextEncoding8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.mkTextEncoding7_info" {
     GHC.IO.Encoding.mkTextEncoding7_info:
         const GHC.IO.Encoding.mkTextEncoding7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.594297637 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding1_closure" {
     GHC.IO.Encoding.mkTextEncoding1_closure:
         const GHC.IO.Encoding.mkTextEncoding1_info;
         const 0;
 },
 GHC.IO.Encoding.mkTextEncoding1_entry() //  [R2]
         { []
         }
     {offset
       c9YnY: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9YnZ; else goto c9Yo0;
       c9YnZ: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.mkTextEncoding1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Yo0: // global
           I64[Sp - 16] = block_c9YnP_info;
           R3 = R2;
           _s9XtX::P64 = R2;
           R2 = GHC.IO.Encoding.mkTextEncoding9_closure+1;
           P64[Sp - 8] = _s9XtX::P64;
           Sp = Sp - 16;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.mkTextEncoding1_info" {
     GHC.IO.Encoding.mkTextEncoding1_info:
         const GHC.IO.Encoding.mkTextEncoding1_entry;
         const 0;
         const 8647474238799740942;
         const 8589934597;
         const S9Xwj_srt+16;
 },
 _c9YnP() //  [R1, R2]
         { []
         }
     {offset
       c9YnP: // global
           I64[Sp - 8] = block_c9YnR_info;
           _s9Xu0::P64 = R1;
           R1 = R2;
           P64[Sp] = _s9Xu0::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9YoI; else goto c9YnS;
       u9YoI: // global
           call _c9YnR(R1) args: 0, res: 0, upd: 0;
       c9YnS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9YnP_info" {
     block_c9YnP_info:
         const _c9YnP;
         const 1;
         const 8071013486496317470;
         const S9Xwj_srt+16;
 },
 _c9YnR() //  [R1]
         { []
         }
     {offset
       c9YnR: // global
           if (R1 & 7 == 1) goto c9YnV; else goto c9YnW;
       c9YnV: // global
           R3 = P64[Sp + 8];
           R2 = GHC.IO.Encoding.Failure.ErrorOnCodingFailure_closure+1;
           Sp = Sp + 24;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
       c9YnW: // global
           I64[Sp - 8] = block_c9Yo7_info;
           R3 = GHC.IO.Encoding.mkTextEncoding7_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9YnR_info" {
     block_c9YnR_info:
         const _c9YnR;
         const 2;
         const 8071013486496317470;
         const S9Xwj_srt+16;
 },
 _c9Yo7() //  [R1]
         { []
         }
     {offset
       c9Yo7: // global
           if (R1 & 7 == 1) goto c9Yof; else goto c9YoE;
       c9Yof: // global
           I64[Sp] = block_c9Yoc_info;
           R3 = GHC.IO.Encoding.mkTextEncoding5_closure;
           R2 = P64[Sp + 8];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9YoE: // global
           R3 = P64[Sp + 16];
           R2 = GHC.IO.Encoding.Failure.IgnoreCodingFailure_closure+2;
           Sp = Sp + 32;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Yo7_info" {
     block_c9Yo7_info:
         const _c9Yo7;
         const 3;
         const 3459327468068929566;
         const S9Xwj_srt+16;
 },
 _c9Yoc() //  [R1]
         { []
         }
     {offset
       c9Yoc: // global
           if (R1 & 7 == 1) goto c9Yom; else goto c9YoA;
       c9Yom: // global
           _s9Xu2::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9Yoj_info;
           R3 = GHC.IO.Encoding.mkTextEncoding3_closure;
           R2 = _s9Xu2::P64;
           Sp = Sp + 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9YoA: // global
           R3 = P64[Sp + 16];
           R2 = GHC.IO.Encoding.Failure.RoundtripFailure_closure+4;
           Sp = Sp + 32;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Yoc_info" {
     block_c9Yoc_info:
         const _c9Yoc;
         const 3;
         const 1153484458855235614;
         const S9Xwj_srt+16;
 },
 _c9Yoj() //  [R1]
         { []
         }
     {offset
       c9Yoj: // global
           if (R1 & 7 == 1) goto c9Yos; else goto c9Yow;
       c9Yos: // global
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.IO.Encoding.mkTextEncoding2_entry(R2) args: 8, res: 0, upd: 8;
       c9Yow: // global
           R3 = P64[Sp + 8];
           R2 = GHC.IO.Encoding.Failure.TransliterateCodingFailure_closure+3;
           Sp = Sp + 24;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Yoj_info" {
     block_c9Yoj_info:
         const _c9Yoj;
         const 2;
         const 562954248388638;
         const S9Xwj_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.6063472 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding_closure" {
     GHC.IO.Encoding.mkTextEncoding_closure:
         const GHC.IO.Encoding.mkTextEncoding_info;
         const 0;
 },
 GHC.IO.Encoding.mkTextEncoding_entry() //  [R2]
         { []
         }
     {offset
       c9Ypg: // global
           R2 = R2;
           call GHC.IO.Encoding.mkTextEncoding1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.mkTextEncoding_info" {
     GHC.IO.Encoding.mkTextEncoding_info:
         const GHC.IO.Encoding.mkTextEncoding_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S9Xwj_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.610207063 UTC

[section ""data" . GHC.IO.Encoding.getForeignEncoding4_closure" {
     GHC.IO.Encoding.getForeignEncoding4_closure:
         const GHC.IO.Encoding.getForeignEncoding4_info;
         const 0;
 },
 GHC.IO.Encoding.getForeignEncoding4_entry() //  []
         { []
         }
     {offset
       c9Ypt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Ypu; else goto c9Ypv;
       c9Ypu: // global
           R1 = GHC.IO.Encoding.getForeignEncoding4_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Ypv: // global
           I64[Sp - 8] = block_c9Ypr_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getForeignEncoding4_info" {
     GHC.IO.Encoding.getForeignEncoding4_info:
         const GHC.IO.Encoding.getForeignEncoding4_entry;
         const 0;
         const 211110527500302;
         const 4294967299;
         const S9Xwj_srt+152;
 },
 _c9Ypr() //  []
         { []
         }
     {offset
       c9Ypr: // global
           R3 = GHC.IO.Encoding.Iconv.localeEncodingName_closure;
           R2 = GHC.IO.Encoding.Failure.IgnoreCodingFailure_closure+2;
           Sp = Sp + 8;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Ypr_info" {
     block_c9Ypr_info:
         const _c9Ypr;
         const 0;
         const 70373039144990;
         const S9Xwj_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.615520131 UTC

[section ""data" . GHC.IO.Encoding.getForeignEncoding3_closure" {
     GHC.IO.Encoding.getForeignEncoding3_closure:
         const GHC.IO.Encoding.getForeignEncoding3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getForeignEncoding3_entry() //  [R1]
         { []
         }
     {offset
       c9YpN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9YpO; else goto c9YpP;
       c9YpO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YpP: // global
           (_c9YpI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YpI::I64 == 0) goto c9YpK; else goto c9YpJ;
       c9YpK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YpJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YpI::I64;
           I64[Sp - 24] = block_c9YpL_info;
           Sp = Sp - 24;
           call GHC.IO.Encoding.getForeignEncoding4_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getForeignEncoding3_info" {
     GHC.IO.Encoding.getForeignEncoding3_info:
         const GHC.IO.Encoding.getForeignEncoding3_entry;
         const 0;
         const 4294967317;
         const S9Xwj_srt+272;
 },
 _c9YpL() //  [R1]
         { []
         }
     {offset
       c9YpL: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9YpL_info" {
     block_c9YpL_info:
         const _c9YpL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.622409999 UTC

[section ""data" . GHC.IO.Encoding.getForeignEncoding2_closure" {
     GHC.IO.Encoding.getForeignEncoding2_closure:
         const GHC.IO.Encoding.getForeignEncoding2_info;
         const 0;
 },
 sat_s9Xun_entry() //  [R1, R2]
         { []
         }
     {offset
       c9Yqj: // global
           _s9Xuh::P64 = P64[R1 + 6];
           call MO_WriteBarrier();
           P64[_s9Xuh::P64 + 8] = R2;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9Xuh::P64);
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9Xun_info" {
     sat_s9Xun_info:
         const sat_s9Xun_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 sat_s9Xuj_entry() //  [R1]
         { []
         }
     {offset
       c9Yqs: // global
           R1 = P64[P64[R1 + 7] + 8];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9Xuj_info" {
     sat_s9Xuj_info:
         const sat_s9Xuj_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 GHC.IO.Encoding.getForeignEncoding2_entry() //  []
         { []
         }
     {offset
       c9Yqw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Yqx; else goto c9Yqy;
       c9Yqx: // global
           R1 = GHC.IO.Encoding.getForeignEncoding2_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Yqy: // global
           I64[Sp - 8] = block_c9Yq7_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getForeignEncoding2_info" {
     GHC.IO.Encoding.getForeignEncoding2_info:
         const GHC.IO.Encoding.getForeignEncoding2_entry;
         const 0;
         const 12884901902;
         const 4294967299;
         const S9Xwj_srt+280;
 },
 _c9Yq7() //  []
         { []
         }
     {offset
       c9Yq7: // global
           I64[Sp] = block_c9Yq9_info;
           R1 = GHC.IO.Encoding.getForeignEncoding3_closure;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Yq7_info" {
     block_c9Yq7_info:
         const _c9Yq7;
         const 0;
         const 4294967326;
         const S9Xwj_srt+288;
 },
 _c9Yq9() //  [R1]
         { []
         }
     {offset
       c9Yq9: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9YqC; else goto c9YqB;
       c9YqC: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9YqB: // global
           I64[Hp - 48] = sat_s9Xun_info;
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_s9Xuj_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 46;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Yq9_info" {
     block_c9Yq9_info:
         const _c9Yq9;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.632450565 UTC

[section ""data" . GHC.IO.Encoding.getForeignEncoding1_closure" {
     GHC.IO.Encoding.getForeignEncoding1_closure:
         const GHC.IO.Encoding.getForeignEncoding1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getForeignEncoding1_entry() //  [R1]
         { []
         }
     {offset
       c9Yr9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Yra; else goto c9Yrb;
       c9Yra: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yrb: // global
           (_c9Yr4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Yr4::I64 == 0) goto c9Yr6; else goto c9Yr5;
       c9Yr6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Yr5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Yr4::I64;
           I64[Sp - 24] = block_c9Yr7_info;
           Sp = Sp - 24;
           call GHC.IO.Encoding.getForeignEncoding2_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getForeignEncoding1_info" {
     GHC.IO.Encoding.getForeignEncoding1_info:
         const GHC.IO.Encoding.getForeignEncoding1_entry;
         const 0;
         const 4294967317;
         const S9Xwj_srt+280;
 },
 _c9Yr7() //  [R1]
         { []
         }
     {offset
       c9Yr7: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Yr7_info" {
     block_c9Yr7_info:
         const _c9Yr7;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.638353456 UTC

[section ""data" . GHC.IO.Encoding.getForeignEncoding_closure" {
     GHC.IO.Encoding.getForeignEncoding_closure:
         const GHC.IO.Encoding.getForeignEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getForeignEncoding_entry() //  [R1]
         { []
         }
     {offset
       c9Yry: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Yrz; else goto c9YrA;
       c9Yrz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YrA: // global
           (_c9Yrs::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Yrs::I64 == 0) goto c9Yru; else goto c9Yrt;
       c9Yru: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Yrt: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Yrs::I64;
           I64[Sp - 24] = block_c9Yrv_info;
           R1 = GHC.IO.Encoding.getForeignEncoding1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9YrE; else goto c9Yrw;
       u9YrE: // global
           call _c9Yrv(R1) args: 0, res: 0, upd: 0;
       c9Yrw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getForeignEncoding_info" {
     GHC.IO.Encoding.getForeignEncoding_info:
         const GHC.IO.Encoding.getForeignEncoding_entry;
         const 0;
         const 4294967317;
         const S9Xwj_srt+296;
 },
 _c9Yrv() //  [R1]
         { []
         }
     {offset
       c9Yrv: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Yrv_info" {
     block_c9Yrv_info:
         const _c9Yrv;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.644597308 UTC

[section ""data" . GHC.IO.Encoding.setForeignEncoding_closure" {
     GHC.IO.Encoding.setForeignEncoding_closure:
         const GHC.IO.Encoding.setForeignEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.setForeignEncoding_entry() //  [R1]
         { []
         }
     {offset
       c9YrZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Ys0; else goto c9Ys1;
       c9Ys0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Ys1: // global
           (_c9YrT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YrT::I64 == 0) goto c9YrV; else goto c9YrU;
       c9YrV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YrU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YrT::I64;
           I64[Sp - 24] = block_c9YrW_info;
           R1 = GHC.IO.Encoding.getForeignEncoding1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Ys5; else goto c9YrX;
       u9Ys5: // global
           call _c9YrW(R1) args: 0, res: 0, upd: 0;
       c9YrX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.setForeignEncoding_info" {
     GHC.IO.Encoding.setForeignEncoding_info:
         const GHC.IO.Encoding.setForeignEncoding_entry;
         const 0;
         const 4294967317;
         const S9Xwj_srt+296;
 },
 _c9YrW() //  [R1]
         { []
         }
     {offset
       c9YrW: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9YrW_info" {
     block_c9YrW_info:
         const _c9YrW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.650467249 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding4_closure" {
     GHC.IO.Encoding.getFileSystemEncoding4_closure:
         const GHC.IO.Encoding.getFileSystemEncoding4_info;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding4_entry() //  []
         { []
         }
     {offset
       c9Ysn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Yso; else goto c9Ysp;
       c9Yso: // global
           R1 = GHC.IO.Encoding.getFileSystemEncoding4_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Ysp: // global
           I64[Sp - 8] = block_c9Ysl_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding4_info" {
     GHC.IO.Encoding.getFileSystemEncoding4_info:
         const GHC.IO.Encoding.getFileSystemEncoding4_entry;
         const 0;
         const 2322172852830222;
         const 4294967299;
         const S9Xwj_srt+152;
 },
 _c9Ysl() //  []
         { []
         }
     {offset
       c9Ysl: // global
           R3 = GHC.IO.Encoding.Iconv.localeEncodingName_closure;
           R2 = GHC.IO.Encoding.Failure.RoundtripFailure_closure+4;
           Sp = Sp + 8;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Ysl_info" {
     block_c9Ysl_info:
         const _c9Ysl;
         const 0;
         const 70373039144990;
         const S9Xwj_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.655880347 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding3_closure" {
     GHC.IO.Encoding.getFileSystemEncoding3_closure:
         const GHC.IO.Encoding.getFileSystemEncoding3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding3_entry() //  [R1]
         { []
         }
     {offset
       c9YsH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9YsI; else goto c9YsJ;
       c9YsI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YsJ: // global
           (_c9YsC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YsC::I64 == 0) goto c9YsE; else goto c9YsD;
       c9YsE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YsD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YsC::I64;
           I64[Sp - 24] = block_c9YsF_info;
           Sp = Sp - 24;
           call GHC.IO.Encoding.getFileSystemEncoding4_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding3_info" {
     GHC.IO.Encoding.getFileSystemEncoding3_info:
         const GHC.IO.Encoding.getFileSystemEncoding3_entry;
         const 0;
         const 4294967317;
         const S9Xwj_srt+304;
 },
 _c9YsF() //  [R1]
         { []
         }
     {offset
       c9YsF: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9YsF_info" {
     block_c9YsF_info:
         const _c9YsF;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.662592723 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding2_closure" {
     GHC.IO.Encoding.getFileSystemEncoding2_closure:
         const GHC.IO.Encoding.getFileSystemEncoding2_info;
         const 0;
 },
 sat_s9XuN_entry() //  [R1, R2]
         { []
         }
     {offset
       c9Ytd: // global
           _s9XuH::P64 = P64[R1 + 6];
           call MO_WriteBarrier();
           P64[_s9XuH::P64 + 8] = R2;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9XuH::P64);
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9XuN_info" {
     sat_s9XuN_info:
         const sat_s9XuN_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 sat_s9XuJ_entry() //  [R1]
         { []
         }
     {offset
       c9Ytm: // global
           R1 = P64[P64[R1 + 7] + 8];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9XuJ_info" {
     sat_s9XuJ_info:
         const sat_s9XuJ_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 GHC.IO.Encoding.getFileSystemEncoding2_entry() //  []
         { []
         }
     {offset
       c9Ytq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Ytr; else goto c9Yts;
       c9Ytr: // global
           R1 = GHC.IO.Encoding.getFileSystemEncoding2_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Yts: // global
           I64[Sp - 8] = block_c9Yt1_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding2_info" {
     GHC.IO.Encoding.getFileSystemEncoding2_info:
         const GHC.IO.Encoding.getFileSystemEncoding2_entry;
         const 0;
         const 12884901902;
         const 4294967299;
         const S9Xwj_srt+312;
 },
 _c9Yt1() //  []
         { []
         }
     {offset
       c9Yt1: // global
           I64[Sp] = block_c9Yt3_info;
           R1 = GHC.IO.Encoding.getFileSystemEncoding3_closure;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Yt1_info" {
     block_c9Yt1_info:
         const _c9Yt1;
         const 0;
         const 4294967326;
         const S9Xwj_srt+320;
 },
 _c9Yt3() //  [R1]
         { []
         }
     {offset
       c9Yt3: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9Ytw; else goto c9Ytv;
       c9Ytw: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Ytv: // global
           I64[Hp - 48] = sat_s9XuN_info;
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_s9XuJ_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 46;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Yt3_info" {
     block_c9Yt3_info:
         const _c9Yt3;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.672536831 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding1_closure" {
     GHC.IO.Encoding.getFileSystemEncoding1_closure:
         const GHC.IO.Encoding.getFileSystemEncoding1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding1_entry() //  [R1]
         { []
         }
     {offset
       c9Yu3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Yu4; else goto c9Yu5;
       c9Yu4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yu5: // global
           (_c9YtY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YtY::I64 == 0) goto c9Yu0; else goto c9YtZ;
       c9Yu0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YtZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YtY::I64;
           I64[Sp - 24] = block_c9Yu1_info;
           Sp = Sp - 24;
           call GHC.IO.Encoding.getFileSystemEncoding2_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding1_info" {
     GHC.IO.Encoding.getFileSystemEncoding1_info:
         const GHC.IO.Encoding.getFileSystemEncoding1_entry;
         const 0;
         const 4294967317;
         const S9Xwj_srt+312;
 },
 _c9Yu1() //  [R1]
         { []
         }
     {offset
       c9Yu1: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Yu1_info" {
     block_c9Yu1_info:
         const _c9Yu1;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.678751917 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding_closure" {
     GHC.IO.Encoding.getFileSystemEncoding_closure:
         const GHC.IO.Encoding.getFileSystemEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding_entry() //  [R1]
         { []
         }
     {offset
       c9Yus: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Yut; else goto c9Yuu;
       c9Yut: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yuu: // global
           (_c9Yum::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Yum::I64 == 0) goto c9Yuo; else goto c9Yun;
       c9Yuo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Yun: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Yum::I64;
           I64[Sp - 24] = block_c9Yup_info;
           R1 = GHC.IO.Encoding.getFileSystemEncoding1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Yuy; else goto c9Yuq;
       u9Yuy: // global
           call _c9Yup(R1) args: 0, res: 0, upd: 0;
       c9Yuq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding_info" {
     GHC.IO.Encoding.getFileSystemEncoding_info:
         const GHC.IO.Encoding.getFileSystemEncoding_entry;
         const 0;
         const 4294967317;
         const S9Xwj_srt+328;
 },
 _c9Yup() //  [R1]
         { []
         }
     {offset
       c9Yup: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Yup_info" {
     block_c9Yup_info:
         const _c9Yup;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.683984231 UTC

[section ""data" . GHC.IO.Encoding.argvEncoding_closure" {
     GHC.IO.Encoding.argvEncoding_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.getFileSystemEncoding_closure;
         const 0;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.68647634 UTC

[section ""data" . GHC.IO.Encoding.setFileSystemEncoding_closure" {
     GHC.IO.Encoding.setFileSystemEncoding_closure:
         const GHC.IO.Encoding.setFileSystemEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.setFileSystemEncoding_entry() //  [R1]
         { []
         }
     {offset
       c9YuU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9YuV; else goto c9YuW;
       c9YuV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YuW: // global
           (_c9YuO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YuO::I64 == 0) goto c9YuQ; else goto c9YuP;
       c9YuQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YuP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YuO::I64;
           I64[Sp - 24] = block_c9YuR_info;
           R1 = GHC.IO.Encoding.getFileSystemEncoding1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Yv0; else goto c9YuS;
       u9Yv0: // global
           call _c9YuR(R1) args: 0, res: 0, upd: 0;
       c9YuS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.setFileSystemEncoding_info" {
     GHC.IO.Encoding.setFileSystemEncoding_info:
         const GHC.IO.Encoding.setFileSystemEncoding_entry;
         const 0;
         const 4294967317;
         const S9Xwj_srt+328;
 },
 _c9YuR() //  [R1]
         { []
         }
     {offset
       c9YuR: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9YuR_info" {
     block_c9YuR_info:
         const _c9YuR;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.691774445 UTC

[section ""data" . GHC.IO.Encoding.initLocaleEncoding1_closure" {
     GHC.IO.Encoding.initLocaleEncoding1_closure:
         const GHC.IO.Encoding.initLocaleEncoding1_info;
         const 0;
 },
 GHC.IO.Encoding.initLocaleEncoding1_entry() //  []
         { []
         }
     {offset
       c9Yvi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Yvj; else goto c9Yvk;
       c9Yvj: // global
           R1 = GHC.IO.Encoding.initLocaleEncoding1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Yvk: // global
           I64[Sp - 8] = block_c9Yvg_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.initLocaleEncoding1_info" {
     GHC.IO.Encoding.initLocaleEncoding1_info:
         const GHC.IO.Encoding.initLocaleEncoding1_entry;
         const 0;
         const 36099170058108942;
         const 4294967299;
         const S9Xwj_srt+152;
 },
 _c9Yvg() //  []
         { []
         }
     {offset
       c9Yvg: // global
           R3 = GHC.IO.Encoding.Iconv.localeEncodingName_closure;
           R2 = GHC.IO.Encoding.Failure.ErrorOnCodingFailure_closure+1;
           Sp = Sp + 8;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Yvg_info" {
     block_c9Yvg_info:
         const _c9Yvg;
         const 0;
         const 70373039144990;
         const S9Xwj_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.697058302 UTC

[section ""data" . GHC.IO.Encoding.initLocaleEncoding_closure" {
     GHC.IO.Encoding.initLocaleEncoding_closure:
         const GHC.IO.Encoding.initLocaleEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.initLocaleEncoding_entry() //  [R1]
         { []
         }
     {offset
       c9YvC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9YvD; else goto c9YvE;
       c9YvD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YvE: // global
           (_c9Yvx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Yvx::I64 == 0) goto c9Yvz; else goto c9Yvy;
       c9Yvz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Yvy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Yvx::I64;
           I64[Sp - 24] = block_c9YvA_info;
           Sp = Sp - 24;
           call GHC.IO.Encoding.initLocaleEncoding1_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.initLocaleEncoding_info" {
     GHC.IO.Encoding.initLocaleEncoding_info:
         const GHC.IO.Encoding.initLocaleEncoding_entry;
         const 0;
         const 4294967317;
         const S9Xwj_srt+336;
 },
 _c9YvA() //  [R1]
         { []
         }
     {offset
       c9YvA: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9YvA_info" {
     block_c9YvA_info:
         const _c9YvA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.703661541 UTC

[section ""data" . GHC.IO.Encoding.getLocaleEncoding2_closure" {
     GHC.IO.Encoding.getLocaleEncoding2_closure:
         const GHC.IO.Encoding.getLocaleEncoding2_info;
         const 0;
 },
 sat_s9Xvd_entry() //  [R1, R2]
         { []
         }
     {offset
       c9Yw8: // global
           _s9Xv7::P64 = P64[R1 + 6];
           call MO_WriteBarrier();
           P64[_s9Xv7::P64 + 8] = R2;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9Xv7::P64);
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9Xvd_info" {
     sat_s9Xvd_info:
         const sat_s9Xvd_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 sat_s9Xv9_entry() //  [R1]
         { []
         }
     {offset
       c9Ywh: // global
           R1 = P64[P64[R1 + 7] + 8];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9Xv9_info" {
     sat_s9Xv9_info:
         const sat_s9Xv9_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 GHC.IO.Encoding.getLocaleEncoding2_entry() //  []
         { []
         }
     {offset
       c9Ywl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Ywm; else goto c9Ywn;
       c9Ywm: // global
           R1 = GHC.IO.Encoding.getLocaleEncoding2_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Ywn: // global
           I64[Sp - 8] = block_c9YvW_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getLocaleEncoding2_info" {
     GHC.IO.Encoding.getLocaleEncoding2_info:
         const GHC.IO.Encoding.getLocaleEncoding2_entry;
         const 0;
         const 12884901902;
         const 4294967299;
         const S9Xwj_srt+344;
 },
 _c9YvW() //  []
         { []
         }
     {offset
       c9YvW: // global
           I64[Sp] = block_c9YvY_info;
           R1 = GHC.IO.Encoding.initLocaleEncoding_closure;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9YvW_info" {
     block_c9YvW_info:
         const _c9YvW;
         const 0;
         const 4294967326;
         const S9Xwj_srt+344;
 },
 _c9YvY() //  [R1]
         { []
         }
     {offset
       c9YvY: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9Ywr; else goto c9Ywq;
       c9Ywr: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Ywq: // global
           I64[Hp - 48] = sat_s9Xvd_info;
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_s9Xv9_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 46;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9YvY_info" {
     block_c9YvY_info:
         const _c9YvY;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.714508656 UTC

[section ""data" . GHC.IO.Encoding.getLocaleEncoding1_closure" {
     GHC.IO.Encoding.getLocaleEncoding1_closure:
         const GHC.IO.Encoding.getLocaleEncoding1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getLocaleEncoding1_entry() //  [R1]
         { []
         }
     {offset
       c9YwY: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9YwZ; else goto c9Yx0;
       c9YwZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yx0: // global
           (_c9YwT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YwT::I64 == 0) goto c9YwV; else goto c9YwU;
       c9YwV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YwU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YwT::I64;
           I64[Sp - 24] = block_c9YwW_info;
           Sp = Sp - 24;
           call GHC.IO.Encoding.getLocaleEncoding2_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getLocaleEncoding1_info" {
     GHC.IO.Encoding.getLocaleEncoding1_info:
         const GHC.IO.Encoding.getLocaleEncoding1_entry;
         const 0;
         const 4294967317;
         const S9Xwj_srt+352;
 },
 _c9YwW() //  [R1]
         { []
         }
     {offset
       c9YwW: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9YwW_info" {
     block_c9YwW_info:
         const _c9YwW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.720067368 UTC

[section ""data" . GHC.IO.Encoding.getLocaleEncoding_closure" {
     GHC.IO.Encoding.getLocaleEncoding_closure:
         const GHC.IO.Encoding.getLocaleEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getLocaleEncoding_entry() //  [R1]
         { []
         }
     {offset
       c9Yxn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Yxo; else goto c9Yxp;
       c9Yxo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yxp: // global
           (_c9Yxh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Yxh::I64 == 0) goto c9Yxj; else goto c9Yxi;
       c9Yxj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Yxi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Yxh::I64;
           I64[Sp - 24] = block_c9Yxk_info;
           R1 = GHC.IO.Encoding.getLocaleEncoding1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Yxt; else goto c9Yxl;
       u9Yxt: // global
           call _c9Yxk(R1) args: 0, res: 0, upd: 0;
       c9Yxl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getLocaleEncoding_info" {
     GHC.IO.Encoding.getLocaleEncoding_info:
         const GHC.IO.Encoding.getLocaleEncoding_entry;
         const 0;
         const 4294967317;
         const S9Xwj_srt+360;
 },
 _c9Yxk() //  [R1]
         { []
         }
     {offset
       c9Yxk: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Yxk_info" {
     block_c9Yxk_info:
         const _c9Yxk;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.726078284 UTC

[section ""data" . GHC.IO.Encoding.setLocaleEncoding_closure" {
     GHC.IO.Encoding.setLocaleEncoding_closure:
         const GHC.IO.Encoding.setLocaleEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.setLocaleEncoding_entry() //  [R1]
         { []
         }
     {offset
       c9YxO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9YxP; else goto c9YxQ;
       c9YxP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YxQ: // global
           (_c9YxI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YxI::I64 == 0) goto c9YxK; else goto c9YxJ;
       c9YxK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YxJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YxI::I64;
           I64[Sp - 24] = block_c9YxL_info;
           R1 = GHC.IO.Encoding.getLocaleEncoding1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9YxU; else goto c9YxM;
       u9YxU: // global
           call _c9YxL(R1) args: 0, res: 0, upd: 0;
       c9YxM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.setLocaleEncoding_info" {
     GHC.IO.Encoding.setLocaleEncoding_info:
         const GHC.IO.Encoding.setLocaleEncoding_entry;
         const 0;
         const 4294967317;
         const S9Xwj_srt+360;
 },
 _c9YxL() //  [R1]
         { []
         }
     {offset
       c9YxL: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9YxL_info" {
     block_c9YxL_info:
         const _c9YxL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.732393804 UTC

[section ""data" . GHC.IO.Encoding.latin1_decode1_closure" {
     GHC.IO.Encoding.latin1_decode1_closure:
         const GHC.IO.Encoding.latin1_decode1_info;
 },
 sat_s9Xvy_entry() //  [R1]
         { []
         }
     {offset
       c9Yyj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Yyn; else goto c9Yyo;
       c9Yyn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yyo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c9Yyg_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Yys; else goto c9Yyh;
       u9Yys: // global
           call _c9Yyg(R1) args: 0, res: 0, upd: 0;
       c9Yyh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9Xvy_info" {
     sat_s9Xvy_info:
         const sat_s9Xvy_entry;
         const 1;
         const 16;
 },
 _c9Yyg() //  [R1]
         { []
         }
     {offset
       c9Yyg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Yyr; else goto c9Yyq;
       c9Yyr: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9Yyq: // global
           _s9Xvw::P64 = P64[R1 + 15];
           _s9Xvx::P64 = P64[R1 + 23];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s9Xvw::P64;
           P64[Hp] = _s9Xvx::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Yyg_info" {
     block_c9Yyg_info:
         const _c9Yyg;
         const 0;
         const 30;
 },
 GHC.IO.Encoding.latin1_decode1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9Yyt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Yyu; else goto c9Yyv;
       c9Yyu: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.latin1_decode1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Yyv: // global
           I64[Sp - 8] = block_c9Yya_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Encoding.Latin1.latin5_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.latin1_decode1_info" {
     GHC.IO.Encoding.latin1_decode1_info:
         const GHC.IO.Encoding.latin1_decode1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c9Yya() //  [R1]
         { []
         }
     {offset
       c9Yya: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Yyy; else goto c9Yyx;
       c9Yyy: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Yyx: // global
           I64[Hp - 16] = sat_s9Xvy_info;
           P64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Yya_info" {
     block_c9Yya_info:
         const _c9Yya;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.740982296 UTC

[section ""data" . GHC.IO.Encoding.latin1_decode_closure" {
     GHC.IO.Encoding.latin1_decode_closure:
         const GHC.IO.Encoding.latin1_decode_info;
 },
 GHC.IO.Encoding.latin1_decode_entry() //  [R2, R3]
         { []
         }
     {offset
       c9YyV: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Encoding.latin1_decode1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.latin1_decode_info" {
     GHC.IO.Encoding.latin1_decode_info:
         const GHC.IO.Encoding.latin1_decode_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.745840347 UTC

[section ""data" . GHC.IO.Encoding.latin1_encode1_closure" {
     GHC.IO.Encoding.latin1_encode1_closure:
         const GHC.IO.Encoding.latin1_encode1_info;
 },
 sat_s9XvJ_entry() //  [R1]
         { []
         }
     {offset
       c9Yzf: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Yzj; else goto c9Yzk;
       c9Yzj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yzk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c9Yzc_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Yzo; else goto c9Yzd;
       u9Yzo: // global
           call _c9Yzc(R1) args: 0, res: 0, upd: 0;
       c9Yzd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9XvJ_info" {
     sat_s9XvJ_info:
         const sat_s9XvJ_entry;
         const 1;
         const 16;
 },
 _c9Yzc() //  [R1]
         { []
         }
     {offset
       c9Yzc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Yzn; else goto c9Yzm;
       c9Yzn: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9Yzm: // global
           _s9XvH::P64 = P64[R1 + 15];
           _s9XvI::P64 = P64[R1 + 23];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s9XvH::P64;
           P64[Hp] = _s9XvI::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Yzc_info" {
     block_c9Yzc_info:
         const _c9Yzc;
         const 0;
         const 30;
 },
 GHC.IO.Encoding.latin1_encode1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9Yzp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Yzq; else goto c9Yzr;
       c9Yzq: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.latin1_encode1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Yzr: // global
           I64[Sp - 8] = block_c9Yz6_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Encoding.Latin1.latin3_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.latin1_encode1_info" {
     GHC.IO.Encoding.latin1_encode1_info:
         const GHC.IO.Encoding.latin1_encode1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c9Yz6() //  [R1]
         { []
         }
     {offset
       c9Yz6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Yzu; else goto c9Yzt;
       c9Yzu: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Yzt: // global
           I64[Hp - 16] = sat_s9XvJ_info;
           P64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Yz6_info" {
     block_c9Yz6_info:
         const _c9Yz6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.754511929 UTC

[section ""data" . GHC.IO.Encoding.latin1_encode_closure" {
     GHC.IO.Encoding.latin1_encode_closure:
         const GHC.IO.Encoding.latin1_encode_info;
 },
 GHC.IO.Encoding.latin1_encode_entry() //  [R2, R3]
         { []
         }
     {offset
       c9YzR: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Encoding.latin1_encode1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.latin1_encode_info" {
     GHC.IO.Encoding.latin1_encode_info:
         const GHC.IO.Encoding.latin1_encode_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:02.758078386 UTC

[section ""relreadonly" . S9Xwj_srt" {
     S9Xwj_srt:
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
         const lvl1_r9XsX_closure;
         const GHC.IO.Encoding.mkTextEncoding2_closure;
         const GHC.IO.Encoding.getFileSystemEncoding_go_closure;
         const GHC.Char.$wlvl_closure;
         const GHC.IO.Encoding.Failure.codingFailureModeSuffix1_closure;
         const GHC.IO.Encoding.Failure.codingFailureModeSuffix3_closure;
         const GHC.IO.Encoding.Failure.codingFailureModeSuffix5_closure;
         const GHC.IO.Encoding.getFileSystemEncoding6_closure;
         const GHC.IO.Encoding.Latin1.mkLatin1_checked_closure;
         const GHC.IO.Encoding.Latin1.mkAscii_closure;
         const GHC.IO.Encoding.UTF8.mkUTF8_closure;
         const GHC.IO.Encoding.UTF32.mkUTF32le_closure;
         const GHC.IO.Encoding.UTF32.mkUTF32be_closure;
         const GHC.IO.Encoding.UTF32.mkUTF32_closure;
         const GHC.IO.Encoding.UTF16.mkUTF16le_closure;
         const GHC.IO.Encoding.UTF16.mkUTF16be_closure;
         const GHC.IO.Encoding.UTF16.mkUTF16_closure;
         const GHC.IO.Encoding.Iconv.iconvEncoding2_closure;
         const GHC.IO.Encoding.getFileSystemEncoding5_closure;
         const GHC.IO.Encoding.getFileSystemEncoding7_closure;
         const GHC.IO.Encoding.getFileSystemEncoding34_closure;
         const GHC.IO.Encoding.getFileSystemEncoding67_closure;
         const GHC.IO.Encoding.getFileSystemEncoding69_closure;
         const GHC.IO.Encoding.getFileSystemEncoding71_closure;
         const GHC.IO.Encoding.getFileSystemEncoding73_closure;
         const GHC.IO.Encoding.getFileSystemEncoding75_closure;
         const GHC.IO.Encoding.getFileSystemEncoding77_closure;
         const GHC.IO.Encoding.getFileSystemEncoding79_closure;
         const GHC.IO.Encoding.mkTextEncoding1_closure;
         const GHC.IO.Encoding.mkTextEncoding3_closure;
         const GHC.IO.Encoding.mkTextEncoding5_closure;
         const GHC.IO.Encoding.mkTextEncoding7_closure;
         const GHC.IO.Encoding.Iconv.localeEncodingName_closure;
         const GHC.IO.Encoding.getForeignEncoding4_closure;
         const GHC.IO.Encoding.getForeignEncoding2_closure;
         const GHC.IO.Encoding.getForeignEncoding3_closure;
         const GHC.IO.Encoding.getForeignEncoding1_closure;
         const GHC.IO.Encoding.getFileSystemEncoding4_closure;
         const GHC.IO.Encoding.getFileSystemEncoding2_closure;
         const GHC.IO.Encoding.getFileSystemEncoding3_closure;
         const GHC.IO.Encoding.getFileSystemEncoding1_closure;
         const GHC.IO.Encoding.initLocaleEncoding1_closure;
         const GHC.IO.Encoding.initLocaleEncoding_closure;
         const GHC.IO.Encoding.getLocaleEncoding2_closure;
         const GHC.IO.Encoding.getLocaleEncoding1_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.605771583 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:05:03.606880809 UTC

[section ""data" . GHC.IO.Encoding.latin1_closure" {
     GHC.IO.Encoding.latin1_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.Latin1.latin1_checked_closure;
         const 0;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.608723918 UTC

[section ""data" . GHC.IO.Encoding.utf8_closure" {
     GHC.IO.Encoding.utf8_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF8.utf8_closure;
         const 0;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.610525916 UTC

[section ""data" . GHC.IO.Encoding.utf8_bom_closure" {
     GHC.IO.Encoding.utf8_bom_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF8.utf8_bom_closure;
         const 0;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.612313281 UTC

[section ""data" . GHC.IO.Encoding.utf16_closure" {
     GHC.IO.Encoding.utf16_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF16.utf16_closure;
         const 0;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.614100042 UTC

[section ""data" . GHC.IO.Encoding.utf16le_closure" {
     GHC.IO.Encoding.utf16le_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF16.utf16le_closure;
         const 0;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.615770834 UTC

[section ""data" . GHC.IO.Encoding.utf16be_closure" {
     GHC.IO.Encoding.utf16be_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF16.utf16be_closure;
         const 0;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.617731678 UTC

[section ""data" . GHC.IO.Encoding.utf32_closure" {
     GHC.IO.Encoding.utf32_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF32.utf32_closure;
         const 0;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.619534138 UTC

[section ""data" . GHC.IO.Encoding.utf32le_closure" {
     GHC.IO.Encoding.utf32le_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF32.utf32le_closure;
         const 0;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.621382875 UTC

[section ""data" . GHC.IO.Encoding.utf32be_closure" {
     GHC.IO.Encoding.utf32be_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF32.utf32be_closure;
         const 0;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.623205592 UTC

[section ""data" . GHC.IO.Encoding.char8_closure" {
     GHC.IO.Encoding.char8_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.Latin1.latin1_closure;
         const 0;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.624989243 UTC

[section ""cstring" . lvl_r9XsW_bytes" {
     lvl_r9XsW_bytes:
         I8[] [109,107,84,101,120,116,69,110,99,111,100,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.628062997 UTC

[section ""data" . lvl1_r9XsX_closure" {
     lvl1_r9XsX_closure:
         const lvl1_r9XsX_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r9XsX_entry() //  [R1]
         { []
         }
     {offset
       c9YD0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YD1; else goto c9YD2;
       c9YD1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YD2: // global
           (_c9YCX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YCX::I64 == 0) goto c9YCZ; else goto c9YCY;
       c9YCZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YCY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YCX::I64;
           R2 = lvl_r9XsW_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_r9XsX_info" {
     lvl1_r9XsX_info:
         const lvl1_r9XsX_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.63192326 UTC

[section ""cstring" . lvl2_r9XsY_bytes" {
     lvl2_r9XsY_bytes:
         I8[] [117,110,107,110,111,119,110,32,101,110,99,111,100,105,110,103,58]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.634945134 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding2_closure" {
     GHC.IO.Encoding.mkTextEncoding2_closure:
         const GHC.IO.Encoding.mkTextEncoding2_info;
         const 0;
 },
 sat_s9YA1_entry() //  [R1]
         { []
         }
     {offset
       c9YDo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YDp; else goto c9YDq;
       c9YDp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YDq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl2_r9XsY_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9YA1_info" {
     sat_s9YA1_info:
         const sat_s9YA1_entry;
         const 1;
         const 16;
 },
 sat_s9YA3_entry() //  [R1]
         { []
         }
     {offset
       c9YDs: // global
           _s9YA3::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9YDt; else goto c9YDu;
       c9YDu: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c9YDw; else goto c9YDv;
       c9YDw: // global
           HpAlloc = 80;
           goto c9YDt;
       c9YDt: // global
           R1 = _s9YA3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YDv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9YA3::P64;
           _s9YzZ::P64 = P64[_s9YA3::P64 + 16];
           I64[Hp - 72] = sat_s9YA1_info;
           P64[Hp - 56] = _s9YzZ::P64;
           I64[Hp - 48] = GHC.IO.Exception.IOError_con_info;
           P64[Hp - 40] = GHC.Base.Nothing_closure+1;
           P64[Hp - 32] = GHC.IO.Exception.NoSuchThing_closure+1;
           P64[Hp - 24] = lvl1_r9XsX_closure;
           P64[Hp - 16] = Hp - 72;
           P64[Hp - 8] = GHC.Base.Nothing_closure+1;
           P64[Hp] = GHC.Base.Nothing_closure+1;
           R2 = Hp - 47;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9YA3_info" {
     sat_s9YA3_info:
         const sat_s9YA3_entry;
         const 1;
         const 12884901904;
         const S9YDC_srt;
 },
 GHC.IO.Encoding.mkTextEncoding2_entry() //  [R2]
         { []
         }
     {offset
       c9YDx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9YDB; else goto c9YDA;
       c9YDB: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Encoding.mkTextEncoding2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9YDA: // global
           I64[Hp - 16] = sat_s9YA3_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.mkTextEncoding2_info" {
     GHC.IO.Encoding.mkTextEncoding2_info:
         const GHC.IO.Encoding.mkTextEncoding2_entry;
         const 0;
         const 30064771086;
         const 8589934597;
         const S9YDC_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.641914725 UTC

[section ""cstring" . GHC.IO.Encoding.$trModule4_bytes" {
     GHC.IO.Encoding.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.643650258 UTC

[section ""data" . GHC.IO.Encoding.$trModule3_closure" {
     GHC.IO.Encoding.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.645732802 UTC

[section ""cstring" . GHC.IO.Encoding.$trModule2_bytes" {
     GHC.IO.Encoding.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,46,69,110,99,111,100,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.647453873 UTC

[section ""data" . GHC.IO.Encoding.$trModule1_closure" {
     GHC.IO.Encoding.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.649383307 UTC

[section ""data" . GHC.IO.Encoding.$trModule_closure" {
     GHC.IO.Encoding.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.Encoding.$trModule3_closure+1;
         const GHC.IO.Encoding.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.651137696 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding33_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding33_bytes:
         I8[] [73,83,79,95,56,56,53,57,45,49,58,49,57,56,55]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.654039892 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding32_closure" {
     GHC.IO.Encoding.getFileSystemEncoding32_closure:
         const GHC.IO.Encoding.getFileSystemEncoding32_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding32_entry() //  [R1]
         { []
         }
     {offset
       c9YEg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YEh; else goto c9YEi;
       c9YEh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YEi: // global
           (_c9YEd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YEd::I64 == 0) goto c9YEf; else goto c9YEe;
       c9YEf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YEe: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YEd::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding33_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding32_info" {
     GHC.IO.Encoding.getFileSystemEncoding32_info:
         const GHC.IO.Encoding.getFileSystemEncoding32_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.657662541 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding31_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding31_bytes:
         I8[] [105,115,111,45,105,114,45,49,48,48]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.659754028 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding30_closure" {
     GHC.IO.Encoding.getFileSystemEncoding30_closure:
         const GHC.IO.Encoding.getFileSystemEncoding30_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding30_entry() //  [R1]
         { []
         }
     {offset
       c9YEy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YEz; else goto c9YEA;
       c9YEz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YEA: // global
           (_c9YEv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YEv::I64 == 0) goto c9YEx; else goto c9YEw;
       c9YEx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YEw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YEv::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding31_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding30_info" {
     GHC.IO.Encoding.getFileSystemEncoding30_info:
         const GHC.IO.Encoding.getFileSystemEncoding30_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.663864415 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding29_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding29_bytes:
         I8[] [73,83,79,95,56,56,53,57,45,49]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.666139563 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding28_closure" {
     GHC.IO.Encoding.getFileSystemEncoding28_closure:
         const GHC.IO.Encoding.getFileSystemEncoding28_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding28_entry() //  [R1]
         { []
         }
     {offset
       c9YEQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YER; else goto c9YES;
       c9YER: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YES: // global
           (_c9YEN::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YEN::I64 == 0) goto c9YEP; else goto c9YEO;
       c9YEP: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YEO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YEN::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding29_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding28_info" {
     GHC.IO.Encoding.getFileSystemEncoding28_info:
         const GHC.IO.Encoding.getFileSystemEncoding28_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.669637616 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding27_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding27_bytes:
         I8[] [73,83,79,45,56,56,53,57,45,49]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.671834097 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding26_closure" {
     GHC.IO.Encoding.getFileSystemEncoding26_closure:
         const GHC.IO.Encoding.getFileSystemEncoding26_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding26_entry() //  [R1]
         { []
         }
     {offset
       c9YF8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YF9; else goto c9YFa;
       c9YF9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YFa: // global
           (_c9YF5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YF5::I64 == 0) goto c9YF7; else goto c9YF6;
       c9YF7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YF6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YF5::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding27_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding26_info" {
     GHC.IO.Encoding.getFileSystemEncoding26_info:
         const GHC.IO.Encoding.getFileSystemEncoding26_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.675402066 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding25_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding25_bytes:
         I8[] [108,97,116,105,110,49]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.678225206 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding24_closure" {
     GHC.IO.Encoding.getFileSystemEncoding24_closure:
         const GHC.IO.Encoding.getFileSystemEncoding24_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding24_entry() //  [R1]
         { []
         }
     {offset
       c9YFq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YFr; else goto c9YFs;
       c9YFr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YFs: // global
           (_c9YFn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YFn::I64 == 0) goto c9YFp; else goto c9YFo;
       c9YFp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YFo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YFn::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding25_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding24_info" {
     GHC.IO.Encoding.getFileSystemEncoding24_info:
         const GHC.IO.Encoding.getFileSystemEncoding24_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.682290385 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding23_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding23_bytes:
         I8[] [108,49]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.684451783 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding22_closure" {
     GHC.IO.Encoding.getFileSystemEncoding22_closure:
         const GHC.IO.Encoding.getFileSystemEncoding22_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding22_entry() //  [R1]
         { []
         }
     {offset
       c9YFI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YFJ; else goto c9YFK;
       c9YFJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YFK: // global
           (_c9YFF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YFF::I64 == 0) goto c9YFH; else goto c9YFG;
       c9YFH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YFG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YFF::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding23_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding22_info" {
     GHC.IO.Encoding.getFileSystemEncoding22_info:
         const GHC.IO.Encoding.getFileSystemEncoding22_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.688386659 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding21_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding21_bytes:
         I8[] [73,66,77,56,49,57]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.690655091 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding20_closure" {
     GHC.IO.Encoding.getFileSystemEncoding20_closure:
         const GHC.IO.Encoding.getFileSystemEncoding20_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding20_entry() //  [R1]
         { []
         }
     {offset
       c9YG0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YG1; else goto c9YG2;
       c9YG1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YG2: // global
           (_c9YFX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YFX::I64 == 0) goto c9YFZ; else goto c9YFY;
       c9YFZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YFY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YFX::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding21_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding20_info" {
     GHC.IO.Encoding.getFileSystemEncoding20_info:
         const GHC.IO.Encoding.getFileSystemEncoding20_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.694428355 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding19_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding19_bytes:
         I8[] [67,80,56,49,57]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.696601607 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding18_closure" {
     GHC.IO.Encoding.getFileSystemEncoding18_closure:
         const GHC.IO.Encoding.getFileSystemEncoding18_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding18_entry() //  [R1]
         { []
         }
     {offset
       c9YGi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YGj; else goto c9YGk;
       c9YGj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YGk: // global
           (_c9YGf::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YGf::I64 == 0) goto c9YGh; else goto c9YGg;
       c9YGh: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YGg: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YGf::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding19_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding18_info" {
     GHC.IO.Encoding.getFileSystemEncoding18_info:
         const GHC.IO.Encoding.getFileSystemEncoding18_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.700153038 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding17_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding17_bytes:
         I8[] [99,115,73,83,79,76,97,116,105,110,49]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.702716797 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding16_closure" {
     GHC.IO.Encoding.getFileSystemEncoding16_closure:
         const GHC.IO.Encoding.getFileSystemEncoding16_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding16_entry() //  [R1]
         { []
         }
     {offset
       c9YGA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YGB; else goto c9YGC;
       c9YGB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YGC: // global
           (_c9YGx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YGx::I64 == 0) goto c9YGz; else goto c9YGy;
       c9YGz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YGy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YGx::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding17_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding16_info" {
     GHC.IO.Encoding.getFileSystemEncoding16_info:
         const GHC.IO.Encoding.getFileSystemEncoding16_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.706448268 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding15_closure" {
     GHC.IO.Encoding.getFileSystemEncoding15_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding16_closure;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.708615556 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding14_closure" {
     GHC.IO.Encoding.getFileSystemEncoding14_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding18_closure;
         const GHC.IO.Encoding.getFileSystemEncoding15_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.710628534 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding13_closure" {
     GHC.IO.Encoding.getFileSystemEncoding13_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding20_closure;
         const GHC.IO.Encoding.getFileSystemEncoding14_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.712266859 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding12_closure" {
     GHC.IO.Encoding.getFileSystemEncoding12_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding22_closure;
         const GHC.IO.Encoding.getFileSystemEncoding13_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.714050605 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding11_closure" {
     GHC.IO.Encoding.getFileSystemEncoding11_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding24_closure;
         const GHC.IO.Encoding.getFileSystemEncoding12_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.715702853 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding10_closure" {
     GHC.IO.Encoding.getFileSystemEncoding10_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding26_closure;
         const GHC.IO.Encoding.getFileSystemEncoding11_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.717459044 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding9_closure" {
     GHC.IO.Encoding.getFileSystemEncoding9_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding28_closure;
         const GHC.IO.Encoding.getFileSystemEncoding10_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.719186605 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding8_closure" {
     GHC.IO.Encoding.getFileSystemEncoding8_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding30_closure;
         const GHC.IO.Encoding.getFileSystemEncoding9_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.721006507 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding7_closure" {
     GHC.IO.Encoding.getFileSystemEncoding7_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding32_closure;
         const GHC.IO.Encoding.getFileSystemEncoding8_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.722986071 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding66_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding66_bytes:
         I8[] [65,78,83,73,95,88,51,46,52,45,49,57,54,56]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.725494493 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding65_closure" {
     GHC.IO.Encoding.getFileSystemEncoding65_closure:
         const GHC.IO.Encoding.getFileSystemEncoding65_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding65_entry() //  [R1]
         { []
         }
     {offset
       c9YH1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YH2; else goto c9YH3;
       c9YH2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YH3: // global
           (_c9YGY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YGY::I64 == 0) goto c9YH0; else goto c9YGZ;
       c9YH0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YGZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YGY::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding66_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding65_info" {
     GHC.IO.Encoding.getFileSystemEncoding65_info:
         const GHC.IO.Encoding.getFileSystemEncoding65_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.729807665 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding64_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding64_bytes:
         I8[] [105,115,111,45,105,114,45,54]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.732601989 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding63_closure" {
     GHC.IO.Encoding.getFileSystemEncoding63_closure:
         const GHC.IO.Encoding.getFileSystemEncoding63_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding63_entry() //  [R1]
         { []
         }
     {offset
       c9YHj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YHk; else goto c9YHl;
       c9YHk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YHl: // global
           (_c9YHg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YHg::I64 == 0) goto c9YHi; else goto c9YHh;
       c9YHi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YHh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YHg::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding64_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding63_info" {
     GHC.IO.Encoding.getFileSystemEncoding63_info:
         const GHC.IO.Encoding.getFileSystemEncoding63_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.736050985 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding62_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding62_bytes:
         I8[] [65,78,83,73,95,88,51,46,52,45,49,57,56,54]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.738286562 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding61_closure" {
     GHC.IO.Encoding.getFileSystemEncoding61_closure:
         const GHC.IO.Encoding.getFileSystemEncoding61_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding61_entry() //  [R1]
         { []
         }
     {offset
       c9YHB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YHC; else goto c9YHD;
       c9YHC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YHD: // global
           (_c9YHy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YHy::I64 == 0) goto c9YHA; else goto c9YHz;
       c9YHA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YHz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YHy::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding62_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding61_info" {
     GHC.IO.Encoding.getFileSystemEncoding61_info:
         const GHC.IO.Encoding.getFileSystemEncoding61_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.741755849 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding60_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding60_bytes:
         I8[] [73,83,79,95,54,52,54,46,105,114,118,58,49,57,57,49]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.74395298 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding59_closure" {
     GHC.IO.Encoding.getFileSystemEncoding59_closure:
         const GHC.IO.Encoding.getFileSystemEncoding59_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding59_entry() //  [R1]
         { []
         }
     {offset
       c9YHT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YHU; else goto c9YHV;
       c9YHU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YHV: // global
           (_c9YHQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YHQ::I64 == 0) goto c9YHS; else goto c9YHR;
       c9YHS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YHR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YHQ::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding60_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding59_info" {
     GHC.IO.Encoding.getFileSystemEncoding59_info:
         const GHC.IO.Encoding.getFileSystemEncoding59_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.74775663 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding58_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding58_bytes:
         I8[] [85,83,45,65,83,67,73,73]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.749944423 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding57_closure" {
     GHC.IO.Encoding.getFileSystemEncoding57_closure:
         const GHC.IO.Encoding.getFileSystemEncoding57_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding57_entry() //  [R1]
         { []
         }
     {offset
       c9YIb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YIc; else goto c9YId;
       c9YIc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YId: // global
           (_c9YI8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YI8::I64 == 0) goto c9YIa; else goto c9YI9;
       c9YIa: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YI9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YI8::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding58_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding57_info" {
     GHC.IO.Encoding.getFileSystemEncoding57_info:
         const GHC.IO.Encoding.getFileSystemEncoding57_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.753282273 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding56_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding56_bytes:
         I8[] [117,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.755555346 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding55_closure" {
     GHC.IO.Encoding.getFileSystemEncoding55_closure:
         const GHC.IO.Encoding.getFileSystemEncoding55_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding55_entry() //  [R1]
         { []
         }
     {offset
       c9YIt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YIu; else goto c9YIv;
       c9YIu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YIv: // global
           (_c9YIq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YIq::I64 == 0) goto c9YIs; else goto c9YIr;
       c9YIs: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YIr: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YIq::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding56_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding55_info" {
     GHC.IO.Encoding.getFileSystemEncoding55_info:
         const GHC.IO.Encoding.getFileSystemEncoding55_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.759626243 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding54_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding54_bytes:
         I8[] [73,66,77,51,54,55]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.762348551 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding53_closure" {
     GHC.IO.Encoding.getFileSystemEncoding53_closure:
         const GHC.IO.Encoding.getFileSystemEncoding53_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding53_entry() //  [R1]
         { []
         }
     {offset
       c9YIL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YIM; else goto c9YIN;
       c9YIM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YIN: // global
           (_c9YII::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YII::I64 == 0) goto c9YIK; else goto c9YIJ;
       c9YIK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YIJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YII::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding54_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding53_info" {
     GHC.IO.Encoding.getFileSystemEncoding53_info:
         const GHC.IO.Encoding.getFileSystemEncoding53_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.76579523 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding52_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding52_bytes:
         I8[] [99,112,51,54,55]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.767983005 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding51_closure" {
     GHC.IO.Encoding.getFileSystemEncoding51_closure:
         const GHC.IO.Encoding.getFileSystemEncoding51_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding51_entry() //  [R1]
         { []
         }
     {offset
       c9YJ3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YJ4; else goto c9YJ5;
       c9YJ4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YJ5: // global
           (_c9YJ0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YJ0::I64 == 0) goto c9YJ2; else goto c9YJ1;
       c9YJ2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YJ1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YJ0::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding52_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding51_info" {
     GHC.IO.Encoding.getFileSystemEncoding51_info:
         const GHC.IO.Encoding.getFileSystemEncoding51_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.771519402 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding50_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding50_bytes:
         I8[] [99,115,65,83,67,73,73]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.774274717 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding49_closure" {
     GHC.IO.Encoding.getFileSystemEncoding49_closure:
         const GHC.IO.Encoding.getFileSystemEncoding49_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding49_entry() //  [R1]
         { []
         }
     {offset
       c9YJl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YJm; else goto c9YJn;
       c9YJm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YJn: // global
           (_c9YJi::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YJi::I64 == 0) goto c9YJk; else goto c9YJj;
       c9YJk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YJj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YJi::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding50_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding49_info" {
     GHC.IO.Encoding.getFileSystemEncoding49_info:
         const GHC.IO.Encoding.getFileSystemEncoding49_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.777901354 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding48_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding48_bytes:
         I8[] [65,83,67,73,73]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.780155257 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding47_closure" {
     GHC.IO.Encoding.getFileSystemEncoding47_closure:
         const GHC.IO.Encoding.getFileSystemEncoding47_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding47_entry() //  [R1]
         { []
         }
     {offset
       c9YJD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YJE; else goto c9YJF;
       c9YJE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YJF: // global
           (_c9YJA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YJA::I64 == 0) goto c9YJC; else goto c9YJB;
       c9YJC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YJB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YJA::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding48_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding47_info" {
     GHC.IO.Encoding.getFileSystemEncoding47_info:
         const GHC.IO.Encoding.getFileSystemEncoding47_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.783847789 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding46_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding46_bytes:
         I8[] [73,83,79,54,52,54,45,85,83]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.786638134 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding45_closure" {
     GHC.IO.Encoding.getFileSystemEncoding45_closure:
         const GHC.IO.Encoding.getFileSystemEncoding45_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding45_entry() //  [R1]
         { []
         }
     {offset
       c9YJV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YJW; else goto c9YJX;
       c9YJW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YJX: // global
           (_c9YJS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YJS::I64 == 0) goto c9YJU; else goto c9YJT;
       c9YJU: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YJT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YJS::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding46_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding45_info" {
     GHC.IO.Encoding.getFileSystemEncoding45_info:
         const GHC.IO.Encoding.getFileSystemEncoding45_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.790149944 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding44_closure" {
     GHC.IO.Encoding.getFileSystemEncoding44_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding45_closure;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.791856509 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding43_closure" {
     GHC.IO.Encoding.getFileSystemEncoding43_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding47_closure;
         const GHC.IO.Encoding.getFileSystemEncoding44_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.793998623 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding42_closure" {
     GHC.IO.Encoding.getFileSystemEncoding42_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding49_closure;
         const GHC.IO.Encoding.getFileSystemEncoding43_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.79574894 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding41_closure" {
     GHC.IO.Encoding.getFileSystemEncoding41_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding51_closure;
         const GHC.IO.Encoding.getFileSystemEncoding42_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.797488137 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding40_closure" {
     GHC.IO.Encoding.getFileSystemEncoding40_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding53_closure;
         const GHC.IO.Encoding.getFileSystemEncoding41_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.799172338 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding39_closure" {
     GHC.IO.Encoding.getFileSystemEncoding39_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding55_closure;
         const GHC.IO.Encoding.getFileSystemEncoding40_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.800885525 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding38_closure" {
     GHC.IO.Encoding.getFileSystemEncoding38_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding57_closure;
         const GHC.IO.Encoding.getFileSystemEncoding39_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.802636033 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding37_closure" {
     GHC.IO.Encoding.getFileSystemEncoding37_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding59_closure;
         const GHC.IO.Encoding.getFileSystemEncoding38_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.80434759 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding36_closure" {
     GHC.IO.Encoding.getFileSystemEncoding36_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding61_closure;
         const GHC.IO.Encoding.getFileSystemEncoding37_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.806745988 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding35_closure" {
     GHC.IO.Encoding.getFileSystemEncoding35_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding63_closure;
         const GHC.IO.Encoding.getFileSystemEncoding36_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.808573534 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding34_closure" {
     GHC.IO.Encoding.getFileSystemEncoding34_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding65_closure;
         const GHC.IO.Encoding.getFileSystemEncoding35_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.810432897 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding68_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding68_bytes:
         I8[] [85,84,70,56]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.813747118 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding67_closure" {
     GHC.IO.Encoding.getFileSystemEncoding67_closure:
         const GHC.IO.Encoding.getFileSystemEncoding67_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding67_entry() //  [R1]
         { []
         }
     {offset
       c9YKo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YKp; else goto c9YKq;
       c9YKp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YKq: // global
           (_c9YKl::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YKl::I64 == 0) goto c9YKn; else goto c9YKm;
       c9YKn: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YKm: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YKl::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding68_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding67_info" {
     GHC.IO.Encoding.getFileSystemEncoding67_info:
         const GHC.IO.Encoding.getFileSystemEncoding67_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.817594248 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding70_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding70_bytes:
         I8[] [85,84,70,51,50,76,69]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.81972201 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding69_closure" {
     GHC.IO.Encoding.getFileSystemEncoding69_closure:
         const GHC.IO.Encoding.getFileSystemEncoding69_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding69_entry() //  [R1]
         { []
         }
     {offset
       c9YKG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YKH; else goto c9YKI;
       c9YKH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YKI: // global
           (_c9YKD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YKD::I64 == 0) goto c9YKF; else goto c9YKE;
       c9YKF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YKE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YKD::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding70_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding69_info" {
     GHC.IO.Encoding.getFileSystemEncoding69_info:
         const GHC.IO.Encoding.getFileSystemEncoding69_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.823334873 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding72_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding72_bytes:
         I8[] [85,84,70,51,50,66,69]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.825602279 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding71_closure" {
     GHC.IO.Encoding.getFileSystemEncoding71_closure:
         const GHC.IO.Encoding.getFileSystemEncoding71_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding71_entry() //  [R1]
         { []
         }
     {offset
       c9YKY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YKZ; else goto c9YL0;
       c9YKZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YL0: // global
           (_c9YKV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YKV::I64 == 0) goto c9YKX; else goto c9YKW;
       c9YKX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YKW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YKV::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding72_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding71_info" {
     GHC.IO.Encoding.getFileSystemEncoding71_info:
         const GHC.IO.Encoding.getFileSystemEncoding71_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.829064453 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding74_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding74_bytes:
         I8[] [85,84,70,51,50]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.831258134 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding73_closure" {
     GHC.IO.Encoding.getFileSystemEncoding73_closure:
         const GHC.IO.Encoding.getFileSystemEncoding73_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding73_entry() //  [R1]
         { []
         }
     {offset
       c9YLg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YLh; else goto c9YLi;
       c9YLh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YLi: // global
           (_c9YLd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YLd::I64 == 0) goto c9YLf; else goto c9YLe;
       c9YLf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YLe: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YLd::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding74_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding73_info" {
     GHC.IO.Encoding.getFileSystemEncoding73_info:
         const GHC.IO.Encoding.getFileSystemEncoding73_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.834906486 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding76_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding76_bytes:
         I8[] [85,84,70,49,54,76,69]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.837817891 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding75_closure" {
     GHC.IO.Encoding.getFileSystemEncoding75_closure:
         const GHC.IO.Encoding.getFileSystemEncoding75_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding75_entry() //  [R1]
         { []
         }
     {offset
       c9YLy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YLz; else goto c9YLA;
       c9YLz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YLA: // global
           (_c9YLv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YLv::I64 == 0) goto c9YLx; else goto c9YLw;
       c9YLx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YLw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YLv::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding76_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding75_info" {
     GHC.IO.Encoding.getFileSystemEncoding75_info:
         const GHC.IO.Encoding.getFileSystemEncoding75_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.841379589 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding78_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding78_bytes:
         I8[] [85,84,70,49,54,66,69]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.843532358 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding77_closure" {
     GHC.IO.Encoding.getFileSystemEncoding77_closure:
         const GHC.IO.Encoding.getFileSystemEncoding77_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding77_entry() //  [R1]
         { []
         }
     {offset
       c9YLQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YLR; else goto c9YLS;
       c9YLR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YLS: // global
           (_c9YLN::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YLN::I64 == 0) goto c9YLP; else goto c9YLO;
       c9YLP: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YLO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YLN::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding78_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding77_info" {
     GHC.IO.Encoding.getFileSystemEncoding77_info:
         const GHC.IO.Encoding.getFileSystemEncoding77_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.847062326 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding80_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding80_bytes:
         I8[] [85,84,70,49,54]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.849920817 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding79_closure" {
     GHC.IO.Encoding.getFileSystemEncoding79_closure:
         const GHC.IO.Encoding.getFileSystemEncoding79_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding79_entry() //  [R1]
         { []
         }
     {offset
       c9YM8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YM9; else goto c9YMa;
       c9YM9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YMa: // global
           (_c9YM5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YM5::I64 == 0) goto c9YM7; else goto c9YM6;
       c9YM7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YM6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YM5::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding80_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding79_info" {
     GHC.IO.Encoding.getFileSystemEncoding79_info:
         const GHC.IO.Encoding.getFileSystemEncoding79_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.856295808 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding_go_closure" {
     GHC.IO.Encoding.getFileSystemEncoding_go_closure:
         const GHC.IO.Encoding.getFileSystemEncoding_go_info;
         const 0;
 },
 sat_s9YAk_entry() //  [R1]
         { []
         }
     {offset
       c9YME: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YMF; else goto c9YMG;
       c9YMF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YMG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.getFileSystemEncoding_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9YAk_info" {
     sat_s9YAk_info:
         const sat_s9YAk_entry;
         const 1;
         const 4294967312;
         const S9YDC_srt+24;
 },
 sat_s9YAj_entry() //  [R1]
         { []
         }
     {offset
       c9YMN: // global
           _s9YAj::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9YMO; else goto c9YMP;
       c9YMP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9YMR; else goto c9YMQ;
       c9YMR: // global
           HpAlloc = 16;
           goto c9YMO;
       c9YMO: // global
           R1 = _s9YAj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YMQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9YAj::P64;
           (_s9YAf::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_towupper(I64[_s9YAj::P64 + 16]);
           if (_s9YAf::I64 > 1114111) goto c9YN1; else goto c9YN8;
       c9YN1: // global
           Hp = Hp - 16;
           R2 = _s9YAf::I64;
           Sp = Sp - 16;
           call GHC.Char.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c9YN8: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _s9YAf::I64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9YAj_info" {
     sat_s9YAj_info:
         const sat_s9YAj_entry;
         const 4294967296;
         const 4294967313;
         const S9YDC_srt+32;
 },
 GHC.IO.Encoding.getFileSystemEncoding_go_entry() //  [R2]
         { []
         }
     {offset
       c9YNd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YNe; else goto u9YNq;
       c9YNe: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.getFileSystemEncoding_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u9YNq: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c9YMk() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding_go_info" {
     GHC.IO.Encoding.getFileSystemEncoding_go_info:
         const GHC.IO.Encoding.getFileSystemEncoding_go_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S9YDC_srt+24;
 },
 _c9YMk() //  []
         { []
         }
     {offset
       c9YMk: // global
           _s9YA4::P64 = P64[Sp];
           I64[Sp] = block_c9YMn_info;
           R1 = _s9YA4::P64;
           if (R1 & 7 != 0) goto u9YNs; else goto c9YMo;
       u9YNs: // global
           call _c9YMn(R1) args: 0, res: 0, upd: 0;
       c9YMo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9YMn() //  [R1]
         { []
         }
     {offset
       c9YMn: // global
           if (R1 & 7 == 1) goto c9YNa; else goto c9YNb;
       c9YNa: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9YNb: // global
           I64[Sp - 8] = block_c9YMt_info;
           _s9YA7::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s9YA7::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9YNt; else goto c9YMu;
       u9YNt: // global
           call _c9YMt(R1) args: 0, res: 0, upd: 0;
       c9YMu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9YMn_info" {
     block_c9YMn_info:
         const _c9YMn;
         const 0;
         const 12884901918;
         const S9YDC_srt+24;
 },
 _c9YMt() //  [R1]
         { []
         }
     {offset
       c9YMt: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9YNl; else goto c9YNk;
       c9YNl: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9YNk: // global
           _s9YA7::P64 = P64[Sp + 8];
           _s9YAa::I64 = I64[R1 + 7];
           if (_s9YAa::I64 != 45) goto c9YNo; else goto c9YNp;
       c9YNo: // global
           I64[Hp - 64] = sat_s9YAk_info;
           P64[Hp - 48] = _s9YA7::P64;
           I64[Hp - 40] = sat_s9YAj_info;
           I64[Hp - 24] = _s9YAa::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9YNp: // global
           Hp = Hp - 72;
           P64[Sp + 8] = _s9YA7::P64;
           Sp = Sp + 8;
           call _c9YMk() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9YMt_info" {
     block_c9YMt_info:
         const _c9YMt;
         const 1;
         const 12884901918;
         const S9YDC_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.870511979 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding6_closure" {
     GHC.IO.Encoding.getFileSystemEncoding6_closure:
         const GHC.IO.Encoding.getFileSystemEncoding6_info;
         const 0;
 },
 sat_s9YAp_entry() //  [R1]
         { []
         }
     {offset
       c9YOq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9YOr; else goto c9YOs;
       c9YOr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YOs: // global
           I64[Sp - 8] = block_c9YOh_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9YOH; else goto c9YOi;
       u9YOH: // global
           call _c9YOh(R1) args: 0, res: 0, upd: 0;
       c9YOi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9YAp_info" {
     sat_s9YAp_info:
         const sat_s9YAp_entry;
         const 1;
         const 30064771088;
         const S9YDC_srt+40;
 },
 _c9YOh() //  [R1]
         { []
         }
     {offset
       c9YOh: // global
           _c9YOp::P64 = R1 & 7;
           if (_c9YOp::P64 < 3) goto u9YOF; else goto u9YOG;
       u9YOF: // global
           if (_c9YOp::P64 < 2) goto c9YOl; else goto c9YOm;
       c9YOl: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9YOm: // global
           R1 = GHC.IO.Encoding.Failure.codingFailureModeSuffix5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u9YOG: // global
           if (_c9YOp::P64 < 4) goto c9YOn; else goto c9YOo;
       c9YOn: // global
           R1 = GHC.IO.Encoding.Failure.codingFailureModeSuffix3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c9YOo: // global
           R1 = GHC.IO.Encoding.Failure.codingFailureModeSuffix1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9YOh_info" {
     block_c9YOh_info:
         const _c9YOh;
         const 0;
         const 30064771102;
         const S9YDC_srt+40;
 },
 GHC.IO.Encoding.getFileSystemEncoding6_entry() //  [R2, R3]
         { []
         }
     {offset
       c9YOK: // global
           _s9YAm::P64 = R3;
           _s9YAl::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c9YOL; else goto c9YOM;
       c9YOM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9YOO; else goto c9YON;
       c9YOO: // global
           HpAlloc = 24;
           goto c9YOL;
       c9YOL: // global
           R3 = _s9YAm::P64;
           R2 = _s9YAl::P64;
           R1 = GHC.IO.Encoding.getFileSystemEncoding6_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9YON: // global
           I64[Hp - 16] = sat_s9YAp_info;
           P64[Hp] = _s9YAl::P64;
           I64[Sp - 8] = block_c9YOI_info;
           R3 = Hp - 16;
           R2 = _s9YAm::P64;
           Sp = Sp - 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding6_info" {
     GHC.IO.Encoding.getFileSystemEncoding6_info:
         const GHC.IO.Encoding.getFileSystemEncoding6_entry;
         const 0;
         const 519691042830;
         const 12884901903;
         const S9YDC_srt+16;
 },
 _c9YOI() //  [R1]
         { []
         }
     {offset
       c9YOI: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.IO.Encoding.mkTextEncoding2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9YOI_info" {
     block_c9YOI_info:
         const _c9YOI;
         const 0;
         const 4294967326;
         const S9YDC_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.887048488 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding5_closure" {
     GHC.IO.Encoding.getFileSystemEncoding5_closure:
         const GHC.IO.Encoding.getFileSystemEncoding5_info;
         const 0;
 },
 sat_s9YAJ_entry() //  [R1]
         { []
         }
     {offset
       c9YQ4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YQ5; else goto c9YQ6;
       c9YQ5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YQ6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.Latin1.mkLatin1_checked_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9YAJ_info" {
     sat_s9YAJ_info:
         const sat_s9YAJ_entry;
         const 1;
         const 4294967312;
         const S9YDC_srt+72;
 },
 sat_s9YAK_entry() //  [R1]
         { []
         }
     {offset
       c9YQd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YQe; else goto c9YQf;
       c9YQe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YQf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.Latin1.mkAscii_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9YAK_info" {
     sat_s9YAK_info:
         const sat_s9YAK_entry;
         const 1;
         const 4294967312;
         const S9YDC_srt+80;
 },
 sat_s9YAL_entry() //  [R1]
         { []
         }
     {offset
       c9YQm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YQn; else goto c9YQo;
       c9YQn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YQo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF8.mkUTF8_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9YAL_info" {
     sat_s9YAL_info:
         const sat_s9YAL_entry;
         const 1;
         const 4294967312;
         const S9YDC_srt+88;
 },
 sat_s9YAM_entry() //  [R1]
         { []
         }
     {offset
       c9YQv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YQw; else goto c9YQx;
       c9YQw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YQx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF32.mkUTF32le_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9YAM_info" {
     sat_s9YAM_info:
         const sat_s9YAM_entry;
         const 1;
         const 4294967312;
         const S9YDC_srt+96;
 },
 sat_s9YAN_entry() //  [R1]
         { []
         }
     {offset
       c9YQE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YQF; else goto c9YQG;
       c9YQF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YQG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF32.mkUTF32be_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9YAN_info" {
     sat_s9YAN_info:
         const sat_s9YAN_entry;
         const 1;
         const 4294967312;
         const S9YDC_srt+104;
 },
 sat_s9YAO_entry() //  [R1]
         { []
         }
     {offset
       c9YQN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YQO; else goto c9YQP;
       c9YQO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YQP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF32.mkUTF32_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9YAO_info" {
     sat_s9YAO_info:
         const sat_s9YAO_entry;
         const 1;
         const 4294967312;
         const S9YDC_srt+112;
 },
 sat_s9YAP_entry() //  [R1]
         { []
         }
     {offset
       c9YQW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YQX; else goto c9YQY;
       c9YQX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YQY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF16.mkUTF16le_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9YAP_info" {
     sat_s9YAP_info:
         const sat_s9YAP_entry;
         const 1;
         const 4294967312;
         const S9YDC_srt+120;
 },
 sat_s9YAQ_entry() //  [R1]
         { []
         }
     {offset
       c9YR5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YR6; else goto c9YR7;
       c9YR6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YR7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF16.mkUTF16be_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9YAQ_info" {
     sat_s9YAQ_info:
         const sat_s9YAQ_entry;
         const 1;
         const 4294967312;
         const S9YDC_srt+128;
 },
 sat_s9YAR_entry() //  [R1]
         { []
         }
     {offset
       c9YRe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YRf; else goto c9YRg;
       c9YRf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YRg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF16.mkUTF16_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9YAR_info" {
     sat_s9YAR_info:
         const sat_s9YAR_entry;
         const 1;
         const 4294967312;
         const S9YDC_srt+136;
 },
 GHC.IO.Encoding.getFileSystemEncoding5_entry() //  [R2, R3]
         { []
         }
     {offset
       c9YRh: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9YRi; else goto c9YRj;
       c9YRi: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.getFileSystemEncoding5_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9YRj: // global
           I64[Sp - 24] = block_c9YPl_info;
           _s9YAr::P64 = R2;
           R2 = R3;
           P64[Sp - 16] = _s9YAr::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.IO.Encoding.getFileSystemEncoding_go_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding5_info" {
     GHC.IO.Encoding.getFileSystemEncoding5_info:
         const GHC.IO.Encoding.getFileSystemEncoding5_entry;
         const 0;
         const 288230243007725582;
         const 12884901903;
         const S9YDC_srt+24;
 },
 _c9YPl() //  [R1]
         { []
         }
     {offset
       c9YPl: // global
           I64[Sp - 8] = block_c9YPp_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding79_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9YPl_info" {
     block_c9YPl_info:
         const _c9YPl;
         const 2;
         const 8998398866751518;
         const S9YDC_srt+64;
 },
 _c9YPp() //  [R1]
         { []
         }
     {offset
       c9YPp: // global
           if (R1 & 7 == 1) goto c9YRn; else goto c9YSy;
       c9YRn: // global
           I64[Sp] = block_c9YPt_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding77_closure;
           R2 = P64[Sp + 8];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9YSy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9YSB; else goto c9YSA;
       c9YSB: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9YSA: // global
           I64[Hp - 16] = sat_s9YAR_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 16;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9YPp_info" {
     block_c9YPp_info:
         const _c9YPp;
         const 3;
         const 4494799239381022;
         const S9YDC_srt+64;
 },
 _c9YPt() //  [R1]
         { []
         }
     {offset
       c9YPt: // global
           if (R1 & 7 == 1) goto c9YRq; else goto c9YSu;
       c9YRq: // global
           I64[Sp] = block_c9YPx_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding75_closure;
           R2 = P64[Sp + 8];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9YSu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9YSx; else goto c9YSw;
       c9YSx: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9YSw: // global
           I64[Hp - 16] = sat_s9YAQ_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 16;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9YPt_info" {
     block_c9YPt_info:
         const _c9YPt;
         const 3;
         const 2240800402440222;
         const S9YDC_srt+64;
 },
 _c9YPx() //  [R1]
         { []
         }
     {offset
       c9YPx: // global
           if (R1 & 7 == 1) goto c9YRt; else goto c9YSq;
       c9YRt: // global
           I64[Sp] = block_c9YPB_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding73_closure;
           R2 = P64[Sp + 8];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9YSq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9YSt; else goto c9YSs;
       c9YSt: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9YSs: // global
           I64[Hp - 16] = sat_s9YAP_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 16;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9YPx_info" {
     block_c9YPx_info:
         const _c9YPx;
         const 3;
         const 1113800983969822;
         const S9YDC_srt+64;
 },
 _c9YPB() //  [R1]
         { []
         }
     {offset
       c9YPB: // global
           if (R1 & 7 == 1) goto c9YRw; else goto c9YSm;
       c9YRw: // global
           I64[Sp] = block_c9YPF_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding71_closure;
           R2 = P64[Sp + 8];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9YSm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9YSp; else goto c9YSo;
       c9YSp: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9YSo: // global
           I64[Hp - 16] = sat_s9YAO_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 16;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9YPB_info" {
     block_c9YPB_info:
         const _c9YPB;
         const 3;
         const 550301274734622;
         const S9YDC_srt+64;
 },
 _c9YPF() //  [R1]
         { []
         }
     {offset
       c9YPF: // global
           if (R1 & 7 == 1) goto c9YRz; else goto c9YSi;
       c9YRz: // global
           I64[Sp] = block_c9YPJ_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding69_closure;
           R2 = P64[Sp + 8];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9YSi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9YSl; else goto c9YSk;
       c9YSl: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9YSk: // global
           I64[Hp - 16] = sat_s9YAN_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 16;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9YPF_info" {
     block_c9YPF_info:
         const _c9YPF;
         const 3;
         const 268551420117022;
         const S9YDC_srt+64;
 },
 _c9YPJ() //  [R1]
         { []
         }
     {offset
       c9YPJ: // global
           if (R1 & 7 == 1) goto c9YRC; else goto c9YSe;
       c9YRC: // global
           _s9YAu::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9YPN_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding67_closure;
           R2 = _s9YAu::P64;
           Sp = Sp + 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9YSe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9YSh; else goto c9YSg;
       c9YSh: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9YSg: // global
           I64[Hp - 16] = sat_s9YAM_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 16;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9YPJ_info" {
     block_c9YPJ_info:
         const _c9YPJ;
         const 3;
         const 127676492808222;
         const S9YDC_srt+64;
 },
 _c9YPN() //  [R1]
         { []
         }
     {offset
       c9YPN: // global
           if (R1 & 7 == 1) goto c9YRF; else goto c9YSa;
       c9YRF: // global
           I64[Sp] = block_c9YPR_info;
           R4 = GHC.IO.Encoding.getFileSystemEncoding34_closure+2;
           R3 = P64[Sp + 16];
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
       c9YSa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9YSd; else goto c9YSc;
       c9YSd: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9YSc: // global
           I64[Hp - 16] = sat_s9YAL_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 16;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9YPN_info" {
     block_c9YPN_info:
         const _c9YPN;
         const 2;
         const 57239029153822;
         const S9YDC_srt+64;
 },
 _c9YPR() //  [R1]
         { []
         }
     {offset
       c9YPR: // global
           if (R1 & 7 == 1) goto c9YRI; else goto c9YS6;
       c9YRI: // global
           I64[Sp] = block_c9YPV_info;
           R4 = GHC.IO.Encoding.getFileSystemEncoding7_closure+2;
           R3 = P64[Sp + 16];
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
       c9YS6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9YS9; else goto c9YS8;
       c9YS9: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9YS8: // global
           I64[Hp - 16] = sat_s9YAK_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 16;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9YPR_info" {
     block_c9YPR_info:
         const _c9YPR;
         const 2;
         const 22020297326622;
         const S9YDC_srt+64;
 },
 _c9YPV() //  [R1]
         { []
         }
     {offset
       c9YPV: // global
           _s9YAr::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c9YRP; else goto c9YS2;
       c9YRP: // global
           I64[Sp] = block_c9YRK_info;
           R3 = P64[Sp + 16];
           R2 = _s9YAr::P64;
           call GHC.IO.Encoding.Iconv.iconvEncoding2_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
       c9YS2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9YS5; else goto c9YS4;
       c9YS5: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9YS4: // global
           I64[Hp - 16] = sat_s9YAJ_info;
           P64[Hp] = _s9YAr::P64;
           R1 = Hp - 16;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9YPV_info" {
     block_c9YPV_info:
         const _c9YPV;
         const 2;
         const 4410931413022;
         const S9YDC_srt+64;
 },
 _c9YRK() //  [R1]
         { []
         }
     {offset
       c9YRK: // global
           I64[Sp] = block_c9YRM_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u9YSM; else goto c9YRR;
       u9YSM: // global
           call _c9YRM(R1) args: 0, res: 0, upd: 0;
       c9YRR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9YRK_info" {
     block_c9YRK_info:
         const _c9YRK;
         const 2;
         const 4294967326;
         const S9YDC_srt+64;
 },
 _c9YRM() //  [R1]
         { []
         }
     {offset
       c9YRM: // global
           if (R1 & 7 == 1) goto c9YRX; else goto c9YS1;
       c9YRX: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.IO.Encoding.getFileSystemEncoding6_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
       c9YS1: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9YRM_info" {
     block_c9YRM_info:
         const _c9YRM;
         const 2;
         const 4294967326;
         const S9YDC_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.928357245 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding9_closure" {
     GHC.IO.Encoding.mkTextEncoding9_closure:
         const GHC.IO.Encoding.mkTextEncoding9_info;
 },
 GHC.IO.Encoding.mkTextEncoding9_entry() //  [R2]
         { []
         }
     {offset
       c9YVg: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9YVh; else goto c9YVi;
       c9YVh: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.mkTextEncoding9_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9YVi: // global
           I64[Sp - 8] = block_c9YVd_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9YVq; else goto c9YVe;
       u9YVq: // global
           call _c9YVd(R1) args: 0, res: 0, upd: 0;
       c9YVe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.mkTextEncoding9_info" {
     GHC.IO.Encoding.mkTextEncoding9_info:
         const GHC.IO.Encoding.mkTextEncoding9_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c9YVd() //  [R1]
         { []
         }
     {offset
       c9YVd: // global
           if (I64[R1 + 7] == 47) goto c9YVp; else goto c9YVo;
       c9YVp: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9YVo: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9YVd_info" {
     block_c9YVd_info:
         const _c9YVd;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.933700617 UTC

[section ""cstring" . GHC.IO.Encoding.mkTextEncoding4_bytes" {
     GHC.IO.Encoding.mkTextEncoding4_bytes:
         I8[] [47,47,84,82,65,78,83,76,73,84]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.93583635 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding3_closure" {
     GHC.IO.Encoding.mkTextEncoding3_closure:
         const GHC.IO.Encoding.mkTextEncoding3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.mkTextEncoding3_entry() //  [R1]
         { []
         }
     {offset
       c9YVM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YVN; else goto c9YVO;
       c9YVN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YVO: // global
           (_c9YVJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YVJ::I64 == 0) goto c9YVL; else goto c9YVK;
       c9YVL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YVK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YVJ::I64;
           R2 = GHC.IO.Encoding.mkTextEncoding4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.mkTextEncoding3_info" {
     GHC.IO.Encoding.mkTextEncoding3_info:
         const GHC.IO.Encoding.mkTextEncoding3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.939684648 UTC

[section ""cstring" . GHC.IO.Encoding.mkTextEncoding6_bytes" {
     GHC.IO.Encoding.mkTextEncoding6_bytes:
         I8[] [47,47,82,79,85,78,68,84,82,73,80]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.941933633 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding5_closure" {
     GHC.IO.Encoding.mkTextEncoding5_closure:
         const GHC.IO.Encoding.mkTextEncoding5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.mkTextEncoding5_entry() //  [R1]
         { []
         }
     {offset
       c9YW4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YW5; else goto c9YW6;
       c9YW5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YW6: // global
           (_c9YW1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YW1::I64 == 0) goto c9YW3; else goto c9YW2;
       c9YW3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YW2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YW1::I64;
           R2 = GHC.IO.Encoding.mkTextEncoding6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.mkTextEncoding5_info" {
     GHC.IO.Encoding.mkTextEncoding5_info:
         const GHC.IO.Encoding.mkTextEncoding5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.945824116 UTC

[section ""cstring" . GHC.IO.Encoding.mkTextEncoding8_bytes" {
     GHC.IO.Encoding.mkTextEncoding8_bytes:
         I8[] [47,47,73,71,78,79,82,69]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.94852691 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding7_closure" {
     GHC.IO.Encoding.mkTextEncoding7_closure:
         const GHC.IO.Encoding.mkTextEncoding7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.mkTextEncoding7_entry() //  [R1]
         { []
         }
     {offset
       c9YWm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YWn; else goto c9YWo;
       c9YWn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YWo: // global
           (_c9YWj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YWj::I64 == 0) goto c9YWl; else goto c9YWk;
       c9YWl: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YWk: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YWj::I64;
           R2 = GHC.IO.Encoding.mkTextEncoding8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.mkTextEncoding7_info" {
     GHC.IO.Encoding.mkTextEncoding7_info:
         const GHC.IO.Encoding.mkTextEncoding7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.954248464 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding1_closure" {
     GHC.IO.Encoding.mkTextEncoding1_closure:
         const GHC.IO.Encoding.mkTextEncoding1_info;
         const 0;
 },
 GHC.IO.Encoding.mkTextEncoding1_entry() //  [R2]
         { []
         }
     {offset
       c9YWK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9YWL; else goto c9YWM;
       c9YWL: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.mkTextEncoding1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9YWM: // global
           I64[Sp - 16] = block_c9YWB_info;
           R3 = R2;
           _s9YAW::P64 = R2;
           R2 = GHC.IO.Encoding.mkTextEncoding9_closure+1;
           P64[Sp - 8] = _s9YAW::P64;
           Sp = Sp - 16;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.mkTextEncoding1_info" {
     GHC.IO.Encoding.mkTextEncoding1_info:
         const GHC.IO.Encoding.mkTextEncoding1_entry;
         const 0;
         const 8647474238799740942;
         const 8589934597;
         const S9YDC_srt+16;
 },
 _c9YWB() //  [R1, R2]
         { []
         }
     {offset
       c9YWB: // global
           I64[Sp - 8] = block_c9YWD_info;
           _s9YAZ::P64 = R1;
           R1 = R2;
           P64[Sp] = _s9YAZ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9YXu; else goto c9YWE;
       u9YXu: // global
           call _c9YWD(R1) args: 0, res: 0, upd: 0;
       c9YWE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9YWB_info" {
     block_c9YWB_info:
         const _c9YWB;
         const 1;
         const 8071013486496317470;
         const S9YDC_srt+16;
 },
 _c9YWD() //  [R1]
         { []
         }
     {offset
       c9YWD: // global
           if (R1 & 7 == 1) goto c9YWH; else goto c9YWI;
       c9YWH: // global
           R3 = P64[Sp + 8];
           R2 = GHC.IO.Encoding.Failure.ErrorOnCodingFailure_closure+1;
           Sp = Sp + 24;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
       c9YWI: // global
           I64[Sp - 8] = block_c9YWT_info;
           R3 = GHC.IO.Encoding.mkTextEncoding7_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9YWD_info" {
     block_c9YWD_info:
         const _c9YWD;
         const 2;
         const 8071013486496317470;
         const S9YDC_srt+16;
 },
 _c9YWT() //  [R1]
         { []
         }
     {offset
       c9YWT: // global
           if (R1 & 7 == 1) goto c9YX1; else goto c9YXq;
       c9YX1: // global
           I64[Sp] = block_c9YWY_info;
           R3 = GHC.IO.Encoding.mkTextEncoding5_closure;
           R2 = P64[Sp + 8];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9YXq: // global
           R3 = P64[Sp + 16];
           R2 = GHC.IO.Encoding.Failure.IgnoreCodingFailure_closure+2;
           Sp = Sp + 32;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9YWT_info" {
     block_c9YWT_info:
         const _c9YWT;
         const 3;
         const 3459327468068929566;
         const S9YDC_srt+16;
 },
 _c9YWY() //  [R1]
         { []
         }
     {offset
       c9YWY: // global
           if (R1 & 7 == 1) goto c9YX8; else goto c9YXm;
       c9YX8: // global
           _s9YB1::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9YX5_info;
           R3 = GHC.IO.Encoding.mkTextEncoding3_closure;
           R2 = _s9YB1::P64;
           Sp = Sp + 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9YXm: // global
           R3 = P64[Sp + 16];
           R2 = GHC.IO.Encoding.Failure.RoundtripFailure_closure+4;
           Sp = Sp + 32;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9YWY_info" {
     block_c9YWY_info:
         const _c9YWY;
         const 3;
         const 1153484458855235614;
         const S9YDC_srt+16;
 },
 _c9YX5() //  [R1]
         { []
         }
     {offset
       c9YX5: // global
           if (R1 & 7 == 1) goto c9YXe; else goto c9YXi;
       c9YXe: // global
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.IO.Encoding.mkTextEncoding2_entry(R2) args: 8, res: 0, upd: 8;
       c9YXi: // global
           R3 = P64[Sp + 8];
           R2 = GHC.IO.Encoding.Failure.TransliterateCodingFailure_closure+3;
           Sp = Sp + 24;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9YX5_info" {
     block_c9YX5_info:
         const _c9YX5;
         const 2;
         const 562954248388638;
         const S9YDC_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.965970942 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding_closure" {
     GHC.IO.Encoding.mkTextEncoding_closure:
         const GHC.IO.Encoding.mkTextEncoding_info;
         const 0;
 },
 GHC.IO.Encoding.mkTextEncoding_entry() //  [R2]
         { []
         }
     {offset
       c9YYb: // global
           R2 = R2;
           call GHC.IO.Encoding.mkTextEncoding1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.mkTextEncoding_info" {
     GHC.IO.Encoding.mkTextEncoding_info:
         const GHC.IO.Encoding.mkTextEncoding_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S9YDC_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.969517999 UTC

[section ""data" . GHC.IO.Encoding.getForeignEncoding4_closure" {
     GHC.IO.Encoding.getForeignEncoding4_closure:
         const GHC.IO.Encoding.getForeignEncoding4_info;
         const 0;
 },
 GHC.IO.Encoding.getForeignEncoding4_entry() //  []
         { []
         }
     {offset
       c9YYo: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9YYp; else goto c9YYq;
       c9YYp: // global
           R1 = GHC.IO.Encoding.getForeignEncoding4_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9YYq: // global
           I64[Sp - 8] = block_c9YYm_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getForeignEncoding4_info" {
     GHC.IO.Encoding.getForeignEncoding4_info:
         const GHC.IO.Encoding.getForeignEncoding4_entry;
         const 0;
         const 211110527500302;
         const 4294967299;
         const S9YDC_srt+152;
 },
 _c9YYm() //  []
         { []
         }
     {offset
       c9YYm: // global
           R3 = GHC.IO.Encoding.Iconv.localeEncodingName_closure;
           R2 = GHC.IO.Encoding.Failure.IgnoreCodingFailure_closure+2;
           Sp = Sp + 8;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9YYm_info" {
     block_c9YYm_info:
         const _c9YYm;
         const 0;
         const 70373039144990;
         const S9YDC_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.975299006 UTC

[section ""data" . GHC.IO.Encoding.getForeignEncoding3_closure" {
     GHC.IO.Encoding.getForeignEncoding3_closure:
         const GHC.IO.Encoding.getForeignEncoding3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getForeignEncoding3_entry() //  [R1]
         { []
         }
     {offset
       c9YYK: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9YYL; else goto c9YYM;
       c9YYL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YYM: // global
           (_c9YYF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YYF::I64 == 0) goto c9YYH; else goto c9YYG;
       c9YYH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YYG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YYF::I64;
           I64[Sp - 24] = block_c9YYI_info;
           Sp = Sp - 24;
           call GHC.IO.Encoding.getForeignEncoding4_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getForeignEncoding3_info" {
     GHC.IO.Encoding.getForeignEncoding3_info:
         const GHC.IO.Encoding.getForeignEncoding3_entry;
         const 0;
         const 4294967317;
         const S9YDC_srt+272;
 },
 _c9YYI() //  [R1]
         { []
         }
     {offset
       c9YYI: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9YYI_info" {
     block_c9YYI_info:
         const _c9YYI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.982135632 UTC

[section ""data" . GHC.IO.Encoding.getForeignEncoding2_closure" {
     GHC.IO.Encoding.getForeignEncoding2_closure:
         const GHC.IO.Encoding.getForeignEncoding2_info;
         const 0;
 },
 sat_s9YBm_entry() //  [R1, R2]
         { []
         }
     {offset
       c9YZi: // global
           _s9YBg::P64 = P64[R1 + 6];
           call MO_WriteBarrier();
           P64[_s9YBg::P64 + 8] = R2;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9YBg::P64);
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9YBm_info" {
     sat_s9YBm_info:
         const sat_s9YBm_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 sat_s9YBi_entry() //  [R1]
         { []
         }
     {offset
       c9YZr: // global
           R1 = P64[P64[R1 + 7] + 8];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9YBi_info" {
     sat_s9YBi_info:
         const sat_s9YBi_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 GHC.IO.Encoding.getForeignEncoding2_entry() //  []
         { []
         }
     {offset
       c9YZv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9YZw; else goto c9YZx;
       c9YZw: // global
           R1 = GHC.IO.Encoding.getForeignEncoding2_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9YZx: // global
           I64[Sp - 8] = block_c9YZ6_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getForeignEncoding2_info" {
     GHC.IO.Encoding.getForeignEncoding2_info:
         const GHC.IO.Encoding.getForeignEncoding2_entry;
         const 0;
         const 12884901902;
         const 4294967299;
         const S9YDC_srt+280;
 },
 _c9YZ6() //  []
         { []
         }
     {offset
       c9YZ6: // global
           I64[Sp] = block_c9YZ8_info;
           R1 = GHC.IO.Encoding.getForeignEncoding3_closure;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9YZ6_info" {
     block_c9YZ6_info:
         const _c9YZ6;
         const 0;
         const 4294967326;
         const S9YDC_srt+288;
 },
 _c9YZ8() //  [R1]
         { []
         }
     {offset
       c9YZ8: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9YZB; else goto c9YZA;
       c9YZB: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9YZA: // global
           I64[Hp - 48] = sat_s9YBm_info;
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_s9YBi_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 46;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9YZ8_info" {
     block_c9YZ8_info:
         const _c9YZ8;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.992376199 UTC

[section ""data" . GHC.IO.Encoding.getForeignEncoding1_closure" {
     GHC.IO.Encoding.getForeignEncoding1_closure:
         const GHC.IO.Encoding.getForeignEncoding1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getForeignEncoding1_entry() //  [R1]
         { []
         }
     {offset
       c9Z0e: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Z0f; else goto c9Z0g;
       c9Z0f: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Z0g: // global
           (_c9Z09::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Z09::I64 == 0) goto c9Z0b; else goto c9Z0a;
       c9Z0b: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Z0a: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Z09::I64;
           I64[Sp - 24] = block_c9Z0c_info;
           Sp = Sp - 24;
           call GHC.IO.Encoding.getForeignEncoding2_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getForeignEncoding1_info" {
     GHC.IO.Encoding.getForeignEncoding1_info:
         const GHC.IO.Encoding.getForeignEncoding1_entry;
         const 0;
         const 4294967317;
         const S9YDC_srt+280;
 },
 _c9Z0c() //  [R1]
         { []
         }
     {offset
       c9Z0c: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Z0c_info" {
     block_c9Z0c_info:
         const _c9Z0c;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:03.997951481 UTC

[section ""data" . GHC.IO.Encoding.getForeignEncoding_closure" {
     GHC.IO.Encoding.getForeignEncoding_closure:
         const GHC.IO.Encoding.getForeignEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getForeignEncoding_entry() //  [R1]
         { []
         }
     {offset
       c9Z0F: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Z0G; else goto c9Z0H;
       c9Z0G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Z0H: // global
           (_c9Z0z::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Z0z::I64 == 0) goto c9Z0B; else goto c9Z0A;
       c9Z0B: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Z0A: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Z0z::I64;
           I64[Sp - 24] = block_c9Z0C_info;
           R1 = GHC.IO.Encoding.getForeignEncoding1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Z0L; else goto c9Z0D;
       u9Z0L: // global
           call _c9Z0C(R1) args: 0, res: 0, upd: 0;
       c9Z0D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getForeignEncoding_info" {
     GHC.IO.Encoding.getForeignEncoding_info:
         const GHC.IO.Encoding.getForeignEncoding_entry;
         const 0;
         const 4294967317;
         const S9YDC_srt+296;
 },
 _c9Z0C() //  [R1]
         { []
         }
     {offset
       c9Z0C: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Z0C_info" {
     block_c9Z0C_info:
         const _c9Z0C;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.003611066 UTC

[section ""data" . GHC.IO.Encoding.setForeignEncoding_closure" {
     GHC.IO.Encoding.setForeignEncoding_closure:
         const GHC.IO.Encoding.setForeignEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.setForeignEncoding_entry() //  [R1]
         { []
         }
     {offset
       c9Z18: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Z19; else goto c9Z1a;
       c9Z19: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Z1a: // global
           (_c9Z12::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Z12::I64 == 0) goto c9Z14; else goto c9Z13;
       c9Z14: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Z13: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Z12::I64;
           I64[Sp - 24] = block_c9Z15_info;
           R1 = GHC.IO.Encoding.getForeignEncoding1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Z1e; else goto c9Z16;
       u9Z1e: // global
           call _c9Z15(R1) args: 0, res: 0, upd: 0;
       c9Z16: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.setForeignEncoding_info" {
     GHC.IO.Encoding.setForeignEncoding_info:
         const GHC.IO.Encoding.setForeignEncoding_entry;
         const 0;
         const 4294967317;
         const S9YDC_srt+296;
 },
 _c9Z15() //  [R1]
         { []
         }
     {offset
       c9Z15: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Z15_info" {
     block_c9Z15_info:
         const _c9Z15;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.009497137 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding4_closure" {
     GHC.IO.Encoding.getFileSystemEncoding4_closure:
         const GHC.IO.Encoding.getFileSystemEncoding4_info;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding4_entry() //  []
         { []
         }
     {offset
       c9Z1y: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Z1z; else goto c9Z1A;
       c9Z1z: // global
           R1 = GHC.IO.Encoding.getFileSystemEncoding4_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Z1A: // global
           I64[Sp - 8] = block_c9Z1w_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding4_info" {
     GHC.IO.Encoding.getFileSystemEncoding4_info:
         const GHC.IO.Encoding.getFileSystemEncoding4_entry;
         const 0;
         const 2322172852830222;
         const 4294967299;
         const S9YDC_srt+152;
 },
 _c9Z1w() //  []
         { []
         }
     {offset
       c9Z1w: // global
           R3 = GHC.IO.Encoding.Iconv.localeEncodingName_closure;
           R2 = GHC.IO.Encoding.Failure.RoundtripFailure_closure+4;
           Sp = Sp + 8;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Z1w_info" {
     block_c9Z1w_info:
         const _c9Z1w;
         const 0;
         const 70373039144990;
         const S9YDC_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.014658708 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding3_closure" {
     GHC.IO.Encoding.getFileSystemEncoding3_closure:
         const GHC.IO.Encoding.getFileSystemEncoding3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding3_entry() //  [R1]
         { []
         }
     {offset
       c9Z1U: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Z1V; else goto c9Z1W;
       c9Z1V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Z1W: // global
           (_c9Z1P::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Z1P::I64 == 0) goto c9Z1R; else goto c9Z1Q;
       c9Z1R: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Z1Q: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Z1P::I64;
           I64[Sp - 24] = block_c9Z1S_info;
           Sp = Sp - 24;
           call GHC.IO.Encoding.getFileSystemEncoding4_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding3_info" {
     GHC.IO.Encoding.getFileSystemEncoding3_info:
         const GHC.IO.Encoding.getFileSystemEncoding3_entry;
         const 0;
         const 4294967317;
         const S9YDC_srt+304;
 },
 _c9Z1S() //  [R1]
         { []
         }
     {offset
       c9Z1S: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Z1S_info" {
     block_c9Z1S_info:
         const _c9Z1S;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.021075698 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding2_closure" {
     GHC.IO.Encoding.getFileSystemEncoding2_closure:
         const GHC.IO.Encoding.getFileSystemEncoding2_info;
         const 0;
 },
 sat_s9YBM_entry() //  [R1, R2]
         { []
         }
     {offset
       c9Z2s: // global
           _s9YBG::P64 = P64[R1 + 6];
           call MO_WriteBarrier();
           P64[_s9YBG::P64 + 8] = R2;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9YBG::P64);
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9YBM_info" {
     sat_s9YBM_info:
         const sat_s9YBM_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 sat_s9YBI_entry() //  [R1]
         { []
         }
     {offset
       c9Z2B: // global
           R1 = P64[P64[R1 + 7] + 8];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9YBI_info" {
     sat_s9YBI_info:
         const sat_s9YBI_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 GHC.IO.Encoding.getFileSystemEncoding2_entry() //  []
         { []
         }
     {offset
       c9Z2F: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Z2G; else goto c9Z2H;
       c9Z2G: // global
           R1 = GHC.IO.Encoding.getFileSystemEncoding2_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Z2H: // global
           I64[Sp - 8] = block_c9Z2g_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding2_info" {
     GHC.IO.Encoding.getFileSystemEncoding2_info:
         const GHC.IO.Encoding.getFileSystemEncoding2_entry;
         const 0;
         const 12884901902;
         const 4294967299;
         const S9YDC_srt+312;
 },
 _c9Z2g() //  []
         { []
         }
     {offset
       c9Z2g: // global
           I64[Sp] = block_c9Z2i_info;
           R1 = GHC.IO.Encoding.getFileSystemEncoding3_closure;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Z2g_info" {
     block_c9Z2g_info:
         const _c9Z2g;
         const 0;
         const 4294967326;
         const S9YDC_srt+320;
 },
 _c9Z2i() //  [R1]
         { []
         }
     {offset
       c9Z2i: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9Z2L; else goto c9Z2K;
       c9Z2L: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Z2K: // global
           I64[Hp - 48] = sat_s9YBM_info;
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_s9YBI_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 46;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Z2i_info" {
     block_c9Z2i_info:
         const _c9Z2i;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.032007799 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding1_closure" {
     GHC.IO.Encoding.getFileSystemEncoding1_closure:
         const GHC.IO.Encoding.getFileSystemEncoding1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding1_entry() //  [R1]
         { []
         }
     {offset
       c9Z3o: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Z3p; else goto c9Z3q;
       c9Z3p: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Z3q: // global
           (_c9Z3j::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Z3j::I64 == 0) goto c9Z3l; else goto c9Z3k;
       c9Z3l: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Z3k: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Z3j::I64;
           I64[Sp - 24] = block_c9Z3m_info;
           Sp = Sp - 24;
           call GHC.IO.Encoding.getFileSystemEncoding2_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding1_info" {
     GHC.IO.Encoding.getFileSystemEncoding1_info:
         const GHC.IO.Encoding.getFileSystemEncoding1_entry;
         const 0;
         const 4294967317;
         const S9YDC_srt+312;
 },
 _c9Z3m() //  [R1]
         { []
         }
     {offset
       c9Z3m: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Z3m_info" {
     block_c9Z3m_info:
         const _c9Z3m;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.037747825 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding_closure" {
     GHC.IO.Encoding.getFileSystemEncoding_closure:
         const GHC.IO.Encoding.getFileSystemEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding_entry() //  [R1]
         { []
         }
     {offset
       c9Z3P: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Z3Q; else goto c9Z3R;
       c9Z3Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Z3R: // global
           (_c9Z3J::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Z3J::I64 == 0) goto c9Z3L; else goto c9Z3K;
       c9Z3L: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Z3K: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Z3J::I64;
           I64[Sp - 24] = block_c9Z3M_info;
           R1 = GHC.IO.Encoding.getFileSystemEncoding1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Z3V; else goto c9Z3N;
       u9Z3V: // global
           call _c9Z3M(R1) args: 0, res: 0, upd: 0;
       c9Z3N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getFileSystemEncoding_info" {
     GHC.IO.Encoding.getFileSystemEncoding_info:
         const GHC.IO.Encoding.getFileSystemEncoding_entry;
         const 0;
         const 4294967317;
         const S9YDC_srt+328;
 },
 _c9Z3M() //  [R1]
         { []
         }
     {offset
       c9Z3M: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Z3M_info" {
     block_c9Z3M_info:
         const _c9Z3M;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.042614651 UTC

[section ""data" . GHC.IO.Encoding.argvEncoding_closure" {
     GHC.IO.Encoding.argvEncoding_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.getFileSystemEncoding_closure;
         const 0;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.045075983 UTC

[section ""data" . GHC.IO.Encoding.setFileSystemEncoding_closure" {
     GHC.IO.Encoding.setFileSystemEncoding_closure:
         const GHC.IO.Encoding.setFileSystemEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.setFileSystemEncoding_entry() //  [R1]
         { []
         }
     {offset
       c9Z4j: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Z4k; else goto c9Z4l;
       c9Z4k: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Z4l: // global
           (_c9Z4d::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Z4d::I64 == 0) goto c9Z4f; else goto c9Z4e;
       c9Z4f: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Z4e: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Z4d::I64;
           I64[Sp - 24] = block_c9Z4g_info;
           R1 = GHC.IO.Encoding.getFileSystemEncoding1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Z4p; else goto c9Z4h;
       u9Z4p: // global
           call _c9Z4g(R1) args: 0, res: 0, upd: 0;
       c9Z4h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.setFileSystemEncoding_info" {
     GHC.IO.Encoding.setFileSystemEncoding_info:
         const GHC.IO.Encoding.setFileSystemEncoding_entry;
         const 0;
         const 4294967317;
         const S9YDC_srt+328;
 },
 _c9Z4g() //  [R1]
         { []
         }
     {offset
       c9Z4g: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Z4g_info" {
     block_c9Z4g_info:
         const _c9Z4g;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.051066146 UTC

[section ""data" . GHC.IO.Encoding.initLocaleEncoding1_closure" {
     GHC.IO.Encoding.initLocaleEncoding1_closure:
         const GHC.IO.Encoding.initLocaleEncoding1_info;
         const 0;
 },
 GHC.IO.Encoding.initLocaleEncoding1_entry() //  []
         { []
         }
     {offset
       c9Z4J: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Z4K; else goto c9Z4L;
       c9Z4K: // global
           R1 = GHC.IO.Encoding.initLocaleEncoding1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Z4L: // global
           I64[Sp - 8] = block_c9Z4H_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.initLocaleEncoding1_info" {
     GHC.IO.Encoding.initLocaleEncoding1_info:
         const GHC.IO.Encoding.initLocaleEncoding1_entry;
         const 0;
         const 36099170058108942;
         const 4294967299;
         const S9YDC_srt+152;
 },
 _c9Z4H() //  []
         { []
         }
     {offset
       c9Z4H: // global
           R3 = GHC.IO.Encoding.Iconv.localeEncodingName_closure;
           R2 = GHC.IO.Encoding.Failure.ErrorOnCodingFailure_closure+1;
           Sp = Sp + 8;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Z4H_info" {
     block_c9Z4H_info:
         const _c9Z4H;
         const 0;
         const 70373039144990;
         const S9YDC_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.056489259 UTC

[section ""data" . GHC.IO.Encoding.initLocaleEncoding_closure" {
     GHC.IO.Encoding.initLocaleEncoding_closure:
         const GHC.IO.Encoding.initLocaleEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.initLocaleEncoding_entry() //  [R1]
         { []
         }
     {offset
       c9Z55: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Z56; else goto c9Z57;
       c9Z56: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Z57: // global
           (_c9Z50::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Z50::I64 == 0) goto c9Z52; else goto c9Z51;
       c9Z52: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Z51: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Z50::I64;
           I64[Sp - 24] = block_c9Z53_info;
           Sp = Sp - 24;
           call GHC.IO.Encoding.initLocaleEncoding1_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.initLocaleEncoding_info" {
     GHC.IO.Encoding.initLocaleEncoding_info:
         const GHC.IO.Encoding.initLocaleEncoding_entry;
         const 0;
         const 4294967317;
         const S9YDC_srt+336;
 },
 _c9Z53() //  [R1]
         { []
         }
     {offset
       c9Z53: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Z53_info" {
     block_c9Z53_info:
         const _c9Z53;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.064004007 UTC

[section ""data" . GHC.IO.Encoding.getLocaleEncoding2_closure" {
     GHC.IO.Encoding.getLocaleEncoding2_closure:
         const GHC.IO.Encoding.getLocaleEncoding2_info;
         const 0;
 },
 sat_s9YCc_entry() //  [R1, R2]
         { []
         }
     {offset
       c9Z5D: // global
           _s9YC6::P64 = P64[R1 + 6];
           call MO_WriteBarrier();
           P64[_s9YC6::P64 + 8] = R2;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9YC6::P64);
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9YCc_info" {
     sat_s9YCc_info:
         const sat_s9YCc_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 sat_s9YC8_entry() //  [R1]
         { []
         }
     {offset
       c9Z5M: // global
           R1 = P64[P64[R1 + 7] + 8];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9YC8_info" {
     sat_s9YC8_info:
         const sat_s9YC8_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 GHC.IO.Encoding.getLocaleEncoding2_entry() //  []
         { []
         }
     {offset
       c9Z5Q: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Z5R; else goto c9Z5S;
       c9Z5R: // global
           R1 = GHC.IO.Encoding.getLocaleEncoding2_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Z5S: // global
           I64[Sp - 8] = block_c9Z5r_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getLocaleEncoding2_info" {
     GHC.IO.Encoding.getLocaleEncoding2_info:
         const GHC.IO.Encoding.getLocaleEncoding2_entry;
         const 0;
         const 12884901902;
         const 4294967299;
         const S9YDC_srt+344;
 },
 _c9Z5r() //  []
         { []
         }
     {offset
       c9Z5r: // global
           I64[Sp] = block_c9Z5t_info;
           R1 = GHC.IO.Encoding.initLocaleEncoding_closure;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Z5r_info" {
     block_c9Z5r_info:
         const _c9Z5r;
         const 0;
         const 4294967326;
         const S9YDC_srt+344;
 },
 _c9Z5t() //  [R1]
         { []
         }
     {offset
       c9Z5t: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9Z5W; else goto c9Z5V;
       c9Z5W: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Z5V: // global
           I64[Hp - 48] = sat_s9YCc_info;
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_s9YC8_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 46;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Z5t_info" {
     block_c9Z5t_info:
         const _c9Z5t;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.074100585 UTC

[section ""data" . GHC.IO.Encoding.getLocaleEncoding1_closure" {
     GHC.IO.Encoding.getLocaleEncoding1_closure:
         const GHC.IO.Encoding.getLocaleEncoding1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getLocaleEncoding1_entry() //  [R1]
         { []
         }
     {offset
       c9Z6z: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Z6A; else goto c9Z6B;
       c9Z6A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Z6B: // global
           (_c9Z6u::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Z6u::I64 == 0) goto c9Z6w; else goto c9Z6v;
       c9Z6w: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Z6v: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Z6u::I64;
           I64[Sp - 24] = block_c9Z6x_info;
           Sp = Sp - 24;
           call GHC.IO.Encoding.getLocaleEncoding2_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getLocaleEncoding1_info" {
     GHC.IO.Encoding.getLocaleEncoding1_info:
         const GHC.IO.Encoding.getLocaleEncoding1_entry;
         const 0;
         const 4294967317;
         const S9YDC_srt+352;
 },
 _c9Z6x() //  [R1]
         { []
         }
     {offset
       c9Z6x: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Z6x_info" {
     block_c9Z6x_info:
         const _c9Z6x;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.079720966 UTC

[section ""data" . GHC.IO.Encoding.getLocaleEncoding_closure" {
     GHC.IO.Encoding.getLocaleEncoding_closure:
         const GHC.IO.Encoding.getLocaleEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getLocaleEncoding_entry() //  [R1]
         { []
         }
     {offset
       c9Z70: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Z71; else goto c9Z72;
       c9Z71: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Z72: // global
           (_c9Z6U::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Z6U::I64 == 0) goto c9Z6W; else goto c9Z6V;
       c9Z6W: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Z6V: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Z6U::I64;
           I64[Sp - 24] = block_c9Z6X_info;
           R1 = GHC.IO.Encoding.getLocaleEncoding1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Z76; else goto c9Z6Y;
       u9Z76: // global
           call _c9Z6X(R1) args: 0, res: 0, upd: 0;
       c9Z6Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.getLocaleEncoding_info" {
     GHC.IO.Encoding.getLocaleEncoding_info:
         const GHC.IO.Encoding.getLocaleEncoding_entry;
         const 0;
         const 4294967317;
         const S9YDC_srt+360;
 },
 _c9Z6X() //  [R1]
         { []
         }
     {offset
       c9Z6X: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Z6X_info" {
     block_c9Z6X_info:
         const _c9Z6X;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.085833495 UTC

[section ""data" . GHC.IO.Encoding.setLocaleEncoding_closure" {
     GHC.IO.Encoding.setLocaleEncoding_closure:
         const GHC.IO.Encoding.setLocaleEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.setLocaleEncoding_entry() //  [R1]
         { []
         }
     {offset
       c9Z7t: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Z7u; else goto c9Z7v;
       c9Z7u: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Z7v: // global
           (_c9Z7n::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Z7n::I64 == 0) goto c9Z7p; else goto c9Z7o;
       c9Z7p: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Z7o: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Z7n::I64;
           I64[Sp - 24] = block_c9Z7q_info;
           R1 = GHC.IO.Encoding.getLocaleEncoding1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Z7z; else goto c9Z7r;
       u9Z7z: // global
           call _c9Z7q(R1) args: 0, res: 0, upd: 0;
       c9Z7r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.setLocaleEncoding_info" {
     GHC.IO.Encoding.setLocaleEncoding_info:
         const GHC.IO.Encoding.setLocaleEncoding_entry;
         const 0;
         const 4294967317;
         const S9YDC_srt+360;
 },
 _c9Z7q() //  [R1]
         { []
         }
     {offset
       c9Z7q: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Z7q_info" {
     block_c9Z7q_info:
         const _c9Z7q;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.092776702 UTC

[section ""data" . GHC.IO.Encoding.latin1_decode1_closure" {
     GHC.IO.Encoding.latin1_decode1_closure:
         const GHC.IO.Encoding.latin1_decode1_info;
 },
 sat_s9YCx_entry() //  [R1]
         { []
         }
     {offset
       c9Z80: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Z84; else goto c9Z85;
       c9Z84: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Z85: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c9Z7X_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Z89; else goto c9Z7Y;
       u9Z89: // global
           call _c9Z7X(R1) args: 0, res: 0, upd: 0;
       c9Z7Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9YCx_info" {
     sat_s9YCx_info:
         const sat_s9YCx_entry;
         const 1;
         const 16;
 },
 _c9Z7X() //  [R1]
         { []
         }
     {offset
       c9Z7X: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Z88; else goto c9Z87;
       c9Z88: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9Z87: // global
           _s9YCv::P64 = P64[R1 + 15];
           _s9YCw::P64 = P64[R1 + 23];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s9YCv::P64;
           P64[Hp] = _s9YCw::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Z7X_info" {
     block_c9Z7X_info:
         const _c9Z7X;
         const 0;
         const 30;
 },
 GHC.IO.Encoding.latin1_decode1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9Z8a: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Z8b; else goto c9Z8c;
       c9Z8b: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.latin1_decode1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Z8c: // global
           I64[Sp - 8] = block_c9Z7R_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Encoding.Latin1.latin5_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.latin1_decode1_info" {
     GHC.IO.Encoding.latin1_decode1_info:
         const GHC.IO.Encoding.latin1_decode1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c9Z7R() //  [R1]
         { []
         }
     {offset
       c9Z7R: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Z8f; else goto c9Z8e;
       c9Z8f: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Z8e: // global
           I64[Hp - 16] = sat_s9YCx_info;
           P64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Z7R_info" {
     block_c9Z7R_info:
         const _c9Z7R;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.101956891 UTC

[section ""data" . GHC.IO.Encoding.latin1_decode_closure" {
     GHC.IO.Encoding.latin1_decode_closure:
         const GHC.IO.Encoding.latin1_decode_info;
 },
 GHC.IO.Encoding.latin1_decode_entry() //  [R2, R3]
         { []
         }
     {offset
       c9Z8H: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Encoding.latin1_decode1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.latin1_decode_info" {
     GHC.IO.Encoding.latin1_decode_info:
         const GHC.IO.Encoding.latin1_decode_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.106601692 UTC

[section ""data" . GHC.IO.Encoding.latin1_encode1_closure" {
     GHC.IO.Encoding.latin1_encode1_closure:
         const GHC.IO.Encoding.latin1_encode1_info;
 },
 sat_s9YCI_entry() //  [R1]
         { []
         }
     {offset
       c9Z91: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Z95; else goto c9Z96;
       c9Z95: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Z96: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c9Z8Y_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Z9a; else goto c9Z8Z;
       u9Z9a: // global
           call _c9Z8Y(R1) args: 0, res: 0, upd: 0;
       c9Z8Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9YCI_info" {
     sat_s9YCI_info:
         const sat_s9YCI_entry;
         const 1;
         const 16;
 },
 _c9Z8Y() //  [R1]
         { []
         }
     {offset
       c9Z8Y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Z99; else goto c9Z98;
       c9Z99: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9Z98: // global
           _s9YCG::P64 = P64[R1 + 15];
           _s9YCH::P64 = P64[R1 + 23];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s9YCG::P64;
           P64[Hp] = _s9YCH::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Z8Y_info" {
     block_c9Z8Y_info:
         const _c9Z8Y;
         const 0;
         const 30;
 },
 GHC.IO.Encoding.latin1_encode1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9Z9b: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Z9c; else goto c9Z9d;
       c9Z9c: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.latin1_encode1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Z9d: // global
           I64[Sp - 8] = block_c9Z8S_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Encoding.Latin1.latin3_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.latin1_encode1_info" {
     GHC.IO.Encoding.latin1_encode1_info:
         const GHC.IO.Encoding.latin1_encode1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c9Z8S() //  [R1]
         { []
         }
     {offset
       c9Z8S: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Z9g; else goto c9Z9f;
       c9Z9g: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Z9f: // global
           I64[Hp - 16] = sat_s9YCI_info;
           P64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Z8S_info" {
     block_c9Z8S_info:
         const _c9Z8S;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.116053047 UTC

[section ""data" . GHC.IO.Encoding.latin1_encode_closure" {
     GHC.IO.Encoding.latin1_encode_closure:
         const GHC.IO.Encoding.latin1_encode_info;
 },
 GHC.IO.Encoding.latin1_encode_entry() //  [R2, R3]
         { []
         }
     {offset
       c9Z9I: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Encoding.latin1_encode1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.latin1_encode_info" {
     GHC.IO.Encoding.latin1_encode_info:
         const GHC.IO.Encoding.latin1_encode_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.119323042 UTC

[section ""relreadonly" . S9YDC_srt" {
     S9YDC_srt:
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
         const lvl1_r9XsX_closure;
         const GHC.IO.Encoding.mkTextEncoding2_closure;
         const GHC.IO.Encoding.getFileSystemEncoding_go_closure;
         const GHC.Char.$wlvl_closure;
         const GHC.IO.Encoding.Failure.codingFailureModeSuffix1_closure;
         const GHC.IO.Encoding.Failure.codingFailureModeSuffix3_closure;
         const GHC.IO.Encoding.Failure.codingFailureModeSuffix5_closure;
         const GHC.IO.Encoding.getFileSystemEncoding6_closure;
         const GHC.IO.Encoding.Latin1.mkLatin1_checked_closure;
         const GHC.IO.Encoding.Latin1.mkAscii_closure;
         const GHC.IO.Encoding.UTF8.mkUTF8_closure;
         const GHC.IO.Encoding.UTF32.mkUTF32le_closure;
         const GHC.IO.Encoding.UTF32.mkUTF32be_closure;
         const GHC.IO.Encoding.UTF32.mkUTF32_closure;
         const GHC.IO.Encoding.UTF16.mkUTF16le_closure;
         const GHC.IO.Encoding.UTF16.mkUTF16be_closure;
         const GHC.IO.Encoding.UTF16.mkUTF16_closure;
         const GHC.IO.Encoding.Iconv.iconvEncoding2_closure;
         const GHC.IO.Encoding.getFileSystemEncoding5_closure;
         const GHC.IO.Encoding.getFileSystemEncoding7_closure;
         const GHC.IO.Encoding.getFileSystemEncoding34_closure;
         const GHC.IO.Encoding.getFileSystemEncoding67_closure;
         const GHC.IO.Encoding.getFileSystemEncoding69_closure;
         const GHC.IO.Encoding.getFileSystemEncoding71_closure;
         const GHC.IO.Encoding.getFileSystemEncoding73_closure;
         const GHC.IO.Encoding.getFileSystemEncoding75_closure;
         const GHC.IO.Encoding.getFileSystemEncoding77_closure;
         const GHC.IO.Encoding.getFileSystemEncoding79_closure;
         const GHC.IO.Encoding.mkTextEncoding1_closure;
         const GHC.IO.Encoding.mkTextEncoding3_closure;
         const GHC.IO.Encoding.mkTextEncoding5_closure;
         const GHC.IO.Encoding.mkTextEncoding7_closure;
         const GHC.IO.Encoding.Iconv.localeEncodingName_closure;
         const GHC.IO.Encoding.getForeignEncoding4_closure;
         const GHC.IO.Encoding.getForeignEncoding2_closure;
         const GHC.IO.Encoding.getForeignEncoding3_closure;
         const GHC.IO.Encoding.getForeignEncoding1_closure;
         const GHC.IO.Encoding.getFileSystemEncoding4_closure;
         const GHC.IO.Encoding.getFileSystemEncoding2_closure;
         const GHC.IO.Encoding.getFileSystemEncoding3_closure;
         const GHC.IO.Encoding.getFileSystemEncoding1_closure;
         const GHC.IO.Encoding.initLocaleEncoding1_closure;
         const GHC.IO.Encoding.initLocaleEncoding_closure;
         const GHC.IO.Encoding.getLocaleEncoding2_closure;
         const GHC.IO.Encoding.getLocaleEncoding1_closure;
 }]

