
==================== Raw Cmm ====================
2018-03-16 16:03:25.782262385 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:03:25.783436601 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar2_bytes" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar2_bytes:
         I8[] [116,104,114,101,97,100,32,98,108,111,99,107,101,100,32,105,110,100,101,102,105,110,105,116,101,108,121,32,105,110,32,97,110,32,77,86,97,114,32,111,112,101,114,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.787748559 UTC

[section ""data" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar1_closure" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar1_closure:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar1_entry() //  [R1]
         { []
         }
     {offset
       c8m5N: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8m5O; else goto c8m5P;
       c8m5O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8m5P: // global
           (_c8m5K::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8m5K::I64 == 0) goto c8m5M; else goto c8m5L;
       c8m5M: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8m5L: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8m5K::I64;
           R2 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar1_info" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar1_info:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.792436052 UTC

[section ""data" . GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_$cshowsPrec_closure" {
     GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_$cshowsPrec_closure:
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_$cshowsPrec_entry() //  [R2,
                                                                           R3, R4]
         { []
         }
     {offset
       c8m64: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8m65; else goto c8m66;
       c8m65: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8m66: // global
           I64[Sp - 16] = block_c8m61_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8m6a; else goto c8m62;
       u8m6a: // global
           call _c8m61() args: 0, res: 0, upd: 0;
       c8m62: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_$cshowsPrec_info" {
     GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_$cshowsPrec_info:
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S8ji8_srt;
 },
 _c8m61() //  []
         { []
         }
     {offset
       c8m61: // global
           R3 = P64[Sp + 8];
           R2 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8m61_info" {
     block_c8m61_info:
         const _c8m61;
         const 1;
         const 4294967326;
         const S8ji8_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.798445498 UTC

[section ""data" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cshow_closure" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cshow_closure:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cshow_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c8m6r: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8m6s; else goto c8m6t;
       c8m6s: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8m6t: // global
           I64[Sp - 8] = block_c8m6o_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8m6x; else goto c8m6p;
       u8m6x: // global
           call _c8m6o() args: 0, res: 0, upd: 0;
       c8m6p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cshow_info" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cshow_info:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S8ji8_srt;
 },
 _c8m6o() //  []
         { []
         }
     {offset
       c8m6o: // global
           R1 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8m6o_info" {
     block_c8m6o_info:
         const _c8m6o;
         const 0;
         const 4294967326;
         const S8ji8_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.803920655 UTC

[section ""data" . GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar1_closure" {
     GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar1_closure:
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar1_info;
         const 0;
 },
 GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar1_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       c8m6P: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8m6Q; else goto c8m6R;
       c8m6Q: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8m6R: // global
           I64[Sp - 16] = block_c8m6M_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8m6V; else goto c8m6N;
       u8m6V: // global
           call _c8m6M() args: 0, res: 0, upd: 0;
       c8m6N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar1_info" {
     GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar1_info:
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S8ji8_srt;
 },
 _c8m6M() //  []
         { []
         }
     {offset
       c8m6M: // global
           R3 = P64[Sp + 8];
           R2 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8m6M_info" {
     block_c8m6M_info:
         const _c8m6M;
         const 1;
         const 4294967326;
         const S8ji8_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.809334727 UTC

[section ""data" . GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_$cshowList_closure" {
     GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_$cshowList_closure:
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_$cshowList_info;
         const 0;
 },
 GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_$cshowList_entry() //  [R2,
                                                                          R3]
         { []
         }
     {offset
       c8m79: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_$cshowList_info" {
     GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_$cshowList_info:
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S8ji8_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.81244553 UTC

[section ""data" . GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_closure" {
     GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_$cshowsPrec_closure+3;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cshow_closure+1;
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.814186515 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM2_bytes" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM2_bytes:
         I8[] [116,104,114,101,97,100,32,98,108,111,99,107,101,100,32,105,110,100,101,102,105,110,105,116,101,108,121,32,105,110,32,97,110,32,83,84,77,32,116,114,97,110,115,97,99,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.81651484 UTC

[section ""data" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM1_closure" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM1_closure:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM1_entry() //  [R1]
         { []
         }
     {offset
       c8m7o: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8m7p; else goto c8m7q;
       c8m7p: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8m7q: // global
           (_c8m7l::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8m7l::I64 == 0) goto c8m7n; else goto c8m7m;
       c8m7n: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8m7m: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8m7l::I64;
           R2 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM1_info" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM1_info:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.821996898 UTC

[section ""data" . GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_$cshowsPrec_closure" {
     GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_$cshowsPrec_closure:
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_$cshowsPrec_entry() //  [R2,
                                                                          R3, R4]
         { []
         }
     {offset
       c8m7F: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8m7G; else goto c8m7H;
       c8m7G: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8m7H: // global
           I64[Sp - 16] = block_c8m7C_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8m7L; else goto c8m7D;
       u8m7L: // global
           call _c8m7C() args: 0, res: 0, upd: 0;
       c8m7D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_$cshowsPrec_info" {
     GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_$cshowsPrec_info:
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S8ji8_srt+32;
 },
 _c8m7C() //  []
         { []
         }
     {offset
       c8m7C: // global
           R3 = P64[Sp + 8];
           R2 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8m7C_info" {
     block_c8m7C_info:
         const _c8m7C;
         const 1;
         const 4294967326;
         const S8ji8_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.827616051 UTC

[section ""data" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cshow_closure" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cshow_closure:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cshow_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c8m82: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8m83; else goto c8m84;
       c8m83: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8m84: // global
           I64[Sp - 8] = block_c8m7Z_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8m88; else goto c8m80;
       u8m88: // global
           call _c8m7Z() args: 0, res: 0, upd: 0;
       c8m80: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cshow_info" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cshow_info:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S8ji8_srt+32;
 },
 _c8m7Z() //  []
         { []
         }
     {offset
       c8m7Z: // global
           R1 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8m7Z_info" {
     block_c8m7Z_info:
         const _c8m7Z;
         const 0;
         const 4294967326;
         const S8ji8_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.833156213 UTC

[section ""data" . GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM1_closure" {
     GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM1_closure:
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM1_info;
         const 0;
 },
 GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM1_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       c8m8q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8m8r; else goto c8m8s;
       c8m8r: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8m8s: // global
           I64[Sp - 16] = block_c8m8n_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8m8w; else goto c8m8o;
       u8m8w: // global
           call _c8m8n() args: 0, res: 0, upd: 0;
       c8m8o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM1_info" {
     GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM1_info:
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S8ji8_srt+32;
 },
 _c8m8n() //  []
         { []
         }
     {offset
       c8m8n: // global
           R3 = P64[Sp + 8];
           R2 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8m8n_info" {
     block_c8m8n_info:
         const _c8m8n;
         const 1;
         const 4294967326;
         const S8ji8_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.838212647 UTC

[section ""data" . GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_$cshowList_closure" {
     GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_$cshowList_closure:
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_$cshowList_info;
         const 0;
 },
 GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_$cshowList_entry() //  [R2,
                                                                         R3]
         { []
         }
     {offset
       c8m8K: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_$cshowList_info" {
     GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_$cshowList_info:
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S8ji8_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.841675254 UTC

[section ""data" . GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_closure" {
     GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_$cshowsPrec_closure+3;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cshow_closure+1;
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.843346185 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionDeadlock2_bytes" {
     GHC.IO.Exception.$fExceptionDeadlock2_bytes:
         I8[] [60,60,100,101,97,100,108,111,99,107,62,62]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.845710736 UTC

[section ""data" . GHC.IO.Exception.$fExceptionDeadlock1_closure" {
     GHC.IO.Exception.$fExceptionDeadlock1_closure:
         const GHC.IO.Exception.$fExceptionDeadlock1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionDeadlock1_entry() //  [R1]
         { []
         }
     {offset
       c8m8Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8m90; else goto c8m91;
       c8m90: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8m91: // global
           (_c8m8W::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8m8W::I64 == 0) goto c8m8Y; else goto c8m8X;
       c8m8Y: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8m8X: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8m8W::I64;
           R2 = GHC.IO.Exception.$fExceptionDeadlock2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionDeadlock1_info" {
     GHC.IO.Exception.$fExceptionDeadlock1_info:
         const GHC.IO.Exception.$fExceptionDeadlock1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.850169628 UTC

[section ""data" . GHC.IO.Exception.$fShowDeadlock_$cshowsPrec_closure" {
     GHC.IO.Exception.$fShowDeadlock_$cshowsPrec_closure:
         const GHC.IO.Exception.$fShowDeadlock_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Exception.$fShowDeadlock_$cshowsPrec_entry() //  [R2, R3,
                                                          R4]
         { []
         }
     {offset
       c8m9g: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8m9h; else goto c8m9i;
       c8m9h: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fShowDeadlock_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8m9i: // global
           I64[Sp - 16] = block_c8m9d_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8m9m; else goto c8m9e;
       u8m9m: // global
           call _c8m9d() args: 0, res: 0, upd: 0;
       c8m9e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowDeadlock_$cshowsPrec_info" {
     GHC.IO.Exception.$fShowDeadlock_$cshowsPrec_info:
         const GHC.IO.Exception.$fShowDeadlock_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S8ji8_srt+64;
 },
 _c8m9d() //  []
         { []
         }
     {offset
       c8m9d: // global
           R3 = P64[Sp + 8];
           R2 = GHC.IO.Exception.$fExceptionDeadlock1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8m9d_info" {
     block_c8m9d_info:
         const _c8m9d;
         const 1;
         const 4294967326;
         const S8ji8_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.856883248 UTC

[section ""data" . GHC.IO.Exception.$fExceptionDeadlock_$cshow_closure" {
     GHC.IO.Exception.$fExceptionDeadlock_$cshow_closure:
         const GHC.IO.Exception.$fExceptionDeadlock_$cshow_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionDeadlock_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c8m9D: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8m9E; else goto c8m9F;
       c8m9E: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionDeadlock_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8m9F: // global
           I64[Sp - 8] = block_c8m9A_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8m9J; else goto c8m9B;
       u8m9J: // global
           call _c8m9A() args: 0, res: 0, upd: 0;
       c8m9B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionDeadlock_$cshow_info" {
     GHC.IO.Exception.$fExceptionDeadlock_$cshow_info:
         const GHC.IO.Exception.$fExceptionDeadlock_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S8ji8_srt+64;
 },
 _c8m9A() //  []
         { []
         }
     {offset
       c8m9A: // global
           R1 = GHC.IO.Exception.$fExceptionDeadlock1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8m9A_info" {
     block_c8m9A_info:
         const _c8m9A;
         const 0;
         const 4294967326;
         const S8ji8_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.862686662 UTC

[section ""data" . GHC.IO.Exception.$fShowDeadlock1_closure" {
     GHC.IO.Exception.$fShowDeadlock1_closure:
         const GHC.IO.Exception.$fShowDeadlock1_info;
         const 0;
 },
 GHC.IO.Exception.$fShowDeadlock1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8ma1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8ma2; else goto c8ma3;
       c8ma2: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fShowDeadlock1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8ma3: // global
           I64[Sp - 16] = block_c8m9Y_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8ma7; else goto c8m9Z;
       u8ma7: // global
           call _c8m9Y() args: 0, res: 0, upd: 0;
       c8m9Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowDeadlock1_info" {
     GHC.IO.Exception.$fShowDeadlock1_info:
         const GHC.IO.Exception.$fShowDeadlock1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S8ji8_srt+64;
 },
 _c8m9Y() //  []
         { []
         }
     {offset
       c8m9Y: // global
           R3 = P64[Sp + 8];
           R2 = GHC.IO.Exception.$fExceptionDeadlock1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8m9Y_info" {
     block_c8m9Y_info:
         const _c8m9Y;
         const 1;
         const 4294967326;
         const S8ji8_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.867754436 UTC

[section ""data" . GHC.IO.Exception.$fShowDeadlock_$cshowList_closure" {
     GHC.IO.Exception.$fShowDeadlock_$cshowList_closure:
         const GHC.IO.Exception.$fShowDeadlock_$cshowList_info;
         const 0;
 },
 GHC.IO.Exception.$fShowDeadlock_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c8mal: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Exception.$fShowDeadlock1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowDeadlock_$cshowList_info" {
     GHC.IO.Exception.$fShowDeadlock_$cshowList_info:
         const GHC.IO.Exception.$fShowDeadlock_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S8ji8_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.871046333 UTC

[section ""data" . GHC.IO.Exception.$fShowDeadlock_closure" {
     GHC.IO.Exception.$fShowDeadlock_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Exception.$fShowDeadlock_$cshowsPrec_closure+3;
         const GHC.IO.Exception.$fExceptionDeadlock_$cshow_closure+1;
         const GHC.IO.Exception.$fShowDeadlock_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.872750924 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionAllocationLimitExceeded2_bytes" {
     GHC.IO.Exception.$fExceptionAllocationLimitExceeded2_bytes:
         I8[] [97,108,108,111,99,97,116,105,111,110,32,108,105,109,105,116,32,101,120,99,101,101,100,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.875314734 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAllocationLimitExceeded1_closure" {
     GHC.IO.Exception.$fExceptionAllocationLimitExceeded1_closure:
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionAllocationLimitExceeded1_entry() //  [R1]
         { []
         }
     {offset
       c8maA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8maB; else goto c8maC;
       c8maB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8maC: // global
           (_c8max::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8max::I64 == 0) goto c8maz; else goto c8may;
       c8maz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8may: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8max::I64;
           R2 = GHC.IO.Exception.$fExceptionAllocationLimitExceeded2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionAllocationLimitExceeded1_info" {
     GHC.IO.Exception.$fExceptionAllocationLimitExceeded1_info:
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.879713953 UTC

[section ""data" . GHC.IO.Exception.$fShowAllocationLimitExceeded_$cshowsPrec_closure" {
     GHC.IO.Exception.$fShowAllocationLimitExceeded_$cshowsPrec_closure:
         const GHC.IO.Exception.$fShowAllocationLimitExceeded_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Exception.$fShowAllocationLimitExceeded_$cshowsPrec_entry() //  [R2,
                                                                         R3, R4]
         { []
         }
     {offset
       c8maR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8maS; else goto c8maT;
       c8maS: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fShowAllocationLimitExceeded_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8maT: // global
           I64[Sp - 16] = block_c8maO_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8maX; else goto c8maP;
       u8maX: // global
           call _c8maO() args: 0, res: 0, upd: 0;
       c8maP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowAllocationLimitExceeded_$cshowsPrec_info" {
     GHC.IO.Exception.$fShowAllocationLimitExceeded_$cshowsPrec_info:
         const GHC.IO.Exception.$fShowAllocationLimitExceeded_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S8ji8_srt+96;
 },
 _c8maO() //  []
         { []
         }
     {offset
       c8maO: // global
           R3 = P64[Sp + 8];
           R2 = GHC.IO.Exception.$fExceptionAllocationLimitExceeded1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8maO_info" {
     block_c8maO_info:
         const _c8maO;
         const 1;
         const 4294967326;
         const S8ji8_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.885563901 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cshow_closure" {
     GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cshow_closure:
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cshow_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c8mbe: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8mbf; else goto c8mbg;
       c8mbf: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8mbg: // global
           I64[Sp - 8] = block_c8mbb_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8mbk; else goto c8mbc;
       u8mbk: // global
           call _c8mbb() args: 0, res: 0, upd: 0;
       c8mbc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cshow_info" {
     GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cshow_info:
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S8ji8_srt+96;
 },
 _c8mbb() //  []
         { []
         }
     {offset
       c8mbb: // global
           R1 = GHC.IO.Exception.$fExceptionAllocationLimitExceeded1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mbb_info" {
     block_c8mbb_info:
         const _c8mbb;
         const 0;
         const 4294967326;
         const S8ji8_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.892040562 UTC

[section ""data" . GHC.IO.Exception.$fShowAllocationLimitExceeded1_closure" {
     GHC.IO.Exception.$fShowAllocationLimitExceeded1_closure:
         const GHC.IO.Exception.$fShowAllocationLimitExceeded1_info;
         const 0;
 },
 GHC.IO.Exception.$fShowAllocationLimitExceeded1_entry() //  [R2,
                                                              R3]
         { []
         }
     {offset
       c8mbC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mbD; else goto c8mbE;
       c8mbD: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fShowAllocationLimitExceeded1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8mbE: // global
           I64[Sp - 16] = block_c8mbz_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8mbI; else goto c8mbA;
       u8mbI: // global
           call _c8mbz() args: 0, res: 0, upd: 0;
       c8mbA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowAllocationLimitExceeded1_info" {
     GHC.IO.Exception.$fShowAllocationLimitExceeded1_info:
         const GHC.IO.Exception.$fShowAllocationLimitExceeded1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S8ji8_srt+96;
 },
 _c8mbz() //  []
         { []
         }
     {offset
       c8mbz: // global
           R3 = P64[Sp + 8];
           R2 = GHC.IO.Exception.$fExceptionAllocationLimitExceeded1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mbz_info" {
     block_c8mbz_info:
         const _c8mbz;
         const 1;
         const 4294967326;
         const S8ji8_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.897290331 UTC

[section ""data" . GHC.IO.Exception.$fShowAllocationLimitExceeded_$cshowList_closure" {
     GHC.IO.Exception.$fShowAllocationLimitExceeded_$cshowList_closure:
         const GHC.IO.Exception.$fShowAllocationLimitExceeded_$cshowList_info;
         const 0;
 },
 GHC.IO.Exception.$fShowAllocationLimitExceeded_$cshowList_entry() //  [R2,
                                                                        R3]
         { []
         }
     {offset
       c8mbW: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Exception.$fShowAllocationLimitExceeded1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowAllocationLimitExceeded_$cshowList_info" {
     GHC.IO.Exception.$fShowAllocationLimitExceeded_$cshowList_info:
         const GHC.IO.Exception.$fShowAllocationLimitExceeded_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S8ji8_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.900354573 UTC

[section ""data" . GHC.IO.Exception.$fShowAllocationLimitExceeded_closure" {
     GHC.IO.Exception.$fShowAllocationLimitExceeded_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Exception.$fShowAllocationLimitExceeded_$cshowsPrec_closure+3;
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cshow_closure+1;
         const GHC.IO.Exception.$fShowAllocationLimitExceeded_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.902309326 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionCompactionFailed1_bytes" {
     GHC.IO.Exception.$fExceptionCompactionFailed1_bytes:
         I8[] [99,111,109,112,97,99,116,105,111,110,32,102,97,105,108,101,100,58,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.90496954 UTC

[section ""data" . GHC.IO.Exception.$w$cshowsPrec2_closure" {
     GHC.IO.Exception.$w$cshowsPrec2_closure:
         const GHC.IO.Exception.$w$cshowsPrec2_info;
 },
 sat_s8j4q_entry() //  [R1]
         { []
         }
     {offset
       c8mcd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mce; else goto c8mcf;
       c8mce: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mcf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.IO.Exception.$fExceptionCompactionFailed1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8j4q_info" {
     sat_s8j4q_info:
         const sat_s8j4q_entry;
         const 1;
         const 16;
 },
 GHC.IO.Exception.$w$cshowsPrec2_entry() //  [R2]
         { []
         }
     {offset
       c8mcg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8mck; else goto c8mcj;
       c8mck: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Exception.$w$cshowsPrec2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8mcj: // global
           I64[Hp - 16] = sat_s8j4q_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = GHC.Base.++_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$w$cshowsPrec2_info" {
     GHC.IO.Exception.$w$cshowsPrec2_info:
         const GHC.IO.Exception.$w$cshowsPrec2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.910386702 UTC

[section ""data" . GHC.IO.Exception.$fShowCompactionFailed_$cshowsPrec_closure" {
     GHC.IO.Exception.$fShowCompactionFailed_$cshowsPrec_closure:
         const GHC.IO.Exception.$fShowCompactionFailed_$cshowsPrec_info;
 },
 GHC.IO.Exception.$fShowCompactionFailed_$cshowsPrec_entry() //  [R3]
         { []
         }
     {offset
       c8mcx: // global
           R2 = R3;
           call GHC.IO.Exception.$w$cshowsPrec2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowCompactionFailed_$cshowsPrec_info" {
     GHC.IO.Exception.$fShowCompactionFailed_$cshowsPrec_info:
         const GHC.IO.Exception.$fShowCompactionFailed_$cshowsPrec_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.913674342 UTC

[section ""data" . GHC.IO.Exception.$fExceptionCompactionFailed_$cshow_closure" {
     GHC.IO.Exception.$fExceptionCompactionFailed_$cshow_closure:
         const GHC.IO.Exception.$fExceptionCompactionFailed_$cshow_info;
 },
 GHC.IO.Exception.$fExceptionCompactionFailed_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c8mcI: // global
           R3 = R2;
           R2 = GHC.IO.Exception.$fExceptionCompactionFailed1_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionCompactionFailed_$cshow_info" {
     GHC.IO.Exception.$fExceptionCompactionFailed_$cshow_info:
         const GHC.IO.Exception.$fExceptionCompactionFailed_$cshow_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.91707161 UTC

[section ""data" . GHC.IO.Exception.$fShowCompactionFailed_$cshowList_closure" {
     GHC.IO.Exception.$fShowCompactionFailed_$cshowList_closure:
         const GHC.IO.Exception.$fShowCompactionFailed_$cshowList_info;
 },
 GHC.IO.Exception.$fShowCompactionFailed_$cshowList_entry() //  [R2,
                                                                 R3]
         { []
         }
     {offset
       c8mcT: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Exception.$w$cshowsPrec2_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowCompactionFailed_$cshowList_info" {
     GHC.IO.Exception.$fShowCompactionFailed_$cshowList_info:
         const GHC.IO.Exception.$fShowCompactionFailed_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.920785926 UTC

[section ""data" . GHC.IO.Exception.$fShowCompactionFailed_closure" {
     GHC.IO.Exception.$fShowCompactionFailed_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Exception.$fShowCompactionFailed_$cshowsPrec_closure+2;
         const GHC.IO.Exception.$fExceptionCompactionFailed_$cshow_closure+1;
         const GHC.IO.Exception.$fShowCompactionFailed_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.923294282 UTC

[section ""data" . GHC.IO.Exception.$fShowAssertionFailed_$cshowsPrec_closure" {
     GHC.IO.Exception.$fShowAssertionFailed_$cshowsPrec_closure:
         const GHC.IO.Exception.$fShowAssertionFailed_$cshowsPrec_info;
 },
 GHC.IO.Exception.$fShowAssertionFailed_$cshowsPrec_entry() //  [R3,
                                                                 R4]
         { []
         }
     {offset
       c8md5: // global
           _s8j4x::P64 = R3;
           R3 = R4;
           R2 = _s8j4x::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowAssertionFailed_$cshowsPrec_info" {
     GHC.IO.Exception.$fShowAssertionFailed_$cshowsPrec_info:
         const GHC.IO.Exception.$fShowAssertionFailed_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.926791828 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAssertionFailed1_closure" {
     GHC.IO.Exception.$fExceptionAssertionFailed1_closure:
         const GHC.IO.Exception.$fExceptionAssertionFailed1_info;
 },
 GHC.IO.Exception.$fExceptionAssertionFailed1_entry() //  [R2]
         { []
         }
     {offset
       c8mdg: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionAssertionFailed1_info" {
     GHC.IO.Exception.$fExceptionAssertionFailed1_info:
         const GHC.IO.Exception.$fExceptionAssertionFailed1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.930215007 UTC

[section ""data" . GHC.IO.Exception.$fShowAssertionFailed_$cshowList_closure" {
     GHC.IO.Exception.$fShowAssertionFailed_$cshowList_closure:
         const GHC.IO.Exception.$fShowAssertionFailed_$cshowList_info;
 },
 GHC.IO.Exception.$fShowAssertionFailed_$cshowList_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       c8mdt: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Base.++_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowAssertionFailed_$cshowList_info" {
     GHC.IO.Exception.$fShowAssertionFailed_$cshowList_info:
         const GHC.IO.Exception.$fShowAssertionFailed_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.933597844 UTC

[section ""data" . GHC.IO.Exception.$fShowAssertionFailed_closure" {
     GHC.IO.Exception.$fShowAssertionFailed_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Exception.$fShowAssertionFailed_$cshowsPrec_closure+3;
         const GHC.IO.Exception.$fExceptionAssertionFailed1_closure+1;
         const GHC.IO.Exception.$fShowAssertionFailed_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.936234104 UTC

[section ""data" . GHC.IO.Exception.$fExceptionSomeAsyncException_$cshow_closure" {
     GHC.IO.Exception.$fExceptionSomeAsyncException_$cshow_closure:
         const GHC.IO.Exception.$fExceptionSomeAsyncException_$cshow_info;
 },
 GHC.IO.Exception.$fExceptionSomeAsyncException_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c8mdI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mdM; else goto c8mdN;
       c8mdM: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionSomeAsyncException_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8mdN: // global
           I64[Sp - 8] = block_c8mdF_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8mdT; else goto c8mdG;
       u8mdT: // global
           call _c8mdF(R1) args: 0, res: 0, upd: 0;
       c8mdG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionSomeAsyncException_$cshow_info" {
     GHC.IO.Exception.$fExceptionSomeAsyncException_$cshow_info:
         const GHC.IO.Exception.$fExceptionSomeAsyncException_$cshow_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8mdF() //  [R1]
         { []
         }
     {offset
       c8mdF: // global
           I64[Sp - 8] = block_c8mdL_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p2Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mdF_info" {
     block_c8mdF_info:
         const _c8mdF;
         const 0;
         const 30;
 },
 _c8mdL() //  [R1]
         { []
         }
     {offset
       c8mdL: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Show.show_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mdL_info" {
     block_c8mdL_info:
         const _c8mdL;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.943619319 UTC

[section ""data" . GHC.IO.Exception.$fShowSomeAsyncException_$cshowsPrec_closure" {
     GHC.IO.Exception.$fShowSomeAsyncException_$cshowsPrec_closure:
         const GHC.IO.Exception.$fShowSomeAsyncException_$cshowsPrec_info;
 },
 GHC.IO.Exception.$fShowSomeAsyncException_$cshowsPrec_entry() //  [R2,
                                                                    R3, R4]
         { []
         }
     {offset
       c8mee: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8mem; else goto c8men;
       c8mem: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fShowSomeAsyncException_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8men: // global
           I64[Sp - 16] = block_c8meb_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8meu; else goto c8mec;
       u8meu: // global
           call _c8meb(R1) args: 0, res: 0, upd: 0;
       c8mec: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowSomeAsyncException_$cshowsPrec_info" {
     GHC.IO.Exception.$fShowSomeAsyncException_$cshowsPrec_info:
         const GHC.IO.Exception.$fShowSomeAsyncException_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c8meb() //  [R1]
         { []
         }
     {offset
       c8meb: // global
           I64[Sp - 8] = block_c8meh_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p2Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8meb_info" {
     block_c8meb_info:
         const _c8meb;
         const 1;
         const 30;
 },
 _c8meh() //  [R1]
         { []
         }
     {offset
       c8meh: // global
           _s8j4L::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8mel_info;
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = _s8j4L::P64;
           Sp = Sp - 8;
           call GHC.Show.show_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8meh_info" {
     block_c8meh_info:
         const _c8meh;
         const 2;
         const 30;
 },
 _c8mel() //  [R1]
         { []
         }
     {offset
       c8mel: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mel_info" {
     block_c8mel_info:
         const _c8mel;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.952744375 UTC

[section ""data" . GHC.IO.Exception.$fShowSomeAsyncException1_closure" {
     GHC.IO.Exception.$fShowSomeAsyncException1_closure:
         const GHC.IO.Exception.$fShowSomeAsyncException1_info;
 },
 GHC.IO.Exception.$fShowSomeAsyncException1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8meS: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8mf0; else goto c8mf1;
       c8mf0: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fShowSomeAsyncException1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8mf1: // global
           I64[Sp - 16] = block_c8meP_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8mf8; else goto c8meQ;
       u8mf8: // global
           call _c8meP(R1) args: 0, res: 0, upd: 0;
       c8meQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowSomeAsyncException1_info" {
     GHC.IO.Exception.$fShowSomeAsyncException1_info:
         const GHC.IO.Exception.$fShowSomeAsyncException1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8meP() //  [R1]
         { []
         }
     {offset
       c8meP: // global
           I64[Sp - 8] = block_c8meV_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p2Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8meP_info" {
     block_c8meP_info:
         const _c8meP;
         const 1;
         const 30;
 },
 _c8meV() //  [R1]
         { []
         }
     {offset
       c8meV: // global
           _s8j4S::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8meZ_info;
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = _s8j4S::P64;
           Sp = Sp - 8;
           call GHC.Show.show_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8meV_info" {
     block_c8meV_info:
         const _c8meV;
         const 2;
         const 30;
 },
 _c8meZ() //  [R1]
         { []
         }
     {offset
       c8meZ: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8meZ_info" {
     block_c8meZ_info:
         const _c8meZ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.961185882 UTC

[section ""data" . GHC.IO.Exception.$fShowSomeAsyncException_$cshowList_closure" {
     GHC.IO.Exception.$fShowSomeAsyncException_$cshowList_closure:
         const GHC.IO.Exception.$fShowSomeAsyncException_$cshowList_info;
 },
 GHC.IO.Exception.$fShowSomeAsyncException_$cshowList_entry() //  [R2,
                                                                   R3]
         { []
         }
     {offset
       c8mft: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Exception.$fShowSomeAsyncException1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowSomeAsyncException_$cshowList_info" {
     GHC.IO.Exception.$fShowSomeAsyncException_$cshowList_info:
         const GHC.IO.Exception.$fShowSomeAsyncException_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.964791599 UTC

[section ""data" . GHC.IO.Exception.$fShowSomeAsyncException_closure" {
     GHC.IO.Exception.$fShowSomeAsyncException_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Exception.$fShowSomeAsyncException_$cshowsPrec_closure+3;
         const GHC.IO.Exception.$fExceptionSomeAsyncException_$cshow_closure+1;
         const GHC.IO.Exception.$fShowSomeAsyncException_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.966522723 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionAsyncException8_bytes" {
     GHC.IO.Exception.$fExceptionAsyncException8_bytes:
         I8[] [115,116,97,99,107,32,111,118,101,114,102,108,111,119]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.968803088 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAsyncException7_closure" {
     GHC.IO.Exception.$fExceptionAsyncException7_closure:
         const GHC.IO.Exception.$fExceptionAsyncException7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionAsyncException7_entry() //  [R1]
         { []
         }
     {offset
       c8mfI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mfJ; else goto c8mfK;
       c8mfJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mfK: // global
           (_c8mfF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8mfF::I64 == 0) goto c8mfH; else goto c8mfG;
       c8mfH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8mfG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8mfF::I64;
           R2 = GHC.IO.Exception.$fExceptionAsyncException8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionAsyncException7_info" {
     GHC.IO.Exception.$fExceptionAsyncException7_info:
         const GHC.IO.Exception.$fExceptionAsyncException7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.972347799 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionAsyncException6_bytes" {
     GHC.IO.Exception.$fExceptionAsyncException6_bytes:
         I8[] [104,101,97,112,32,111,118,101,114,102,108,111,119]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.974821133 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAsyncException5_closure" {
     GHC.IO.Exception.$fExceptionAsyncException5_closure:
         const GHC.IO.Exception.$fExceptionAsyncException5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionAsyncException5_entry() //  [R1]
         { []
         }
     {offset
       c8mfZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mg0; else goto c8mg1;
       c8mg0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mg1: // global
           (_c8mfW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8mfW::I64 == 0) goto c8mfY; else goto c8mfX;
       c8mfY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8mfX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8mfW::I64;
           R2 = GHC.IO.Exception.$fExceptionAsyncException6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionAsyncException5_info" {
     GHC.IO.Exception.$fExceptionAsyncException5_info:
         const GHC.IO.Exception.$fExceptionAsyncException5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.978316791 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionAsyncException4_bytes" {
     GHC.IO.Exception.$fExceptionAsyncException4_bytes:
         I8[] [116,104,114,101,97,100,32,107,105,108,108,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.980476473 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAsyncException3_closure" {
     GHC.IO.Exception.$fExceptionAsyncException3_closure:
         const GHC.IO.Exception.$fExceptionAsyncException3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionAsyncException3_entry() //  [R1]
         { []
         }
     {offset
       c8mgg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mgh; else goto c8mgi;
       c8mgh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mgi: // global
           (_c8mgd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8mgd::I64 == 0) goto c8mgf; else goto c8mge;
       c8mgf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8mge: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8mgd::I64;
           R2 = GHC.IO.Exception.$fExceptionAsyncException4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionAsyncException3_info" {
     GHC.IO.Exception.$fExceptionAsyncException3_info:
         const GHC.IO.Exception.$fExceptionAsyncException3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.98420117 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionAsyncException2_bytes" {
     GHC.IO.Exception.$fExceptionAsyncException2_bytes:
         I8[] [117,115,101,114,32,105,110,116,101,114,114,117,112,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.986919733 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAsyncException1_closure" {
     GHC.IO.Exception.$fExceptionAsyncException1_closure:
         const GHC.IO.Exception.$fExceptionAsyncException1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionAsyncException1_entry() //  [R1]
         { []
         }
     {offset
       c8mgx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mgy; else goto c8mgz;
       c8mgy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mgz: // global
           (_c8mgu::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8mgu::I64 == 0) goto c8mgw; else goto c8mgv;
       c8mgw: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8mgv: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8mgu::I64;
           R2 = GHC.IO.Exception.$fExceptionAsyncException2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionAsyncException1_info" {
     GHC.IO.Exception.$fExceptionAsyncException1_info:
         const GHC.IO.Exception.$fExceptionAsyncException1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.991524736 UTC

[section ""data" . GHC.IO.Exception.$w$cshowsPrec1_closure" {
     GHC.IO.Exception.$w$cshowsPrec1_closure:
         const GHC.IO.Exception.$w$cshowsPrec1_info;
         const 0;
 },
 GHC.IO.Exception.$w$cshowsPrec1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8mgU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mgV; else goto c8mgW;
       c8mgV: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$w$cshowsPrec1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8mgW: // global
           I64[Sp - 16] = block_c8mgL_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8mhb; else goto c8mgM;
       u8mhb: // global
           call _c8mgL(R1) args: 0, res: 0, upd: 0;
       c8mgM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$w$cshowsPrec1_info" {
     GHC.IO.Exception.$w$cshowsPrec1_info:
         const GHC.IO.Exception.$w$cshowsPrec1_entry;
         const 0;
         const 133143986190;
         const 8589934607;
         const S8ji8_srt+128;
 },
 _c8mgL() //  [R1]
         { []
         }
     {offset
       c8mgL: // global
           _s8j4Y::P64 = P64[Sp + 8];
           _c8mgT::P64 = R1 & 7;
           if (_c8mgT::P64 < 3) goto u8mh9; else goto u8mha;
       u8mh9: // global
           if (_c8mgT::P64 < 2) goto c8mgP; else goto c8mgQ;
       c8mgP: // global
           R3 = _s8j4Y::P64;
           R2 = GHC.IO.Exception.$fExceptionAsyncException7_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8mgQ: // global
           R3 = _s8j4Y::P64;
           R2 = GHC.IO.Exception.$fExceptionAsyncException5_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       u8mha: // global
           if (_c8mgT::P64 < 4) goto c8mgR; else goto c8mgS;
       c8mgR: // global
           R3 = _s8j4Y::P64;
           R2 = GHC.IO.Exception.$fExceptionAsyncException3_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8mgS: // global
           R3 = _s8j4Y::P64;
           R2 = GHC.IO.Exception.$fExceptionAsyncException1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mgL_info" {
     block_c8mgL_info:
         const _c8mgL;
         const 1;
         const 64424509470;
         const S8ji8_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:25.997341152 UTC

[section ""data" . GHC.IO.Exception.$fShowAsyncException_$cshowsPrec_closure" {
     GHC.IO.Exception.$fShowAsyncException_$cshowsPrec_closure:
         const GHC.IO.Exception.$fShowAsyncException_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Exception.$fShowAsyncException_$cshowsPrec_entry() //  [R3,
                                                                R4]
         { []
         }
     {offset
       c8mhq: // global
           _s8j51::P64 = R3;
           R3 = R4;
           R2 = _s8j51::P64;
           call GHC.IO.Exception.$w$cshowsPrec1_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowAsyncException_$cshowsPrec_info" {
     GHC.IO.Exception.$fShowAsyncException_$cshowsPrec_info:
         const GHC.IO.Exception.$fShowAsyncException_$cshowsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S8ji8_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.001233271 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAsyncException_$cshow_closure" {
     GHC.IO.Exception.$fExceptionAsyncException_$cshow_closure:
         const GHC.IO.Exception.$fExceptionAsyncException_$cshow_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionAsyncException_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c8mhK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8mhL; else goto c8mhM;
       c8mhL: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionAsyncException_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8mhM: // global
           I64[Sp - 8] = block_c8mhB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8mi1; else goto c8mhC;
       u8mi1: // global
           call _c8mhB(R1) args: 0, res: 0, upd: 0;
       c8mhC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionAsyncException_$cshow_info" {
     GHC.IO.Exception.$fExceptionAsyncException_$cshow_info:
         const GHC.IO.Exception.$fExceptionAsyncException_$cshow_entry;
         const 0;
         const 201863462926;
         const 4294967301;
         const S8ji8_srt+128;
 },
 _c8mhB() //  [R1]
         { []
         }
     {offset
       c8mhB: // global
           _c8mhJ::P64 = R1 & 7;
           if (_c8mhJ::P64 < 3) goto u8mhZ; else goto u8mi0;
       u8mhZ: // global
           if (_c8mhJ::P64 < 2) goto c8mhF; else goto c8mhG;
       c8mhF: // global
           R1 = GHC.IO.Exception.$fExceptionAsyncException7_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8mhG: // global
           R1 = GHC.IO.Exception.$fExceptionAsyncException5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u8mi0: // global
           if (_c8mhJ::P64 < 4) goto c8mhH; else goto c8mhI;
       c8mhH: // global
           R1 = GHC.IO.Exception.$fExceptionAsyncException3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8mhI: // global
           R1 = GHC.IO.Exception.$fExceptionAsyncException1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mhB_info" {
     block_c8mhB_info:
         const _c8mhB;
         const 0;
         const 64424509470;
         const S8ji8_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.006894201 UTC

[section ""data" . GHC.IO.Exception.$fShowAsyncException_$cshowList_closure" {
     GHC.IO.Exception.$fShowAsyncException_$cshowList_closure:
         const GHC.IO.Exception.$fShowAsyncException_$cshowList_info;
         const 0;
 },
 GHC.IO.Exception.$fShowAsyncException_$cshowList_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       c8mik: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Exception.$w$cshowsPrec1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowAsyncException_$cshowList_info" {
     GHC.IO.Exception.$fShowAsyncException_$cshowList_info:
         const GHC.IO.Exception.$fShowAsyncException_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S8ji8_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.010316844 UTC

[section ""data" . GHC.IO.Exception.$fShowAsyncException_closure" {
     GHC.IO.Exception.$fShowAsyncException_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Exception.$fShowAsyncException_$cshowsPrec_closure+3;
         const GHC.IO.Exception.$fExceptionAsyncException_$cshow_closure+1;
         const GHC.IO.Exception.$fShowAsyncException_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.012066137 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionArrayException4_bytes" {
     GHC.IO.Exception.$fExceptionArrayException4_bytes:
         I8[] [97,114,114,97,121,32,105,110,100,101,120,32,111,117,116,32,111,102,32,114,97,110,103,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.013766281 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionArrayException3_bytes" {
     GHC.IO.Exception.$fExceptionArrayException3_bytes:
         I8[] [58,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.015435783 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionArrayException2_bytes" {
     GHC.IO.Exception.$fExceptionArrayException2_bytes:
         I8[] [117,110,100,101,102,105,110,101,100,32,97,114,114,97,121,32,101,108,101,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.021902007 UTC

[section ""data" . GHC.IO.Exception.$w$cshowsPrec_closure" {
     GHC.IO.Exception.$w$cshowsPrec_closure:
         const GHC.IO.Exception.$w$cshowsPrec_info;
 },
 sat_s8j5e_entry() //  [R1]
         { []
         }
     {offset
       c8miS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8miT; else goto c8miU;
       c8miT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8miU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8j5e_info" {
     sat_s8j5e_info:
         const sat_s8j5e_entry;
         const 2;
         const 18;
 },
 sat_s8j5f_entry() //  [R1]
         { []
         }
     {offset
       c8miZ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8mj0; else goto c8mj1;
       c8mj0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mj1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c8miI_info;
           _s8j58::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s8j58::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u8mj7; else goto c8miJ;
       u8mj7: // global
           call _c8miI(R1) args: 0, res: 0, upd: 0;
       c8miJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8j5f_info" {
     sat_s8j5f_info:
         const sat_s8j5f_entry;
         const 2;
         const 18;
 },
 _c8miI() //  [R1]
         { []
         }
     {offset
       c8miI: // global
           _s8j58::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8miW; else goto c8miX;
       c8miW: // global
           R1 = _s8j58::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c8miX: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8mj6; else goto c8mj5;
       c8mj6: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c8mj5: // global
           I64[Hp - 24] = sat_s8j5e_info;
           P64[Hp - 8] = _s8j58::P64;
           P64[Hp] = R1;
           R3 = Hp - 24;
           R2 = GHC.IO.Exception.$fExceptionArrayException3_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8miI_info" {
     block_c8miI_info:
         const _c8miI;
         const 1;
         const 30;
 },
 sat_s8j5k_entry() //  [R1]
         { []
         }
     {offset
       c8mjo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mjp; else goto c8mjq;
       c8mjp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mjq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8j5k_info" {
     sat_s8j5k_info:
         const sat_s8j5k_entry;
         const 2;
         const 18;
 },
 sat_s8j5l_entry() //  [R1]
         { []
         }
     {offset
       c8mjv: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8mjw; else goto c8mjx;
       c8mjw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mjx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c8mje_info;
           _s8j58::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s8j58::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u8mjD; else goto c8mjf;
       u8mjD: // global
           call _c8mje(R1) args: 0, res: 0, upd: 0;
       c8mjf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8j5l_info" {
     sat_s8j5l_info:
         const sat_s8j5l_entry;
         const 2;
         const 18;
 },
 _c8mje() //  [R1]
         { []
         }
     {offset
       c8mje: // global
           _s8j58::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8mjs; else goto c8mjt;
       c8mjs: // global
           R1 = _s8j58::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c8mjt: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8mjC; else goto c8mjB;
       c8mjC: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c8mjB: // global
           I64[Hp - 24] = sat_s8j5k_info;
           P64[Hp - 8] = _s8j58::P64;
           P64[Hp] = R1;
           R3 = Hp - 24;
           R2 = GHC.IO.Exception.$fExceptionArrayException3_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8mje_info" {
     block_c8mje_info:
         const _c8mje;
         const 1;
         const 30;
 },
 GHC.IO.Exception.$w$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c8mjI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mjJ; else goto c8mjK;
       c8mjJ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8mjK: // global
           I64[Sp - 16] = block_c8miz_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8mjR; else goto c8miA;
       u8mjR: // global
           call _c8miz(R1) args: 0, res: 0, upd: 0;
       c8miA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$w$cshowsPrec_info" {
     GHC.IO.Exception.$w$cshowsPrec_info:
         const GHC.IO.Exception.$w$cshowsPrec_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8miz() //  [R1]
         { []
         }
     {offset
       c8miz: // global
           _s8j58::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8mjF; else goto c8mjG;
       c8mjF: // global
           Hp = Hp + 32;
           _s8j59::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c8mjQ; else goto c8mjM;
       c8mjM: // global
           _s8j5a::P64 = P64[_s8j59::P64 + 7];
           I64[Hp - 24] = sat_s8j5f_info;
           P64[Hp - 8] = _s8j58::P64;
           P64[Hp] = _s8j5a::P64;
           R3 = Hp - 24;
           R2 = GHC.IO.Exception.$fExceptionArrayException4_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c8mjG: // global
           Hp = Hp + 32;
           _s8j59::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c8mjQ; else goto c8mjP;
       c8mjQ: // global
           HpAlloc = 32;
           R1 = _s8j59::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8mjP: // global
           _s8j5g::P64 = P64[_s8j59::P64 + 6];
           I64[Hp - 24] = sat_s8j5l_info;
           P64[Hp - 8] = _s8j58::P64;
           P64[Hp] = _s8j5g::P64;
           R3 = Hp - 24;
           R2 = GHC.IO.Exception.$fExceptionArrayException2_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8miz_info" {
     block_c8miz_info:
         const _c8miz;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.03805412 UTC

[section ""data" . GHC.IO.Exception.$fExceptionArrayException_$cshowsPrec_closure" {
     GHC.IO.Exception.$fExceptionArrayException_$cshowsPrec_closure:
         const GHC.IO.Exception.$fExceptionArrayException_$cshowsPrec_info;
 },
 GHC.IO.Exception.$fExceptionArrayException_$cshowsPrec_entry() //  [R3,
                                                                     R4]
         { []
         }
     {offset
       c8mkD: // global
           _s8j5n::P64 = R3;
           R3 = R4;
           R2 = _s8j5n::P64;
           call GHC.IO.Exception.$w$cshowsPrec_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionArrayException_$cshowsPrec_info" {
     GHC.IO.Exception.$fExceptionArrayException_$cshowsPrec_info:
         const GHC.IO.Exception.$fExceptionArrayException_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.041085705 UTC

[section ""data" . GHC.IO.Exception.$fExceptionArrayException1_closure" {
     GHC.IO.Exception.$fExceptionArrayException1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.043603393 UTC

[section ""data" . GHC.IO.Exception.$fExceptionArrayException_$cshow_closure" {
     GHC.IO.Exception.$fExceptionArrayException_$cshow_closure:
         const GHC.IO.Exception.$fExceptionArrayException_$cshow_info;
 },
 GHC.IO.Exception.$fExceptionArrayException_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c8mkP: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = R2;
           call GHC.IO.Exception.$w$cshowsPrec_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionArrayException_$cshow_info" {
     GHC.IO.Exception.$fExceptionArrayException_$cshow_info:
         const GHC.IO.Exception.$fExceptionArrayException_$cshow_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.047139942 UTC

[section ""data" . GHC.IO.Exception.$fShowArrayException_$cshowList_closure" {
     GHC.IO.Exception.$fShowArrayException_$cshowList_closure:
         const GHC.IO.Exception.$fShowArrayException_$cshowList_info;
 },
 GHC.IO.Exception.$fShowArrayException_$cshowList_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       c8ml0: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Exception.$w$cshowsPrec_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowArrayException_$cshowList_info" {
     GHC.IO.Exception.$fShowArrayException_$cshowList_info:
         const GHC.IO.Exception.$fShowArrayException_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.050572866 UTC

[section ""data" . GHC.IO.Exception.$fShowArrayException_closure" {
     GHC.IO.Exception.$fShowArrayException_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Exception.$fExceptionArrayException_$cshowsPrec_closure+3;
         const GHC.IO.Exception.$fExceptionArrayException_$cshow_closure+1;
         const GHC.IO.Exception.$fShowArrayException_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.052334291 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionFixIOException2_bytes" {
     GHC.IO.Exception.$fExceptionFixIOException2_bytes:
         I8[] [99,121,99,108,105,99,32,101,118,97,108,117,97,116,105,111,110,32,105,110,32,102,105,120,73,79]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.055158461 UTC

[section ""data" . GHC.IO.Exception.$fExceptionFixIOException1_closure" {
     GHC.IO.Exception.$fExceptionFixIOException1_closure:
         const GHC.IO.Exception.$fExceptionFixIOException1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionFixIOException1_entry() //  [R1]
         { []
         }
     {offset
       c8mlf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mlg; else goto c8mlh;
       c8mlg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mlh: // global
           (_c8mlc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8mlc::I64 == 0) goto c8mle; else goto c8mld;
       c8mle: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8mld: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8mlc::I64;
           R2 = GHC.IO.Exception.$fExceptionFixIOException2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionFixIOException1_info" {
     GHC.IO.Exception.$fExceptionFixIOException1_info:
         const GHC.IO.Exception.$fExceptionFixIOException1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.059456684 UTC

[section ""data" . GHC.IO.Exception.$fShowFixIOException_$cshowsPrec_closure" {
     GHC.IO.Exception.$fShowFixIOException_$cshowsPrec_closure:
         const GHC.IO.Exception.$fShowFixIOException_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Exception.$fShowFixIOException_$cshowsPrec_entry() //  [R2,
                                                                R3, R4]
         { []
         }
     {offset
       c8mlw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mlx; else goto c8mly;
       c8mlx: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fShowFixIOException_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8mly: // global
           I64[Sp - 16] = block_c8mlt_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8mlC; else goto c8mlu;
       u8mlC: // global
           call _c8mlt() args: 0, res: 0, upd: 0;
       c8mlu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowFixIOException_$cshowsPrec_info" {
     GHC.IO.Exception.$fShowFixIOException_$cshowsPrec_info:
         const GHC.IO.Exception.$fShowFixIOException_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S8ji8_srt+176;
 },
 _c8mlt() //  []
         { []
         }
     {offset
       c8mlt: // global
           R3 = P64[Sp + 8];
           R2 = GHC.IO.Exception.$fExceptionFixIOException1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mlt_info" {
     block_c8mlt_info:
         const _c8mlt;
         const 1;
         const 4294967326;
         const S8ji8_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.065160861 UTC

[section ""data" . GHC.IO.Exception.$fExceptionFixIOException_$cshow_closure" {
     GHC.IO.Exception.$fExceptionFixIOException_$cshow_closure:
         const GHC.IO.Exception.$fExceptionFixIOException_$cshow_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionFixIOException_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c8mlT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8mlU; else goto c8mlV;
       c8mlU: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionFixIOException_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8mlV: // global
           I64[Sp - 8] = block_c8mlQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8mlZ; else goto c8mlR;
       u8mlZ: // global
           call _c8mlQ() args: 0, res: 0, upd: 0;
       c8mlR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionFixIOException_$cshow_info" {
     GHC.IO.Exception.$fExceptionFixIOException_$cshow_info:
         const GHC.IO.Exception.$fExceptionFixIOException_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S8ji8_srt+176;
 },
 _c8mlQ() //  []
         { []
         }
     {offset
       c8mlQ: // global
           R1 = GHC.IO.Exception.$fExceptionFixIOException1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mlQ_info" {
     block_c8mlQ_info:
         const _c8mlQ;
         const 0;
         const 4294967326;
         const S8ji8_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.070634055 UTC

[section ""data" . GHC.IO.Exception.$fShowFixIOException1_closure" {
     GHC.IO.Exception.$fShowFixIOException1_closure:
         const GHC.IO.Exception.$fShowFixIOException1_info;
         const 0;
 },
 GHC.IO.Exception.$fShowFixIOException1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8mmh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mmi; else goto c8mmj;
       c8mmi: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fShowFixIOException1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8mmj: // global
           I64[Sp - 16] = block_c8mme_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8mmn; else goto c8mmf;
       u8mmn: // global
           call _c8mme() args: 0, res: 0, upd: 0;
       c8mmf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowFixIOException1_info" {
     GHC.IO.Exception.$fShowFixIOException1_info:
         const GHC.IO.Exception.$fShowFixIOException1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S8ji8_srt+176;
 },
 _c8mme() //  []
         { []
         }
     {offset
       c8mme: // global
           R3 = P64[Sp + 8];
           R2 = GHC.IO.Exception.$fExceptionFixIOException1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mme_info" {
     block_c8mme_info:
         const _c8mme;
         const 1;
         const 4294967326;
         const S8ji8_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.075862335 UTC

[section ""data" . GHC.IO.Exception.$fShowFixIOException_$cshowList_closure" {
     GHC.IO.Exception.$fShowFixIOException_$cshowList_closure:
         const GHC.IO.Exception.$fShowFixIOException_$cshowList_info;
         const 0;
 },
 GHC.IO.Exception.$fShowFixIOException_$cshowList_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       c8mmB: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Exception.$fShowFixIOException1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowFixIOException_$cshowList_info" {
     GHC.IO.Exception.$fShowFixIOException_$cshowList_info:
         const GHC.IO.Exception.$fShowFixIOException_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S8ji8_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.078964044 UTC

[section ""data" . GHC.IO.Exception.$fShowFixIOException_closure" {
     GHC.IO.Exception.$fShowFixIOException_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Exception.$fShowFixIOException_$cshowsPrec_closure+3;
         const GHC.IO.Exception.$fExceptionFixIOException_$cshow_closure+1;
         const GHC.IO.Exception.$fShowFixIOException_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.081871472 UTC

[section ""data" . GHC.IO.Exception.$fEqIOErrorType_$c==_closure" {
     GHC.IO.Exception.$fEqIOErrorType_$c==_closure:
         const GHC.IO.Exception.$fEqIOErrorType_$c==_info;
 },
 GHC.IO.Exception.$fEqIOErrorType_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c8mmR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mmX; else goto c8mmY;
       c8mmX: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fEqIOErrorType_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8mmY: // global
           I64[Sp - 16] = block_c8mmN_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8mni; else goto c8mmO;
       u8mni: // global
           call _c8mmN(R1) args: 0, res: 0, upd: 0;
       c8mmO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fEqIOErrorType_$c==_info" {
     GHC.IO.Exception.$fEqIOErrorType_$c==_info:
         const GHC.IO.Exception.$fEqIOErrorType_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8mmN() //  [R1]
         { []
         }
     {offset
       c8mmN: // global
           _s8j5G::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c8mmW_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8j5G::I64;
           if (R1 & 7 != 0) goto u8mnh; else goto c8mn3;
       u8mnh: // global
           call _c8mmW(R1) args: 0, res: 0, upd: 0;
       c8mn3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mmN_info" {
     block_c8mmN_info:
         const _c8mmN;
         const 1;
         const 30;
 },
 _c8mmW() //  [R1]
         { []
         }
     {offset
       c8mmW: // global
           R1 = I64[((%MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]) == I64[Sp + 8]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mmW_info" {
     block_c8mmW_info:
         const _c8mmW;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.090185157 UTC

[section ""data" . GHC.IO.Exception.$fEqIOErrorType_$c/=_closure" {
     GHC.IO.Exception.$fEqIOErrorType_$c/=_closure:
         const GHC.IO.Exception.$fEqIOErrorType_$c/=_info;
 },
 GHC.IO.Exception.$fEqIOErrorType_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8mnO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mnU; else goto c8mnV;
       c8mnU: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fEqIOErrorType_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8mnV: // global
           I64[Sp - 16] = block_c8mnK_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8moj; else goto c8mnL;
       u8moj: // global
           call _c8mnK(R1) args: 0, res: 0, upd: 0;
       c8mnL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fEqIOErrorType_$c/=_info" {
     GHC.IO.Exception.$fEqIOErrorType_$c/=_info:
         const GHC.IO.Exception.$fEqIOErrorType_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8mnK() //  [R1]
         { []
         }
     {offset
       c8mnK: // global
           _s8j5N::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c8mnT_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8j5N::I64;
           if (R1 & 7 != 0) goto u8moi; else goto c8mo0;
       u8moi: // global
           call _c8mnT(R1) args: 0, res: 0, upd: 0;
       c8mo0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mnK_info" {
     block_c8mnK_info:
         const _c8mnK;
         const 1;
         const 30;
 },
 _c8mnT() //  [R1]
         { []
         }
     {offset
       c8mnT: // global
           if (%MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]) == I64[Sp + 8]) goto c8mof; else goto c8moe;
       c8mof: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8moe: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mnT_info" {
     block_c8mnT_info:
         const _c8mnT;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.096569863 UTC

[section ""data" . GHC.IO.Exception.$fEqIOErrorType_closure" {
     GHC.IO.Exception.$fEqIOErrorType_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Exception.$fEqIOErrorType_$c==_closure+2;
         const GHC.IO.Exception.$fEqIOErrorType_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.098594604 UTC

[section ""cstring" . lvl_r8j2D_bytes" {
     lvl_r8j2D_bytes:
         I8[] [97,108,114,101,97,100,121,32,101,120,105,115,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.100746677 UTC

[section ""data" . lvl1_r8j2E_closure" {
     lvl1_r8j2E_closure:
         const lvl1_r8j2E_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r8j2E_entry() //  [R1]
         { []
         }
     {offset
       c8moO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8moP; else goto c8moQ;
       c8moP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8moQ: // global
           (_c8moL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8moL::I64 == 0) goto c8moN; else goto c8moM;
       c8moN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8moM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8moL::I64;
           R2 = lvl_r8j2D_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_r8j2E_info" {
     lvl1_r8j2E_info:
         const lvl1_r8j2E_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.104222421 UTC

[section ""cstring" . lvl2_r8j2F_bytes" {
     lvl2_r8j2F_bytes:
         I8[] [100,111,101,115,32,110,111,116,32,101,120,105,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.106376204 UTC

[section ""data" . lvl3_r8j2G_closure" {
     lvl3_r8j2G_closure:
         const lvl3_r8j2G_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r8j2G_entry() //  [R1]
         { []
         }
     {offset
       c8mp5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mp6; else goto c8mp7;
       c8mp6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mp7: // global
           (_c8mp2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8mp2::I64 == 0) goto c8mp4; else goto c8mp3;
       c8mp4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8mp3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8mp2::I64;
           R2 = lvl2_r8j2F_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_r8j2G_info" {
     lvl3_r8j2G_info:
         const lvl3_r8j2G_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.109996679 UTC

[section ""cstring" . lvl4_r8j2H_bytes" {
     lvl4_r8j2H_bytes:
         I8[] [114,101,115,111,117,114,99,101,32,98,117,115,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.112036686 UTC

[section ""data" . lvl5_r8j2I_closure" {
     lvl5_r8j2I_closure:
         const lvl5_r8j2I_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r8j2I_entry() //  [R1]
         { []
         }
     {offset
       c8mpm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mpn; else goto c8mpo;
       c8mpn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mpo: // global
           (_c8mpj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8mpj::I64 == 0) goto c8mpl; else goto c8mpk;
       c8mpl: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8mpk: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8mpj::I64;
           R2 = lvl4_r8j2H_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl5_r8j2I_info" {
     lvl5_r8j2I_info:
         const lvl5_r8j2I_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.115469625 UTC

[section ""cstring" . lvl6_r8j2J_bytes" {
     lvl6_r8j2J_bytes:
         I8[] [114,101,115,111,117,114,99,101,32,101,120,104,97,117,115,116,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.117687508 UTC

[section ""data" . lvl7_r8j2K_closure" {
     lvl7_r8j2K_closure:
         const lvl7_r8j2K_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_r8j2K_entry() //  [R1]
         { []
         }
     {offset
       c8mpD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mpE; else goto c8mpF;
       c8mpE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mpF: // global
           (_c8mpA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8mpA::I64 == 0) goto c8mpC; else goto c8mpB;
       c8mpC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8mpB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8mpA::I64;
           R2 = lvl6_r8j2J_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl7_r8j2K_info" {
     lvl7_r8j2K_info:
         const lvl7_r8j2K_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.122267524 UTC

[section ""cstring" . lvl8_r8j2L_bytes" {
     lvl8_r8j2L_bytes:
         I8[] [101,110,100,32,111,102,32,102,105,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.124410048 UTC

[section ""data" . lvl9_r8j2M_closure" {
     lvl9_r8j2M_closure:
         const lvl9_r8j2M_info;
         const 0;
         const 0;
         const 0;
 },
 lvl9_r8j2M_entry() //  [R1]
         { []
         }
     {offset
       c8mpU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mpV; else goto c8mpW;
       c8mpV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mpW: // global
           (_c8mpR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8mpR::I64 == 0) goto c8mpT; else goto c8mpS;
       c8mpT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8mpS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8mpR::I64;
           R2 = lvl8_r8j2L_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl9_r8j2M_info" {
     lvl9_r8j2M_info:
         const lvl9_r8j2M_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.127837269 UTC

[section ""cstring" . lvl10_r8j2N_bytes" {
     lvl10_r8j2N_bytes:
         I8[] [105,108,108,101,103,97,108,32,111,112,101,114,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.130165492 UTC

[section ""data" . lvl11_r8j2O_closure" {
     lvl11_r8j2O_closure:
         const lvl11_r8j2O_info;
         const 0;
         const 0;
         const 0;
 },
 lvl11_r8j2O_entry() //  [R1]
         { []
         }
     {offset
       c8mqb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mqc; else goto c8mqd;
       c8mqc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mqd: // global
           (_c8mq8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8mq8::I64 == 0) goto c8mqa; else goto c8mq9;
       c8mqa: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8mq9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8mq8::I64;
           R2 = lvl10_r8j2N_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl11_r8j2O_info" {
     lvl11_r8j2O_info:
         const lvl11_r8j2O_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.133699765 UTC

[section ""cstring" . lvl12_r8j2P_bytes" {
     lvl12_r8j2P_bytes:
         I8[] [112,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.135895099 UTC

[section ""data" . lvl13_r8j2Q_closure" {
     lvl13_r8j2Q_closure:
         const lvl13_r8j2Q_info;
         const 0;
         const 0;
         const 0;
 },
 lvl13_r8j2Q_entry() //  [R1]
         { []
         }
     {offset
       c8mqs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mqt; else goto c8mqu;
       c8mqt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mqu: // global
           (_c8mqp::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8mqp::I64 == 0) goto c8mqr; else goto c8mqq;
       c8mqr: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8mqq: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8mqp::I64;
           R2 = lvl12_r8j2P_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl13_r8j2Q_info" {
     lvl13_r8j2Q_info:
         const lvl13_r8j2Q_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.139592083 UTC

[section ""cstring" . lvl14_r8j2R_bytes" {
     lvl14_r8j2R_bytes:
         I8[] [117,115,101,114,32,101,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.141908667 UTC

[section ""data" . lvl15_r8j2S_closure" {
     lvl15_r8j2S_closure:
         const lvl15_r8j2S_info;
         const 0;
         const 0;
         const 0;
 },
 lvl15_r8j2S_entry() //  [R1]
         { []
         }
     {offset
       c8mqJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mqK; else goto c8mqL;
       c8mqK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mqL: // global
           (_c8mqG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8mqG::I64 == 0) goto c8mqI; else goto c8mqH;
       c8mqI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8mqH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8mqG::I64;
           R2 = lvl14_r8j2R_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl15_r8j2S_info" {
     lvl15_r8j2S_info:
         const lvl15_r8j2S_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.145469059 UTC

[section ""cstring" . lvl16_r8j2T_bytes" {
     lvl16_r8j2T_bytes:
         I8[] [117,110,115,97,116,105,115,102,105,101,100,32,99,111,110,115,116,114,97,105,110,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.147736596 UTC

[section ""data" . lvl17_r8j2U_closure" {
     lvl17_r8j2U_closure:
         const lvl17_r8j2U_info;
         const 0;
         const 0;
         const 0;
 },
 lvl17_r8j2U_entry() //  [R1]
         { []
         }
     {offset
       c8mr0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mr1; else goto c8mr2;
       c8mr1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mr2: // global
           (_c8mqX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8mqX::I64 == 0) goto c8mqZ; else goto c8mqY;
       c8mqZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8mqY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8mqX::I64;
           R2 = lvl16_r8j2T_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl17_r8j2U_info" {
     lvl17_r8j2U_info:
         const lvl17_r8j2U_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.151444698 UTC

[section ""cstring" . lvl18_r8j2V_bytes" {
     lvl18_r8j2V_bytes:
         I8[] [115,121,115,116,101,109,32,101,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.154219405 UTC

[section ""data" . lvl19_r8j2W_closure" {
     lvl19_r8j2W_closure:
         const lvl19_r8j2W_info;
         const 0;
         const 0;
         const 0;
 },
 lvl19_r8j2W_entry() //  [R1]
         { []
         }
     {offset
       c8mrh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mri; else goto c8mrj;
       c8mri: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mrj: // global
           (_c8mre::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8mre::I64 == 0) goto c8mrg; else goto c8mrf;
       c8mrg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8mrf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8mre::I64;
           R2 = lvl18_r8j2V_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl19_r8j2W_info" {
     lvl19_r8j2W_info:
         const lvl19_r8j2W_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.15765599 UTC

[section ""cstring" . lvl20_r8j2X_bytes" {
     lvl20_r8j2X_bytes:
         I8[] [112,114,111,116,111,99,111,108,32,101,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.159694451 UTC

[section ""data" . lvl21_r8j2Y_closure" {
     lvl21_r8j2Y_closure:
         const lvl21_r8j2Y_info;
         const 0;
         const 0;
         const 0;
 },
 lvl21_r8j2Y_entry() //  [R1]
         { []
         }
     {offset
       c8mry: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mrz; else goto c8mrA;
       c8mrz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mrA: // global
           (_c8mrv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8mrv::I64 == 0) goto c8mrx; else goto c8mrw;
       c8mrx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8mrw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8mrv::I64;
           R2 = lvl20_r8j2X_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl21_r8j2Y_info" {
     lvl21_r8j2Y_info:
         const lvl21_r8j2Y_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.163026289 UTC

[section ""cstring" . lvl22_r8j2Z_bytes" {
     lvl22_r8j2Z_bytes:
         I8[] [102,97,105,108,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.165200477 UTC

[section ""data" . lvl23_r8j30_closure" {
     lvl23_r8j30_closure:
         const lvl23_r8j30_info;
         const 0;
         const 0;
         const 0;
 },
 lvl23_r8j30_entry() //  [R1]
         { []
         }
     {offset
       c8mrP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mrQ; else goto c8mrR;
       c8mrQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mrR: // global
           (_c8mrM::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8mrM::I64 == 0) goto c8mrO; else goto c8mrN;
       c8mrO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8mrN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8mrM::I64;
           R2 = lvl22_r8j2Z_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl23_r8j30_info" {
     lvl23_r8j30_info:
         const lvl23_r8j30_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.168732008 UTC

[section ""cstring" . lvl24_r8j31_bytes" {
     lvl24_r8j31_bytes:
         I8[] [105,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.170939994 UTC

[section ""data" . lvl25_r8j32_closure" {
     lvl25_r8j32_closure:
         const lvl25_r8j32_info;
         const 0;
         const 0;
         const 0;
 },
 lvl25_r8j32_entry() //  [R1]
         { []
         }
     {offset
       c8ms6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8ms7; else goto c8ms8;
       c8ms7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8ms8: // global
           (_c8ms3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8ms3::I64 == 0) goto c8ms5; else goto c8ms4;
       c8ms5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8ms4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8ms3::I64;
           R2 = lvl24_r8j31_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl25_r8j32_info" {
     lvl25_r8j32_info:
         const lvl25_r8j32_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.174945652 UTC

[section ""cstring" . lvl26_r8j33_bytes" {
     lvl26_r8j33_bytes:
         I8[] [105,110,97,112,112,114,111,112,114,105,97,116,101,32,116,121,112,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.177145364 UTC

[section ""data" . lvl27_r8j34_closure" {
     lvl27_r8j34_closure:
         const lvl27_r8j34_info;
         const 0;
         const 0;
         const 0;
 },
 lvl27_r8j34_entry() //  [R1]
         { []
         }
     {offset
       c8msn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mso; else goto c8msp;
       c8mso: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8msp: // global
           (_c8msk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8msk::I64 == 0) goto c8msm; else goto c8msl;
       c8msm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8msl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8msk::I64;
           R2 = lvl26_r8j33_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl27_r8j34_info" {
     lvl27_r8j34_info:
         const lvl27_r8j34_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.180725924 UTC

[section ""cstring" . lvl28_r8j35_bytes" {
     lvl28_r8j35_bytes:
         I8[] [104,97,114,100,119,97,114,101,32,102,97,117,108,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.183385079 UTC

[section ""data" . lvl29_r8j36_closure" {
     lvl29_r8j36_closure:
         const lvl29_r8j36_info;
         const 0;
         const 0;
         const 0;
 },
 lvl29_r8j36_entry() //  [R1]
         { []
         }
     {offset
       c8msE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8msF; else goto c8msG;
       c8msF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8msG: // global
           (_c8msB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8msB::I64 == 0) goto c8msD; else goto c8msC;
       c8msD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8msC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8msB::I64;
           R2 = lvl28_r8j35_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl29_r8j36_info" {
     lvl29_r8j36_info:
         const lvl29_r8j36_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.18734416 UTC

[section ""cstring" . lvl30_r8j37_bytes" {
     lvl30_r8j37_bytes:
         I8[] [117,110,115,117,112,112,111,114,116,101,100,32,111,112,101,114,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.189569689 UTC

[section ""data" . lvl31_r8j38_closure" {
     lvl31_r8j38_closure:
         const lvl31_r8j38_info;
         const 0;
         const 0;
         const 0;
 },
 lvl31_r8j38_entry() //  [R1]
         { []
         }
     {offset
       c8msV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8msW; else goto c8msX;
       c8msW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8msX: // global
           (_c8msS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8msS::I64 == 0) goto c8msU; else goto c8msT;
       c8msU: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8msT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8msS::I64;
           R2 = lvl30_r8j37_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl31_r8j38_info" {
     lvl31_r8j38_info:
         const lvl31_r8j38_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.19298164 UTC

[section ""cstring" . lvl32_r8j39_bytes" {
     lvl32_r8j39_bytes:
         I8[] [116,105,109,101,111,117,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.195714903 UTC

[section ""data" . lvl33_r8j3a_closure" {
     lvl33_r8j3a_closure:
         const lvl33_r8j3a_info;
         const 0;
         const 0;
         const 0;
 },
 lvl33_r8j3a_entry() //  [R1]
         { []
         }
     {offset
       c8mtc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mtd; else goto c8mte;
       c8mtd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mte: // global
           (_c8mt9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8mt9::I64 == 0) goto c8mtb; else goto c8mta;
       c8mtb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8mta: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8mt9::I64;
           R2 = lvl32_r8j39_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_r8j3a_info" {
     lvl33_r8j3a_info:
         const lvl33_r8j3a_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.199109112 UTC

[section ""cstring" . lvl34_r8j3b_bytes" {
     lvl34_r8j3b_bytes:
         I8[] [114,101,115,111,117,114,99,101,32,118,97,110,105,115,104,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.201162701 UTC

[section ""data" . lvl35_r8j3c_closure" {
     lvl35_r8j3c_closure:
         const lvl35_r8j3c_info;
         const 0;
         const 0;
         const 0;
 },
 lvl35_r8j3c_entry() //  [R1]
         { []
         }
     {offset
       c8mtt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mtu; else goto c8mtv;
       c8mtu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mtv: // global
           (_c8mtq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8mtq::I64 == 0) goto c8mts; else goto c8mtr;
       c8mts: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8mtr: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8mtq::I64;
           R2 = lvl34_r8j3b_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl35_r8j3c_info" {
     lvl35_r8j3c_info:
         const lvl35_r8j3c_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.204585062 UTC

[section ""cstring" . lvl36_r8j3d_bytes" {
     lvl36_r8j3d_bytes:
         I8[] [105,110,116,101,114,114,117,112,116,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.207086575 UTC

[section ""data" . lvl37_r8j3e_closure" {
     lvl37_r8j3e_closure:
         const lvl37_r8j3e_info;
         const 0;
         const 0;
         const 0;
 },
 lvl37_r8j3e_entry() //  [R1]
         { []
         }
     {offset
       c8mtK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mtL; else goto c8mtM;
       c8mtL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mtM: // global
           (_c8mtH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8mtH::I64 == 0) goto c8mtJ; else goto c8mtI;
       c8mtJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8mtI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8mtH::I64;
           R2 = lvl36_r8j3d_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl37_r8j3e_info" {
     lvl37_r8j3e_info:
         const lvl37_r8j3e_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.214456371 UTC

[section ""data" . GHC.IO.Exception.$w$cshowsPrec4_closure" {
     GHC.IO.Exception.$w$cshowsPrec4_closure:
         const GHC.IO.Exception.$w$cshowsPrec4_info;
         const 0;
 },
 GHC.IO.Exception.$w$cshowsPrec4_entry() //  [R2, R3]
         { []
         }
     {offset
       c8mum: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mun; else goto c8muo;
       c8mun: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$w$cshowsPrec4_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8muo: // global
           I64[Sp - 16] = block_c8mtY_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8mvk; else goto c8mtZ;
       u8mvk: // global
           call _c8mtY(R1) args: 0, res: 0, upd: 0;
       c8mtZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$w$cshowsPrec4_info" {
     GHC.IO.Exception.$w$cshowsPrec4_info:
         const GHC.IO.Exception.$w$cshowsPrec4_entry;
         const 0;
         const 4503595332403214;
         const 8589934607;
         const S8ji8_srt+208;
 },
 _c8mtY() //  [R1]
         { []
         }
     {offset
       c8mtY: // global
           _s8j5S::P64 = P64[Sp + 8];
           switch [0 .. 18] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto c8mu2;
               case 1 : goto c8mu3;
               case 2 : goto c8mu4;
               case 3 : goto c8mu5;
               case 4 : goto c8mu6;
               case 5 : goto c8mu7;
               case 6 : goto c8mu8;
               case 7 : goto c8mu9;
               case 8 : goto c8mua;
               case 9 : goto c8mub;
               case 10 : goto c8muc;
               case 11 : goto c8mud;
               case 12 : goto c8mue;
               case 13 : goto c8muf;
               case 14 : goto c8mug;
               case 15 : goto c8muh;
               case 16 : goto c8mui;
               case 17 : goto c8muj;
               case 18 : goto c8muk;
           }
       c8muk: // global
           R3 = _s8j5S::P64;
           R2 = lvl37_r8j3e_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8muj: // global
           R3 = _s8j5S::P64;
           R2 = lvl35_r8j3c_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8mui: // global
           R3 = _s8j5S::P64;
           R2 = lvl33_r8j3a_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8muh: // global
           R3 = _s8j5S::P64;
           R2 = lvl31_r8j38_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8mug: // global
           R3 = _s8j5S::P64;
           R2 = lvl29_r8j36_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8muf: // global
           R3 = _s8j5S::P64;
           R2 = lvl27_r8j34_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8mue: // global
           R3 = _s8j5S::P64;
           R2 = lvl25_r8j32_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8mud: // global
           R3 = _s8j5S::P64;
           R2 = lvl23_r8j30_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8muc: // global
           R3 = _s8j5S::P64;
           R2 = lvl21_r8j2Y_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8mub: // global
           R3 = _s8j5S::P64;
           R2 = lvl19_r8j2W_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8mua: // global
           R3 = _s8j5S::P64;
           R2 = lvl17_r8j2U_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8mu9: // global
           R3 = _s8j5S::P64;
           R2 = lvl15_r8j2S_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8mu8: // global
           R3 = _s8j5S::P64;
           R2 = lvl13_r8j2Q_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8mu7: // global
           R3 = _s8j5S::P64;
           R2 = lvl11_r8j2O_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8mu6: // global
           R3 = _s8j5S::P64;
           R2 = lvl9_r8j2M_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8mu5: // global
           R3 = _s8j5S::P64;
           R2 = lvl7_r8j2K_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8mu4: // global
           R3 = _s8j5S::P64;
           R2 = lvl5_r8j2I_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8mu3: // global
           R3 = _s8j5S::P64;
           R2 = lvl3_r8j2G_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8mu2: // global
           R3 = _s8j5S::P64;
           R2 = lvl1_r8j2E_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mtY_info" {
     block_c8mtY_info:
         const _c8mtY;
         const 1;
         const 2251795518717982;
         const S8ji8_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.223706879 UTC

[section ""data" . GHC.IO.Exception.$fShowIOErrorType_$cshowsPrec_closure" {
     GHC.IO.Exception.$fShowIOErrorType_$cshowsPrec_closure:
         const GHC.IO.Exception.$fShowIOErrorType_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Exception.$fShowIOErrorType_$cshowsPrec_entry() //  [R3, R4]
         { []
         }
     {offset
       c8mvB: // global
           _s8j5V::P64 = R3;
           R3 = R4;
           R2 = _s8j5V::P64;
           call GHC.IO.Exception.$w$cshowsPrec4_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowIOErrorType_$cshowsPrec_info" {
     GHC.IO.Exception.$fShowIOErrorType_$cshowsPrec_info:
         const GHC.IO.Exception.$fShowIOErrorType_$cshowsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S8ji8_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.227454754 UTC

[section ""data" . GHC.IO.Exception.$fShowIOErrorType_$cshow_closure" {
     GHC.IO.Exception.$fShowIOErrorType_$cshow_closure:
         const GHC.IO.Exception.$fShowIOErrorType_$cshow_info;
         const 0;
 },
 GHC.IO.Exception.$fShowIOErrorType_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c8mvM: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = R2;
           call GHC.IO.Exception.$w$cshowsPrec4_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowIOErrorType_$cshow_info" {
     GHC.IO.Exception.$fShowIOErrorType_$cshow_info:
         const GHC.IO.Exception.$fShowIOErrorType_$cshow_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S8ji8_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.231273457 UTC

[section ""data" . GHC.IO.Exception.$fShowIOErrorType_$cshowList_closure" {
     GHC.IO.Exception.$fShowIOErrorType_$cshowList_closure:
         const GHC.IO.Exception.$fShowIOErrorType_$cshowList_info;
         const 0;
 },
 GHC.IO.Exception.$fShowIOErrorType_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c8mvX: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Exception.$w$cshowsPrec4_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowIOErrorType_$cshowList_info" {
     GHC.IO.Exception.$fShowIOErrorType_$cshowList_info:
         const GHC.IO.Exception.$fShowIOErrorType_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S8ji8_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.234849873 UTC

[section ""data" . GHC.IO.Exception.$fShowIOErrorType_closure" {
     GHC.IO.Exception.$fShowIOErrorType_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Exception.$fShowIOErrorType_$cshowsPrec_closure+3;
         const GHC.IO.Exception.$fShowIOErrorType_$cshow_closure+1;
         const GHC.IO.Exception.$fShowIOErrorType_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.24690972 UTC

[section ""data" . GHC.IO.Exception.$fEqIOException_$c==_closure" {
     GHC.IO.Exception.$fEqIOException_$c==_closure:
         const GHC.IO.Exception.$fEqIOException_$c==_info;
 },
 GHC.IO.Exception.$fEqIOException_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c8mwc: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c8mwt; else goto c8mwu;
       c8mwt: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fEqIOException_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8mwu: // global
           I64[Sp - 16] = block_c8mw9_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8mB6; else goto c8mwa;
       u8mB6: // global
           call _c8mw9(R1) args: 0, res: 0, upd: 0;
       c8mwa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fEqIOException_$c==_info" {
     GHC.IO.Exception.$fEqIOException_$c==_info:
         const GHC.IO.Exception.$fEqIOException_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8mw9() //  [R1]
         { []
         }
     {offset
       c8mw9: // global
           I64[Sp - 40] = block_c8mwf_info;
           _s8j63::P64 = P64[R1 + 7];
           _s8j64::P64 = P64[R1 + 15];
           _s8j65::P64 = P64[R1 + 23];
           _s8j66::P64 = P64[R1 + 31];
           _s8j67::P64 = P64[R1 + 39];
           _s8j68::P64 = P64[R1 + 47];
           R1 = P64[Sp + 8];
           P64[Sp - 32] = _s8j65::P64;
           P64[Sp - 24] = _s8j66::P64;
           P64[Sp - 16] = _s8j67::P64;
           P64[Sp - 8] = _s8j68::P64;
           P64[Sp] = _s8j64::P64;
           P64[Sp + 8] = _s8j63::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u8mB5; else goto c8mwg;
       u8mB5: // global
           call _c8mwf(R1) args: 0, res: 0, upd: 0;
       c8mwg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mw9_info" {
     block_c8mw9_info:
         const _c8mw9;
         const 1;
         const 30;
 },
 _c8mwf() //  [R1]
         { []
         }
     {offset
       c8mwf: // global
           I64[Sp - 40] = block_c8mwk_info;
           _s8j6a::P64 = P64[R1 + 7];
           _s8j6c::P64 = P64[R1 + 23];
           _s8j6d::P64 = P64[R1 + 31];
           _s8j6e::P64 = P64[R1 + 39];
           _s8j6f::P64 = P64[R1 + 47];
           R1 = P64[R1 + 15];
           P64[Sp - 32] = _s8j6c::P64;
           P64[Sp - 24] = _s8j6d::P64;
           P64[Sp - 16] = _s8j6e::P64;
           P64[Sp - 8] = _s8j6f::P64;
           P64[Sp] = _s8j6a::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u8mB7; else goto c8mwl;
       u8mB7: // global
           call _c8mwk(R1) args: 0, res: 0, upd: 0;
       c8mwl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mwf_info" {
     block_c8mwf_info:
         const _c8mwf;
         const 6;
         const 30;
 },
 _c8mwk() //  [R1]
         { []
         }
     {offset
       c8mwk: // global
           _s8j6h::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c8mws_info;
           R1 = P64[Sp + 80];
           I64[Sp + 80] = _s8j6h::I64;
           if (R1 & 7 != 0) goto u8mB8; else goto c8mwB;
       u8mB8: // global
           call _c8mws(R1) args: 0, res: 0, upd: 0;
       c8mwB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mwk_info" {
     block_c8mwk_info:
         const _c8mwk;
         const 11;
         const 30;
 },
 _c8mws() //  [R1]
         { []
         }
     {offset
       c8mws: // global
           if (%MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]) == I64[Sp + 80]) goto c8mwT; else goto u8mAM;
       c8mwT: // global
           I64[Sp] = block_c8mwS_info;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 56];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       u8mAM: // global
           Sp = Sp + 96;
           call _c8mAl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8mws_info" {
     block_c8mws_info:
         const _c8mws;
         const 32779;
         const 30;
 },
 _c8mwS() //  [R1]
         { []
         }
     {offset
       c8mwS: // global
           if (R1 & 7 == 1) goto u8mAN; else goto c8myS;
       u8mAN: // global
           Sp = Sp + 96;
           call _c8mAl() args: 0, res: 0, upd: 0;
       c8myS: // global
           I64[Sp] = block_c8mx4_info;
           R1 = P64[Sp + 88];
           if (R1 & 7 != 0) goto u8mBa; else goto c8myT;
       u8mBa: // global
           call _c8mx4(R1) args: 0, res: 0, upd: 0;
       c8myT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mwS_info" {
     block_c8mwS_info:
         const _c8mwS;
         const 37003;
         const 30;
 },
 _c8mx4() //  [R1]
         { []
         }
     {offset
       c8mx4: // global
           _s8j6a::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto c8mz0; else goto c8mzg;
       c8mz0: // global
           I64[Sp] = block_c8myX_info;
           R1 = _s8j6a::P64;
           if (R1 & 7 != 0) goto u8mBc; else goto c8mz1;
       u8mBc: // global
           call _c8myX(R1) args: 0, res: 0, upd: 0;
       c8mz1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8mzg: // global
           I64[Sp] = block_c8mze_info;
           _s8j6J::P64 = P64[R1 + 6];
           R1 = _s8j6a::P64;
           P64[Sp + 88] = _s8j6J::P64;
           if (R1 & 7 != 0) goto u8mBd; else goto c8mzh;
       u8mBd: // global
           call _c8mze(R1) args: 0, res: 0, upd: 0;
       c8mzh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mx4_info" {
     block_c8mx4_info:
         const _c8mx4;
         const 102539;
         const 30;
 },
 _c8myX() //  [R1]
         { []
         }
     {offset
       c8myX: // global
           if (R1 & 7 == 1) goto u8mAV; else goto u8mAW;
       u8mAV: // global
           Sp = Sp + 8;
           call _s8j6m() args: 0, res: 0, upd: 0;
       u8mAW: // global
           Sp = Sp + 96;
           call _c8mAl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8myX_info" {
     block_c8myX_info:
         const _c8myX;
         const 103563;
         const 30;
 },
 _c8mze() //  [R1]
         { []
         }
     {offset
       c8mze: // global
           if (R1 & 7 == 1) goto u8mAO; else goto c8mzs;
       u8mAO: // global
           Sp = Sp + 96;
           call _c8mAl() args: 0, res: 0, upd: 0;
       c8mzs: // global
           I64[Sp] = block_c8mzq_info;
           _s8j6L::P64 = P64[R1 + 6];
           R1 = P64[Sp + 88];
           P64[Sp + 88] = _s8j6L::P64;
           if (R1 & 7 != 0) goto u8mBv; else goto c8mzt;
       u8mBv: // global
           call _c8mzq(R1) args: 0, res: 0, upd: 0;
       c8mzt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mze_info" {
     block_c8mze_info:
         const _c8mze;
         const 38027;
         const 30;
 },
 _c8mzq() //  [R1]
         { []
         }
     {offset
       c8mzq: // global
           _s8j6L::P64 = P64[Sp + 88];
           if (R1 & 7 == 1) goto c8mzA; else goto c8mA5;
       c8mzA: // global
           I64[Sp] = block_c8mzx_info;
           _s8j6O::P64 = P64[R1 + 15];
           R1 = _s8j6L::P64;
           P64[Sp + 88] = _s8j6O::P64;
           if (R1 & 7 != 0) goto u8mBx; else goto c8mzB;
       u8mBx: // global
           call _c8mzx(R1) args: 0, res: 0, upd: 0;
       c8mzB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8mA5: // global
           I64[Sp] = block_c8mA3_info;
           _s8j6X::P64 = P64[R1 + 14];
           R1 = _s8j6L::P64;
           P64[Sp + 88] = _s8j6X::P64;
           if (R1 & 7 != 0) goto u8mBy; else goto c8mA6;
       u8mBy: // global
           call _c8mA3(R1) args: 0, res: 0, upd: 0;
       c8mA6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mzq_info" {
     block_c8mzq_info:
         const _c8mzq;
         const 38027;
         const 30;
 },
 _c8mzx() //  [R1]
         { []
         }
     {offset
       c8mzx: // global
           if (R1 & 7 == 1) goto c8mzW; else goto u8mAS;
       c8mzW: // global
           if (P64[Sp + 88] == P64[R1 + 15]) goto u8mAT; else goto u8mAU;
       u8mAT: // global
           Sp = Sp + 8;
           call _s8j6m() args: 0, res: 0, upd: 0;
       u8mAU: // global
           Sp = Sp + 96;
           goto u8mBB;
       u8mAS: // global
           Sp = Sp + 96;
           goto u8mBB;
       u8mBB: // global
           call _c8mAl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8mzx_info" {
     block_c8mzx_info:
         const _c8mzx;
         const 38027;
         const 30;
 },
 _c8mA3() //  [R1]
         { []
         }
     {offset
       c8mA3: // global
           if (R1 & 7 == 1) goto u8mAP; else goto c8mAv;
       u8mAP: // global
           Sp = Sp + 96;
           goto u8mBE;
       c8mAv: // global
           if (P64[Sp + 88] == P64[R1 + 14]) goto u8mAQ; else goto u8mAR;
       u8mAQ: // global
           Sp = Sp + 8;
           call _s8j6m() args: 0, res: 0, upd: 0;
       u8mAR: // global
           Sp = Sp + 96;
           goto u8mBE;
       u8mBE: // global
           call _c8mAl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8mA3_info" {
     block_c8mA3_info:
         const _c8mA3;
         const 38027;
         const 30;
 },
 _s8j6m() //  []
         { []
         }
     {offset
       s8j6m: // global
           I64[Sp + 8] = block_c8mx9_info;
           R3 = P64[Sp];
           R2 = P64[Sp + 40];
           Sp = Sp + 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c8mx9() //  [R1]
         { []
         }
     {offset
       c8mx9: // global
           if (R1 & 7 == 1) goto u8mAX; else goto c8my1;
       u8mAX: // global
           Sp = Sp + 80;
           call _c8mAl() args: 0, res: 0, upd: 0;
       c8my1: // global
           I64[Sp] = block_c8mxl_info;
           R1 = P64[Sp + 48];
           if (R1 & 7 != 0) goto u8mBe; else goto c8my2;
       u8mBe: // global
           call _c8mxl(R1) args: 0, res: 0, upd: 0;
       c8my2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mx9_info" {
     block_c8mx9_info:
         const _c8mx9;
         const 26377;
         const 30;
 },
 _c8mxl() //  [R1]
         { []
         }
     {offset
       c8mxl: // global
           _s8j6e::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8my9; else goto c8myp;
       c8my9: // global
           I64[Sp + 8] = block_c8my6_info;
           R1 = _s8j6e::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8mBg; else goto c8mya;
       u8mBg: // global
           call _c8my6(R1) args: 0, res: 0, upd: 0;
       c8mya: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8myp: // global
           I64[Sp + 8] = block_c8myn_info;
           _s8j6y::P64 = P64[R1 + 6];
           R1 = _s8j6e::P64;
           P64[Sp + 72] = _s8j6y::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8mBh; else goto c8myq;
       u8mBh: // global
           call _c8myn(R1) args: 0, res: 0, upd: 0;
       c8myq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mxl_info" {
     block_c8mxl_info:
         const _c8mxl;
         const 28425;
         const 30;
 },
 _c8my6() //  [R1]
         { []
         }
     {offset
       c8my6: // global
           if (R1 & 7 == 1) goto u8mB1; else goto u8mB2;
       u8mB1: // global
           Sp = Sp + 8;
           call _s8j6o() args: 0, res: 0, upd: 0;
       u8mB2: // global
           Sp = Sp + 72;
           call _c8mAl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8my6_info" {
     block_c8my6_info:
         const _c8my6;
         const 14216;
         const 30;
 },
 _c8myn() //  [R1]
         { []
         }
     {offset
       c8myn: // global
           if (R1 & 7 == 1) goto u8mAY; else goto c8myG;
       u8mAY: // global
           Sp = Sp + 72;
           call _c8mAl() args: 0, res: 0, upd: 0;
       c8myG: // global
           I64[Sp] = block_c8myz_info;
           _s8j6A::P64 = P64[R1 + 6];
           R1 = P64[Sp + 64];
           P64[Sp + 64] = _s8j6A::P64;
           if (R1 & 7 != 0) goto u8mBo; else goto c8myA;
       u8mBo: // global
           call _c8myz(R1) args: 0, res: 0, upd: 0;
       c8myA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8myn_info" {
     block_c8myn_info:
         const _c8myn;
         const 6024;
         const 30;
 },
 _c8myz() //  [R1]
         { []
         }
     {offset
       c8myz: // global
           I64[Sp] = block_c8myE_info;
           _s8j6C::I64 = I64[R1 + 7];
           R1 = P64[Sp + 64];
           I64[Sp + 64] = _s8j6C::I64;
           if (R1 & 7 != 0) goto u8mBq; else goto c8myI;
       u8mBq: // global
           call _c8myE(R1) args: 0, res: 0, upd: 0;
       c8myI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8myz_info" {
     block_c8myz_info:
         const _c8myz;
         const 6024;
         const 30;
 },
 _c8myE() //  [R1]
         { []
         }
     {offset
       c8myE: // global
           if (I64[Sp + 64] == I64[R1 + 7]) goto u8mAZ; else goto u8mB0;
       u8mAZ: // global
           Sp = Sp + 8;
           call _s8j6o() args: 0, res: 0, upd: 0;
       u8mB0: // global
           Sp = Sp + 72;
           call _c8mAl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8myE_info" {
     block_c8myE_info:
         const _c8myE;
         const 14216;
         const 30;
 },
 _s8j6o() //  []
         { []
         }
     {offset
       s8j6o: // global
           I64[Sp - 8] = block_c8mxq_info;
           R1 = P64[Sp + 40];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8mBF; else goto c8mxs;
       u8mBF: // global
           call _c8mxq(R1) args: 0, res: 0, upd: 0;
       c8mxs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8mxq() //  [R1]
         { []
         }
     {offset
       c8mxq: // global
           _s8j6f::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8mxz; else goto c8mxP;
       c8mxz: // global
           I64[Sp + 64] = block_c8mxw_info;
           R1 = _s8j6f::P64;
           Sp = Sp + 64;
           if (R1 & 7 != 0) goto u8mBi; else goto c8mxA;
       u8mBi: // global
           call _c8mxw(R1) args: 0, res: 0, upd: 0;
       c8mxA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8mxP: // global
           I64[Sp + 56] = block_c8mxN_info;
           _s8j6s::P64 = P64[R1 + 6];
           R1 = _s8j6f::P64;
           P64[Sp + 64] = _s8j6s::P64;
           Sp = Sp + 56;
           if (R1 & 7 != 0) goto u8mBj; else goto c8mxQ;
       u8mBj: // global
           call _c8mxN(R1) args: 0, res: 0, upd: 0;
       c8mxQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mxq_info" {
     block_c8mxq_info:
         const _c8mxq;
         const 16264;
         const 30;
 },
 _c8mxw() //  [R1]
         { []
         }
     {offset
       c8mxw: // global
           if (R1 & 7 == 1) goto c8mxG; else goto u8mB4;
       c8mxG: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u8mB4: // global
           Sp = Sp + 8;
           call _c8mAl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8mxw_info" {
     block_c8mxw_info:
         const _c8mxw;
         const 0;
         const 30;
 },
 _c8mxN() //  [R1]
         { []
         }
     {offset
       c8mxN: // global
           if (R1 & 7 == 1) goto u8mB3; else goto c8my0;
       u8mB3: // global
           Sp = Sp + 16;
           call _c8mAl() args: 0, res: 0, upd: 0;
       c8my0: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mxN_info" {
     block_c8mxN_info:
         const _c8mxN;
         const 1;
         const 30;
 },
 _c8mAl() //  []
         { []
         }
     {offset
       c8mAl: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.288750916 UTC

[section ""data" . GHC.IO.Exception.$fEqIOException_$c/=_closure" {
     GHC.IO.Exception.$fEqIOException_$c/=_closure:
         const GHC.IO.Exception.$fEqIOException_$c/=_info;
 },
 GHC.IO.Exception.$fEqIOException_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8mDV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8mDW; else goto c8mDX;
       c8mDW: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fEqIOException_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8mDX: // global
           I64[Sp - 8] = block_c8mDP_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Exception.$fEqIOException_$c==_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fEqIOException_$c/=_info" {
     GHC.IO.Exception.$fEqIOException_$c/=_info:
         const GHC.IO.Exception.$fEqIOException_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8mDP() //  [R1]
         { []
         }
     {offset
       c8mDP: // global
           if (R1 & 7 == 1) goto c8mDS; else goto c8mDT;
       c8mDS: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8mDT: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mDP_info" {
     block_c8mDP_info:
         const _c8mDP;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.29357189 UTC

[section ""data" . GHC.IO.Exception.$fEqIOException_closure" {
     GHC.IO.Exception.$fEqIOException_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Exception.$fEqIOException_$c==_closure+2;
         const GHC.IO.Exception.$fEqIOException_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.295862001 UTC

[section ""data" . GHC.IO.Exception.$fExceptionIOException1_closure" {
     GHC.IO.Exception.$fExceptionIOException1_closure:
         const GHC.IO.Exception.$fExceptionIOException1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionIOException1_entry() //  [R1]
         { []
         }
     {offset
       c8mEn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mEo; else goto c8mEp;
       c8mEo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mEp: // global
           (_c8mEk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8mEk::I64 == 0) goto c8mEm; else goto c8mEl;
       c8mEm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8mEl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8mEk::I64;
           R2 = GHC.IO.Exception.$fExceptionArrayException3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionIOException1_info" {
     GHC.IO.Exception.$fExceptionIOException1_info:
         const GHC.IO.Exception.$fExceptionIOException1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.299786463 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionIOException3_bytes" {
     GHC.IO.Exception.$fExceptionIOException3_bytes:
         I8[] [32,40]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.302001134 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionIOException2_bytes" {
     GHC.IO.Exception.$fExceptionIOException2_bytes:
         I8[] [41]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.312741732 UTC

[section ""data" . GHC.IO.Exception.$w$cshowsPrec3_closure" {
     GHC.IO.Exception.$w$cshowsPrec3_closure:
         const GHC.IO.Exception.$w$cshowsPrec3_info;
         const 0;
 },
 sat_s8j7k_entry() //  [R1]
         { []
         }
     {offset
       c8mF3: // global
           R3 = P64[R1 + 16];
           R2 = GHC.IO.Exception.$fExceptionIOException2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8j7k_info" {
     sat_s8j7k_info:
         const sat_s8j7k_entry;
         const 1;
         const 16;
 },
 sat_s8j7l_entry() //  [R1]
         { []
         }
     {offset
       c8mF6: // global
           _s8j7l::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8mF7; else goto c8mF8;
       c8mF8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8mFa; else goto c8mF9;
       c8mFa: // global
           HpAlloc = 24;
           goto c8mF7;
       c8mF7: // global
           R1 = _s8j7l::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mF9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8j7l::P64;
           _s8j7e::P64 = P64[_s8j7l::P64 + 16];
           _s8j7h::P64 = P64[_s8j7l::P64 + 24];
           I64[Hp - 16] = sat_s8j7k_info;
           P64[Hp] = _s8j7e::P64;
           R3 = Hp - 16;
           R2 = _s8j7h::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8j7l_info" {
     sat_s8j7l_info:
         const sat_s8j7l_entry;
         const 2;
         const 18;
 },
 sat_s8j7m_entry() //  [R1]
         { []
         }
     {offset
       c8mFf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mFg; else goto c8mFh;
       c8mFg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mFh: // global
           I64[Sp - 16] = block_c8mEP_info;
           _s8j7e::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 8] = _s8j7e::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8mFn; else goto c8mEQ;
       u8mFn: // global
           call _c8mEP(R1) args: 0, res: 0, upd: 0;
       c8mEQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8j7m_info" {
     sat_s8j7m_info:
         const sat_s8j7m_entry;
         const 2;
         const 18;
 },
 _c8mEP() //  [R1]
         { []
         }
     {offset
       c8mEP: // global
           _s8j7e::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8mFc; else goto c8mFd;
       c8mFc: // global
           R1 = _s8j7e::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8mFd: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8mFm; else goto c8mFl;
       c8mFm: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8mFl: // global
           I64[Hp - 24] = sat_s8j7l_info;
           P64[Hp - 8] = _s8j7e::P64;
           P64[Hp] = R1;
           R3 = Hp - 24;
           R2 = GHC.IO.Exception.$fExceptionIOException3_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mEP_info" {
     block_c8mEP_info:
         const _c8mEP;
         const 1;
         const 30;
 },
 karg_s8j7g_entry() //  [R1]
         { []
         }
     {offset
       c8mFo: // global
           _s8j7g::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8mFp; else goto c8mFq;
       c8mFq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8mFs; else goto c8mFr;
       c8mFs: // global
           HpAlloc = 32;
           goto c8mFp;
       c8mFp: // global
           R1 = _s8j7g::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mFr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8j7g::P64;
           _s8j7a::P64 = P64[_s8j7g::P64 + 16];
           _s8j7c::P64 = P64[_s8j7g::P64 + 24];
           _s8j7e::P64 = P64[_s8j7g::P64 + 32];
           I64[Hp - 24] = sat_s8j7m_info;
           P64[Hp - 8] = _s8j7c::P64;
           P64[Hp] = _s8j7e::P64;
           R3 = Hp - 24;
           R2 = _s8j7a::P64;
           Sp = Sp - 16;
           call GHC.IO.Exception.$w$cshowsPrec4_entry(R3,
                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . karg_s8j7g_info" {
     karg_s8j7g_info:
         const karg_s8j7g_entry;
         const 3;
         const 4294967311;
         const S8ji8_srt+208;
 },
 sat_s8j7q_entry() //  [R1]
         { []
         }
     {offset
       c8mFD: // global
           R3 = P64[R1 + 16];
           R2 = GHC.IO.Exception.$fExceptionArrayException3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8j7q_info" {
     sat_s8j7q_info:
         const sat_s8j7q_entry;
         const 1;
         const 16;
 },
 eta_s8j7f_entry() //  [R1]
         { []
         }
     {offset
       c8mFK: // global
           _s8j7f::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c8mFL; else goto c8mFM;
       c8mFM: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8mFO; else goto c8mFN;
       c8mFO: // global
           HpAlloc = 40;
           goto c8mFL;
       c8mFL: // global
           R1 = _s8j7f::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mFN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8j7f::P64;
           _s8j7a::P64 = P64[_s8j7f::P64 + 16];
           _s8j7b::P64 = P64[_s8j7f::P64 + 24];
           _s8j7c::P64 = P64[_s8j7f::P64 + 32];
           _s8j7e::P64 = P64[_s8j7f::P64 + 40];
           I64[Hp - 32] = karg_s8j7g_info;
           P64[Hp - 16] = _s8j7a::P64;
           P64[Hp - 8] = _s8j7c::P64;
           P64[Hp] = _s8j7e::P64;
           I64[Sp - 32] = block_c8mFt_info;
           R1 = _s8j7b::P64;
           P64[Sp - 24] = Hp - 32;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u8mFU; else goto c8mFu;
       u8mFU: // global
           call _c8mFt(R1) args: 0, res: 0, upd: 0;
       c8mFu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . eta_s8j7f_info" {
     eta_s8j7f_info:
         const eta_s8j7f_entry;
         const 4;
         const 4294967311;
         const S8ji8_srt+208;
 },
 _c8mFt() //  [R1]
         { []
         }
     {offset
       c8mFt: // global
           _c8mEH::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8mFH; else goto c8mFI;
       c8mFH: // global
           R1 = _c8mEH::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c8mFI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8mFT; else goto c8mFS;
       c8mFT: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c8mFS: // global
           I64[Hp - 16] = sat_s8j7q_info;
           P64[Hp] = _c8mEH::P64;
           R3 = Hp - 16;
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8mFt_info" {
     block_c8mFt_info:
         const _c8mFt;
         const 1;
         const 30;
 },
 sat_s8j7x_entry() //  [R1]
         { []
         }
     {offset
       c8mGn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mGo; else goto c8mGp;
       c8mGo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mGp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.IO.Exception.$fExceptionIOException1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8j7x_info" {
     sat_s8j7x_info:
         const sat_s8j7x_entry;
         const 1;
         const 4294967312;
         const S8ji8_srt+368;
 },
 sat_s8j7y_entry() //  [R1]
         { []
         }
     {offset
       c8mGq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8mGu; else goto c8mGt;
       c8mGu: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mGt: // global
           _s8j7f::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_s8j7x_info;
           P64[Hp] = _s8j7f::P64;
           R3 = Hp - 16;
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode5_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8j7y_info" {
     sat_s8j7y_info:
         const sat_s8j7y_entry;
         const 1;
         const 4294967312;
         const S8ji8_srt+368;
 },
 sat_s8j7z_entry() //  [R1]
         { []
         }
     {offset
       c8mGv: // global
           _s8j7z::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8mGw; else goto c8mGx;
       c8mGx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8mGz; else goto c8mGy;
       c8mGz: // global
           HpAlloc = 24;
           goto c8mGw;
       c8mGw: // global
           R1 = _s8j7z::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mGy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8j7z::P64;
           _s8j7f::P64 = P64[_s8j7z::P64 + 16];
           _s8j7v::P64 = P64[_s8j7z::P64 + 24];
           I64[Hp - 16] = sat_s8j7y_info;
           P64[Hp] = _s8j7f::P64;
           R3 = Hp - 16;
           R2 = _s8j7v::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8j7z_info" {
     sat_s8j7z_info:
         const sat_s8j7z_entry;
         const 2;
         const 4294967314;
         const S8ji8_srt+368;
 },
 sat_s8j7D_entry() //  [R1]
         { []
         }
     {offset
       c8mGO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mGP; else goto c8mGQ;
       c8mGP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mGQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.IO.Exception.$fExceptionIOException1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8j7D_info" {
     sat_s8j7D_info:
         const sat_s8j7D_entry;
         const 1;
         const 4294967312;
         const S8ji8_srt+368;
 },
 sat_s8j7E_entry() //  [R1]
         { []
         }
     {offset
       c8mGR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8mGV; else goto c8mGU;
       c8mGV: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mGU: // global
           _s8j7f::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_s8j7D_info;
           P64[Hp] = _s8j7f::P64;
           R3 = Hp - 16;
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode5_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8j7E_info" {
     sat_s8j7E_info:
         const sat_s8j7E_entry;
         const 1;
         const 4294967312;
         const S8ji8_srt+368;
 },
 sat_s8j7F_entry() //  [R1]
         { []
         }
     {offset
       c8mGW: // global
           _s8j7F::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8mGX; else goto c8mGY;
       c8mGY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8mH0; else goto c8mGZ;
       c8mH0: // global
           HpAlloc = 24;
           goto c8mGX;
       c8mGX: // global
           R1 = _s8j7F::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mGZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8j7F::P64;
           _s8j7f::P64 = P64[_s8j7F::P64 + 16];
           _s8j7A::P64 = P64[_s8j7F::P64 + 24];
           I64[Hp - 16] = sat_s8j7E_info;
           P64[Hp] = _s8j7f::P64;
           R3 = Hp - 16;
           R2 = _s8j7A::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8j7F_info" {
     sat_s8j7F_info:
         const sat_s8j7F_entry;
         const 2;
         const 4294967314;
         const S8ji8_srt+368;
 },
 sat_s8j7H_entry() //  [R1]
         { []
         }
     {offset
       c8mH7: // global
           R3 = P64[R1 + 16];
           R2 = GHC.IO.Exception.$fExceptionArrayException3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8j7H_info" {
     sat_s8j7H_info:
         const sat_s8j7H_entry;
         const 1;
         const 16;
 },
 GHC.IO.Exception.$w$cshowsPrec3_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c8mHe: // global
           _s8j7d::P64 = R6;
           _s8j7c::P64 = R5;
           _s8j7b::P64 = R4;
           _s8j7a::P64 = R3;
           _s8j79::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c8mHf; else goto c8mHg;
       c8mHg: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8mHi; else goto c8mHh;
       c8mHi: // global
           HpAlloc = 48;
           goto c8mHf;
       c8mHf: // global
           R6 = _s8j7d::P64;
           R5 = _s8j7c::P64;
           R4 = _s8j7b::P64;
           R3 = _s8j7a::P64;
           R2 = _s8j79::P64;
           R1 = GHC.IO.Exception.$w$cshowsPrec3_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c8mHh: // global
           I64[Hp - 40] = eta_s8j7f_info;
           P64[Hp - 24] = _s8j7a::P64;
           P64[Hp - 16] = _s8j7b::P64;
           P64[Hp - 8] = _s8j7c::P64;
           P64[Hp] = P64[Sp];
           I64[Sp - 16] = block_c8mFV_info;
           R1 = _s8j7d::P64;
           P64[Sp - 8] = _s8j79::P64;
           P64[Sp] = Hp - 40;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8mHG; else goto c8mFW;
       u8mHG: // global
           call _c8mFV(R1) args: 0, res: 0, upd: 0;
       c8mFW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$w$cshowsPrec3_info" {
     GHC.IO.Exception.$w$cshowsPrec3_info:
         const GHC.IO.Exception.$w$cshowsPrec3_entry;
         const 0;
         const 13510803177078798;
         const 25769803802;
         const S8ji8_srt+208;
 },
 _c8mFV() //  [R1]
         { []
         }
     {offset
       c8mFV: // global
           if (R1 & 7 == 1) goto c8mHb; else goto c8mHc;
       c8mHb: // global
           _s8j79::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8mG0_info;
           R1 = _s8j79::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8mHE; else goto c8mG1;
       u8mHE: // global
           call _c8mG0(R1) args: 0, res: 0, upd: 0;
       c8mG1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8mHc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8mHB; else goto c8mHA;
       c8mHB: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8mHA: // global
           _s8j7G::P64 = P64[R1 + 6];
           I64[Hp - 16] = sat_s8j7H_info;
           P64[Hp] = P64[Sp + 16];
           R3 = Hp - 16;
           R2 = _s8j7G::P64;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mFV_info" {
     block_c8mFV_info:
         const _c8mFV;
         const 2;
         const 4294967326;
         const S8ji8_srt+368;
 },
 _c8mG0() //  [R1]
         { []
         }
     {offset
       c8mG0: // global
           if (R1 & 7 == 1) goto c8mHn; else goto c8mHp;
       c8mHn: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8mHp: // global
           I64[Sp] = block_c8mG6_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u8mHF; else goto c8mG7;
       u8mHF: // global
           call _c8mG6(R1) args: 0, res: 0, upd: 0;
       c8mG7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mG0_info" {
     block_c8mG0_info:
         const _c8mG0;
         const 1;
         const 4294967326;
         const S8ji8_srt+368;
 },
 _c8mG6() //  [R1]
         { []
         }
     {offset
       c8mG6: // global
           _c8mED::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8mHr; else goto c8mHv;
       c8mHr: // global
           Hp = Hp + 32;
           _s8j7u::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c8mHy; else goto c8mHt;
       c8mHt: // global
           _s8j7v::P64 = P64[_s8j7u::P64 + 7];
           I64[Hp - 24] = sat_s8j7z_info;
           P64[Hp - 8] = _c8mED::P64;
           P64[Hp] = _s8j7v::P64;
           R3 = Hp - 24;
           R2 = GHC.IO.Handle.Types.showHandle1_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c8mHv: // global
           Hp = Hp + 32;
           _s8j7u::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c8mHy; else goto c8mHx;
       c8mHy: // global
           HpAlloc = 32;
           R1 = _s8j7u::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8mHx: // global
           _s8j7A::P64 = P64[_s8j7u::P64 + 6];
           I64[Hp - 24] = sat_s8j7F_info;
           P64[Hp - 8] = _c8mED::P64;
           P64[Hp] = _s8j7A::P64;
           R3 = Hp - 24;
           R2 = GHC.IO.Handle.Types.showHandle1_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mG6_info" {
     block_c8mG6_info:
         const _c8mG6;
         const 1;
         const 4294967326;
         const S8ji8_srt+368;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.34920955 UTC

[section ""data" . GHC.IO.Exception.$fExceptionIOException_$cshowsPrec_closure" {
     GHC.IO.Exception.$fExceptionIOException_$cshowsPrec_closure:
         const GHC.IO.Exception.$fExceptionIOException_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionIOException_$cshowsPrec_entry() //  [R2,
                                                                  R3, R4]
         { []
         }
     {offset
       c8mJi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mJj; else goto c8mJk;
       c8mJj: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionIOException_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8mJk: // global
           I64[Sp - 16] = block_c8mJf_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8mJo; else goto c8mJg;
       u8mJo: // global
           call _c8mJf(R1) args: 0, res: 0, upd: 0;
       c8mJg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionIOException_$cshowsPrec_info" {
     GHC.IO.Exception.$fExceptionIOException_$cshowsPrec_info:
         const GHC.IO.Exception.$fExceptionIOException_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S8ji8_srt+376;
 },
 _c8mJf() //  [R1]
         { []
         }
     {offset
       c8mJf: // global
           R6 = P64[R1 + 47];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.IO.Exception.$w$cshowsPrec3_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mJf_info" {
     block_c8mJf_info:
         const _c8mJf;
         const 1;
         const 4294967326;
         const S8ji8_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.354970299 UTC

[section ""data" . GHC.IO.Exception.$fExceptionIOException_$cshow_closure" {
     GHC.IO.Exception.$fExceptionIOException_$cshow_closure:
         const GHC.IO.Exception.$fExceptionIOException_$cshow_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionIOException_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c8mJF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8mJG; else goto c8mJH;
       c8mJG: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionIOException_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8mJH: // global
           I64[Sp - 8] = block_c8mJC_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8mJL; else goto c8mJD;
       u8mJL: // global
           call _c8mJC(R1) args: 0, res: 0, upd: 0;
       c8mJD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionIOException_$cshow_info" {
     GHC.IO.Exception.$fExceptionIOException_$cshow_info:
         const GHC.IO.Exception.$fExceptionIOException_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S8ji8_srt+376;
 },
 _c8mJC() //  [R1]
         { []
         }
     {offset
       c8mJC: // global
           R6 = P64[R1 + 47];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           P64[Sp] = GHC.Types.[]_closure+1;
           call GHC.IO.Exception.$w$cshowsPrec3_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mJC_info" {
     block_c8mJC_info:
         const _c8mJC;
         const 0;
         const 4294967326;
         const S8ji8_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.361642468 UTC

[section ""data" . GHC.IO.Exception.$fShowIOException1_closure" {
     GHC.IO.Exception.$fShowIOException1_closure:
         const GHC.IO.Exception.$fShowIOException1_info;
         const 0;
 },
 GHC.IO.Exception.$fShowIOException1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8mK2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mK3; else goto c8mK4;
       c8mK3: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fShowIOException1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8mK4: // global
           I64[Sp - 16] = block_c8mJZ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8mK8; else goto c8mK0;
       u8mK8: // global
           call _c8mJZ(R1) args: 0, res: 0, upd: 0;
       c8mK0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowIOException1_info" {
     GHC.IO.Exception.$fShowIOException1_info:
         const GHC.IO.Exception.$fShowIOException1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S8ji8_srt+376;
 },
 _c8mJZ() //  [R1]
         { []
         }
     {offset
       c8mJZ: // global
           R6 = P64[R1 + 47];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.IO.Exception.$w$cshowsPrec3_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mJZ_info" {
     block_c8mJZ_info:
         const _c8mJZ;
         const 1;
         const 4294967326;
         const S8ji8_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.368952111 UTC

[section ""data" . GHC.IO.Exception.$fShowIOException_$cshowList_closure" {
     GHC.IO.Exception.$fShowIOException_$cshowList_closure:
         const GHC.IO.Exception.$fShowIOException_$cshowList_info;
         const 0;
 },
 GHC.IO.Exception.$fShowIOException_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c8mKm: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Exception.$fShowIOException1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowIOException_$cshowList_info" {
     GHC.IO.Exception.$fShowIOException_$cshowList_info:
         const GHC.IO.Exception.$fShowIOException_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S8ji8_srt+400;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.373821358 UTC

[section ""data" . GHC.IO.Exception.$fShowIOException_closure" {
     GHC.IO.Exception.$fShowIOException_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Exception.$fExceptionIOException_$cshowsPrec_closure+3;
         const GHC.IO.Exception.$fExceptionIOException_$cshow_closure+1;
         const GHC.IO.Exception.$fShowIOException_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.377569116 UTC

[section ""data" . GHC.IO.Exception.$fGenericExitCode_$cto_closure" {
     GHC.IO.Exception.$fGenericExitCode_$cto_closure:
         const GHC.IO.Exception.$fGenericExitCode_$cto_info;
 },
 GHC.IO.Exception.$fGenericExitCode_$cto_entry() //  [R2]
         { []
         }
     {offset
       c8mKE: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8mKF; else goto c8mKG;
       c8mKF: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fGenericExitCode_$cto_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8mKG: // global
           I64[Sp - 8] = block_c8mKy_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fGenericExitCode_$cto_info" {
     GHC.IO.Exception.$fGenericExitCode_$cto_info:
         const GHC.IO.Exception.$fGenericExitCode_$cto_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8mKy() //  [R1]
         { []
         }
     {offset
       c8mKy: // global
           if (R1 & 7 == 1) goto c8mKB; else goto c8mKC;
       c8mKB: // global
           I64[Sp] = block_c8mKJ_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto u8mKW; else goto c8mKL;
       u8mKW: // global
           call _c8mKJ() args: 0, res: 0, upd: 0;
       c8mKL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8mKC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8mKV; else goto c8mKU;
       c8mKV: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8mKU: // global
           _s8j8f::P64 = P64[R1 + 6];
           I64[Hp - 8] = GHC.IO.Exception.ExitFailure_con_info;
           P64[Hp] = _s8j8f::P64;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mKy_info" {
     block_c8mKy_info:
         const _c8mKy;
         const 0;
         const 30;
 },
 _c8mKJ() //  []
         { []
         }
     {offset
       c8mKJ: // global
           R1 = GHC.IO.Exception.ExitSuccess_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mKJ_info" {
     block_c8mKJ_info:
         const _c8mKJ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.384263914 UTC

[section ""data" . GHC.IO.Exception.$fGenericExitCode2_closure" {
     GHC.IO.Exception.$fGenericExitCode2_closure:
         const GHC.Generics.L1_con_info;
         const GHC.Generics.U1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.387626311 UTC

[section ""data" . GHC.IO.Exception.$fGenericExitCode1_closure" {
     GHC.IO.Exception.$fGenericExitCode1_closure:
         const GHC.IO.Exception.$fGenericExitCode1_info;
 },
 GHC.IO.Exception.$fGenericExitCode1_entry() //  [R2]
         { []
         }
     {offset
       c8mLp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8mLq; else goto c8mLr;
       c8mLq: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fGenericExitCode1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8mLr: // global
           I64[Sp - 8] = block_c8mLi_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8mLB; else goto c8mLj;
       u8mLB: // global
           call _c8mLi(R1) args: 0, res: 0, upd: 0;
       c8mLj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fGenericExitCode1_info" {
     GHC.IO.Exception.$fGenericExitCode1_info:
         const GHC.IO.Exception.$fGenericExitCode1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8mLi() //  [R1]
         { []
         }
     {offset
       c8mLi: // global
           if (R1 & 7 == 1) goto c8mLm; else goto c8mLn;
       c8mLm: // global
           R1 = GHC.IO.Exception.$fGenericExitCode2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8mLn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8mLA; else goto c8mLz;
       c8mLA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8mLz: // global
           _s8j8i::P64 = P64[R1 + 6];
           I64[Hp - 8] = GHC.Generics.R1_con_info;
           P64[Hp] = _s8j8i::P64;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mLi_info" {
     block_c8mLi_info:
         const _c8mLi;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.393601237 UTC

[section ""data" . GHC.IO.Exception.$fGenericExitCode_closure" {
     GHC.IO.Exception.$fGenericExitCode_closure:
         const GHC.Generics.C:Generic_con_info;
         const GHC.IO.Exception.$fGenericExitCode1_closure+1;
         const GHC.IO.Exception.$fGenericExitCode_$cto_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.395273712 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionExitCode3_bytes" {
     GHC.IO.Exception.$fExceptionExitCode3_bytes:
         I8[] [69,120,105,116,83,117,99,99,101,115,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.397626557 UTC

[section ""data" . GHC.IO.Exception.$fExceptionExitCode2_closure" {
     GHC.IO.Exception.$fExceptionExitCode2_closure:
         const GHC.IO.Exception.$fExceptionExitCode2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionExitCode2_entry() //  [R1]
         { []
         }
     {offset
       c8mLX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mLY; else goto c8mLZ;
       c8mLY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mLZ: // global
           (_c8mLU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8mLU::I64 == 0) goto c8mLW; else goto c8mLV;
       c8mLW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8mLV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8mLU::I64;
           R2 = GHC.IO.Exception.$fExceptionExitCode3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionExitCode2_info" {
     GHC.IO.Exception.$fExceptionExitCode2_info:
         const GHC.IO.Exception.$fExceptionExitCode2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.401103357 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionExitCode1_bytes" {
     GHC.IO.Exception.$fExceptionExitCode1_bytes:
         I8[] [69,120,105,116,70,97,105,108,117,114,101,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.407428877 UTC

[section ""data" . GHC.IO.Exception.$fShowExitCode_$cshowsPrec_closure" {
     GHC.IO.Exception.$fShowExitCode_$cshowsPrec_closure:
         const GHC.IO.Exception.$fShowExitCode_$cshowsPrec_info;
         const 0;
 },
 sat_s8j8w_entry() //  [R1]
         { []
         }
     {offset
       c8mMx: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8mMD; else goto c8mME;
       c8mMD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mME: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c8mMu_info;
           _s8j8l::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s8j8l::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u8mMJ; else goto c8mMv;
       u8mMJ: // global
           call _c8mMu(R1) args: 0, res: 0, upd: 0;
       c8mMv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8j8w_info" {
     sat_s8j8w_info:
         const sat_s8j8w_entry;
         const 2;
         const 18;
 },
 _c8mMu() //  [R1]
         { []
         }
     {offset
       c8mMu: // global
           _s8j8l::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8mMA_info;
           R4 = _s8j8l::P64;
           R3 = I64[R1 + 7];
           R2 = 11;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c8mMu_info" {
     block_c8mMu_info:
         const _c8mMu;
         const 1;
         const 30;
 },
 _c8mMA() //  [R1, R2]
         { []
         }
     {offset
       c8mMA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8mMI; else goto c8mMH;
       c8mMI: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c8mMH: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8mMA_info" {
     block_c8mMA_info:
         const _c8mMA;
         const 0;
         const 30;
 },
 sat_s8j8D_entry() //  [R1]
         { []
         }
     {offset
       c8mMW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8mN3; else goto c8mN4;
       c8mN3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mN4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c8mMT_info;
           _s8j8l::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s8j8l::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u8mNb; else goto c8mMU;
       u8mNb: // global
           call _c8mMT(R1) args: 0, res: 0, upd: 0;
       c8mMU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8j8D_info" {
     sat_s8j8D_info:
         const sat_s8j8D_entry;
         const 2;
         const 18;
 },
 _c8mMT() //  [R1]
         { []
         }
     {offset
       c8mMT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8mN7; else goto c8mN6;
       c8mN7: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c8mN6: // global
           _s8j8y::I64 = I64[R1 + 7];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c8mN0_info;
           R4 = Hp - 14;
           R3 = _s8j8y::I64;
           R2 = 11;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c8mMT_info" {
     block_c8mMT_info:
         const _c8mMT;
         const 1;
         const 30;
 },
 _c8mN0() //  [R1, R2]
         { []
         }
     {offset
       c8mN0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8mNa; else goto c8mN9;
       c8mNa: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c8mN9: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8mN0_info" {
     block_c8mN0_info:
         const _c8mN0;
         const 0;
         const 30;
 },
 sat_s8j8E_entry() //  [R1]
         { []
         }
     {offset
       c8mNc: // global
           _s8j8E::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8mNd; else goto c8mNe;
       c8mNe: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8mNg; else goto c8mNf;
       c8mNg: // global
           HpAlloc = 32;
           goto c8mNd;
       c8mNd: // global
           R1 = _s8j8E::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mNf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8j8E::P64;
           _s8j8l::P64 = P64[_s8j8E::P64 + 16];
           _s8j8n::P64 = P64[_s8j8E::P64 + 24];
           I64[Hp - 24] = sat_s8j8D_info;
           P64[Hp - 8] = _s8j8l::P64;
           P64[Hp] = _s8j8n::P64;
           R3 = Hp - 24;
           R2 = GHC.IO.Exception.$fExceptionExitCode1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8j8E_info" {
     sat_s8j8E_info:
         const sat_s8j8E_entry;
         const 2;
         const 18;
 },
 GHC.IO.Exception.$fShowExitCode_$cshowsPrec_entry() //  [R2, R3,
                                                          R4]
         { []
         }
     {offset
       c8mNl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8mNm; else goto c8mNn;
       c8mNm: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fShowExitCode_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8mNn: // global
           I64[Sp - 24] = block_c8mMc_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8mNz; else goto c8mMd;
       u8mNz: // global
           call _c8mMc(R1) args: 0, res: 0, upd: 0;
       c8mMd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowExitCode_$cshowsPrec_info" {
     GHC.IO.Exception.$fShowExitCode_$cshowsPrec_info:
         const GHC.IO.Exception.$fShowExitCode_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S8ji8_srt+408;
 },
 _c8mMc() //  [R1]
         { []
         }
     {offset
       c8mMc: // global
           if (R1 & 7 == 1) goto c8mNi; else goto c8mNj;
       c8mNi: // global
           R3 = P64[Sp + 16];
           R2 = GHC.IO.Exception.$fExceptionExitCode2_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8mNj: // global
           I64[Sp] = block_c8mMi_info;
           _s8j8n::P64 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8j8n::P64;
           if (R1 & 7 != 0) goto u8mNy; else goto c8mMj;
       u8mNy: // global
           call _c8mMi(R1) args: 0, res: 0, upd: 0;
       c8mMj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mMc_info" {
     block_c8mMc_info:
         const _c8mMc;
         const 2;
         const 4294967326;
         const S8ji8_srt+408;
 },
 _c8mMi() //  [R1]
         { []
         }
     {offset
       c8mMi: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c8mNt; else goto c8mNs;
       c8mNt: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8mNs: // global
           _s8j8l::P64 = P64[Sp + 16];
           _s8j8n::P64 = P64[Sp + 8];
           if (%MO_S_Lt_W64(I64[R1 + 7], 11)) goto c8mNv; else goto c8mNx;
       c8mNv: // global
           I64[Hp - 48] = sat_s8j8w_info;
           P64[Hp - 32] = _s8j8l::P64;
           P64[Hp - 24] = _s8j8n::P64;
           _c8mMq::P64 = Hp - 48;
           Hp = Hp - 24;
           R3 = _c8mMq::P64;
           R2 = GHC.IO.Exception.$fExceptionExitCode1_bytes;
           Sp = Sp + 24;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c8mNx: // global
           I64[Hp - 48] = sat_s8j8E_info;
           P64[Hp - 32] = _s8j8l::P64;
           P64[Hp - 24] = _s8j8n::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mMi_info" {
     block_c8mMi_info:
         const _c8mMi;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.42902093 UTC

[section ""data" . GHC.IO.Exception.$fExceptionExitCode_$cshow_closure" {
     GHC.IO.Exception.$fExceptionExitCode_$cshow_closure:
         const GHC.IO.Exception.$fExceptionExitCode_$cshow_info;
         const 0;
 },
 sat_s8j8N_entry() //  [R1]
         { []
         }
     {offset
       c8mOB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8mOH; else goto c8mOI;
       c8mOH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mOI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c8mOy_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8mON; else goto c8mOz;
       u8mON: // global
           call _c8mOy(R1) args: 0, res: 0, upd: 0;
       c8mOz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8j8N_info" {
     sat_s8j8N_info:
         const sat_s8j8N_entry;
         const 1;
         const 16;
 },
 _c8mOy() //  [R1]
         { []
         }
     {offset
       c8mOy: // global
           I64[Sp] = block_c8mOE_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 7];
           R2 = 11;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c8mOy_info" {
     block_c8mOy_info:
         const _c8mOy;
         const 0;
         const 30;
 },
 _c8mOE() //  [R1, R2]
         { []
         }
     {offset
       c8mOE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8mOM; else goto c8mOL;
       c8mOM: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c8mOL: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8mOE_info" {
     block_c8mOE_info:
         const _c8mOE;
         const 0;
         const 30;
 },
 GHC.IO.Exception.$fExceptionExitCode_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c8mOS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8mOT; else goto c8mOU;
       c8mOT: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionExitCode_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8mOU: // global
           I64[Sp - 8] = block_c8mOo_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8mP0; else goto c8mOp;
       u8mP0: // global
           call _c8mOo(R1) args: 0, res: 0, upd: 0;
       c8mOp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionExitCode_$cshow_info" {
     GHC.IO.Exception.$fExceptionExitCode_$cshow_info:
         const GHC.IO.Exception.$fExceptionExitCode_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S8ji8_srt+408;
 },
 _c8mOo() //  [R1]
         { []
         }
     {offset
       c8mOo: // global
           if (R1 & 7 == 1) goto c8mOP; else goto c8mOQ;
       c8mOP: // global
           R1 = GHC.IO.Exception.$fExceptionExitCode2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8mOQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8mOZ; else goto c8mOY;
       c8mOZ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8mOY: // global
           _s8j8H::P64 = P64[R1 + 6];
           I64[Hp - 16] = sat_s8j8N_info;
           P64[Hp] = _s8j8H::P64;
           R3 = Hp - 16;
           R2 = GHC.IO.Exception.$fExceptionExitCode1_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mOo_info" {
     block_c8mOo_info:
         const _c8mOo;
         const 0;
         const 4294967326;
         const S8ji8_srt+408;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.442942764 UTC

[section ""data" . GHC.IO.Exception.$fShowExitCode1_closure" {
     GHC.IO.Exception.$fShowExitCode1_closure:
         const GHC.IO.Exception.$fShowExitCode1_info;
         const 0;
 },
 GHC.IO.Exception.$fShowExitCode1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8mPt: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Exception.$fExceptionArrayException1_closure+1;
           call GHC.IO.Exception.$fShowExitCode_$cshowsPrec_entry(R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowExitCode1_info" {
     GHC.IO.Exception.$fShowExitCode1_info:
         const GHC.IO.Exception.$fShowExitCode1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S8ji8_srt+416;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.448294468 UTC

[section ""data" . GHC.IO.Exception.$fShowExitCode_$cshowList_closure" {
     GHC.IO.Exception.$fShowExitCode_$cshowList_closure:
         const GHC.IO.Exception.$fShowExitCode_$cshowList_info;
         const 0;
 },
 GHC.IO.Exception.$fShowExitCode_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c8mPE: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Exception.$fShowExitCode1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowExitCode_$cshowList_info" {
     GHC.IO.Exception.$fShowExitCode_$cshowList_info:
         const GHC.IO.Exception.$fShowExitCode_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S8ji8_srt+432;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.451676182 UTC

[section ""data" . GHC.IO.Exception.$fShowExitCode_closure" {
     GHC.IO.Exception.$fShowExitCode_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Exception.$fShowExitCode_$cshowsPrec_closure+3;
         const GHC.IO.Exception.$fExceptionExitCode_$cshow_closure+1;
         const GHC.IO.Exception.$fShowExitCode_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.453624933 UTC

[section ""data" . GHC.IO.Exception.$fReadExitCode_lexeme1_closure" {
     GHC.IO.Exception.$fReadExitCode_lexeme1_closure:
         const Text.Read.Lex.Ident_con_info;
         const GHC.IO.Exception.$fExceptionExitCode2_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.455251296 UTC

[section ""cstring" . GHC.IO.Exception.$fReadExitCode5_bytes" {
     GHC.IO.Exception.$fReadExitCode5_bytes:
         I8[] [69,120,105,116,70,97,105,108,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.457565441 UTC

[section ""data" . GHC.IO.Exception.$fReadExitCode4_closure" {
     GHC.IO.Exception.$fReadExitCode4_closure:
         const GHC.IO.Exception.$fReadExitCode4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fReadExitCode4_entry() //  [R1]
         { []
         }
     {offset
       c8mPU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mPV; else goto c8mPW;
       c8mPV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mPW: // global
           (_c8mPR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8mPR::I64 == 0) goto c8mPT; else goto c8mPS;
       c8mPT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8mPS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8mPR::I64;
           R2 = GHC.IO.Exception.$fReadExitCode5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fReadExitCode4_info" {
     GHC.IO.Exception.$fReadExitCode4_info:
         const GHC.IO.Exception.$fReadExitCode4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.461161633 UTC

[section ""data" . GHC.IO.Exception.$fReadExitCode_lexeme_closure" {
     GHC.IO.Exception.$fReadExitCode_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const GHC.IO.Exception.$fReadExitCode4_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.462901431 UTC

[section ""data" . GHC.IO.Exception.$fReadExitCode3_closure" {
     GHC.IO.Exception.$fReadExitCode3_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.469431335 UTC

[section ""data" . GHC.IO.Exception.$fReadExitCode2_closure" {
     GHC.IO.Exception.$fReadExitCode2_closure:
         const GHC.IO.Exception.$fReadExitCode2_info;
         const 0;
 },
 sat_s8j8T_entry() //  [R1]
         { []
         }
     {offset
       c8mQf: // global
           R2 = GHC.IO.Exception.ExitSuccess_closure+1;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8j8T_info" {
     sat_s8j8T_info:
         const sat_s8j8T_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s8j93_entry() //  [R1, R2]
         { []
         }
     {offset
       c8mQI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8mQM; else goto c8mQL;
       c8mQM: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8mQL: // global
           _s8j8R::P64 = P64[R1 + 7];
           I64[Hp - 8] = GHC.IO.Exception.ExitFailure_con_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           R1 = _s8j8R::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8j93_info" {
     sat_s8j93_info:
         const sat_s8j93_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s8j94_entry() //  [R1, R2]
         { []
         }
     {offset
       c8mQN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8mQR; else goto c8mQQ;
       c8mQR: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8mQQ: // global
           _s8j8R::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_s8j93_info;
           P64[Hp] = _s8j8R::P64;
           R4 = Hp - 7;
           R3 = GHC.IO.Exception.$fReadExitCode3_closure+1;
           R2 = GHC.Read.$fReadInt2_closure+1;
           call GHC.Read.$fReadInt_$sreadNumber_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8j94_info" {
     sat_s8j94_info:
         const sat_s8j94_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const S8ji8_srt+440;
 },
 sat_s8j97_entry() //  [R1]
         { []
         }
     {offset
       c8mQS: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8mQT; else goto c8mQU;
       c8mQT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mQU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c8mQo_info;
           _s8j8R::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s8j8R::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u8mR7; else goto c8mQp;
       u8mR7: // global
           call _c8mQo(R1) args: 0, res: 0, upd: 0;
       c8mQp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8j97_info" {
     sat_s8j97_info:
         const sat_s8j97_entry;
         const 2;
         const 64424509458;
         const S8ji8_srt+440;
 },
 _c8mQo() //  [R1]
         { []
         }
     {offset
       c8mQo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8mQX; else goto c8mQW;
       c8mQX: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c8mQW: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 10)) goto c8mQZ; else goto c8mR3;
       c8mQZ: // global
           Hp = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c8mR3: // global
           I64[Hp - 8] = sat_s8j94_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c8mR0_info;
           R3 = Hp - 7;
           R2 = GHC.IO.Exception.$fReadExitCode_lexeme_closure+4;
           Sp = Sp + 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c8mQo_info" {
     block_c8mQo_info:
         const _c8mQo;
         const 1;
         const 64424509470;
         const S8ji8_srt+440;
 },
 _c8mR0() //  [R1]
         { []
         }
     {offset
       c8mR0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8mR6; else goto c8mR5;
       c8mR6: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c8mR5: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8mR0_info" {
     block_c8mR0_info:
         const _c8mR0;
         const 0;
         const 30;
 },
 GHC.IO.Exception.$fReadExitCode2_entry() //  [R2, R3]
         { []
         }
     {offset
       c8mR9: // global
           _s8j8R::P64 = R3;
           _s8j8Q::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c8mRa; else goto c8mRb;
       c8mRb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8mRd; else goto c8mRc;
       c8mRd: // global
           HpAlloc = 16;
           goto c8mRa;
       c8mRa: // global
           R3 = _s8j8R::P64;
           R2 = _s8j8Q::P64;
           R1 = GHC.IO.Exception.$fReadExitCode2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8mRc: // global
           I64[Hp - 8] = sat_s8j8T_info;
           P64[Hp] = _s8j8R::P64;
           I64[Sp - 24] = block_c8mQi_info;
           R3 = Hp - 7;
           R2 = GHC.IO.Exception.$fReadExitCode_lexeme1_closure+4;
           P64[Sp - 16] = _s8j8Q::P64;
           P64[Sp - 8] = _s8j8R::P64;
           Sp = Sp - 24;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fReadExitCode2_info" {
     GHC.IO.Exception.$fReadExitCode2_info:
         const GHC.IO.Exception.$fReadExitCode2_entry;
         const 0;
         const 545460846606;
         const 8589934607;
         const S8ji8_srt+440;
 },
 _c8mQi() //  [R1]
         { []
         }
     {offset
       c8mQi: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8mRg; else goto c8mRf;
       c8mRg: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8mRf: // global
           I64[Hp - 40] = sat_s8j97_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R3 = Hp - 40;
           R2 = Hp - 6;
           Sp = Sp + 24;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mQi_info" {
     block_c8mQi_info:
         const _c8mQi;
         const 2;
         const 133143986206;
         const S8ji8_srt+440;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.485014451 UTC

[section ""data" . GHC.IO.Exception.$fReadExitCode1_closure" {
     GHC.IO.Exception.$fReadExitCode1_closure:
         const GHC.IO.Exception.$fReadExitCode1_info;
         const 0;
 },
 GHC.IO.Exception.$fReadExitCode1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8mRS: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Exception.$fReadExitCode2_closure+2;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fReadExitCode1_info" {
     GHC.IO.Exception.$fReadExitCode1_info:
         const GHC.IO.Exception.$fReadExitCode1_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S8ji8_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.489144595 UTC

[section ""data" . GHC.IO.Exception.$fReadExitCode_$creadsPrec_closure" {
     GHC.IO.Exception.$fReadExitCode_$creadsPrec_closure:
         const GHC.IO.Exception.$fReadExitCode_$creadsPrec_info;
         const 0;
 },
 sat_s8j99_entry() //  [R1]
         { []
         }
     {offset
       c8mS7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mS8; else goto c8mS9;
       c8mS8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mS9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.IO.Exception.$fReadExitCode2_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8j99_info" {
     sat_s8j99_info:
         const sat_s8j99_entry;
         const 1;
         const 21474836496;
         const S8ji8_srt+480;
 },
 GHC.IO.Exception.$fReadExitCode_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c8mSa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8mSe; else goto c8mSd;
       c8mSe: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Exception.$fReadExitCode_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8mSd: // global
           I64[Hp - 16] = sat_s8j99_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fReadExitCode_$creadsPrec_info" {
     GHC.IO.Exception.$fReadExitCode_$creadsPrec_info:
         const GHC.IO.Exception.$fReadExitCode_$creadsPrec_entry;
         const 0;
         const 55834574862;
         const 4294967301;
         const S8ji8_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.494874708 UTC

[section ""data" . GHC.IO.Exception.$fReadExitCode_$creadListPrec_closure" {
     GHC.IO.Exception.$fReadExitCode_$creadListPrec_closure:
         const GHC.IO.Exception.$fReadExitCode_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fReadExitCode_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       c8mSt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mSu; else goto c8mSv;
       c8mSu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mSv: // global
           (_c8mSq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8mSq::I64 == 0) goto c8mSs; else goto c8mSr;
       c8mSs: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8mSr: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8mSq::I64;
           R2 = GHC.IO.Exception.$fReadExitCode1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fReadExitCode_$creadListPrec_info" {
     GHC.IO.Exception.$fReadExitCode_$creadListPrec_info:
         const GHC.IO.Exception.$fReadExitCode_$creadListPrec_entry;
         const 0;
         const 12884901909;
         const S8ji8_srt+512;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.499027937 UTC

[section ""data" . GHC.IO.Exception.$fReadExitCode6_closure" {
     GHC.IO.Exception.$fReadExitCode6_closure:
         const GHC.IO.Exception.$fReadExitCode6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fReadExitCode6_entry() //  [R1]
         { []
         }
     {offset
       c8mSJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mSK; else goto c8mSL;
       c8mSK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8mSL: // global
           (_c8mSG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8mSG::I64 == 0) goto c8mSI; else goto c8mSH;
       c8mSI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8mSH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8mSG::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure;
           R1 = GHC.IO.Exception.$fReadExitCode_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fReadExitCode6_info" {
     GHC.IO.Exception.$fReadExitCode6_info:
         const GHC.IO.Exception.$fReadExitCode6_entry;
         const 0;
         const 4294967317;
         const S8ji8_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.50327489 UTC

[section ""data" . GHC.IO.Exception.$fReadExitCode_$creadList_closure" {
     GHC.IO.Exception.$fReadExitCode_$creadList_closure:
         const GHC.IO.Exception.$fReadExitCode_$creadList_info;
         const 0;
 },
 GHC.IO.Exception.$fReadExitCode_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c8mSX: // global
           R3 = R2;
           R2 = GHC.IO.Exception.$fReadExitCode6_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fReadExitCode_$creadList_info" {
     GHC.IO.Exception.$fReadExitCode_$creadList_info:
         const GHC.IO.Exception.$fReadExitCode_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S8ji8_srt+536;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.507114274 UTC

[section ""data" . GHC.IO.Exception.$fReadExitCode_closure" {
     GHC.IO.Exception.$fReadExitCode_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.IO.Exception.$fReadExitCode_$creadsPrec_closure+1;
         const GHC.IO.Exception.$fReadExitCode_$creadList_closure+1;
         const GHC.IO.Exception.$fReadExitCode1_closure+2;
         const GHC.IO.Exception.$fReadExitCode_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.510695977 UTC

[section ""data" . GHC.IO.Exception.$fOrdExitCode_$c<_closure" {
     GHC.IO.Exception.$fOrdExitCode_$c<_closure:
         const GHC.IO.Exception.$fOrdExitCode_$c<_info;
 },
 GHC.IO.Exception.$fOrdExitCode_$c<_entry() //  [R2, R3]
         { []
         }
     {offset
       c8mTg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mTh; else goto c8mTi;
       c8mTh: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fOrdExitCode_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8mTi: // global
           I64[Sp - 16] = block_c8mT9_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8mTT; else goto c8mTa;
       u8mTT: // global
           call _c8mT9(R1) args: 0, res: 0, upd: 0;
       c8mTa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdExitCode_$c<_info" {
     GHC.IO.Exception.$fOrdExitCode_$c<_info:
         const GHC.IO.Exception.$fOrdExitCode_$c<_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8mT9() //  [R1]
         { []
         }
     {offset
       c8mT9: // global
           _s8j9b::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8mTd; else goto c8mTe;
       c8mTd: // global
           I64[Sp + 8] = block_c8mTl_info;
           R1 = _s8j9b::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8mTR; else goto c8mTn;
       u8mTR: // global
           call _c8mTl(R1) args: 0, res: 0, upd: 0;
       c8mTn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8mTe: // global
           I64[Sp] = block_c8mTA_info;
           _s8j9f::P64 = P64[R1 + 6];
           R1 = _s8j9b::P64;
           P64[Sp + 8] = _s8j9f::P64;
           if (R1 & 7 != 0) goto u8mTS; else goto c8mTC;
       u8mTS: // global
           call _c8mTA(R1) args: 0, res: 0, upd: 0;
       c8mTC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mT9_info" {
     block_c8mT9_info:
         const _c8mT9;
         const 1;
         const 30;
 },
 _c8mTl() //  [R1]
         { []
         }
     {offset
       c8mTl: // global
           if (R1 & 7 == 1) goto u8mTQ; else goto c8mTx;
       u8mTQ: // global
           Sp = Sp + 8;
           call _c8mTI() args: 0, res: 0, upd: 0;
       c8mTx: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mTl_info" {
     block_c8mTl_info:
         const _c8mTl;
         const 0;
         const 30;
 },
 _c8mTA() //  [R1]
         { []
         }
     {offset
       c8mTA: // global
           if (R1 & 7 == 1) goto u8mTP; else goto c8mTM;
       u8mTP: // global
           Sp = Sp + 16;
           call _c8mTI() args: 0, res: 0, upd: 0;
       c8mTM: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.ltInt_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mTA_info" {
     block_c8mTA_info:
         const _c8mTA;
         const 1;
         const 30;
 },
 _c8mTI() //  []
         { []
         }
     {offset
       c8mTI: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.521499913 UTC

[section ""data" . GHC.IO.Exception.$fOrdExitCode_$ccompare_closure" {
     GHC.IO.Exception.$fOrdExitCode_$ccompare_closure:
         const GHC.IO.Exception.$fOrdExitCode_$ccompare_info;
 },
 GHC.IO.Exception.$fOrdExitCode_$ccompare_entry() //  [R2, R3]
         { []
         }
     {offset
       c8mUy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mUz; else goto c8mUA;
       c8mUz: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fOrdExitCode_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8mUA: // global
           I64[Sp - 16] = block_c8mUr_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8mV9; else goto c8mUs;
       u8mV9: // global
           call _c8mUr(R1) args: 0, res: 0, upd: 0;
       c8mUs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdExitCode_$ccompare_info" {
     GHC.IO.Exception.$fOrdExitCode_$ccompare_info:
         const GHC.IO.Exception.$fOrdExitCode_$ccompare_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8mUr() //  [R1]
         { []
         }
     {offset
       c8mUr: // global
           _s8j9j::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8mUv; else goto c8mUw;
       c8mUv: // global
           I64[Sp + 8] = block_c8mUD_info;
           R1 = _s8j9j::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8mV7; else goto c8mUF;
       u8mV7: // global
           call _c8mUD(R1) args: 0, res: 0, upd: 0;
       c8mUF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8mUw: // global
           I64[Sp] = block_c8mUS_info;
           _s8j9n::P64 = P64[R1 + 6];
           R1 = _s8j9j::P64;
           P64[Sp + 8] = _s8j9n::P64;
           if (R1 & 7 != 0) goto u8mV8; else goto c8mUU;
       u8mV8: // global
           call _c8mUS(R1) args: 0, res: 0, upd: 0;
       c8mUU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mUr_info" {
     block_c8mUr_info:
         const _c8mUr;
         const 1;
         const 30;
 },
 _c8mUD() //  [R1]
         { []
         }
     {offset
       c8mUD: // global
           if (R1 & 7 == 1) goto c8mUL; else goto c8mUP;
       c8mUL: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8mUP: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mUD_info" {
     block_c8mUD_info:
         const _c8mUD;
         const 0;
         const 30;
 },
 _c8mUS() //  [R1]
         { []
         }
     {offset
       c8mUS: // global
           if (R1 & 7 == 1) goto c8mV0; else goto c8mV4;
       c8mV0: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8mV4: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.compareInt_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mUS_info" {
     block_c8mUS_info:
         const _c8mUS;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.531785023 UTC

[section ""data" . GHC.IO.Exception.$fEqExitCode_$c==_closure" {
     GHC.IO.Exception.$fEqExitCode_$c==_closure:
         const GHC.IO.Exception.$fEqExitCode_$c==_info;
 },
 GHC.IO.Exception.$fEqExitCode_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c8mVL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mVM; else goto c8mVN;
       c8mVM: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fEqExitCode_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8mVN: // global
           I64[Sp - 16] = block_c8mVE_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8mWo; else goto c8mVF;
       u8mWo: // global
           call _c8mVE(R1) args: 0, res: 0, upd: 0;
       c8mVF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fEqExitCode_$c==_info" {
     GHC.IO.Exception.$fEqExitCode_$c==_info:
         const GHC.IO.Exception.$fEqExitCode_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8mVE() //  [R1]
         { []
         }
     {offset
       c8mVE: // global
           _s8j9r::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8mVI; else goto c8mVJ;
       c8mVI: // global
           I64[Sp + 8] = block_c8mVQ_info;
           R1 = _s8j9r::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8mWm; else goto c8mVS;
       u8mWm: // global
           call _c8mVQ(R1) args: 0, res: 0, upd: 0;
       c8mVS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8mVJ: // global
           I64[Sp] = block_c8mW5_info;
           _s8j9v::P64 = P64[R1 + 6];
           R1 = _s8j9r::P64;
           P64[Sp + 8] = _s8j9v::P64;
           if (R1 & 7 != 0) goto u8mWn; else goto c8mW7;
       u8mWn: // global
           call _c8mW5(R1) args: 0, res: 0, upd: 0;
       c8mW7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mVE_info" {
     block_c8mVE_info:
         const _c8mVE;
         const 1;
         const 30;
 },
 _c8mVQ() //  [R1]
         { []
         }
     {offset
       c8mVQ: // global
           if (R1 & 7 == 1) goto c8mVY; else goto u8mWl;
       c8mVY: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u8mWl: // global
           Sp = Sp + 8;
           call _c8mWd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8mVQ_info" {
     block_c8mVQ_info:
         const _c8mVQ;
         const 0;
         const 30;
 },
 _c8mW5() //  [R1]
         { []
         }
     {offset
       c8mW5: // global
           if (R1 & 7 == 1) goto u8mWk; else goto c8mWh;
       u8mWk: // global
           Sp = Sp + 16;
           call _c8mWd() args: 0, res: 0, upd: 0;
       c8mWh: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.eqInt_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mW5_info" {
     block_c8mW5_info:
         const _c8mW5;
         const 1;
         const 30;
 },
 _c8mWd() //  []
         { []
         }
     {offset
       c8mWd: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.543867674 UTC

[section ""data" . GHC.IO.Exception.$fEqExitCode_$c/=_closure" {
     GHC.IO.Exception.$fEqExitCode_$c/=_closure:
         const GHC.IO.Exception.$fEqExitCode_$c/=_info;
 },
 GHC.IO.Exception.$fEqExitCode_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8mX3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mX4; else goto c8mX5;
       c8mX4: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fEqExitCode_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8mX5: // global
           I64[Sp - 16] = block_c8mWW_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8mY0; else goto c8mWX;
       u8mY0: // global
           call _c8mWW(R1) args: 0, res: 0, upd: 0;
       c8mWX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fEqExitCode_$c/=_info" {
     GHC.IO.Exception.$fEqExitCode_$c/=_info:
         const GHC.IO.Exception.$fEqExitCode_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8mWW() //  [R1]
         { []
         }
     {offset
       c8mWW: // global
           _s8j9z::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8mX0; else goto c8mX1;
       c8mX0: // global
           I64[Sp + 8] = block_c8mX8_info;
           R1 = _s8j9z::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8mXY; else goto c8mXa;
       u8mXY: // global
           call _c8mX8(R1) args: 0, res: 0, upd: 0;
       c8mXa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8mX1: // global
           I64[Sp] = block_c8mXn_info;
           _s8j9D::P64 = P64[R1 + 6];
           R1 = _s8j9z::P64;
           P64[Sp + 8] = _s8j9D::P64;
           if (R1 & 7 != 0) goto u8mXZ; else goto c8mXp;
       u8mXZ: // global
           call _c8mXn(R1) args: 0, res: 0, upd: 0;
       c8mXp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mWW_info" {
     block_c8mWW_info:
         const _c8mWW;
         const 1;
         const 30;
 },
 _c8mX8() //  [R1]
         { []
         }
     {offset
       c8mX8: // global
           if (R1 & 7 == 1) goto u8mXW; else goto u8mXX;
       u8mXW: // global
           Sp = Sp + 8;
           call _c8mXQ() args: 0, res: 0, upd: 0;
       u8mXX: // global
           Sp = Sp + 8;
           call _c8mXP() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8mX8_info" {
     block_c8mX8_info:
         const _c8mX8;
         const 0;
         const 30;
 },
 _c8mXn() //  [R1]
         { []
         }
     {offset
       c8mXn: // global
           if (R1 & 7 == 1) goto u8mXT; else goto c8mXF;
       u8mXT: // global
           Sp = Sp + 16;
           call _c8mXP() args: 0, res: 0, upd: 0;
       c8mXF: // global
           I64[Sp] = block_c8mXy_info;
           _s8j9F::P64 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8j9F::P64;
           if (R1 & 7 != 0) goto u8mY3; else goto c8mXz;
       u8mY3: // global
           call _c8mXy(R1) args: 0, res: 0, upd: 0;
       c8mXz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mXn_info" {
     block_c8mXn_info:
         const _c8mXn;
         const 1;
         const 30;
 },
 _c8mXy() //  [R1]
         { []
         }
     {offset
       c8mXy: // global
           I64[Sp] = block_c8mXD_info;
           _s8j9H::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8j9H::I64;
           if (R1 & 7 != 0) goto u8mY5; else goto c8mXH;
       u8mY5: // global
           call _c8mXD(R1) args: 0, res: 0, upd: 0;
       c8mXH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mXy_info" {
     block_c8mXy_info:
         const _c8mXy;
         const 1;
         const 30;
 },
 _c8mXD() //  [R1]
         { []
         }
     {offset
       c8mXD: // global
           if (I64[Sp + 8] == I64[R1 + 7]) goto u8mXU; else goto u8mXV;
       u8mXU: // global
           Sp = Sp + 16;
           call _c8mXQ() args: 0, res: 0, upd: 0;
       u8mXV: // global
           Sp = Sp + 16;
           call _c8mXP() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8mXD_info" {
     block_c8mXD_info:
         const _c8mXD;
         const 65;
         const 30;
 },
 _c8mXQ() //  []
         { []
         }
     {offset
       c8mXQ: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8mXP() //  []
         { []
         }
     {offset
       c8mXP: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.556869665 UTC

[section ""data" . GHC.IO.Exception.$fEqExitCode_closure" {
     GHC.IO.Exception.$fEqExitCode_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Exception.$fEqExitCode_$c==_closure+2;
         const GHC.IO.Exception.$fEqExitCode_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.561113023 UTC

[section ""data" . GHC.IO.Exception.$fOrdExitCode_$c<=_closure" {
     GHC.IO.Exception.$fOrdExitCode_$c<=_closure:
         const GHC.IO.Exception.$fOrdExitCode_$c<=_info;
 },
 GHC.IO.Exception.$fOrdExitCode_$c<=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8mYW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8mYX; else goto c8mYY;
       c8mYX: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fOrdExitCode_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8mYY: // global
           I64[Sp - 16] = block_c8mYP_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8mZT; else goto c8mYQ;
       u8mZT: // global
           call _c8mYP(R1) args: 0, res: 0, upd: 0;
       c8mYQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdExitCode_$c<=_info" {
     GHC.IO.Exception.$fOrdExitCode_$c<=_info:
         const GHC.IO.Exception.$fOrdExitCode_$c<=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8mYP() //  [R1]
         { []
         }
     {offset
       c8mYP: // global
           _s8j9L::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8mYT; else goto c8mYU;
       c8mYT: // global
           I64[Sp + 8] = block_c8mZ1_info;
           R1 = _s8j9L::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8mZR; else goto c8mZ3;
       u8mZR: // global
           call _c8mZ1(R1) args: 0, res: 0, upd: 0;
       c8mZ3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8mYU: // global
           I64[Sp] = block_c8mZg_info;
           _s8j9Q::P64 = P64[R1 + 6];
           R1 = _s8j9L::P64;
           P64[Sp + 8] = _s8j9Q::P64;
           if (R1 & 7 != 0) goto u8mZS; else goto c8mZi;
       u8mZS: // global
           call _c8mZg(R1) args: 0, res: 0, upd: 0;
       c8mZi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mYP_info" {
     block_c8mYP_info:
         const _c8mYP;
         const 1;
         const 30;
 },
 _c8mZ1() //  [R1]
         { []
         }
     {offset
       c8mZ1: // global
           if (R1 & 7 == 1) goto u8mZP; else goto u8mZQ;
       u8mZP: // global
           Sp = Sp + 8;
           call _c8mZI() args: 0, res: 0, upd: 0;
       u8mZQ: // global
           Sp = Sp + 8;
           call _c8mZJ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8mZ1_info" {
     block_c8mZ1_info:
         const _c8mZ1;
         const 0;
         const 30;
 },
 _c8mZg() //  [R1]
         { []
         }
     {offset
       c8mZg: // global
           if (R1 & 7 == 1) goto u8mZM; else goto c8mZy;
       u8mZM: // global
           Sp = Sp + 16;
           call _c8mZI() args: 0, res: 0, upd: 0;
       c8mZy: // global
           I64[Sp] = block_c8mZr_info;
           _s8j9S::P64 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8j9S::P64;
           if (R1 & 7 != 0) goto u8mZW; else goto c8mZs;
       u8mZW: // global
           call _c8mZr(R1) args: 0, res: 0, upd: 0;
       c8mZs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mZg_info" {
     block_c8mZg_info:
         const _c8mZg;
         const 1;
         const 30;
 },
 _c8mZr() //  [R1]
         { []
         }
     {offset
       c8mZr: // global
           I64[Sp] = block_c8mZw_info;
           _s8j9U::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8j9U::I64;
           if (R1 & 7 != 0) goto u8mZY; else goto c8mZA;
       u8mZY: // global
           call _c8mZw(R1) args: 0, res: 0, upd: 0;
       c8mZA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8mZr_info" {
     block_c8mZr_info:
         const _c8mZr;
         const 1;
         const 30;
 },
 _c8mZw() //  [R1]
         { []
         }
     {offset
       c8mZw: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            I64[R1 + 7])) goto u8mZO; else goto u8mZN;
       u8mZO: // global
           Sp = Sp + 16;
           call _c8mZI() args: 0, res: 0, upd: 0;
       u8mZN: // global
           Sp = Sp + 16;
           call _c8mZJ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8mZw_info" {
     block_c8mZw_info:
         const _c8mZw;
         const 65;
         const 30;
 },
 _c8mZI() //  []
         { []
         }
     {offset
       c8mZI: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8mZJ() //  []
         { []
         }
     {offset
       c8mZJ: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.576115711 UTC

[section ""data" . GHC.IO.Exception.$fOrdExitCode_$cmax_closure" {
     GHC.IO.Exception.$fOrdExitCode_$cmax_closure:
         const GHC.IO.Exception.$fOrdExitCode_$cmax_info;
 },
 GHC.IO.Exception.$fOrdExitCode_$cmax_entry() //  [R2, R3]
         { []
         }
     {offset
       c8n0O: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8n0P; else goto c8n0Q;
       c8n0P: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fOrdExitCode_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8n0Q: // global
           I64[Sp - 16] = block_c8n0H_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8n1u; else goto c8n0I;
       u8n1u: // global
           call _c8n0H(R1) args: 0, res: 0, upd: 0;
       c8n0I: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdExitCode_$cmax_info" {
     GHC.IO.Exception.$fOrdExitCode_$cmax_info:
         const GHC.IO.Exception.$fOrdExitCode_$cmax_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8n0H() //  [R1]
         { []
         }
     {offset
       c8n0H: // global
           _s8j9Y::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8n0L; else goto c8n0M;
       c8n0L: // global
           R1 = _s8j9Y::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8n0M: // global
           I64[Sp - 8] = block_c8n0W_info;
           _s8ja0::P64 = R1;
           _s8ja1::P64 = P64[R1 + 6];
           R1 = _s8j9Y::P64;
           P64[Sp] = _s8ja1::P64;
           P64[Sp + 8] = _s8ja0::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8n1t; else goto c8n0Y;
       u8n1t: // global
           call _c8n0W(R1) args: 0, res: 0, upd: 0;
       c8n0Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8n0H_info" {
     block_c8n0H_info:
         const _c8n0H;
         const 1;
         const 30;
 },
 _c8n0W() //  [R1]
         { []
         }
     {offset
       c8n0W: // global
           if (R1 & 7 == 1) goto u8n1r; else goto c8n1e;
       u8n1r: // global
           Sp = Sp + 16;
           call _c8n1o() args: 0, res: 0, upd: 0;
       c8n1e: // global
           I64[Sp - 8] = block_c8n17_info;
           _s8ja2::P64 = R1;
           _s8ja3::P64 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           P64[Sp] = _s8ja3::P64;
           P64[Sp + 8] = _s8ja2::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8n1v; else goto c8n18;
       u8n1v: // global
           call _c8n17(R1) args: 0, res: 0, upd: 0;
       c8n18: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8n0W_info" {
     block_c8n0W_info:
         const _c8n0W;
         const 2;
         const 30;
 },
 _c8n17() //  [R1]
         { []
         }
     {offset
       c8n17: // global
           I64[Sp] = block_c8n1c_info;
           _s8ja5::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8ja5::I64;
           if (R1 & 7 != 0) goto u8n1x; else goto c8n1g;
       u8n1x: // global
           call _c8n1c(R1) args: 0, res: 0, upd: 0;
       c8n1g: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8n17_info" {
     block_c8n17_info:
         const _c8n17;
         const 3;
         const 30;
 },
 _c8n1c() //  [R1]
         { []
         }
     {offset
       c8n1c: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            I64[R1 + 7])) goto u8n1s; else goto c8n1p;
       u8n1s: // global
           Sp = Sp + 24;
           call _c8n1o() args: 0, res: 0, upd: 0;
       c8n1p: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8n1c_info" {
     block_c8n1c_info:
         const _c8n1c;
         const 67;
         const 30;
 },
 _c8n1o() //  []
         { []
         }
     {offset
       c8n1o: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.590185073 UTC

[section ""data" . GHC.IO.Exception.$fOrdExitCode_$c>=_closure" {
     GHC.IO.Exception.$fOrdExitCode_$c>=_closure:
         const GHC.IO.Exception.$fOrdExitCode_$c>=_info;
 },
 GHC.IO.Exception.$fOrdExitCode_$c>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8n2i: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8n2j; else goto c8n2k;
       c8n2j: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fOrdExitCode_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8n2k: // global
           I64[Sp - 16] = block_c8n2b_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8n3f; else goto c8n2c;
       u8n3f: // global
           call _c8n2b(R1) args: 0, res: 0, upd: 0;
       c8n2c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdExitCode_$c>=_info" {
     GHC.IO.Exception.$fOrdExitCode_$c>=_info:
         const GHC.IO.Exception.$fOrdExitCode_$c>=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8n2b() //  [R1]
         { []
         }
     {offset
       c8n2b: // global
           _s8jaa::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8n2f; else goto c8n2g;
       c8n2f: // global
           I64[Sp + 8] = block_c8n2n_info;
           R1 = _s8jaa::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8n3d; else goto c8n2p;
       u8n3d: // global
           call _c8n2n(R1) args: 0, res: 0, upd: 0;
       c8n2p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8n2g: // global
           I64[Sp] = block_c8n2C_info;
           _s8jae::P64 = P64[R1 + 6];
           R1 = _s8jaa::P64;
           P64[Sp + 8] = _s8jae::P64;
           if (R1 & 7 != 0) goto u8n3e; else goto c8n2E;
       u8n3e: // global
           call _c8n2C(R1) args: 0, res: 0, upd: 0;
       c8n2E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8n2b_info" {
     block_c8n2b_info:
         const _c8n2b;
         const 1;
         const 30;
 },
 _c8n2n() //  [R1]
         { []
         }
     {offset
       c8n2n: // global
           if (R1 & 7 == 1) goto u8n3b; else goto u8n3c;
       u8n3b: // global
           Sp = Sp + 8;
           call _c8n34() args: 0, res: 0, upd: 0;
       u8n3c: // global
           Sp = Sp + 8;
           call _c8n35() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8n2n_info" {
     block_c8n2n_info:
         const _c8n2n;
         const 0;
         const 30;
 },
 _c8n2C() //  [R1]
         { []
         }
     {offset
       c8n2C: // global
           if (R1 & 7 == 1) goto u8n38; else goto c8n2U;
       u8n38: // global
           Sp = Sp + 16;
           call _c8n34() args: 0, res: 0, upd: 0;
       c8n2U: // global
           I64[Sp] = block_c8n2N_info;
           _s8jag::P64 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8jag::P64;
           if (R1 & 7 != 0) goto u8n3i; else goto c8n2O;
       u8n3i: // global
           call _c8n2N(R1) args: 0, res: 0, upd: 0;
       c8n2O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8n2C_info" {
     block_c8n2C_info:
         const _c8n2C;
         const 1;
         const 30;
 },
 _c8n2N() //  [R1]
         { []
         }
     {offset
       c8n2N: // global
           I64[Sp] = block_c8n2S_info;
           _s8jai::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8jai::I64;
           if (R1 & 7 != 0) goto u8n3k; else goto c8n2W;
       u8n3k: // global
           call _c8n2S(R1) args: 0, res: 0, upd: 0;
       c8n2W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8n2N_info" {
     block_c8n2N_info:
         const _c8n2N;
         const 1;
         const 30;
 },
 _c8n2S() //  [R1]
         { []
         }
     {offset
       c8n2S: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            I64[R1 + 7])) goto u8n3a; else goto u8n39;
       u8n3a: // global
           Sp = Sp + 16;
           call _c8n34() args: 0, res: 0, upd: 0;
       u8n39: // global
           Sp = Sp + 16;
           call _c8n35() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8n2S_info" {
     block_c8n2S_info:
         const _c8n2S;
         const 65;
         const 30;
 },
 _c8n34() //  []
         { []
         }
     {offset
       c8n34: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8n35() //  []
         { []
         }
     {offset
       c8n35: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.603676006 UTC

[section ""data" . GHC.IO.Exception.$fOrdExitCode_$c>_closure" {
     GHC.IO.Exception.$fOrdExitCode_$c>_closure:
         const GHC.IO.Exception.$fOrdExitCode_$c>_info;
 },
 GHC.IO.Exception.$fOrdExitCode_$c>_entry() //  [R2, R3]
         { []
         }
     {offset
       c8n43: // global
           _s8jan::P64 = R3;
           R3 = R2;
           R2 = _s8jan::P64;
           call GHC.IO.Exception.$fOrdExitCode_$c<_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdExitCode_$c>_info" {
     GHC.IO.Exception.$fOrdExitCode_$c>_info:
         const GHC.IO.Exception.$fOrdExitCode_$c>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.609041301 UTC

[section ""data" . GHC.IO.Exception.$fOrdExitCode_$cmin_closure" {
     GHC.IO.Exception.$fOrdExitCode_$cmin_closure:
         const GHC.IO.Exception.$fOrdExitCode_$cmin_info;
 },
 GHC.IO.Exception.$fOrdExitCode_$cmin_entry() //  [R2, R3]
         { []
         }
     {offset
       c8n4l: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8n4m; else goto c8n4n;
       c8n4m: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fOrdExitCode_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8n4n: // global
           I64[Sp - 16] = block_c8n4e_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8n56; else goto c8n4f;
       u8n56: // global
           call _c8n4e(R1) args: 0, res: 0, upd: 0;
       c8n4f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdExitCode_$cmin_info" {
     GHC.IO.Exception.$fOrdExitCode_$cmin_info:
         const GHC.IO.Exception.$fOrdExitCode_$cmin_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8n4e() //  [R1]
         { []
         }
     {offset
       c8n4e: // global
           _s8jao::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8n4i; else goto c8n4j;
       c8n4i: // global
           I64[Sp + 8] = block_c8n4q_info;
           R1 = _s8jao::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8n54; else goto c8n4s;
       u8n54: // global
           call _c8n4q() args: 0, res: 0, upd: 0;
       c8n4s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8n4j: // global
           I64[Sp - 8] = block_c8n4z_info;
           _s8jaq::P64 = R1;
           _s8jas::P64 = P64[R1 + 6];
           R1 = _s8jao::P64;
           P64[Sp] = _s8jas::P64;
           P64[Sp + 8] = _s8jaq::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8n55; else goto c8n4B;
       u8n55: // global
           call _c8n4z(R1) args: 0, res: 0, upd: 0;
       c8n4B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8n4e_info" {
     block_c8n4e_info:
         const _c8n4e;
         const 1;
         const 30;
 },
 _c8n4q() //  []
         { []
         }
     {offset
       c8n4q: // global
           R1 = GHC.IO.Exception.ExitSuccess_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8n4q_info" {
     block_c8n4q_info:
         const _c8n4q;
         const 0;
         const 30;
 },
 _c8n4z() //  [R1]
         { []
         }
     {offset
       c8n4z: // global
           if (R1 & 7 == 1) goto c8n4H; else goto c8n4R;
       c8n4H: // global
           R1 = GHC.IO.Exception.ExitSuccess_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8n4R: // global
           I64[Sp - 8] = block_c8n4K_info;
           _s8jat::P64 = R1;
           _s8jau::P64 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           P64[Sp] = _s8jau::P64;
           P64[Sp + 8] = _s8jat::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8n57; else goto c8n4L;
       u8n57: // global
           call _c8n4K(R1) args: 0, res: 0, upd: 0;
       c8n4L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8n4z_info" {
     block_c8n4z_info:
         const _c8n4z;
         const 2;
         const 30;
 },
 _c8n4K() //  [R1]
         { []
         }
     {offset
       c8n4K: // global
           I64[Sp] = block_c8n4P_info;
           _s8jaw::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8jaw::I64;
           if (R1 & 7 != 0) goto u8n58; else goto c8n4T;
       u8n58: // global
           call _c8n4P(R1) args: 0, res: 0, upd: 0;
       c8n4T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8n4K_info" {
     block_c8n4K_info:
         const _c8n4K;
         const 3;
         const 30;
 },
 _c8n4P() //  [R1]
         { []
         }
     {offset
       c8n4P: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            I64[R1 + 7])) goto c8n51; else goto c8n52;
       c8n51: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8n52: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8n4P_info" {
     block_c8n4P_info:
         const _c8n4P;
         const 67;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.621553395 UTC

[section ""data" . GHC.IO.Exception.$fOrdExitCode_closure" {
     GHC.IO.Exception.$fOrdExitCode_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.IO.Exception.$fEqExitCode_closure+1;
         const GHC.IO.Exception.$fOrdExitCode_$ccompare_closure+2;
         const GHC.IO.Exception.$fOrdExitCode_$c<_closure+2;
         const GHC.IO.Exception.$fOrdExitCode_$c<=_closure+2;
         const GHC.IO.Exception.$fOrdExitCode_$c>_closure+2;
         const GHC.IO.Exception.$fOrdExitCode_$c>=_closure+2;
         const GHC.IO.Exception.$fOrdExitCode_$cmax_closure+2;
         const GHC.IO.Exception.$fOrdExitCode_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.625120095 UTC

[section ""data" . GHC.IO.Exception.$fOrdArrayException_$c<_closure" {
     GHC.IO.Exception.$fOrdArrayException_$c<_closure:
         const GHC.IO.Exception.$fOrdArrayException_$c<_info;
 },
 GHC.IO.Exception.$fOrdArrayException_$c<_entry() //  [R2, R3]
         { []
         }
     {offset
       c8n5V: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8n5W; else goto c8n5X;
       c8n5W: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fOrdArrayException_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8n5X: // global
           I64[Sp - 16] = block_c8n5O_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8n6w; else goto c8n5P;
       u8n6w: // global
           call _c8n5O(R1) args: 0, res: 0, upd: 0;
       c8n5P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdArrayException_$c<_info" {
     GHC.IO.Exception.$fOrdArrayException_$c<_info:
         const GHC.IO.Exception.$fOrdArrayException_$c<_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8n5O() //  [R1]
         { []
         }
     {offset
       c8n5O: // global
           _s8jaB::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8n5S; else goto c8n5T;
       c8n5S: // global
           I64[Sp] = block_c8n60_info;
           _s8jaD::P64 = P64[R1 + 7];
           R1 = _s8jaB::P64;
           P64[Sp + 8] = _s8jaD::P64;
           if (R1 & 7 != 0) goto u8n6u; else goto c8n62;
       u8n6u: // global
           call _c8n60(R1) args: 0, res: 0, upd: 0;
       c8n62: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8n5T: // global
           I64[Sp] = block_c8n6f_info;
           _s8jaH::P64 = P64[R1 + 6];
           R1 = _s8jaB::P64;
           P64[Sp + 8] = _s8jaH::P64;
           if (R1 & 7 != 0) goto u8n6v; else goto c8n6h;
       u8n6v: // global
           call _c8n6f(R1) args: 0, res: 0, upd: 0;
       c8n6h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8n5O_info" {
     block_c8n5O_info:
         const _c8n5O;
         const 1;
         const 30;
 },
 _c8n60() //  [R1]
         { []
         }
     {offset
       c8n60: // global
           if (R1 & 7 == 1) goto c8n68; else goto c8n6c;
       c8n68: // global
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.$fOrd[]_$s$c<1_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
       c8n6c: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8n60_info" {
     block_c8n60_info:
         const _c8n60;
         const 1;
         const 30;
 },
 _c8n6f() //  [R1]
         { []
         }
     {offset
       c8n6f: // global
           if (R1 & 7 == 1) goto c8n6n; else goto c8n6r;
       c8n6n: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8n6r: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.$fOrd[]_$s$c<1_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8n6f_info" {
     block_c8n6f_info:
         const _c8n6f;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.635223494 UTC

[section ""data" . GHC.IO.Exception.$fOrdArrayException_$ccompare_closure" {
     GHC.IO.Exception.$fOrdArrayException_$ccompare_closure:
         const GHC.IO.Exception.$fOrdArrayException_$ccompare_info;
 },
 GHC.IO.Exception.$fOrdArrayException_$ccompare_entry() //  [R2, R3]
         { []
         }
     {offset
       c8n77: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8n78; else goto c8n79;
       c8n78: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fOrdArrayException_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8n79: // global
           I64[Sp - 16] = block_c8n70_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8n7I; else goto c8n71;
       u8n7I: // global
           call _c8n70(R1) args: 0, res: 0, upd: 0;
       c8n71: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdArrayException_$ccompare_info" {
     GHC.IO.Exception.$fOrdArrayException_$ccompare_info:
         const GHC.IO.Exception.$fOrdArrayException_$ccompare_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8n70() //  [R1]
         { []
         }
     {offset
       c8n70: // global
           _s8jaM::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8n74; else goto c8n75;
       c8n74: // global
           I64[Sp] = block_c8n7c_info;
           _s8jaO::P64 = P64[R1 + 7];
           R1 = _s8jaM::P64;
           P64[Sp + 8] = _s8jaO::P64;
           if (R1 & 7 != 0) goto u8n7G; else goto c8n7e;
       u8n7G: // global
           call _c8n7c(R1) args: 0, res: 0, upd: 0;
       c8n7e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8n75: // global
           I64[Sp] = block_c8n7r_info;
           _s8jaS::P64 = P64[R1 + 6];
           R1 = _s8jaM::P64;
           P64[Sp + 8] = _s8jaS::P64;
           if (R1 & 7 != 0) goto u8n7H; else goto c8n7t;
       u8n7H: // global
           call _c8n7r(R1) args: 0, res: 0, upd: 0;
       c8n7t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8n70_info" {
     block_c8n70_info:
         const _c8n70;
         const 1;
         const 30;
 },
 _c8n7c() //  [R1]
         { []
         }
     {offset
       c8n7c: // global
           if (R1 & 7 == 1) goto c8n7k; else goto c8n7o;
       c8n7k: // global
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c8n7o: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8n7c_info" {
     block_c8n7c_info:
         const _c8n7c;
         const 1;
         const 30;
 },
 _c8n7r() //  [R1]
         { []
         }
     {offset
       c8n7r: // global
           if (R1 & 7 == 1) goto c8n7z; else goto c8n7D;
       c8n7z: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8n7D: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8n7r_info" {
     block_c8n7r_info:
         const _c8n7r;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.645523003 UTC

[section ""data" . GHC.IO.Exception.$fEqArrayException_$c==_closure" {
     GHC.IO.Exception.$fEqArrayException_$c==_closure:
         const GHC.IO.Exception.$fEqArrayException_$c==_info;
 },
 GHC.IO.Exception.$fEqArrayException_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c8n8j: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8n8k; else goto c8n8l;
       c8n8k: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fEqArrayException_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8n8l: // global
           I64[Sp - 16] = block_c8n8c_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8n8W; else goto c8n8d;
       u8n8W: // global
           call _c8n8c(R1) args: 0, res: 0, upd: 0;
       c8n8d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fEqArrayException_$c==_info" {
     GHC.IO.Exception.$fEqArrayException_$c==_info:
         const GHC.IO.Exception.$fEqArrayException_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8n8c() //  [R1]
         { []
         }
     {offset
       c8n8c: // global
           _s8jaX::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8n8g; else goto c8n8h;
       c8n8g: // global
           I64[Sp] = block_c8n8o_info;
           _s8jaZ::P64 = P64[R1 + 7];
           R1 = _s8jaX::P64;
           P64[Sp + 8] = _s8jaZ::P64;
           if (R1 & 7 != 0) goto u8n8U; else goto c8n8q;
       u8n8U: // global
           call _c8n8o(R1) args: 0, res: 0, upd: 0;
       c8n8q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8n8h: // global
           I64[Sp] = block_c8n8D_info;
           _s8jb3::P64 = P64[R1 + 6];
           R1 = _s8jaX::P64;
           P64[Sp + 8] = _s8jb3::P64;
           if (R1 & 7 != 0) goto u8n8V; else goto c8n8F;
       u8n8V: // global
           call _c8n8D(R1) args: 0, res: 0, upd: 0;
       c8n8F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8n8c_info" {
     block_c8n8c_info:
         const _c8n8c;
         const 1;
         const 30;
 },
 _c8n8o() //  [R1]
         { []
         }
     {offset
       c8n8o: // global
           if (R1 & 7 == 1) goto c8n8w; else goto u8n8T;
       c8n8w: // global
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 0, upd: 8;
       u8n8T: // global
           Sp = Sp + 16;
           call _c8n8L() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8n8o_info" {
     block_c8n8o_info:
         const _c8n8o;
         const 1;
         const 30;
 },
 _c8n8D() //  [R1]
         { []
         }
     {offset
       c8n8D: // global
           if (R1 & 7 == 1) goto u8n8S; else goto c8n8P;
       u8n8S: // global
           Sp = Sp + 16;
           call _c8n8L() args: 0, res: 0, upd: 0;
       c8n8P: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8n8D_info" {
     block_c8n8D_info:
         const _c8n8D;
         const 1;
         const 30;
 },
 _c8n8L() //  []
         { []
         }
     {offset
       c8n8L: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.656765526 UTC

[section ""data" . GHC.IO.Exception.$fEqArrayException_$c/=_closure" {
     GHC.IO.Exception.$fEqArrayException_$c/=_closure:
         const GHC.IO.Exception.$fEqArrayException_$c/=_info;
 },
 GHC.IO.Exception.$fEqArrayException_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8n9A: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8n9B; else goto c8n9C;
       c8n9B: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fEqArrayException_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8n9C: // global
           I64[Sp - 16] = block_c8n9t_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8naF; else goto c8n9u;
       u8naF: // global
           call _c8n9t(R1) args: 0, res: 0, upd: 0;
       c8n9u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fEqArrayException_$c/=_info" {
     GHC.IO.Exception.$fEqArrayException_$c/=_info:
         const GHC.IO.Exception.$fEqArrayException_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8n9t() //  [R1]
         { []
         }
     {offset
       c8n9t: // global
           _s8jb8::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8n9x; else goto c8n9y;
       c8n9x: // global
           I64[Sp] = block_c8n9F_info;
           _s8jba::P64 = P64[R1 + 7];
           R1 = _s8jb8::P64;
           P64[Sp + 8] = _s8jba::P64;
           if (R1 & 7 != 0) goto u8naD; else goto c8n9H;
       u8naD: // global
           call _c8n9F(R1) args: 0, res: 0, upd: 0;
       c8n9H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8n9y: // global
           I64[Sp] = block_c8na5_info;
           _s8jbf::P64 = P64[R1 + 6];
           R1 = _s8jb8::P64;
           P64[Sp + 8] = _s8jbf::P64;
           if (R1 & 7 != 0) goto u8naE; else goto c8na7;
       u8naE: // global
           call _c8na5(R1) args: 0, res: 0, upd: 0;
       c8na7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8n9t_info" {
     block_c8n9t_info:
         const _c8n9t;
         const 1;
         const 30;
 },
 _c8n9F() //  [R1]
         { []
         }
     {offset
       c8n9F: // global
           if (R1 & 7 == 1) goto c8n9O; else goto u8naA;
       c8n9O: // global
           _s8jba::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8n9L_info;
           R3 = P64[R1 + 7];
           R2 = _s8jba::P64;
           Sp = Sp + 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       u8naA: // global
           Sp = Sp + 16;
           call _c8nao() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8n9F_info" {
     block_c8n9F_info:
         const _c8n9F;
         const 1;
         const 30;
 },
 _c8n9L() //  [R1]
         { []
         }
     {offset
       c8n9L: // global
           if (R1 & 7 == 1) goto u8naB; else goto u8naC;
       u8naB: // global
           Sp = Sp + 8;
           call _c8nao() args: 0, res: 0, upd: 0;
       u8naC: // global
           Sp = Sp + 8;
           call _c8nas() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8n9L_info" {
     block_c8n9L_info:
         const _c8n9L;
         const 0;
         const 30;
 },
 _c8na5() //  [R1]
         { []
         }
     {offset
       c8na5: // global
           if (R1 & 7 == 1) goto u8nax; else goto c8nai;
       u8nax: // global
           Sp = Sp + 16;
           call _c8nao() args: 0, res: 0, upd: 0;
       c8nai: // global
           _s8jbf::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8nag_info;
           R3 = P64[R1 + 6];
           R2 = _s8jbf::P64;
           Sp = Sp + 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8na5_info" {
     block_c8na5_info:
         const _c8na5;
         const 1;
         const 30;
 },
 _c8nag() //  [R1]
         { []
         }
     {offset
       c8nag: // global
           if (R1 & 7 == 1) goto u8nay; else goto u8naz;
       u8nay: // global
           Sp = Sp + 8;
           call _c8nao() args: 0, res: 0, upd: 0;
       u8naz: // global
           Sp = Sp + 8;
           call _c8nas() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nag_info" {
     block_c8nag_info:
         const _c8nag;
         const 0;
         const 30;
 },
 _c8nao() //  []
         { []
         }
     {offset
       c8nao: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8nas() //  []
         { []
         }
     {offset
       c8nas: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.669911878 UTC

[section ""data" . GHC.IO.Exception.$fEqArrayException_closure" {
     GHC.IO.Exception.$fEqArrayException_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Exception.$fEqArrayException_$c==_closure+2;
         const GHC.IO.Exception.$fEqArrayException_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.67399724 UTC

[section ""data" . GHC.IO.Exception.$fOrdArrayException_$c<=_closure" {
     GHC.IO.Exception.$fOrdArrayException_$c<=_closure:
         const GHC.IO.Exception.$fOrdArrayException_$c<=_info;
 },
 GHC.IO.Exception.$fOrdArrayException_$c<=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8nbB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8nbC; else goto c8nbD;
       c8nbC: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fOrdArrayException_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8nbD: // global
           I64[Sp - 16] = block_c8nbu_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8ncG; else goto c8nbv;
       u8ncG: // global
           call _c8nbu(R1) args: 0, res: 0, upd: 0;
       c8nbv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdArrayException_$c<=_info" {
     GHC.IO.Exception.$fOrdArrayException_$c<=_info:
         const GHC.IO.Exception.$fOrdArrayException_$c<=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8nbu() //  [R1]
         { []
         }
     {offset
       c8nbu: // global
           _s8jbk::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8nby; else goto c8nbz;
       c8nby: // global
           I64[Sp] = block_c8nbG_info;
           _s8jbn::P64 = P64[R1 + 7];
           R1 = _s8jbk::P64;
           P64[Sp + 8] = _s8jbn::P64;
           if (R1 & 7 != 0) goto u8ncE; else goto c8nbI;
       u8ncE: // global
           call _c8nbG(R1) args: 0, res: 0, upd: 0;
       c8nbI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8nbz: // global
           I64[Sp] = block_c8nc6_info;
           _s8jbs::P64 = P64[R1 + 6];
           R1 = _s8jbk::P64;
           P64[Sp + 8] = _s8jbs::P64;
           if (R1 & 7 != 0) goto u8ncF; else goto c8nc8;
       u8ncF: // global
           call _c8nc6(R1) args: 0, res: 0, upd: 0;
       c8nc8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nbu_info" {
     block_c8nbu_info:
         const _c8nbu;
         const 1;
         const 30;
 },
 _c8nbG() //  [R1]
         { []
         }
     {offset
       c8nbG: // global
           if (R1 & 7 == 1) goto c8nbP; else goto u8ncB;
       c8nbP: // global
           _s8jbn::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8nbM_info;
           R3 = P64[R1 + 7];
           R2 = _s8jbn::P64;
           Sp = Sp + 8;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
       u8ncB: // global
           Sp = Sp + 16;
           call _c8nct() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nbG_info" {
     block_c8nbG_info:
         const _c8nbG;
         const 1;
         const 30;
 },
 _c8nbM() //  [R1]
         { []
         }
     {offset
       c8nbM: // global
           if (R1 & 7 == 1) goto u8ncC; else goto u8ncD;
       u8ncC: // global
           Sp = Sp + 8;
           call _c8nct() args: 0, res: 0, upd: 0;
       u8ncD: // global
           Sp = Sp + 8;
           call _c8ncp() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nbM_info" {
     block_c8nbM_info:
         const _c8nbM;
         const 0;
         const 30;
 },
 _c8nc6() //  [R1]
         { []
         }
     {offset
       c8nc6: // global
           if (R1 & 7 == 1) goto u8ncy; else goto c8ncj;
       u8ncy: // global
           Sp = Sp + 16;
           call _c8ncp() args: 0, res: 0, upd: 0;
       c8ncj: // global
           _s8jbs::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8nch_info;
           R3 = P64[R1 + 6];
           R2 = _s8jbs::P64;
           Sp = Sp + 8;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nc6_info" {
     block_c8nc6_info:
         const _c8nc6;
         const 1;
         const 30;
 },
 _c8nch() //  [R1]
         { []
         }
     {offset
       c8nch: // global
           if (R1 & 7 == 1) goto u8ncz; else goto u8ncA;
       u8ncz: // global
           Sp = Sp + 8;
           call _c8nct() args: 0, res: 0, upd: 0;
       u8ncA: // global
           Sp = Sp + 8;
           call _c8ncp() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nch_info" {
     block_c8nch_info:
         const _c8nch;
         const 0;
         const 30;
 },
 _c8nct() //  []
         { []
         }
     {offset
       c8nct: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8ncp() //  []
         { []
         }
     {offset
       c8ncp: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.689458148 UTC

[section ""data" . GHC.IO.Exception.$fOrdArrayException_$cmax_closure" {
     GHC.IO.Exception.$fOrdArrayException_$cmax_closure:
         const GHC.IO.Exception.$fOrdArrayException_$cmax_info;
 },
 GHC.IO.Exception.$fOrdArrayException_$cmax_entry() //  [R2, R3]
         { []
         }
     {offset
       c8ndB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8ndC; else goto c8ndD;
       c8ndC: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fOrdArrayException_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8ndD: // global
           I64[Sp - 16] = block_c8ndu_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8neF; else goto c8ndv;
       u8neF: // global
           call _c8ndu(R1) args: 0, res: 0, upd: 0;
       c8ndv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdArrayException_$cmax_info" {
     GHC.IO.Exception.$fOrdArrayException_$cmax_info:
         const GHC.IO.Exception.$fOrdArrayException_$cmax_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8ndu() //  [R1]
         { []
         }
     {offset
       c8ndu: // global
           _s8jbx::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8ndy; else goto c8ndz;
       c8ndy: // global
           I64[Sp - 8] = block_c8ndG_info;
           _s8jbz::P64 = R1;
           _s8jbA::P64 = P64[R1 + 7];
           R1 = _s8jbx::P64;
           P64[Sp] = _s8jbA::P64;
           P64[Sp + 8] = _s8jbz::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8neD; else goto c8ndI;
       u8neD: // global
           call _c8ndG(R1) args: 0, res: 0, upd: 0;
       c8ndI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8ndz: // global
           I64[Sp - 8] = block_c8ne6_info;
           _s8jbz::P64 = R1;
           _s8jbF::P64 = P64[R1 + 6];
           R1 = _s8jbx::P64;
           P64[Sp] = _s8jbF::P64;
           P64[Sp + 8] = _s8jbz::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8neE; else goto c8ne8;
       u8neE: // global
           call _c8ne6(R1) args: 0, res: 0, upd: 0;
       c8ne8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ndu_info" {
     block_c8ndu_info:
         const _c8ndu;
         const 1;
         const 30;
 },
 _c8ndG() //  [R1]
         { []
         }
     {offset
       c8ndG: // global
           if (R1 & 7 == 1) goto c8ndP; else goto u8neA;
       c8ndP: // global
           I64[Sp] = block_c8ndM_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
       u8neA: // global
           P64[Sp + 16] = R1;
           Sp = Sp + 16;
           call _c8ne3() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8ndG_info" {
     block_c8ndG_info:
         const _c8ndG;
         const 2;
         const 30;
 },
 _c8ndM() //  [R1]
         { []
         }
     {offset
       c8ndM: // global
           if (R1 & 7 == 1) goto u8neB; else goto u8neC;
       u8neB: // global
           P64[Sp + 16] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c8ne3() args: 0, res: 0, upd: 0;
       u8neC: // global
           Sp = Sp + 16;
           call _c8nep() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8ndM_info" {
     block_c8ndM_info:
         const _c8ndM;
         const 2;
         const 30;
 },
 _c8ne3() //  []
         { []
         }
     {offset
       c8ne3: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8ne6() //  [R1]
         { []
         }
     {offset
       c8ne6: // global
           if (R1 & 7 == 1) goto u8ney; else goto c8nej;
       u8ney: // global
           Sp = Sp + 16;
           call _c8nep() args: 0, res: 0, upd: 0;
       c8nej: // global
           I64[Sp] = block_c8neh_info;
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ne6_info" {
     block_c8ne6_info:
         const _c8ne6;
         const 2;
         const 30;
 },
 _c8neh() //  [R1]
         { []
         }
     {offset
       c8neh: // global
           if (R1 & 7 == 1) goto c8net; else goto u8nez;
       c8net: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u8nez: // global
           Sp = Sp + 16;
           call _c8nep() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8neh_info" {
     block_c8neh_info:
         const _c8neh;
         const 2;
         const 30;
 },
 _c8nep() //  []
         { []
         }
     {offset
       c8nep: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.705507866 UTC

[section ""data" . GHC.IO.Exception.$fOrdArrayException_$c>=_closure" {
     GHC.IO.Exception.$fOrdArrayException_$c>=_closure:
         const GHC.IO.Exception.$fOrdArrayException_$c>=_info;
 },
 GHC.IO.Exception.$fOrdArrayException_$c>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8nfE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8nfF; else goto c8nfG;
       c8nfF: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fOrdArrayException_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8nfG: // global
           I64[Sp - 16] = block_c8nfx_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8ngJ; else goto c8nfy;
       u8ngJ: // global
           call _c8nfx(R1) args: 0, res: 0, upd: 0;
       c8nfy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdArrayException_$c>=_info" {
     GHC.IO.Exception.$fOrdArrayException_$c>=_info:
         const GHC.IO.Exception.$fOrdArrayException_$c>=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8nfx() //  [R1]
         { []
         }
     {offset
       c8nfx: // global
           _s8jbL::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8nfB; else goto c8nfC;
       c8nfB: // global
           I64[Sp] = block_c8nfJ_info;
           _s8jbN::P64 = P64[R1 + 7];
           R1 = _s8jbL::P64;
           P64[Sp + 8] = _s8jbN::P64;
           if (R1 & 7 != 0) goto u8ngH; else goto c8nfL;
       u8ngH: // global
           call _c8nfJ(R1) args: 0, res: 0, upd: 0;
       c8nfL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8nfC: // global
           I64[Sp] = block_c8ng9_info;
           _s8jbS::P64 = P64[R1 + 6];
           R1 = _s8jbL::P64;
           P64[Sp + 8] = _s8jbS::P64;
           if (R1 & 7 != 0) goto u8ngI; else goto c8ngb;
       u8ngI: // global
           call _c8ng9(R1) args: 0, res: 0, upd: 0;
       c8ngb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nfx_info" {
     block_c8nfx_info:
         const _c8nfx;
         const 1;
         const 30;
 },
 _c8nfJ() //  [R1]
         { []
         }
     {offset
       c8nfJ: // global
           if (R1 & 7 == 1) goto c8nfS; else goto u8ngE;
       c8nfS: // global
           _s8jbN::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8nfP_info;
           R3 = P64[R1 + 7];
           R2 = _s8jbN::P64;
           Sp = Sp + 8;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
       u8ngE: // global
           Sp = Sp + 16;
           call _c8ngw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nfJ_info" {
     block_c8nfJ_info:
         const _c8nfJ;
         const 1;
         const 30;
 },
 _c8nfP() //  [R1]
         { []
         }
     {offset
       c8nfP: // global
           if (R1 & 7 == 1) goto u8ngF; else goto u8ngG;
       u8ngF: // global
           Sp = Sp + 8;
           call _c8ngw() args: 0, res: 0, upd: 0;
       u8ngG: // global
           Sp = Sp + 8;
           call _c8ngs() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nfP_info" {
     block_c8nfP_info:
         const _c8nfP;
         const 0;
         const 30;
 },
 _c8ng9() //  [R1]
         { []
         }
     {offset
       c8ng9: // global
           if (R1 & 7 == 1) goto u8ngB; else goto c8ngm;
       u8ngB: // global
           Sp = Sp + 16;
           call _c8ngs() args: 0, res: 0, upd: 0;
       c8ngm: // global
           _s8jbS::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8ngk_info;
           R3 = P64[R1 + 6];
           R2 = _s8jbS::P64;
           Sp = Sp + 8;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ng9_info" {
     block_c8ng9_info:
         const _c8ng9;
         const 1;
         const 30;
 },
 _c8ngk() //  [R1]
         { []
         }
     {offset
       c8ngk: // global
           if (R1 & 7 == 1) goto u8ngC; else goto u8ngD;
       u8ngC: // global
           Sp = Sp + 8;
           call _c8ngw() args: 0, res: 0, upd: 0;
       u8ngD: // global
           Sp = Sp + 8;
           call _c8ngs() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8ngk_info" {
     block_c8ngk_info:
         const _c8ngk;
         const 0;
         const 30;
 },
 _c8ngw() //  []
         { []
         }
     {offset
       c8ngw: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8ngs() //  []
         { []
         }
     {offset
       c8ngs: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.718508872 UTC

[section ""data" . GHC.IO.Exception.$fOrdArrayException_$c>_closure" {
     GHC.IO.Exception.$fOrdArrayException_$c>_closure:
         const GHC.IO.Exception.$fOrdArrayException_$c>_info;
 },
 GHC.IO.Exception.$fOrdArrayException_$c>_entry() //  [R2, R3]
         { []
         }
     {offset
       c8nhx: // global
           _s8jbY::P64 = R3;
           R3 = R2;
           R2 = _s8jbY::P64;
           call GHC.IO.Exception.$fOrdArrayException_$c<_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdArrayException_$c>_info" {
     GHC.IO.Exception.$fOrdArrayException_$c>_info:
         const GHC.IO.Exception.$fOrdArrayException_$c>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.724046505 UTC

[section ""data" . GHC.IO.Exception.$fOrdArrayException_$cmin_closure" {
     GHC.IO.Exception.$fOrdArrayException_$cmin_closure:
         const GHC.IO.Exception.$fOrdArrayException_$cmin_info;
 },
 GHC.IO.Exception.$fOrdArrayException_$cmin_entry() //  [R2, R3]
         { []
         }
     {offset
       c8nhP: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8nhQ; else goto c8nhR;
       c8nhQ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fOrdArrayException_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8nhR: // global
           I64[Sp - 16] = block_c8nhI_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8niT; else goto c8nhJ;
       u8niT: // global
           call _c8nhI(R1) args: 0, res: 0, upd: 0;
       c8nhJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdArrayException_$cmin_info" {
     GHC.IO.Exception.$fOrdArrayException_$cmin_info:
         const GHC.IO.Exception.$fOrdArrayException_$cmin_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8nhI() //  [R1]
         { []
         }
     {offset
       c8nhI: // global
           _s8jbZ::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8nhM; else goto c8nhN;
       c8nhM: // global
           I64[Sp - 8] = block_c8nhU_info;
           _s8jc1::P64 = R1;
           _s8jc2::P64 = P64[R1 + 7];
           R1 = _s8jbZ::P64;
           P64[Sp] = _s8jc2::P64;
           P64[Sp + 8] = _s8jc1::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8niR; else goto c8nhW;
       u8niR: // global
           call _c8nhU(R1) args: 0, res: 0, upd: 0;
       c8nhW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8nhN: // global
           I64[Sp - 8] = block_c8nik_info;
           _s8jc1::P64 = R1;
           _s8jc7::P64 = P64[R1 + 6];
           R1 = _s8jbZ::P64;
           P64[Sp] = _s8jc7::P64;
           P64[Sp + 8] = _s8jc1::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8niS; else goto c8nim;
       u8niS: // global
           call _c8nik(R1) args: 0, res: 0, upd: 0;
       c8nim: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nhI_info" {
     block_c8nhI_info:
         const _c8nhI;
         const 1;
         const 30;
 },
 _c8nhU() //  [R1]
         { []
         }
     {offset
       c8nhU: // global
           if (R1 & 7 == 1) goto c8ni3; else goto u8niP;
       c8ni3: // global
           I64[Sp] = block_c8ni0_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
       u8niP: // global
           Sp = Sp + 16;
           call _c8niH() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nhU_info" {
     block_c8nhU_info:
         const _c8nhU;
         const 2;
         const 30;
 },
 _c8ni0() //  [R1]
         { []
         }
     {offset
       c8ni0: // global
           if (R1 & 7 == 1) goto u8niQ; else goto c8ni9;
       u8niQ: // global
           Sp = Sp + 16;
           call _c8niH() args: 0, res: 0, upd: 0;
       c8ni9: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ni0_info" {
     block_c8ni0_info:
         const _c8ni0;
         const 2;
         const 30;
 },
 _c8nik() //  [R1]
         { []
         }
     {offset
       c8nik: // global
           if (R1 & 7 == 1) goto u8niM; else goto c8nix;
       u8niM: // global
           P64[Sp + 16] = R1;
           Sp = Sp + 16;
           call _c8niD() args: 0, res: 0, upd: 0;
       c8nix: // global
           I64[Sp] = block_c8niv_info;
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nik_info" {
     block_c8nik_info:
         const _c8nik;
         const 2;
         const 30;
 },
 _c8niv() //  [R1]
         { []
         }
     {offset
       c8niv: // global
           if (R1 & 7 == 1) goto u8niN; else goto u8niO;
       u8niN: // global
           Sp = Sp + 16;
           call _c8niH() args: 0, res: 0, upd: 0;
       u8niO: // global
           P64[Sp + 16] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c8niD() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8niv_info" {
     block_c8niv_info:
         const _c8niv;
         const 2;
         const 30;
 },
 _c8niH() //  []
         { []
         }
     {offset
       c8niH: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8niD() //  []
         { []
         }
     {offset
       c8niD: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.737833345 UTC

[section ""data" . GHC.IO.Exception.$fOrdArrayException_closure" {
     GHC.IO.Exception.$fOrdArrayException_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.IO.Exception.$fEqArrayException_closure+1;
         const GHC.IO.Exception.$fOrdArrayException_$ccompare_closure+2;
         const GHC.IO.Exception.$fOrdArrayException_$c<_closure+2;
         const GHC.IO.Exception.$fOrdArrayException_$c<=_closure+2;
         const GHC.IO.Exception.$fOrdArrayException_$c>_closure+2;
         const GHC.IO.Exception.$fOrdArrayException_$c>=_closure+2;
         const GHC.IO.Exception.$fOrdArrayException_$cmax_closure+2;
         const GHC.IO.Exception.$fOrdArrayException_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.742203971 UTC

[section ""data" . GHC.IO.Exception.$fEqAsyncException_$c==_closure" {
     GHC.IO.Exception.$fEqAsyncException_$c==_closure:
         const GHC.IO.Exception.$fEqAsyncException_$c==_info;
 },
 GHC.IO.Exception.$fEqAsyncException_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c8njV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8njW; else goto c8njX;
       c8njW: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fEqAsyncException_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8njX: // global
           I64[Sp - 16] = block_c8njM_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8nle; else goto c8njN;
       u8nle: // global
           call _c8njM(R1) args: 0, res: 0, upd: 0;
       c8njN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fEqAsyncException_$c==_info" {
     GHC.IO.Exception.$fEqAsyncException_$c==_info:
         const GHC.IO.Exception.$fEqAsyncException_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8njM() //  [R1]
         { []
         }
     {offset
       c8njM: // global
           _s8jcd::P64 = P64[Sp + 8];
           _c8njU::P64 = R1 & 7;
           if (_c8njU::P64 < 3) goto u8nl0; else goto u8nl1;
       u8nl0: // global
           if (_c8njU::P64 < 2) goto c8njQ; else goto c8njR;
       c8njQ: // global
           I64[Sp + 8] = block_c8nk0_info;
           R1 = _s8jcd::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8nla; else goto c8nk2;
       u8nla: // global
           call _c8nk0(R1) args: 0, res: 0, upd: 0;
       c8nk2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8njR: // global
           I64[Sp + 8] = block_c8nkf_info;
           R1 = _s8jcd::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8nlb; else goto c8nkh;
       u8nlb: // global
           call _c8nkf(R1) args: 0, res: 0, upd: 0;
       c8nkh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8nl1: // global
           if (_c8njU::P64 < 4) goto c8njS; else goto c8njT;
       c8njS: // global
           I64[Sp + 8] = block_c8nku_info;
           R1 = _s8jcd::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8nlc; else goto c8nkw;
       u8nlc: // global
           call _c8nku(R1) args: 0, res: 0, upd: 0;
       c8nkw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8njT: // global
           I64[Sp + 8] = block_c8nkJ_info;
           R1 = _s8jcd::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8nld; else goto c8nkL;
       u8nld: // global
           call _c8nkJ(R1) args: 0, res: 0, upd: 0;
       c8nkL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8njM_info" {
     block_c8njM_info:
         const _c8njM;
         const 1;
         const 30;
 },
 _c8nk0() //  [R1]
         { []
         }
     {offset
       c8nk0: // global
           if (R1 & 7 == 1) goto u8nl2; else goto u8nl3;
       u8nl2: // global
           Sp = Sp + 8;
           call _c8nkV() args: 0, res: 0, upd: 0;
       u8nl3: // global
           Sp = Sp + 8;
           call _c8nkR() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nk0_info" {
     block_c8nk0_info:
         const _c8nk0;
         const 0;
         const 30;
 },
 _c8nkf() //  [R1]
         { []
         }
     {offset
       c8nkf: // global
           if (R1 & 7 == 2) goto u8nl4; else goto u8nl5;
       u8nl4: // global
           Sp = Sp + 8;
           call _c8nkV() args: 0, res: 0, upd: 0;
       u8nl5: // global
           Sp = Sp + 8;
           call _c8nkR() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nkf_info" {
     block_c8nkf_info:
         const _c8nkf;
         const 0;
         const 30;
 },
 _c8nku() //  [R1]
         { []
         }
     {offset
       c8nku: // global
           if (R1 & 7 == 3) goto u8nl6; else goto u8nl7;
       u8nl6: // global
           Sp = Sp + 8;
           call _c8nkV() args: 0, res: 0, upd: 0;
       u8nl7: // global
           Sp = Sp + 8;
           call _c8nkR() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nku_info" {
     block_c8nku_info:
         const _c8nku;
         const 0;
         const 30;
 },
 _c8nkJ() //  [R1]
         { []
         }
     {offset
       c8nkJ: // global
           if (R1 & 7 == 4) goto u8nl8; else goto u8nl9;
       u8nl8: // global
           Sp = Sp + 8;
           call _c8nkV() args: 0, res: 0, upd: 0;
       u8nl9: // global
           Sp = Sp + 8;
           call _c8nkR() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nkJ_info" {
     block_c8nkJ_info:
         const _c8nkJ;
         const 0;
         const 30;
 },
 _c8nkV() //  []
         { []
         }
     {offset
       c8nkV: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8nkR() //  []
         { []
         }
     {offset
       c8nkR: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.757737095 UTC

[section ""data" . GHC.IO.Exception.$fEqAsyncException_$c/=_closure" {
     GHC.IO.Exception.$fEqAsyncException_$c/=_closure:
         const GHC.IO.Exception.$fEqAsyncException_$c/=_info;
 },
 GHC.IO.Exception.$fEqAsyncException_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8nme: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8nmf; else goto c8nmg;
       c8nmf: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fEqAsyncException_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8nmg: // global
           I64[Sp - 16] = block_c8nm5_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8nnx; else goto c8nm6;
       u8nnx: // global
           call _c8nm5(R1) args: 0, res: 0, upd: 0;
       c8nm6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fEqAsyncException_$c/=_info" {
     GHC.IO.Exception.$fEqAsyncException_$c/=_info:
         const GHC.IO.Exception.$fEqAsyncException_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8nm5() //  [R1]
         { []
         }
     {offset
       c8nm5: // global
           _s8jck::P64 = P64[Sp + 8];
           _c8nmd::P64 = R1 & 7;
           if (_c8nmd::P64 < 3) goto u8nnj; else goto u8nnk;
       u8nnj: // global
           if (_c8nmd::P64 < 2) goto c8nm9; else goto c8nma;
       c8nm9: // global
           I64[Sp + 8] = block_c8nmj_info;
           R1 = _s8jck::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8nnt; else goto c8nml;
       u8nnt: // global
           call _c8nmj(R1) args: 0, res: 0, upd: 0;
       c8nml: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8nma: // global
           I64[Sp + 8] = block_c8nmy_info;
           R1 = _s8jck::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8nnu; else goto c8nmA;
       u8nnu: // global
           call _c8nmy(R1) args: 0, res: 0, upd: 0;
       c8nmA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8nnk: // global
           if (_c8nmd::P64 < 4) goto c8nmb; else goto c8nmc;
       c8nmb: // global
           I64[Sp + 8] = block_c8nmN_info;
           R1 = _s8jck::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8nnv; else goto c8nmP;
       u8nnv: // global
           call _c8nmN(R1) args: 0, res: 0, upd: 0;
       c8nmP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8nmc: // global
           I64[Sp + 8] = block_c8nn2_info;
           R1 = _s8jck::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8nnw; else goto c8nn4;
       u8nnw: // global
           call _c8nn2(R1) args: 0, res: 0, upd: 0;
       c8nn4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nm5_info" {
     block_c8nm5_info:
         const _c8nm5;
         const 1;
         const 30;
 },
 _c8nmj() //  [R1]
         { []
         }
     {offset
       c8nmj: // global
           if (R1 & 7 == 1) goto u8nnl; else goto u8nnm;
       u8nnl: // global
           Sp = Sp + 8;
           call _c8nne() args: 0, res: 0, upd: 0;
       u8nnm: // global
           Sp = Sp + 8;
           call _c8nna() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nmj_info" {
     block_c8nmj_info:
         const _c8nmj;
         const 0;
         const 30;
 },
 _c8nmy() //  [R1]
         { []
         }
     {offset
       c8nmy: // global
           if (R1 & 7 == 2) goto u8nnn; else goto u8nno;
       u8nnn: // global
           Sp = Sp + 8;
           call _c8nne() args: 0, res: 0, upd: 0;
       u8nno: // global
           Sp = Sp + 8;
           call _c8nna() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nmy_info" {
     block_c8nmy_info:
         const _c8nmy;
         const 0;
         const 30;
 },
 _c8nmN() //  [R1]
         { []
         }
     {offset
       c8nmN: // global
           if (R1 & 7 == 3) goto u8nnp; else goto u8nnq;
       u8nnp: // global
           Sp = Sp + 8;
           call _c8nne() args: 0, res: 0, upd: 0;
       u8nnq: // global
           Sp = Sp + 8;
           call _c8nna() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nmN_info" {
     block_c8nmN_info:
         const _c8nmN;
         const 0;
         const 30;
 },
 _c8nn2() //  [R1]
         { []
         }
     {offset
       c8nn2: // global
           if (R1 & 7 == 4) goto u8nnr; else goto u8nns;
       u8nnr: // global
           Sp = Sp + 8;
           call _c8nne() args: 0, res: 0, upd: 0;
       u8nns: // global
           Sp = Sp + 8;
           call _c8nna() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nn2_info" {
     block_c8nn2_info:
         const _c8nn2;
         const 0;
         const 30;
 },
 _c8nne() //  []
         { []
         }
     {offset
       c8nne: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8nna() //  []
         { []
         }
     {offset
       c8nna: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.770687063 UTC

[section ""data" . GHC.IO.Exception.$fEqAsyncException_closure" {
     GHC.IO.Exception.$fEqAsyncException_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Exception.$fEqAsyncException_$c==_closure+2;
         const GHC.IO.Exception.$fEqAsyncException_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.773823433 UTC

[section ""data" . GHC.IO.Exception.ioe_filename_closure" {
     GHC.IO.Exception.ioe_filename_closure:
         const GHC.IO.Exception.ioe_filename_info;
 },
 GHC.IO.Exception.ioe_filename_entry() //  [R2]
         { []
         }
     {offset
       c8nos: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8not; else goto c8nou;
       c8not: // global
           R2 = R2;
           R1 = GHC.IO.Exception.ioe_filename_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8nou: // global
           I64[Sp - 8] = block_c8nop_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8noy; else goto c8noq;
       u8noy: // global
           call _c8nop(R1) args: 0, res: 0, upd: 0;
       c8noq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.ioe_filename_info" {
     GHC.IO.Exception.ioe_filename_info:
         const GHC.IO.Exception.ioe_filename_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8nop() //  [R1]
         { []
         }
     {offset
       c8nop: // global
           R1 = P64[R1 + 47] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nop_info" {
     block_c8nop_info:
         const _c8nop;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.779113048 UTC

[section ""data" . GHC.IO.Exception.ioe_errno_closure" {
     GHC.IO.Exception.ioe_errno_closure:
         const GHC.IO.Exception.ioe_errno_info;
 },
 GHC.IO.Exception.ioe_errno_entry() //  [R2]
         { []
         }
     {offset
       c8noR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8noS; else goto c8noT;
       c8noS: // global
           R2 = R2;
           R1 = GHC.IO.Exception.ioe_errno_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8noT: // global
           I64[Sp - 8] = block_c8noO_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8noX; else goto c8noP;
       u8noX: // global
           call _c8noO(R1) args: 0, res: 0, upd: 0;
       c8noP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.ioe_errno_info" {
     GHC.IO.Exception.ioe_errno_info:
         const GHC.IO.Exception.ioe_errno_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8noO() //  [R1]
         { []
         }
     {offset
       c8noO: // global
           R1 = P64[R1 + 39] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8noO_info" {
     block_c8noO_info:
         const _c8noO;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.786284786 UTC

[section ""data" . GHC.IO.Exception.ioe_description_closure" {
     GHC.IO.Exception.ioe_description_closure:
         const GHC.IO.Exception.ioe_description_info;
 },
 GHC.IO.Exception.ioe_description_entry() //  [R2]
         { []
         }
     {offset
       c8npg: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8nph; else goto c8npi;
       c8nph: // global
           R2 = R2;
           R1 = GHC.IO.Exception.ioe_description_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8npi: // global
           I64[Sp - 8] = block_c8npd_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8npm; else goto c8npe;
       u8npm: // global
           call _c8npd(R1) args: 0, res: 0, upd: 0;
       c8npe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.ioe_description_info" {
     GHC.IO.Exception.ioe_description_info:
         const GHC.IO.Exception.ioe_description_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8npd() //  [R1]
         { []
         }
     {offset
       c8npd: // global
           R1 = P64[R1 + 31] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8npd_info" {
     block_c8npd_info:
         const _c8npd;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.791826488 UTC

[section ""data" . GHC.IO.Exception.ioe_location_closure" {
     GHC.IO.Exception.ioe_location_closure:
         const GHC.IO.Exception.ioe_location_info;
 },
 GHC.IO.Exception.ioe_location_entry() //  [R2]
         { []
         }
     {offset
       c8npF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8npG; else goto c8npH;
       c8npG: // global
           R2 = R2;
           R1 = GHC.IO.Exception.ioe_location_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8npH: // global
           I64[Sp - 8] = block_c8npC_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8npL; else goto c8npD;
       u8npL: // global
           call _c8npC(R1) args: 0, res: 0, upd: 0;
       c8npD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.ioe_location_info" {
     GHC.IO.Exception.ioe_location_info:
         const GHC.IO.Exception.ioe_location_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8npC() //  [R1]
         { []
         }
     {offset
       c8npC: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8npC_info" {
     block_c8npC_info:
         const _c8npC;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.797195436 UTC

[section ""data" . GHC.IO.Exception.ioe_type_closure" {
     GHC.IO.Exception.ioe_type_closure:
         const GHC.IO.Exception.ioe_type_info;
 },
 GHC.IO.Exception.ioe_type_entry() //  [R2]
         { []
         }
     {offset
       c8nq4: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8nq5; else goto c8nq6;
       c8nq5: // global
           R2 = R2;
           R1 = GHC.IO.Exception.ioe_type_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8nq6: // global
           I64[Sp - 8] = block_c8nq1_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8nqa; else goto c8nq2;
       u8nqa: // global
           call _c8nq1(R1) args: 0, res: 0, upd: 0;
       c8nq2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.ioe_type_info" {
     GHC.IO.Exception.ioe_type_info:
         const GHC.IO.Exception.ioe_type_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8nq1() //  [R1]
         { []
         }
     {offset
       c8nq1: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nq1_info" {
     block_c8nq1_info:
         const _c8nq1;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.802462622 UTC

[section ""data" . GHC.IO.Exception.ioe_handle_closure" {
     GHC.IO.Exception.ioe_handle_closure:
         const GHC.IO.Exception.ioe_handle_info;
 },
 GHC.IO.Exception.ioe_handle_entry() //  [R2]
         { []
         }
     {offset
       c8nqt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8nqu; else goto c8nqv;
       c8nqu: // global
           R2 = R2;
           R1 = GHC.IO.Exception.ioe_handle_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8nqv: // global
           I64[Sp - 8] = block_c8nqq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8nqz; else goto c8nqr;
       u8nqz: // global
           call _c8nqq(R1) args: 0, res: 0, upd: 0;
       c8nqr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.ioe_handle_info" {
     GHC.IO.Exception.ioe_handle_info:
         const GHC.IO.Exception.ioe_handle_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8nqq() //  [R1]
         { []
         }
     {offset
       c8nqq: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nqq_info" {
     block_c8nqq_info:
         const _c8nqq;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.808531502 UTC

[section ""data" . GHC.IO.Exception.userError_closure" {
     GHC.IO.Exception.userError_closure:
         const GHC.IO.Exception.userError_info;
 },
 GHC.IO.Exception.userError_entry() //  [R2]
         { []
         }
     {offset
       c8nqQ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c8nqU; else goto c8nqT;
       c8nqU: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = GHC.IO.Exception.userError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8nqT: // global
           I64[Hp - 48] = GHC.IO.Exception.IOError_con_info;
           P64[Hp - 40] = GHC.Base.Nothing_closure+1;
           P64[Hp - 32] = GHC.IO.Exception.UserError_closure+1;
           P64[Hp - 24] = GHC.Types.[]_closure+1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = GHC.Base.Nothing_closure+1;
           P64[Hp] = GHC.Base.Nothing_closure+1;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.userError_info" {
     GHC.IO.Exception.userError_info:
         const GHC.IO.Exception.userError_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.811978867 UTC

[section ""cstring" . GHC.IO.Exception.unsupportedOperation2_bytes" {
     GHC.IO.Exception.unsupportedOperation2_bytes:
         I8[] [79,112,101,114,97,116,105,111,110,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.814212357 UTC

[section ""data" . GHC.IO.Exception.unsupportedOperation1_closure" {
     GHC.IO.Exception.unsupportedOperation1_closure:
         const GHC.IO.Exception.unsupportedOperation1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.unsupportedOperation1_entry() //  [R1]
         { []
         }
     {offset
       c8nr7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8nr8; else goto c8nr9;
       c8nr8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8nr9: // global
           (_c8nr4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8nr4::I64 == 0) goto c8nr6; else goto c8nr5;
       c8nr6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8nr5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8nr4::I64;
           R2 = GHC.IO.Exception.unsupportedOperation2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.unsupportedOperation1_info" {
     GHC.IO.Exception.unsupportedOperation1_info:
         const GHC.IO.Exception.unsupportedOperation1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.817788148 UTC

[section ""data" . GHC.IO.Exception.unsupportedOperation_closure" {
     GHC.IO.Exception.unsupportedOperation_closure:
         const GHC.IO.Exception.IOError_con_info;
         const GHC.Base.Nothing_closure+1;
         const GHC.IO.Exception.UnsupportedOperation_closure+1;
         const GHC.Types.[]_closure+1;
         const GHC.IO.Exception.unsupportedOperation1_closure;
         const GHC.Base.Nothing_closure+1;
         const GHC.Base.Nothing_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.81958547 UTC

[section ""data" . GHC.IO.Exception.untangle1_closure" {
     GHC.IO.Exception.untangle1_closure:
         const GHC.Types.C#_con_info;
         const 32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.822402126 UTC

[section ""data" . GHC.IO.Exception.untangle4_closure" {
     GHC.IO.Exception.untangle4_closure:
         const GHC.IO.Exception.untangle4_info;
 },
 GHC.IO.Exception.untangle4_entry() //  [R2]
         { []
         }
     {offset
       c8nrq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8nrr; else goto c8nrs;
       c8nrr: // global
           R2 = R2;
           R1 = GHC.IO.Exception.untangle4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8nrs: // global
           I64[Sp - 8] = block_c8nrn_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8nrA; else goto c8nro;
       u8nrA: // global
           call _c8nrn(R1) args: 0, res: 0, upd: 0;
       c8nro: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.untangle4_info" {
     GHC.IO.Exception.untangle4_info:
         const GHC.IO.Exception.untangle4_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8nrn() //  [R1]
         { []
         }
     {offset
       c8nrn: // global
           if (I64[R1 + 7] == 124) goto c8nrz; else goto c8nry;
       c8nrz: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8nry: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nrn_info" {
     block_c8nrn_info:
         const _c8nrn;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.827279547 UTC

[section ""cstring" . GHC.IO.Exception.untangle3_bytes" {
     GHC.IO.Exception.untangle3_bytes:
         I8[] [10]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.829543464 UTC

[section ""data" . GHC.IO.Exception.untangle2_closure" {
     GHC.IO.Exception.untangle2_closure:
         const GHC.IO.Exception.untangle2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.untangle2_entry() //  [R1]
         { []
         }
     {offset
       c8nrT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8nrU; else goto c8nrV;
       c8nrU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8nrV: // global
           (_c8nrQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8nrQ::I64 == 0) goto c8nrS; else goto c8nrR;
       c8nrS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8nrR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8nrQ::I64;
           R2 = GHC.IO.Exception.untangle3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.untangle2_info" {
     GHC.IO.Exception.untangle2_info:
         const GHC.IO.Exception.untangle2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.836644912 UTC

[section ""data" . GHC.IO.Exception.untangle_closure" {
     GHC.IO.Exception.untangle_closure:
         const GHC.IO.Exception.untangle_info;
         const 0;
 },
 sat_s8jdq_entry() //  [R1]
         { []
         }
     {offset
       c8nsJ: // global
           R3 = GHC.IO.Exception.untangle2_closure;
           R2 = P64[R1 + 16];
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8jdq_info" {
     sat_s8jdq_info:
         const sat_s8jdq_entry;
         const 1;
         const 4294967312;
         const S8ji8_srt+544;
 },
 sat_s8jdr_entry() //  [R1]
         { []
         }
     {offset
       c8nsM: // global
           _s8jdr::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8nsN; else goto c8nsO;
       c8nsO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8nsQ; else goto c8nsP;
       c8nsQ: // global
           HpAlloc = 24;
           goto c8nsN;
       c8nsN: // global
           R1 = _s8jdr::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8nsP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8jdr::P64;
           _s8jdi::P64 = P64[_s8jdr::P64 + 16];
           _s8jdp::P64 = P64[_s8jdr::P64 + 24];
           I64[Hp - 16] = sat_s8jdq_info;
           P64[Hp] = _s8jdp::P64;
           R3 = Hp - 16;
           R2 = _s8jdi::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8jdr_info" {
     sat_s8jdr_info:
         const sat_s8jdr_entry;
         const 2;
         const 4294967314;
         const S8ji8_srt+544;
 },
 sat_s8jds_entry() //  [R1]
         { []
         }
     {offset
       c8nsR: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8nsV; else goto c8nsU;
       c8nsV: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8nsU: // global
           _s8jdi::P64 = P64[R1 + 16];
           _s8jdp::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_s8jdr_info;
           P64[Hp - 8] = _s8jdi::P64;
           P64[Hp] = _s8jdp::P64;
           R3 = Hp - 24;
           R2 = GHC.IO.Exception.$fExceptionArrayException3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8jds_info" {
     sat_s8jds_info:
         const sat_s8jds_entry;
         const 2;
         const 4294967314;
         const S8ji8_srt+544;
 },
 GHC.IO.Exception.untangle_entry() //  [R2, R3]
         { []
         }
     {offset
       c8nsW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8nsX; else goto c8nsY;
       c8nsX: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.untangle_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8nsY: // global
           I64[Sp - 16] = block_c8ns7_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.CString.unpackCStringUtf8#_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.untangle_info" {
     GHC.IO.Exception.untangle_info:
         const GHC.IO.Exception.untangle_entry;
         const 0;
         const 12884901902;
         const 8589934605;
         const S8ji8_srt+544;
 },
 _c8ns7() //  [R1]
         { []
         }
     {offset
       c8ns7: // global
           I64[Sp] = block_c8nsb_info;
           R3 = R1;
           R2 = GHC.IO.Exception.untangle4_closure+1;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ns7_info" {
     block_c8ns7_info:
         const _c8ns7;
         const 1;
         const 4294967326;
         const S8ji8_srt+544;
 },
 _c8nsb() //  [R1, R2]
         { []
         }
     {offset
       c8nsb: // global
           I64[Sp - 8] = block_c8nsf_info;
           _s8jdl::P64 = R1;
           R1 = R2;
           P64[Sp] = _s8jdl::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8ntl; else goto c8nsg;
       u8ntl: // global
           call _c8nsf(R1) args: 0, res: 0, upd: 0;
       c8nsg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nsb_info" {
     block_c8nsb_info:
         const _c8nsb;
         const 1;
         const 4294967326;
         const S8ji8_srt+544;
 },
 _c8nsf() //  [R1]
         { []
         }
     {offset
       c8nsf: // global
           if (R1 & 7 == 1) goto c8nt7; else goto c8nt9;
       c8nt7: // global
           P64[Sp + 8] = P64[Sp + 8];
           P64[Sp] = GHC.Types.[]_closure+1;
           call _c8nsv() args: 0, res: 0, upd: 0;
       c8nt9: // global
           I64[Sp - 8] = block_c8nsl_info;
           _s8jdv::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s8jdv::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8ntm; else goto c8nsm;
       u8ntm: // global
           call _c8nsl(R1) args: 0, res: 0, upd: 0;
       c8nsm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nsf_info" {
     block_c8nsf_info:
         const _c8nsf;
         const 2;
         const 4294967326;
         const S8ji8_srt+544;
 },
 _c8nsl() //  [R1]
         { []
         }
     {offset
       c8nsl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8ntc; else goto c8ntb;
       c8ntc: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8ntb: // global
           _s8jdl::P64 = P64[Sp + 16];
           if (I64[R1 + 7] == 124) goto c8ntf; else goto c8nte;
       c8ntf: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.IO.Exception.untangle1_closure+1;
           P64[Hp] = P64[Sp + 8];
           P64[Sp + 16] = _s8jdl::P64;
           P64[Sp + 8] = Hp - 14;
           Sp = Sp + 8;
           goto u8ntp;
       c8nte: // global
           Hp = Hp - 24;
           P64[Sp + 8] = GHC.Types.[]_closure+1;
           P64[Sp + 16] = _s8jdl::P64;
           Sp = Sp + 8;
           goto u8ntp;
       u8ntp: // global
           call _c8nsv() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nsl_info" {
     block_c8nsl_info:
         const _c8nsl;
         const 3;
         const 4294967326;
         const S8ji8_srt+544;
 },
 _c8nsv() //  []
         { []
         }
     {offset
       c8nsv: // global
           Hp = Hp + 32;
           _s8jdo::P64 = P64[Sp + 8];
           _s8jdp::P64 = P64[Sp];
           if (Hp > HpLim) (likely: False) goto c8nt3; else goto c8nt2;
       c8nt3: // global
           HpAlloc = 32;
           I64[Sp + 8] = block_c8nsu_info;
           R2 = _s8jdp::P64;
           R1 = _s8jdo::P64;
           Sp = Sp + 8;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c8nt2: // global
           I64[Hp - 24] = sat_s8jds_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _s8jdp::P64;
           R3 = Hp - 24;
           R2 = _s8jdo::P64;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 _c8nsu() //  [R1, R2]
         { []
         }
     {offset
       c8nsu: // global
           P64[Sp] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c8nsv() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nsu_info" {
     block_c8nsu_info:
         const _c8nsu;
         const 1;
         const 4294967326;
         const S8ji8_srt+544;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.8579652 UTC

[section ""data" . GHC.IO.Exception.$fOrdAsyncException_$ccompare_closure" {
     GHC.IO.Exception.$fOrdAsyncException_$ccompare_closure:
         const GHC.IO.Exception.$fOrdAsyncException_$ccompare_info;
 },
 GHC.IO.Exception.$fOrdAsyncException_$ccompare_entry() //  [R2, R3]
         { []
         }
     {offset
       c8nui: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8nuj; else goto c8nuk;
       c8nuj: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fOrdAsyncException_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8nuk: // global
           I64[Sp - 16] = block_c8nu9_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8nw3; else goto c8nua;
       u8nw3: // global
           call _c8nu9(R1) args: 0, res: 0, upd: 0;
       c8nua: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdAsyncException_$ccompare_info" {
     GHC.IO.Exception.$fOrdAsyncException_$ccompare_info:
         const GHC.IO.Exception.$fOrdAsyncException_$ccompare_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8nu9() //  [R1]
         { []
         }
     {offset
       c8nu9: // global
           _s8jdB::P64 = P64[Sp + 8];
           _c8nuh::P64 = R1 & 7;
           if (_c8nuh::P64 < 3) goto u8nvH; else goto u8nvI;
       u8nvH: // global
           if (_c8nuh::P64 < 2) goto c8nud; else goto c8nue;
       c8nud: // global
           I64[Sp + 8] = block_c8nun_info;
           R1 = _s8jdB::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8nvZ; else goto c8nup;
       u8nvZ: // global
           call _c8nun(R1) args: 0, res: 0, upd: 0;
       c8nup: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8nue: // global
           I64[Sp + 8] = block_c8nuK_info;
           R1 = _s8jdB::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8nw0; else goto c8nuM;
       u8nw0: // global
           call _c8nuK(R1) args: 0, res: 0, upd: 0;
       c8nuM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8nvI: // global
           if (_c8nuh::P64 < 4) goto c8nuf; else goto c8nug;
       c8nuf: // global
           I64[Sp + 8] = block_c8nv7_info;
           R1 = _s8jdB::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8nw1; else goto c8nv9;
       u8nw1: // global
           call _c8nv7(R1) args: 0, res: 0, upd: 0;
       c8nv9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8nug: // global
           I64[Sp + 8] = block_c8nvq_info;
           R1 = _s8jdB::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8nw2; else goto c8nvs;
       u8nw2: // global
           call _c8nvq(R1) args: 0, res: 0, upd: 0;
       c8nvs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nu9_info" {
     block_c8nu9_info:
         const _c8nu9;
         const 1;
         const 30;
 },
 _c8nun() //  [R1]
         { []
         }
     {offset
       c8nun: // global
           _c8nvG::P64 = R1 & 7;
           if (_c8nvG::P64 < 2) goto u8nvN; else goto u8nvJ;
       u8nvN: // global
           Sp = Sp + 8;
           call _c8nvC() args: 0, res: 0, upd: 0;
       u8nvJ: // global
           if (_c8nvG::P64 != 3) goto u8nvP; else goto u8nvP;
       u8nvP: // global
           Sp = Sp + 8;
           call _c8nvn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nun_info" {
     block_c8nun_info:
         const _c8nun;
         const 0;
         const 30;
 },
 _c8nuK() //  [R1]
         { []
         }
     {offset
       c8nuK: // global
           _c8nvF::P64 = R1 & 7;
           if (_c8nvF::P64 < 3) goto u8nvK; else goto u8nvL;
       u8nvK: // global
           if (_c8nvF::P64 < 2) goto u8nvR; else goto u8nvQ;
       u8nvR: // global
           Sp = Sp + 8;
           call _c8nvy() args: 0, res: 0, upd: 0;
       u8nvQ: // global
           Sp = Sp + 8;
           call _c8nvC() args: 0, res: 0, upd: 0;
       u8nvL: // global
           if (_c8nvF::P64 < 4) goto u8nvT; else goto u8nvT;
       u8nvT: // global
           Sp = Sp + 8;
           call _c8nvn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nuK_info" {
     block_c8nuK_info:
         const _c8nuK;
         const 0;
         const 30;
 },
 _c8nv7() //  [R1]
         { []
         }
     {offset
       c8nv7: // global
           _c8nvE::P64 = R1 & 7;
           if (_c8nvE::P64 != 3) goto u8nvM; else goto u8nvU;
       u8nvM: // global
           if (_c8nvE::P64 != 4) goto u8nvW; else goto u8nvV;
       u8nvW: // global
           Sp = Sp + 8;
           call _c8nvy() args: 0, res: 0, upd: 0;
       u8nvV: // global
           Sp = Sp + 8;
           call _c8nvn() args: 0, res: 0, upd: 0;
       u8nvU: // global
           Sp = Sp + 8;
           call _c8nvC() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nv7_info" {
     block_c8nv7_info:
         const _c8nv7;
         const 0;
         const 30;
 },
 _c8nvn() //  []
         { []
         }
     {offset
       c8nvn: // global
           R1 = GHC.Types.LT_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8nvq() //  [R1]
         { []
         }
     {offset
       c8nvq: // global
           if (R1 & 7 == 4) goto u8nvX; else goto u8nvY;
       u8nvX: // global
           Sp = Sp + 8;
           call _c8nvC() args: 0, res: 0, upd: 0;
       u8nvY: // global
           Sp = Sp + 8;
           call _c8nvy() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nvq_info" {
     block_c8nvq_info:
         const _c8nvq;
         const 0;
         const 30;
 },
 _c8nvC() //  []
         { []
         }
     {offset
       c8nvC: // global
           R1 = GHC.Types.EQ_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8nvy() //  []
         { []
         }
     {offset
       c8nvy: // global
           R1 = GHC.Types.GT_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.874390754 UTC

[section ""data" . GHC.IO.Exception.$fOrdAsyncException_$c<_closure" {
     GHC.IO.Exception.$fOrdAsyncException_$c<_closure:
         const GHC.IO.Exception.$fOrdAsyncException_$c<_info;
 },
 GHC.IO.Exception.$fOrdAsyncException_$c<_entry() //  [R2, R3]
         { []
         }
     {offset
       c8nx5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8nx6; else goto c8nx7;
       c8nx6: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fOrdAsyncException_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8nx7: // global
           I64[Sp - 16] = block_c8nwW_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8nyv; else goto c8nwX;
       u8nyv: // global
           call _c8nwW(R1) args: 0, res: 0, upd: 0;
       c8nwX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdAsyncException_$c<_info" {
     GHC.IO.Exception.$fOrdAsyncException_$c<_info:
         const GHC.IO.Exception.$fOrdAsyncException_$c<_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8nwW() //  [R1]
         { []
         }
     {offset
       c8nwW: // global
           _s8jdI::P64 = P64[Sp + 8];
           _c8nx4::P64 = R1 & 7;
           if (_c8nx4::P64 < 3) goto u8nyf; else goto u8nyg;
       u8nyf: // global
           if (_c8nx4::P64 < 2) goto c8nx0; else goto c8nx1;
       c8nx0: // global
           I64[Sp + 8] = block_c8nxa_info;
           R1 = _s8jdI::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8nyr; else goto c8nxc;
       u8nyr: // global
           call _c8nxa(R1) args: 0, res: 0, upd: 0;
       c8nxc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8nx1: // global
           I64[Sp + 8] = block_c8nxx_info;
           R1 = _s8jdI::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8nys; else goto c8nxz;
       u8nys: // global
           call _c8nxx(R1) args: 0, res: 0, upd: 0;
       c8nxz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8nyg: // global
           if (_c8nx4::P64 < 4) goto c8nx2; else goto c8nx3;
       c8nx2: // global
           I64[Sp + 8] = block_c8nxQ_info;
           R1 = _s8jdI::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8nyt; else goto c8nxS;
       u8nyt: // global
           call _c8nxQ(R1) args: 0, res: 0, upd: 0;
       c8nxS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8nx3: // global
           I64[Sp + 8] = block_c8ny5_info;
           R1 = _s8jdI::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8nyu; else goto c8ny7;
       u8nyu: // global
           call _c8ny5() args: 0, res: 0, upd: 0;
       c8ny7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nwW_info" {
     block_c8nwW_info:
         const _c8nwW;
         const 1;
         const 30;
 },
 _c8nxa() //  [R1]
         { []
         }
     {offset
       c8nxa: // global
           _c8nye::P64 = R1 & 7;
           if (_c8nye::P64 < 2) goto u8nyj; else goto u8nyh;
       u8nyj: // global
           Sp = Sp + 8;
           call _c8nxY() args: 0, res: 0, upd: 0;
       u8nyh: // global
           if (_c8nye::P64 != 3) goto u8nyl; else goto u8nyl;
       u8nyl: // global
           Sp = Sp + 8;
           call _c8ny2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nxa_info" {
     block_c8nxa_info:
         const _c8nxa;
         const 0;
         const 30;
 },
 _c8nxx() //  [R1]
         { []
         }
     {offset
       c8nxx: // global
           _c8nyd::P64 = R1 & 7;
           if (_c8nyd::P64 != 3) goto u8nyi; else goto u8nym;
       u8nyi: // global
           if (_c8nyd::P64 != 4) goto u8nyo; else goto u8nyn;
       u8nyo: // global
           Sp = Sp + 8;
           call _c8nxY() args: 0, res: 0, upd: 0;
       u8nyn: // global
           Sp = Sp + 8;
           goto u8nyz;
       u8nym: // global
           Sp = Sp + 8;
           goto u8nyz;
       u8nyz: // global
           call _c8ny2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nxx_info" {
     block_c8nxx_info:
         const _c8nxx;
         const 0;
         const 30;
 },
 _c8nxQ() //  [R1]
         { []
         }
     {offset
       c8nxQ: // global
           if (R1 & 7 == 4) goto u8nyp; else goto u8nyq;
       u8nyp: // global
           Sp = Sp + 8;
           call _c8ny2() args: 0, res: 0, upd: 0;
       u8nyq: // global
           Sp = Sp + 8;
           call _c8nxY() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nxQ_info" {
     block_c8nxQ_info:
         const _c8nxQ;
         const 0;
         const 30;
 },
 _c8ny2() //  []
         { []
         }
     {offset
       c8ny2: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8nxY() //  []
         { []
         }
     {offset
       c8nxY: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8ny5() //  []
         { []
         }
     {offset
       c8ny5: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ny5_info" {
     block_c8ny5_info:
         const _c8ny5;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.890254084 UTC

[section ""data" . GHC.IO.Exception.$fOrdAsyncException_$c<=_closure" {
     GHC.IO.Exception.$fOrdAsyncException_$c<=_closure:
         const GHC.IO.Exception.$fOrdAsyncException_$c<=_info;
 },
 GHC.IO.Exception.$fOrdAsyncException_$c<=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8nzr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8nzs; else goto c8nzt;
       c8nzs: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fOrdAsyncException_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8nzt: // global
           I64[Sp - 16] = block_c8nzi_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8nAR; else goto c8nzj;
       u8nAR: // global
           call _c8nzi(R1) args: 0, res: 0, upd: 0;
       c8nzj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdAsyncException_$c<=_info" {
     GHC.IO.Exception.$fOrdAsyncException_$c<=_info:
         const GHC.IO.Exception.$fOrdAsyncException_$c<=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8nzi() //  [R1]
         { []
         }
     {offset
       c8nzi: // global
           _s8jdO::P64 = P64[Sp + 8];
           _c8nzq::P64 = R1 & 7;
           if (_c8nzq::P64 < 3) goto u8nAB; else goto u8nAC;
       u8nAB: // global
           if (_c8nzq::P64 < 2) goto c8nzm; else goto c8nzn;
       c8nzm: // global
           I64[Sp + 8] = block_c8nzw_info;
           R1 = _s8jdO::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8nAN; else goto c8nzy;
       u8nAN: // global
           call _c8nzw(R1) args: 0, res: 0, upd: 0;
       c8nzy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8nzn: // global
           I64[Sp + 8] = block_c8nzT_info;
           R1 = _s8jdO::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8nAO; else goto c8nzV;
       u8nAO: // global
           call _c8nzT(R1) args: 0, res: 0, upd: 0;
       c8nzV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8nAC: // global
           if (_c8nzq::P64 < 4) goto c8nzo; else goto c8nzp;
       c8nzo: // global
           I64[Sp + 8] = block_c8nAc_info;
           R1 = _s8jdO::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8nAP; else goto c8nAe;
       u8nAP: // global
           call _c8nAc(R1) args: 0, res: 0, upd: 0;
       c8nAe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8nzp: // global
           I64[Sp + 8] = block_c8nAr_info;
           R1 = _s8jdO::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8nAQ; else goto c8nAt;
       u8nAQ: // global
           call _c8nAr() args: 0, res: 0, upd: 0;
       c8nAt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nzi_info" {
     block_c8nzi_info:
         const _c8nzi;
         const 1;
         const 30;
 },
 _c8nzw() //  [R1]
         { []
         }
     {offset
       c8nzw: // global
           _c8nAA::P64 = R1 & 7;
           if (_c8nAA::P64 < 2) goto u8nAF; else goto u8nAD;
       u8nAF: // global
           Sp = Sp + 8;
           call _c8nAk() args: 0, res: 0, upd: 0;
       u8nAD: // global
           if (_c8nAA::P64 != 3) goto u8nAH; else goto u8nAH;
       u8nAH: // global
           Sp = Sp + 8;
           call _c8nAo() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nzw_info" {
     block_c8nzw_info:
         const _c8nzw;
         const 0;
         const 30;
 },
 _c8nzT() //  [R1]
         { []
         }
     {offset
       c8nzT: // global
           _c8nAz::P64 = R1 & 7;
           if (_c8nAz::P64 != 3) goto u8nAE; else goto u8nAI;
       u8nAE: // global
           if (_c8nAz::P64 != 4) goto u8nAK; else goto u8nAJ;
       u8nAK: // global
           Sp = Sp + 8;
           call _c8nAk() args: 0, res: 0, upd: 0;
       u8nAJ: // global
           Sp = Sp + 8;
           goto u8nAV;
       u8nAI: // global
           Sp = Sp + 8;
           goto u8nAV;
       u8nAV: // global
           call _c8nAo() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nzT_info" {
     block_c8nzT_info:
         const _c8nzT;
         const 0;
         const 30;
 },
 _c8nAc() //  [R1]
         { []
         }
     {offset
       c8nAc: // global
           if (R1 & 7 == 4) goto u8nAL; else goto u8nAM;
       u8nAL: // global
           Sp = Sp + 8;
           call _c8nAo() args: 0, res: 0, upd: 0;
       u8nAM: // global
           Sp = Sp + 8;
           call _c8nAk() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nAc_info" {
     block_c8nAc_info:
         const _c8nAc;
         const 0;
         const 30;
 },
 _c8nAo() //  []
         { []
         }
     {offset
       c8nAo: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8nAk() //  []
         { []
         }
     {offset
       c8nAk: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8nAr() //  []
         { []
         }
     {offset
       c8nAr: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nAr_info" {
     block_c8nAr_info:
         const _c8nAr;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.905286334 UTC

[section ""data" . GHC.IO.Exception.$fOrdAsyncException_$cmax_closure" {
     GHC.IO.Exception.$fOrdAsyncException_$cmax_closure:
         const GHC.IO.Exception.$fOrdAsyncException_$cmax_info;
 },
 GHC.IO.Exception.$fOrdAsyncException_$cmax_entry() //  [R2, R3]
         { []
         }
     {offset
       c8nBN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8nBO; else goto c8nBP;
       c8nBO: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fOrdAsyncException_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8nBP: // global
           I64[Sp - 16] = block_c8nBE_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8nCM; else goto c8nBF;
       u8nCM: // global
           call _c8nBE(R1) args: 0, res: 0, upd: 0;
       c8nBF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdAsyncException_$cmax_info" {
     GHC.IO.Exception.$fOrdAsyncException_$cmax_info:
         const GHC.IO.Exception.$fOrdAsyncException_$cmax_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8nBE() //  [R1]
         { []
         }
     {offset
       c8nBE: // global
           _s8jdV::P64 = P64[Sp + 8];
           _c8nBM::P64 = R1 & 7;
           if (_c8nBM::P64 < 3) goto u8nCC; else goto u8nCD;
       u8nCC: // global
           if (_c8nBM::P64 < 2) goto c8nBI; else goto c8nBJ;
       c8nBI: // global
           R1 = _s8jdV::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8nBJ: // global
           I64[Sp + 8] = block_c8nBV_info;
           R1 = _s8jdV::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8nCJ; else goto c8nBX;
       u8nCJ: // global
           call _c8nBV(R1) args: 0, res: 0, upd: 0;
       c8nBX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8nCD: // global
           if (_c8nBM::P64 < 4) goto c8nBK; else goto c8nBL;
       c8nBK: // global
           I64[Sp + 8] = block_c8nCe_info;
           R1 = _s8jdV::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8nCK; else goto c8nCg;
       u8nCK: // global
           call _c8nCe(R1) args: 0, res: 0, upd: 0;
       c8nCg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8nBL: // global
           I64[Sp + 8] = block_c8nCt_info;
           R1 = _s8jdV::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8nCL; else goto c8nCv;
       u8nCL: // global
           call _c8nCt() args: 0, res: 0, upd: 0;
       c8nCv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nBE_info" {
     block_c8nBE_info:
         const _c8nBE;
         const 1;
         const 30;
 },
 _c8nBV() //  [R1]
         { []
         }
     {offset
       c8nBV: // global
           _c8nCB::P64 = R1 & 7;
           if (_c8nCB::P64 != 3) goto u8nCE; else goto u8nCF;
       u8nCE: // global
           if (_c8nCB::P64 != 4) goto c8nC3; else goto u8nCG;
       c8nC3: // global
           R1 = GHC.IO.Exception.HeapOverflow_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u8nCG: // global
           Sp = Sp + 8;
           call _c8nCq() args: 0, res: 0, upd: 0;
       u8nCF: // global
           Sp = Sp + 8;
           call _c8nCm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nBV_info" {
     block_c8nBV_info:
         const _c8nBV;
         const 0;
         const 30;
 },
 _c8nCe() //  [R1]
         { []
         }
     {offset
       c8nCe: // global
           if (R1 & 7 == 4) goto u8nCH; else goto u8nCI;
       u8nCH: // global
           Sp = Sp + 8;
           call _c8nCq() args: 0, res: 0, upd: 0;
       u8nCI: // global
           Sp = Sp + 8;
           call _c8nCm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nCe_info" {
     block_c8nCe_info:
         const _c8nCe;
         const 0;
         const 30;
 },
 _c8nCq() //  []
         { []
         }
     {offset
       c8nCq: // global
           R1 = GHC.IO.Exception.UserInterrupt_closure+4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8nCm() //  []
         { []
         }
     {offset
       c8nCm: // global
           R1 = GHC.IO.Exception.ThreadKilled_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8nCt() //  []
         { []
         }
     {offset
       c8nCt: // global
           R1 = GHC.IO.Exception.UserInterrupt_closure+4;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nCt_info" {
     block_c8nCt_info:
         const _c8nCt;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.919661676 UTC

[section ""data" . GHC.IO.Exception.$fOrdAsyncException_$c>=_closure" {
     GHC.IO.Exception.$fOrdAsyncException_$c>=_closure:
         const GHC.IO.Exception.$fOrdAsyncException_$c>=_info;
 },
 GHC.IO.Exception.$fOrdAsyncException_$c>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8nDD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8nDE; else goto c8nDF;
       c8nDE: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fOrdAsyncException_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8nDF: // global
           I64[Sp - 16] = block_c8nDu_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8nF3; else goto c8nDv;
       u8nF3: // global
           call _c8nDu(R1) args: 0, res: 0, upd: 0;
       c8nDv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdAsyncException_$c>=_info" {
     GHC.IO.Exception.$fOrdAsyncException_$c>=_info:
         const GHC.IO.Exception.$fOrdAsyncException_$c>=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8nDu() //  [R1]
         { []
         }
     {offset
       c8nDu: // global
           _s8je2::P64 = P64[Sp + 8];
           _c8nDC::P64 = R1 & 7;
           if (_c8nDC::P64 < 3) goto u8nEN; else goto u8nEO;
       u8nEN: // global
           if (_c8nDC::P64 < 2) goto c8nDy; else goto c8nDz;
       c8nDy: // global
           I64[Sp + 8] = block_c8nDI_info;
           R1 = _s8je2::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8nEZ; else goto c8nDK;
       u8nEZ: // global
           call _c8nDI(R1) args: 0, res: 0, upd: 0;
       c8nDK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8nDz: // global
           I64[Sp + 8] = block_c8nE5_info;
           R1 = _s8je2::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8nF0; else goto c8nE7;
       u8nF0: // global
           call _c8nE5(R1) args: 0, res: 0, upd: 0;
       c8nE7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8nEO: // global
           if (_c8nDC::P64 < 4) goto c8nDA; else goto c8nDB;
       c8nDA: // global
           I64[Sp + 8] = block_c8nEo_info;
           R1 = _s8je2::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8nF1; else goto c8nEq;
       u8nF1: // global
           call _c8nEo(R1) args: 0, res: 0, upd: 0;
       c8nEq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8nDB: // global
           I64[Sp + 8] = block_c8nED_info;
           R1 = _s8je2::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8nF2; else goto c8nEF;
       u8nF2: // global
           call _c8nED() args: 0, res: 0, upd: 0;
       c8nEF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nDu_info" {
     block_c8nDu_info:
         const _c8nDu;
         const 1;
         const 30;
 },
 _c8nDI() //  [R1]
         { []
         }
     {offset
       c8nDI: // global
           _c8nEM::P64 = R1 & 7;
           if (_c8nEM::P64 < 2) goto u8nER; else goto u8nEP;
       u8nER: // global
           Sp = Sp + 8;
           call _c8nEw() args: 0, res: 0, upd: 0;
       u8nEP: // global
           if (_c8nEM::P64 != 3) goto u8nET; else goto u8nET;
       u8nET: // global
           Sp = Sp + 8;
           call _c8nEA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nDI_info" {
     block_c8nDI_info:
         const _c8nDI;
         const 0;
         const 30;
 },
 _c8nE5() //  [R1]
         { []
         }
     {offset
       c8nE5: // global
           _c8nEL::P64 = R1 & 7;
           if (_c8nEL::P64 != 3) goto u8nEQ; else goto u8nEU;
       u8nEQ: // global
           if (_c8nEL::P64 != 4) goto u8nEW; else goto u8nEV;
       u8nEW: // global
           Sp = Sp + 8;
           call _c8nEw() args: 0, res: 0, upd: 0;
       u8nEV: // global
           Sp = Sp + 8;
           goto u8nF7;
       u8nEU: // global
           Sp = Sp + 8;
           goto u8nF7;
       u8nF7: // global
           call _c8nEA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nE5_info" {
     block_c8nE5_info:
         const _c8nE5;
         const 0;
         const 30;
 },
 _c8nEo() //  [R1]
         { []
         }
     {offset
       c8nEo: // global
           if (R1 & 7 == 4) goto u8nEX; else goto u8nEY;
       u8nEX: // global
           Sp = Sp + 8;
           call _c8nEA() args: 0, res: 0, upd: 0;
       u8nEY: // global
           Sp = Sp + 8;
           call _c8nEw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nEo_info" {
     block_c8nEo_info:
         const _c8nEo;
         const 0;
         const 30;
 },
 _c8nEA() //  []
         { []
         }
     {offset
       c8nEA: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8nEw() //  []
         { []
         }
     {offset
       c8nEw: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8nED() //  []
         { []
         }
     {offset
       c8nED: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nED_info" {
     block_c8nED_info:
         const _c8nED;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.933931007 UTC

[section ""data" . GHC.IO.Exception.$fOrdAsyncException_$c>_closure" {
     GHC.IO.Exception.$fOrdAsyncException_$c>_closure:
         const GHC.IO.Exception.$fOrdAsyncException_$c>_info;
 },
 GHC.IO.Exception.$fOrdAsyncException_$c>_entry() //  [R2, R3]
         { []
         }
     {offset
       c8nFQ: // global
           _s8je9::P64 = R3;
           R3 = R2;
           R2 = _s8je9::P64;
           call GHC.IO.Exception.$fOrdAsyncException_$c<_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdAsyncException_$c>_info" {
     GHC.IO.Exception.$fOrdAsyncException_$c>_info:
         const GHC.IO.Exception.$fOrdAsyncException_$c>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.939194666 UTC

[section ""data" . GHC.IO.Exception.$fOrdAsyncException_$cmin_closure" {
     GHC.IO.Exception.$fOrdAsyncException_$cmin_closure:
         const GHC.IO.Exception.$fOrdAsyncException_$cmin_info;
 },
 GHC.IO.Exception.$fOrdAsyncException_$cmin_entry() //  [R2, R3]
         { []
         }
     {offset
       c8nGa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8nGb; else goto c8nGc;
       c8nGb: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fOrdAsyncException_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8nGc: // global
           I64[Sp - 16] = block_c8nG1_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8nH5; else goto c8nG2;
       u8nH5: // global
           call _c8nG1(R1) args: 0, res: 0, upd: 0;
       c8nG2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdAsyncException_$cmin_info" {
     GHC.IO.Exception.$fOrdAsyncException_$cmin_info:
         const GHC.IO.Exception.$fOrdAsyncException_$cmin_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8nG1() //  [R1]
         { []
         }
     {offset
       c8nG1: // global
           _s8jea::P64 = P64[Sp + 8];
           _c8nG9::P64 = R1 & 7;
           if (_c8nG9::P64 < 3) goto u8nGZ; else goto u8nH0;
       u8nGZ: // global
           if (_c8nG9::P64 < 2) goto c8nG5; else goto c8nG6;
       c8nG5: // global
           I64[Sp + 8] = block_c8nGf_info;
           R1 = _s8jea::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8nH2; else goto c8nGh;
       u8nH2: // global
           call _c8nGf() args: 0, res: 0, upd: 0;
       c8nGh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8nG6: // global
           I64[Sp + 8] = block_c8nGo_info;
           R1 = _s8jea::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8nH3; else goto c8nGq;
       u8nH3: // global
           call _c8nGo(R1) args: 0, res: 0, upd: 0;
       c8nGq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8nH0: // global
           if (_c8nG9::P64 < 4) goto c8nG7; else goto c8nG8;
       c8nG7: // global
           I64[Sp + 8] = block_c8nGH_info;
           R1 = _s8jea::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8nH4; else goto c8nGJ;
       u8nH4: // global
           call _c8nGH(R1) args: 0, res: 0, upd: 0;
       c8nGJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8nG8: // global
           R1 = _s8jea::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nG1_info" {
     block_c8nG1_info:
         const _c8nG1;
         const 1;
         const 30;
 },
 _c8nGf() //  []
         { []
         }
     {offset
       c8nGf: // global
           R1 = GHC.IO.Exception.StackOverflow_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nGf_info" {
     block_c8nGf_info:
         const _c8nGf;
         const 0;
         const 30;
 },
 _c8nGo() //  [R1]
         { []
         }
     {offset
       c8nGo: // global
           _c8nGY::P64 = R1 & 7;
           if (_c8nGY::P64 == 3) goto c8nGE; else goto u8nH1;
       u8nH1: // global
           if (_c8nGY::P64 == 4) goto c8nGE; else goto c8nGw;
       c8nGE: // global
           R1 = GHC.IO.Exception.HeapOverflow_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8nGw: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nGo_info" {
     block_c8nGo_info:
         const _c8nGo;
         const 0;
         const 30;
 },
 _c8nGH() //  [R1]
         { []
         }
     {offset
       c8nGH: // global
           if (R1 & 7 == 4) goto c8nGT; else goto c8nGP;
       c8nGT: // global
           R1 = GHC.IO.Exception.ThreadKilled_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8nGP: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nGH_info" {
     block_c8nGH_info:
         const _c8nGH;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.949148393 UTC

[section ""data" . GHC.IO.Exception.$fOrdAsyncException_closure" {
     GHC.IO.Exception.$fOrdAsyncException_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.IO.Exception.$fEqAsyncException_closure+1;
         const GHC.IO.Exception.$fOrdAsyncException_$ccompare_closure+2;
         const GHC.IO.Exception.$fOrdAsyncException_$c<_closure+2;
         const GHC.IO.Exception.$fOrdAsyncException_$c<=_closure+2;
         const GHC.IO.Exception.$fOrdAsyncException_$c>_closure+2;
         const GHC.IO.Exception.$fOrdAsyncException_$c>=_closure+2;
         const GHC.IO.Exception.$fOrdAsyncException_$cmax_closure+2;
         const GHC.IO.Exception.$fOrdAsyncException_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.951285667 UTC

[section ""cstring" . GHC.IO.Exception.$trModule4_bytes" {
     GHC.IO.Exception.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.952971501 UTC

[section ""data" . GHC.IO.Exception.$trModule3_closure" {
     GHC.IO.Exception.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.954754326 UTC

[section ""cstring" . GHC.IO.Exception.$trModule2_bytes" {
     GHC.IO.Exception.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.956905966 UTC

[section ""data" . GHC.IO.Exception.$trModule1_closure" {
     GHC.IO.Exception.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.958658395 UTC

[section ""data" . GHC.IO.Exception.$trModule_closure" {
     GHC.IO.Exception.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.Exception.$trModule3_closure+1;
         const GHC.IO.Exception.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.960370523 UTC

[section ""data" . $krep_r8j3f_closure" {
     $krep_r8j3f_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.962448423 UTC

[section ""data" . $krep1_r8j3g_closure" {
     $krep1_r8j3g_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Foreign.C.Types.$tcCInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.964175412 UTC

[section ""data" . $krep2_r8j3h_closure" {
     $krep2_r8j3h_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.965892084 UTC

[section ""data" . $krep3_r8j3i_closure" {
     $krep3_r8j3i_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Handle.Types.$tcHandle_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.967585876 UTC

[section ""data" . $krep4_r8j3j_closure" {
     $krep4_r8j3j_closure:
         const :_con_info;
         const $krep1_r8j3g_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.969301525 UTC

[section ""data" . $krep5_r8j3k_closure" {
     $krep5_r8j3k_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep4_r8j3j_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.971004894 UTC

[section ""data" . $krep6_r8j3l_closure" {
     $krep6_r8j3l_closure:
         const :_con_info;
         const $krep3_r8j3i_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.972744038 UTC

[section ""data" . $krep7_r8j3m_closure" {
     $krep7_r8j3m_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep6_r8j3l_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.974471209 UTC

[section ""data" . $krep8_r8j3n_closure" {
     $krep8_r8j3n_closure:
         const :_con_info;
         const $krep2_r8j3h_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.976185282 UTC

[section ""data" . $krep9_r8j3o_closure" {
     $krep9_r8j3o_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep8_r8j3n_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.978152357 UTC

[section ""data" . $krep10_r8j3p_closure" {
     $krep10_r8j3p_closure:
         const :_con_info;
         const $krep9_r8j3o_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.979810016 UTC

[section ""data" . $krep11_r8j3q_closure" {
     $krep11_r8j3q_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep10_r8j3p_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.981952201 UTC

[section ""data" . $krep12_r8j3r_closure" {
     $krep12_r8j3r_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.983709477 UTC

[section ""data" . $krep13_r8j3s_closure" {
     $krep13_r8j3s_closure:
         const :_con_info;
         const $krep12_r8j3r_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.985429633 UTC

[section ""data" . $krep14_r8j3t_closure" {
     $krep14_r8j3t_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Exception.$tcException_closure;
         const $krep13_r8j3s_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.987112058 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar5_bytes" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar5_bytes:
         I8[] [66,108,111,99,107,101,100,73,110,100,101,102,105,110,105,116,101,108,121,79,110,77,86,97,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.988723899 UTC

[section ""data" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar4_closure" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar4_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar5_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.990985202 UTC

[section ""data" . GHC.IO.Exception.$tcBlockedIndefinitelyOnMVar_closure" {
     GHC.IO.Exception.$tcBlockedIndefinitelyOnMVar_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar4_closure+1;
         const GHC.Types.krep$*_closure;
         const 5532209509574600699;
         const 13011219155706606307;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.992714582 UTC

[section ""data" . GHC.IO.Exception.$tc'BlockedIndefinitelyOnMVar1_closure" {
     GHC.IO.Exception.$tc'BlockedIndefinitelyOnMVar1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Exception.$tcBlockedIndefinitelyOnMVar_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.994356908 UTC

[section ""cstring" . GHC.IO.Exception.$tc'BlockedIndefinitelyOnMVar3_bytes" {
     GHC.IO.Exception.$tc'BlockedIndefinitelyOnMVar3_bytes:
         I8[] [39,66,108,111,99,107,101,100,73,110,100,101,102,105,110,105,116,101,108,121,79,110,77,86,97,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.995955569 UTC

[section ""data" . GHC.IO.Exception.$tc'BlockedIndefinitelyOnMVar2_closure" {
     GHC.IO.Exception.$tc'BlockedIndefinitelyOnMVar2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'BlockedIndefinitelyOnMVar3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:26.997717882 UTC

[section ""data" . GHC.IO.Exception.$tc'BlockedIndefinitelyOnMVar_closure" {
     GHC.IO.Exception.$tc'BlockedIndefinitelyOnMVar_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'BlockedIndefinitelyOnMVar2_closure+1;
         const GHC.IO.Exception.$tc'BlockedIndefinitelyOnMVar1_closure+1;
         const 6834741829236713234;
         const 5957659317954655195;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.00094022 UTC

[section ""data" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar3_closure" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar3_closure:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar3_entry() //  [R1]
         { []
         }
     {offset
       c8nIh: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c8nIi; else goto c8nIj;
       c8nIi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8nIj: // global
           (_c8nI9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8nI9::I64 == 0) goto c8nIb; else goto c8nIa;
       c8nIb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8nIa: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8nI9::I64;
           I64[Sp - 24] = block_c8nIc_info;
           R6 = 0;
           R5 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar4_closure+1;
           R4 = GHC.IO.Exception.$trModule_closure+1;
           R3 = 13011219155706606307;
           R2 = 5532209509574600699;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar3_info" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar3_info:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar3_entry;
         const 0;
         const 4294967317;
         const S8ji8_srt+560;
 },
 _c8nIc() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c8nIc: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c8nId() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nIc_info" {
     block_c8nIc_info:
         const _c8nIc;
         const 0;
         const 30;
 },
 _c8nId() //  []
         { []
         }
     {offset
       c8nId: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8nIm; else goto c8nIl;
       c8nIm: // global
           HpAlloc = 48;
           I64[Sp] = block_c8nId_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c8nIl: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8nId_info" {
     block_c8nId_info:
         const _c8nId;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.008067559 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM5_bytes" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM5_bytes:
         I8[] [66,108,111,99,107,101,100,73,110,100,101,102,105,110,105,116,101,108,121,79,110,83,84,77]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.009743738 UTC

[section ""data" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM4_closure" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM4_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM5_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.012035204 UTC

[section ""data" . GHC.IO.Exception.$tcBlockedIndefinitelyOnSTM_closure" {
     GHC.IO.Exception.$tcBlockedIndefinitelyOnSTM_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM4_closure+1;
         const GHC.Types.krep$*_closure;
         const 13946898568638194917;
         const 3504019511763148288;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.013861905 UTC

[section ""data" . GHC.IO.Exception.$tc'BlockedIndefinitelyOnSTM1_closure" {
     GHC.IO.Exception.$tc'BlockedIndefinitelyOnSTM1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Exception.$tcBlockedIndefinitelyOnSTM_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.015452672 UTC

[section ""cstring" . GHC.IO.Exception.$tc'BlockedIndefinitelyOnSTM3_bytes" {
     GHC.IO.Exception.$tc'BlockedIndefinitelyOnSTM3_bytes:
         I8[] [39,66,108,111,99,107,101,100,73,110,100,101,102,105,110,105,116,101,108,121,79,110,83,84,77]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.017023255 UTC

[section ""data" . GHC.IO.Exception.$tc'BlockedIndefinitelyOnSTM2_closure" {
     GHC.IO.Exception.$tc'BlockedIndefinitelyOnSTM2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'BlockedIndefinitelyOnSTM3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.018731221 UTC

[section ""data" . GHC.IO.Exception.$tc'BlockedIndefinitelyOnSTM_closure" {
     GHC.IO.Exception.$tc'BlockedIndefinitelyOnSTM_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'BlockedIndefinitelyOnSTM2_closure+1;
         const GHC.IO.Exception.$tc'BlockedIndefinitelyOnSTM1_closure+1;
         const 13856829326869447687;
         const 12209020643191939554;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.022519337 UTC

[section ""data" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM3_closure" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM3_closure:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM3_entry() //  [R1]
         { []
         }
     {offset
       c8nJ0: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c8nJ1; else goto c8nJ2;
       c8nJ1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8nJ2: // global
           (_c8nIS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8nIS::I64 == 0) goto c8nIU; else goto c8nIT;
       c8nIU: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8nIT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8nIS::I64;
           I64[Sp - 24] = block_c8nIV_info;
           R6 = 0;
           R5 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM4_closure+1;
           R4 = GHC.IO.Exception.$trModule_closure+1;
           R3 = 3504019511763148288;
           R2 = 13946898568638194917;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM3_info" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM3_info:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM3_entry;
         const 0;
         const 4294967317;
         const S8ji8_srt+560;
 },
 _c8nIV() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c8nIV: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c8nIW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nIV_info" {
     block_c8nIV_info:
         const _c8nIV;
         const 0;
         const 30;
 },
 _c8nIW() //  []
         { []
         }
     {offset
       c8nIW: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8nJ5; else goto c8nJ4;
       c8nJ5: // global
           HpAlloc = 48;
           I64[Sp] = block_c8nIW_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c8nJ4: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8nIW_info" {
     block_c8nIW_info:
         const _c8nIW;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.029341379 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionDeadlock5_bytes" {
     GHC.IO.Exception.$fExceptionDeadlock5_bytes:
         I8[] [68,101,97,100,108,111,99,107]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.031040315 UTC

[section ""data" . GHC.IO.Exception.$fExceptionDeadlock4_closure" {
     GHC.IO.Exception.$fExceptionDeadlock4_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$fExceptionDeadlock5_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.032742748 UTC

[section ""data" . GHC.IO.Exception.$tcDeadlock_closure" {
     GHC.IO.Exception.$tcDeadlock_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$fExceptionDeadlock4_closure+1;
         const GHC.Types.krep$*_closure;
         const 18363794241794644491;
         const 11186984538024031318;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.0345751 UTC

[section ""data" . GHC.IO.Exception.$tc'Deadlock1_closure" {
     GHC.IO.Exception.$tc'Deadlock1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Exception.$tcDeadlock_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.036256715 UTC

[section ""cstring" . GHC.IO.Exception.$tc'Deadlock3_bytes" {
     GHC.IO.Exception.$tc'Deadlock3_bytes:
         I8[] [39,68,101,97,100,108,111,99,107]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.037973399 UTC

[section ""data" . GHC.IO.Exception.$tc'Deadlock2_closure" {
     GHC.IO.Exception.$tc'Deadlock2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'Deadlock3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.040337146 UTC

[section ""data" . GHC.IO.Exception.$tc'Deadlock_closure" {
     GHC.IO.Exception.$tc'Deadlock_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'Deadlock2_closure+1;
         const GHC.IO.Exception.$tc'Deadlock1_closure+1;
         const 8732553870978897242;
         const 16079179228471909431;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.044079135 UTC

[section ""data" . GHC.IO.Exception.$fExceptionDeadlock3_closure" {
     GHC.IO.Exception.$fExceptionDeadlock3_closure:
         const GHC.IO.Exception.$fExceptionDeadlock3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionDeadlock3_entry() //  [R1]
         { []
         }
     {offset
       c8nJJ: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c8nJK; else goto c8nJL;
       c8nJK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8nJL: // global
           (_c8nJB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8nJB::I64 == 0) goto c8nJD; else goto c8nJC;
       c8nJD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8nJC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8nJB::I64;
           I64[Sp - 24] = block_c8nJE_info;
           R6 = 0;
           R5 = GHC.IO.Exception.$fExceptionDeadlock4_closure+1;
           R4 = GHC.IO.Exception.$trModule_closure+1;
           R3 = 11186984538024031318;
           R2 = 18363794241794644491;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionDeadlock3_info" {
     GHC.IO.Exception.$fExceptionDeadlock3_info:
         const GHC.IO.Exception.$fExceptionDeadlock3_entry;
         const 0;
         const 4294967317;
         const S8ji8_srt+560;
 },
 _c8nJE() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c8nJE: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c8nJF() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nJE_info" {
     block_c8nJE_info:
         const _c8nJE;
         const 0;
         const 30;
 },
 _c8nJF() //  []
         { []
         }
     {offset
       c8nJF: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8nJO; else goto c8nJN;
       c8nJO: // global
           HpAlloc = 48;
           I64[Sp] = block_c8nJF_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c8nJN: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8nJF_info" {
     block_c8nJF_info:
         const _c8nJF;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.05256601 UTC

[section ""data" . GHC.IO.Exception.$fExceptionDeadlock_$cfromException_closure" {
     GHC.IO.Exception.$fExceptionDeadlock_$cfromException_closure:
         const GHC.IO.Exception.$fExceptionDeadlock_$cfromException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionDeadlock_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c8nKh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8nKl; else goto c8nKm;
       c8nKl: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionDeadlock_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8nKm: // global
           I64[Sp - 8] = block_c8nKe_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8nKH; else goto c8nKf;
       u8nKH: // global
           call _c8nKe(R1) args: 0, res: 0, upd: 0;
       c8nKf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionDeadlock_$cfromException_info" {
     GHC.IO.Exception.$fExceptionDeadlock_$cfromException_info:
         const GHC.IO.Exception.$fExceptionDeadlock_$cfromException_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S8ji8_srt+568;
 },
 _c8nKe() //  [R1]
         { []
         }
     {offset
       c8nKe: // global
           I64[Sp - 8] = block_c8nKk_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nKe_info" {
     block_c8nKe_info:
         const _c8nKe;
         const 0;
         const 21474836510;
         const S8ji8_srt+568;
 },
 _c8nKk() //  [R1]
         { []
         }
     {offset
       c8nKk: // global
           I64[Sp] = block_c8nKr_info;
           R3 = GHC.IO.Exception.$fExceptionDeadlock3_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nKk_info" {
     block_c8nKk_info:
         const _c8nKk;
         const 1;
         const 21474836510;
         const S8ji8_srt+568;
 },
 _c8nKr() //  [R1]
         { []
         }
     {offset
       c8nKr: // global
           if (R1 & 7 == 1) goto c8nKy; else goto c8nKC;
       c8nKy: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8nKC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8nKF; else goto c8nKE;
       c8nKF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8nKE: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nKr_info" {
     block_c8nKr_info:
         const _c8nKr;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.061727874 UTC

[section ""data" . GHC.IO.Exception.$fExceptionDeadlock_closure" {
     GHC.IO.Exception.$fExceptionDeadlock_closure:
         const GHC.Exception.C:Exception_con_info;
         const GHC.IO.Exception.$fExceptionDeadlock3_closure;
         const GHC.IO.Exception.$fShowDeadlock_closure+1;
         const GHC.IO.Exception.$fExceptionDeadlock_$ctoException_closure+1;
         const GHC.IO.Exception.$fExceptionDeadlock_$cfromException_closure+1;
         const GHC.IO.Exception.$fExceptionDeadlock_$cshow_closure+1;
         const 0;
 },
 section ""data" . GHC.IO.Exception.$fExceptionDeadlock_$ctoException_closure" {
     GHC.IO.Exception.$fExceptionDeadlock_$ctoException_closure:
         const GHC.IO.Exception.$fExceptionDeadlock_$ctoException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionDeadlock_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c8nL8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8nLc; else goto c8nLb;
       c8nLc: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionDeadlock_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8nLb: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = GHC.IO.Exception.$fExceptionDeadlock_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionDeadlock_$ctoException_info" {
     GHC.IO.Exception.$fExceptionDeadlock_$ctoException_info:
         const GHC.IO.Exception.$fExceptionDeadlock_$ctoException_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S8ji8_srt+592;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.065900549 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionAllocationLimitExceeded5_bytes" {
     GHC.IO.Exception.$fExceptionAllocationLimitExceeded5_bytes:
         I8[] [65,108,108,111,99,97,116,105,111,110,76,105,109,105,116,69,120,99,101,101,100,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.06766763 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAllocationLimitExceeded4_closure" {
     GHC.IO.Exception.$fExceptionAllocationLimitExceeded4_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded5_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.069803625 UTC

[section ""data" . GHC.IO.Exception.$tcAllocationLimitExceeded_closure" {
     GHC.IO.Exception.$tcAllocationLimitExceeded_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded4_closure+1;
         const GHC.Types.krep$*_closure;
         const 13160607835047152551;
         const 6828489586181860176;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.071576532 UTC

[section ""data" . GHC.IO.Exception.$tc'AllocationLimitExceeded1_closure" {
     GHC.IO.Exception.$tc'AllocationLimitExceeded1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Exception.$tcAllocationLimitExceeded_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.07384362 UTC

[section ""cstring" . GHC.IO.Exception.$tc'AllocationLimitExceeded3_bytes" {
     GHC.IO.Exception.$tc'AllocationLimitExceeded3_bytes:
         I8[] [39,65,108,108,111,99,97,116,105,111,110,76,105,109,105,116,69,120,99,101,101,100,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.075545646 UTC

[section ""data" . GHC.IO.Exception.$tc'AllocationLimitExceeded2_closure" {
     GHC.IO.Exception.$tc'AllocationLimitExceeded2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'AllocationLimitExceeded3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.077534935 UTC

[section ""data" . GHC.IO.Exception.$tc'AllocationLimitExceeded_closure" {
     GHC.IO.Exception.$tc'AllocationLimitExceeded_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'AllocationLimitExceeded2_closure+1;
         const GHC.IO.Exception.$tc'AllocationLimitExceeded1_closure+1;
         const 14911686161474736107;
         const 16735957051754280572;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.080823546 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAllocationLimitExceeded3_closure" {
     GHC.IO.Exception.$fExceptionAllocationLimitExceeded3_closure:
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionAllocationLimitExceeded3_entry() //  [R1]
         { []
         }
     {offset
       c8nLB: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c8nLC; else goto c8nLD;
       c8nLC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8nLD: // global
           (_c8nLt::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8nLt::I64 == 0) goto c8nLv; else goto c8nLu;
       c8nLv: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8nLu: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8nLt::I64;
           I64[Sp - 24] = block_c8nLw_info;
           R6 = 0;
           R5 = GHC.IO.Exception.$fExceptionAllocationLimitExceeded4_closure+1;
           R4 = GHC.IO.Exception.$trModule_closure+1;
           R3 = 6828489586181860176;
           R2 = 13160607835047152551;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionAllocationLimitExceeded3_info" {
     GHC.IO.Exception.$fExceptionAllocationLimitExceeded3_info:
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded3_entry;
         const 0;
         const 4294967317;
         const S8ji8_srt+560;
 },
 _c8nLw() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c8nLw: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c8nLx() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nLw_info" {
     block_c8nLw_info:
         const _c8nLw;
         const 0;
         const 30;
 },
 _c8nLx() //  []
         { []
         }
     {offset
       c8nLx: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8nLG; else goto c8nLF;
       c8nLG: // global
           HpAlloc = 48;
           I64[Sp] = block_c8nLx_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c8nLF: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8nLx_info" {
     block_c8nLx_info:
         const _c8nLx;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.087778344 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionCompactionFailed4_bytes" {
     GHC.IO.Exception.$fExceptionCompactionFailed4_bytes:
         I8[] [67,111,109,112,97,99,116,105,111,110,70,97,105,108,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.089497309 UTC

[section ""data" . GHC.IO.Exception.$fExceptionCompactionFailed3_closure" {
     GHC.IO.Exception.$fExceptionCompactionFailed3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$fExceptionCompactionFailed4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.091191867 UTC

[section ""data" . GHC.IO.Exception.$tcCompactionFailed_closure" {
     GHC.IO.Exception.$tcCompactionFailed_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$fExceptionCompactionFailed3_closure+1;
         const GHC.Types.krep$*_closure;
         const 7633933266579528523;
         const 6393060685738357435;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.093023077 UTC

[section ""data" . $krep15_r8j3u_closure" {
     $krep15_r8j3u_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Exception.$tcCompactionFailed_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.09506452 UTC

[section ""data" . GHC.IO.Exception.$tc'CompactionFailed1_closure" {
     GHC.IO.Exception.$tc'CompactionFailed1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r8j3o_closure+1;
         const $krep15_r8j3u_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.096715963 UTC

[section ""cstring" . GHC.IO.Exception.$tc'CompactionFailed3_bytes" {
     GHC.IO.Exception.$tc'CompactionFailed3_bytes:
         I8[] [39,67,111,109,112,97,99,116,105,111,110,70,97,105,108,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.098435543 UTC

[section ""data" . GHC.IO.Exception.$tc'CompactionFailed2_closure" {
     GHC.IO.Exception.$tc'CompactionFailed2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'CompactionFailed3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.100169456 UTC

[section ""data" . GHC.IO.Exception.$tc'CompactionFailed_closure" {
     GHC.IO.Exception.$tc'CompactionFailed_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'CompactionFailed2_closure+1;
         const GHC.IO.Exception.$tc'CompactionFailed1_closure+4;
         const 5917738941224226344;
         const 8436844331187314000;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.103480064 UTC

[section ""data" . GHC.IO.Exception.$fExceptionCompactionFailed2_closure" {
     GHC.IO.Exception.$fExceptionCompactionFailed2_closure:
         const GHC.IO.Exception.$fExceptionCompactionFailed2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionCompactionFailed2_entry() //  [R1]
         { []
         }
     {offset
       c8nMl: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c8nMm; else goto c8nMn;
       c8nMm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8nMn: // global
           (_c8nMd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8nMd::I64 == 0) goto c8nMf; else goto c8nMe;
       c8nMf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8nMe: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8nMd::I64;
           I64[Sp - 24] = block_c8nMg_info;
           R6 = 0;
           R5 = GHC.IO.Exception.$fExceptionCompactionFailed3_closure+1;
           R4 = GHC.IO.Exception.$trModule_closure+1;
           R3 = 6393060685738357435;
           R2 = 7633933266579528523;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionCompactionFailed2_info" {
     GHC.IO.Exception.$fExceptionCompactionFailed2_info:
         const GHC.IO.Exception.$fExceptionCompactionFailed2_entry;
         const 0;
         const 4294967317;
         const S8ji8_srt+560;
 },
 _c8nMg() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c8nMg: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c8nMh() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nMg_info" {
     block_c8nMg_info:
         const _c8nMg;
         const 0;
         const 30;
 },
 _c8nMh() //  []
         { []
         }
     {offset
       c8nMh: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8nMq; else goto c8nMp;
       c8nMq: // global
           HpAlloc = 48;
           I64[Sp] = block_c8nMh_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c8nMp: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8nMh_info" {
     block_c8nMh_info:
         const _c8nMh;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.111323548 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionAssertionFailed4_bytes" {
     GHC.IO.Exception.$fExceptionAssertionFailed4_bytes:
         I8[] [65,115,115,101,114,116,105,111,110,70,97,105,108,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.113037604 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAssertionFailed3_closure" {
     GHC.IO.Exception.$fExceptionAssertionFailed3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$fExceptionAssertionFailed4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.114887693 UTC

[section ""data" . GHC.IO.Exception.$tcAssertionFailed_closure" {
     GHC.IO.Exception.$tcAssertionFailed_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$fExceptionAssertionFailed3_closure+1;
         const GHC.Types.krep$*_closure;
         const 7013231185527166567;
         const 11481669896152761825;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.116712385 UTC

[section ""data" . $krep16_r8j3v_closure" {
     $krep16_r8j3v_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Exception.$tcAssertionFailed_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.118409485 UTC

[section ""data" . GHC.IO.Exception.$tc'AssertionFailed1_closure" {
     GHC.IO.Exception.$tc'AssertionFailed1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r8j3o_closure+1;
         const $krep16_r8j3v_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.120080152 UTC

[section ""cstring" . GHC.IO.Exception.$tc'AssertionFailed3_bytes" {
     GHC.IO.Exception.$tc'AssertionFailed3_bytes:
         I8[] [39,65,115,115,101,114,116,105,111,110,70,97,105,108,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.122089073 UTC

[section ""data" . GHC.IO.Exception.$tc'AssertionFailed2_closure" {
     GHC.IO.Exception.$tc'AssertionFailed2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'AssertionFailed3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.123802706 UTC

[section ""data" . GHC.IO.Exception.$tc'AssertionFailed_closure" {
     GHC.IO.Exception.$tc'AssertionFailed_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'AssertionFailed2_closure+1;
         const GHC.IO.Exception.$tc'AssertionFailed1_closure+4;
         const 6421416346863765662;
         const 16131786633010342764;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.127218837 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAssertionFailed2_closure" {
     GHC.IO.Exception.$fExceptionAssertionFailed2_closure:
         const GHC.IO.Exception.$fExceptionAssertionFailed2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionAssertionFailed2_entry() //  [R1]
         { []
         }
     {offset
       c8nN5: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c8nN6; else goto c8nN7;
       c8nN6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8nN7: // global
           (_c8nMX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8nMX::I64 == 0) goto c8nMZ; else goto c8nMY;
       c8nMZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8nMY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8nMX::I64;
           I64[Sp - 24] = block_c8nN0_info;
           R6 = 0;
           R5 = GHC.IO.Exception.$fExceptionAssertionFailed3_closure+1;
           R4 = GHC.IO.Exception.$trModule_closure+1;
           R3 = 11481669896152761825;
           R2 = 7013231185527166567;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionAssertionFailed2_info" {
     GHC.IO.Exception.$fExceptionAssertionFailed2_info:
         const GHC.IO.Exception.$fExceptionAssertionFailed2_entry;
         const 0;
         const 4294967317;
         const S8ji8_srt+560;
 },
 _c8nN0() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c8nN0: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c8nN1() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nN0_info" {
     block_c8nN0_info:
         const _c8nN0;
         const 0;
         const 30;
 },
 _c8nN1() //  []
         { []
         }
     {offset
       c8nN1: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8nNa; else goto c8nN9;
       c8nNa: // global
           HpAlloc = 48;
           I64[Sp] = block_c8nN1_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c8nN9: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8nN1_info" {
     block_c8nN1_info:
         const _c8nN1;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.1361904 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAssertionFailed_$cfromException_closure" {
     GHC.IO.Exception.$fExceptionAssertionFailed_$cfromException_closure:
         const GHC.IO.Exception.$fExceptionAssertionFailed_$cfromException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionAssertionFailed_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c8nND: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8nNH; else goto c8nNI;
       c8nNH: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionAssertionFailed_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8nNI: // global
           I64[Sp - 8] = block_c8nNA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8nO3; else goto c8nNB;
       u8nO3: // global
           call _c8nNA(R1) args: 0, res: 0, upd: 0;
       c8nNB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionAssertionFailed_$cfromException_info" {
     GHC.IO.Exception.$fExceptionAssertionFailed_$cfromException_info:
         const GHC.IO.Exception.$fExceptionAssertionFailed_$cfromException_entry;
         const 0;
         const 416611827726;
         const 4294967301;
         const S8ji8_srt+568;
 },
 _c8nNA() //  [R1]
         { []
         }
     {offset
       c8nNA: // global
           I64[Sp - 8] = block_c8nNG_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nNA_info" {
     block_c8nNA_info:
         const _c8nNA;
         const 0;
         const 279172874270;
         const S8ji8_srt+568;
 },
 _c8nNG() //  [R1]
         { []
         }
     {offset
       c8nNG: // global
           I64[Sp] = block_c8nNN_info;
           R3 = GHC.IO.Exception.$fExceptionAssertionFailed2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nNG_info" {
     block_c8nNG_info:
         const _c8nNG;
         const 1;
         const 279172874270;
         const S8ji8_srt+568;
 },
 _c8nNN() //  [R1]
         { []
         }
     {offset
       c8nNN: // global
           if (R1 & 7 == 1) goto c8nNU; else goto c8nNY;
       c8nNU: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8nNY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8nO1; else goto c8nO0;
       c8nO1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8nO0: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nNN_info" {
     block_c8nNN_info:
         const _c8nNN;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.145940876 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAssertionFailed_closure" {
     GHC.IO.Exception.$fExceptionAssertionFailed_closure:
         const GHC.Exception.C:Exception_con_info;
         const GHC.IO.Exception.$fExceptionAssertionFailed2_closure;
         const GHC.IO.Exception.$fShowAssertionFailed_closure+1;
         const GHC.IO.Exception.$fExceptionAssertionFailed_$ctoException_closure+1;
         const GHC.IO.Exception.$fExceptionAssertionFailed_$cfromException_closure+1;
         const GHC.IO.Exception.$fExceptionAssertionFailed1_closure+1;
         const 0;
 },
 section ""data" . GHC.IO.Exception.$fExceptionAssertionFailed_$ctoException_closure" {
     GHC.IO.Exception.$fExceptionAssertionFailed_$ctoException_closure:
         const GHC.IO.Exception.$fExceptionAssertionFailed_$ctoException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionAssertionFailed_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c8nOu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8nOy; else goto c8nOx;
       c8nOy: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionAssertionFailed_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8nOx: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = GHC.IO.Exception.$fExceptionAssertionFailed_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionAssertionFailed_$ctoException_info" {
     GHC.IO.Exception.$fExceptionAssertionFailed_$ctoException_info:
         const GHC.IO.Exception.$fExceptionAssertionFailed_$ctoException_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S8ji8_srt+624;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.150079955 UTC

[section ""cstring" . lvl38_r8j3w_bytes" {
     lvl38_r8j3w_bytes:
         I8[] [65,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,10]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.159109164 UTC

[section ""data" . GHC.IO.Exception.assertError1_closure" {
     GHC.IO.Exception.assertError1_closure:
         const GHC.IO.Exception.assertError1_info;
         const 0;
 },
 sat_s8jfa_entry() //  [R1]
         { []
         }
     {offset
       c8nPc: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8nPd; else goto c8nPe;
       c8nPd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8nPe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c8nPa_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8jfa_info" {
     sat_s8jfa_info:
         const sat_s8jfa_entry;
         const 1;
         const 4294967312;
         const S8ji8_srt+640;
 },
 _c8nPa() //  [R1]
         { []
         }
     {offset
       c8nPa: // global
           R3 = R1;
           R2 = GHC.Exception.errorCallWithCallStackException9_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8nPa_info" {
     block_c8nPa_info:
         const _c8nPa;
         const 0;
         const 4294967326;
         const S8ji8_srt+640;
 },
 n_s8jf5_entry() //  [R1]
         { []
         }
     {offset
       c8nPm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8nPn; else goto c8nPo;
       c8nPn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8nPo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c8nP0_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8nPv; else goto c8nP1;
       u8nPv: // global
           call _c8nP0(R1) args: 0, res: 0, upd: 0;
       c8nP1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . n_s8jf5_info" {
     n_s8jf5_info:
         const n_s8jf5_entry;
         const 1;
         const 12884901904;
         const S8ji8_srt+640;
 },
 _c8nP0() //  [R1]
         { []
         }
     {offset
       c8nP0: // global
           if (R1 & 7 == 1) goto c8nPj; else goto c8nPk;
       c8nPj: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c8nPk: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8nPu; else goto c8nPt;
       c8nPu: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c8nPt: // global
           I64[Hp - 40] = sat_s8jfa_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Exception.errorCallWithCallStackException11_closure;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8nP0_info" {
     block_c8nP0_info:
         const _c8nP0;
         const 0;
         const 12884901918;
         const S8ji8_srt+640;
 },
 sat_s8jff_entry() //  [R1]
         { []
         }
     {offset
       c8nPK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8nPL; else goto c8nPM;
       c8nPL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8nPM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.IO.Exception.untangle2_closure;
           Sp = Sp - 16;
           call Data.OldList.prependToAll_entry(R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8jff_info" {
     sat_s8jff_info:
         const sat_s8jff_entry;
         const 1;
         const 4294967312;
         const S8ji8_srt+544;
 },
 sat_s8jfo_entry() //  [R1]
         { []
         }
     {offset
       c8nQ9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8nQa; else goto c8nQb;
       c8nQa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8nQb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Exception.errorCallWithCallStackException1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8jfo_info" {
     sat_s8jfo_info:
         const sat_s8jfo_entry;
         const 1;
         const 16;
 },
 go_s8jfj_entry() //  [R1, R2]
         { []
         }
     {offset
       c8nQg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8nQh; else goto c8nQi;
       c8nQh: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8nQi: // global
           I64[Sp - 24] = block_c8nPY_info;
           _s8jfj::P64 = R1;
           _s8jf5::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s8jf5::P64;
           P64[Sp - 8] = _s8jfj::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8nQp; else goto c8nPZ;
       u8nQp: // global
           call _c8nPY(R1) args: 0, res: 0, upd: 0;
       c8nPZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s8jfj_info" {
     go_s8jfj_info:
         const go_s8jfj_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c8nPY() //  [R1]
         { []
         }
     {offset
       c8nPY: // global
           if (R1 & 7 == 1) goto c8nQd; else goto c8nQe;
       c8nQd: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8nQe: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c8nQo; else goto c8nQn;
       c8nQo: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8nQn: // global
           _s8jfm::P64 = P64[R1 + 6];
           _s8jfn::P64 = P64[R1 + 14];
           I64[Hp - 72] = stg_ap_2_upd_info;
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = _s8jfn::P64;
           I64[Hp - 40] = sat_s8jfo_info;
           P64[Hp - 24] = _s8jfm::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nPY_info" {
     block_c8nPY_info:
         const _c8nPY;
         const 2;
         const 30;
 },
 sat_s8jfr_entry() //  [R1]
         { []
         }
     {offset
       c8nQs: // global
           _s8jfr::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c8nQt; else goto c8nQu;
       c8nQu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8nQw; else goto c8nQv;
       c8nQw: // global
           HpAlloc = 16;
           goto c8nQt;
       c8nQt: // global
           R1 = _s8jfr::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8nQv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8jfr::P64;
           _s8jf5::P64 = P64[_s8jfr::P64 + 16];
           _s8jfb::P64 = P64[_s8jfr::P64 + 24];
           I64[Hp - 8] = go_s8jfj_info;
           P64[Hp] = _s8jf5::P64;
           I64[Sp - 24] = block_c8nQq_info;
           R2 = _s8jfb::P64;
           R1 = Hp - 7;
           Sp = Sp - 24;
           call go_s8jfj_entry(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8jfr_info" {
     sat_s8jfr_info:
         const sat_s8jfr_entry;
         const 2;
         const 4294967314;
         const S8ji8_srt+544;
 },
 _c8nQq() //  [R1]
         { []
         }
     {offset
       c8nQq: // global
           R3 = R1;
           R2 = GHC.IO.Exception.untangle2_closure;
           Sp = Sp + 8;
           call Data.OldList.prependToAll_entry(R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8nQq_info" {
     block_c8nQq_info:
         const _c8nQq;
         const 0;
         const 4294967326;
         const S8ji8_srt+544;
 },
 sat_s8jft_entry() //  [R1]
         { []
         }
     {offset
       c8nQE: // global
           _s8jft::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c8nQF; else goto c8nQG;
       c8nQG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8nQI; else goto c8nQH;
       c8nQI: // global
           HpAlloc = 24;
           goto c8nQF;
       c8nQF: // global
           R1 = _s8jft::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8nQH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8jft::P64;
           _s8jf2::P64 = P64[_s8jft::P64 + 16];
           _s8jf3::P64 = P64[_s8jft::P64 + 24];
           I64[Hp - 16] = n_s8jf5_info;
           P64[Hp] = _s8jf3::P64;
           I64[Sp - 32] = block_c8nPw_info;
           R2 = _s8jf2::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call GHC.Stack.Types.getCallStack_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8jft_info" {
     sat_s8jft_info:
         const sat_s8jft_entry;
         const 2;
         const 123149597278226;
         const S8ji8_srt+544;
 },
 _c8nPw() //  [R1]
         { []
         }
     {offset
       c8nPw: // global
           _c8nOW::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8nQB; else goto c8nQC;
       c8nQB: // global
           I64[Sp + 8] = block_c8nPA_info;
           R1 = _c8nOW::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8nQY; else goto c8nPB;
       u8nQY: // global
           call _c8nPA(R1) args: 0, res: 0, upd: 0;
       c8nPB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       c8nQC: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c8nQW; else goto c8nQV;
       c8nQW: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c8nQV: // global
           I64[Hp - 48] = sat_s8jfr_info;
           P64[Hp - 32] = _c8nOW::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Exception.errorCallWithCallStackException6_closure;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           Sp = Sp + 16;
           call Data.OldList.intercalate1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8nPw_info" {
     block_c8nPw_info:
         const _c8nPw;
         const 1;
         const 70373039144990;
         const S8ji8_srt+544;
 },
 _c8nPA() //  [R1]
         { []
         }
     {offset
       c8nPA: // global
           if (R1 & 7 == 1) goto c8nQN; else goto c8nQP;
       c8nQN: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c8nQP: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8nQS; else goto c8nQR;
       c8nQS: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c8nQR: // global
           _s8jfd::P64 = P64[R1 + 6];
           _s8jfe::P64 = P64[R1 + 14];
           I64[Hp - 40] = sat_s8jff_info;
           P64[Hp - 24] = _s8jfe::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s8jfd::P64;
           P64[Hp] = Hp - 40;
           R2 = Hp - 14;
           Sp = Sp + 8;
           call Data.OldList.intercalate1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8nPA_info" {
     block_c8nPA_info:
         const _c8nPA;
         const 0;
         const 4294967326;
         const S8ji8_srt+544;
 },
 sat_s8jfu_entry() //  [R1]
         { []
         }
     {offset
       c8nQZ: // global
           _s8jfu::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8nR0; else goto c8nR1;
       c8nR1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8nR3; else goto c8nR2;
       c8nR3: // global
           HpAlloc = 32;
           goto c8nR0;
       c8nR0: // global
           R1 = _s8jfu::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8nR2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8jfu::P64;
           _s8jf2::P64 = P64[_s8jfu::P64 + 16];
           _s8jf3::P64 = P64[_s8jfu::P64 + 24];
           I64[Hp - 24] = sat_s8jft_info;
           P64[Hp - 8] = _s8jf2::P64;
           P64[Hp] = _s8jf3::P64;
           R3 = Hp - 24;
           R2 = lvl38_r8j3w_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8jfu_info" {
     sat_s8jfu_info:
         const sat_s8jfu_entry;
         const 2;
         const 123149597278226;
         const S8ji8_srt+544;
 },
 sat_s8jfv_entry() //  [R1]
         { []
         }
     {offset
       c8nR4: // global
           _s8jfv::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8nR5; else goto c8nR6;
       c8nR6: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8nR8; else goto c8nR7;
       c8nR8: // global
           HpAlloc = 32;
           goto c8nR5;
       c8nR5: // global
           R1 = _s8jfv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8nR7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8jfv::P64;
           _s8jf2::P64 = P64[_s8jfv::P64 + 16];
           _s8jf3::P64 = P64[_s8jfv::P64 + 24];
           I64[Hp - 24] = sat_s8jfu_info;
           P64[Hp - 8] = _s8jf2::P64;
           P64[Hp] = _s8jf3::P64;
           R2 = Hp - 24;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionAssertionFailed_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8jfv_info" {
     sat_s8jfv_info:
         const sat_s8jfv_entry;
         const 2;
         const 131945690300434;
         const S8ji8_srt+544;
 },
 GHC.IO.Exception.assertError1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8nR9: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8nRd; else goto c8nRc;
       c8nRd: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.assertError1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8nRc: // global
           I64[Hp - 24] = sat_s8jfv_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 24;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.assertError1_info" {
     GHC.IO.Exception.assertError1_info:
         const GHC.IO.Exception.assertError1_entry;
         const 0;
         const 272683178655758;
         const 12884901903;
         const S8ji8_srt+544;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.190794816 UTC

[section ""data" . GHC.IO.Exception.assertError_closure" {
     GHC.IO.Exception.assertError_closure:
         const GHC.IO.Exception.assertError_info;
         const 0;
 },
 GHC.IO.Exception.assertError_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8nSJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8nSK; else goto c8nSL;
       c8nSK: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.assertError_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8nSL: // global
           I64[Sp - 24] = block_c8nSC_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8nSY; else goto c8nSD;
       u8nSY: // global
           call _c8nSC(R1) args: 0, res: 0, upd: 0;
       c8nSD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.assertError_info" {
     GHC.IO.Exception.assertError_info:
         const GHC.IO.Exception.assertError_entry;
         const 0;
         const 30064771086;
         const 12884901911;
         const S8ji8_srt+664;
 },
 _c8nSC() //  [R1]
         { []
         }
     {offset
       c8nSC: // global
           if (R1 & 7 == 1) goto c8nSG; else goto c8nSH;
       c8nSG: // global
           I64[Sp] = block_c8nSO_info;
           R1 = GHC.Stack.CCS.currentCallStack_closure;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       c8nSH: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nSC_info" {
     block_c8nSC_info:
         const _c8nSC;
         const 2;
         const 21474836510;
         const S8ji8_srt+664;
 },
 _c8nSO() //  [R1]
         { []
         }
     {offset
       c8nSO: // global
           I64[Sp + 16] = block_c8nSQ_info;
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.IO.Exception.assertError1_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nSO_info" {
     block_c8nSO_info:
         const _c8nSO;
         const 130;
         const 4294967326;
         const S8ji8_srt+664;
 },
 _c8nSQ() //  [R1]
         { []
         }
     {offset
       c8nSQ: // global
           R1 = R1;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nSQ_info" {
     block_c8nSQ_info:
         const _c8nSQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.198525679 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionAllocationLimitExceeded8_bytes" {
     GHC.IO.Exception.$fExceptionAllocationLimitExceeded8_bytes:
         I8[] [83,111,109,101,65,115,121,110,99,69,120,99,101,112,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.200217673 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAllocationLimitExceeded7_closure" {
     GHC.IO.Exception.$fExceptionAllocationLimitExceeded7_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded8_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.201949588 UTC

[section ""data" . GHC.IO.Exception.$tcSomeAsyncException_closure" {
     GHC.IO.Exception.$tcSomeAsyncException_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded7_closure+1;
         const GHC.Types.krep$*_closure;
         const 7698277271892269964;
         const 12603180528693821542;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.203795687 UTC

[section ""data" . $krep17_r8j3x_closure" {
     $krep17_r8j3x_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Exception.$tcSomeAsyncException_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.205601731 UTC

[section ""data" . $krep18_r8j3y_closure" {
     $krep18_r8j3y_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep12_r8j3r_closure+2;
         const $krep17_r8j3x_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.207313374 UTC

[section ""data" . GHC.IO.Exception.$tc'SomeAsyncException1_closure" {
     GHC.IO.Exception.$tc'SomeAsyncException1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_r8j3t_closure+1;
         const $krep18_r8j3y_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.208996424 UTC

[section ""cstring" . GHC.IO.Exception.$tc'SomeAsyncException3_bytes" {
     GHC.IO.Exception.$tc'SomeAsyncException3_bytes:
         I8[] [39,83,111,109,101,65,115,121,110,99,69,120,99,101,112,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.211601438 UTC

[section ""data" . GHC.IO.Exception.$tc'SomeAsyncException2_closure" {
     GHC.IO.Exception.$tc'SomeAsyncException2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'SomeAsyncException3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.213401431 UTC

[section ""data" . GHC.IO.Exception.$tc'SomeAsyncException_closure" {
     GHC.IO.Exception.$tc'SomeAsyncException_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'SomeAsyncException2_closure+1;
         const GHC.IO.Exception.$tc'SomeAsyncException1_closure+4;
         const 2590663161510005226;
         const 12089333203895315586;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.216799204 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAllocationLimitExceeded6_closure" {
     GHC.IO.Exception.$fExceptionAllocationLimitExceeded6_closure:
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionAllocationLimitExceeded6_entry() //  [R1]
         { []
         }
     {offset
       c8nTA: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c8nTB; else goto c8nTC;
       c8nTB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8nTC: // global
           (_c8nTs::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8nTs::I64 == 0) goto c8nTu; else goto c8nTt;
       c8nTu: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8nTt: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8nTs::I64;
           I64[Sp - 24] = block_c8nTv_info;
           R6 = 0;
           R5 = GHC.IO.Exception.$fExceptionAllocationLimitExceeded7_closure+1;
           R4 = GHC.IO.Exception.$trModule_closure+1;
           R3 = 12603180528693821542;
           R2 = 7698277271892269964;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionAllocationLimitExceeded6_info" {
     GHC.IO.Exception.$fExceptionAllocationLimitExceeded6_info:
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded6_entry;
         const 0;
         const 4294967317;
         const S8ji8_srt+560;
 },
 _c8nTv() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c8nTv: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c8nTw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nTv_info" {
     block_c8nTv_info:
         const _c8nTv;
         const 0;
         const 30;
 },
 _c8nTw() //  []
         { []
         }
     {offset
       c8nTw: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8nTF; else goto c8nTE;
       c8nTF: // global
           HpAlloc = 48;
           I64[Sp] = block_c8nTw_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c8nTE: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8nTw_info" {
     block_c8nTw_info:
         const _c8nTw;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.225555456 UTC

[section ""data" . GHC.IO.Exception.$fExceptionSomeAsyncException_$cfromException_closure" {
     GHC.IO.Exception.$fExceptionSomeAsyncException_$cfromException_closure:
         const GHC.IO.Exception.$fExceptionSomeAsyncException_$cfromException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionSomeAsyncException_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c8nU8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8nUc; else goto c8nUd;
       c8nUc: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionSomeAsyncException_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8nUd: // global
           I64[Sp - 8] = block_c8nU5_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8nUy; else goto c8nU6;
       u8nUy: // global
           call _c8nU5(R1) args: 0, res: 0, upd: 0;
       c8nU6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionSomeAsyncException_$cfromException_info" {
     GHC.IO.Exception.$fExceptionSomeAsyncException_$cfromException_info:
         const GHC.IO.Exception.$fExceptionSomeAsyncException_$cfromException_entry;
         const 0;
         const 422216760033294;
         const 4294967301;
         const S8ji8_srt+568;
 },
 _c8nU5() //  [R1]
         { []
         }
     {offset
       c8nU5: // global
           I64[Sp - 8] = block_c8nUb_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nU5_info" {
     block_c8nU5_info:
         const _c8nU5;
         const 0;
         const 140741783322654;
         const S8ji8_srt+568;
 },
 _c8nUb() //  [R1]
         { []
         }
     {offset
       c8nUb: // global
           I64[Sp] = block_c8nUi_info;
           R3 = GHC.IO.Exception.$fExceptionAllocationLimitExceeded6_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nUb_info" {
     block_c8nUb_info:
         const _c8nUb;
         const 1;
         const 140741783322654;
         const S8ji8_srt+568;
 },
 _c8nUi() //  [R1]
         { []
         }
     {offset
       c8nUi: // global
           if (R1 & 7 == 1) goto c8nUp; else goto c8nUt;
       c8nUp: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8nUt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8nUw; else goto c8nUv;
       c8nUw: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8nUv: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nUi_info" {
     block_c8nUi_info:
         const _c8nUi;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.234193525 UTC

[section ""data" . GHC.IO.Exception.$fExceptionSomeAsyncException_closure" {
     GHC.IO.Exception.$fExceptionSomeAsyncException_closure:
         const GHC.Exception.C:Exception_con_info;
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded6_closure;
         const GHC.IO.Exception.$fShowSomeAsyncException_closure+1;
         const GHC.IO.Exception.$fExceptionSomeAsyncException_$ctoException_closure+1;
         const GHC.IO.Exception.$fExceptionSomeAsyncException_$cfromException_closure+1;
         const GHC.IO.Exception.$fExceptionSomeAsyncException_$cshow_closure+1;
         const 0;
 },
 section ""data" . GHC.IO.Exception.$fExceptionSomeAsyncException_$ctoException_closure" {
     GHC.IO.Exception.$fExceptionSomeAsyncException_$ctoException_closure:
         const GHC.IO.Exception.$fExceptionSomeAsyncException_$ctoException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionSomeAsyncException_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c8nUZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8nV3; else goto c8nV2;
       c8nV3: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionSomeAsyncException_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8nV2: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = GHC.IO.Exception.$fExceptionSomeAsyncException_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionSomeAsyncException_$ctoException_info" {
     GHC.IO.Exception.$fExceptionSomeAsyncException_$ctoException_info:
         const GHC.IO.Exception.$fExceptionSomeAsyncException_$ctoException_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S8ji8_srt+704;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.24075173 UTC

[section ""data" . GHC.IO.Exception.asyncExceptionFromException_closure" {
     GHC.IO.Exception.asyncExceptionFromException_closure:
         const GHC.IO.Exception.asyncExceptionFromException_info;
         const 0;
 },
 GHC.IO.Exception.asyncExceptionFromException_entry() //  [R2, R3]
         { []
         }
     {offset
       c8nVh: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8nVl; else goto c8nVm;
       c8nVl: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.asyncExceptionFromException_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8nVm: // global
           I64[Sp - 16] = block_c8nVe_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8nWa; else goto c8nVf;
       u8nWa: // global
           call _c8nVe(R1) args: 0, res: 0, upd: 0;
       c8nVf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.asyncExceptionFromException_info" {
     GHC.IO.Exception.asyncExceptionFromException_info:
         const GHC.IO.Exception.asyncExceptionFromException_entry;
         const 0;
         const 2392541597007886;
         const 8589934607;
         const S8ji8_srt+568;
 },
 _c8nVe() //  [R1]
         { []
         }
     {offset
       c8nVe: // global
           I64[Sp - 8] = block_c8nVk_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nVe_info" {
     block_c8nVe_info:
         const _c8nVe;
         const 1;
         const 140741783322654;
         const S8ji8_srt+568;
 },
 _c8nVk() //  [R1]
         { []
         }
     {offset
       c8nVk: // global
           I64[Sp] = block_c8nVr_info;
           R3 = GHC.IO.Exception.$fExceptionAllocationLimitExceeded6_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nVk_info" {
     block_c8nVk_info:
         const _c8nVk;
         const 2;
         const 140741783322654;
         const S8ji8_srt+568;
 },
 _c8nVr() //  [R1]
         { []
         }
     {offset
       c8nVr: // global
           if (R1 & 7 == 1) goto u8nW8; else goto c8nVL;
       u8nW8: // global
           Sp = Sp + 24;
           call _c8nVY() args: 0, res: 0, upd: 0;
       c8nVL: // global
           _s8jfW::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8nVB_info;
           R1 = _s8jfW::P64;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nVr_info" {
     block_c8nVr_info:
         const _c8nVr;
         const 2;
         const 4294967326;
         const S8ji8_srt+568;
 },
 _c8nVB() //  [R1]
         { []
         }
     {offset
       c8nVB: // global
           I64[Sp - 8] = block_c8nVF_info;
           R2 = P64[Sp + 8];
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 8] = P64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nVB_info" {
     block_c8nVB_info:
         const _c8nVB;
         const 1;
         const 4294967326;
         const S8ji8_srt+568;
 },
 _c8nVF() //  [R1]
         { []
         }
     {offset
       c8nVF: // global
           I64[Sp] = block_c8nVJ_info;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = R1;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nVF_info" {
     block_c8nVF_info:
         const _c8nVF;
         const 2;
         const 4294967326;
         const S8ji8_srt+568;
 },
 _c8nVJ() //  [R1]
         { []
         }
     {offset
       c8nVJ: // global
           I64[Sp] = block_c8nVR_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nVJ_info" {
     block_c8nVJ_info:
         const _c8nVJ;
         const 2;
         const 4294967326;
         const S8ji8_srt+568;
 },
 _c8nVR() //  [R1]
         { []
         }
     {offset
       c8nVR: // global
           if (R1 & 7 == 1) goto u8nW9; else goto c8nW2;
       u8nW9: // global
           Sp = Sp + 24;
           call _c8nVY() args: 0, res: 0, upd: 0;
       c8nW2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8nW5; else goto c8nW4;
       c8nW5: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8nW4: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nVR_info" {
     block_c8nVR_info:
         const _c8nVR;
         const 130;
         const 30;
 },
 _c8nVY() //  []
         { []
         }
     {offset
       c8nVY: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.256541616 UTC

[section ""data" . GHC.IO.Exception.asyncExceptionToException_closure" {
     GHC.IO.Exception.asyncExceptionToException_closure:
         const GHC.IO.Exception.asyncExceptionToException_info;
         const 0;
 },
 GHC.IO.Exception.asyncExceptionToException_entry() //  [R2, R3]
         { []
         }
     {offset
       c8nWV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8nWZ; else goto c8nWY;
       c8nWZ: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.asyncExceptionToException_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8nWY: // global
           I64[Hp - 16] = GHC.IO.Exception.SomeAsyncException_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 15;
           call GHC.IO.Exception.$fExceptionSomeAsyncException_$ctoException_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.asyncExceptionToException_info" {
     GHC.IO.Exception.asyncExceptionToException_info:
         const GHC.IO.Exception.asyncExceptionToException_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S8ji8_srt+712;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.259743483 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionAsyncException11_bytes" {
     GHC.IO.Exception.$fExceptionAsyncException11_bytes:
         I8[] [65,115,121,110,99,69,120,99,101,112,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.261577637 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAsyncException10_closure" {
     GHC.IO.Exception.$fExceptionAsyncException10_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$fExceptionAsyncException11_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.263398202 UTC

[section ""data" . GHC.IO.Exception.$tcAsyncException_closure" {
     GHC.IO.Exception.$tcAsyncException_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$fExceptionAsyncException10_closure+1;
         const GHC.Types.krep$*_closure;
         const 3223192752092240512;
         const 6151543105744102738;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.265165297 UTC

[section ""data" . GHC.IO.Exception.$tc'HeapOverflow1_closure" {
     GHC.IO.Exception.$tc'HeapOverflow1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Exception.$tcAsyncException_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.266939417 UTC

[section ""cstring" . GHC.IO.Exception.$tc'StackOverflow2_bytes" {
     GHC.IO.Exception.$tc'StackOverflow2_bytes:
         I8[] [39,83,116,97,99,107,79,118,101,114,102,108,111,119]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.268631119 UTC

[section ""data" . GHC.IO.Exception.$tc'StackOverflow1_closure" {
     GHC.IO.Exception.$tc'StackOverflow1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'StackOverflow2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.270539952 UTC

[section ""data" . GHC.IO.Exception.$tc'StackOverflow_closure" {
     GHC.IO.Exception.$tc'StackOverflow_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'StackOverflow1_closure+1;
         const GHC.IO.Exception.$tc'HeapOverflow1_closure+1;
         const 7140728310745047686;
         const 9210977118047764825;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.272207247 UTC

[section ""cstring" . GHC.IO.Exception.$tc'HeapOverflow3_bytes" {
     GHC.IO.Exception.$tc'HeapOverflow3_bytes:
         I8[] [39,72,101,97,112,79,118,101,114,102,108,111,119]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.273847919 UTC

[section ""data" . GHC.IO.Exception.$tc'HeapOverflow2_closure" {
     GHC.IO.Exception.$tc'HeapOverflow2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'HeapOverflow3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.275633992 UTC

[section ""data" . GHC.IO.Exception.$tc'HeapOverflow_closure" {
     GHC.IO.Exception.$tc'HeapOverflow_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'HeapOverflow2_closure+1;
         const GHC.IO.Exception.$tc'HeapOverflow1_closure+1;
         const 6603650813243937168;
         const 2046005135570222520;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.27815205 UTC

[section ""cstring" . GHC.IO.Exception.$tc'ThreadKilled2_bytes" {
     GHC.IO.Exception.$tc'ThreadKilled2_bytes:
         I8[] [39,84,104,114,101,97,100,75,105,108,108,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.279765557 UTC

[section ""data" . GHC.IO.Exception.$tc'ThreadKilled1_closure" {
     GHC.IO.Exception.$tc'ThreadKilled1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'ThreadKilled2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.281540544 UTC

[section ""data" . GHC.IO.Exception.$tc'ThreadKilled_closure" {
     GHC.IO.Exception.$tc'ThreadKilled_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'ThreadKilled1_closure+1;
         const GHC.IO.Exception.$tc'HeapOverflow1_closure+1;
         const 13600447017231937444;
         const 101896852196063416;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.283247548 UTC

[section ""cstring" . GHC.IO.Exception.$tc'UserInterrupt2_bytes" {
     GHC.IO.Exception.$tc'UserInterrupt2_bytes:
         I8[] [39,85,115,101,114,73,110,116,101,114,114,117,112,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.284863123 UTC

[section ""data" . GHC.IO.Exception.$tc'UserInterrupt1_closure" {
     GHC.IO.Exception.$tc'UserInterrupt1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'UserInterrupt2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.28691028 UTC

[section ""data" . GHC.IO.Exception.$tc'UserInterrupt_closure" {
     GHC.IO.Exception.$tc'UserInterrupt_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'UserInterrupt1_closure+1;
         const GHC.IO.Exception.$tc'HeapOverflow1_closure+1;
         const 1214873852534998649;
         const 13851718192780849484;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.290248379 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAsyncException9_closure" {
     GHC.IO.Exception.$fExceptionAsyncException9_closure:
         const GHC.IO.Exception.$fExceptionAsyncException9_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionAsyncException9_entry() //  [R1]
         { []
         }
     {offset
       c8nXv: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c8nXw; else goto c8nXx;
       c8nXw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8nXx: // global
           (_c8nXn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8nXn::I64 == 0) goto c8nXp; else goto c8nXo;
       c8nXp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8nXo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8nXn::I64;
           I64[Sp - 24] = block_c8nXq_info;
           R6 = 0;
           R5 = GHC.IO.Exception.$fExceptionAsyncException10_closure+1;
           R4 = GHC.IO.Exception.$trModule_closure+1;
           R3 = 6151543105744102738;
           R2 = 3223192752092240512;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionAsyncException9_info" {
     GHC.IO.Exception.$fExceptionAsyncException9_info:
         const GHC.IO.Exception.$fExceptionAsyncException9_entry;
         const 0;
         const 4294967317;
         const S8ji8_srt+560;
 },
 _c8nXq() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c8nXq: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c8nXr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nXq_info" {
     block_c8nXq_info:
         const _c8nXq;
         const 0;
         const 30;
 },
 _c8nXr() //  []
         { []
         }
     {offset
       c8nXr: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8nXA; else goto c8nXz;
       c8nXA: // global
           HpAlloc = 48;
           I64[Sp] = block_c8nXr_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c8nXz: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8nXr_info" {
     block_c8nXr_info:
         const _c8nXr;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.297390118 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionArrayException7_bytes" {
     GHC.IO.Exception.$fExceptionArrayException7_bytes:
         I8[] [65,114,114,97,121,69,120,99,101,112,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.299078092 UTC

[section ""data" . GHC.IO.Exception.$fExceptionArrayException6_closure" {
     GHC.IO.Exception.$fExceptionArrayException6_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$fExceptionArrayException7_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.300793927 UTC

[section ""data" . GHC.IO.Exception.$tcArrayException_closure" {
     GHC.IO.Exception.$tcArrayException_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$fExceptionArrayException6_closure+1;
         const GHC.Types.krep$*_closure;
         const 14361659568498315305;
         const 6805143727974531880;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.302649294 UTC

[section ""data" . $krep19_r8j3z_closure" {
     $krep19_r8j3z_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Exception.$tcArrayException_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.304284708 UTC

[section ""data" . GHC.IO.Exception.$tc'IndexOutOfBounds1_closure" {
     GHC.IO.Exception.$tc'IndexOutOfBounds1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r8j3o_closure+1;
         const $krep19_r8j3z_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.306553747 UTC

[section ""cstring" . GHC.IO.Exception.$tc'IndexOutOfBounds3_bytes" {
     GHC.IO.Exception.$tc'IndexOutOfBounds3_bytes:
         I8[] [39,73,110,100,101,120,79,117,116,79,102,66,111,117,110,100,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.308214437 UTC

[section ""data" . GHC.IO.Exception.$tc'IndexOutOfBounds2_closure" {
     GHC.IO.Exception.$tc'IndexOutOfBounds2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'IndexOutOfBounds3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.310258869 UTC

[section ""data" . GHC.IO.Exception.$tc'IndexOutOfBounds_closure" {
     GHC.IO.Exception.$tc'IndexOutOfBounds_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'IndexOutOfBounds2_closure+1;
         const GHC.IO.Exception.$tc'IndexOutOfBounds1_closure+4;
         const 14241149568806879436;
         const 10551655754853710333;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.312005675 UTC

[section ""cstring" . GHC.IO.Exception.$tc'UndefinedElement2_bytes" {
     GHC.IO.Exception.$tc'UndefinedElement2_bytes:
         I8[] [39,85,110,100,101,102,105,110,101,100,69,108,101,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.313675727 UTC

[section ""data" . GHC.IO.Exception.$tc'UndefinedElement1_closure" {
     GHC.IO.Exception.$tc'UndefinedElement1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'UndefinedElement2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.315393248 UTC

[section ""data" . GHC.IO.Exception.$tc'UndefinedElement_closure" {
     GHC.IO.Exception.$tc'UndefinedElement_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'UndefinedElement1_closure+1;
         const GHC.IO.Exception.$tc'IndexOutOfBounds1_closure+4;
         const 9439210122732754255;
         const 8562757414325900819;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.318718117 UTC

[section ""data" . GHC.IO.Exception.$fExceptionArrayException5_closure" {
     GHC.IO.Exception.$fExceptionArrayException5_closure:
         const GHC.IO.Exception.$fExceptionArrayException5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionArrayException5_entry() //  [R1]
         { []
         }
     {offset
       c8nYi: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c8nYj; else goto c8nYk;
       c8nYj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8nYk: // global
           (_c8nYa::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8nYa::I64 == 0) goto c8nYc; else goto c8nYb;
       c8nYc: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8nYb: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8nYa::I64;
           I64[Sp - 24] = block_c8nYd_info;
           R6 = 0;
           R5 = GHC.IO.Exception.$fExceptionArrayException6_closure+1;
           R4 = GHC.IO.Exception.$trModule_closure+1;
           R3 = 6805143727974531880;
           R2 = 14361659568498315305;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionArrayException5_info" {
     GHC.IO.Exception.$fExceptionArrayException5_info:
         const GHC.IO.Exception.$fExceptionArrayException5_entry;
         const 0;
         const 4294967317;
         const S8ji8_srt+560;
 },
 _c8nYd() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c8nYd: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c8nYe() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8nYd_info" {
     block_c8nYd_info:
         const _c8nYd;
         const 0;
         const 30;
 },
 _c8nYe() //  []
         { []
         }
     {offset
       c8nYe: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8nYn; else goto c8nYm;
       c8nYn: // global
           HpAlloc = 48;
           I64[Sp] = block_c8nYe_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c8nYm: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8nYe_info" {
     block_c8nYe_info:
         const _c8nYe;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.32689971 UTC

[section ""data" . GHC.IO.Exception.$fExceptionArrayException_$cfromException_closure" {
     GHC.IO.Exception.$fExceptionArrayException_$cfromException_closure:
         const GHC.IO.Exception.$fExceptionArrayException_$cfromException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionArrayException_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c8nYQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8nYU; else goto c8nYV;
       c8nYU: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionArrayException_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8nYV: // global
           I64[Sp - 8] = block_c8nYN_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8nZg; else goto c8nYO;
       u8nZg: // global
           call _c8nYN(R1) args: 0, res: 0, upd: 0;
       c8nYO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionArrayException_$cfromException_info" {
     GHC.IO.Exception.$fExceptionArrayException_$cfromException_info:
         const GHC.IO.Exception.$fExceptionArrayException_$cfromException_entry;
         const 0;
         const 27021602059190286;
         const 4294967301;
         const S8ji8_srt+568;
 },
 _c8nYN() //  [R1]
         { []
         }
     {offset
       c8nYN: // global
           I64[Sp - 8] = block_c8nYT_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nYN_info" {
     block_c8nYN_info:
         const _c8nYN;
         const 0;
         const 18014402804449310;
         const S8ji8_srt+568;
 },
 _c8nYT() //  [R1]
         { []
         }
     {offset
       c8nYT: // global
           I64[Sp] = block_c8nZ0_info;
           R3 = GHC.IO.Exception.$fExceptionArrayException5_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nYT_info" {
     block_c8nYT_info:
         const _c8nYT;
         const 1;
         const 18014402804449310;
         const S8ji8_srt+568;
 },
 _c8nZ0() //  [R1]
         { []
         }
     {offset
       c8nZ0: // global
           if (R1 & 7 == 1) goto c8nZ7; else goto c8nZb;
       c8nZ7: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8nZb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8nZe; else goto c8nZd;
       c8nZe: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8nZd: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8nZ0_info" {
     block_c8nZ0_info:
         const _c8nZ0;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.335610726 UTC

[section ""data" . GHC.IO.Exception.$fExceptionArrayException_closure" {
     GHC.IO.Exception.$fExceptionArrayException_closure:
         const GHC.Exception.C:Exception_con_info;
         const GHC.IO.Exception.$fExceptionArrayException5_closure;
         const GHC.IO.Exception.$fShowArrayException_closure+1;
         const GHC.IO.Exception.$fExceptionArrayException_$ctoException_closure+1;
         const GHC.IO.Exception.$fExceptionArrayException_$cfromException_closure+1;
         const GHC.IO.Exception.$fExceptionArrayException_$cshow_closure+1;
         const 0;
 },
 section ""data" . GHC.IO.Exception.$fExceptionArrayException_$ctoException_closure" {
     GHC.IO.Exception.$fExceptionArrayException_$ctoException_closure:
         const GHC.IO.Exception.$fExceptionArrayException_$ctoException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionArrayException_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c8nZH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8nZL; else goto c8nZK;
       c8nZL: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionArrayException_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8nZK: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = GHC.IO.Exception.$fExceptionArrayException_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionArrayException_$ctoException_info" {
     GHC.IO.Exception.$fExceptionArrayException_$ctoException_info:
         const GHC.IO.Exception.$fExceptionArrayException_$ctoException_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S8ji8_srt+752;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.340211879 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionFixIOException5_bytes" {
     GHC.IO.Exception.$fExceptionFixIOException5_bytes:
         I8[] [70,105,120,73,79,69,120,99,101,112,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.342427715 UTC

[section ""data" . GHC.IO.Exception.$fExceptionFixIOException4_closure" {
     GHC.IO.Exception.$fExceptionFixIOException4_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$fExceptionFixIOException5_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.344180289 UTC

[section ""data" . GHC.IO.Exception.$tcFixIOException_closure" {
     GHC.IO.Exception.$tcFixIOException_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$fExceptionFixIOException4_closure+1;
         const GHC.Types.krep$*_closure;
         const 175794591112768165;
         const 12820711924146365796;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.345973753 UTC

[section ""data" . GHC.IO.Exception.$tc'FixIOException1_closure" {
     GHC.IO.Exception.$tc'FixIOException1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Exception.$tcFixIOException_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.347652147 UTC

[section ""cstring" . GHC.IO.Exception.$tc'FixIOException3_bytes" {
     GHC.IO.Exception.$tc'FixIOException3_bytes:
         I8[] [39,70,105,120,73,79,69,120,99,101,112,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.349344505 UTC

[section ""data" . GHC.IO.Exception.$tc'FixIOException2_closure" {
     GHC.IO.Exception.$tc'FixIOException2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'FixIOException3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.351031248 UTC

[section ""data" . GHC.IO.Exception.$tc'FixIOException_closure" {
     GHC.IO.Exception.$tc'FixIOException_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'FixIOException2_closure+1;
         const GHC.IO.Exception.$tc'FixIOException1_closure+1;
         const 1253631570386628537;
         const 15724415228749653558;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.355132494 UTC

[section ""data" . GHC.IO.Exception.$fExceptionFixIOException3_closure" {
     GHC.IO.Exception.$fExceptionFixIOException3_closure:
         const GHC.IO.Exception.$fExceptionFixIOException3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionFixIOException3_entry() //  [R1]
         { []
         }
     {offset
       c8o0a: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c8o0b; else goto c8o0c;
       c8o0b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8o0c: // global
           (_c8o02::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8o02::I64 == 0) goto c8o04; else goto c8o03;
       c8o04: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8o03: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8o02::I64;
           I64[Sp - 24] = block_c8o05_info;
           R6 = 0;
           R5 = GHC.IO.Exception.$fExceptionFixIOException4_closure+1;
           R4 = GHC.IO.Exception.$trModule_closure+1;
           R3 = 12820711924146365796;
           R2 = 175794591112768165;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionFixIOException3_info" {
     GHC.IO.Exception.$fExceptionFixIOException3_info:
         const GHC.IO.Exception.$fExceptionFixIOException3_entry;
         const 0;
         const 4294967317;
         const S8ji8_srt+560;
 },
 _c8o05() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c8o05: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c8o06() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8o05_info" {
     block_c8o05_info:
         const _c8o05;
         const 0;
         const 30;
 },
 _c8o06() //  []
         { []
         }
     {offset
       c8o06: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8o0f; else goto c8o0e;
       c8o0f: // global
           HpAlloc = 48;
           I64[Sp] = block_c8o06_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c8o0e: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8o06_info" {
     block_c8o06_info:
         const _c8o06;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.363803756 UTC

[section ""data" . GHC.IO.Exception.$fExceptionFixIOException_$cfromException_closure" {
     GHC.IO.Exception.$fExceptionFixIOException_$cfromException_closure:
         const GHC.IO.Exception.$fExceptionFixIOException_$cfromException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionFixIOException_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c8o0I: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8o0M; else goto c8o0N;
       c8o0M: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionFixIOException_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8o0N: // global
           I64[Sp - 8] = block_c8o0F_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8o18; else goto c8o0G;
       u8o18: // global
           call _c8o0F(R1) args: 0, res: 0, upd: 0;
       c8o0G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionFixIOException_$cfromException_info" {
     GHC.IO.Exception.$fExceptionFixIOException_$cfromException_info:
         const GHC.IO.Exception.$fExceptionFixIOException_$cfromException_entry;
         const 0;
         const 432345568522534926;
         const 4294967301;
         const S8ji8_srt+568;
 },
 _c8o0F() //  [R1]
         { []
         }
     {offset
       c8o0F: // global
           I64[Sp - 8] = block_c8o0L_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8o0F_info" {
     block_c8o0F_info:
         const _c8o0F;
         const 0;
         const 288230380446679070;
         const S8ji8_srt+568;
 },
 _c8o0L() //  [R1]
         { []
         }
     {offset
       c8o0L: // global
           I64[Sp] = block_c8o0S_info;
           R3 = GHC.IO.Exception.$fExceptionFixIOException3_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8o0L_info" {
     block_c8o0L_info:
         const _c8o0L;
         const 1;
         const 288230380446679070;
         const S8ji8_srt+568;
 },
 _c8o0S() //  [R1]
         { []
         }
     {offset
       c8o0S: // global
           if (R1 & 7 == 1) goto c8o0Z; else goto c8o13;
       c8o0Z: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8o13: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8o16; else goto c8o15;
       c8o16: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8o15: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8o0S_info" {
     block_c8o0S_info:
         const _c8o0S;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.373669638 UTC

[section ""data" . GHC.IO.Exception.$fExceptionFixIOException_closure" {
     GHC.IO.Exception.$fExceptionFixIOException_closure:
         const GHC.Exception.C:Exception_con_info;
         const GHC.IO.Exception.$fExceptionFixIOException3_closure;
         const GHC.IO.Exception.$fShowFixIOException_closure+1;
         const GHC.IO.Exception.$fExceptionFixIOException_$ctoException_closure+1;
         const GHC.IO.Exception.$fExceptionFixIOException_$cfromException_closure+1;
         const GHC.IO.Exception.$fExceptionFixIOException_$cshow_closure+1;
         const 0;
 },
 section ""data" . GHC.IO.Exception.$fExceptionFixIOException_$ctoException_closure" {
     GHC.IO.Exception.$fExceptionFixIOException_$ctoException_closure:
         const GHC.IO.Exception.$fExceptionFixIOException_$ctoException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionFixIOException_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c8o1z: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8o1D; else goto c8o1C;
       c8o1D: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionFixIOException_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8o1C: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = GHC.IO.Exception.$fExceptionFixIOException_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionFixIOException_$ctoException_info" {
     GHC.IO.Exception.$fExceptionFixIOException_$ctoException_info:
         const GHC.IO.Exception.$fExceptionFixIOException_$ctoException_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S8ji8_srt+784;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.377948662 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionExitCode6_bytes" {
     GHC.IO.Exception.$fExceptionExitCode6_bytes:
         I8[] [69,120,105,116,67,111,100,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.379717563 UTC

[section ""data" . GHC.IO.Exception.$fExceptionExitCode5_closure" {
     GHC.IO.Exception.$fExceptionExitCode5_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$fExceptionExitCode6_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.381821806 UTC

[section ""data" . GHC.IO.Exception.$tcExitCode_closure" {
     GHC.IO.Exception.$tcExitCode_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$fExceptionExitCode5_closure+1;
         const GHC.Types.krep$*_closure;
         const 8177210543059932106;
         const 3694335570555580912;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.383615616 UTC

[section ""data" . GHC.IO.Exception.$tc'ExitSuccess1_closure" {
     GHC.IO.Exception.$tc'ExitSuccess1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Exception.$tcExitCode_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.385183835 UTC

[section ""cstring" . GHC.IO.Exception.$tc'ExitSuccess3_bytes" {
     GHC.IO.Exception.$tc'ExitSuccess3_bytes:
         I8[] [39,69,120,105,116,83,117,99,99,101,115,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.386872913 UTC

[section ""data" . GHC.IO.Exception.$tc'ExitSuccess2_closure" {
     GHC.IO.Exception.$tc'ExitSuccess2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'ExitSuccess3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.388652652 UTC

[section ""data" . GHC.IO.Exception.$tc'ExitSuccess_closure" {
     GHC.IO.Exception.$tc'ExitSuccess_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'ExitSuccess2_closure+1;
         const GHC.IO.Exception.$tc'ExitSuccess1_closure+1;
         const 6011095708053053284;
         const 14896688531190285489;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.390635884 UTC

[section ""data" . GHC.IO.Exception.$tc'ExitFailure1_closure" {
     GHC.IO.Exception.$tc'ExitFailure1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r8j3f_closure+1;
         const GHC.IO.Exception.$tc'ExitSuccess1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.392267319 UTC

[section ""cstring" . GHC.IO.Exception.$tc'ExitFailure3_bytes" {
     GHC.IO.Exception.$tc'ExitFailure3_bytes:
         I8[] [39,69,120,105,116,70,97,105,108,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.394001726 UTC

[section ""data" . GHC.IO.Exception.$tc'ExitFailure2_closure" {
     GHC.IO.Exception.$tc'ExitFailure2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'ExitFailure3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.39582034 UTC

[section ""data" . GHC.IO.Exception.$tc'ExitFailure_closure" {
     GHC.IO.Exception.$tc'ExitFailure_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'ExitFailure2_closure+1;
         const GHC.IO.Exception.$tc'ExitFailure1_closure+4;
         const 13149331685465745995;
         const 10453046320643141131;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.399243576 UTC

[section ""data" . GHC.IO.Exception.$fExceptionExitCode4_closure" {
     GHC.IO.Exception.$fExceptionExitCode4_closure:
         const GHC.IO.Exception.$fExceptionExitCode4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionExitCode4_entry() //  [R1]
         { []
         }
     {offset
       c8o26: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c8o27; else goto c8o28;
       c8o27: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8o28: // global
           (_c8o1Y::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8o1Y::I64 == 0) goto c8o20; else goto c8o1Z;
       c8o20: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8o1Z: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8o1Y::I64;
           I64[Sp - 24] = block_c8o21_info;
           R6 = 0;
           R5 = GHC.IO.Exception.$fExceptionExitCode5_closure+1;
           R4 = GHC.IO.Exception.$trModule_closure+1;
           R3 = 3694335570555580912;
           R2 = 8177210543059932106;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionExitCode4_info" {
     GHC.IO.Exception.$fExceptionExitCode4_info:
         const GHC.IO.Exception.$fExceptionExitCode4_entry;
         const 0;
         const 4294967317;
         const S8ji8_srt+560;
 },
 _c8o21() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c8o21: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c8o22() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8o21_info" {
     block_c8o21_info:
         const _c8o21;
         const 0;
         const 30;
 },
 _c8o22() //  []
         { []
         }
     {offset
       c8o22: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8o2b; else goto c8o2a;
       c8o2b: // global
           HpAlloc = 48;
           I64[Sp] = block_c8o22_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c8o2a: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8o22_info" {
     block_c8o22_info:
         const _c8o22;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.408801425 UTC

[section ""data" . GHC.IO.Exception.$fExceptionExitCode_$cfromException_closure" {
     GHC.IO.Exception.$fExceptionExitCode_$cfromException_closure:
         const GHC.IO.Exception.$fExceptionExitCode_$cfromException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionExitCode_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c8o2E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8o2I; else goto c8o2J;
       c8o2I: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionExitCode_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8o2J: // global
           I64[Sp - 8] = block_c8o2B_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8o34; else goto c8o2C;
       u8o34: // global
           call _c8o2B(R1) args: 0, res: 0, upd: 0;
       c8o2C: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionExitCode_$cfromException_info" {
     GHC.IO.Exception.$fExceptionExitCode_$cfromException_info:
         const GHC.IO.Exception.$fExceptionExitCode_$cfromException_entry;
         const 0;
         const 6917529031936049166;
         const 4294967301;
         const S8ji8_srt+568;
 },
 _c8o2B() //  [R1]
         { []
         }
     {offset
       c8o2B: // global
           I64[Sp - 8] = block_c8o2H_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8o2B_info" {
     block_c8o2B_info:
         const _c8o2B;
         const 0;
         const 4611686022722355230;
         const S8ji8_srt+568;
 },
 _c8o2H() //  [R1]
         { []
         }
     {offset
       c8o2H: // global
           I64[Sp] = block_c8o2O_info;
           R3 = GHC.IO.Exception.$fExceptionExitCode4_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8o2H_info" {
     block_c8o2H_info:
         const _c8o2H;
         const 1;
         const 4611686022722355230;
         const S8ji8_srt+568;
 },
 _c8o2O() //  [R1]
         { []
         }
     {offset
       c8o2O: // global
           if (R1 & 7 == 1) goto c8o2V; else goto c8o2Z;
       c8o2V: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8o2Z: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8o32; else goto c8o31;
       c8o32: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8o31: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8o2O_info" {
     block_c8o2O_info:
         const _c8o2O;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.417986837 UTC

[section ""data" . GHC.IO.Exception.$fExceptionExitCode_closure" {
     GHC.IO.Exception.$fExceptionExitCode_closure:
         const GHC.Exception.C:Exception_con_info;
         const GHC.IO.Exception.$fExceptionExitCode4_closure;
         const GHC.IO.Exception.$fShowExitCode_closure+1;
         const GHC.IO.Exception.$fExceptionExitCode_$ctoException_closure+1;
         const GHC.IO.Exception.$fExceptionExitCode_$cfromException_closure+1;
         const GHC.IO.Exception.$fExceptionExitCode_$cshow_closure+1;
         const 0;
 },
 section ""data" . GHC.IO.Exception.$fExceptionExitCode_$ctoException_closure" {
     GHC.IO.Exception.$fExceptionExitCode_$ctoException_closure:
         const GHC.IO.Exception.$fExceptionExitCode_$ctoException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionExitCode_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c8o3v: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8o3z; else goto c8o3y;
       c8o3z: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionExitCode_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8o3y: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = GHC.IO.Exception.$fExceptionExitCode_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionExitCode_$ctoException_info" {
     GHC.IO.Exception.$fExceptionExitCode_$ctoException_info:
         const GHC.IO.Exception.$fExceptionExitCode_$ctoException_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S8ji8_srt+816;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.422214377 UTC

[section ""cstring" . GHC.IO.Exception.$tcIOErrorType2_bytes" {
     GHC.IO.Exception.$tcIOErrorType2_bytes:
         I8[] [73,79,69,114,114,111,114,84,121,112,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.423921013 UTC

[section ""data" . GHC.IO.Exception.$tcIOErrorType1_closure" {
     GHC.IO.Exception.$tcIOErrorType1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tcIOErrorType2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.425707671 UTC

[section ""data" . GHC.IO.Exception.$tcIOErrorType_closure" {
     GHC.IO.Exception.$tcIOErrorType_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tcIOErrorType1_closure+1;
         const GHC.Types.krep$*_closure;
         const 13260403802836574836;
         const 9962456285013293537;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.427523459 UTC

[section ""data" . GHC.IO.Exception.$tc'AlreadyExists1_closure" {
     GHC.IO.Exception.$tc'AlreadyExists1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Exception.$tcIOErrorType_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.429203148 UTC

[section ""cstring" . GHC.IO.Exception.$tc'AlreadyExists3_bytes" {
     GHC.IO.Exception.$tc'AlreadyExists3_bytes:
         I8[] [39,65,108,114,101,97,100,121,69,120,105,115,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.431099026 UTC

[section ""data" . GHC.IO.Exception.$tc'AlreadyExists2_closure" {
     GHC.IO.Exception.$tc'AlreadyExists2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'AlreadyExists3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.432824545 UTC

[section ""data" . GHC.IO.Exception.$tc'AlreadyExists_closure" {
     GHC.IO.Exception.$tc'AlreadyExists_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists2_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const 13383994725479033447;
         const 16077735236426702934;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.435236158 UTC

[section ""cstring" . GHC.IO.Exception.$tc'NoSuchThing2_bytes" {
     GHC.IO.Exception.$tc'NoSuchThing2_bytes:
         I8[] [39,78,111,83,117,99,104,84,104,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.436958779 UTC

[section ""data" . GHC.IO.Exception.$tc'NoSuchThing1_closure" {
     GHC.IO.Exception.$tc'NoSuchThing1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'NoSuchThing2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.438732202 UTC

[section ""data" . GHC.IO.Exception.$tc'NoSuchThing_closure" {
     GHC.IO.Exception.$tc'NoSuchThing_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'NoSuchThing1_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const 1065788776620214811;
         const 7708272823769791518;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.440532814 UTC

[section ""cstring" . GHC.IO.Exception.$tc'ResourceBusy2_bytes" {
     GHC.IO.Exception.$tc'ResourceBusy2_bytes:
         I8[] [39,82,101,115,111,117,114,99,101,66,117,115,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.442543939 UTC

[section ""data" . GHC.IO.Exception.$tc'ResourceBusy1_closure" {
     GHC.IO.Exception.$tc'ResourceBusy1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'ResourceBusy2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.444424781 UTC

[section ""data" . GHC.IO.Exception.$tc'ResourceBusy_closure" {
     GHC.IO.Exception.$tc'ResourceBusy_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'ResourceBusy1_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const 81041156937828521;
         const 16732677038738772765;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.446175013 UTC

[section ""cstring" . GHC.IO.Exception.$tc'ResourceExhausted2_bytes" {
     GHC.IO.Exception.$tc'ResourceExhausted2_bytes:
         I8[] [39,82,101,115,111,117,114,99,101,69,120,104,97,117,115,116,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.447825565 UTC

[section ""data" . GHC.IO.Exception.$tc'ResourceExhausted1_closure" {
     GHC.IO.Exception.$tc'ResourceExhausted1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'ResourceExhausted2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.449610635 UTC

[section ""data" . GHC.IO.Exception.$tc'ResourceExhausted_closure" {
     GHC.IO.Exception.$tc'ResourceExhausted_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'ResourceExhausted1_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const 661664682644939150;
         const 17978068149744050586;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.451357265 UTC

[section ""cstring" . GHC.IO.Exception.$tc'EOF2_bytes" {
     GHC.IO.Exception.$tc'EOF2_bytes:
         I8[] [39,69,79,70]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.4530442 UTC

[section ""data" . GHC.IO.Exception.$tc'EOF1_closure" {
     GHC.IO.Exception.$tc'EOF1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'EOF2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.455142815 UTC

[section ""data" . GHC.IO.Exception.$tc'EOF_closure" {
     GHC.IO.Exception.$tc'EOF_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'EOF1_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const 15446447841260182649;
         const 9615135582901540009;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.456918697 UTC

[section ""cstring" . GHC.IO.Exception.$tc'IllegalOperation2_bytes" {
     GHC.IO.Exception.$tc'IllegalOperation2_bytes:
         I8[] [39,73,108,108,101,103,97,108,79,112,101,114,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.458624513 UTC

[section ""data" . GHC.IO.Exception.$tc'IllegalOperation1_closure" {
     GHC.IO.Exception.$tc'IllegalOperation1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'IllegalOperation2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.461021178 UTC

[section ""data" . GHC.IO.Exception.$tc'IllegalOperation_closure" {
     GHC.IO.Exception.$tc'IllegalOperation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'IllegalOperation1_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const 2997750042243464947;
         const 13732497530673208550;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.46286959 UTC

[section ""cstring" . GHC.IO.Exception.$tc'PermissionDenied2_bytes" {
     GHC.IO.Exception.$tc'PermissionDenied2_bytes:
         I8[] [39,80,101,114,109,105,115,115,105,111,110,68,101,110,105,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.464533741 UTC

[section ""data" . GHC.IO.Exception.$tc'PermissionDenied1_closure" {
     GHC.IO.Exception.$tc'PermissionDenied1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'PermissionDenied2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.466331271 UTC

[section ""data" . GHC.IO.Exception.$tc'PermissionDenied_closure" {
     GHC.IO.Exception.$tc'PermissionDenied_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'PermissionDenied1_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const 17002959889944859215;
         const 11679101384562499698;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.468096526 UTC

[section ""cstring" . GHC.IO.Exception.$tc'UserError2_bytes" {
     GHC.IO.Exception.$tc'UserError2_bytes:
         I8[] [39,85,115,101,114,69,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.470202672 UTC

[section ""data" . GHC.IO.Exception.$tc'UserError1_closure" {
     GHC.IO.Exception.$tc'UserError1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'UserError2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.471874442 UTC

[section ""data" . GHC.IO.Exception.$tc'UserError_closure" {
     GHC.IO.Exception.$tc'UserError_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'UserError1_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const 2110707588451626880;
         const 793010194601470118;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.47365515 UTC

[section ""cstring" . GHC.IO.Exception.$tc'UnsatisfiedConstraints2_bytes" {
     GHC.IO.Exception.$tc'UnsatisfiedConstraints2_bytes:
         I8[] [39,85,110,115,97,116,105,115,102,105,101,100,67,111,110,115,116,114,97,105,110,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.475228795 UTC

[section ""data" . GHC.IO.Exception.$tc'UnsatisfiedConstraints1_closure" {
     GHC.IO.Exception.$tc'UnsatisfiedConstraints1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'UnsatisfiedConstraints2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.476997543 UTC

[section ""data" . GHC.IO.Exception.$tc'UnsatisfiedConstraints_closure" {
     GHC.IO.Exception.$tc'UnsatisfiedConstraints_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'UnsatisfiedConstraints1_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const 7774786765253276509;
         const 11159080782866109022;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.478719196 UTC

[section ""cstring" . GHC.IO.Exception.$tc'SystemError2_bytes" {
     GHC.IO.Exception.$tc'SystemError2_bytes:
         I8[] [39,83,121,115,116,101,109,69,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.480463799 UTC

[section ""data" . GHC.IO.Exception.$tc'SystemError1_closure" {
     GHC.IO.Exception.$tc'SystemError1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'SystemError2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.482831281 UTC

[section ""data" . GHC.IO.Exception.$tc'SystemError_closure" {
     GHC.IO.Exception.$tc'SystemError_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'SystemError1_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const 14723310935893761222;
         const 8619015840207109406;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.484725874 UTC

[section ""cstring" . GHC.IO.Exception.$tc'ProtocolError2_bytes" {
     GHC.IO.Exception.$tc'ProtocolError2_bytes:
         I8[] [39,80,114,111,116,111,99,111,108,69,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.486934008 UTC

[section ""data" . GHC.IO.Exception.$tc'ProtocolError1_closure" {
     GHC.IO.Exception.$tc'ProtocolError1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'ProtocolError2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.488773052 UTC

[section ""data" . GHC.IO.Exception.$tc'ProtocolError_closure" {
     GHC.IO.Exception.$tc'ProtocolError_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'ProtocolError1_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const 2348878698518162749;
         const 1616623917153004368;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.490518758 UTC

[section ""cstring" . GHC.IO.Exception.$tc'OtherError2_bytes" {
     GHC.IO.Exception.$tc'OtherError2_bytes:
         I8[] [39,79,116,104,101,114,69,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.492283113 UTC

[section ""data" . GHC.IO.Exception.$tc'OtherError1_closure" {
     GHC.IO.Exception.$tc'OtherError1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'OtherError2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.494065564 UTC

[section ""data" . GHC.IO.Exception.$tc'OtherError_closure" {
     GHC.IO.Exception.$tc'OtherError_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'OtherError1_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const 11457353566076247204;
         const 7448318885269020484;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.495744837 UTC

[section ""cstring" . GHC.IO.Exception.$tc'InvalidArgument2_bytes" {
     GHC.IO.Exception.$tc'InvalidArgument2_bytes:
         I8[] [39,73,110,118,97,108,105,100,65,114,103,117,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.497690556 UTC

[section ""data" . GHC.IO.Exception.$tc'InvalidArgument1_closure" {
     GHC.IO.Exception.$tc'InvalidArgument1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'InvalidArgument2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.499317594 UTC

[section ""data" . GHC.IO.Exception.$tc'InvalidArgument_closure" {
     GHC.IO.Exception.$tc'InvalidArgument_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'InvalidArgument1_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const 2877905627043716713;
         const 870624010466166536;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.501000574 UTC

[section ""cstring" . GHC.IO.Exception.$tc'InappropriateType2_bytes" {
     GHC.IO.Exception.$tc'InappropriateType2_bytes:
         I8[] [39,73,110,97,112,112,114,111,112,114,105,97,116,101,84,121,112,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.502705598 UTC

[section ""data" . GHC.IO.Exception.$tc'InappropriateType1_closure" {
     GHC.IO.Exception.$tc'InappropriateType1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'InappropriateType2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.504414284 UTC

[section ""data" . GHC.IO.Exception.$tc'InappropriateType_closure" {
     GHC.IO.Exception.$tc'InappropriateType_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'InappropriateType1_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const 12194312324817842633;
         const 15900888301186079347;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.506146823 UTC

[section ""cstring" . GHC.IO.Exception.$tc'HardwareFault2_bytes" {
     GHC.IO.Exception.$tc'HardwareFault2_bytes:
         I8[] [39,72,97,114,100,119,97,114,101,70,97,117,108,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.507746569 UTC

[section ""data" . GHC.IO.Exception.$tc'HardwareFault1_closure" {
     GHC.IO.Exception.$tc'HardwareFault1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'HardwareFault2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.51002893 UTC

[section ""data" . GHC.IO.Exception.$tc'HardwareFault_closure" {
     GHC.IO.Exception.$tc'HardwareFault_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'HardwareFault1_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const 56378797976289033;
         const 18431513512258190916;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.51175392 UTC

[section ""cstring" . GHC.IO.Exception.$tc'UnsupportedOperation2_bytes" {
     GHC.IO.Exception.$tc'UnsupportedOperation2_bytes:
         I8[] [39,85,110,115,117,112,112,111,114,116,101,100,79,112,101,114,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.513952345 UTC

[section ""data" . GHC.IO.Exception.$tc'UnsupportedOperation1_closure" {
     GHC.IO.Exception.$tc'UnsupportedOperation1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'UnsupportedOperation2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.515724728 UTC

[section ""data" . GHC.IO.Exception.$tc'UnsupportedOperation_closure" {
     GHC.IO.Exception.$tc'UnsupportedOperation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'UnsupportedOperation1_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const 8512525638220727204;
         const 8859286885870192330;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.517521163 UTC

[section ""cstring" . GHC.IO.Exception.$tc'TimeExpired2_bytes" {
     GHC.IO.Exception.$tc'TimeExpired2_bytes:
         I8[] [39,84,105,109,101,69,120,112,105,114,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.519215613 UTC

[section ""data" . GHC.IO.Exception.$tc'TimeExpired1_closure" {
     GHC.IO.Exception.$tc'TimeExpired1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'TimeExpired2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.5209553 UTC

[section ""data" . GHC.IO.Exception.$tc'TimeExpired_closure" {
     GHC.IO.Exception.$tc'TimeExpired_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'TimeExpired1_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const 10911629093425571025;
         const 350480745296812363;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.52312397 UTC

[section ""cstring" . GHC.IO.Exception.$tc'ResourceVanished2_bytes" {
     GHC.IO.Exception.$tc'ResourceVanished2_bytes:
         I8[] [39,82,101,115,111,117,114,99,101,86,97,110,105,115,104,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.52476424 UTC

[section ""data" . GHC.IO.Exception.$tc'ResourceVanished1_closure" {
     GHC.IO.Exception.$tc'ResourceVanished1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'ResourceVanished2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.526580204 UTC

[section ""data" . GHC.IO.Exception.$tc'ResourceVanished_closure" {
     GHC.IO.Exception.$tc'ResourceVanished_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'ResourceVanished1_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const 14859807110076739958;
         const 15612633629389469803;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.528363007 UTC

[section ""cstring" . GHC.IO.Exception.$tc'Interrupted2_bytes" {
     GHC.IO.Exception.$tc'Interrupted2_bytes:
         I8[] [39,73,110,116,101,114,114,117,112,116,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.530104358 UTC

[section ""data" . GHC.IO.Exception.$tc'Interrupted1_closure" {
     GHC.IO.Exception.$tc'Interrupted1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'Interrupted2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.531875305 UTC

[section ""data" . GHC.IO.Exception.$tc'Interrupted_closure" {
     GHC.IO.Exception.$tc'Interrupted_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'Interrupted1_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const 17492795632142579451;
         const 15910845476779721305;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.534037429 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionIOException6_bytes" {
     GHC.IO.Exception.$fExceptionIOException6_bytes:
         I8[] [73,79,69,120,99,101,112,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.535790949 UTC

[section ""data" . GHC.IO.Exception.$fExceptionIOException5_closure" {
     GHC.IO.Exception.$fExceptionIOException5_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$fExceptionIOException6_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.537625188 UTC

[section ""data" . GHC.IO.Exception.$tcIOException_closure" {
     GHC.IO.Exception.$tcIOException_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$fExceptionIOException5_closure+1;
         const GHC.Types.krep$*_closure;
         const 10434000377887324342;
         const 16509375198449321302;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.540100058 UTC

[section ""data" . $krep20_r8j3A_closure" {
     $krep20_r8j3A_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Exception.$tcIOException_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.54189952 UTC

[section ""data" . $krep21_r8j3B_closure" {
     $krep21_r8j3B_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r8j3q_closure+1;
         const $krep20_r8j3A_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.543577249 UTC

[section ""data" . $krep22_r8j3C_closure" {
     $krep22_r8j3C_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r8j3k_closure+1;
         const $krep21_r8j3B_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.545351794 UTC

[section ""data" . $krep23_r8j3D_closure" {
     $krep23_r8j3D_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r8j3o_closure+1;
         const $krep22_r8j3C_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.54715291 UTC

[section ""data" . $krep24_r8j3E_closure" {
     $krep24_r8j3E_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r8j3o_closure+1;
         const $krep23_r8j3D_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.548890575 UTC

[section ""data" . $krep25_r8j3F_closure" {
     $krep25_r8j3F_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const $krep24_r8j3E_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.551024692 UTC

[section ""data" . GHC.IO.Exception.$tc'IOError1_closure" {
     GHC.IO.Exception.$tc'IOError1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r8j3m_closure+1;
         const $krep25_r8j3F_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.552784396 UTC

[section ""cstring" . GHC.IO.Exception.$tc'IOError3_bytes" {
     GHC.IO.Exception.$tc'IOError3_bytes:
         I8[] [39,73,79,69,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.554489171 UTC

[section ""data" . GHC.IO.Exception.$tc'IOError2_closure" {
     GHC.IO.Exception.$tc'IOError2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'IOError3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.5562181 UTC

[section ""data" . GHC.IO.Exception.$tc'IOError_closure" {
     GHC.IO.Exception.$tc'IOError_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'IOError2_closure+1;
         const GHC.IO.Exception.$tc'IOError1_closure+4;
         const 16489485703680136625;
         const 16514523686887444952;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.559600959 UTC

[section ""data" . GHC.IO.Exception.$fExceptionIOException4_closure" {
     GHC.IO.Exception.$fExceptionIOException4_closure:
         const GHC.IO.Exception.$fExceptionIOException4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionIOException4_entry() //  [R1]
         { []
         }
     {offset
       c8o53: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c8o54; else goto c8o55;
       c8o54: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8o55: // global
           (_c8o4V::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8o4V::I64 == 0) goto c8o4X; else goto c8o4W;
       c8o4X: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8o4W: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8o4V::I64;
           I64[Sp - 24] = block_c8o4Y_info;
           R6 = 0;
           R5 = GHC.IO.Exception.$fExceptionIOException5_closure+1;
           R4 = GHC.IO.Exception.$trModule_closure+1;
           R3 = 16509375198449321302;
           R2 = 10434000377887324342;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionIOException4_info" {
     GHC.IO.Exception.$fExceptionIOException4_info:
         const GHC.IO.Exception.$fExceptionIOException4_entry;
         const 0;
         const 4294967317;
         const S8ji8_srt+832;
 },
 _c8o4Y() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c8o4Y: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c8o4Z() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8o4Y_info" {
     block_c8o4Y_info:
         const _c8o4Y;
         const 0;
         const 30;
 },
 _c8o4Z() //  []
         { []
         }
     {offset
       c8o4Z: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8o58; else goto c8o57;
       c8o58: // global
           HpAlloc = 48;
           I64[Sp] = block_c8o4Z_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c8o57: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8o4Z_info" {
     block_c8o4Z_info:
         const _c8o4Z;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.56857759 UTC

[section ""data" . GHC.IO.Exception.$fExceptionIOException_$cfromException_closure" {
     GHC.IO.Exception.$fExceptionIOException_$cfromException_closure:
         const GHC.IO.Exception.$fExceptionIOException_$cfromException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionIOException_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c8o5B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8o5F; else goto c8o5G;
       c8o5F: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionIOException_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8o5G: // global
           I64[Sp - 8] = block_c8o5y_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8o61; else goto c8o5z;
       u8o61: // global
           call _c8o5y(R1) args: 0, res: 0, upd: 0;
       c8o5z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionIOException_$cfromException_info" {
     GHC.IO.Exception.$fExceptionIOException_$cfromException_info:
         const GHC.IO.Exception.$fExceptionIOException_$cfromException_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S8ji8_srt+840;
 },
 _c8o5y() //  [R1]
         { []
         }
     {offset
       c8o5y: // global
           I64[Sp - 8] = block_c8o5E_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8o5y_info" {
     block_c8o5y_info:
         const _c8o5y;
         const 0;
         const 12884901918;
         const S8ji8_srt+848;
 },
 _c8o5E() //  [R1]
         { []
         }
     {offset
       c8o5E: // global
           I64[Sp] = block_c8o5L_info;
           R3 = GHC.IO.Exception.$fExceptionIOException4_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8o5E_info" {
     block_c8o5E_info:
         const _c8o5E;
         const 1;
         const 12884901918;
         const S8ji8_srt+848;
 },
 _c8o5L() //  [R1]
         { []
         }
     {offset
       c8o5L: // global
           if (R1 & 7 == 1) goto c8o5S; else goto c8o5W;
       c8o5S: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8o5W: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8o5Z; else goto c8o5Y;
       c8o5Z: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8o5Y: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8o5L_info" {
     block_c8o5L_info:
         const _c8o5L;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.578336424 UTC

[section ""data" . GHC.IO.Exception.$fExceptionIOException_closure" {
     GHC.IO.Exception.$fExceptionIOException_closure:
         const GHC.Exception.C:Exception_con_info;
         const GHC.IO.Exception.$fExceptionIOException4_closure;
         const GHC.IO.Exception.$fShowIOException_closure+1;
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure+1;
         const GHC.IO.Exception.$fExceptionIOException_$cfromException_closure+1;
         const GHC.IO.Exception.$fExceptionIOException_$cshow_closure+1;
         const 0;
 },
 section ""data" . GHC.IO.Exception.$fExceptionIOException_$ctoException_closure" {
     GHC.IO.Exception.$fExceptionIOException_$ctoException_closure:
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionIOException_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c8o6s: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8o6w; else goto c8o6v;
       c8o6w: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8o6v: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = GHC.IO.Exception.$fExceptionIOException_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionIOException_$ctoException_info" {
     GHC.IO.Exception.$fExceptionIOException_$ctoException_info:
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S8ji8_srt+864;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.583417295 UTC

[section ""data" . GHC.IO.Exception.ioError1_closure" {
     GHC.IO.Exception.ioError1_closure:
         const GHC.IO.Exception.ioError1_info;
         const 0;
 },
 sat_s8jh2_entry() //  [R1]
         { []
         }
     {offset
       c8o6L: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8o6M; else goto c8o6N;
       c8o6M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8o6N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8jh2_info" {
     sat_s8jh2_info:
         const sat_s8jh2_entry;
         const 1;
         const 4294967312;
         const S8ji8_srt+872;
 },
 GHC.IO.Exception.ioError1_entry() //  [R2]
         { []
         }
     {offset
       c8o6O: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8o6S; else goto c8o6R;
       c8o6S: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Exception.ioError1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8o6R: // global
           I64[Hp - 16] = sat_s8jh2_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.ioError1_info" {
     GHC.IO.Exception.ioError1_info:
         const GHC.IO.Exception.ioError1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const S8ji8_srt+872;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.5887561 UTC

[section ""data" . GHC.IO.Exception.ioException_closure" {
     GHC.IO.Exception.ioException_closure:
         const GHC.IO.Exception.ioException_info;
         const 0;
 },
 GHC.IO.Exception.ioException_entry() //  [R2]
         { []
         }
     {offset
       c8o75: // global
           R2 = R2;
           call GHC.IO.Exception.ioError1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.ioException_info" {
     GHC.IO.Exception.ioException_info:
         const GHC.IO.Exception.ioException_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S8ji8_srt+880;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.592211502 UTC

[section ""data" . GHC.IO.Exception.ioError_closure" {
     GHC.IO.Exception.ioError_closure:
         const GHC.IO.Exception.ioError_info;
         const 0;
 },
 GHC.IO.Exception.ioError_entry() //  [R2]
         { []
         }
     {offset
       c8o7g: // global
           R2 = R2;
           call GHC.IO.Exception.ioError1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.ioError_info" {
     GHC.IO.Exception.ioError_info:
         const GHC.IO.Exception.ioError_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S8ji8_srt+880;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.595260302 UTC

[section ""data" . GHC.IO.Exception.$fxExceptionIOException_closure" {
     GHC.IO.Exception.$fxExceptionIOException_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Exception.$fExceptionIOException_closure+1;
         const 0;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.59888426 UTC

[section ""data" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cfromException_closure" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cfromException_closure:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cfromException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c8o7v: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8o7z; else goto c8o7A;
       c8o7z: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8o7A: // global
           I64[Sp - 8] = block_c8o7s_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8o7V; else goto c8o7t;
       u8o7V: // global
           call _c8o7s(R1) args: 0, res: 0, upd: 0;
       c8o7t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cfromException_info" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cfromException_info:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cfromException_entry;
         const 0;
         const 210453397518;
         const 4294967301;
         const S8ji8_srt+856;
 },
 _c8o7s() //  [R1]
         { []
         }
     {offset
       c8o7s: // global
           I64[Sp - 8] = block_c8o7y_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8o7s_info" {
     block_c8o7s_info:
         const _c8o7s;
         const 0;
         const 141733920798;
         const S8ji8_srt+856;
 },
 _c8o7y() //  [R1]
         { []
         }
     {offset
       c8o7y: // global
           I64[Sp] = block_c8o7F_info;
           R3 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar3_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8o7y_info" {
     block_c8o7y_info:
         const _c8o7y;
         const 1;
         const 141733920798;
         const S8ji8_srt+856;
 },
 _c8o7F() //  [R1]
         { []
         }
     {offset
       c8o7F: // global
           if (R1 & 7 == 1) goto c8o7M; else goto c8o7Q;
       c8o7M: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8o7Q: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8o7T; else goto c8o7S;
       c8o7T: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8o7S: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8o7F_info" {
     block_c8o7F_info:
         const _c8o7F;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.608374541 UTC

[section ""data" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_closure" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_closure:
         const GHC.Exception.C:Exception_con_info;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar3_closure;
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_closure+1;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$ctoException_closure+1;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cfromException_closure+1;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cshow_closure+1;
         const 0;
 },
 section ""data" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$ctoException_closure" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$ctoException_closure:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$ctoException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c8o8m: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8o8q; else goto c8o8p;
       c8o8q: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8o8p: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$ctoException_info" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$ctoException_info:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$ctoException_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S8ji8_srt+904;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.613155894 UTC

[section ""data" . GHC.IO.Exception.blockedIndefinitelyOnMVar_closure" {
     GHC.IO.Exception.blockedIndefinitelyOnMVar_closure:
         const GHC.IO.Exception.blockedIndefinitelyOnMVar_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.blockedIndefinitelyOnMVar_entry() //  [R1]
         { []
         }
     {offset
       c8o8D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8o8E; else goto c8o8F;
       c8o8E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8o8F: // global
           (_c8o8A::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8o8A::I64 == 0) goto c8o8C; else goto c8o8B;
       c8o8C: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8o8B: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8o8A::I64;
           R2 = GHC.IO.Exception.BlockedIndefinitelyOnMVar_closure+1;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.blockedIndefinitelyOnMVar_info" {
     GHC.IO.Exception.blockedIndefinitelyOnMVar_info:
         const GHC.IO.Exception.blockedIndefinitelyOnMVar_entry;
         const 0;
         const 4294967317;
         const S8ji8_srt+912;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.618909038 UTC

[section ""data" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cfromException_closure" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cfromException_closure:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cfromException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c8o8U: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8o8Y; else goto c8o8Z;
       c8o8Y: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8o8Z: // global
           I64[Sp - 8] = block_c8o8R_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8o9k; else goto c8o8S;
       u8o9k: // global
           call _c8o8R(R1) args: 0, res: 0, upd: 0;
       c8o8S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cfromException_info" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cfromException_info:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cfromException_entry;
         const 0;
         const 3302829850638;
         const 4294967301;
         const S8ji8_srt+856;
 },
 _c8o8R() //  [R1]
         { []
         }
     {offset
       c8o8R: // global
           I64[Sp - 8] = block_c8o8X_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8o8R_info" {
     block_c8o8R_info:
         const _c8o8R;
         const 0;
         const 2203318222878;
         const S8ji8_srt+856;
 },
 _c8o8X() //  [R1]
         { []
         }
     {offset
       c8o8X: // global
           I64[Sp] = block_c8o94_info;
           R3 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM3_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8o8X_info" {
     block_c8o8X_info:
         const _c8o8X;
         const 1;
         const 2203318222878;
         const S8ji8_srt+856;
 },
 _c8o94() //  [R1]
         { []
         }
     {offset
       c8o94: // global
           if (R1 & 7 == 1) goto c8o9b; else goto c8o9f;
       c8o9b: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8o9f: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8o9i; else goto c8o9h;
       c8o9i: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8o9h: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8o94_info" {
     block_c8o94_info:
         const _c8o94;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.627543768 UTC

[section ""data" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_closure" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_closure:
         const GHC.Exception.C:Exception_con_info;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM3_closure;
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_closure+1;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$ctoException_closure+1;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cfromException_closure+1;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cshow_closure+1;
         const 0;
 },
 section ""data" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$ctoException_closure" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$ctoException_closure:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$ctoException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c8o9L: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8o9P; else goto c8o9O;
       c8o9P: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8o9O: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$ctoException_info" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$ctoException_info:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$ctoException_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S8ji8_srt+936;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.632827797 UTC

[section ""data" . GHC.IO.Exception.blockedIndefinitelyOnSTM_closure" {
     GHC.IO.Exception.blockedIndefinitelyOnSTM_closure:
         const GHC.IO.Exception.blockedIndefinitelyOnSTM_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.blockedIndefinitelyOnSTM_entry() //  [R1]
         { []
         }
     {offset
       c8oa2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oa3; else goto c8oa4;
       c8oa3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8oa4: // global
           (_c8o9Z::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8o9Z::I64 == 0) goto c8oa1; else goto c8oa0;
       c8oa1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8oa0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8o9Z::I64;
           R2 = GHC.IO.Exception.BlockedIndefinitelyOnSTM_closure+1;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.blockedIndefinitelyOnSTM_info" {
     GHC.IO.Exception.blockedIndefinitelyOnSTM_info:
         const GHC.IO.Exception.blockedIndefinitelyOnSTM_entry;
         const 0;
         const 4294967317;
         const S8ji8_srt+944;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.638898301 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cfromException_closure" {
     GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cfromException_closure:
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cfromException_info;
         const 0;
 },
 section ""relreadonly" . u8oba_srtd" {
     u8oba_srtd:
         const S8ji8_srt+688;
         const 35;
         const 25771900929;
 },
 GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c8oaj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oan; else goto c8oao;
       c8oan: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8oao: // global
           I64[Sp - 8] = block_c8oag_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8ob7; else goto c8oah;
       u8ob7: // global
           call _c8oag(R1) args: 0, res: 0, upd: 0;
       c8oah: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cfromException_info" {
     GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cfromException_info:
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cfromException_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u8oba_srtd;
 },
 section ""relreadonly" . u8obb_srtd" {
     u8obb_srtd:
         const S8ji8_srt+688;
         const 35;
         const 17181966337;
 },
 _c8oag() //  [R1]
         { []
         }
     {offset
       c8oag: // global
           I64[Sp - 8] = block_c8oam_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8oag_info" {
     block_c8oag_info:
         const _c8oag;
         const 0;
         const 18446744069414584350;
         const u8obb_srtd;
 },
 section ""relreadonly" . u8obc_srtd" {
     u8obc_srtd:
         const S8ji8_srt+688;
         const 35;
         const 17181966337;
 },
 _c8oam() //  [R1]
         { []
         }
     {offset
       c8oam: // global
           I64[Sp] = block_c8oat_info;
           R3 = GHC.IO.Exception.$fExceptionAllocationLimitExceeded6_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8oam_info" {
     block_c8oam_info:
         const _c8oam;
         const 1;
         const 18446744069414584350;
         const u8obc_srtd;
 },
 _c8oat() //  [R1]
         { []
         }
     {offset
       c8oat: // global
           if (R1 & 7 == 1) goto u8ob5; else goto c8oaJ;
       u8ob5: // global
           Sp = Sp + 16;
           call _c8oaV() args: 0, res: 0, upd: 0;
       c8oaJ: // global
           _s8jhi::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8oaD_info;
           R1 = _s8jhi::P64;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8oat_info" {
     block_c8oat_info:
         const _c8oat;
         const 1;
         const 35188667056158;
         const S8ji8_srt+856;
 },
 _c8oaD() //  [R1]
         { []
         }
     {offset
       c8oaD: // global
           I64[Sp - 8] = block_c8oaH_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8oaD_info" {
     block_c8oaD_info:
         const _c8oaD;
         const 0;
         const 35188667056158;
         const S8ji8_srt+856;
 },
 _c8oaH() //  [R1]
         { []
         }
     {offset
       c8oaH: // global
           I64[Sp] = block_c8oaO_info;
           R3 = GHC.IO.Exception.$fExceptionAllocationLimitExceeded3_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8oaH_info" {
     block_c8oaH_info:
         const _c8oaH;
         const 1;
         const 35188667056158;
         const S8ji8_srt+856;
 },
 _c8oaO() //  [R1]
         { []
         }
     {offset
       c8oaO: // global
           if (R1 & 7 == 1) goto u8ob6; else goto c8oaZ;
       u8ob6: // global
           Sp = Sp + 16;
           call _c8oaV() args: 0, res: 0, upd: 0;
       c8oaZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8ob2; else goto c8ob1;
       c8ob2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8ob1: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8oaO_info" {
     block_c8oaO_info:
         const _c8oaO;
         const 1;
         const 30;
 },
 _c8oaV() //  []
         { []
         }
     {offset
       c8oaV: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.655335414 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAllocationLimitExceeded_closure" {
     GHC.IO.Exception.$fExceptionAllocationLimitExceeded_closure:
         const GHC.Exception.C:Exception_con_info;
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded3_closure;
         const GHC.IO.Exception.$fShowAllocationLimitExceeded_closure+1;
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$ctoException_closure+1;
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cfromException_closure+1;
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cshow_closure+1;
         const 0;
 },
 section ""data" . GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$ctoException_closure" {
     GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$ctoException_closure:
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$ctoException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c8obU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8obY; else goto c8obX;
       c8obY: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8obX: // global
           I64[Hp - 16] = GHC.IO.Exception.SomeAsyncException_con_info;
           P64[Hp - 8] = GHC.IO.Exception.$fExceptionAllocationLimitExceeded_closure+1;
           P64[Hp] = R2;
           R2 = Hp - 15;
           call GHC.IO.Exception.$fExceptionSomeAsyncException_$ctoException_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$ctoException_info" {
     GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$ctoException_info:
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$ctoException_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S8ji8_srt+968;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.659906696 UTC

[section ""data" . GHC.IO.Exception.allocationLimitExceeded_closure" {
     GHC.IO.Exception.allocationLimitExceeded_closure:
         const GHC.IO.Exception.allocationLimitExceeded_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.allocationLimitExceeded_entry() //  [R1]
         { []
         }
     {offset
       c8oca: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8ocb; else goto c8occ;
       c8ocb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8occ: // global
           (_c8oc7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8oc7::I64 == 0) goto c8oc9; else goto c8oc8;
       c8oc9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8oc8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8oc7::I64;
           R2 = GHC.IO.Exception.AllocationLimitExceeded_closure+1;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.allocationLimitExceeded_info" {
     GHC.IO.Exception.allocationLimitExceeded_info:
         const GHC.IO.Exception.allocationLimitExceeded_entry;
         const 0;
         const 4294967317;
         const S8ji8_srt+976;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.665262561 UTC

[section ""data" . GHC.IO.Exception.$fExceptionCompactionFailed_$cfromException_closure" {
     GHC.IO.Exception.$fExceptionCompactionFailed_$cfromException_closure:
         const GHC.IO.Exception.$fExceptionCompactionFailed_$cfromException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionCompactionFailed_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c8ocr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8ocv; else goto c8ocw;
       c8ocv: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionCompactionFailed_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8ocw: // global
           I64[Sp - 8] = block_c8oco_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8ocR; else goto c8ocp;
       u8ocR: // global
           call _c8oco(R1) args: 0, res: 0, upd: 0;
       c8ocp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionCompactionFailed_$cfromException_info" {
     GHC.IO.Exception.$fExceptionCompactionFailed_$cfromException_info:
         const GHC.IO.Exception.$fExceptionCompactionFailed_$cfromException_entry;
         const 0;
         const 1688854155231246;
         const 4294967301;
         const S8ji8_srt+856;
 },
 _c8oco() //  [R1]
         { []
         }
     {offset
       c8oco: // global
           I64[Sp - 8] = block_c8ocu_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8oco_info" {
     block_c8oco_info:
         const _c8oco;
         const 0;
         const 1125904201809950;
         const S8ji8_srt+856;
 },
 _c8ocu() //  [R1]
         { []
         }
     {offset
       c8ocu: // global
           I64[Sp] = block_c8ocB_info;
           R3 = GHC.IO.Exception.$fExceptionCompactionFailed2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ocu_info" {
     block_c8ocu_info:
         const _c8ocu;
         const 1;
         const 1125904201809950;
         const S8ji8_srt+856;
 },
 _c8ocB() //  [R1]
         { []
         }
     {offset
       c8ocB: // global
           if (R1 & 7 == 1) goto c8ocI; else goto c8ocM;
       c8ocI: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8ocM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8ocP; else goto c8ocO;
       c8ocP: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8ocO: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ocB_info" {
     block_c8ocB_info:
         const _c8ocB;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.673756573 UTC

[section ""data" . GHC.IO.Exception.$fExceptionCompactionFailed_closure" {
     GHC.IO.Exception.$fExceptionCompactionFailed_closure:
         const GHC.Exception.C:Exception_con_info;
         const GHC.IO.Exception.$fExceptionCompactionFailed2_closure;
         const GHC.IO.Exception.$fShowCompactionFailed_closure+1;
         const GHC.IO.Exception.$fExceptionCompactionFailed_$ctoException_closure+1;
         const GHC.IO.Exception.$fExceptionCompactionFailed_$cfromException_closure+1;
         const GHC.IO.Exception.$fExceptionCompactionFailed_$cshow_closure+1;
         const 0;
 },
 section ""data" . GHC.IO.Exception.$fExceptionCompactionFailed_$ctoException_closure" {
     GHC.IO.Exception.$fExceptionCompactionFailed_$ctoException_closure:
         const GHC.IO.Exception.$fExceptionCompactionFailed_$ctoException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionCompactionFailed_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c8odi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8odm; else goto c8odl;
       c8odm: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionCompactionFailed_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8odl: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = GHC.IO.Exception.$fExceptionCompactionFailed_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionCompactionFailed_$ctoException_info" {
     GHC.IO.Exception.$fExceptionCompactionFailed_$ctoException_info:
         const GHC.IO.Exception.$fExceptionCompactionFailed_$ctoException_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S8ji8_srt+1008;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.678624494 UTC

[section ""cstring" . GHC.IO.Exception.cannotCompactMutable2_bytes" {
     GHC.IO.Exception.cannotCompactMutable2_bytes:
         I8[] [99,97,110,110,111,116,32,99,111,109,112,97,99,116,32,109,117,116,97,98,108,101,32,111,98,106,101,99,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.680873674 UTC

[section ""data" . GHC.IO.Exception.cannotCompactMutable1_closure" {
     GHC.IO.Exception.cannotCompactMutable1_closure:
         const GHC.IO.Exception.cannotCompactMutable1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.cannotCompactMutable1_entry() //  [R1]
         { []
         }
     {offset
       c8odA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8odB; else goto c8odC;
       c8odB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8odC: // global
           (_c8odx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8odx::I64 == 0) goto c8odz; else goto c8ody;
       c8odz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8ody: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8odx::I64;
           R2 = GHC.IO.Exception.cannotCompactMutable2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.cannotCompactMutable1_info" {
     GHC.IO.Exception.cannotCompactMutable1_info:
         const GHC.IO.Exception.cannotCompactMutable1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.684869726 UTC

[section ""data" . GHC.IO.Exception.cannotCompactMutable_closure" {
     GHC.IO.Exception.cannotCompactMutable_closure:
         const GHC.IO.Exception.cannotCompactMutable_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.cannotCompactMutable_entry() //  [R1]
         { []
         }
     {offset
       c8odQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8odR; else goto c8odS;
       c8odR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8odS: // global
           (_c8odN::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8odN::I64 == 0) goto c8odP; else goto c8odO;
       c8odP: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8odO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8odN::I64;
           R2 = GHC.IO.Exception.cannotCompactMutable1_closure;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionCompactionFailed_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.cannotCompactMutable_info" {
     GHC.IO.Exception.cannotCompactMutable_info:
         const GHC.IO.Exception.cannotCompactMutable_entry;
         const 0;
         const 12884901909;
         const S8ji8_srt+1016;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.688383074 UTC

[section ""cstring" . GHC.IO.Exception.cannotCompactPinned2_bytes" {
     GHC.IO.Exception.cannotCompactPinned2_bytes:
         I8[] [99,97,110,110,111,116,32,99,111,109,112,97,99,116,32,112,105,110,110,101,100,32,111,98,106,101,99,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.690954547 UTC

[section ""data" . GHC.IO.Exception.cannotCompactPinned1_closure" {
     GHC.IO.Exception.cannotCompactPinned1_closure:
         const GHC.IO.Exception.cannotCompactPinned1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.cannotCompactPinned1_entry() //  [R1]
         { []
         }
     {offset
       c8oe7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oe8; else goto c8oe9;
       c8oe8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8oe9: // global
           (_c8oe4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8oe4::I64 == 0) goto c8oe6; else goto c8oe5;
       c8oe6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8oe5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8oe4::I64;
           R2 = GHC.IO.Exception.cannotCompactPinned2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.cannotCompactPinned1_info" {
     GHC.IO.Exception.cannotCompactPinned1_info:
         const GHC.IO.Exception.cannotCompactPinned1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.694812582 UTC

[section ""data" . GHC.IO.Exception.cannotCompactPinned_closure" {
     GHC.IO.Exception.cannotCompactPinned_closure:
         const GHC.IO.Exception.cannotCompactPinned_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.cannotCompactPinned_entry() //  [R1]
         { []
         }
     {offset
       c8oen: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oeo; else goto c8oep;
       c8oeo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8oep: // global
           (_c8oek::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8oek::I64 == 0) goto c8oem; else goto c8oel;
       c8oem: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8oel: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8oek::I64;
           R2 = GHC.IO.Exception.cannotCompactPinned1_closure;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionCompactionFailed_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.cannotCompactPinned_info" {
     GHC.IO.Exception.cannotCompactPinned_info:
         const GHC.IO.Exception.cannotCompactPinned_entry;
         const 0;
         const 21474836501;
         const S8ji8_srt+1016;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.698282919 UTC

[section ""cstring" . GHC.IO.Exception.cannotCompactFunction2_bytes" {
     GHC.IO.Exception.cannotCompactFunction2_bytes:
         I8[] [99,97,110,110,111,116,32,99,111,109,112,97,99,116,32,102,117,110,99,116,105,111,110,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.700387893 UTC

[section ""data" . GHC.IO.Exception.cannotCompactFunction1_closure" {
     GHC.IO.Exception.cannotCompactFunction1_closure:
         const GHC.IO.Exception.cannotCompactFunction1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.cannotCompactFunction1_entry() //  [R1]
         { []
         }
     {offset
       c8oeE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oeF; else goto c8oeG;
       c8oeF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8oeG: // global
           (_c8oeB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8oeB::I64 == 0) goto c8oeD; else goto c8oeC;
       c8oeD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8oeC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8oeB::I64;
           R2 = GHC.IO.Exception.cannotCompactFunction2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.cannotCompactFunction1_info" {
     GHC.IO.Exception.cannotCompactFunction1_info:
         const GHC.IO.Exception.cannotCompactFunction1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.704688035 UTC

[section ""data" . GHC.IO.Exception.cannotCompactFunction_closure" {
     GHC.IO.Exception.cannotCompactFunction_closure:
         const GHC.IO.Exception.cannotCompactFunction_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.cannotCompactFunction_entry() //  [R1]
         { []
         }
     {offset
       c8oeU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oeV; else goto c8oeW;
       c8oeV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8oeW: // global
           (_c8oeR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8oeR::I64 == 0) goto c8oeT; else goto c8oeS;
       c8oeT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8oeS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8oeR::I64;
           R2 = GHC.IO.Exception.cannotCompactFunction1_closure;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionCompactionFailed_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.cannotCompactFunction_info" {
     GHC.IO.Exception.cannotCompactFunction_info:
         const GHC.IO.Exception.cannotCompactFunction_entry;
         const 0;
         const 38654705685;
         const S8ji8_srt+1016;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.710483604 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAsyncException_$cfromException_closure" {
     GHC.IO.Exception.$fExceptionAsyncException_$cfromException_closure:
         const GHC.IO.Exception.$fExceptionAsyncException_$cfromException_info;
         const 0;
 },
 section ""relreadonly" . u8og2_srtd" {
     u8og2_srtd:
         const S8ji8_srt+688;
         const 47;
         const 105553118363649;
 },
 GHC.IO.Exception.$fExceptionAsyncException_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c8ofb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8off; else goto c8ofg;
       c8off: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionAsyncException_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8ofg: // global
           I64[Sp - 8] = block_c8of8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8ofZ; else goto c8of9;
       u8ofZ: // global
           call _c8of8(R1) args: 0, res: 0, upd: 0;
       c8of9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionAsyncException_$cfromException_info" {
     GHC.IO.Exception.$fExceptionAsyncException_$cfromException_info:
         const GHC.IO.Exception.$fExceptionAsyncException_$cfromException_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u8og2_srtd;
 },
 section ""relreadonly" . u8og3_srtd" {
     u8og3_srtd:
         const S8ji8_srt+688;
         const 47;
         const 70368746274817;
 },
 _c8of8() //  [R1]
         { []
         }
     {offset
       c8of8: // global
           I64[Sp - 8] = block_c8ofe_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8of8_info" {
     block_c8of8_info:
         const _c8of8;
         const 0;
         const 18446744069414584350;
         const u8og3_srtd;
 },
 section ""relreadonly" . u8og4_srtd" {
     u8og4_srtd:
         const S8ji8_srt+688;
         const 47;
         const 70368746274817;
 },
 _c8ofe() //  [R1]
         { []
         }
     {offset
       c8ofe: // global
           I64[Sp] = block_c8ofl_info;
           R3 = GHC.IO.Exception.$fExceptionAllocationLimitExceeded6_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ofe_info" {
     block_c8ofe_info:
         const _c8ofe;
         const 1;
         const 18446744069414584350;
         const u8og4_srtd;
 },
 _c8ofl() //  [R1]
         { []
         }
     {offset
       c8ofl: // global
           if (R1 & 7 == 1) goto u8ofX; else goto c8ofB;
       u8ofX: // global
           Sp = Sp + 16;
           call _c8ofN() args: 0, res: 0, upd: 0;
       c8ofB: // global
           _s8jhB::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8ofv_info;
           R1 = _s8jhB::P64;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ofl_info" {
     block_c8ofl_info:
         const _c8ofl;
         const 1;
         const 144115192370823198;
         const S8ji8_srt+856;
 },
 _c8ofv() //  [R1]
         { []
         }
     {offset
       c8ofv: // global
           I64[Sp - 8] = block_c8ofz_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ofv_info" {
     block_c8ofv_info:
         const _c8ofv;
         const 0;
         const 144115192370823198;
         const S8ji8_srt+856;
 },
 _c8ofz() //  [R1]
         { []
         }
     {offset
       c8ofz: // global
           I64[Sp] = block_c8ofG_info;
           R3 = GHC.IO.Exception.$fExceptionAsyncException9_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ofz_info" {
     block_c8ofz_info:
         const _c8ofz;
         const 1;
         const 144115192370823198;
         const S8ji8_srt+856;
 },
 _c8ofG() //  [R1]
         { []
         }
     {offset
       c8ofG: // global
           if (R1 & 7 == 1) goto u8ofY; else goto c8ofR;
       u8ofY: // global
           Sp = Sp + 16;
           call _c8ofN() args: 0, res: 0, upd: 0;
       c8ofR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8ofU; else goto c8ofT;
       c8ofU: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8ofT: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ofG_info" {
     block_c8ofG_info:
         const _c8ofG;
         const 1;
         const 30;
 },
 _c8ofN() //  []
         { []
         }
     {offset
       c8ofN: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.726804366 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAsyncException_closure" {
     GHC.IO.Exception.$fExceptionAsyncException_closure:
         const GHC.Exception.C:Exception_con_info;
         const GHC.IO.Exception.$fExceptionAsyncException9_closure;
         const GHC.IO.Exception.$fShowAsyncException_closure+1;
         const GHC.IO.Exception.$fExceptionAsyncException_$ctoException_closure+1;
         const GHC.IO.Exception.$fExceptionAsyncException_$cfromException_closure+1;
         const GHC.IO.Exception.$fExceptionAsyncException_$cshow_closure+1;
         const 0;
 },
 section ""data" . GHC.IO.Exception.$fExceptionAsyncException_$ctoException_closure" {
     GHC.IO.Exception.$fExceptionAsyncException_$ctoException_closure:
         const GHC.IO.Exception.$fExceptionAsyncException_$ctoException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionAsyncException_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c8ogM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8ogQ; else goto c8ogP;
       c8ogQ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionAsyncException_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8ogP: // global
           I64[Hp - 16] = GHC.IO.Exception.SomeAsyncException_con_info;
           P64[Hp - 8] = GHC.IO.Exception.$fExceptionAsyncException_closure+1;
           P64[Hp] = R2;
           R2 = Hp - 15;
           call GHC.IO.Exception.$fExceptionSomeAsyncException_$ctoException_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionAsyncException_$ctoException_info" {
     GHC.IO.Exception.$fExceptionAsyncException_$ctoException_info:
         const GHC.IO.Exception.$fExceptionAsyncException_$ctoException_entry;
         const 0;
         const 13198434500622;
         const 4294967301;
         const S8ji8_srt+984;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.731340984 UTC

[section ""data" . GHC.IO.Exception.heapOverflow_closure" {
     GHC.IO.Exception.heapOverflow_closure:
         const GHC.IO.Exception.heapOverflow_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.heapOverflow_entry() //  [R1]
         { []
         }
     {offset
       c8oh2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oh3; else goto c8oh4;
       c8oh3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8oh4: // global
           (_c8ogZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8ogZ::I64 == 0) goto c8oh1; else goto c8oh0;
       c8oh1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8oh0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8ogZ::I64;
           R2 = GHC.IO.Exception.HeapOverflow_closure+2;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionAsyncException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.heapOverflow_info" {
     GHC.IO.Exception.heapOverflow_info:
         const GHC.IO.Exception.heapOverflow_entry;
         const 0;
         const 4294967317;
         const S8ji8_srt+1072;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.735316299 UTC

[section ""data" . GHC.IO.Exception.stackOverflow_closure" {
     GHC.IO.Exception.stackOverflow_closure:
         const GHC.IO.Exception.stackOverflow_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.stackOverflow_entry() //  [R1]
         { []
         }
     {offset
       c8ohi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8ohj; else goto c8ohk;
       c8ohj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8ohk: // global
           (_c8ohf::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8ohf::I64 == 0) goto c8ohh; else goto c8ohg;
       c8ohh: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8ohg: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8ohf::I64;
           R2 = GHC.IO.Exception.StackOverflow_closure+1;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionAsyncException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.stackOverflow_info" {
     GHC.IO.Exception.stackOverflow_info:
         const GHC.IO.Exception.stackOverflow_entry;
         const 0;
         const 4294967317;
         const S8ji8_srt+1072;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.739938149 UTC

[section ""data" . GHC.IO.Exception.IOError_closure" {
     GHC.IO.Exception.IOError_closure:
         const GHC.IO.Exception.IOError_info;
 },
 GHC.IO.Exception.IOError_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c8ohx: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c8ohB; else goto c8ohA;
       c8ohB: // global
           HpAlloc = 56;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.IOError_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c8ohA: // global
           I64[Hp - 48] = GHC.IO.Exception.IOError_con_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = P64[Sp];
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.IOError_info" {
     GHC.IO.Exception.IOError_info:
         const GHC.IO.Exception.IOError_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.743376256 UTC

[section ""data" . GHC.IO.Exception.AlreadyExists_closure" {
     GHC.IO.Exception.AlreadyExists_closure:
         const GHC.IO.Exception.AlreadyExists_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.744929249 UTC

[section ""data" . GHC.IO.Exception.NoSuchThing_closure" {
     GHC.IO.Exception.NoSuchThing_closure:
         const GHC.IO.Exception.NoSuchThing_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.747199826 UTC

[section ""data" . GHC.IO.Exception.ResourceBusy_closure" {
     GHC.IO.Exception.ResourceBusy_closure:
         const GHC.IO.Exception.ResourceBusy_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.748821604 UTC

[section ""data" . GHC.IO.Exception.ResourceExhausted_closure" {
     GHC.IO.Exception.ResourceExhausted_closure:
         const GHC.IO.Exception.ResourceExhausted_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.750726865 UTC

[section ""data" . GHC.IO.Exception.EOF_closure" {
     GHC.IO.Exception.EOF_closure:
         const GHC.IO.Exception.EOF_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.752344717 UTC

[section ""data" . GHC.IO.Exception.IllegalOperation_closure" {
     GHC.IO.Exception.IllegalOperation_closure:
         const GHC.IO.Exception.IllegalOperation_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.753994064 UTC

[section ""data" . GHC.IO.Exception.PermissionDenied_closure" {
     GHC.IO.Exception.PermissionDenied_closure:
         const GHC.IO.Exception.PermissionDenied_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.755628623 UTC

[section ""data" . GHC.IO.Exception.UserError_closure" {
     GHC.IO.Exception.UserError_closure:
         const GHC.IO.Exception.UserError_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.757297117 UTC

[section ""data" . GHC.IO.Exception.UnsatisfiedConstraints_closure" {
     GHC.IO.Exception.UnsatisfiedConstraints_closure:
         const GHC.IO.Exception.UnsatisfiedConstraints_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.758950161 UTC

[section ""data" . GHC.IO.Exception.SystemError_closure" {
     GHC.IO.Exception.SystemError_closure:
         const GHC.IO.Exception.SystemError_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.760650049 UTC

[section ""data" . GHC.IO.Exception.ProtocolError_closure" {
     GHC.IO.Exception.ProtocolError_closure:
         const GHC.IO.Exception.ProtocolError_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.762646538 UTC

[section ""data" . GHC.IO.Exception.OtherError_closure" {
     GHC.IO.Exception.OtherError_closure:
         const GHC.IO.Exception.OtherError_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.764273503 UTC

[section ""data" . GHC.IO.Exception.InvalidArgument_closure" {
     GHC.IO.Exception.InvalidArgument_closure:
         const GHC.IO.Exception.InvalidArgument_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.765980704 UTC

[section ""data" . GHC.IO.Exception.InappropriateType_closure" {
     GHC.IO.Exception.InappropriateType_closure:
         const GHC.IO.Exception.InappropriateType_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.767579221 UTC

[section ""data" . GHC.IO.Exception.HardwareFault_closure" {
     GHC.IO.Exception.HardwareFault_closure:
         const GHC.IO.Exception.HardwareFault_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.769184326 UTC

[section ""data" . GHC.IO.Exception.UnsupportedOperation_closure" {
     GHC.IO.Exception.UnsupportedOperation_closure:
         const GHC.IO.Exception.UnsupportedOperation_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.771410488 UTC

[section ""data" . GHC.IO.Exception.TimeExpired_closure" {
     GHC.IO.Exception.TimeExpired_closure:
         const GHC.IO.Exception.TimeExpired_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.773082209 UTC

[section ""data" . GHC.IO.Exception.ResourceVanished_closure" {
     GHC.IO.Exception.ResourceVanished_closure:
         const GHC.IO.Exception.ResourceVanished_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.775157995 UTC

[section ""data" . GHC.IO.Exception.Interrupted_closure" {
     GHC.IO.Exception.Interrupted_closure:
         const GHC.IO.Exception.Interrupted_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.776836834 UTC

[section ""data" . GHC.IO.Exception.ExitSuccess_closure" {
     GHC.IO.Exception.ExitSuccess_closure:
         const GHC.IO.Exception.ExitSuccess_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.779133097 UTC

[section ""data" . GHC.IO.Exception.ExitFailure_closure" {
     GHC.IO.Exception.ExitFailure_closure:
         const GHC.IO.Exception.ExitFailure_info;
 },
 GHC.IO.Exception.ExitFailure_entry() //  [R2]
         { []
         }
     {offset
       c8oi7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8oib; else goto c8oia;
       c8oib: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.IO.Exception.ExitFailure_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8oia: // global
           I64[Hp - 8] = GHC.IO.Exception.ExitFailure_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.ExitFailure_info" {
     GHC.IO.Exception.ExitFailure_info:
         const GHC.IO.Exception.ExitFailure_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.78257229 UTC

[section ""data" . GHC.IO.Exception.FixIOException_closure" {
     GHC.IO.Exception.FixIOException_closure:
         const GHC.IO.Exception.FixIOException_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.784634511 UTC

[section ""data" . GHC.IO.Exception.IndexOutOfBounds_closure" {
     GHC.IO.Exception.IndexOutOfBounds_closure:
         const GHC.IO.Exception.IndexOutOfBounds_info;
 },
 GHC.IO.Exception.IndexOutOfBounds_entry() //  [R2]
         { []
         }
     {offset
       c8oin: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8oir; else goto c8oiq;
       c8oir: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.IO.Exception.IndexOutOfBounds_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8oiq: // global
           I64[Hp - 8] = GHC.IO.Exception.IndexOutOfBounds_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.IndexOutOfBounds_info" {
     GHC.IO.Exception.IndexOutOfBounds_info:
         const GHC.IO.Exception.IndexOutOfBounds_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.788658194 UTC

[section ""data" . GHC.IO.Exception.UndefinedElement_closure" {
     GHC.IO.Exception.UndefinedElement_closure:
         const GHC.IO.Exception.UndefinedElement_info;
 },
 GHC.IO.Exception.UndefinedElement_entry() //  [R2]
         { []
         }
     {offset
       c8oiC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8oiG; else goto c8oiF;
       c8oiG: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.IO.Exception.UndefinedElement_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8oiF: // global
           I64[Hp - 8] = GHC.IO.Exception.UndefinedElement_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.UndefinedElement_info" {
     GHC.IO.Exception.UndefinedElement_info:
         const GHC.IO.Exception.UndefinedElement_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.791847527 UTC

[section ""data" . GHC.IO.Exception.StackOverflow_closure" {
     GHC.IO.Exception.StackOverflow_closure:
         const GHC.IO.Exception.StackOverflow_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.793548147 UTC

[section ""data" . GHC.IO.Exception.HeapOverflow_closure" {
     GHC.IO.Exception.HeapOverflow_closure:
         const GHC.IO.Exception.HeapOverflow_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.795155762 UTC

[section ""data" . GHC.IO.Exception.ThreadKilled_closure" {
     GHC.IO.Exception.ThreadKilled_closure:
         const GHC.IO.Exception.ThreadKilled_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.796780428 UTC

[section ""data" . GHC.IO.Exception.UserInterrupt_closure" {
     GHC.IO.Exception.UserInterrupt_closure:
         const GHC.IO.Exception.UserInterrupt_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.799587445 UTC

[section ""data" . GHC.IO.Exception.SomeAsyncException_closure" {
     GHC.IO.Exception.SomeAsyncException_closure:
         const GHC.IO.Exception.SomeAsyncException_info;
 },
 GHC.IO.Exception.SomeAsyncException_entry() //  [R2, R3]
         { []
         }
     {offset
       c8oiV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8oiZ; else goto c8oiY;
       c8oiZ: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.SomeAsyncException_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8oiY: // global
           I64[Hp - 16] = GHC.IO.Exception.SomeAsyncException_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.SomeAsyncException_info" {
     GHC.IO.Exception.SomeAsyncException_info:
         const GHC.IO.Exception.SomeAsyncException_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.803197236 UTC

[section ""data" . GHC.IO.Exception.AllocationLimitExceeded_closure" {
     GHC.IO.Exception.AllocationLimitExceeded_closure:
         const GHC.IO.Exception.AllocationLimitExceeded_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.804772662 UTC

[section ""data" . GHC.IO.Exception.Deadlock_closure" {
     GHC.IO.Exception.Deadlock_closure:
         const GHC.IO.Exception.Deadlock_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.806389101 UTC

[section ""data" . GHC.IO.Exception.BlockedIndefinitelyOnSTM_closure" {
     GHC.IO.Exception.BlockedIndefinitelyOnSTM_closure:
         const GHC.IO.Exception.BlockedIndefinitelyOnSTM_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.808064597 UTC

[section ""data" . GHC.IO.Exception.BlockedIndefinitelyOnMVar_closure" {
     GHC.IO.Exception.BlockedIndefinitelyOnMVar_closure:
         const GHC.IO.Exception.BlockedIndefinitelyOnMVar_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.809915078 UTC

[section ""cstring" . i8m4B_str" {
     i8m4B_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,73,79,69,114,114,111,114]
 },
 GHC.IO.Exception.IOError_con_entry() //  [R1]
         { []
         }
     {offset
       c8oj9: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.IOError_con_info" {
     GHC.IO.Exception.IOError_con_info:
         const GHC.IO.Exception.IOError_con_entry;
         const 6;
         const 1;
         const i8m4B_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.813110616 UTC

[section ""relreadonly" . GHC.IO.Exception.IOErrorType_closure_tbl" {
     GHC.IO.Exception.IOErrorType_closure_tbl:
         const GHC.IO.Exception.AlreadyExists_closure+1;
         const GHC.IO.Exception.NoSuchThing_closure+1;
         const GHC.IO.Exception.ResourceBusy_closure+1;
         const GHC.IO.Exception.ResourceExhausted_closure+1;
         const GHC.IO.Exception.EOF_closure+1;
         const GHC.IO.Exception.IllegalOperation_closure+1;
         const GHC.IO.Exception.PermissionDenied_closure+1;
         const GHC.IO.Exception.UserError_closure+1;
         const GHC.IO.Exception.UnsatisfiedConstraints_closure+1;
         const GHC.IO.Exception.SystemError_closure+1;
         const GHC.IO.Exception.ProtocolError_closure+1;
         const GHC.IO.Exception.OtherError_closure+1;
         const GHC.IO.Exception.InvalidArgument_closure+1;
         const GHC.IO.Exception.InappropriateType_closure+1;
         const GHC.IO.Exception.HardwareFault_closure+1;
         const GHC.IO.Exception.UnsupportedOperation_closure+1;
         const GHC.IO.Exception.TimeExpired_closure+1;
         const GHC.IO.Exception.ResourceVanished_closure+1;
         const GHC.IO.Exception.Interrupted_closure+1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.815228193 UTC

[section ""cstring" . i8m4D_str" {
     i8m4D_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,65,108,114,101,97,100,121,69,120,105,115,116,115]
 },
 GHC.IO.Exception.AlreadyExists_con_entry() //  [R1]
         { []
         }
     {offset
       c8ojg: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.AlreadyExists_con_info" {
     GHC.IO.Exception.AlreadyExists_con_info:
         const GHC.IO.Exception.AlreadyExists_con_entry;
         const 4294967296;
         const 3;
         const i8m4D_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.818808912 UTC

[section ""cstring" . i8m4F_str" {
     i8m4F_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,78,111,83,117,99,104,84,104,105,110,103]
 },
 GHC.IO.Exception.NoSuchThing_con_entry() //  [R1]
         { []
         }
     {offset
       c8ojm: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.NoSuchThing_con_info" {
     GHC.IO.Exception.NoSuchThing_con_info:
         const GHC.IO.Exception.NoSuchThing_con_entry;
         const 4294967296;
         const 4294967299;
         const i8m4F_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.822036337 UTC

[section ""cstring" . i8m4H_str" {
     i8m4H_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,82,101,115,111,117,114,99,101,66,117,115,121]
 },
 GHC.IO.Exception.ResourceBusy_con_entry() //  [R1]
         { []
         }
     {offset
       c8ojs: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.ResourceBusy_con_info" {
     GHC.IO.Exception.ResourceBusy_con_info:
         const GHC.IO.Exception.ResourceBusy_con_entry;
         const 4294967296;
         const 8589934595;
         const i8m4H_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.825222403 UTC

[section ""cstring" . i8m4J_str" {
     i8m4J_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,82,101,115,111,117,114,99,101,69,120,104,97,117,115,116,101,100]
 },
 GHC.IO.Exception.ResourceExhausted_con_entry() //  [R1]
         { []
         }
     {offset
       c8ojy: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.ResourceExhausted_con_info" {
     GHC.IO.Exception.ResourceExhausted_con_info:
         const GHC.IO.Exception.ResourceExhausted_con_entry;
         const 4294967296;
         const 12884901891;
         const i8m4J_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.828945068 UTC

[section ""cstring" . i8m4L_str" {
     i8m4L_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,69,79,70]
 },
 GHC.IO.Exception.EOF_con_entry() //  [R1]
         { []
         }
     {offset
       c8ojE: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.EOF_con_info" {
     GHC.IO.Exception.EOF_con_info:
         const GHC.IO.Exception.EOF_con_entry;
         const 4294967296;
         const 17179869187;
         const i8m4L_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.832511745 UTC

[section ""cstring" . i8m4N_str" {
     i8m4N_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,73,108,108,101,103,97,108,79,112,101,114,97,116,105,111,110]
 },
 GHC.IO.Exception.IllegalOperation_con_entry() //  [R1]
         { []
         }
     {offset
       c8ojK: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.IllegalOperation_con_info" {
     GHC.IO.Exception.IllegalOperation_con_info:
         const GHC.IO.Exception.IllegalOperation_con_entry;
         const 4294967296;
         const 21474836483;
         const i8m4N_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.835578748 UTC

[section ""cstring" . i8m4P_str" {
     i8m4P_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,80,101,114,109,105,115,115,105,111,110,68,101,110,105,101,100]
 },
 GHC.IO.Exception.PermissionDenied_con_entry() //  [R1]
         { []
         }
     {offset
       c8ojQ: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.PermissionDenied_con_info" {
     GHC.IO.Exception.PermissionDenied_con_info:
         const GHC.IO.Exception.PermissionDenied_con_entry;
         const 4294967296;
         const 25769803779;
         const i8m4P_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.838736128 UTC

[section ""cstring" . i8m4R_str" {
     i8m4R_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,85,115,101,114,69,114,114,111,114]
 },
 GHC.IO.Exception.UserError_con_entry() //  [R1]
         { []
         }
     {offset
       c8ojW: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.UserError_con_info" {
     GHC.IO.Exception.UserError_con_info:
         const GHC.IO.Exception.UserError_con_entry;
         const 4294967296;
         const 30064771075;
         const i8m4R_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.841813531 UTC

[section ""cstring" . i8m4T_str" {
     i8m4T_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,85,110,115,97,116,105,115,102,105,101,100,67,111,110,115,116,114,97,105,110,116,115]
 },
 GHC.IO.Exception.UnsatisfiedConstraints_con_entry() //  [R1]
         { []
         }
     {offset
       c8ok2: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.UnsatisfiedConstraints_con_info" {
     GHC.IO.Exception.UnsatisfiedConstraints_con_info:
         const GHC.IO.Exception.UnsatisfiedConstraints_con_entry;
         const 4294967296;
         const 34359738371;
         const i8m4T_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.844917427 UTC

[section ""cstring" . i8m4V_str" {
     i8m4V_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,83,121,115,116,101,109,69,114,114,111,114]
 },
 GHC.IO.Exception.SystemError_con_entry() //  [R1]
         { []
         }
     {offset
       c8ok8: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.SystemError_con_info" {
     GHC.IO.Exception.SystemError_con_info:
         const GHC.IO.Exception.SystemError_con_entry;
         const 4294967296;
         const 38654705667;
         const i8m4V_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.848089034 UTC

[section ""cstring" . i8m4X_str" {
     i8m4X_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,80,114,111,116,111,99,111,108,69,114,114,111,114]
 },
 GHC.IO.Exception.ProtocolError_con_entry() //  [R1]
         { []
         }
     {offset
       c8oke: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.ProtocolError_con_info" {
     GHC.IO.Exception.ProtocolError_con_info:
         const GHC.IO.Exception.ProtocolError_con_entry;
         const 4294967296;
         const 42949672963;
         const i8m4X_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.851535741 UTC

[section ""cstring" . i8m4Z_str" {
     i8m4Z_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,79,116,104,101,114,69,114,114,111,114]
 },
 GHC.IO.Exception.OtherError_con_entry() //  [R1]
         { []
         }
     {offset
       c8okk: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.OtherError_con_info" {
     GHC.IO.Exception.OtherError_con_info:
         const GHC.IO.Exception.OtherError_con_entry;
         const 4294967296;
         const 47244640259;
         const i8m4Z_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.855172674 UTC

[section ""cstring" . i8m51_str" {
     i8m51_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,73,110,118,97,108,105,100,65,114,103,117,109,101,110,116]
 },
 GHC.IO.Exception.InvalidArgument_con_entry() //  [R1]
         { []
         }
     {offset
       c8okq: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.InvalidArgument_con_info" {
     GHC.IO.Exception.InvalidArgument_con_info:
         const GHC.IO.Exception.InvalidArgument_con_entry;
         const 4294967296;
         const 51539607555;
         const i8m51_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.858374681 UTC

[section ""cstring" . i8m53_str" {
     i8m53_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,73,110,97,112,112,114,111,112,114,105,97,116,101,84,121,112,101]
 },
 GHC.IO.Exception.InappropriateType_con_entry() //  [R1]
         { []
         }
     {offset
       c8okw: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.InappropriateType_con_info" {
     GHC.IO.Exception.InappropriateType_con_info:
         const GHC.IO.Exception.InappropriateType_con_entry;
         const 4294967296;
         const 55834574851;
         const i8m53_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.861565771 UTC

[section ""cstring" . i8m55_str" {
     i8m55_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,72,97,114,100,119,97,114,101,70,97,117,108,116]
 },
 GHC.IO.Exception.HardwareFault_con_entry() //  [R1]
         { []
         }
     {offset
       c8okC: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.HardwareFault_con_info" {
     GHC.IO.Exception.HardwareFault_con_info:
         const GHC.IO.Exception.HardwareFault_con_entry;
         const 4294967296;
         const 60129542147;
         const i8m55_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.864660101 UTC

[section ""cstring" . i8m57_str" {
     i8m57_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,85,110,115,117,112,112,111,114,116,101,100,79,112,101,114,97,116,105,111,110]
 },
 GHC.IO.Exception.UnsupportedOperation_con_entry() //  [R1]
         { []
         }
     {offset
       c8okI: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.UnsupportedOperation_con_info" {
     GHC.IO.Exception.UnsupportedOperation_con_info:
         const GHC.IO.Exception.UnsupportedOperation_con_entry;
         const 4294967296;
         const 64424509443;
         const i8m57_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.867788537 UTC

[section ""cstring" . i8m59_str" {
     i8m59_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,84,105,109,101,69,120,112,105,114,101,100]
 },
 GHC.IO.Exception.TimeExpired_con_entry() //  [R1]
         { []
         }
     {offset
       c8okO: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.TimeExpired_con_info" {
     GHC.IO.Exception.TimeExpired_con_info:
         const GHC.IO.Exception.TimeExpired_con_entry;
         const 4294967296;
         const 68719476739;
         const i8m59_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.871553515 UTC

[section ""cstring" . i8m5b_str" {
     i8m5b_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,82,101,115,111,117,114,99,101,86,97,110,105,115,104,101,100]
 },
 GHC.IO.Exception.ResourceVanished_con_entry() //  [R1]
         { []
         }
     {offset
       c8okU: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.ResourceVanished_con_info" {
     GHC.IO.Exception.ResourceVanished_con_info:
         const GHC.IO.Exception.ResourceVanished_con_entry;
         const 4294967296;
         const 73014444035;
         const i8m5b_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.874701269 UTC

[section ""cstring" . i8m5d_str" {
     i8m5d_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,73,110,116,101,114,114,117,112,116,101,100]
 },
 GHC.IO.Exception.Interrupted_con_entry() //  [R1]
         { []
         }
     {offset
       c8ol0: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.Interrupted_con_info" {
     GHC.IO.Exception.Interrupted_con_info:
         const GHC.IO.Exception.Interrupted_con_entry;
         const 4294967296;
         const 77309411331;
         const i8m5d_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.877845232 UTC

[section ""cstring" . i8m5f_str" {
     i8m5f_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,69,120,105,116,83,117,99,99,101,115,115]
 },
 GHC.IO.Exception.ExitSuccess_con_entry() //  [R1]
         { []
         }
     {offset
       c8ol6: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.ExitSuccess_con_info" {
     GHC.IO.Exception.ExitSuccess_con_info:
         const GHC.IO.Exception.ExitSuccess_con_entry;
         const 4294967296;
         const 3;
         const i8m5f_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.880947671 UTC

[section ""cstring" . i8m5h_str" {
     i8m5h_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,69,120,105,116,70,97,105,108,117,114,101]
 },
 GHC.IO.Exception.ExitFailure_con_entry() //  [R1]
         { []
         }
     {offset
       c8olc: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.ExitFailure_con_info" {
     GHC.IO.Exception.ExitFailure_con_info:
         const GHC.IO.Exception.ExitFailure_con_entry;
         const 1;
         const 4294967298;
         const i8m5h_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.885145035 UTC

[section ""relreadonly" . GHC.IO.Exception.FixIOException_closure_tbl" {
     GHC.IO.Exception.FixIOException_closure_tbl:
         const GHC.IO.Exception.FixIOException_closure+1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.887010851 UTC

[section ""cstring" . i8m5j_str" {
     i8m5j_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,70,105,120,73,79,69,120,99,101,112,116,105,111,110]
 },
 GHC.IO.Exception.FixIOException_con_entry() //  [R1]
         { []
         }
     {offset
       c8olj: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.FixIOException_con_info" {
     GHC.IO.Exception.FixIOException_con_info:
         const GHC.IO.Exception.FixIOException_con_entry;
         const 4294967296;
         const 3;
         const i8m5j_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.890150549 UTC

[section ""cstring" . i8m5l_str" {
     i8m5l_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,73,110,100,101,120,79,117,116,79,102,66,111,117,110,100,115]
 },
 GHC.IO.Exception.IndexOutOfBounds_con_entry() //  [R1]
         { []
         }
     {offset
       c8olp: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.IndexOutOfBounds_con_info" {
     GHC.IO.Exception.IndexOutOfBounds_con_info:
         const GHC.IO.Exception.IndexOutOfBounds_con_entry;
         const 1;
         const 2;
         const i8m5l_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.893817076 UTC

[section ""cstring" . i8m5n_str" {
     i8m5n_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,85,110,100,101,102,105,110,101,100,69,108,101,109,101,110,116]
 },
 GHC.IO.Exception.UndefinedElement_con_entry() //  [R1]
         { []
         }
     {offset
       c8olv: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.UndefinedElement_con_info" {
     GHC.IO.Exception.UndefinedElement_con_info:
         const GHC.IO.Exception.UndefinedElement_con_entry;
         const 1;
         const 4294967298;
         const i8m5n_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.89684314 UTC

[section ""relreadonly" . GHC.IO.Exception.AsyncException_closure_tbl" {
     GHC.IO.Exception.AsyncException_closure_tbl:
         const GHC.IO.Exception.StackOverflow_closure+1;
         const GHC.IO.Exception.HeapOverflow_closure+2;
         const GHC.IO.Exception.ThreadKilled_closure+3;
         const GHC.IO.Exception.UserInterrupt_closure+4;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.898729841 UTC

[section ""cstring" . i8m5p_str" {
     i8m5p_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,83,116,97,99,107,79,118,101,114,102,108,111,119]
 },
 GHC.IO.Exception.StackOverflow_con_entry() //  [R1]
         { []
         }
     {offset
       c8olC: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.StackOverflow_con_info" {
     GHC.IO.Exception.StackOverflow_con_info:
         const GHC.IO.Exception.StackOverflow_con_entry;
         const 4294967296;
         const 3;
         const i8m5p_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.901858812 UTC

[section ""cstring" . i8m5r_str" {
     i8m5r_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,72,101,97,112,79,118,101,114,102,108,111,119]
 },
 GHC.IO.Exception.HeapOverflow_con_entry() //  [R1]
         { []
         }
     {offset
       c8olI: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.HeapOverflow_con_info" {
     GHC.IO.Exception.HeapOverflow_con_info:
         const GHC.IO.Exception.HeapOverflow_con_entry;
         const 4294967296;
         const 4294967299;
         const i8m5r_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.904977964 UTC

[section ""cstring" . i8m5t_str" {
     i8m5t_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,84,104,114,101,97,100,75,105,108,108,101,100]
 },
 GHC.IO.Exception.ThreadKilled_con_entry() //  [R1]
         { []
         }
     {offset
       c8olO: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.ThreadKilled_con_info" {
     GHC.IO.Exception.ThreadKilled_con_info:
         const GHC.IO.Exception.ThreadKilled_con_entry;
         const 4294967296;
         const 8589934595;
         const i8m5t_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.908459436 UTC

[section ""cstring" . i8m5v_str" {
     i8m5v_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,85,115,101,114,73,110,116,101,114,114,117,112,116]
 },
 GHC.IO.Exception.UserInterrupt_con_entry() //  [R1]
         { []
         }
     {offset
       c8olU: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.UserInterrupt_con_info" {
     GHC.IO.Exception.UserInterrupt_con_info:
         const GHC.IO.Exception.UserInterrupt_con_entry;
         const 4294967296;
         const 12884901891;
         const i8m5v_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.912174145 UTC

[section ""cstring" . i8m5x_str" {
     i8m5x_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,83,111,109,101,65,115,121,110,99,69,120,99,101,112,116,105,111,110]
 },
 GHC.IO.Exception.SomeAsyncException_con_entry() //  [R1]
         { []
         }
     {offset
       c8om0: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.SomeAsyncException_con_info" {
     GHC.IO.Exception.SomeAsyncException_con_info:
         const GHC.IO.Exception.SomeAsyncException_con_entry;
         const 2;
         const 4;
         const i8m5x_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.915242133 UTC

[section ""relreadonly" . GHC.IO.Exception.AllocationLimitExceeded_closure_tbl" {
     GHC.IO.Exception.AllocationLimitExceeded_closure_tbl:
         const GHC.IO.Exception.AllocationLimitExceeded_closure+1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.917060347 UTC

[section ""cstring" . i8m5z_str" {
     i8m5z_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,65,108,108,111,99,97,116,105,111,110,76,105,109,105,116,69,120,99,101,101,100,101,100]
 },
 GHC.IO.Exception.AllocationLimitExceeded_con_entry() //  [R1]
         { []
         }
     {offset
       c8om7: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.AllocationLimitExceeded_con_info" {
     GHC.IO.Exception.AllocationLimitExceeded_con_info:
         const GHC.IO.Exception.AllocationLimitExceeded_con_entry;
         const 4294967296;
         const 3;
         const i8m5z_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.920410238 UTC

[section ""relreadonly" . GHC.IO.Exception.Deadlock_closure_tbl" {
     GHC.IO.Exception.Deadlock_closure_tbl:
         const GHC.IO.Exception.Deadlock_closure+1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.922793486 UTC

[section ""cstring" . i8m5B_str" {
     i8m5B_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,68,101,97,100,108,111,99,107]
 },
 GHC.IO.Exception.Deadlock_con_entry() //  [R1]
         { []
         }
     {offset
       c8ome: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.Deadlock_con_info" {
     GHC.IO.Exception.Deadlock_con_info:
         const GHC.IO.Exception.Deadlock_con_entry;
         const 4294967296;
         const 3;
         const i8m5B_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.925769654 UTC

[section ""relreadonly" . GHC.IO.Exception.BlockedIndefinitelyOnSTM_closure_tbl" {
     GHC.IO.Exception.BlockedIndefinitelyOnSTM_closure_tbl:
         const GHC.IO.Exception.BlockedIndefinitelyOnSTM_closure+1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.927597148 UTC

[section ""cstring" . i8m5D_str" {
     i8m5D_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,66,108,111,99,107,101,100,73,110,100,101,102,105,110,105,116,101,108,121,79,110,83,84,77]
 },
 GHC.IO.Exception.BlockedIndefinitelyOnSTM_con_entry() //  [R1]
         { []
         }
     {offset
       c8oml: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.BlockedIndefinitelyOnSTM_con_info" {
     GHC.IO.Exception.BlockedIndefinitelyOnSTM_con_info:
         const GHC.IO.Exception.BlockedIndefinitelyOnSTM_con_entry;
         const 4294967296;
         const 3;
         const i8m5D_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.930574191 UTC

[section ""relreadonly" . GHC.IO.Exception.BlockedIndefinitelyOnMVar_closure_tbl" {
     GHC.IO.Exception.BlockedIndefinitelyOnMVar_closure_tbl:
         const GHC.IO.Exception.BlockedIndefinitelyOnMVar_closure+1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.932354943 UTC

[section ""cstring" . i8m5F_str" {
     i8m5F_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,66,108,111,99,107,101,100,73,110,100,101,102,105,110,105,116,101,108,121,79,110,77,86,97,114]
 },
 GHC.IO.Exception.BlockedIndefinitelyOnMVar_con_entry() //  [R1]
         { []
         }
     {offset
       c8oms: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.BlockedIndefinitelyOnMVar_con_info" {
     GHC.IO.Exception.BlockedIndefinitelyOnMVar_con_info:
         const GHC.IO.Exception.BlockedIndefinitelyOnMVar_con_entry;
         const 4294967296;
         const 3;
         const i8m5F_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:27.93649753 UTC

[section ""relreadonly" . S8ji8_srt" {
     S8ji8_srt:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar1_closure;
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_$cshowsPrec_closure;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cshow_closure;
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar1_closure;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM1_closure;
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_$cshowsPrec_closure;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cshow_closure;
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM1_closure;
         const GHC.IO.Exception.$fExceptionDeadlock1_closure;
         const GHC.IO.Exception.$fShowDeadlock_$cshowsPrec_closure;
         const GHC.IO.Exception.$fExceptionDeadlock_$cshow_closure;
         const GHC.IO.Exception.$fShowDeadlock1_closure;
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded1_closure;
         const GHC.IO.Exception.$fShowAllocationLimitExceeded_$cshowsPrec_closure;
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cshow_closure;
         const GHC.IO.Exception.$fShowAllocationLimitExceeded1_closure;
         const GHC.IO.Exception.$fExceptionAsyncException1_closure;
         const GHC.IO.Exception.$fExceptionAsyncException3_closure;
         const GHC.IO.Exception.$fExceptionAsyncException5_closure;
         const GHC.IO.Exception.$fExceptionAsyncException7_closure;
         const GHC.IO.Exception.$w$cshowsPrec1_closure;
         const GHC.IO.Exception.$fExceptionAsyncException_$cshow_closure;
         const GHC.IO.Exception.$fExceptionFixIOException1_closure;
         const GHC.IO.Exception.$fShowFixIOException_$cshowsPrec_closure;
         const GHC.IO.Exception.$fExceptionFixIOException_$cshow_closure;
         const GHC.IO.Exception.$fShowFixIOException1_closure;
         const GHC.IO.Exception.$w$cshowsPrec4_closure;
         const lvl1_r8j2E_closure;
         const lvl3_r8j2G_closure;
         const lvl5_r8j2I_closure;
         const lvl7_r8j2K_closure;
         const lvl9_r8j2M_closure;
         const lvl11_r8j2O_closure;
         const lvl13_r8j2Q_closure;
         const lvl15_r8j2S_closure;
         const lvl17_r8j2U_closure;
         const lvl19_r8j2W_closure;
         const lvl21_r8j2Y_closure;
         const lvl23_r8j30_closure;
         const lvl25_r8j32_closure;
         const lvl27_r8j34_closure;
         const lvl29_r8j36_closure;
         const lvl31_r8j38_closure;
         const lvl33_r8j3a_closure;
         const lvl35_r8j3c_closure;
         const lvl37_r8j3e_closure;
         const GHC.IO.Exception.$fExceptionIOException1_closure;
         const GHC.IO.Exception.$w$cshowsPrec3_closure;
         const GHC.IO.Exception.$fExceptionIOException_$cshowsPrec_closure;
         const GHC.IO.Exception.$fExceptionIOException_$cshow_closure;
         const GHC.IO.Exception.$fShowIOException1_closure;
         const GHC.IO.Exception.$fExceptionExitCode2_closure;
         const GHC.IO.Exception.$fShowExitCode_$cshowsPrec_closure;
         const GHC.IO.Exception.$fExceptionExitCode_$cshow_closure;
         const GHC.IO.Exception.$fShowExitCode1_closure;
         const GHC.Read.$fReadInt2_closure;
         const GHC.Read.$fReadInt_$sreadNumber_closure;
         const Text.Read.Lex.$wexpect_closure;
         const GHC.IO.Exception.$fReadExitCode_lexeme_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
         const GHC.IO.Exception.$fReadExitCode2_closure;
         const GHC.IO.Exception.$fReadExitCode_lexeme1_closure;
         const GHC.Read.list3_closure;
         const GHC.IO.Exception.$fReadExitCode_$creadsPrec_closure;
         const GHC.Read.list_closure;
         const GHC.IO.Exception.$fReadExitCode1_closure;
         const GHC.IO.Exception.$fReadExitCode_$creadListPrec_closure;
         const GHC.IO.Exception.$fReadExitCode6_closure;
         const GHC.IO.Exception.untangle2_closure;
         const GHC.IO.Exception.untangle_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const GHC.IO.Exception.$fExceptionDeadlock_$cfromException_closure;
         const GHC.IO.Exception.$fExceptionDeadlock3_closure;
         const GHC.IO.Exception.$fExceptionDeadlock_closure;
         const GHC.IO.Exception.$fExceptionDeadlock_$ctoException_closure;
         const GHC.IO.Exception.$fExceptionAssertionFailed_$cfromException_closure;
         const GHC.IO.Exception.$fExceptionAssertionFailed2_closure;
         const GHC.IO.Exception.$fExceptionAssertionFailed_closure;
         const GHC.IO.Exception.$fExceptionAssertionFailed_$ctoException_closure;
         const GHC.Exception.errorCallWithCallStackException9_closure;
         const GHC.Exception.errorCallWithCallStackException11_closure;
         const GHC.Exception.errorCallWithCallStackException6_closure;
         const GHC.IO.Exception.assertError1_closure;
         const GHC.IO.Exception.assertError_closure;
         const GHC.Stack.CCS.currentCallStack_closure;
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded6_closure;
         const GHC.IO.Exception.$fExceptionSomeAsyncException_$cfromException_closure;
         const GHC.IO.Exception.$fExceptionSomeAsyncException_closure;
         const GHC.IO.Exception.$fExceptionSomeAsyncException_$ctoException_closure;
         const GHC.IO.Exception.asyncExceptionFromException_closure;
         const GHC.IO.Exception.asyncExceptionToException_closure;
         const GHC.IO.Exception.$fExceptionArrayException_$cfromException_closure;
         const GHC.IO.Exception.$fExceptionArrayException5_closure;
         const GHC.IO.Exception.$fExceptionArrayException_closure;
         const GHC.IO.Exception.$fExceptionArrayException_$ctoException_closure;
         const GHC.IO.Exception.$fExceptionFixIOException_$cfromException_closure;
         const GHC.IO.Exception.$fExceptionFixIOException3_closure;
         const GHC.IO.Exception.$fExceptionFixIOException_closure;
         const GHC.IO.Exception.$fExceptionFixIOException_$ctoException_closure;
         const GHC.IO.Exception.$fExceptionExitCode_$cfromException_closure;
         const GHC.IO.Exception.$fExceptionExitCode4_closure;
         const GHC.IO.Exception.$fExceptionExitCode_closure;
         const GHC.IO.Exception.$fExceptionExitCode_$ctoException_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const GHC.IO.Exception.$fExceptionIOException_$cfromException_closure;
         const GHC.IO.Exception.$fExceptionIOException4_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const GHC.IO.Exception.$fExceptionIOException_closure;
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
         const GHC.IO.Exception.ioError1_closure;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cfromException_closure;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar3_closure;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_closure;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$ctoException_closure;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cfromException_closure;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM3_closure;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_closure;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$ctoException_closure;
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cfromException_closure;
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded3_closure;
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded_closure;
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$ctoException_closure;
         const GHC.IO.Exception.$fExceptionSomeAsyncException_$ctoException_closure;
         const GHC.IO.Exception.$fExceptionCompactionFailed_$cfromException_closure;
         const GHC.IO.Exception.$fExceptionCompactionFailed2_closure;
         const GHC.IO.Exception.$fExceptionCompactionFailed_closure;
         const GHC.IO.Exception.$fExceptionCompactionFailed_$ctoException_closure;
         const GHC.IO.Exception.cannotCompactMutable1_closure;
         const GHC.IO.Exception.cannotCompactPinned1_closure;
         const GHC.IO.Exception.cannotCompactFunction1_closure;
         const GHC.IO.Exception.$fExceptionAsyncException_$cfromException_closure;
         const GHC.IO.Exception.$fExceptionAsyncException9_closure;
         const GHC.IO.Exception.$fExceptionAsyncException_closure;
         const GHC.IO.Exception.$fExceptionAsyncException_$ctoException_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.552595868 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:03:32.553698748 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar2_bytes" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar2_bytes:
         I8[] [116,104,114,101,97,100,32,98,108,111,99,107,101,100,32,105,110,100,101,102,105,110,105,116,101,108,121,32,105,110,32,97,110,32,77,86,97,114,32,111,112,101,114,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.556059043 UTC

[section ""data" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar1_closure" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar1_closure:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar1_entry() //  [R1]
         { []
         }
     {offset
       c8oAK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oAL; else goto c8oAM;
       c8oAL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8oAM: // global
           (_c8oAH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8oAH::I64 == 0) goto c8oAJ; else goto c8oAI;
       c8oAJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8oAI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8oAH::I64;
           R2 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar1_info" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar1_info:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.560485076 UTC

[section ""data" . GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_$cshowsPrec_closure" {
     GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_$cshowsPrec_closure:
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_$cshowsPrec_entry() //  [R2,
                                                                           R3, R4]
         { []
         }
     {offset
       c8oB2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oB3; else goto c8oB4;
       c8oB3: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8oB4: // global
           I64[Sp - 16] = block_c8oAZ_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8oB8; else goto c8oB0;
       u8oB8: // global
           call _c8oAZ() args: 0, res: 0, upd: 0;
       c8oB0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_$cshowsPrec_info" {
     GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_$cshowsPrec_info:
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S8oB9_srt;
 },
 _c8oAZ() //  []
         { []
         }
     {offset
       c8oAZ: // global
           R3 = P64[Sp + 8];
           R2 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8oAZ_info" {
     block_c8oAZ_info:
         const _c8oAZ;
         const 1;
         const 4294967326;
         const S8oB9_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.565937633 UTC

[section ""data" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cshow_closure" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cshow_closure:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cshow_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c8oBr: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8oBs; else goto c8oBt;
       c8oBs: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8oBt: // global
           I64[Sp - 8] = block_c8oBo_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8oBx; else goto c8oBp;
       u8oBx: // global
           call _c8oBo() args: 0, res: 0, upd: 0;
       c8oBp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cshow_info" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cshow_info:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S8oB9_srt;
 },
 _c8oBo() //  []
         { []
         }
     {offset
       c8oBo: // global
           R1 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8oBo_info" {
     block_c8oBo_info:
         const _c8oBo;
         const 0;
         const 4294967326;
         const S8oB9_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.571582414 UTC

[section ""data" . GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar1_closure" {
     GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar1_closure:
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar1_info;
         const 0;
 },
 GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar1_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       c8oBQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oBR; else goto c8oBS;
       c8oBR: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8oBS: // global
           I64[Sp - 16] = block_c8oBN_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8oBW; else goto c8oBO;
       u8oBW: // global
           call _c8oBN() args: 0, res: 0, upd: 0;
       c8oBO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar1_info" {
     GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar1_info:
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S8oB9_srt;
 },
 _c8oBN() //  []
         { []
         }
     {offset
       c8oBN: // global
           R3 = P64[Sp + 8];
           R2 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8oBN_info" {
     block_c8oBN_info:
         const _c8oBN;
         const 1;
         const 4294967326;
         const S8oB9_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.576756805 UTC

[section ""data" . GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_$cshowList_closure" {
     GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_$cshowList_closure:
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_$cshowList_info;
         const 0;
 },
 GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_$cshowList_entry() //  [R2,
                                                                          R3]
         { []
         }
     {offset
       c8oCb: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_$cshowList_info" {
     GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_$cshowList_info:
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S8oB9_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.580361936 UTC

[section ""data" . GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_closure" {
     GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_$cshowsPrec_closure+3;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cshow_closure+1;
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.582251473 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM2_bytes" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM2_bytes:
         I8[] [116,104,114,101,97,100,32,98,108,111,99,107,101,100,32,105,110,100,101,102,105,110,105,116,101,108,121,32,105,110,32,97,110,32,83,84,77,32,116,114,97,110,115,97,99,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.586013856 UTC

[section ""data" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM1_closure" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM1_closure:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM1_entry() //  [R1]
         { []
         }
     {offset
       c8oCq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oCr; else goto c8oCs;
       c8oCr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8oCs: // global
           (_c8oCn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8oCn::I64 == 0) goto c8oCp; else goto c8oCo;
       c8oCp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8oCo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8oCn::I64;
           R2 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM1_info" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM1_info:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.590605663 UTC

[section ""data" . GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_$cshowsPrec_closure" {
     GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_$cshowsPrec_closure:
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_$cshowsPrec_entry() //  [R2,
                                                                          R3, R4]
         { []
         }
     {offset
       c8oCI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oCJ; else goto c8oCK;
       c8oCJ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8oCK: // global
           I64[Sp - 16] = block_c8oCF_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8oCO; else goto c8oCG;
       u8oCO: // global
           call _c8oCF() args: 0, res: 0, upd: 0;
       c8oCG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_$cshowsPrec_info" {
     GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_$cshowsPrec_info:
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S8oB9_srt+32;
 },
 _c8oCF() //  []
         { []
         }
     {offset
       c8oCF: // global
           R3 = P64[Sp + 8];
           R2 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8oCF_info" {
     block_c8oCF_info:
         const _c8oCF;
         const 1;
         const 4294967326;
         const S8oB9_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.596034246 UTC

[section ""data" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cshow_closure" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cshow_closure:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cshow_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c8oD6: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8oD7; else goto c8oD8;
       c8oD7: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8oD8: // global
           I64[Sp - 8] = block_c8oD3_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8oDc; else goto c8oD4;
       u8oDc: // global
           call _c8oD3() args: 0, res: 0, upd: 0;
       c8oD4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cshow_info" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cshow_info:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S8oB9_srt+32;
 },
 _c8oD3() //  []
         { []
         }
     {offset
       c8oD3: // global
           R1 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8oD3_info" {
     block_c8oD3_info:
         const _c8oD3;
         const 0;
         const 4294967326;
         const S8oB9_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.601440972 UTC

[section ""data" . GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM1_closure" {
     GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM1_closure:
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM1_info;
         const 0;
 },
 GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM1_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       c8oDv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oDw; else goto c8oDx;
       c8oDw: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8oDx: // global
           I64[Sp - 16] = block_c8oDs_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8oDB; else goto c8oDt;
       u8oDB: // global
           call _c8oDs() args: 0, res: 0, upd: 0;
       c8oDt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM1_info" {
     GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM1_info:
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S8oB9_srt+32;
 },
 _c8oDs() //  []
         { []
         }
     {offset
       c8oDs: // global
           R3 = P64[Sp + 8];
           R2 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8oDs_info" {
     block_c8oDs_info:
         const _c8oDs;
         const 1;
         const 4294967326;
         const S8oB9_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.606904318 UTC

[section ""data" . GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_$cshowList_closure" {
     GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_$cshowList_closure:
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_$cshowList_info;
         const 0;
 },
 GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_$cshowList_entry() //  [R2,
                                                                         R3]
         { []
         }
     {offset
       c8oDQ: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_$cshowList_info" {
     GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_$cshowList_info:
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S8oB9_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.610267653 UTC

[section ""data" . GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_closure" {
     GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_$cshowsPrec_closure+3;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cshow_closure+1;
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.612845261 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionDeadlock2_bytes" {
     GHC.IO.Exception.$fExceptionDeadlock2_bytes:
         I8[] [60,60,100,101,97,100,108,111,99,107,62,62]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.61602627 UTC

[section ""data" . GHC.IO.Exception.$fExceptionDeadlock1_closure" {
     GHC.IO.Exception.$fExceptionDeadlock1_closure:
         const GHC.IO.Exception.$fExceptionDeadlock1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionDeadlock1_entry() //  [R1]
         { []
         }
     {offset
       c8oE5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oE6; else goto c8oE7;
       c8oE6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8oE7: // global
           (_c8oE2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8oE2::I64 == 0) goto c8oE4; else goto c8oE3;
       c8oE4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8oE3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8oE2::I64;
           R2 = GHC.IO.Exception.$fExceptionDeadlock2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionDeadlock1_info" {
     GHC.IO.Exception.$fExceptionDeadlock1_info:
         const GHC.IO.Exception.$fExceptionDeadlock1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.623623341 UTC

[section ""data" . GHC.IO.Exception.$fShowDeadlock_$cshowsPrec_closure" {
     GHC.IO.Exception.$fShowDeadlock_$cshowsPrec_closure:
         const GHC.IO.Exception.$fShowDeadlock_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Exception.$fShowDeadlock_$cshowsPrec_entry() //  [R2, R3,
                                                          R4]
         { []
         }
     {offset
       c8oEn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oEo; else goto c8oEp;
       c8oEo: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fShowDeadlock_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8oEp: // global
           I64[Sp - 16] = block_c8oEk_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8oEt; else goto c8oEl;
       u8oEt: // global
           call _c8oEk() args: 0, res: 0, upd: 0;
       c8oEl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowDeadlock_$cshowsPrec_info" {
     GHC.IO.Exception.$fShowDeadlock_$cshowsPrec_info:
         const GHC.IO.Exception.$fShowDeadlock_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S8oB9_srt+64;
 },
 _c8oEk() //  []
         { []
         }
     {offset
       c8oEk: // global
           R3 = P64[Sp + 8];
           R2 = GHC.IO.Exception.$fExceptionDeadlock1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8oEk_info" {
     block_c8oEk_info:
         const _c8oEk;
         const 1;
         const 4294967326;
         const S8oB9_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.630929188 UTC

[section ""data" . GHC.IO.Exception.$fExceptionDeadlock_$cshow_closure" {
     GHC.IO.Exception.$fExceptionDeadlock_$cshow_closure:
         const GHC.IO.Exception.$fExceptionDeadlock_$cshow_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionDeadlock_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c8oEL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8oEM; else goto c8oEN;
       c8oEM: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionDeadlock_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8oEN: // global
           I64[Sp - 8] = block_c8oEI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8oER; else goto c8oEJ;
       u8oER: // global
           call _c8oEI() args: 0, res: 0, upd: 0;
       c8oEJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionDeadlock_$cshow_info" {
     GHC.IO.Exception.$fExceptionDeadlock_$cshow_info:
         const GHC.IO.Exception.$fExceptionDeadlock_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S8oB9_srt+64;
 },
 _c8oEI() //  []
         { []
         }
     {offset
       c8oEI: // global
           R1 = GHC.IO.Exception.$fExceptionDeadlock1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8oEI_info" {
     block_c8oEI_info:
         const _c8oEI;
         const 0;
         const 4294967326;
         const S8oB9_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.638830993 UTC

[section ""data" . GHC.IO.Exception.$fShowDeadlock1_closure" {
     GHC.IO.Exception.$fShowDeadlock1_closure:
         const GHC.IO.Exception.$fShowDeadlock1_info;
         const 0;
 },
 GHC.IO.Exception.$fShowDeadlock1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8oFa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oFb; else goto c8oFc;
       c8oFb: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fShowDeadlock1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8oFc: // global
           I64[Sp - 16] = block_c8oF7_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8oFg; else goto c8oF8;
       u8oFg: // global
           call _c8oF7() args: 0, res: 0, upd: 0;
       c8oF8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowDeadlock1_info" {
     GHC.IO.Exception.$fShowDeadlock1_info:
         const GHC.IO.Exception.$fShowDeadlock1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S8oB9_srt+64;
 },
 _c8oF7() //  []
         { []
         }
     {offset
       c8oF7: // global
           R3 = P64[Sp + 8];
           R2 = GHC.IO.Exception.$fExceptionDeadlock1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8oF7_info" {
     block_c8oF7_info:
         const _c8oF7;
         const 1;
         const 4294967326;
         const S8oB9_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.645858282 UTC

[section ""data" . GHC.IO.Exception.$fShowDeadlock_$cshowList_closure" {
     GHC.IO.Exception.$fShowDeadlock_$cshowList_closure:
         const GHC.IO.Exception.$fShowDeadlock_$cshowList_info;
         const 0;
 },
 GHC.IO.Exception.$fShowDeadlock_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c8oFv: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Exception.$fShowDeadlock1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowDeadlock_$cshowList_info" {
     GHC.IO.Exception.$fShowDeadlock_$cshowList_info:
         const GHC.IO.Exception.$fShowDeadlock_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S8oB9_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.650216246 UTC

[section ""data" . GHC.IO.Exception.$fShowDeadlock_closure" {
     GHC.IO.Exception.$fShowDeadlock_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Exception.$fShowDeadlock_$cshowsPrec_closure+3;
         const GHC.IO.Exception.$fExceptionDeadlock_$cshow_closure+1;
         const GHC.IO.Exception.$fShowDeadlock_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.652536646 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionAllocationLimitExceeded2_bytes" {
     GHC.IO.Exception.$fExceptionAllocationLimitExceeded2_bytes:
         I8[] [97,108,108,111,99,97,116,105,111,110,32,108,105,109,105,116,32,101,120,99,101,101,100,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.65619948 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAllocationLimitExceeded1_closure" {
     GHC.IO.Exception.$fExceptionAllocationLimitExceeded1_closure:
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionAllocationLimitExceeded1_entry() //  [R1]
         { []
         }
     {offset
       c8oFK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oFL; else goto c8oFM;
       c8oFL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8oFM: // global
           (_c8oFH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8oFH::I64 == 0) goto c8oFJ; else goto c8oFI;
       c8oFJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8oFI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8oFH::I64;
           R2 = GHC.IO.Exception.$fExceptionAllocationLimitExceeded2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionAllocationLimitExceeded1_info" {
     GHC.IO.Exception.$fExceptionAllocationLimitExceeded1_info:
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.661791619 UTC

[section ""data" . GHC.IO.Exception.$fShowAllocationLimitExceeded_$cshowsPrec_closure" {
     GHC.IO.Exception.$fShowAllocationLimitExceeded_$cshowsPrec_closure:
         const GHC.IO.Exception.$fShowAllocationLimitExceeded_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Exception.$fShowAllocationLimitExceeded_$cshowsPrec_entry() //  [R2,
                                                                         R3, R4]
         { []
         }
     {offset
       c8oG2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oG3; else goto c8oG4;
       c8oG3: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fShowAllocationLimitExceeded_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8oG4: // global
           I64[Sp - 16] = block_c8oFZ_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8oG8; else goto c8oG0;
       u8oG8: // global
           call _c8oFZ() args: 0, res: 0, upd: 0;
       c8oG0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowAllocationLimitExceeded_$cshowsPrec_info" {
     GHC.IO.Exception.$fShowAllocationLimitExceeded_$cshowsPrec_info:
         const GHC.IO.Exception.$fShowAllocationLimitExceeded_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S8oB9_srt+96;
 },
 _c8oFZ() //  []
         { []
         }
     {offset
       c8oFZ: // global
           R3 = P64[Sp + 8];
           R2 = GHC.IO.Exception.$fExceptionAllocationLimitExceeded1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8oFZ_info" {
     block_c8oFZ_info:
         const _c8oFZ;
         const 1;
         const 4294967326;
         const S8oB9_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.667688095 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cshow_closure" {
     GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cshow_closure:
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cshow_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c8oGq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8oGr; else goto c8oGs;
       c8oGr: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8oGs: // global
           I64[Sp - 8] = block_c8oGn_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8oGw; else goto c8oGo;
       u8oGw: // global
           call _c8oGn() args: 0, res: 0, upd: 0;
       c8oGo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cshow_info" {
     GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cshow_info:
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S8oB9_srt+96;
 },
 _c8oGn() //  []
         { []
         }
     {offset
       c8oGn: // global
           R1 = GHC.IO.Exception.$fExceptionAllocationLimitExceeded1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8oGn_info" {
     block_c8oGn_info:
         const _c8oGn;
         const 0;
         const 4294967326;
         const S8oB9_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.673086546 UTC

[section ""data" . GHC.IO.Exception.$fShowAllocationLimitExceeded1_closure" {
     GHC.IO.Exception.$fShowAllocationLimitExceeded1_closure:
         const GHC.IO.Exception.$fShowAllocationLimitExceeded1_info;
         const 0;
 },
 GHC.IO.Exception.$fShowAllocationLimitExceeded1_entry() //  [R2,
                                                              R3]
         { []
         }
     {offset
       c8oGP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oGQ; else goto c8oGR;
       c8oGQ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fShowAllocationLimitExceeded1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8oGR: // global
           I64[Sp - 16] = block_c8oGM_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8oGV; else goto c8oGN;
       u8oGV: // global
           call _c8oGM() args: 0, res: 0, upd: 0;
       c8oGN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowAllocationLimitExceeded1_info" {
     GHC.IO.Exception.$fShowAllocationLimitExceeded1_info:
         const GHC.IO.Exception.$fShowAllocationLimitExceeded1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S8oB9_srt+96;
 },
 _c8oGM() //  []
         { []
         }
     {offset
       c8oGM: // global
           R3 = P64[Sp + 8];
           R2 = GHC.IO.Exception.$fExceptionAllocationLimitExceeded1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8oGM_info" {
     block_c8oGM_info:
         const _c8oGM;
         const 1;
         const 4294967326;
         const S8oB9_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.678217184 UTC

[section ""data" . GHC.IO.Exception.$fShowAllocationLimitExceeded_$cshowList_closure" {
     GHC.IO.Exception.$fShowAllocationLimitExceeded_$cshowList_closure:
         const GHC.IO.Exception.$fShowAllocationLimitExceeded_$cshowList_info;
         const 0;
 },
 GHC.IO.Exception.$fShowAllocationLimitExceeded_$cshowList_entry() //  [R2,
                                                                        R3]
         { []
         }
     {offset
       c8oHa: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Exception.$fShowAllocationLimitExceeded1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowAllocationLimitExceeded_$cshowList_info" {
     GHC.IO.Exception.$fShowAllocationLimitExceeded_$cshowList_info:
         const GHC.IO.Exception.$fShowAllocationLimitExceeded_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S8oB9_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.6821748 UTC

[section ""data" . GHC.IO.Exception.$fShowAllocationLimitExceeded_closure" {
     GHC.IO.Exception.$fShowAllocationLimitExceeded_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Exception.$fShowAllocationLimitExceeded_$cshowsPrec_closure+3;
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cshow_closure+1;
         const GHC.IO.Exception.$fShowAllocationLimitExceeded_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.683883771 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionCompactionFailed1_bytes" {
     GHC.IO.Exception.$fExceptionCompactionFailed1_bytes:
         I8[] [99,111,109,112,97,99,116,105,111,110,32,102,97,105,108,101,100,58,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.686538882 UTC

[section ""data" . GHC.IO.Exception.$w$cshowsPrec2_closure" {
     GHC.IO.Exception.$w$cshowsPrec2_closure:
         const GHC.IO.Exception.$w$cshowsPrec2_info;
 },
 sat_s8oni_entry() //  [R1]
         { []
         }
     {offset
       c8oHr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oHs; else goto c8oHt;
       c8oHs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8oHt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.IO.Exception.$fExceptionCompactionFailed1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8oni_info" {
     sat_s8oni_info:
         const sat_s8oni_entry;
         const 1;
         const 16;
 },
 GHC.IO.Exception.$w$cshowsPrec2_entry() //  [R2]
         { []
         }
     {offset
       c8oHu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8oHy; else goto c8oHx;
       c8oHy: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Exception.$w$cshowsPrec2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8oHx: // global
           I64[Hp - 16] = sat_s8oni_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = GHC.Base.++_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$w$cshowsPrec2_info" {
     GHC.IO.Exception.$w$cshowsPrec2_info:
         const GHC.IO.Exception.$w$cshowsPrec2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.691738857 UTC

[section ""data" . GHC.IO.Exception.$fShowCompactionFailed_$cshowsPrec_closure" {
     GHC.IO.Exception.$fShowCompactionFailed_$cshowsPrec_closure:
         const GHC.IO.Exception.$fShowCompactionFailed_$cshowsPrec_info;
 },
 GHC.IO.Exception.$fShowCompactionFailed_$cshowsPrec_entry() //  [R3]
         { []
         }
     {offset
       c8oHO: // global
           R2 = R3;
           call GHC.IO.Exception.$w$cshowsPrec2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowCompactionFailed_$cshowsPrec_info" {
     GHC.IO.Exception.$fShowCompactionFailed_$cshowsPrec_info:
         const GHC.IO.Exception.$fShowCompactionFailed_$cshowsPrec_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.695041189 UTC

[section ""data" . GHC.IO.Exception.$fExceptionCompactionFailed_$cshow_closure" {
     GHC.IO.Exception.$fExceptionCompactionFailed_$cshow_closure:
         const GHC.IO.Exception.$fExceptionCompactionFailed_$cshow_info;
 },
 GHC.IO.Exception.$fExceptionCompactionFailed_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c8oHZ: // global
           R3 = R2;
           R2 = GHC.IO.Exception.$fExceptionCompactionFailed1_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionCompactionFailed_$cshow_info" {
     GHC.IO.Exception.$fExceptionCompactionFailed_$cshow_info:
         const GHC.IO.Exception.$fExceptionCompactionFailed_$cshow_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.699020678 UTC

[section ""data" . GHC.IO.Exception.$fShowCompactionFailed_$cshowList_closure" {
     GHC.IO.Exception.$fShowCompactionFailed_$cshowList_closure:
         const GHC.IO.Exception.$fShowCompactionFailed_$cshowList_info;
 },
 GHC.IO.Exception.$fShowCompactionFailed_$cshowList_entry() //  [R2,
                                                                 R3]
         { []
         }
     {offset
       c8oIa: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Exception.$w$cshowsPrec2_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowCompactionFailed_$cshowList_info" {
     GHC.IO.Exception.$fShowCompactionFailed_$cshowList_info:
         const GHC.IO.Exception.$fShowCompactionFailed_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.702207933 UTC

[section ""data" . GHC.IO.Exception.$fShowCompactionFailed_closure" {
     GHC.IO.Exception.$fShowCompactionFailed_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Exception.$fShowCompactionFailed_$cshowsPrec_closure+2;
         const GHC.IO.Exception.$fExceptionCompactionFailed_$cshow_closure+1;
         const GHC.IO.Exception.$fShowCompactionFailed_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.704322522 UTC

[section ""data" . GHC.IO.Exception.$fShowAssertionFailed_$cshowsPrec_closure" {
     GHC.IO.Exception.$fShowAssertionFailed_$cshowsPrec_closure:
         const GHC.IO.Exception.$fShowAssertionFailed_$cshowsPrec_info;
 },
 GHC.IO.Exception.$fShowAssertionFailed_$cshowsPrec_entry() //  [R3,
                                                                 R4]
         { []
         }
     {offset
       c8oIm: // global
           _s8onp::P64 = R3;
           R3 = R4;
           R2 = _s8onp::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowAssertionFailed_$cshowsPrec_info" {
     GHC.IO.Exception.$fShowAssertionFailed_$cshowsPrec_info:
         const GHC.IO.Exception.$fShowAssertionFailed_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.70815398 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAssertionFailed1_closure" {
     GHC.IO.Exception.$fExceptionAssertionFailed1_closure:
         const GHC.IO.Exception.$fExceptionAssertionFailed1_info;
 },
 GHC.IO.Exception.$fExceptionAssertionFailed1_entry() //  [R2]
         { []
         }
     {offset
       c8oIx: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionAssertionFailed1_info" {
     GHC.IO.Exception.$fExceptionAssertionFailed1_info:
         const GHC.IO.Exception.$fExceptionAssertionFailed1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.71146479 UTC

[section ""data" . GHC.IO.Exception.$fShowAssertionFailed_$cshowList_closure" {
     GHC.IO.Exception.$fShowAssertionFailed_$cshowList_closure:
         const GHC.IO.Exception.$fShowAssertionFailed_$cshowList_info;
 },
 GHC.IO.Exception.$fShowAssertionFailed_$cshowList_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       c8oIK: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Base.++_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowAssertionFailed_$cshowList_info" {
     GHC.IO.Exception.$fShowAssertionFailed_$cshowList_info:
         const GHC.IO.Exception.$fShowAssertionFailed_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.715224083 UTC

[section ""data" . GHC.IO.Exception.$fShowAssertionFailed_closure" {
     GHC.IO.Exception.$fShowAssertionFailed_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Exception.$fShowAssertionFailed_$cshowsPrec_closure+3;
         const GHC.IO.Exception.$fExceptionAssertionFailed1_closure+1;
         const GHC.IO.Exception.$fShowAssertionFailed_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.71783113 UTC

[section ""data" . GHC.IO.Exception.$fExceptionSomeAsyncException_$cshow_closure" {
     GHC.IO.Exception.$fExceptionSomeAsyncException_$cshow_closure:
         const GHC.IO.Exception.$fExceptionSomeAsyncException_$cshow_info;
 },
 GHC.IO.Exception.$fExceptionSomeAsyncException_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c8oJ0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oJ4; else goto c8oJ5;
       c8oJ4: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionSomeAsyncException_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8oJ5: // global
           I64[Sp - 8] = block_c8oIX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8oJb; else goto c8oIY;
       u8oJb: // global
           call _c8oIX(R1) args: 0, res: 0, upd: 0;
       c8oIY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionSomeAsyncException_$cshow_info" {
     GHC.IO.Exception.$fExceptionSomeAsyncException_$cshow_info:
         const GHC.IO.Exception.$fExceptionSomeAsyncException_$cshow_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8oIX() //  [R1]
         { []
         }
     {offset
       c8oIX: // global
           I64[Sp - 8] = block_c8oJ3_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p2Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8oIX_info" {
     block_c8oIX_info:
         const _c8oIX;
         const 0;
         const 30;
 },
 _c8oJ3() //  [R1]
         { []
         }
     {offset
       c8oJ3: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Show.show_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8oJ3_info" {
     block_c8oJ3_info:
         const _c8oJ3;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.725282489 UTC

[section ""data" . GHC.IO.Exception.$fShowSomeAsyncException_$cshowsPrec_closure" {
     GHC.IO.Exception.$fShowSomeAsyncException_$cshowsPrec_closure:
         const GHC.IO.Exception.$fShowSomeAsyncException_$cshowsPrec_info;
 },
 GHC.IO.Exception.$fShowSomeAsyncException_$cshowsPrec_entry() //  [R2,
                                                                    R3, R4]
         { []
         }
     {offset
       c8oJz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8oJH; else goto c8oJI;
       c8oJH: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fShowSomeAsyncException_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8oJI: // global
           I64[Sp - 16] = block_c8oJw_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8oJP; else goto c8oJx;
       u8oJP: // global
           call _c8oJw(R1) args: 0, res: 0, upd: 0;
       c8oJx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowSomeAsyncException_$cshowsPrec_info" {
     GHC.IO.Exception.$fShowSomeAsyncException_$cshowsPrec_info:
         const GHC.IO.Exception.$fShowSomeAsyncException_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c8oJw() //  [R1]
         { []
         }
     {offset
       c8oJw: // global
           I64[Sp - 8] = block_c8oJC_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p2Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8oJw_info" {
     block_c8oJw_info:
         const _c8oJw;
         const 1;
         const 30;
 },
 _c8oJC() //  [R1]
         { []
         }
     {offset
       c8oJC: // global
           _s8onD::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8oJG_info;
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = _s8onD::P64;
           Sp = Sp - 8;
           call GHC.Show.show_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8oJC_info" {
     block_c8oJC_info:
         const _c8oJC;
         const 2;
         const 30;
 },
 _c8oJG() //  [R1]
         { []
         }
     {offset
       c8oJG: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8oJG_info" {
     block_c8oJG_info:
         const _c8oJG;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.734716248 UTC

[section ""data" . GHC.IO.Exception.$fShowSomeAsyncException1_closure" {
     GHC.IO.Exception.$fShowSomeAsyncException1_closure:
         const GHC.IO.Exception.$fShowSomeAsyncException1_info;
 },
 GHC.IO.Exception.$fShowSomeAsyncException1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8oKh: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8oKp; else goto c8oKq;
       c8oKp: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fShowSomeAsyncException1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8oKq: // global
           I64[Sp - 16] = block_c8oKe_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8oKx; else goto c8oKf;
       u8oKx: // global
           call _c8oKe(R1) args: 0, res: 0, upd: 0;
       c8oKf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowSomeAsyncException1_info" {
     GHC.IO.Exception.$fShowSomeAsyncException1_info:
         const GHC.IO.Exception.$fShowSomeAsyncException1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8oKe() //  [R1]
         { []
         }
     {offset
       c8oKe: // global
           I64[Sp - 8] = block_c8oKk_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p2Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8oKe_info" {
     block_c8oKe_info:
         const _c8oKe;
         const 1;
         const 30;
 },
 _c8oKk() //  [R1]
         { []
         }
     {offset
       c8oKk: // global
           _s8onK::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8oKo_info;
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = _s8onK::P64;
           Sp = Sp - 8;
           call GHC.Show.show_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8oKk_info" {
     block_c8oKk_info:
         const _c8oKk;
         const 2;
         const 30;
 },
 _c8oKo() //  [R1]
         { []
         }
     {offset
       c8oKo: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8oKo_info" {
     block_c8oKo_info:
         const _c8oKo;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.742920426 UTC

[section ""data" . GHC.IO.Exception.$fShowSomeAsyncException_$cshowList_closure" {
     GHC.IO.Exception.$fShowSomeAsyncException_$cshowList_closure:
         const GHC.IO.Exception.$fShowSomeAsyncException_$cshowList_info;
 },
 GHC.IO.Exception.$fShowSomeAsyncException_$cshowList_entry() //  [R2,
                                                                   R3]
         { []
         }
     {offset
       c8oKW: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Exception.$fShowSomeAsyncException1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowSomeAsyncException_$cshowList_info" {
     GHC.IO.Exception.$fShowSomeAsyncException_$cshowList_info:
         const GHC.IO.Exception.$fShowSomeAsyncException_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.74628456 UTC

[section ""data" . GHC.IO.Exception.$fShowSomeAsyncException_closure" {
     GHC.IO.Exception.$fShowSomeAsyncException_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Exception.$fShowSomeAsyncException_$cshowsPrec_closure+3;
         const GHC.IO.Exception.$fExceptionSomeAsyncException_$cshow_closure+1;
         const GHC.IO.Exception.$fShowSomeAsyncException_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.747971506 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionAsyncException8_bytes" {
     GHC.IO.Exception.$fExceptionAsyncException8_bytes:
         I8[] [115,116,97,99,107,32,111,118,101,114,102,108,111,119]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.750216008 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAsyncException7_closure" {
     GHC.IO.Exception.$fExceptionAsyncException7_closure:
         const GHC.IO.Exception.$fExceptionAsyncException7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionAsyncException7_entry() //  [R1]
         { []
         }
     {offset
       c8oLb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oLc; else goto c8oLd;
       c8oLc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8oLd: // global
           (_c8oL8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8oL8::I64 == 0) goto c8oLa; else goto c8oL9;
       c8oLa: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8oL9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8oL8::I64;
           R2 = GHC.IO.Exception.$fExceptionAsyncException8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionAsyncException7_info" {
     GHC.IO.Exception.$fExceptionAsyncException7_info:
         const GHC.IO.Exception.$fExceptionAsyncException7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.753747768 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionAsyncException6_bytes" {
     GHC.IO.Exception.$fExceptionAsyncException6_bytes:
         I8[] [104,101,97,112,32,111,118,101,114,102,108,111,119]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.755884861 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAsyncException5_closure" {
     GHC.IO.Exception.$fExceptionAsyncException5_closure:
         const GHC.IO.Exception.$fExceptionAsyncException5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionAsyncException5_entry() //  [R1]
         { []
         }
     {offset
       c8oLt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oLu; else goto c8oLv;
       c8oLu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8oLv: // global
           (_c8oLq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8oLq::I64 == 0) goto c8oLs; else goto c8oLr;
       c8oLs: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8oLr: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8oLq::I64;
           R2 = GHC.IO.Exception.$fExceptionAsyncException6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionAsyncException5_info" {
     GHC.IO.Exception.$fExceptionAsyncException5_info:
         const GHC.IO.Exception.$fExceptionAsyncException5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.759649773 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionAsyncException4_bytes" {
     GHC.IO.Exception.$fExceptionAsyncException4_bytes:
         I8[] [116,104,114,101,97,100,32,107,105,108,108,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.762353662 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAsyncException3_closure" {
     GHC.IO.Exception.$fExceptionAsyncException3_closure:
         const GHC.IO.Exception.$fExceptionAsyncException3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionAsyncException3_entry() //  [R1]
         { []
         }
     {offset
       c8oLL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oLM; else goto c8oLN;
       c8oLM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8oLN: // global
           (_c8oLI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8oLI::I64 == 0) goto c8oLK; else goto c8oLJ;
       c8oLK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8oLJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8oLI::I64;
           R2 = GHC.IO.Exception.$fExceptionAsyncException4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionAsyncException3_info" {
     GHC.IO.Exception.$fExceptionAsyncException3_info:
         const GHC.IO.Exception.$fExceptionAsyncException3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.765945726 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionAsyncException2_bytes" {
     GHC.IO.Exception.$fExceptionAsyncException2_bytes:
         I8[] [117,115,101,114,32,105,110,116,101,114,114,117,112,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.768154725 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAsyncException1_closure" {
     GHC.IO.Exception.$fExceptionAsyncException1_closure:
         const GHC.IO.Exception.$fExceptionAsyncException1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionAsyncException1_entry() //  [R1]
         { []
         }
     {offset
       c8oM3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oM4; else goto c8oM5;
       c8oM4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8oM5: // global
           (_c8oM0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8oM0::I64 == 0) goto c8oM2; else goto c8oM1;
       c8oM2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8oM1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8oM0::I64;
           R2 = GHC.IO.Exception.$fExceptionAsyncException2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionAsyncException1_info" {
     GHC.IO.Exception.$fExceptionAsyncException1_info:
         const GHC.IO.Exception.$fExceptionAsyncException1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.773706329 UTC

[section ""data" . GHC.IO.Exception.$w$cshowsPrec1_closure" {
     GHC.IO.Exception.$w$cshowsPrec1_closure:
         const GHC.IO.Exception.$w$cshowsPrec1_info;
         const 0;
 },
 GHC.IO.Exception.$w$cshowsPrec1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8oMr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oMs; else goto c8oMt;
       c8oMs: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$w$cshowsPrec1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8oMt: // global
           I64[Sp - 16] = block_c8oMi_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8oMI; else goto c8oMj;
       u8oMI: // global
           call _c8oMi(R1) args: 0, res: 0, upd: 0;
       c8oMj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$w$cshowsPrec1_info" {
     GHC.IO.Exception.$w$cshowsPrec1_info:
         const GHC.IO.Exception.$w$cshowsPrec1_entry;
         const 0;
         const 133143986190;
         const 8589934607;
         const S8oB9_srt+128;
 },
 _c8oMi() //  [R1]
         { []
         }
     {offset
       c8oMi: // global
           _s8onQ::P64 = P64[Sp + 8];
           _c8oMq::P64 = R1 & 7;
           if (_c8oMq::P64 < 3) goto u8oMG; else goto u8oMH;
       u8oMG: // global
           if (_c8oMq::P64 < 2) goto c8oMm; else goto c8oMn;
       c8oMm: // global
           R3 = _s8onQ::P64;
           R2 = GHC.IO.Exception.$fExceptionAsyncException7_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8oMn: // global
           R3 = _s8onQ::P64;
           R2 = GHC.IO.Exception.$fExceptionAsyncException5_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       u8oMH: // global
           if (_c8oMq::P64 < 4) goto c8oMo; else goto c8oMp;
       c8oMo: // global
           R3 = _s8onQ::P64;
           R2 = GHC.IO.Exception.$fExceptionAsyncException3_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8oMp: // global
           R3 = _s8onQ::P64;
           R2 = GHC.IO.Exception.$fExceptionAsyncException1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8oMi_info" {
     block_c8oMi_info:
         const _c8oMi;
         const 1;
         const 64424509470;
         const S8oB9_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.779848908 UTC

[section ""data" . GHC.IO.Exception.$fShowAsyncException_$cshowsPrec_closure" {
     GHC.IO.Exception.$fShowAsyncException_$cshowsPrec_closure:
         const GHC.IO.Exception.$fShowAsyncException_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Exception.$fShowAsyncException_$cshowsPrec_entry() //  [R3,
                                                                R4]
         { []
         }
     {offset
       c8oMY: // global
           _s8onT::P64 = R3;
           R3 = R4;
           R2 = _s8onT::P64;
           call GHC.IO.Exception.$w$cshowsPrec1_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowAsyncException_$cshowsPrec_info" {
     GHC.IO.Exception.$fShowAsyncException_$cshowsPrec_info:
         const GHC.IO.Exception.$fShowAsyncException_$cshowsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S8oB9_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.784447058 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAsyncException_$cshow_closure" {
     GHC.IO.Exception.$fExceptionAsyncException_$cshow_closure:
         const GHC.IO.Exception.$fExceptionAsyncException_$cshow_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionAsyncException_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c8oNi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8oNj; else goto c8oNk;
       c8oNj: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionAsyncException_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8oNk: // global
           I64[Sp - 8] = block_c8oN9_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8oNz; else goto c8oNa;
       u8oNz: // global
           call _c8oN9(R1) args: 0, res: 0, upd: 0;
       c8oNa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionAsyncException_$cshow_info" {
     GHC.IO.Exception.$fExceptionAsyncException_$cshow_info:
         const GHC.IO.Exception.$fExceptionAsyncException_$cshow_entry;
         const 0;
         const 201863462926;
         const 4294967301;
         const S8oB9_srt+128;
 },
 _c8oN9() //  [R1]
         { []
         }
     {offset
       c8oN9: // global
           _c8oNh::P64 = R1 & 7;
           if (_c8oNh::P64 < 3) goto u8oNx; else goto u8oNy;
       u8oNx: // global
           if (_c8oNh::P64 < 2) goto c8oNd; else goto c8oNe;
       c8oNd: // global
           R1 = GHC.IO.Exception.$fExceptionAsyncException7_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8oNe: // global
           R1 = GHC.IO.Exception.$fExceptionAsyncException5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u8oNy: // global
           if (_c8oNh::P64 < 4) goto c8oNf; else goto c8oNg;
       c8oNf: // global
           R1 = GHC.IO.Exception.$fExceptionAsyncException3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8oNg: // global
           R1 = GHC.IO.Exception.$fExceptionAsyncException1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8oN9_info" {
     block_c8oN9_info:
         const _c8oN9;
         const 0;
         const 64424509470;
         const S8oB9_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.790438216 UTC

[section ""data" . GHC.IO.Exception.$fShowAsyncException_$cshowList_closure" {
     GHC.IO.Exception.$fShowAsyncException_$cshowList_closure:
         const GHC.IO.Exception.$fShowAsyncException_$cshowList_info;
         const 0;
 },
 GHC.IO.Exception.$fShowAsyncException_$cshowList_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       c8oNT: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Exception.$w$cshowsPrec1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowAsyncException_$cshowList_info" {
     GHC.IO.Exception.$fShowAsyncException_$cshowList_info:
         const GHC.IO.Exception.$fShowAsyncException_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S8oB9_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.794223181 UTC

[section ""data" . GHC.IO.Exception.$fShowAsyncException_closure" {
     GHC.IO.Exception.$fShowAsyncException_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Exception.$fShowAsyncException_$cshowsPrec_closure+3;
         const GHC.IO.Exception.$fExceptionAsyncException_$cshow_closure+1;
         const GHC.IO.Exception.$fShowAsyncException_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.796019108 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionArrayException4_bytes" {
     GHC.IO.Exception.$fExceptionArrayException4_bytes:
         I8[] [97,114,114,97,121,32,105,110,100,101,120,32,111,117,116,32,111,102,32,114,97,110,103,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.798474842 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionArrayException3_bytes" {
     GHC.IO.Exception.$fExceptionArrayException3_bytes:
         I8[] [58,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.80024481 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionArrayException2_bytes" {
     GHC.IO.Exception.$fExceptionArrayException2_bytes:
         I8[] [117,110,100,101,102,105,110,101,100,32,97,114,114,97,121,32,101,108,101,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.806652054 UTC

[section ""data" . GHC.IO.Exception.$w$cshowsPrec_closure" {
     GHC.IO.Exception.$w$cshowsPrec_closure:
         const GHC.IO.Exception.$w$cshowsPrec_info;
 },
 sat_s8oo6_entry() //  [R1]
         { []
         }
     {offset
       c8oOr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oOs; else goto c8oOt;
       c8oOs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8oOt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8oo6_info" {
     sat_s8oo6_info:
         const sat_s8oo6_entry;
         const 2;
         const 18;
 },
 sat_s8oo7_entry() //  [R1]
         { []
         }
     {offset
       c8oOy: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8oOz; else goto c8oOA;
       c8oOz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8oOA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c8oOh_info;
           _s8oo0::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s8oo0::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u8oOG; else goto c8oOi;
       u8oOG: // global
           call _c8oOh(R1) args: 0, res: 0, upd: 0;
       c8oOi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8oo7_info" {
     sat_s8oo7_info:
         const sat_s8oo7_entry;
         const 2;
         const 18;
 },
 _c8oOh() //  [R1]
         { []
         }
     {offset
       c8oOh: // global
           _s8oo0::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8oOv; else goto c8oOw;
       c8oOv: // global
           R1 = _s8oo0::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c8oOw: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8oOF; else goto c8oOE;
       c8oOF: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c8oOE: // global
           I64[Hp - 24] = sat_s8oo6_info;
           P64[Hp - 8] = _s8oo0::P64;
           P64[Hp] = R1;
           R3 = Hp - 24;
           R2 = GHC.IO.Exception.$fExceptionArrayException3_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8oOh_info" {
     block_c8oOh_info:
         const _c8oOh;
         const 1;
         const 30;
 },
 sat_s8ooc_entry() //  [R1]
         { []
         }
     {offset
       c8oOX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oOY; else goto c8oOZ;
       c8oOY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8oOZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8ooc_info" {
     sat_s8ooc_info:
         const sat_s8ooc_entry;
         const 2;
         const 18;
 },
 sat_s8ood_entry() //  [R1]
         { []
         }
     {offset
       c8oP4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8oP5; else goto c8oP6;
       c8oP5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8oP6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c8oON_info;
           _s8oo0::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s8oo0::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u8oPc; else goto c8oOO;
       u8oPc: // global
           call _c8oON(R1) args: 0, res: 0, upd: 0;
       c8oOO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8ood_info" {
     sat_s8ood_info:
         const sat_s8ood_entry;
         const 2;
         const 18;
 },
 _c8oON() //  [R1]
         { []
         }
     {offset
       c8oON: // global
           _s8oo0::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8oP1; else goto c8oP2;
       c8oP1: // global
           R1 = _s8oo0::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c8oP2: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8oPb; else goto c8oPa;
       c8oPb: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c8oPa: // global
           I64[Hp - 24] = sat_s8ooc_info;
           P64[Hp - 8] = _s8oo0::P64;
           P64[Hp] = R1;
           R3 = Hp - 24;
           R2 = GHC.IO.Exception.$fExceptionArrayException3_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8oON_info" {
     block_c8oON_info:
         const _c8oON;
         const 1;
         const 30;
 },
 GHC.IO.Exception.$w$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c8oPh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oPi; else goto c8oPj;
       c8oPi: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8oPj: // global
           I64[Sp - 16] = block_c8oO8_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8oPq; else goto c8oO9;
       u8oPq: // global
           call _c8oO8(R1) args: 0, res: 0, upd: 0;
       c8oO9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$w$cshowsPrec_info" {
     GHC.IO.Exception.$w$cshowsPrec_info:
         const GHC.IO.Exception.$w$cshowsPrec_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8oO8() //  [R1]
         { []
         }
     {offset
       c8oO8: // global
           _s8oo0::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8oPe; else goto c8oPf;
       c8oPe: // global
           Hp = Hp + 32;
           _s8oo1::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c8oPp; else goto c8oPl;
       c8oPl: // global
           _s8oo2::P64 = P64[_s8oo1::P64 + 7];
           I64[Hp - 24] = sat_s8oo7_info;
           P64[Hp - 8] = _s8oo0::P64;
           P64[Hp] = _s8oo2::P64;
           R3 = Hp - 24;
           R2 = GHC.IO.Exception.$fExceptionArrayException4_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c8oPf: // global
           Hp = Hp + 32;
           _s8oo1::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c8oPp; else goto c8oPo;
       c8oPp: // global
           HpAlloc = 32;
           R1 = _s8oo1::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8oPo: // global
           _s8oo8::P64 = P64[_s8oo1::P64 + 6];
           I64[Hp - 24] = sat_s8ood_info;
           P64[Hp - 8] = _s8oo0::P64;
           P64[Hp] = _s8oo8::P64;
           R3 = Hp - 24;
           R2 = GHC.IO.Exception.$fExceptionArrayException2_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8oO8_info" {
     block_c8oO8_info:
         const _c8oO8;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.824423666 UTC

[section ""data" . GHC.IO.Exception.$fExceptionArrayException_$cshowsPrec_closure" {
     GHC.IO.Exception.$fExceptionArrayException_$cshowsPrec_closure:
         const GHC.IO.Exception.$fExceptionArrayException_$cshowsPrec_info;
 },
 GHC.IO.Exception.$fExceptionArrayException_$cshowsPrec_entry() //  [R3,
                                                                     R4]
         { []
         }
     {offset
       c8oQn: // global
           _s8oof::P64 = R3;
           R3 = R4;
           R2 = _s8oof::P64;
           call GHC.IO.Exception.$w$cshowsPrec_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionArrayException_$cshowsPrec_info" {
     GHC.IO.Exception.$fExceptionArrayException_$cshowsPrec_info:
         const GHC.IO.Exception.$fExceptionArrayException_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.827881265 UTC

[section ""data" . GHC.IO.Exception.$fExceptionArrayException1_closure" {
     GHC.IO.Exception.$fExceptionArrayException1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.830227323 UTC

[section ""data" . GHC.IO.Exception.$fExceptionArrayException_$cshow_closure" {
     GHC.IO.Exception.$fExceptionArrayException_$cshow_closure:
         const GHC.IO.Exception.$fExceptionArrayException_$cshow_info;
 },
 GHC.IO.Exception.$fExceptionArrayException_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c8oQz: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = R2;
           call GHC.IO.Exception.$w$cshowsPrec_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionArrayException_$cshow_info" {
     GHC.IO.Exception.$fExceptionArrayException_$cshow_info:
         const GHC.IO.Exception.$fExceptionArrayException_$cshow_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.833810667 UTC

[section ""data" . GHC.IO.Exception.$fShowArrayException_$cshowList_closure" {
     GHC.IO.Exception.$fShowArrayException_$cshowList_closure:
         const GHC.IO.Exception.$fShowArrayException_$cshowList_info;
 },
 GHC.IO.Exception.$fShowArrayException_$cshowList_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       c8oQL: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Exception.$w$cshowsPrec_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowArrayException_$cshowList_info" {
     GHC.IO.Exception.$fShowArrayException_$cshowList_info:
         const GHC.IO.Exception.$fShowArrayException_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.837865998 UTC

[section ""data" . GHC.IO.Exception.$fShowArrayException_closure" {
     GHC.IO.Exception.$fShowArrayException_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Exception.$fExceptionArrayException_$cshowsPrec_closure+3;
         const GHC.IO.Exception.$fExceptionArrayException_$cshow_closure+1;
         const GHC.IO.Exception.$fShowArrayException_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.839887579 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionFixIOException2_bytes" {
     GHC.IO.Exception.$fExceptionFixIOException2_bytes:
         I8[] [99,121,99,108,105,99,32,101,118,97,108,117,97,116,105,111,110,32,105,110,32,102,105,120,73,79]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.842389016 UTC

[section ""data" . GHC.IO.Exception.$fExceptionFixIOException1_closure" {
     GHC.IO.Exception.$fExceptionFixIOException1_closure:
         const GHC.IO.Exception.$fExceptionFixIOException1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionFixIOException1_entry() //  [R1]
         { []
         }
     {offset
       c8oR0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oR1; else goto c8oR2;
       c8oR1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8oR2: // global
           (_c8oQX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8oQX::I64 == 0) goto c8oQZ; else goto c8oQY;
       c8oQZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8oQY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8oQX::I64;
           R2 = GHC.IO.Exception.$fExceptionFixIOException2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionFixIOException1_info" {
     GHC.IO.Exception.$fExceptionFixIOException1_info:
         const GHC.IO.Exception.$fExceptionFixIOException1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.846992457 UTC

[section ""data" . GHC.IO.Exception.$fShowFixIOException_$cshowsPrec_closure" {
     GHC.IO.Exception.$fShowFixIOException_$cshowsPrec_closure:
         const GHC.IO.Exception.$fShowFixIOException_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Exception.$fShowFixIOException_$cshowsPrec_entry() //  [R2,
                                                                R3, R4]
         { []
         }
     {offset
       c8oRi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oRj; else goto c8oRk;
       c8oRj: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fShowFixIOException_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8oRk: // global
           I64[Sp - 16] = block_c8oRf_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8oRo; else goto c8oRg;
       u8oRo: // global
           call _c8oRf() args: 0, res: 0, upd: 0;
       c8oRg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowFixIOException_$cshowsPrec_info" {
     GHC.IO.Exception.$fShowFixIOException_$cshowsPrec_info:
         const GHC.IO.Exception.$fShowFixIOException_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S8oB9_srt+176;
 },
 _c8oRf() //  []
         { []
         }
     {offset
       c8oRf: // global
           R3 = P64[Sp + 8];
           R2 = GHC.IO.Exception.$fExceptionFixIOException1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8oRf_info" {
     block_c8oRf_info:
         const _c8oRf;
         const 1;
         const 4294967326;
         const S8oB9_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.852648172 UTC

[section ""data" . GHC.IO.Exception.$fExceptionFixIOException_$cshow_closure" {
     GHC.IO.Exception.$fExceptionFixIOException_$cshow_closure:
         const GHC.IO.Exception.$fExceptionFixIOException_$cshow_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionFixIOException_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c8oRG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8oRH; else goto c8oRI;
       c8oRH: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionFixIOException_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8oRI: // global
           I64[Sp - 8] = block_c8oRD_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8oRM; else goto c8oRE;
       u8oRM: // global
           call _c8oRD() args: 0, res: 0, upd: 0;
       c8oRE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionFixIOException_$cshow_info" {
     GHC.IO.Exception.$fExceptionFixIOException_$cshow_info:
         const GHC.IO.Exception.$fExceptionFixIOException_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S8oB9_srt+176;
 },
 _c8oRD() //  []
         { []
         }
     {offset
       c8oRD: // global
           R1 = GHC.IO.Exception.$fExceptionFixIOException1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8oRD_info" {
     block_c8oRD_info:
         const _c8oRD;
         const 0;
         const 4294967326;
         const S8oB9_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.858345402 UTC

[section ""data" . GHC.IO.Exception.$fShowFixIOException1_closure" {
     GHC.IO.Exception.$fShowFixIOException1_closure:
         const GHC.IO.Exception.$fShowFixIOException1_info;
         const 0;
 },
 GHC.IO.Exception.$fShowFixIOException1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8oS5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oS6; else goto c8oS7;
       c8oS6: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fShowFixIOException1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8oS7: // global
           I64[Sp - 16] = block_c8oS2_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8oSb; else goto c8oS3;
       u8oSb: // global
           call _c8oS2() args: 0, res: 0, upd: 0;
       c8oS3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowFixIOException1_info" {
     GHC.IO.Exception.$fShowFixIOException1_info:
         const GHC.IO.Exception.$fShowFixIOException1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S8oB9_srt+176;
 },
 _c8oS2() //  []
         { []
         }
     {offset
       c8oS2: // global
           R3 = P64[Sp + 8];
           R2 = GHC.IO.Exception.$fExceptionFixIOException1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8oS2_info" {
     block_c8oS2_info:
         const _c8oS2;
         const 1;
         const 4294967326;
         const S8oB9_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.863564167 UTC

[section ""data" . GHC.IO.Exception.$fShowFixIOException_$cshowList_closure" {
     GHC.IO.Exception.$fShowFixIOException_$cshowList_closure:
         const GHC.IO.Exception.$fShowFixIOException_$cshowList_info;
         const 0;
 },
 GHC.IO.Exception.$fShowFixIOException_$cshowList_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       c8oSq: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Exception.$fShowFixIOException1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowFixIOException_$cshowList_info" {
     GHC.IO.Exception.$fShowFixIOException_$cshowList_info:
         const GHC.IO.Exception.$fShowFixIOException_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S8oB9_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.867181891 UTC

[section ""data" . GHC.IO.Exception.$fShowFixIOException_closure" {
     GHC.IO.Exception.$fShowFixIOException_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Exception.$fShowFixIOException_$cshowsPrec_closure+3;
         const GHC.IO.Exception.$fExceptionFixIOException_$cshow_closure+1;
         const GHC.IO.Exception.$fShowFixIOException_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.870175162 UTC

[section ""data" . GHC.IO.Exception.$fEqIOErrorType_$c==_closure" {
     GHC.IO.Exception.$fEqIOErrorType_$c==_closure:
         const GHC.IO.Exception.$fEqIOErrorType_$c==_info;
 },
 GHC.IO.Exception.$fEqIOErrorType_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c8oSG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oSM; else goto c8oSN;
       c8oSM: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fEqIOErrorType_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8oSN: // global
           I64[Sp - 16] = block_c8oSC_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8oT7; else goto c8oSD;
       u8oT7: // global
           call _c8oSC(R1) args: 0, res: 0, upd: 0;
       c8oSD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fEqIOErrorType_$c==_info" {
     GHC.IO.Exception.$fEqIOErrorType_$c==_info:
         const GHC.IO.Exception.$fEqIOErrorType_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8oSC() //  [R1]
         { []
         }
     {offset
       c8oSC: // global
           _s8ooy::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c8oSL_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8ooy::I64;
           if (R1 & 7 != 0) goto u8oT6; else goto c8oSS;
       u8oT6: // global
           call _c8oSL(R1) args: 0, res: 0, upd: 0;
       c8oSS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8oSC_info" {
     block_c8oSC_info:
         const _c8oSC;
         const 1;
         const 30;
 },
 _c8oSL() //  [R1]
         { []
         }
     {offset
       c8oSL: // global
           R1 = I64[((%MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]) == I64[Sp + 8]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8oSL_info" {
     block_c8oSL_info:
         const _c8oSL;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.878701973 UTC

[section ""data" . GHC.IO.Exception.$fEqIOErrorType_$c/=_closure" {
     GHC.IO.Exception.$fEqIOErrorType_$c/=_closure:
         const GHC.IO.Exception.$fEqIOErrorType_$c/=_info;
 },
 GHC.IO.Exception.$fEqIOErrorType_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8oTG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oTM; else goto c8oTN;
       c8oTM: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fEqIOErrorType_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8oTN: // global
           I64[Sp - 16] = block_c8oTC_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8oUb; else goto c8oTD;
       u8oUb: // global
           call _c8oTC(R1) args: 0, res: 0, upd: 0;
       c8oTD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fEqIOErrorType_$c/=_info" {
     GHC.IO.Exception.$fEqIOErrorType_$c/=_info:
         const GHC.IO.Exception.$fEqIOErrorType_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8oTC() //  [R1]
         { []
         }
     {offset
       c8oTC: // global
           _s8ooF::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c8oTL_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8ooF::I64;
           if (R1 & 7 != 0) goto u8oUa; else goto c8oTS;
       u8oUa: // global
           call _c8oTL(R1) args: 0, res: 0, upd: 0;
       c8oTS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8oTC_info" {
     block_c8oTC_info:
         const _c8oTC;
         const 1;
         const 30;
 },
 _c8oTL() //  [R1]
         { []
         }
     {offset
       c8oTL: // global
           if (%MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]) == I64[Sp + 8]) goto c8oU7; else goto c8oU6;
       c8oU7: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8oU6: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8oTL_info" {
     block_c8oTL_info:
         const _c8oTL;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.885621011 UTC

[section ""data" . GHC.IO.Exception.$fEqIOErrorType_closure" {
     GHC.IO.Exception.$fEqIOErrorType_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Exception.$fEqIOErrorType_$c==_closure+2;
         const GHC.IO.Exception.$fEqIOErrorType_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.887450753 UTC

[section ""cstring" . lvl_r8j2D_bytes" {
     lvl_r8j2D_bytes:
         I8[] [97,108,114,101,97,100,121,32,101,120,105,115,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.889926373 UTC

[section ""data" . lvl1_r8j2E_closure" {
     lvl1_r8j2E_closure:
         const lvl1_r8j2E_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r8j2E_entry() //  [R1]
         { []
         }
     {offset
       c8oUK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oUL; else goto c8oUM;
       c8oUL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8oUM: // global
           (_c8oUH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8oUH::I64 == 0) goto c8oUJ; else goto c8oUI;
       c8oUJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8oUI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8oUH::I64;
           R2 = lvl_r8j2D_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_r8j2E_info" {
     lvl1_r8j2E_info:
         const lvl1_r8j2E_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.89365777 UTC

[section ""cstring" . lvl2_r8j2F_bytes" {
     lvl2_r8j2F_bytes:
         I8[] [100,111,101,115,32,110,111,116,32,101,120,105,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.895920682 UTC

[section ""data" . lvl3_r8j2G_closure" {
     lvl3_r8j2G_closure:
         const lvl3_r8j2G_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r8j2G_entry() //  [R1]
         { []
         }
     {offset
       c8oV2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oV3; else goto c8oV4;
       c8oV3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8oV4: // global
           (_c8oUZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8oUZ::I64 == 0) goto c8oV1; else goto c8oV0;
       c8oV1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8oV0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8oUZ::I64;
           R2 = lvl2_r8j2F_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_r8j2G_info" {
     lvl3_r8j2G_info:
         const lvl3_r8j2G_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.899614271 UTC

[section ""cstring" . lvl4_r8j2H_bytes" {
     lvl4_r8j2H_bytes:
         I8[] [114,101,115,111,117,114,99,101,32,98,117,115,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.901914878 UTC

[section ""data" . lvl5_r8j2I_closure" {
     lvl5_r8j2I_closure:
         const lvl5_r8j2I_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r8j2I_entry() //  [R1]
         { []
         }
     {offset
       c8oVk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oVl; else goto c8oVm;
       c8oVl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8oVm: // global
           (_c8oVh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8oVh::I64 == 0) goto c8oVj; else goto c8oVi;
       c8oVj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8oVi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8oVh::I64;
           R2 = lvl4_r8j2H_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl5_r8j2I_info" {
     lvl5_r8j2I_info:
         const lvl5_r8j2I_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.906785519 UTC

[section ""cstring" . lvl6_r8j2J_bytes" {
     lvl6_r8j2J_bytes:
         I8[] [114,101,115,111,117,114,99,101,32,101,120,104,97,117,115,116,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.909149661 UTC

[section ""data" . lvl7_r8j2K_closure" {
     lvl7_r8j2K_closure:
         const lvl7_r8j2K_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_r8j2K_entry() //  [R1]
         { []
         }
     {offset
       c8oVC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oVD; else goto c8oVE;
       c8oVD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8oVE: // global
           (_c8oVz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8oVz::I64 == 0) goto c8oVB; else goto c8oVA;
       c8oVB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8oVA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8oVz::I64;
           R2 = lvl6_r8j2J_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl7_r8j2K_info" {
     lvl7_r8j2K_info:
         const lvl7_r8j2K_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.912883153 UTC

[section ""cstring" . lvl8_r8j2L_bytes" {
     lvl8_r8j2L_bytes:
         I8[] [101,110,100,32,111,102,32,102,105,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.915341274 UTC

[section ""data" . lvl9_r8j2M_closure" {
     lvl9_r8j2M_closure:
         const lvl9_r8j2M_info;
         const 0;
         const 0;
         const 0;
 },
 lvl9_r8j2M_entry() //  [R1]
         { []
         }
     {offset
       c8oVU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oVV; else goto c8oVW;
       c8oVV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8oVW: // global
           (_c8oVR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8oVR::I64 == 0) goto c8oVT; else goto c8oVS;
       c8oVT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8oVS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8oVR::I64;
           R2 = lvl8_r8j2L_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl9_r8j2M_info" {
     lvl9_r8j2M_info:
         const lvl9_r8j2M_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.919256369 UTC

[section ""cstring" . lvl10_r8j2N_bytes" {
     lvl10_r8j2N_bytes:
         I8[] [105,108,108,101,103,97,108,32,111,112,101,114,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.921648182 UTC

[section ""data" . lvl11_r8j2O_closure" {
     lvl11_r8j2O_closure:
         const lvl11_r8j2O_info;
         const 0;
         const 0;
         const 0;
 },
 lvl11_r8j2O_entry() //  [R1]
         { []
         }
     {offset
       c8oWc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oWd; else goto c8oWe;
       c8oWd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8oWe: // global
           (_c8oW9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8oW9::I64 == 0) goto c8oWb; else goto c8oWa;
       c8oWb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8oWa: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8oW9::I64;
           R2 = lvl10_r8j2N_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl11_r8j2O_info" {
     lvl11_r8j2O_info:
         const lvl11_r8j2O_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.92521252 UTC

[section ""cstring" . lvl12_r8j2P_bytes" {
     lvl12_r8j2P_bytes:
         I8[] [112,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.928070003 UTC

[section ""data" . lvl13_r8j2Q_closure" {
     lvl13_r8j2Q_closure:
         const lvl13_r8j2Q_info;
         const 0;
         const 0;
         const 0;
 },
 lvl13_r8j2Q_entry() //  [R1]
         { []
         }
     {offset
       c8oWu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oWv; else goto c8oWw;
       c8oWv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8oWw: // global
           (_c8oWr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8oWr::I64 == 0) goto c8oWt; else goto c8oWs;
       c8oWt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8oWs: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8oWr::I64;
           R2 = lvl12_r8j2P_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl13_r8j2Q_info" {
     lvl13_r8j2Q_info:
         const lvl13_r8j2Q_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.931741039 UTC

[section ""cstring" . lvl14_r8j2R_bytes" {
     lvl14_r8j2R_bytes:
         I8[] [117,115,101,114,32,101,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.933963676 UTC

[section ""data" . lvl15_r8j2S_closure" {
     lvl15_r8j2S_closure:
         const lvl15_r8j2S_info;
         const 0;
         const 0;
         const 0;
 },
 lvl15_r8j2S_entry() //  [R1]
         { []
         }
     {offset
       c8oWM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oWN; else goto c8oWO;
       c8oWN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8oWO: // global
           (_c8oWJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8oWJ::I64 == 0) goto c8oWL; else goto c8oWK;
       c8oWL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8oWK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8oWJ::I64;
           R2 = lvl14_r8j2R_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl15_r8j2S_info" {
     lvl15_r8j2S_info:
         const lvl15_r8j2S_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.937575462 UTC

[section ""cstring" . lvl16_r8j2T_bytes" {
     lvl16_r8j2T_bytes:
         I8[] [117,110,115,97,116,105,115,102,105,101,100,32,99,111,110,115,116,114,97,105,110,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.940352316 UTC

[section ""data" . lvl17_r8j2U_closure" {
     lvl17_r8j2U_closure:
         const lvl17_r8j2U_info;
         const 0;
         const 0;
         const 0;
 },
 lvl17_r8j2U_entry() //  [R1]
         { []
         }
     {offset
       c8oX4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oX5; else goto c8oX6;
       c8oX5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8oX6: // global
           (_c8oX1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8oX1::I64 == 0) goto c8oX3; else goto c8oX2;
       c8oX3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8oX2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8oX1::I64;
           R2 = lvl16_r8j2T_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl17_r8j2U_info" {
     lvl17_r8j2U_info:
         const lvl17_r8j2U_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.945171653 UTC

[section ""cstring" . lvl18_r8j2V_bytes" {
     lvl18_r8j2V_bytes:
         I8[] [115,121,115,116,101,109,32,101,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.948172423 UTC

[section ""data" . lvl19_r8j2W_closure" {
     lvl19_r8j2W_closure:
         const lvl19_r8j2W_info;
         const 0;
         const 0;
         const 0;
 },
 lvl19_r8j2W_entry() //  [R1]
         { []
         }
     {offset
       c8oXm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oXn; else goto c8oXo;
       c8oXn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8oXo: // global
           (_c8oXj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8oXj::I64 == 0) goto c8oXl; else goto c8oXk;
       c8oXl: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8oXk: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8oXj::I64;
           R2 = lvl18_r8j2V_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl19_r8j2W_info" {
     lvl19_r8j2W_info:
         const lvl19_r8j2W_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.952849938 UTC

[section ""cstring" . lvl20_r8j2X_bytes" {
     lvl20_r8j2X_bytes:
         I8[] [112,114,111,116,111,99,111,108,32,101,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.955888676 UTC

[section ""data" . lvl21_r8j2Y_closure" {
     lvl21_r8j2Y_closure:
         const lvl21_r8j2Y_info;
         const 0;
         const 0;
         const 0;
 },
 lvl21_r8j2Y_entry() //  [R1]
         { []
         }
     {offset
       c8oXE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oXF; else goto c8oXG;
       c8oXF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8oXG: // global
           (_c8oXB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8oXB::I64 == 0) goto c8oXD; else goto c8oXC;
       c8oXD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8oXC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8oXB::I64;
           R2 = lvl20_r8j2X_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl21_r8j2Y_info" {
     lvl21_r8j2Y_info:
         const lvl21_r8j2Y_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.959768696 UTC

[section ""cstring" . lvl22_r8j2Z_bytes" {
     lvl22_r8j2Z_bytes:
         I8[] [102,97,105,108,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.962008916 UTC

[section ""data" . lvl23_r8j30_closure" {
     lvl23_r8j30_closure:
         const lvl23_r8j30_info;
         const 0;
         const 0;
         const 0;
 },
 lvl23_r8j30_entry() //  [R1]
         { []
         }
     {offset
       c8oXW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oXX; else goto c8oXY;
       c8oXX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8oXY: // global
           (_c8oXT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8oXT::I64 == 0) goto c8oXV; else goto c8oXU;
       c8oXV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8oXU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8oXT::I64;
           R2 = lvl22_r8j2Z_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl23_r8j30_info" {
     lvl23_r8j30_info:
         const lvl23_r8j30_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.96558485 UTC

[section ""cstring" . lvl24_r8j31_bytes" {
     lvl24_r8j31_bytes:
         I8[] [105,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.96774359 UTC

[section ""data" . lvl25_r8j32_closure" {
     lvl25_r8j32_closure:
         const lvl25_r8j32_info;
         const 0;
         const 0;
         const 0;
 },
 lvl25_r8j32_entry() //  [R1]
         { []
         }
     {offset
       c8oYe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oYf; else goto c8oYg;
       c8oYf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8oYg: // global
           (_c8oYb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8oYb::I64 == 0) goto c8oYd; else goto c8oYc;
       c8oYd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8oYc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8oYb::I64;
           R2 = lvl24_r8j31_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl25_r8j32_info" {
     lvl25_r8j32_info:
         const lvl25_r8j32_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.97117178 UTC

[section ""cstring" . lvl26_r8j33_bytes" {
     lvl26_r8j33_bytes:
         I8[] [105,110,97,112,112,114,111,112,114,105,97,116,101,32,116,121,112,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.973452734 UTC

[section ""data" . lvl27_r8j34_closure" {
     lvl27_r8j34_closure:
         const lvl27_r8j34_info;
         const 0;
         const 0;
         const 0;
 },
 lvl27_r8j34_entry() //  [R1]
         { []
         }
     {offset
       c8oYw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oYx; else goto c8oYy;
       c8oYx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8oYy: // global
           (_c8oYt::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8oYt::I64 == 0) goto c8oYv; else goto c8oYu;
       c8oYv: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8oYu: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8oYt::I64;
           R2 = lvl26_r8j33_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl27_r8j34_info" {
     lvl27_r8j34_info:
         const lvl27_r8j34_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.978041192 UTC

[section ""cstring" . lvl28_r8j35_bytes" {
     lvl28_r8j35_bytes:
         I8[] [104,97,114,100,119,97,114,101,32,102,97,117,108,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.980333581 UTC

[section ""data" . lvl29_r8j36_closure" {
     lvl29_r8j36_closure:
         const lvl29_r8j36_info;
         const 0;
         const 0;
         const 0;
 },
 lvl29_r8j36_entry() //  [R1]
         { []
         }
     {offset
       c8oYO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oYP; else goto c8oYQ;
       c8oYP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8oYQ: // global
           (_c8oYL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8oYL::I64 == 0) goto c8oYN; else goto c8oYM;
       c8oYN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8oYM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8oYL::I64;
           R2 = lvl28_r8j35_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl29_r8j36_info" {
     lvl29_r8j36_info:
         const lvl29_r8j36_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.983875829 UTC

[section ""cstring" . lvl30_r8j37_bytes" {
     lvl30_r8j37_bytes:
         I8[] [117,110,115,117,112,112,111,114,116,101,100,32,111,112,101,114,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.98604685 UTC

[section ""data" . lvl31_r8j38_closure" {
     lvl31_r8j38_closure:
         const lvl31_r8j38_info;
         const 0;
         const 0;
         const 0;
 },
 lvl31_r8j38_entry() //  [R1]
         { []
         }
     {offset
       c8oZ6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oZ7; else goto c8oZ8;
       c8oZ7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8oZ8: // global
           (_c8oZ3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8oZ3::I64 == 0) goto c8oZ5; else goto c8oZ4;
       c8oZ5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8oZ4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8oZ3::I64;
           R2 = lvl30_r8j37_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl31_r8j38_info" {
     lvl31_r8j38_info:
         const lvl31_r8j38_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.989483043 UTC

[section ""cstring" . lvl32_r8j39_bytes" {
     lvl32_r8j39_bytes:
         I8[] [116,105,109,101,111,117,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.99170576 UTC

[section ""data" . lvl33_r8j3a_closure" {
     lvl33_r8j3a_closure:
         const lvl33_r8j3a_info;
         const 0;
         const 0;
         const 0;
 },
 lvl33_r8j3a_entry() //  [R1]
         { []
         }
     {offset
       c8oZo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oZp; else goto c8oZq;
       c8oZp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8oZq: // global
           (_c8oZl::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8oZl::I64 == 0) goto c8oZn; else goto c8oZm;
       c8oZn: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8oZm: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8oZl::I64;
           R2 = lvl32_r8j39_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_r8j3a_info" {
     lvl33_r8j3a_info:
         const lvl33_r8j3a_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.995622697 UTC

[section ""cstring" . lvl34_r8j3b_bytes" {
     lvl34_r8j3b_bytes:
         I8[] [114,101,115,111,117,114,99,101,32,118,97,110,105,115,104,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:32.999797166 UTC

[section ""data" . lvl35_r8j3c_closure" {
     lvl35_r8j3c_closure:
         const lvl35_r8j3c_info;
         const 0;
         const 0;
         const 0;
 },
 lvl35_r8j3c_entry() //  [R1]
         { []
         }
     {offset
       c8oZG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oZH; else goto c8oZI;
       c8oZH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8oZI: // global
           (_c8oZD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8oZD::I64 == 0) goto c8oZF; else goto c8oZE;
       c8oZF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8oZE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8oZD::I64;
           R2 = lvl34_r8j3b_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl35_r8j3c_info" {
     lvl35_r8j3c_info:
         const lvl35_r8j3c_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.003343087 UTC

[section ""cstring" . lvl36_r8j3d_bytes" {
     lvl36_r8j3d_bytes:
         I8[] [105,110,116,101,114,114,117,112,116,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.006008632 UTC

[section ""data" . lvl37_r8j3e_closure" {
     lvl37_r8j3e_closure:
         const lvl37_r8j3e_info;
         const 0;
         const 0;
         const 0;
 },
 lvl37_r8j3e_entry() //  [R1]
         { []
         }
     {offset
       c8oZY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8oZZ; else goto c8p00;
       c8oZZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8p00: // global
           (_c8oZV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8oZV::I64 == 0) goto c8oZX; else goto c8oZW;
       c8oZX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8oZW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8oZV::I64;
           R2 = lvl36_r8j3d_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl37_r8j3e_info" {
     lvl37_r8j3e_info:
         const lvl37_r8j3e_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.012655429 UTC

[section ""data" . GHC.IO.Exception.$w$cshowsPrec4_closure" {
     GHC.IO.Exception.$w$cshowsPrec4_closure:
         const GHC.IO.Exception.$w$cshowsPrec4_info;
         const 0;
 },
 GHC.IO.Exception.$w$cshowsPrec4_entry() //  [R2, R3]
         { []
         }
     {offset
       c8p0B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8p0C; else goto c8p0D;
       c8p0C: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$w$cshowsPrec4_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8p0D: // global
           I64[Sp - 16] = block_c8p0d_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8p1z; else goto c8p0e;
       u8p1z: // global
           call _c8p0d(R1) args: 0, res: 0, upd: 0;
       c8p0e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$w$cshowsPrec4_info" {
     GHC.IO.Exception.$w$cshowsPrec4_info:
         const GHC.IO.Exception.$w$cshowsPrec4_entry;
         const 0;
         const 4503595332403214;
         const 8589934607;
         const S8oB9_srt+208;
 },
 _c8p0d() //  [R1]
         { []
         }
     {offset
       c8p0d: // global
           _s8ooK::P64 = P64[Sp + 8];
           switch [0 .. 18] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto c8p0h;
               case 1 : goto c8p0i;
               case 2 : goto c8p0j;
               case 3 : goto c8p0k;
               case 4 : goto c8p0l;
               case 5 : goto c8p0m;
               case 6 : goto c8p0n;
               case 7 : goto c8p0o;
               case 8 : goto c8p0p;
               case 9 : goto c8p0q;
               case 10 : goto c8p0r;
               case 11 : goto c8p0s;
               case 12 : goto c8p0t;
               case 13 : goto c8p0u;
               case 14 : goto c8p0v;
               case 15 : goto c8p0w;
               case 16 : goto c8p0x;
               case 17 : goto c8p0y;
               case 18 : goto c8p0z;
           }
       c8p0z: // global
           R3 = _s8ooK::P64;
           R2 = lvl37_r8j3e_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8p0y: // global
           R3 = _s8ooK::P64;
           R2 = lvl35_r8j3c_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8p0x: // global
           R3 = _s8ooK::P64;
           R2 = lvl33_r8j3a_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8p0w: // global
           R3 = _s8ooK::P64;
           R2 = lvl31_r8j38_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8p0v: // global
           R3 = _s8ooK::P64;
           R2 = lvl29_r8j36_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8p0u: // global
           R3 = _s8ooK::P64;
           R2 = lvl27_r8j34_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8p0t: // global
           R3 = _s8ooK::P64;
           R2 = lvl25_r8j32_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8p0s: // global
           R3 = _s8ooK::P64;
           R2 = lvl23_r8j30_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8p0r: // global
           R3 = _s8ooK::P64;
           R2 = lvl21_r8j2Y_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8p0q: // global
           R3 = _s8ooK::P64;
           R2 = lvl19_r8j2W_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8p0p: // global
           R3 = _s8ooK::P64;
           R2 = lvl17_r8j2U_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8p0o: // global
           R3 = _s8ooK::P64;
           R2 = lvl15_r8j2S_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8p0n: // global
           R3 = _s8ooK::P64;
           R2 = lvl13_r8j2Q_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8p0m: // global
           R3 = _s8ooK::P64;
           R2 = lvl11_r8j2O_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8p0l: // global
           R3 = _s8ooK::P64;
           R2 = lvl9_r8j2M_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8p0k: // global
           R3 = _s8ooK::P64;
           R2 = lvl7_r8j2K_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8p0j: // global
           R3 = _s8ooK::P64;
           R2 = lvl5_r8j2I_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8p0i: // global
           R3 = _s8ooK::P64;
           R2 = lvl3_r8j2G_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8p0h: // global
           R3 = _s8ooK::P64;
           R2 = lvl1_r8j2E_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8p0d_info" {
     block_c8p0d_info:
         const _c8p0d;
         const 1;
         const 2251795518717982;
         const S8oB9_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.020263595 UTC

[section ""data" . GHC.IO.Exception.$fShowIOErrorType_$cshowsPrec_closure" {
     GHC.IO.Exception.$fShowIOErrorType_$cshowsPrec_closure:
         const GHC.IO.Exception.$fShowIOErrorType_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Exception.$fShowIOErrorType_$cshowsPrec_entry() //  [R3, R4]
         { []
         }
     {offset
       c8p1T: // global
           _s8ooN::P64 = R3;
           R3 = R4;
           R2 = _s8ooN::P64;
           call GHC.IO.Exception.$w$cshowsPrec4_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowIOErrorType_$cshowsPrec_info" {
     GHC.IO.Exception.$fShowIOErrorType_$cshowsPrec_info:
         const GHC.IO.Exception.$fShowIOErrorType_$cshowsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S8oB9_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.02375165 UTC

[section ""data" . GHC.IO.Exception.$fShowIOErrorType_$cshow_closure" {
     GHC.IO.Exception.$fShowIOErrorType_$cshow_closure:
         const GHC.IO.Exception.$fShowIOErrorType_$cshow_info;
         const 0;
 },
 GHC.IO.Exception.$fShowIOErrorType_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c8p24: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = R2;
           call GHC.IO.Exception.$w$cshowsPrec4_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowIOErrorType_$cshow_info" {
     GHC.IO.Exception.$fShowIOErrorType_$cshow_info:
         const GHC.IO.Exception.$fShowIOErrorType_$cshow_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S8oB9_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.027340272 UTC

[section ""data" . GHC.IO.Exception.$fShowIOErrorType_$cshowList_closure" {
     GHC.IO.Exception.$fShowIOErrorType_$cshowList_closure:
         const GHC.IO.Exception.$fShowIOErrorType_$cshowList_info;
         const 0;
 },
 GHC.IO.Exception.$fShowIOErrorType_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c8p2g: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Exception.$w$cshowsPrec4_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowIOErrorType_$cshowList_info" {
     GHC.IO.Exception.$fShowIOErrorType_$cshowList_info:
         const GHC.IO.Exception.$fShowIOErrorType_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S8oB9_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.030821237 UTC

[section ""data" . GHC.IO.Exception.$fShowIOErrorType_closure" {
     GHC.IO.Exception.$fShowIOErrorType_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Exception.$fShowIOErrorType_$cshowsPrec_closure+3;
         const GHC.IO.Exception.$fShowIOErrorType_$cshow_closure+1;
         const GHC.IO.Exception.$fShowIOErrorType_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.04218401 UTC

[section ""data" . GHC.IO.Exception.$fEqIOException_$c==_closure" {
     GHC.IO.Exception.$fEqIOException_$c==_closure:
         const GHC.IO.Exception.$fEqIOException_$c==_info;
 },
 GHC.IO.Exception.$fEqIOException_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c8p2v: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c8p2M; else goto c8p2N;
       c8p2M: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fEqIOException_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8p2N: // global
           I64[Sp - 16] = block_c8p2s_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8p7p; else goto c8p2t;
       u8p7p: // global
           call _c8p2s(R1) args: 0, res: 0, upd: 0;
       c8p2t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fEqIOException_$c==_info" {
     GHC.IO.Exception.$fEqIOException_$c==_info:
         const GHC.IO.Exception.$fEqIOException_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8p2s() //  [R1]
         { []
         }
     {offset
       c8p2s: // global
           I64[Sp - 40] = block_c8p2y_info;
           _s8ooV::P64 = P64[R1 + 7];
           _s8ooW::P64 = P64[R1 + 15];
           _s8ooX::P64 = P64[R1 + 23];
           _s8ooY::P64 = P64[R1 + 31];
           _s8ooZ::P64 = P64[R1 + 39];
           _s8op0::P64 = P64[R1 + 47];
           R1 = P64[Sp + 8];
           P64[Sp - 32] = _s8ooX::P64;
           P64[Sp - 24] = _s8ooY::P64;
           P64[Sp - 16] = _s8ooZ::P64;
           P64[Sp - 8] = _s8op0::P64;
           P64[Sp] = _s8ooW::P64;
           P64[Sp + 8] = _s8ooV::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u8p7o; else goto c8p2z;
       u8p7o: // global
           call _c8p2y(R1) args: 0, res: 0, upd: 0;
       c8p2z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8p2s_info" {
     block_c8p2s_info:
         const _c8p2s;
         const 1;
         const 30;
 },
 _c8p2y() //  [R1]
         { []
         }
     {offset
       c8p2y: // global
           I64[Sp - 40] = block_c8p2D_info;
           _s8op2::P64 = P64[R1 + 7];
           _s8op4::P64 = P64[R1 + 23];
           _s8op5::P64 = P64[R1 + 31];
           _s8op6::P64 = P64[R1 + 39];
           _s8op7::P64 = P64[R1 + 47];
           R1 = P64[R1 + 15];
           P64[Sp - 32] = _s8op4::P64;
           P64[Sp - 24] = _s8op5::P64;
           P64[Sp - 16] = _s8op6::P64;
           P64[Sp - 8] = _s8op7::P64;
           P64[Sp] = _s8op2::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u8p7q; else goto c8p2E;
       u8p7q: // global
           call _c8p2D(R1) args: 0, res: 0, upd: 0;
       c8p2E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8p2y_info" {
     block_c8p2y_info:
         const _c8p2y;
         const 6;
         const 30;
 },
 _c8p2D() //  [R1]
         { []
         }
     {offset
       c8p2D: // global
           _s8op9::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c8p2L_info;
           R1 = P64[Sp + 80];
           I64[Sp + 80] = _s8op9::I64;
           if (R1 & 7 != 0) goto u8p7r; else goto c8p2U;
       u8p7r: // global
           call _c8p2L(R1) args: 0, res: 0, upd: 0;
       c8p2U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8p2D_info" {
     block_c8p2D_info:
         const _c8p2D;
         const 11;
         const 30;
 },
 _c8p2L() //  [R1]
         { []
         }
     {offset
       c8p2L: // global
           if (%MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]) == I64[Sp + 80]) goto c8p3c; else goto u8p75;
       c8p3c: // global
           I64[Sp] = block_c8p3b_info;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 56];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       u8p75: // global
           Sp = Sp + 96;
           call _c8p6E() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8p2L_info" {
     block_c8p2L_info:
         const _c8p2L;
         const 32779;
         const 30;
 },
 _c8p3b() //  [R1]
         { []
         }
     {offset
       c8p3b: // global
           if (R1 & 7 == 1) goto u8p76; else goto c8p5b;
       u8p76: // global
           Sp = Sp + 96;
           call _c8p6E() args: 0, res: 0, upd: 0;
       c8p5b: // global
           I64[Sp] = block_c8p3n_info;
           R1 = P64[Sp + 88];
           if (R1 & 7 != 0) goto u8p7t; else goto c8p5c;
       u8p7t: // global
           call _c8p3n(R1) args: 0, res: 0, upd: 0;
       c8p5c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8p3b_info" {
     block_c8p3b_info:
         const _c8p3b;
         const 37003;
         const 30;
 },
 _c8p3n() //  [R1]
         { []
         }
     {offset
       c8p3n: // global
           _s8op2::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto c8p5j; else goto c8p5z;
       c8p5j: // global
           I64[Sp] = block_c8p5g_info;
           R1 = _s8op2::P64;
           if (R1 & 7 != 0) goto u8p7v; else goto c8p5k;
       u8p7v: // global
           call _c8p5g(R1) args: 0, res: 0, upd: 0;
       c8p5k: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8p5z: // global
           I64[Sp] = block_c8p5x_info;
           _s8opB::P64 = P64[R1 + 6];
           R1 = _s8op2::P64;
           P64[Sp + 88] = _s8opB::P64;
           if (R1 & 7 != 0) goto u8p7w; else goto c8p5A;
       u8p7w: // global
           call _c8p5x(R1) args: 0, res: 0, upd: 0;
       c8p5A: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8p3n_info" {
     block_c8p3n_info:
         const _c8p3n;
         const 102539;
         const 30;
 },
 _c8p5g() //  [R1]
         { []
         }
     {offset
       c8p5g: // global
           if (R1 & 7 == 1) goto u8p7e; else goto u8p7f;
       u8p7e: // global
           Sp = Sp + 8;
           call _s8ope() args: 0, res: 0, upd: 0;
       u8p7f: // global
           Sp = Sp + 96;
           call _c8p6E() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8p5g_info" {
     block_c8p5g_info:
         const _c8p5g;
         const 103563;
         const 30;
 },
 _c8p5x() //  [R1]
         { []
         }
     {offset
       c8p5x: // global
           if (R1 & 7 == 1) goto u8p77; else goto c8p5L;
       u8p77: // global
           Sp = Sp + 96;
           call _c8p6E() args: 0, res: 0, upd: 0;
       c8p5L: // global
           I64[Sp] = block_c8p5J_info;
           _s8opD::P64 = P64[R1 + 6];
           R1 = P64[Sp + 88];
           P64[Sp + 88] = _s8opD::P64;
           if (R1 & 7 != 0) goto u8p7O; else goto c8p5M;
       u8p7O: // global
           call _c8p5J(R1) args: 0, res: 0, upd: 0;
       c8p5M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8p5x_info" {
     block_c8p5x_info:
         const _c8p5x;
         const 38027;
         const 30;
 },
 _c8p5J() //  [R1]
         { []
         }
     {offset
       c8p5J: // global
           _s8opD::P64 = P64[Sp + 88];
           if (R1 & 7 == 1) goto c8p5T; else goto c8p6o;
       c8p5T: // global
           I64[Sp] = block_c8p5Q_info;
           _s8opG::P64 = P64[R1 + 15];
           R1 = _s8opD::P64;
           P64[Sp + 88] = _s8opG::P64;
           if (R1 & 7 != 0) goto u8p7Q; else goto c8p5U;
       u8p7Q: // global
           call _c8p5Q(R1) args: 0, res: 0, upd: 0;
       c8p5U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8p6o: // global
           I64[Sp] = block_c8p6m_info;
           _s8opP::P64 = P64[R1 + 14];
           R1 = _s8opD::P64;
           P64[Sp + 88] = _s8opP::P64;
           if (R1 & 7 != 0) goto u8p7R; else goto c8p6p;
       u8p7R: // global
           call _c8p6m(R1) args: 0, res: 0, upd: 0;
       c8p6p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8p5J_info" {
     block_c8p5J_info:
         const _c8p5J;
         const 38027;
         const 30;
 },
 _c8p5Q() //  [R1]
         { []
         }
     {offset
       c8p5Q: // global
           if (R1 & 7 == 1) goto c8p6f; else goto u8p7b;
       c8p6f: // global
           if (P64[Sp + 88] == P64[R1 + 15]) goto u8p7c; else goto u8p7d;
       u8p7c: // global
           Sp = Sp + 8;
           call _s8ope() args: 0, res: 0, upd: 0;
       u8p7d: // global
           Sp = Sp + 96;
           goto u8p7U;
       u8p7b: // global
           Sp = Sp + 96;
           goto u8p7U;
       u8p7U: // global
           call _c8p6E() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8p5Q_info" {
     block_c8p5Q_info:
         const _c8p5Q;
         const 38027;
         const 30;
 },
 _c8p6m() //  [R1]
         { []
         }
     {offset
       c8p6m: // global
           if (R1 & 7 == 1) goto u8p78; else goto c8p6O;
       u8p78: // global
           Sp = Sp + 96;
           goto u8p7X;
       c8p6O: // global
           if (P64[Sp + 88] == P64[R1 + 14]) goto u8p79; else goto u8p7a;
       u8p79: // global
           Sp = Sp + 8;
           call _s8ope() args: 0, res: 0, upd: 0;
       u8p7a: // global
           Sp = Sp + 96;
           goto u8p7X;
       u8p7X: // global
           call _c8p6E() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8p6m_info" {
     block_c8p6m_info:
         const _c8p6m;
         const 38027;
         const 30;
 },
 _s8ope() //  []
         { []
         }
     {offset
       s8ope: // global
           I64[Sp + 8] = block_c8p3s_info;
           R3 = P64[Sp];
           R2 = P64[Sp + 40];
           Sp = Sp + 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c8p3s() //  [R1]
         { []
         }
     {offset
       c8p3s: // global
           if (R1 & 7 == 1) goto u8p7g; else goto c8p4k;
       u8p7g: // global
           Sp = Sp + 80;
           call _c8p6E() args: 0, res: 0, upd: 0;
       c8p4k: // global
           I64[Sp] = block_c8p3E_info;
           R1 = P64[Sp + 48];
           if (R1 & 7 != 0) goto u8p7x; else goto c8p4l;
       u8p7x: // global
           call _c8p3E(R1) args: 0, res: 0, upd: 0;
       c8p4l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8p3s_info" {
     block_c8p3s_info:
         const _c8p3s;
         const 26377;
         const 30;
 },
 _c8p3E() //  [R1]
         { []
         }
     {offset
       c8p3E: // global
           _s8op6::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8p4s; else goto c8p4I;
       c8p4s: // global
           I64[Sp + 8] = block_c8p4p_info;
           R1 = _s8op6::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8p7z; else goto c8p4t;
       u8p7z: // global
           call _c8p4p(R1) args: 0, res: 0, upd: 0;
       c8p4t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8p4I: // global
           I64[Sp + 8] = block_c8p4G_info;
           _s8opq::P64 = P64[R1 + 6];
           R1 = _s8op6::P64;
           P64[Sp + 72] = _s8opq::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8p7A; else goto c8p4J;
       u8p7A: // global
           call _c8p4G(R1) args: 0, res: 0, upd: 0;
       c8p4J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8p3E_info" {
     block_c8p3E_info:
         const _c8p3E;
         const 28425;
         const 30;
 },
 _c8p4p() //  [R1]
         { []
         }
     {offset
       c8p4p: // global
           if (R1 & 7 == 1) goto u8p7k; else goto u8p7l;
       u8p7k: // global
           Sp = Sp + 8;
           call _s8opg() args: 0, res: 0, upd: 0;
       u8p7l: // global
           Sp = Sp + 72;
           call _c8p6E() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8p4p_info" {
     block_c8p4p_info:
         const _c8p4p;
         const 14216;
         const 30;
 },
 _c8p4G() //  [R1]
         { []
         }
     {offset
       c8p4G: // global
           if (R1 & 7 == 1) goto u8p7h; else goto c8p4Z;
       u8p7h: // global
           Sp = Sp + 72;
           call _c8p6E() args: 0, res: 0, upd: 0;
       c8p4Z: // global
           I64[Sp] = block_c8p4S_info;
           _s8ops::P64 = P64[R1 + 6];
           R1 = P64[Sp + 64];
           P64[Sp + 64] = _s8ops::P64;
           if (R1 & 7 != 0) goto u8p7H; else goto c8p4T;
       u8p7H: // global
           call _c8p4S(R1) args: 0, res: 0, upd: 0;
       c8p4T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8p4G_info" {
     block_c8p4G_info:
         const _c8p4G;
         const 6024;
         const 30;
 },
 _c8p4S() //  [R1]
         { []
         }
     {offset
       c8p4S: // global
           I64[Sp] = block_c8p4X_info;
           _s8opu::I64 = I64[R1 + 7];
           R1 = P64[Sp + 64];
           I64[Sp + 64] = _s8opu::I64;
           if (R1 & 7 != 0) goto u8p7J; else goto c8p51;
       u8p7J: // global
           call _c8p4X(R1) args: 0, res: 0, upd: 0;
       c8p51: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8p4S_info" {
     block_c8p4S_info:
         const _c8p4S;
         const 6024;
         const 30;
 },
 _c8p4X() //  [R1]
         { []
         }
     {offset
       c8p4X: // global
           if (I64[Sp + 64] == I64[R1 + 7]) goto u8p7i; else goto u8p7j;
       u8p7i: // global
           Sp = Sp + 8;
           call _s8opg() args: 0, res: 0, upd: 0;
       u8p7j: // global
           Sp = Sp + 72;
           call _c8p6E() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8p4X_info" {
     block_c8p4X_info:
         const _c8p4X;
         const 14216;
         const 30;
 },
 _s8opg() //  []
         { []
         }
     {offset
       s8opg: // global
           I64[Sp - 8] = block_c8p3J_info;
           R1 = P64[Sp + 40];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8p7Y; else goto c8p3L;
       u8p7Y: // global
           call _c8p3J(R1) args: 0, res: 0, upd: 0;
       c8p3L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8p3J() //  [R1]
         { []
         }
     {offset
       c8p3J: // global
           _s8op7::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8p3S; else goto c8p48;
       c8p3S: // global
           I64[Sp + 64] = block_c8p3P_info;
           R1 = _s8op7::P64;
           Sp = Sp + 64;
           if (R1 & 7 != 0) goto u8p7B; else goto c8p3T;
       u8p7B: // global
           call _c8p3P(R1) args: 0, res: 0, upd: 0;
       c8p3T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8p48: // global
           I64[Sp + 56] = block_c8p46_info;
           _s8opk::P64 = P64[R1 + 6];
           R1 = _s8op7::P64;
           P64[Sp + 64] = _s8opk::P64;
           Sp = Sp + 56;
           if (R1 & 7 != 0) goto u8p7C; else goto c8p49;
       u8p7C: // global
           call _c8p46(R1) args: 0, res: 0, upd: 0;
       c8p49: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8p3J_info" {
     block_c8p3J_info:
         const _c8p3J;
         const 16264;
         const 30;
 },
 _c8p3P() //  [R1]
         { []
         }
     {offset
       c8p3P: // global
           if (R1 & 7 == 1) goto c8p3Z; else goto u8p7n;
       c8p3Z: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u8p7n: // global
           Sp = Sp + 8;
           call _c8p6E() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8p3P_info" {
     block_c8p3P_info:
         const _c8p3P;
         const 0;
         const 30;
 },
 _c8p46() //  [R1]
         { []
         }
     {offset
       c8p46: // global
           if (R1 & 7 == 1) goto u8p7m; else goto c8p4j;
       u8p7m: // global
           Sp = Sp + 16;
           call _c8p6E() args: 0, res: 0, upd: 0;
       c8p4j: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8p46_info" {
     block_c8p46_info:
         const _c8p46;
         const 1;
         const 30;
 },
 _c8p6E() //  []
         { []
         }
     {offset
       c8p6E: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.083938346 UTC

[section ""data" . GHC.IO.Exception.$fEqIOException_$c/=_closure" {
     GHC.IO.Exception.$fEqIOException_$c/=_closure:
         const GHC.IO.Exception.$fEqIOException_$c/=_info;
 },
 GHC.IO.Exception.$fEqIOException_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8paA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8paB; else goto c8paC;
       c8paB: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fEqIOException_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8paC: // global
           I64[Sp - 8] = block_c8pau_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Exception.$fEqIOException_$c==_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fEqIOException_$c/=_info" {
     GHC.IO.Exception.$fEqIOException_$c/=_info:
         const GHC.IO.Exception.$fEqIOException_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8pau() //  [R1]
         { []
         }
     {offset
       c8pau: // global
           if (R1 & 7 == 1) goto c8pax; else goto c8pay;
       c8pax: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8pay: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pau_info" {
     block_c8pau_info:
         const _c8pau;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.08931272 UTC

[section ""data" . GHC.IO.Exception.$fEqIOException_closure" {
     GHC.IO.Exception.$fEqIOException_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Exception.$fEqIOException_$c==_closure+2;
         const GHC.IO.Exception.$fEqIOException_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.091696655 UTC

[section ""data" . GHC.IO.Exception.$fExceptionIOException1_closure" {
     GHC.IO.Exception.$fExceptionIOException1_closure:
         const GHC.IO.Exception.$fExceptionIOException1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionIOException1_entry() //  [R1]
         { []
         }
     {offset
       c8pb5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8pb6; else goto c8pb7;
       c8pb6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8pb7: // global
           (_c8pb2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8pb2::I64 == 0) goto c8pb4; else goto c8pb3;
       c8pb4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8pb3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8pb2::I64;
           R2 = GHC.IO.Exception.$fExceptionArrayException3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionIOException1_info" {
     GHC.IO.Exception.$fExceptionIOException1_info:
         const GHC.IO.Exception.$fExceptionIOException1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.095870389 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionIOException3_bytes" {
     GHC.IO.Exception.$fExceptionIOException3_bytes:
         I8[] [32,40]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.097490797 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionIOException2_bytes" {
     GHC.IO.Exception.$fExceptionIOException2_bytes:
         I8[] [41]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.108090151 UTC

[section ""data" . GHC.IO.Exception.$w$cshowsPrec3_closure" {
     GHC.IO.Exception.$w$cshowsPrec3_closure:
         const GHC.IO.Exception.$w$cshowsPrec3_info;
         const 0;
 },
 sat_s8oqc_entry() //  [R1]
         { []
         }
     {offset
       c8pbM: // global
           R3 = P64[R1 + 16];
           R2 = GHC.IO.Exception.$fExceptionIOException2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8oqc_info" {
     sat_s8oqc_info:
         const sat_s8oqc_entry;
         const 1;
         const 16;
 },
 sat_s8oqd_entry() //  [R1]
         { []
         }
     {offset
       c8pbP: // global
           _s8oqd::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8pbQ; else goto c8pbR;
       c8pbR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8pbT; else goto c8pbS;
       c8pbT: // global
           HpAlloc = 24;
           goto c8pbQ;
       c8pbQ: // global
           R1 = _s8oqd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8pbS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8oqd::P64;
           _s8oq6::P64 = P64[_s8oqd::P64 + 16];
           _s8oq9::P64 = P64[_s8oqd::P64 + 24];
           I64[Hp - 16] = sat_s8oqc_info;
           P64[Hp] = _s8oq6::P64;
           R3 = Hp - 16;
           R2 = _s8oq9::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8oqd_info" {
     sat_s8oqd_info:
         const sat_s8oqd_entry;
         const 2;
         const 18;
 },
 sat_s8oqe_entry() //  [R1]
         { []
         }
     {offset
       c8pbY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8pbZ; else goto c8pc0;
       c8pbZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8pc0: // global
           I64[Sp - 16] = block_c8pby_info;
           _s8oq6::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 8] = _s8oq6::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8pc6; else goto c8pbz;
       u8pc6: // global
           call _c8pby(R1) args: 0, res: 0, upd: 0;
       c8pbz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8oqe_info" {
     sat_s8oqe_info:
         const sat_s8oqe_entry;
         const 2;
         const 18;
 },
 _c8pby() //  [R1]
         { []
         }
     {offset
       c8pby: // global
           _s8oq6::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8pbV; else goto c8pbW;
       c8pbV: // global
           R1 = _s8oq6::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8pbW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8pc5; else goto c8pc4;
       c8pc5: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8pc4: // global
           I64[Hp - 24] = sat_s8oqd_info;
           P64[Hp - 8] = _s8oq6::P64;
           P64[Hp] = R1;
           R3 = Hp - 24;
           R2 = GHC.IO.Exception.$fExceptionIOException3_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pby_info" {
     block_c8pby_info:
         const _c8pby;
         const 1;
         const 30;
 },
 karg_s8oq8_entry() //  [R1]
         { []
         }
     {offset
       c8pc7: // global
           _s8oq8::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8pc8; else goto c8pc9;
       c8pc9: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8pcb; else goto c8pca;
       c8pcb: // global
           HpAlloc = 32;
           goto c8pc8;
       c8pc8: // global
           R1 = _s8oq8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8pca: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8oq8::P64;
           _s8oq2::P64 = P64[_s8oq8::P64 + 16];
           _s8oq4::P64 = P64[_s8oq8::P64 + 24];
           _s8oq6::P64 = P64[_s8oq8::P64 + 32];
           I64[Hp - 24] = sat_s8oqe_info;
           P64[Hp - 8] = _s8oq4::P64;
           P64[Hp] = _s8oq6::P64;
           R3 = Hp - 24;
           R2 = _s8oq2::P64;
           Sp = Sp - 16;
           call GHC.IO.Exception.$w$cshowsPrec4_entry(R3,
                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . karg_s8oq8_info" {
     karg_s8oq8_info:
         const karg_s8oq8_entry;
         const 3;
         const 4294967311;
         const S8oB9_srt+208;
 },
 sat_s8oqi_entry() //  [R1]
         { []
         }
     {offset
       c8pcm: // global
           R3 = P64[R1 + 16];
           R2 = GHC.IO.Exception.$fExceptionArrayException3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8oqi_info" {
     sat_s8oqi_info:
         const sat_s8oqi_entry;
         const 1;
         const 16;
 },
 eta_s8oq7_entry() //  [R1]
         { []
         }
     {offset
       c8pct: // global
           _s8oq7::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c8pcu; else goto c8pcv;
       c8pcv: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8pcx; else goto c8pcw;
       c8pcx: // global
           HpAlloc = 40;
           goto c8pcu;
       c8pcu: // global
           R1 = _s8oq7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8pcw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8oq7::P64;
           _s8oq2::P64 = P64[_s8oq7::P64 + 16];
           _s8oq3::P64 = P64[_s8oq7::P64 + 24];
           _s8oq4::P64 = P64[_s8oq7::P64 + 32];
           _s8oq6::P64 = P64[_s8oq7::P64 + 40];
           I64[Hp - 32] = karg_s8oq8_info;
           P64[Hp - 16] = _s8oq2::P64;
           P64[Hp - 8] = _s8oq4::P64;
           P64[Hp] = _s8oq6::P64;
           I64[Sp - 32] = block_c8pcc_info;
           R1 = _s8oq3::P64;
           P64[Sp - 24] = Hp - 32;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u8pcD; else goto c8pcd;
       u8pcD: // global
           call _c8pcc(R1) args: 0, res: 0, upd: 0;
       c8pcd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . eta_s8oq7_info" {
     eta_s8oq7_info:
         const eta_s8oq7_entry;
         const 4;
         const 4294967311;
         const S8oB9_srt+208;
 },
 _c8pcc() //  [R1]
         { []
         }
     {offset
       c8pcc: // global
           _c8pbq::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8pcq; else goto c8pcr;
       c8pcq: // global
           R1 = _c8pbq::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c8pcr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8pcC; else goto c8pcB;
       c8pcC: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c8pcB: // global
           I64[Hp - 16] = sat_s8oqi_info;
           P64[Hp] = _c8pbq::P64;
           R3 = Hp - 16;
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8pcc_info" {
     block_c8pcc_info:
         const _c8pcc;
         const 1;
         const 30;
 },
 sat_s8oqp_entry() //  [R1]
         { []
         }
     {offset
       c8pd6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8pd7; else goto c8pd8;
       c8pd7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8pd8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.IO.Exception.$fExceptionIOException1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8oqp_info" {
     sat_s8oqp_info:
         const sat_s8oqp_entry;
         const 1;
         const 4294967312;
         const S8oB9_srt+368;
 },
 sat_s8oqq_entry() //  [R1]
         { []
         }
     {offset
       c8pd9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8pdd; else goto c8pdc;
       c8pdd: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8pdc: // global
           _s8oq7::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_s8oqp_info;
           P64[Hp] = _s8oq7::P64;
           R3 = Hp - 16;
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode5_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8oqq_info" {
     sat_s8oqq_info:
         const sat_s8oqq_entry;
         const 1;
         const 4294967312;
         const S8oB9_srt+368;
 },
 sat_s8oqr_entry() //  [R1]
         { []
         }
     {offset
       c8pde: // global
           _s8oqr::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8pdf; else goto c8pdg;
       c8pdg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8pdi; else goto c8pdh;
       c8pdi: // global
           HpAlloc = 24;
           goto c8pdf;
       c8pdf: // global
           R1 = _s8oqr::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8pdh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8oqr::P64;
           _s8oq7::P64 = P64[_s8oqr::P64 + 16];
           _s8oqn::P64 = P64[_s8oqr::P64 + 24];
           I64[Hp - 16] = sat_s8oqq_info;
           P64[Hp] = _s8oq7::P64;
           R3 = Hp - 16;
           R2 = _s8oqn::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8oqr_info" {
     sat_s8oqr_info:
         const sat_s8oqr_entry;
         const 2;
         const 4294967314;
         const S8oB9_srt+368;
 },
 sat_s8oqv_entry() //  [R1]
         { []
         }
     {offset
       c8pdx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8pdy; else goto c8pdz;
       c8pdy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8pdz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.IO.Exception.$fExceptionIOException1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8oqv_info" {
     sat_s8oqv_info:
         const sat_s8oqv_entry;
         const 1;
         const 4294967312;
         const S8oB9_srt+368;
 },
 sat_s8oqw_entry() //  [R1]
         { []
         }
     {offset
       c8pdA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8pdE; else goto c8pdD;
       c8pdE: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8pdD: // global
           _s8oq7::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_s8oqv_info;
           P64[Hp] = _s8oq7::P64;
           R3 = Hp - 16;
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode5_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8oqw_info" {
     sat_s8oqw_info:
         const sat_s8oqw_entry;
         const 1;
         const 4294967312;
         const S8oB9_srt+368;
 },
 sat_s8oqx_entry() //  [R1]
         { []
         }
     {offset
       c8pdF: // global
           _s8oqx::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8pdG; else goto c8pdH;
       c8pdH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8pdJ; else goto c8pdI;
       c8pdJ: // global
           HpAlloc = 24;
           goto c8pdG;
       c8pdG: // global
           R1 = _s8oqx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8pdI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8oqx::P64;
           _s8oq7::P64 = P64[_s8oqx::P64 + 16];
           _s8oqs::P64 = P64[_s8oqx::P64 + 24];
           I64[Hp - 16] = sat_s8oqw_info;
           P64[Hp] = _s8oq7::P64;
           R3 = Hp - 16;
           R2 = _s8oqs::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8oqx_info" {
     sat_s8oqx_info:
         const sat_s8oqx_entry;
         const 2;
         const 4294967314;
         const S8oB9_srt+368;
 },
 sat_s8oqz_entry() //  [R1]
         { []
         }
     {offset
       c8pdQ: // global
           R3 = P64[R1 + 16];
           R2 = GHC.IO.Exception.$fExceptionArrayException3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8oqz_info" {
     sat_s8oqz_info:
         const sat_s8oqz_entry;
         const 1;
         const 16;
 },
 GHC.IO.Exception.$w$cshowsPrec3_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c8pdX: // global
           _s8oq5::P64 = R6;
           _s8oq4::P64 = R5;
           _s8oq3::P64 = R4;
           _s8oq2::P64 = R3;
           _s8oq1::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c8pdY; else goto c8pdZ;
       c8pdZ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8pe1; else goto c8pe0;
       c8pe1: // global
           HpAlloc = 48;
           goto c8pdY;
       c8pdY: // global
           R6 = _s8oq5::P64;
           R5 = _s8oq4::P64;
           R4 = _s8oq3::P64;
           R3 = _s8oq2::P64;
           R2 = _s8oq1::P64;
           R1 = GHC.IO.Exception.$w$cshowsPrec3_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c8pe0: // global
           I64[Hp - 40] = eta_s8oq7_info;
           P64[Hp - 24] = _s8oq2::P64;
           P64[Hp - 16] = _s8oq3::P64;
           P64[Hp - 8] = _s8oq4::P64;
           P64[Hp] = P64[Sp];
           I64[Sp - 16] = block_c8pcE_info;
           R1 = _s8oq5::P64;
           P64[Sp - 8] = _s8oq1::P64;
           P64[Sp] = Hp - 40;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8pep; else goto c8pcF;
       u8pep: // global
           call _c8pcE(R1) args: 0, res: 0, upd: 0;
       c8pcF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$w$cshowsPrec3_info" {
     GHC.IO.Exception.$w$cshowsPrec3_info:
         const GHC.IO.Exception.$w$cshowsPrec3_entry;
         const 0;
         const 13510803177078798;
         const 25769803802;
         const S8oB9_srt+208;
 },
 _c8pcE() //  [R1]
         { []
         }
     {offset
       c8pcE: // global
           if (R1 & 7 == 1) goto c8pdU; else goto c8pdV;
       c8pdU: // global
           _s8oq1::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8pcJ_info;
           R1 = _s8oq1::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8pen; else goto c8pcK;
       u8pen: // global
           call _c8pcJ(R1) args: 0, res: 0, upd: 0;
       c8pcK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8pdV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8pek; else goto c8pej;
       c8pek: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8pej: // global
           _s8oqy::P64 = P64[R1 + 6];
           I64[Hp - 16] = sat_s8oqz_info;
           P64[Hp] = P64[Sp + 16];
           R3 = Hp - 16;
           R2 = _s8oqy::P64;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pcE_info" {
     block_c8pcE_info:
         const _c8pcE;
         const 2;
         const 4294967326;
         const S8oB9_srt+368;
 },
 _c8pcJ() //  [R1]
         { []
         }
     {offset
       c8pcJ: // global
           if (R1 & 7 == 1) goto c8pe6; else goto c8pe8;
       c8pe6: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8pe8: // global
           I64[Sp] = block_c8pcP_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u8peo; else goto c8pcQ;
       u8peo: // global
           call _c8pcP(R1) args: 0, res: 0, upd: 0;
       c8pcQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pcJ_info" {
     block_c8pcJ_info:
         const _c8pcJ;
         const 1;
         const 4294967326;
         const S8oB9_srt+368;
 },
 _c8pcP() //  [R1]
         { []
         }
     {offset
       c8pcP: // global
           _c8pbm::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8pea; else goto c8pee;
       c8pea: // global
           Hp = Hp + 32;
           _s8oqm::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c8peh; else goto c8pec;
       c8pec: // global
           _s8oqn::P64 = P64[_s8oqm::P64 + 7];
           I64[Hp - 24] = sat_s8oqr_info;
           P64[Hp - 8] = _c8pbm::P64;
           P64[Hp] = _s8oqn::P64;
           R3 = Hp - 24;
           R2 = GHC.IO.Handle.Types.showHandle1_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c8pee: // global
           Hp = Hp + 32;
           _s8oqm::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c8peh; else goto c8peg;
       c8peh: // global
           HpAlloc = 32;
           R1 = _s8oqm::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8peg: // global
           _s8oqs::P64 = P64[_s8oqm::P64 + 6];
           I64[Hp - 24] = sat_s8oqx_info;
           P64[Hp - 8] = _c8pbm::P64;
           P64[Hp] = _s8oqs::P64;
           R3 = Hp - 24;
           R2 = GHC.IO.Handle.Types.showHandle1_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pcP_info" {
     block_c8pcP_info:
         const _c8pcP;
         const 1;
         const 4294967326;
         const S8oB9_srt+368;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.145092976 UTC

[section ""data" . GHC.IO.Exception.$fExceptionIOException_$cshowsPrec_closure" {
     GHC.IO.Exception.$fExceptionIOException_$cshowsPrec_closure:
         const GHC.IO.Exception.$fExceptionIOException_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionIOException_$cshowsPrec_entry() //  [R2,
                                                                  R3, R4]
         { []
         }
     {offset
       c8pgq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8pgr; else goto c8pgs;
       c8pgr: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionIOException_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8pgs: // global
           I64[Sp - 16] = block_c8pgn_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8pgw; else goto c8pgo;
       u8pgw: // global
           call _c8pgn(R1) args: 0, res: 0, upd: 0;
       c8pgo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionIOException_$cshowsPrec_info" {
     GHC.IO.Exception.$fExceptionIOException_$cshowsPrec_info:
         const GHC.IO.Exception.$fExceptionIOException_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S8oB9_srt+376;
 },
 _c8pgn() //  [R1]
         { []
         }
     {offset
       c8pgn: // global
           R6 = P64[R1 + 47];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.IO.Exception.$w$cshowsPrec3_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pgn_info" {
     block_c8pgn_info:
         const _c8pgn;
         const 1;
         const 4294967326;
         const S8oB9_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.151149688 UTC

[section ""data" . GHC.IO.Exception.$fExceptionIOException_$cshow_closure" {
     GHC.IO.Exception.$fExceptionIOException_$cshow_closure:
         const GHC.IO.Exception.$fExceptionIOException_$cshow_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionIOException_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c8pgO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8pgP; else goto c8pgQ;
       c8pgP: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionIOException_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8pgQ: // global
           I64[Sp - 8] = block_c8pgL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8pgU; else goto c8pgM;
       u8pgU: // global
           call _c8pgL(R1) args: 0, res: 0, upd: 0;
       c8pgM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionIOException_$cshow_info" {
     GHC.IO.Exception.$fExceptionIOException_$cshow_info:
         const GHC.IO.Exception.$fExceptionIOException_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S8oB9_srt+376;
 },
 _c8pgL() //  [R1]
         { []
         }
     {offset
       c8pgL: // global
           R6 = P64[R1 + 47];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           P64[Sp] = GHC.Types.[]_closure+1;
           call GHC.IO.Exception.$w$cshowsPrec3_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pgL_info" {
     block_c8pgL_info:
         const _c8pgL;
         const 0;
         const 4294967326;
         const S8oB9_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.157278646 UTC

[section ""data" . GHC.IO.Exception.$fShowIOException1_closure" {
     GHC.IO.Exception.$fShowIOException1_closure:
         const GHC.IO.Exception.$fShowIOException1_info;
         const 0;
 },
 GHC.IO.Exception.$fShowIOException1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8phe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8phf; else goto c8phg;
       c8phf: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fShowIOException1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8phg: // global
           I64[Sp - 16] = block_c8phb_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8phk; else goto c8phc;
       u8phk: // global
           call _c8phb(R1) args: 0, res: 0, upd: 0;
       c8phc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowIOException1_info" {
     GHC.IO.Exception.$fShowIOException1_info:
         const GHC.IO.Exception.$fShowIOException1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S8oB9_srt+376;
 },
 _c8phb() //  [R1]
         { []
         }
     {offset
       c8phb: // global
           R6 = P64[R1 + 47];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.IO.Exception.$w$cshowsPrec3_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8phb_info" {
     block_c8phb_info:
         const _c8phb;
         const 1;
         const 4294967326;
         const S8oB9_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.162460455 UTC

[section ""data" . GHC.IO.Exception.$fShowIOException_$cshowList_closure" {
     GHC.IO.Exception.$fShowIOException_$cshowList_closure:
         const GHC.IO.Exception.$fShowIOException_$cshowList_info;
         const 0;
 },
 GHC.IO.Exception.$fShowIOException_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c8phz: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Exception.$fShowIOException1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowIOException_$cshowList_info" {
     GHC.IO.Exception.$fShowIOException_$cshowList_info:
         const GHC.IO.Exception.$fShowIOException_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S8oB9_srt+400;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.165606486 UTC

[section ""data" . GHC.IO.Exception.$fShowIOException_closure" {
     GHC.IO.Exception.$fShowIOException_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Exception.$fExceptionIOException_$cshowsPrec_closure+3;
         const GHC.IO.Exception.$fExceptionIOException_$cshow_closure+1;
         const GHC.IO.Exception.$fShowIOException_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.168477423 UTC

[section ""data" . GHC.IO.Exception.$fGenericExitCode_$cto_closure" {
     GHC.IO.Exception.$fGenericExitCode_$cto_closure:
         const GHC.IO.Exception.$fGenericExitCode_$cto_info;
 },
 GHC.IO.Exception.$fGenericExitCode_$cto_entry() //  [R2]
         { []
         }
     {offset
       c8phR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8phS; else goto c8phT;
       c8phS: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fGenericExitCode_$cto_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8phT: // global
           I64[Sp - 8] = block_c8phL_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fGenericExitCode_$cto_info" {
     GHC.IO.Exception.$fGenericExitCode_$cto_info:
         const GHC.IO.Exception.$fGenericExitCode_$cto_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8phL() //  [R1]
         { []
         }
     {offset
       c8phL: // global
           if (R1 & 7 == 1) goto c8phO; else goto c8phP;
       c8phO: // global
           I64[Sp] = block_c8phW_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto u8pi9; else goto c8phY;
       u8pi9: // global
           call _c8phW() args: 0, res: 0, upd: 0;
       c8phY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8phP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8pi8; else goto c8pi7;
       c8pi8: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8pi7: // global
           _s8or7::P64 = P64[R1 + 6];
           I64[Hp - 8] = GHC.IO.Exception.ExitFailure_con_info;
           P64[Hp] = _s8or7::P64;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8phL_info" {
     block_c8phL_info:
         const _c8phL;
         const 0;
         const 30;
 },
 _c8phW() //  []
         { []
         }
     {offset
       c8phW: // global
           R1 = GHC.IO.Exception.ExitSuccess_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8phW_info" {
     block_c8phW_info:
         const _c8phW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.175715271 UTC

[section ""data" . GHC.IO.Exception.$fGenericExitCode2_closure" {
     GHC.IO.Exception.$fGenericExitCode2_closure:
         const GHC.Generics.L1_con_info;
         const GHC.Generics.U1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.178510636 UTC

[section ""data" . GHC.IO.Exception.$fGenericExitCode1_closure" {
     GHC.IO.Exception.$fGenericExitCode1_closure:
         const GHC.IO.Exception.$fGenericExitCode1_info;
 },
 GHC.IO.Exception.$fGenericExitCode1_entry() //  [R2]
         { []
         }
     {offset
       c8piF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8piG; else goto c8piH;
       c8piG: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fGenericExitCode1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8piH: // global
           I64[Sp - 8] = block_c8piy_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8piR; else goto c8piz;
       u8piR: // global
           call _c8piy(R1) args: 0, res: 0, upd: 0;
       c8piz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fGenericExitCode1_info" {
     GHC.IO.Exception.$fGenericExitCode1_info:
         const GHC.IO.Exception.$fGenericExitCode1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8piy() //  [R1]
         { []
         }
     {offset
       c8piy: // global
           if (R1 & 7 == 1) goto c8piC; else goto c8piD;
       c8piC: // global
           R1 = GHC.IO.Exception.$fGenericExitCode2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8piD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8piQ; else goto c8piP;
       c8piQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8piP: // global
           _s8ora::P64 = P64[R1 + 6];
           I64[Hp - 8] = GHC.Generics.R1_con_info;
           P64[Hp] = _s8ora::P64;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8piy_info" {
     block_c8piy_info:
         const _c8piy;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.184221753 UTC

[section ""data" . GHC.IO.Exception.$fGenericExitCode_closure" {
     GHC.IO.Exception.$fGenericExitCode_closure:
         const GHC.Generics.C:Generic_con_info;
         const GHC.IO.Exception.$fGenericExitCode1_closure+1;
         const GHC.IO.Exception.$fGenericExitCode_$cto_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.185958044 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionExitCode3_bytes" {
     GHC.IO.Exception.$fExceptionExitCode3_bytes:
         I8[] [69,120,105,116,83,117,99,99,101,115,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.188257739 UTC

[section ""data" . GHC.IO.Exception.$fExceptionExitCode2_closure" {
     GHC.IO.Exception.$fExceptionExitCode2_closure:
         const GHC.IO.Exception.$fExceptionExitCode2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionExitCode2_entry() //  [R1]
         { []
         }
     {offset
       c8pjf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8pjg; else goto c8pjh;
       c8pjg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8pjh: // global
           (_c8pjc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8pjc::I64 == 0) goto c8pje; else goto c8pjd;
       c8pje: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8pjd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8pjc::I64;
           R2 = GHC.IO.Exception.$fExceptionExitCode3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionExitCode2_info" {
     GHC.IO.Exception.$fExceptionExitCode2_info:
         const GHC.IO.Exception.$fExceptionExitCode2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.19174328 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionExitCode1_bytes" {
     GHC.IO.Exception.$fExceptionExitCode1_bytes:
         I8[] [69,120,105,116,70,97,105,108,117,114,101,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.19862062 UTC

[section ""data" . GHC.IO.Exception.$fShowExitCode_$cshowsPrec_closure" {
     GHC.IO.Exception.$fShowExitCode_$cshowsPrec_closure:
         const GHC.IO.Exception.$fShowExitCode_$cshowsPrec_info;
         const 0;
 },
 sat_s8oro_entry() //  [R1]
         { []
         }
     {offset
       c8pjQ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8pjW; else goto c8pjX;
       c8pjW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8pjX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c8pjN_info;
           _s8ord::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s8ord::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u8pk2; else goto c8pjO;
       u8pk2: // global
           call _c8pjN(R1) args: 0, res: 0, upd: 0;
       c8pjO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8oro_info" {
     sat_s8oro_info:
         const sat_s8oro_entry;
         const 2;
         const 18;
 },
 _c8pjN() //  [R1]
         { []
         }
     {offset
       c8pjN: // global
           _s8ord::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8pjT_info;
           R4 = _s8ord::P64;
           R3 = I64[R1 + 7];
           R2 = 11;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c8pjN_info" {
     block_c8pjN_info:
         const _c8pjN;
         const 1;
         const 30;
 },
 _c8pjT() //  [R1, R2]
         { []
         }
     {offset
       c8pjT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8pk1; else goto c8pk0;
       c8pk1: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c8pk0: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8pjT_info" {
     block_c8pjT_info:
         const _c8pjT;
         const 0;
         const 30;
 },
 sat_s8orv_entry() //  [R1]
         { []
         }
     {offset
       c8pkf: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8pkm; else goto c8pkn;
       c8pkm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8pkn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c8pkc_info;
           _s8ord::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s8ord::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u8pku; else goto c8pkd;
       u8pku: // global
           call _c8pkc(R1) args: 0, res: 0, upd: 0;
       c8pkd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8orv_info" {
     sat_s8orv_info:
         const sat_s8orv_entry;
         const 2;
         const 18;
 },
 _c8pkc() //  [R1]
         { []
         }
     {offset
       c8pkc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8pkq; else goto c8pkp;
       c8pkq: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c8pkp: // global
           _s8orq::I64 = I64[R1 + 7];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c8pkj_info;
           R4 = Hp - 14;
           R3 = _s8orq::I64;
           R2 = 11;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c8pkc_info" {
     block_c8pkc_info:
         const _c8pkc;
         const 1;
         const 30;
 },
 _c8pkj() //  [R1, R2]
         { []
         }
     {offset
       c8pkj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8pkt; else goto c8pks;
       c8pkt: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c8pks: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8pkj_info" {
     block_c8pkj_info:
         const _c8pkj;
         const 0;
         const 30;
 },
 sat_s8orw_entry() //  [R1]
         { []
         }
     {offset
       c8pkv: // global
           _s8orw::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8pkw; else goto c8pkx;
       c8pkx: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8pkz; else goto c8pky;
       c8pkz: // global
           HpAlloc = 32;
           goto c8pkw;
       c8pkw: // global
           R1 = _s8orw::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8pky: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8orw::P64;
           _s8ord::P64 = P64[_s8orw::P64 + 16];
           _s8orf::P64 = P64[_s8orw::P64 + 24];
           I64[Hp - 24] = sat_s8orv_info;
           P64[Hp - 8] = _s8ord::P64;
           P64[Hp] = _s8orf::P64;
           R3 = Hp - 24;
           R2 = GHC.IO.Exception.$fExceptionExitCode1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8orw_info" {
     sat_s8orw_info:
         const sat_s8orw_entry;
         const 2;
         const 18;
 },
 GHC.IO.Exception.$fShowExitCode_$cshowsPrec_entry() //  [R2, R3,
                                                          R4]
         { []
         }
     {offset
       c8pkE: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8pkF; else goto c8pkG;
       c8pkF: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fShowExitCode_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8pkG: // global
           I64[Sp - 24] = block_c8pjv_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8pkS; else goto c8pjw;
       u8pkS: // global
           call _c8pjv(R1) args: 0, res: 0, upd: 0;
       c8pjw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowExitCode_$cshowsPrec_info" {
     GHC.IO.Exception.$fShowExitCode_$cshowsPrec_info:
         const GHC.IO.Exception.$fShowExitCode_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S8oB9_srt+408;
 },
 _c8pjv() //  [R1]
         { []
         }
     {offset
       c8pjv: // global
           if (R1 & 7 == 1) goto c8pkB; else goto c8pkC;
       c8pkB: // global
           R3 = P64[Sp + 16];
           R2 = GHC.IO.Exception.$fExceptionExitCode2_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8pkC: // global
           I64[Sp] = block_c8pjB_info;
           _s8orf::P64 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8orf::P64;
           if (R1 & 7 != 0) goto u8pkR; else goto c8pjC;
       u8pkR: // global
           call _c8pjB(R1) args: 0, res: 0, upd: 0;
       c8pjC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pjv_info" {
     block_c8pjv_info:
         const _c8pjv;
         const 2;
         const 4294967326;
         const S8oB9_srt+408;
 },
 _c8pjB() //  [R1]
         { []
         }
     {offset
       c8pjB: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c8pkM; else goto c8pkL;
       c8pkM: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8pkL: // global
           _s8ord::P64 = P64[Sp + 16];
           _s8orf::P64 = P64[Sp + 8];
           if (%MO_S_Lt_W64(I64[R1 + 7], 11)) goto c8pkO; else goto c8pkQ;
       c8pkO: // global
           I64[Hp - 48] = sat_s8oro_info;
           P64[Hp - 32] = _s8ord::P64;
           P64[Hp - 24] = _s8orf::P64;
           _c8pjJ::P64 = Hp - 48;
           Hp = Hp - 24;
           R3 = _c8pjJ::P64;
           R2 = GHC.IO.Exception.$fExceptionExitCode1_bytes;
           Sp = Sp + 24;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c8pkQ: // global
           I64[Hp - 48] = sat_s8orw_info;
           P64[Hp - 32] = _s8ord::P64;
           P64[Hp - 24] = _s8orf::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pjB_info" {
     block_c8pjB_info:
         const _c8pjB;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.221905094 UTC

[section ""data" . GHC.IO.Exception.$fExceptionExitCode_$cshow_closure" {
     GHC.IO.Exception.$fExceptionExitCode_$cshow_closure:
         const GHC.IO.Exception.$fExceptionExitCode_$cshow_info;
         const 0;
 },
 sat_s8orF_entry() //  [R1]
         { []
         }
     {offset
       c8pmc: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8pmi; else goto c8pmj;
       c8pmi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8pmj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c8pm9_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8pmo; else goto c8pma;
       u8pmo: // global
           call _c8pm9(R1) args: 0, res: 0, upd: 0;
       c8pma: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8orF_info" {
     sat_s8orF_info:
         const sat_s8orF_entry;
         const 1;
         const 16;
 },
 _c8pm9() //  [R1]
         { []
         }
     {offset
       c8pm9: // global
           I64[Sp] = block_c8pmf_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 7];
           R2 = 11;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c8pm9_info" {
     block_c8pm9_info:
         const _c8pm9;
         const 0;
         const 30;
 },
 _c8pmf() //  [R1, R2]
         { []
         }
     {offset
       c8pmf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8pmn; else goto c8pmm;
       c8pmn: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c8pmm: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8pmf_info" {
     block_c8pmf_info:
         const _c8pmf;
         const 0;
         const 30;
 },
 GHC.IO.Exception.$fExceptionExitCode_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c8pmt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8pmu; else goto c8pmv;
       c8pmu: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionExitCode_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8pmv: // global
           I64[Sp - 8] = block_c8plZ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8pmB; else goto c8pm0;
       u8pmB: // global
           call _c8plZ(R1) args: 0, res: 0, upd: 0;
       c8pm0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionExitCode_$cshow_info" {
     GHC.IO.Exception.$fExceptionExitCode_$cshow_info:
         const GHC.IO.Exception.$fExceptionExitCode_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S8oB9_srt+408;
 },
 _c8plZ() //  [R1]
         { []
         }
     {offset
       c8plZ: // global
           if (R1 & 7 == 1) goto c8pmq; else goto c8pmr;
       c8pmq: // global
           R1 = GHC.IO.Exception.$fExceptionExitCode2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8pmr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8pmA; else goto c8pmz;
       c8pmA: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8pmz: // global
           _s8orz::P64 = P64[R1 + 6];
           I64[Hp - 16] = sat_s8orF_info;
           P64[Hp] = _s8orz::P64;
           R3 = Hp - 16;
           R2 = GHC.IO.Exception.$fExceptionExitCode1_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8plZ_info" {
     block_c8plZ_info:
         const _c8plZ;
         const 0;
         const 4294967326;
         const S8oB9_srt+408;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.232222161 UTC

[section ""data" . GHC.IO.Exception.$fShowExitCode1_closure" {
     GHC.IO.Exception.$fShowExitCode1_closure:
         const GHC.IO.Exception.$fShowExitCode1_info;
         const 0;
 },
 GHC.IO.Exception.$fShowExitCode1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8pnb: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Exception.$fExceptionArrayException1_closure+1;
           call GHC.IO.Exception.$fShowExitCode_$cshowsPrec_entry(R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowExitCode1_info" {
     GHC.IO.Exception.$fShowExitCode1_info:
         const GHC.IO.Exception.$fShowExitCode1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S8oB9_srt+416;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.235703445 UTC

[section ""data" . GHC.IO.Exception.$fShowExitCode_$cshowList_closure" {
     GHC.IO.Exception.$fShowExitCode_$cshowList_closure:
         const GHC.IO.Exception.$fShowExitCode_$cshowList_info;
         const 0;
 },
 GHC.IO.Exception.$fShowExitCode_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c8pnm: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Exception.$fShowExitCode1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fShowExitCode_$cshowList_info" {
     GHC.IO.Exception.$fShowExitCode_$cshowList_info:
         const GHC.IO.Exception.$fShowExitCode_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S8oB9_srt+432;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.239109537 UTC

[section ""data" . GHC.IO.Exception.$fShowExitCode_closure" {
     GHC.IO.Exception.$fShowExitCode_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Exception.$fShowExitCode_$cshowsPrec_closure+3;
         const GHC.IO.Exception.$fExceptionExitCode_$cshow_closure+1;
         const GHC.IO.Exception.$fShowExitCode_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.240871584 UTC

[section ""data" . GHC.IO.Exception.$fReadExitCode_lexeme1_closure" {
     GHC.IO.Exception.$fReadExitCode_lexeme1_closure:
         const Text.Read.Lex.Ident_con_info;
         const GHC.IO.Exception.$fExceptionExitCode2_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.242594113 UTC

[section ""cstring" . GHC.IO.Exception.$fReadExitCode5_bytes" {
     GHC.IO.Exception.$fReadExitCode5_bytes:
         I8[] [69,120,105,116,70,97,105,108,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.244842355 UTC

[section ""data" . GHC.IO.Exception.$fReadExitCode4_closure" {
     GHC.IO.Exception.$fReadExitCode4_closure:
         const GHC.IO.Exception.$fReadExitCode4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fReadExitCode4_entry() //  [R1]
         { []
         }
     {offset
       c8pnC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8pnD; else goto c8pnE;
       c8pnD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8pnE: // global
           (_c8pnz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8pnz::I64 == 0) goto c8pnB; else goto c8pnA;
       c8pnB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8pnA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8pnz::I64;
           R2 = GHC.IO.Exception.$fReadExitCode5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fReadExitCode4_info" {
     GHC.IO.Exception.$fReadExitCode4_info:
         const GHC.IO.Exception.$fReadExitCode4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.249076752 UTC

[section ""data" . GHC.IO.Exception.$fReadExitCode_lexeme_closure" {
     GHC.IO.Exception.$fReadExitCode_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const GHC.IO.Exception.$fReadExitCode4_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.251140644 UTC

[section ""data" . GHC.IO.Exception.$fReadExitCode3_closure" {
     GHC.IO.Exception.$fReadExitCode3_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.256459393 UTC

[section ""data" . GHC.IO.Exception.$fReadExitCode2_closure" {
     GHC.IO.Exception.$fReadExitCode2_closure:
         const GHC.IO.Exception.$fReadExitCode2_info;
         const 0;
 },
 sat_s8orL_entry() //  [R1]
         { []
         }
     {offset
       c8pnY: // global
           R2 = GHC.IO.Exception.ExitSuccess_closure+1;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8orL_info" {
     sat_s8orL_info:
         const sat_s8orL_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s8orV_entry() //  [R1, R2]
         { []
         }
     {offset
       c8por: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8pov; else goto c8pou;
       c8pov: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8pou: // global
           _s8orJ::P64 = P64[R1 + 7];
           I64[Hp - 8] = GHC.IO.Exception.ExitFailure_con_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           R1 = _s8orJ::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8orV_info" {
     sat_s8orV_info:
         const sat_s8orV_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s8orW_entry() //  [R1, R2]
         { []
         }
     {offset
       c8pow: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8poA; else goto c8poz;
       c8poA: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8poz: // global
           _s8orJ::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_s8orV_info;
           P64[Hp] = _s8orJ::P64;
           R4 = Hp - 7;
           R3 = GHC.IO.Exception.$fReadExitCode3_closure+1;
           R2 = GHC.Read.$fReadInt2_closure+1;
           call GHC.Read.$fReadInt_$sreadNumber_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8orW_info" {
     sat_s8orW_info:
         const sat_s8orW_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const S8oB9_srt+440;
 },
 sat_s8orZ_entry() //  [R1]
         { []
         }
     {offset
       c8poB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8poC; else goto c8poD;
       c8poC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8poD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c8po7_info;
           _s8orJ::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s8orJ::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u8poQ; else goto c8po8;
       u8poQ: // global
           call _c8po7(R1) args: 0, res: 0, upd: 0;
       c8po8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8orZ_info" {
     sat_s8orZ_info:
         const sat_s8orZ_entry;
         const 2;
         const 64424509458;
         const S8oB9_srt+440;
 },
 _c8po7() //  [R1]
         { []
         }
     {offset
       c8po7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8poG; else goto c8poF;
       c8poG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c8poF: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 10)) goto c8poI; else goto c8poM;
       c8poI: // global
           Hp = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c8poM: // global
           I64[Hp - 8] = sat_s8orW_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c8poJ_info;
           R3 = Hp - 7;
           R2 = GHC.IO.Exception.$fReadExitCode_lexeme_closure+4;
           Sp = Sp + 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c8po7_info" {
     block_c8po7_info:
         const _c8po7;
         const 1;
         const 64424509470;
         const S8oB9_srt+440;
 },
 _c8poJ() //  [R1]
         { []
         }
     {offset
       c8poJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8poP; else goto c8poO;
       c8poP: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c8poO: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8poJ_info" {
     block_c8poJ_info:
         const _c8poJ;
         const 0;
         const 30;
 },
 GHC.IO.Exception.$fReadExitCode2_entry() //  [R2, R3]
         { []
         }
     {offset
       c8poS: // global
           _s8orJ::P64 = R3;
           _s8orI::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c8poT; else goto c8poU;
       c8poU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8poW; else goto c8poV;
       c8poW: // global
           HpAlloc = 16;
           goto c8poT;
       c8poT: // global
           R3 = _s8orJ::P64;
           R2 = _s8orI::P64;
           R1 = GHC.IO.Exception.$fReadExitCode2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8poV: // global
           I64[Hp - 8] = sat_s8orL_info;
           P64[Hp] = _s8orJ::P64;
           I64[Sp - 24] = block_c8po1_info;
           R3 = Hp - 7;
           R2 = GHC.IO.Exception.$fReadExitCode_lexeme1_closure+4;
           P64[Sp - 16] = _s8orI::P64;
           P64[Sp - 8] = _s8orJ::P64;
           Sp = Sp - 24;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fReadExitCode2_info" {
     GHC.IO.Exception.$fReadExitCode2_info:
         const GHC.IO.Exception.$fReadExitCode2_entry;
         const 0;
         const 545460846606;
         const 8589934607;
         const S8oB9_srt+440;
 },
 _c8po1() //  [R1]
         { []
         }
     {offset
       c8po1: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8poZ; else goto c8poY;
       c8poZ: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8poY: // global
           I64[Hp - 40] = sat_s8orZ_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R3 = Hp - 40;
           R2 = Hp - 6;
           Sp = Sp + 24;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8po1_info" {
     block_c8po1_info:
         const _c8po1;
         const 2;
         const 133143986206;
         const S8oB9_srt+440;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.272603223 UTC

[section ""data" . GHC.IO.Exception.$fReadExitCode1_closure" {
     GHC.IO.Exception.$fReadExitCode1_closure:
         const GHC.IO.Exception.$fReadExitCode1_info;
         const 0;
 },
 GHC.IO.Exception.$fReadExitCode1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8ppO: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Exception.$fReadExitCode2_closure+2;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fReadExitCode1_info" {
     GHC.IO.Exception.$fReadExitCode1_info:
         const GHC.IO.Exception.$fReadExitCode1_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S8oB9_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.276718703 UTC

[section ""data" . GHC.IO.Exception.$fReadExitCode_$creadsPrec_closure" {
     GHC.IO.Exception.$fReadExitCode_$creadsPrec_closure:
         const GHC.IO.Exception.$fReadExitCode_$creadsPrec_info;
         const 0;
 },
 sat_s8os1_entry() //  [R1]
         { []
         }
     {offset
       c8pq3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8pq4; else goto c8pq5;
       c8pq4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8pq5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.IO.Exception.$fReadExitCode2_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8os1_info" {
     sat_s8os1_info:
         const sat_s8os1_entry;
         const 1;
         const 21474836496;
         const S8oB9_srt+480;
 },
 GHC.IO.Exception.$fReadExitCode_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c8pq6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8pqa; else goto c8pq9;
       c8pqa: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Exception.$fReadExitCode_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8pq9: // global
           I64[Hp - 16] = sat_s8os1_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fReadExitCode_$creadsPrec_info" {
     GHC.IO.Exception.$fReadExitCode_$creadsPrec_info:
         const GHC.IO.Exception.$fReadExitCode_$creadsPrec_entry;
         const 0;
         const 55834574862;
         const 4294967301;
         const S8oB9_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.282739626 UTC

[section ""data" . GHC.IO.Exception.$fReadExitCode_$creadListPrec_closure" {
     GHC.IO.Exception.$fReadExitCode_$creadListPrec_closure:
         const GHC.IO.Exception.$fReadExitCode_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fReadExitCode_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       c8pqt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8pqu; else goto c8pqv;
       c8pqu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8pqv: // global
           (_c8pqq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8pqq::I64 == 0) goto c8pqs; else goto c8pqr;
       c8pqs: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8pqr: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8pqq::I64;
           R2 = GHC.IO.Exception.$fReadExitCode1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fReadExitCode_$creadListPrec_info" {
     GHC.IO.Exception.$fReadExitCode_$creadListPrec_info:
         const GHC.IO.Exception.$fReadExitCode_$creadListPrec_entry;
         const 0;
         const 12884901909;
         const S8oB9_srt+512;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.287469122 UTC

[section ""data" . GHC.IO.Exception.$fReadExitCode6_closure" {
     GHC.IO.Exception.$fReadExitCode6_closure:
         const GHC.IO.Exception.$fReadExitCode6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fReadExitCode6_entry() //  [R1]
         { []
         }
     {offset
       c8pqK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8pqL; else goto c8pqM;
       c8pqL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8pqM: // global
           (_c8pqH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8pqH::I64 == 0) goto c8pqJ; else goto c8pqI;
       c8pqJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8pqI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8pqH::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure;
           R1 = GHC.IO.Exception.$fReadExitCode_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fReadExitCode6_info" {
     GHC.IO.Exception.$fReadExitCode6_info:
         const GHC.IO.Exception.$fReadExitCode6_entry;
         const 0;
         const 4294967317;
         const S8oB9_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.291365592 UTC

[section ""data" . GHC.IO.Exception.$fReadExitCode_$creadList_closure" {
     GHC.IO.Exception.$fReadExitCode_$creadList_closure:
         const GHC.IO.Exception.$fReadExitCode_$creadList_info;
         const 0;
 },
 GHC.IO.Exception.$fReadExitCode_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c8pr0: // global
           R3 = R2;
           R2 = GHC.IO.Exception.$fReadExitCode6_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fReadExitCode_$creadList_info" {
     GHC.IO.Exception.$fReadExitCode_$creadList_info:
         const GHC.IO.Exception.$fReadExitCode_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S8oB9_srt+536;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.294550215 UTC

[section ""data" . GHC.IO.Exception.$fReadExitCode_closure" {
     GHC.IO.Exception.$fReadExitCode_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.IO.Exception.$fReadExitCode_$creadsPrec_closure+1;
         const GHC.IO.Exception.$fReadExitCode_$creadList_closure+1;
         const GHC.IO.Exception.$fReadExitCode1_closure+2;
         const GHC.IO.Exception.$fReadExitCode_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.298070571 UTC

[section ""data" . GHC.IO.Exception.$fOrdExitCode_$c<_closure" {
     GHC.IO.Exception.$fOrdExitCode_$c<_closure:
         const GHC.IO.Exception.$fOrdExitCode_$c<_info;
 },
 GHC.IO.Exception.$fOrdExitCode_$c<_entry() //  [R2, R3]
         { []
         }
     {offset
       c8prj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8prk; else goto c8prl;
       c8prk: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fOrdExitCode_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8prl: // global
           I64[Sp - 16] = block_c8prc_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8prW; else goto c8prd;
       u8prW: // global
           call _c8prc(R1) args: 0, res: 0, upd: 0;
       c8prd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdExitCode_$c<_info" {
     GHC.IO.Exception.$fOrdExitCode_$c<_info:
         const GHC.IO.Exception.$fOrdExitCode_$c<_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8prc() //  [R1]
         { []
         }
     {offset
       c8prc: // global
           _s8os3::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8prg; else goto c8prh;
       c8prg: // global
           I64[Sp + 8] = block_c8pro_info;
           R1 = _s8os3::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8prU; else goto c8prq;
       u8prU: // global
           call _c8pro(R1) args: 0, res: 0, upd: 0;
       c8prq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8prh: // global
           I64[Sp] = block_c8prD_info;
           _s8os7::P64 = P64[R1 + 6];
           R1 = _s8os3::P64;
           P64[Sp + 8] = _s8os7::P64;
           if (R1 & 7 != 0) goto u8prV; else goto c8prF;
       u8prV: // global
           call _c8prD(R1) args: 0, res: 0, upd: 0;
       c8prF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8prc_info" {
     block_c8prc_info:
         const _c8prc;
         const 1;
         const 30;
 },
 _c8pro() //  [R1]
         { []
         }
     {offset
       c8pro: // global
           if (R1 & 7 == 1) goto u8prT; else goto c8prA;
       u8prT: // global
           Sp = Sp + 8;
           call _c8prL() args: 0, res: 0, upd: 0;
       c8prA: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pro_info" {
     block_c8pro_info:
         const _c8pro;
         const 0;
         const 30;
 },
 _c8prD() //  [R1]
         { []
         }
     {offset
       c8prD: // global
           if (R1 & 7 == 1) goto u8prS; else goto c8prP;
       u8prS: // global
           Sp = Sp + 16;
           call _c8prL() args: 0, res: 0, upd: 0;
       c8prP: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.ltInt_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8prD_info" {
     block_c8prD_info:
         const _c8prD;
         const 1;
         const 30;
 },
 _c8prL() //  []
         { []
         }
     {offset
       c8prL: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.309008606 UTC

[section ""data" . GHC.IO.Exception.$fOrdExitCode_$ccompare_closure" {
     GHC.IO.Exception.$fOrdExitCode_$ccompare_closure:
         const GHC.IO.Exception.$fOrdExitCode_$ccompare_info;
 },
 GHC.IO.Exception.$fOrdExitCode_$ccompare_entry() //  [R2, R3]
         { []
         }
     {offset
       c8psG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8psH; else goto c8psI;
       c8psH: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fOrdExitCode_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8psI: // global
           I64[Sp - 16] = block_c8psz_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8pth; else goto c8psA;
       u8pth: // global
           call _c8psz(R1) args: 0, res: 0, upd: 0;
       c8psA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdExitCode_$ccompare_info" {
     GHC.IO.Exception.$fOrdExitCode_$ccompare_info:
         const GHC.IO.Exception.$fOrdExitCode_$ccompare_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8psz() //  [R1]
         { []
         }
     {offset
       c8psz: // global
           _s8osb::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8psD; else goto c8psE;
       c8psD: // global
           I64[Sp + 8] = block_c8psL_info;
           R1 = _s8osb::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8ptf; else goto c8psN;
       u8ptf: // global
           call _c8psL(R1) args: 0, res: 0, upd: 0;
       c8psN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8psE: // global
           I64[Sp] = block_c8pt0_info;
           _s8osf::P64 = P64[R1 + 6];
           R1 = _s8osb::P64;
           P64[Sp + 8] = _s8osf::P64;
           if (R1 & 7 != 0) goto u8ptg; else goto c8pt2;
       u8ptg: // global
           call _c8pt0(R1) args: 0, res: 0, upd: 0;
       c8pt2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8psz_info" {
     block_c8psz_info:
         const _c8psz;
         const 1;
         const 30;
 },
 _c8psL() //  [R1]
         { []
         }
     {offset
       c8psL: // global
           if (R1 & 7 == 1) goto c8psT; else goto c8psX;
       c8psT: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8psX: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8psL_info" {
     block_c8psL_info:
         const _c8psL;
         const 0;
         const 30;
 },
 _c8pt0() //  [R1]
         { []
         }
     {offset
       c8pt0: // global
           if (R1 & 7 == 1) goto c8pt8; else goto c8ptc;
       c8pt8: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8ptc: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.compareInt_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pt0_info" {
     block_c8pt0_info:
         const _c8pt0;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.318953649 UTC

[section ""data" . GHC.IO.Exception.$fEqExitCode_$c==_closure" {
     GHC.IO.Exception.$fEqExitCode_$c==_closure:
         const GHC.IO.Exception.$fEqExitCode_$c==_info;
 },
 GHC.IO.Exception.$fEqExitCode_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c8ptZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8pu0; else goto c8pu1;
       c8pu0: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fEqExitCode_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8pu1: // global
           I64[Sp - 16] = block_c8ptS_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8puC; else goto c8ptT;
       u8puC: // global
           call _c8ptS(R1) args: 0, res: 0, upd: 0;
       c8ptT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fEqExitCode_$c==_info" {
     GHC.IO.Exception.$fEqExitCode_$c==_info:
         const GHC.IO.Exception.$fEqExitCode_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8ptS() //  [R1]
         { []
         }
     {offset
       c8ptS: // global
           _s8osj::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8ptW; else goto c8ptX;
       c8ptW: // global
           I64[Sp + 8] = block_c8pu4_info;
           R1 = _s8osj::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8puA; else goto c8pu6;
       u8puA: // global
           call _c8pu4(R1) args: 0, res: 0, upd: 0;
       c8pu6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8ptX: // global
           I64[Sp] = block_c8puj_info;
           _s8osn::P64 = P64[R1 + 6];
           R1 = _s8osj::P64;
           P64[Sp + 8] = _s8osn::P64;
           if (R1 & 7 != 0) goto u8puB; else goto c8pul;
       u8puB: // global
           call _c8puj(R1) args: 0, res: 0, upd: 0;
       c8pul: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ptS_info" {
     block_c8ptS_info:
         const _c8ptS;
         const 1;
         const 30;
 },
 _c8pu4() //  [R1]
         { []
         }
     {offset
       c8pu4: // global
           if (R1 & 7 == 1) goto c8puc; else goto u8puz;
       c8puc: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u8puz: // global
           Sp = Sp + 8;
           call _c8pur() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8pu4_info" {
     block_c8pu4_info:
         const _c8pu4;
         const 0;
         const 30;
 },
 _c8puj() //  [R1]
         { []
         }
     {offset
       c8puj: // global
           if (R1 & 7 == 1) goto u8puy; else goto c8puv;
       u8puy: // global
           Sp = Sp + 16;
           call _c8pur() args: 0, res: 0, upd: 0;
       c8puv: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.eqInt_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8puj_info" {
     block_c8puj_info:
         const _c8puj;
         const 1;
         const 30;
 },
 _c8pur() //  []
         { []
         }
     {offset
       c8pur: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.331853019 UTC

[section ""data" . GHC.IO.Exception.$fEqExitCode_$c/=_closure" {
     GHC.IO.Exception.$fEqExitCode_$c/=_closure:
         const GHC.IO.Exception.$fEqExitCode_$c/=_info;
 },
 GHC.IO.Exception.$fEqExitCode_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8pvm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8pvn; else goto c8pvo;
       c8pvn: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fEqExitCode_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8pvo: // global
           I64[Sp - 16] = block_c8pvf_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8pwj; else goto c8pvg;
       u8pwj: // global
           call _c8pvf(R1) args: 0, res: 0, upd: 0;
       c8pvg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fEqExitCode_$c/=_info" {
     GHC.IO.Exception.$fEqExitCode_$c/=_info:
         const GHC.IO.Exception.$fEqExitCode_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8pvf() //  [R1]
         { []
         }
     {offset
       c8pvf: // global
           _s8osr::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8pvj; else goto c8pvk;
       c8pvj: // global
           I64[Sp + 8] = block_c8pvr_info;
           R1 = _s8osr::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8pwh; else goto c8pvt;
       u8pwh: // global
           call _c8pvr(R1) args: 0, res: 0, upd: 0;
       c8pvt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8pvk: // global
           I64[Sp] = block_c8pvG_info;
           _s8osv::P64 = P64[R1 + 6];
           R1 = _s8osr::P64;
           P64[Sp + 8] = _s8osv::P64;
           if (R1 & 7 != 0) goto u8pwi; else goto c8pvI;
       u8pwi: // global
           call _c8pvG(R1) args: 0, res: 0, upd: 0;
       c8pvI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pvf_info" {
     block_c8pvf_info:
         const _c8pvf;
         const 1;
         const 30;
 },
 _c8pvr() //  [R1]
         { []
         }
     {offset
       c8pvr: // global
           if (R1 & 7 == 1) goto u8pwf; else goto u8pwg;
       u8pwf: // global
           Sp = Sp + 8;
           call _c8pw9() args: 0, res: 0, upd: 0;
       u8pwg: // global
           Sp = Sp + 8;
           call _c8pw8() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8pvr_info" {
     block_c8pvr_info:
         const _c8pvr;
         const 0;
         const 30;
 },
 _c8pvG() //  [R1]
         { []
         }
     {offset
       c8pvG: // global
           if (R1 & 7 == 1) goto u8pwc; else goto c8pvY;
       u8pwc: // global
           Sp = Sp + 16;
           call _c8pw8() args: 0, res: 0, upd: 0;
       c8pvY: // global
           I64[Sp] = block_c8pvR_info;
           _s8osx::P64 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8osx::P64;
           if (R1 & 7 != 0) goto u8pwm; else goto c8pvS;
       u8pwm: // global
           call _c8pvR(R1) args: 0, res: 0, upd: 0;
       c8pvS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pvG_info" {
     block_c8pvG_info:
         const _c8pvG;
         const 1;
         const 30;
 },
 _c8pvR() //  [R1]
         { []
         }
     {offset
       c8pvR: // global
           I64[Sp] = block_c8pvW_info;
           _s8osz::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8osz::I64;
           if (R1 & 7 != 0) goto u8pwo; else goto c8pw0;
       u8pwo: // global
           call _c8pvW(R1) args: 0, res: 0, upd: 0;
       c8pw0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pvR_info" {
     block_c8pvR_info:
         const _c8pvR;
         const 1;
         const 30;
 },
 _c8pvW() //  [R1]
         { []
         }
     {offset
       c8pvW: // global
           if (I64[Sp + 8] == I64[R1 + 7]) goto u8pwd; else goto u8pwe;
       u8pwd: // global
           Sp = Sp + 16;
           call _c8pw9() args: 0, res: 0, upd: 0;
       u8pwe: // global
           Sp = Sp + 16;
           call _c8pw8() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8pvW_info" {
     block_c8pvW_info:
         const _c8pvW;
         const 65;
         const 30;
 },
 _c8pw9() //  []
         { []
         }
     {offset
       c8pw9: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8pw8() //  []
         { []
         }
     {offset
       c8pw8: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.344357165 UTC

[section ""data" . GHC.IO.Exception.$fEqExitCode_closure" {
     GHC.IO.Exception.$fEqExitCode_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Exception.$fEqExitCode_$c==_closure+2;
         const GHC.IO.Exception.$fEqExitCode_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.348564937 UTC

[section ""data" . GHC.IO.Exception.$fOrdExitCode_$c<=_closure" {
     GHC.IO.Exception.$fOrdExitCode_$c<=_closure:
         const GHC.IO.Exception.$fOrdExitCode_$c<=_info;
 },
 GHC.IO.Exception.$fOrdExitCode_$c<=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8pxm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8pxn; else goto c8pxo;
       c8pxn: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fOrdExitCode_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8pxo: // global
           I64[Sp - 16] = block_c8pxf_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8pyj; else goto c8pxg;
       u8pyj: // global
           call _c8pxf(R1) args: 0, res: 0, upd: 0;
       c8pxg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdExitCode_$c<=_info" {
     GHC.IO.Exception.$fOrdExitCode_$c<=_info:
         const GHC.IO.Exception.$fOrdExitCode_$c<=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8pxf() //  [R1]
         { []
         }
     {offset
       c8pxf: // global
           _s8osD::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8pxj; else goto c8pxk;
       c8pxj: // global
           I64[Sp + 8] = block_c8pxr_info;
           R1 = _s8osD::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8pyh; else goto c8pxt;
       u8pyh: // global
           call _c8pxr(R1) args: 0, res: 0, upd: 0;
       c8pxt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8pxk: // global
           I64[Sp] = block_c8pxG_info;
           _s8osI::P64 = P64[R1 + 6];
           R1 = _s8osD::P64;
           P64[Sp + 8] = _s8osI::P64;
           if (R1 & 7 != 0) goto u8pyi; else goto c8pxI;
       u8pyi: // global
           call _c8pxG(R1) args: 0, res: 0, upd: 0;
       c8pxI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pxf_info" {
     block_c8pxf_info:
         const _c8pxf;
         const 1;
         const 30;
 },
 _c8pxr() //  [R1]
         { []
         }
     {offset
       c8pxr: // global
           if (R1 & 7 == 1) goto u8pyf; else goto u8pyg;
       u8pyf: // global
           Sp = Sp + 8;
           call _c8py8() args: 0, res: 0, upd: 0;
       u8pyg: // global
           Sp = Sp + 8;
           call _c8py9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8pxr_info" {
     block_c8pxr_info:
         const _c8pxr;
         const 0;
         const 30;
 },
 _c8pxG() //  [R1]
         { []
         }
     {offset
       c8pxG: // global
           if (R1 & 7 == 1) goto u8pyc; else goto c8pxY;
       u8pyc: // global
           Sp = Sp + 16;
           call _c8py8() args: 0, res: 0, upd: 0;
       c8pxY: // global
           I64[Sp] = block_c8pxR_info;
           _s8osK::P64 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8osK::P64;
           if (R1 & 7 != 0) goto u8pym; else goto c8pxS;
       u8pym: // global
           call _c8pxR(R1) args: 0, res: 0, upd: 0;
       c8pxS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pxG_info" {
     block_c8pxG_info:
         const _c8pxG;
         const 1;
         const 30;
 },
 _c8pxR() //  [R1]
         { []
         }
     {offset
       c8pxR: // global
           I64[Sp] = block_c8pxW_info;
           _s8osM::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8osM::I64;
           if (R1 & 7 != 0) goto u8pyo; else goto c8py0;
       u8pyo: // global
           call _c8pxW(R1) args: 0, res: 0, upd: 0;
       c8py0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pxR_info" {
     block_c8pxR_info:
         const _c8pxR;
         const 1;
         const 30;
 },
 _c8pxW() //  [R1]
         { []
         }
     {offset
       c8pxW: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            I64[R1 + 7])) goto u8pye; else goto u8pyd;
       u8pye: // global
           Sp = Sp + 16;
           call _c8py8() args: 0, res: 0, upd: 0;
       u8pyd: // global
           Sp = Sp + 16;
           call _c8py9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8pxW_info" {
     block_c8pxW_info:
         const _c8pxW;
         const 65;
         const 30;
 },
 _c8py8() //  []
         { []
         }
     {offset
       c8py8: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8py9() //  []
         { []
         }
     {offset
       c8py9: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.364459981 UTC

[section ""data" . GHC.IO.Exception.$fOrdExitCode_$cmax_closure" {
     GHC.IO.Exception.$fOrdExitCode_$cmax_closure:
         const GHC.IO.Exception.$fOrdExitCode_$cmax_info;
 },
 GHC.IO.Exception.$fOrdExitCode_$cmax_entry() //  [R2, R3]
         { []
         }
     {offset
       c8pzl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8pzm; else goto c8pzn;
       c8pzm: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fOrdExitCode_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8pzn: // global
           I64[Sp - 16] = block_c8pze_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8pA1; else goto c8pzf;
       u8pA1: // global
           call _c8pze(R1) args: 0, res: 0, upd: 0;
       c8pzf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdExitCode_$cmax_info" {
     GHC.IO.Exception.$fOrdExitCode_$cmax_info:
         const GHC.IO.Exception.$fOrdExitCode_$cmax_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8pze() //  [R1]
         { []
         }
     {offset
       c8pze: // global
           _s8osQ::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8pzi; else goto c8pzj;
       c8pzi: // global
           R1 = _s8osQ::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8pzj: // global
           I64[Sp - 8] = block_c8pzt_info;
           _s8osS::P64 = R1;
           _s8osT::P64 = P64[R1 + 6];
           R1 = _s8osQ::P64;
           P64[Sp] = _s8osT::P64;
           P64[Sp + 8] = _s8osS::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8pA0; else goto c8pzv;
       u8pA0: // global
           call _c8pzt(R1) args: 0, res: 0, upd: 0;
       c8pzv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pze_info" {
     block_c8pze_info:
         const _c8pze;
         const 1;
         const 30;
 },
 _c8pzt() //  [R1]
         { []
         }
     {offset
       c8pzt: // global
           if (R1 & 7 == 1) goto u8pzY; else goto c8pzL;
       u8pzY: // global
           Sp = Sp + 16;
           call _c8pzV() args: 0, res: 0, upd: 0;
       c8pzL: // global
           I64[Sp - 8] = block_c8pzE_info;
           _s8osU::P64 = R1;
           _s8osV::P64 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           P64[Sp] = _s8osV::P64;
           P64[Sp + 8] = _s8osU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8pA2; else goto c8pzF;
       u8pA2: // global
           call _c8pzE(R1) args: 0, res: 0, upd: 0;
       c8pzF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pzt_info" {
     block_c8pzt_info:
         const _c8pzt;
         const 2;
         const 30;
 },
 _c8pzE() //  [R1]
         { []
         }
     {offset
       c8pzE: // global
           I64[Sp] = block_c8pzJ_info;
           _s8osX::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8osX::I64;
           if (R1 & 7 != 0) goto u8pA4; else goto c8pzN;
       u8pA4: // global
           call _c8pzJ(R1) args: 0, res: 0, upd: 0;
       c8pzN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pzE_info" {
     block_c8pzE_info:
         const _c8pzE;
         const 3;
         const 30;
 },
 _c8pzJ() //  [R1]
         { []
         }
     {offset
       c8pzJ: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            I64[R1 + 7])) goto u8pzZ; else goto c8pzW;
       u8pzZ: // global
           Sp = Sp + 24;
           call _c8pzV() args: 0, res: 0, upd: 0;
       c8pzW: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pzJ_info" {
     block_c8pzJ_info:
         const _c8pzJ;
         const 67;
         const 30;
 },
 _c8pzV() //  []
         { []
         }
     {offset
       c8pzV: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.382087811 UTC

[section ""data" . GHC.IO.Exception.$fOrdExitCode_$c>=_closure" {
     GHC.IO.Exception.$fOrdExitCode_$c>=_closure:
         const GHC.IO.Exception.$fOrdExitCode_$c>=_info;
 },
 GHC.IO.Exception.$fOrdExitCode_$c>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8pAT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8pAU; else goto c8pAV;
       c8pAU: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fOrdExitCode_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8pAV: // global
           I64[Sp - 16] = block_c8pAM_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8pBQ; else goto c8pAN;
       u8pBQ: // global
           call _c8pAM(R1) args: 0, res: 0, upd: 0;
       c8pAN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdExitCode_$c>=_info" {
     GHC.IO.Exception.$fOrdExitCode_$c>=_info:
         const GHC.IO.Exception.$fOrdExitCode_$c>=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8pAM() //  [R1]
         { []
         }
     {offset
       c8pAM: // global
           _s8ot2::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8pAQ; else goto c8pAR;
       c8pAQ: // global
           I64[Sp + 8] = block_c8pAY_info;
           R1 = _s8ot2::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8pBO; else goto c8pB0;
       u8pBO: // global
           call _c8pAY(R1) args: 0, res: 0, upd: 0;
       c8pB0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8pAR: // global
           I64[Sp] = block_c8pBd_info;
           _s8ot6::P64 = P64[R1 + 6];
           R1 = _s8ot2::P64;
           P64[Sp + 8] = _s8ot6::P64;
           if (R1 & 7 != 0) goto u8pBP; else goto c8pBf;
       u8pBP: // global
           call _c8pBd(R1) args: 0, res: 0, upd: 0;
       c8pBf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pAM_info" {
     block_c8pAM_info:
         const _c8pAM;
         const 1;
         const 30;
 },
 _c8pAY() //  [R1]
         { []
         }
     {offset
       c8pAY: // global
           if (R1 & 7 == 1) goto u8pBM; else goto u8pBN;
       u8pBM: // global
           Sp = Sp + 8;
           call _c8pBF() args: 0, res: 0, upd: 0;
       u8pBN: // global
           Sp = Sp + 8;
           call _c8pBG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8pAY_info" {
     block_c8pAY_info:
         const _c8pAY;
         const 0;
         const 30;
 },
 _c8pBd() //  [R1]
         { []
         }
     {offset
       c8pBd: // global
           if (R1 & 7 == 1) goto u8pBJ; else goto c8pBv;
       u8pBJ: // global
           Sp = Sp + 16;
           call _c8pBF() args: 0, res: 0, upd: 0;
       c8pBv: // global
           I64[Sp] = block_c8pBo_info;
           _s8ot8::P64 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8ot8::P64;
           if (R1 & 7 != 0) goto u8pBT; else goto c8pBp;
       u8pBT: // global
           call _c8pBo(R1) args: 0, res: 0, upd: 0;
       c8pBp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pBd_info" {
     block_c8pBd_info:
         const _c8pBd;
         const 1;
         const 30;
 },
 _c8pBo() //  [R1]
         { []
         }
     {offset
       c8pBo: // global
           I64[Sp] = block_c8pBt_info;
           _s8ota::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8ota::I64;
           if (R1 & 7 != 0) goto u8pBV; else goto c8pBx;
       u8pBV: // global
           call _c8pBt(R1) args: 0, res: 0, upd: 0;
       c8pBx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pBo_info" {
     block_c8pBo_info:
         const _c8pBo;
         const 1;
         const 30;
 },
 _c8pBt() //  [R1]
         { []
         }
     {offset
       c8pBt: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            I64[R1 + 7])) goto u8pBL; else goto u8pBK;
       u8pBL: // global
           Sp = Sp + 16;
           call _c8pBF() args: 0, res: 0, upd: 0;
       u8pBK: // global
           Sp = Sp + 16;
           call _c8pBG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8pBt_info" {
     block_c8pBt_info:
         const _c8pBt;
         const 65;
         const 30;
 },
 _c8pBF() //  []
         { []
         }
     {offset
       c8pBF: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8pBG() //  []
         { []
         }
     {offset
       c8pBG: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.397533295 UTC

[section ""data" . GHC.IO.Exception.$fOrdExitCode_$c>_closure" {
     GHC.IO.Exception.$fOrdExitCode_$c>_closure:
         const GHC.IO.Exception.$fOrdExitCode_$c>_info;
 },
 GHC.IO.Exception.$fOrdExitCode_$c>_entry() //  [R2, R3]
         { []
         }
     {offset
       c8pCL: // global
           _s8otf::P64 = R3;
           R3 = R2;
           R2 = _s8otf::P64;
           call GHC.IO.Exception.$fOrdExitCode_$c<_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdExitCode_$c>_info" {
     GHC.IO.Exception.$fOrdExitCode_$c>_info:
         const GHC.IO.Exception.$fOrdExitCode_$c>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.403853085 UTC

[section ""data" . GHC.IO.Exception.$fOrdExitCode_$cmin_closure" {
     GHC.IO.Exception.$fOrdExitCode_$cmin_closure:
         const GHC.IO.Exception.$fOrdExitCode_$cmin_info;
 },
 GHC.IO.Exception.$fOrdExitCode_$cmin_entry() //  [R2, R3]
         { []
         }
     {offset
       c8pD3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8pD4; else goto c8pD5;
       c8pD4: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fOrdExitCode_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8pD5: // global
           I64[Sp - 16] = block_c8pCW_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8pDO; else goto c8pCX;
       u8pDO: // global
           call _c8pCW(R1) args: 0, res: 0, upd: 0;
       c8pCX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdExitCode_$cmin_info" {
     GHC.IO.Exception.$fOrdExitCode_$cmin_info:
         const GHC.IO.Exception.$fOrdExitCode_$cmin_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8pCW() //  [R1]
         { []
         }
     {offset
       c8pCW: // global
           _s8otg::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8pD0; else goto c8pD1;
       c8pD0: // global
           I64[Sp + 8] = block_c8pD8_info;
           R1 = _s8otg::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8pDM; else goto c8pDa;
       u8pDM: // global
           call _c8pD8() args: 0, res: 0, upd: 0;
       c8pDa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8pD1: // global
           I64[Sp - 8] = block_c8pDh_info;
           _s8oti::P64 = R1;
           _s8otk::P64 = P64[R1 + 6];
           R1 = _s8otg::P64;
           P64[Sp] = _s8otk::P64;
           P64[Sp + 8] = _s8oti::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8pDN; else goto c8pDj;
       u8pDN: // global
           call _c8pDh(R1) args: 0, res: 0, upd: 0;
       c8pDj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pCW_info" {
     block_c8pCW_info:
         const _c8pCW;
         const 1;
         const 30;
 },
 _c8pD8() //  []
         { []
         }
     {offset
       c8pD8: // global
           R1 = GHC.IO.Exception.ExitSuccess_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pD8_info" {
     block_c8pD8_info:
         const _c8pD8;
         const 0;
         const 30;
 },
 _c8pDh() //  [R1]
         { []
         }
     {offset
       c8pDh: // global
           if (R1 & 7 == 1) goto c8pDp; else goto c8pDz;
       c8pDp: // global
           R1 = GHC.IO.Exception.ExitSuccess_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8pDz: // global
           I64[Sp - 8] = block_c8pDs_info;
           _s8otl::P64 = R1;
           _s8otm::P64 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           P64[Sp] = _s8otm::P64;
           P64[Sp + 8] = _s8otl::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8pDP; else goto c8pDt;
       u8pDP: // global
           call _c8pDs(R1) args: 0, res: 0, upd: 0;
       c8pDt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pDh_info" {
     block_c8pDh_info:
         const _c8pDh;
         const 2;
         const 30;
 },
 _c8pDs() //  [R1]
         { []
         }
     {offset
       c8pDs: // global
           I64[Sp] = block_c8pDx_info;
           _s8oto::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8oto::I64;
           if (R1 & 7 != 0) goto u8pDQ; else goto c8pDB;
       u8pDQ: // global
           call _c8pDx(R1) args: 0, res: 0, upd: 0;
       c8pDB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pDs_info" {
     block_c8pDs_info:
         const _c8pDs;
         const 3;
         const 30;
 },
 _c8pDx() //  [R1]
         { []
         }
     {offset
       c8pDx: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            I64[R1 + 7])) goto c8pDJ; else goto c8pDK;
       c8pDJ: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8pDK: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pDx_info" {
     block_c8pDx_info:
         const _c8pDx;
         const 67;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.418481649 UTC

[section ""data" . GHC.IO.Exception.$fOrdExitCode_closure" {
     GHC.IO.Exception.$fOrdExitCode_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.IO.Exception.$fEqExitCode_closure+1;
         const GHC.IO.Exception.$fOrdExitCode_$ccompare_closure+2;
         const GHC.IO.Exception.$fOrdExitCode_$c<_closure+2;
         const GHC.IO.Exception.$fOrdExitCode_$c<=_closure+2;
         const GHC.IO.Exception.$fOrdExitCode_$c>_closure+2;
         const GHC.IO.Exception.$fOrdExitCode_$c>=_closure+2;
         const GHC.IO.Exception.$fOrdExitCode_$cmax_closure+2;
         const GHC.IO.Exception.$fOrdExitCode_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.422216649 UTC

[section ""data" . GHC.IO.Exception.$fOrdArrayException_$c<_closure" {
     GHC.IO.Exception.$fOrdArrayException_$c<_closure:
         const GHC.IO.Exception.$fOrdArrayException_$c<_info;
 },
 GHC.IO.Exception.$fOrdArrayException_$c<_entry() //  [R2, R3]
         { []
         }
     {offset
       c8pEI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8pEJ; else goto c8pEK;
       c8pEJ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fOrdArrayException_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8pEK: // global
           I64[Sp - 16] = block_c8pEB_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8pFj; else goto c8pEC;
       u8pFj: // global
           call _c8pEB(R1) args: 0, res: 0, upd: 0;
       c8pEC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdArrayException_$c<_info" {
     GHC.IO.Exception.$fOrdArrayException_$c<_info:
         const GHC.IO.Exception.$fOrdArrayException_$c<_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8pEB() //  [R1]
         { []
         }
     {offset
       c8pEB: // global
           _s8ott::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8pEF; else goto c8pEG;
       c8pEF: // global
           I64[Sp] = block_c8pEN_info;
           _s8otv::P64 = P64[R1 + 7];
           R1 = _s8ott::P64;
           P64[Sp + 8] = _s8otv::P64;
           if (R1 & 7 != 0) goto u8pFh; else goto c8pEP;
       u8pFh: // global
           call _c8pEN(R1) args: 0, res: 0, upd: 0;
       c8pEP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8pEG: // global
           I64[Sp] = block_c8pF2_info;
           _s8otz::P64 = P64[R1 + 6];
           R1 = _s8ott::P64;
           P64[Sp + 8] = _s8otz::P64;
           if (R1 & 7 != 0) goto u8pFi; else goto c8pF4;
       u8pFi: // global
           call _c8pF2(R1) args: 0, res: 0, upd: 0;
       c8pF4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pEB_info" {
     block_c8pEB_info:
         const _c8pEB;
         const 1;
         const 30;
 },
 _c8pEN() //  [R1]
         { []
         }
     {offset
       c8pEN: // global
           if (R1 & 7 == 1) goto c8pEV; else goto c8pEZ;
       c8pEV: // global
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.$fOrd[]_$s$c<1_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
       c8pEZ: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pEN_info" {
     block_c8pEN_info:
         const _c8pEN;
         const 1;
         const 30;
 },
 _c8pF2() //  [R1]
         { []
         }
     {offset
       c8pF2: // global
           if (R1 & 7 == 1) goto c8pFa; else goto c8pFe;
       c8pFa: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8pFe: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.$fOrd[]_$s$c<1_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pF2_info" {
     block_c8pF2_info:
         const _c8pF2;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.432635412 UTC

[section ""data" . GHC.IO.Exception.$fOrdArrayException_$ccompare_closure" {
     GHC.IO.Exception.$fOrdArrayException_$ccompare_closure:
         const GHC.IO.Exception.$fOrdArrayException_$ccompare_info;
 },
 GHC.IO.Exception.$fOrdArrayException_$ccompare_entry() //  [R2, R3]
         { []
         }
     {offset
       c8pFZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8pG0; else goto c8pG1;
       c8pG0: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fOrdArrayException_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8pG1: // global
           I64[Sp - 16] = block_c8pFS_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8pGA; else goto c8pFT;
       u8pGA: // global
           call _c8pFS(R1) args: 0, res: 0, upd: 0;
       c8pFT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdArrayException_$ccompare_info" {
     GHC.IO.Exception.$fOrdArrayException_$ccompare_info:
         const GHC.IO.Exception.$fOrdArrayException_$ccompare_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8pFS() //  [R1]
         { []
         }
     {offset
       c8pFS: // global
           _s8otE::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8pFW; else goto c8pFX;
       c8pFW: // global
           I64[Sp] = block_c8pG4_info;
           _s8otG::P64 = P64[R1 + 7];
           R1 = _s8otE::P64;
           P64[Sp + 8] = _s8otG::P64;
           if (R1 & 7 != 0) goto u8pGy; else goto c8pG6;
       u8pGy: // global
           call _c8pG4(R1) args: 0, res: 0, upd: 0;
       c8pG6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8pFX: // global
           I64[Sp] = block_c8pGj_info;
           _s8otK::P64 = P64[R1 + 6];
           R1 = _s8otE::P64;
           P64[Sp + 8] = _s8otK::P64;
           if (R1 & 7 != 0) goto u8pGz; else goto c8pGl;
       u8pGz: // global
           call _c8pGj(R1) args: 0, res: 0, upd: 0;
       c8pGl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pFS_info" {
     block_c8pFS_info:
         const _c8pFS;
         const 1;
         const 30;
 },
 _c8pG4() //  [R1]
         { []
         }
     {offset
       c8pG4: // global
           if (R1 & 7 == 1) goto c8pGc; else goto c8pGg;
       c8pGc: // global
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c8pGg: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pG4_info" {
     block_c8pG4_info:
         const _c8pG4;
         const 1;
         const 30;
 },
 _c8pGj() //  [R1]
         { []
         }
     {offset
       c8pGj: // global
           if (R1 & 7 == 1) goto c8pGr; else goto c8pGv;
       c8pGr: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8pGv: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pGj_info" {
     block_c8pGj_info:
         const _c8pGj;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.443211503 UTC

[section ""data" . GHC.IO.Exception.$fEqArrayException_$c==_closure" {
     GHC.IO.Exception.$fEqArrayException_$c==_closure:
         const GHC.IO.Exception.$fEqArrayException_$c==_info;
 },
 GHC.IO.Exception.$fEqArrayException_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c8pHg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8pHh; else goto c8pHi;
       c8pHh: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fEqArrayException_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8pHi: // global
           I64[Sp - 16] = block_c8pH9_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8pHT; else goto c8pHa;
       u8pHT: // global
           call _c8pH9(R1) args: 0, res: 0, upd: 0;
       c8pHa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fEqArrayException_$c==_info" {
     GHC.IO.Exception.$fEqArrayException_$c==_info:
         const GHC.IO.Exception.$fEqArrayException_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8pH9() //  [R1]
         { []
         }
     {offset
       c8pH9: // global
           _s8otP::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8pHd; else goto c8pHe;
       c8pHd: // global
           I64[Sp] = block_c8pHl_info;
           _s8otR::P64 = P64[R1 + 7];
           R1 = _s8otP::P64;
           P64[Sp + 8] = _s8otR::P64;
           if (R1 & 7 != 0) goto u8pHR; else goto c8pHn;
       u8pHR: // global
           call _c8pHl(R1) args: 0, res: 0, upd: 0;
       c8pHn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8pHe: // global
           I64[Sp] = block_c8pHA_info;
           _s8otV::P64 = P64[R1 + 6];
           R1 = _s8otP::P64;
           P64[Sp + 8] = _s8otV::P64;
           if (R1 & 7 != 0) goto u8pHS; else goto c8pHC;
       u8pHS: // global
           call _c8pHA(R1) args: 0, res: 0, upd: 0;
       c8pHC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pH9_info" {
     block_c8pH9_info:
         const _c8pH9;
         const 1;
         const 30;
 },
 _c8pHl() //  [R1]
         { []
         }
     {offset
       c8pHl: // global
           if (R1 & 7 == 1) goto c8pHt; else goto u8pHQ;
       c8pHt: // global
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 0, upd: 8;
       u8pHQ: // global
           Sp = Sp + 16;
           call _c8pHI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8pHl_info" {
     block_c8pHl_info:
         const _c8pHl;
         const 1;
         const 30;
 },
 _c8pHA() //  [R1]
         { []
         }
     {offset
       c8pHA: // global
           if (R1 & 7 == 1) goto u8pHP; else goto c8pHM;
       u8pHP: // global
           Sp = Sp + 16;
           call _c8pHI() args: 0, res: 0, upd: 0;
       c8pHM: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pHA_info" {
     block_c8pHA_info:
         const _c8pHA;
         const 1;
         const 30;
 },
 _c8pHI() //  []
         { []
         }
     {offset
       c8pHI: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.455531426 UTC

[section ""data" . GHC.IO.Exception.$fEqArrayException_$c/=_closure" {
     GHC.IO.Exception.$fEqArrayException_$c/=_closure:
         const GHC.IO.Exception.$fEqArrayException_$c/=_info;
 },
 GHC.IO.Exception.$fEqArrayException_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8pIB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8pIC; else goto c8pID;
       c8pIC: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fEqArrayException_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8pID: // global
           I64[Sp - 16] = block_c8pIu_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8pJG; else goto c8pIv;
       u8pJG: // global
           call _c8pIu(R1) args: 0, res: 0, upd: 0;
       c8pIv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fEqArrayException_$c/=_info" {
     GHC.IO.Exception.$fEqArrayException_$c/=_info:
         const GHC.IO.Exception.$fEqArrayException_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8pIu() //  [R1]
         { []
         }
     {offset
       c8pIu: // global
           _s8ou0::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8pIy; else goto c8pIz;
       c8pIy: // global
           I64[Sp] = block_c8pIG_info;
           _s8ou2::P64 = P64[R1 + 7];
           R1 = _s8ou0::P64;
           P64[Sp + 8] = _s8ou2::P64;
           if (R1 & 7 != 0) goto u8pJE; else goto c8pII;
       u8pJE: // global
           call _c8pIG(R1) args: 0, res: 0, upd: 0;
       c8pII: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8pIz: // global
           I64[Sp] = block_c8pJ6_info;
           _s8ou7::P64 = P64[R1 + 6];
           R1 = _s8ou0::P64;
           P64[Sp + 8] = _s8ou7::P64;
           if (R1 & 7 != 0) goto u8pJF; else goto c8pJ8;
       u8pJF: // global
           call _c8pJ6(R1) args: 0, res: 0, upd: 0;
       c8pJ8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pIu_info" {
     block_c8pIu_info:
         const _c8pIu;
         const 1;
         const 30;
 },
 _c8pIG() //  [R1]
         { []
         }
     {offset
       c8pIG: // global
           if (R1 & 7 == 1) goto c8pIP; else goto u8pJB;
       c8pIP: // global
           _s8ou2::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8pIM_info;
           R3 = P64[R1 + 7];
           R2 = _s8ou2::P64;
           Sp = Sp + 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       u8pJB: // global
           Sp = Sp + 16;
           call _c8pJp() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8pIG_info" {
     block_c8pIG_info:
         const _c8pIG;
         const 1;
         const 30;
 },
 _c8pIM() //  [R1]
         { []
         }
     {offset
       c8pIM: // global
           if (R1 & 7 == 1) goto u8pJC; else goto u8pJD;
       u8pJC: // global
           Sp = Sp + 8;
           call _c8pJp() args: 0, res: 0, upd: 0;
       u8pJD: // global
           Sp = Sp + 8;
           call _c8pJt() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8pIM_info" {
     block_c8pIM_info:
         const _c8pIM;
         const 0;
         const 30;
 },
 _c8pJ6() //  [R1]
         { []
         }
     {offset
       c8pJ6: // global
           if (R1 & 7 == 1) goto u8pJy; else goto c8pJj;
       u8pJy: // global
           Sp = Sp + 16;
           call _c8pJp() args: 0, res: 0, upd: 0;
       c8pJj: // global
           _s8ou7::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8pJh_info;
           R3 = P64[R1 + 6];
           R2 = _s8ou7::P64;
           Sp = Sp + 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pJ6_info" {
     block_c8pJ6_info:
         const _c8pJ6;
         const 1;
         const 30;
 },
 _c8pJh() //  [R1]
         { []
         }
     {offset
       c8pJh: // global
           if (R1 & 7 == 1) goto u8pJz; else goto u8pJA;
       u8pJz: // global
           Sp = Sp + 8;
           call _c8pJp() args: 0, res: 0, upd: 0;
       u8pJA: // global
           Sp = Sp + 8;
           call _c8pJt() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8pJh_info" {
     block_c8pJh_info:
         const _c8pJh;
         const 0;
         const 30;
 },
 _c8pJp() //  []
         { []
         }
     {offset
       c8pJp: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8pJt() //  []
         { []
         }
     {offset
       c8pJt: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.468473516 UTC

[section ""data" . GHC.IO.Exception.$fEqArrayException_closure" {
     GHC.IO.Exception.$fEqArrayException_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Exception.$fEqArrayException_$c==_closure+2;
         const GHC.IO.Exception.$fEqArrayException_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.472690136 UTC

[section ""data" . GHC.IO.Exception.$fOrdArrayException_$c<=_closure" {
     GHC.IO.Exception.$fOrdArrayException_$c<=_closure:
         const GHC.IO.Exception.$fOrdArrayException_$c<=_info;
 },
 GHC.IO.Exception.$fOrdArrayException_$c<=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8pKJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8pKK; else goto c8pKL;
       c8pKK: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fOrdArrayException_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8pKL: // global
           I64[Sp - 16] = block_c8pKC_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8pLO; else goto c8pKD;
       u8pLO: // global
           call _c8pKC(R1) args: 0, res: 0, upd: 0;
       c8pKD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdArrayException_$c<=_info" {
     GHC.IO.Exception.$fOrdArrayException_$c<=_info:
         const GHC.IO.Exception.$fOrdArrayException_$c<=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8pKC() //  [R1]
         { []
         }
     {offset
       c8pKC: // global
           _s8ouc::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8pKG; else goto c8pKH;
       c8pKG: // global
           I64[Sp] = block_c8pKO_info;
           _s8ouf::P64 = P64[R1 + 7];
           R1 = _s8ouc::P64;
           P64[Sp + 8] = _s8ouf::P64;
           if (R1 & 7 != 0) goto u8pLM; else goto c8pKQ;
       u8pLM: // global
           call _c8pKO(R1) args: 0, res: 0, upd: 0;
       c8pKQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8pKH: // global
           I64[Sp] = block_c8pLe_info;
           _s8ouk::P64 = P64[R1 + 6];
           R1 = _s8ouc::P64;
           P64[Sp + 8] = _s8ouk::P64;
           if (R1 & 7 != 0) goto u8pLN; else goto c8pLg;
       u8pLN: // global
           call _c8pLe(R1) args: 0, res: 0, upd: 0;
       c8pLg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pKC_info" {
     block_c8pKC_info:
         const _c8pKC;
         const 1;
         const 30;
 },
 _c8pKO() //  [R1]
         { []
         }
     {offset
       c8pKO: // global
           if (R1 & 7 == 1) goto c8pKX; else goto u8pLJ;
       c8pKX: // global
           _s8ouf::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8pKU_info;
           R3 = P64[R1 + 7];
           R2 = _s8ouf::P64;
           Sp = Sp + 8;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
       u8pLJ: // global
           Sp = Sp + 16;
           call _c8pLB() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8pKO_info" {
     block_c8pKO_info:
         const _c8pKO;
         const 1;
         const 30;
 },
 _c8pKU() //  [R1]
         { []
         }
     {offset
       c8pKU: // global
           if (R1 & 7 == 1) goto u8pLK; else goto u8pLL;
       u8pLK: // global
           Sp = Sp + 8;
           call _c8pLB() args: 0, res: 0, upd: 0;
       u8pLL: // global
           Sp = Sp + 8;
           call _c8pLx() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8pKU_info" {
     block_c8pKU_info:
         const _c8pKU;
         const 0;
         const 30;
 },
 _c8pLe() //  [R1]
         { []
         }
     {offset
       c8pLe: // global
           if (R1 & 7 == 1) goto u8pLG; else goto c8pLr;
       u8pLG: // global
           Sp = Sp + 16;
           call _c8pLx() args: 0, res: 0, upd: 0;
       c8pLr: // global
           _s8ouk::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8pLp_info;
           R3 = P64[R1 + 6];
           R2 = _s8ouk::P64;
           Sp = Sp + 8;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pLe_info" {
     block_c8pLe_info:
         const _c8pLe;
         const 1;
         const 30;
 },
 _c8pLp() //  [R1]
         { []
         }
     {offset
       c8pLp: // global
           if (R1 & 7 == 1) goto u8pLH; else goto u8pLI;
       u8pLH: // global
           Sp = Sp + 8;
           call _c8pLB() args: 0, res: 0, upd: 0;
       u8pLI: // global
           Sp = Sp + 8;
           call _c8pLx() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8pLp_info" {
     block_c8pLp_info:
         const _c8pLp;
         const 0;
         const 30;
 },
 _c8pLB() //  []
         { []
         }
     {offset
       c8pLB: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8pLx() //  []
         { []
         }
     {offset
       c8pLx: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.488116407 UTC

[section ""data" . GHC.IO.Exception.$fOrdArrayException_$cmax_closure" {
     GHC.IO.Exception.$fOrdArrayException_$cmax_closure:
         const GHC.IO.Exception.$fOrdArrayException_$cmax_info;
 },
 GHC.IO.Exception.$fOrdArrayException_$cmax_entry() //  [R2, R3]
         { []
         }
     {offset
       c8pMQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8pMR; else goto c8pMS;
       c8pMR: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fOrdArrayException_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8pMS: // global
           I64[Sp - 16] = block_c8pMJ_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8pNU; else goto c8pMK;
       u8pNU: // global
           call _c8pMJ(R1) args: 0, res: 0, upd: 0;
       c8pMK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdArrayException_$cmax_info" {
     GHC.IO.Exception.$fOrdArrayException_$cmax_info:
         const GHC.IO.Exception.$fOrdArrayException_$cmax_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8pMJ() //  [R1]
         { []
         }
     {offset
       c8pMJ: // global
           _s8oup::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8pMN; else goto c8pMO;
       c8pMN: // global
           I64[Sp - 8] = block_c8pMV_info;
           _s8our::P64 = R1;
           _s8ous::P64 = P64[R1 + 7];
           R1 = _s8oup::P64;
           P64[Sp] = _s8ous::P64;
           P64[Sp + 8] = _s8our::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8pNS; else goto c8pMX;
       u8pNS: // global
           call _c8pMV(R1) args: 0, res: 0, upd: 0;
       c8pMX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8pMO: // global
           I64[Sp - 8] = block_c8pNl_info;
           _s8our::P64 = R1;
           _s8oux::P64 = P64[R1 + 6];
           R1 = _s8oup::P64;
           P64[Sp] = _s8oux::P64;
           P64[Sp + 8] = _s8our::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8pNT; else goto c8pNn;
       u8pNT: // global
           call _c8pNl(R1) args: 0, res: 0, upd: 0;
       c8pNn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pMJ_info" {
     block_c8pMJ_info:
         const _c8pMJ;
         const 1;
         const 30;
 },
 _c8pMV() //  [R1]
         { []
         }
     {offset
       c8pMV: // global
           if (R1 & 7 == 1) goto c8pN4; else goto u8pNP;
       c8pN4: // global
           I64[Sp] = block_c8pN1_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
       u8pNP: // global
           P64[Sp + 16] = R1;
           Sp = Sp + 16;
           call _c8pNi() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8pMV_info" {
     block_c8pMV_info:
         const _c8pMV;
         const 2;
         const 30;
 },
 _c8pN1() //  [R1]
         { []
         }
     {offset
       c8pN1: // global
           if (R1 & 7 == 1) goto u8pNQ; else goto u8pNR;
       u8pNQ: // global
           P64[Sp + 16] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c8pNi() args: 0, res: 0, upd: 0;
       u8pNR: // global
           Sp = Sp + 16;
           call _c8pNE() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8pN1_info" {
     block_c8pN1_info:
         const _c8pN1;
         const 2;
         const 30;
 },
 _c8pNi() //  []
         { []
         }
     {offset
       c8pNi: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8pNl() //  [R1]
         { []
         }
     {offset
       c8pNl: // global
           if (R1 & 7 == 1) goto u8pNN; else goto c8pNy;
       u8pNN: // global
           Sp = Sp + 16;
           call _c8pNE() args: 0, res: 0, upd: 0;
       c8pNy: // global
           I64[Sp] = block_c8pNw_info;
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pNl_info" {
     block_c8pNl_info:
         const _c8pNl;
         const 2;
         const 30;
 },
 _c8pNw() //  [R1]
         { []
         }
     {offset
       c8pNw: // global
           if (R1 & 7 == 1) goto c8pNI; else goto u8pNO;
       c8pNI: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u8pNO: // global
           Sp = Sp + 16;
           call _c8pNE() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8pNw_info" {
     block_c8pNw_info:
         const _c8pNw;
         const 2;
         const 30;
 },
 _c8pNE() //  []
         { []
         }
     {offset
       c8pNE: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.504621026 UTC

[section ""data" . GHC.IO.Exception.$fOrdArrayException_$c>=_closure" {
     GHC.IO.Exception.$fOrdArrayException_$c>=_closure:
         const GHC.IO.Exception.$fOrdArrayException_$c>=_info;
 },
 GHC.IO.Exception.$fOrdArrayException_$c>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8pOY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8pOZ; else goto c8pP0;
       c8pOZ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fOrdArrayException_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8pP0: // global
           I64[Sp - 16] = block_c8pOR_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8pQ3; else goto c8pOS;
       u8pQ3: // global
           call _c8pOR(R1) args: 0, res: 0, upd: 0;
       c8pOS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdArrayException_$c>=_info" {
     GHC.IO.Exception.$fOrdArrayException_$c>=_info:
         const GHC.IO.Exception.$fOrdArrayException_$c>=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8pOR() //  [R1]
         { []
         }
     {offset
       c8pOR: // global
           _s8ouD::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8pOV; else goto c8pOW;
       c8pOV: // global
           I64[Sp] = block_c8pP3_info;
           _s8ouF::P64 = P64[R1 + 7];
           R1 = _s8ouD::P64;
           P64[Sp + 8] = _s8ouF::P64;
           if (R1 & 7 != 0) goto u8pQ1; else goto c8pP5;
       u8pQ1: // global
           call _c8pP3(R1) args: 0, res: 0, upd: 0;
       c8pP5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8pOW: // global
           I64[Sp] = block_c8pPt_info;
           _s8ouK::P64 = P64[R1 + 6];
           R1 = _s8ouD::P64;
           P64[Sp + 8] = _s8ouK::P64;
           if (R1 & 7 != 0) goto u8pQ2; else goto c8pPv;
       u8pQ2: // global
           call _c8pPt(R1) args: 0, res: 0, upd: 0;
       c8pPv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pOR_info" {
     block_c8pOR_info:
         const _c8pOR;
         const 1;
         const 30;
 },
 _c8pP3() //  [R1]
         { []
         }
     {offset
       c8pP3: // global
           if (R1 & 7 == 1) goto c8pPc; else goto u8pPY;
       c8pPc: // global
           _s8ouF::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8pP9_info;
           R3 = P64[R1 + 7];
           R2 = _s8ouF::P64;
           Sp = Sp + 8;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
       u8pPY: // global
           Sp = Sp + 16;
           call _c8pPQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8pP3_info" {
     block_c8pP3_info:
         const _c8pP3;
         const 1;
         const 30;
 },
 _c8pP9() //  [R1]
         { []
         }
     {offset
       c8pP9: // global
           if (R1 & 7 == 1) goto u8pPZ; else goto u8pQ0;
       u8pPZ: // global
           Sp = Sp + 8;
           call _c8pPQ() args: 0, res: 0, upd: 0;
       u8pQ0: // global
           Sp = Sp + 8;
           call _c8pPM() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8pP9_info" {
     block_c8pP9_info:
         const _c8pP9;
         const 0;
         const 30;
 },
 _c8pPt() //  [R1]
         { []
         }
     {offset
       c8pPt: // global
           if (R1 & 7 == 1) goto u8pPV; else goto c8pPG;
       u8pPV: // global
           Sp = Sp + 16;
           call _c8pPM() args: 0, res: 0, upd: 0;
       c8pPG: // global
           _s8ouK::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8pPE_info;
           R3 = P64[R1 + 6];
           R2 = _s8ouK::P64;
           Sp = Sp + 8;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pPt_info" {
     block_c8pPt_info:
         const _c8pPt;
         const 1;
         const 30;
 },
 _c8pPE() //  [R1]
         { []
         }
     {offset
       c8pPE: // global
           if (R1 & 7 == 1) goto u8pPW; else goto u8pPX;
       u8pPW: // global
           Sp = Sp + 8;
           call _c8pPQ() args: 0, res: 0, upd: 0;
       u8pPX: // global
           Sp = Sp + 8;
           call _c8pPM() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8pPE_info" {
     block_c8pPE_info:
         const _c8pPE;
         const 0;
         const 30;
 },
 _c8pPQ() //  []
         { []
         }
     {offset
       c8pPQ: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8pPM() //  []
         { []
         }
     {offset
       c8pPM: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.517911594 UTC

[section ""data" . GHC.IO.Exception.$fOrdArrayException_$c>_closure" {
     GHC.IO.Exception.$fOrdArrayException_$c>_closure:
         const GHC.IO.Exception.$fOrdArrayException_$c>_info;
 },
 GHC.IO.Exception.$fOrdArrayException_$c>_entry() //  [R2, R3]
         { []
         }
     {offset
       c8pQY: // global
           _s8ouQ::P64 = R3;
           R3 = R2;
           R2 = _s8ouQ::P64;
           call GHC.IO.Exception.$fOrdArrayException_$c<_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdArrayException_$c>_info" {
     GHC.IO.Exception.$fOrdArrayException_$c>_info:
         const GHC.IO.Exception.$fOrdArrayException_$c>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.523802982 UTC

[section ""data" . GHC.IO.Exception.$fOrdArrayException_$cmin_closure" {
     GHC.IO.Exception.$fOrdArrayException_$cmin_closure:
         const GHC.IO.Exception.$fOrdArrayException_$cmin_info;
 },
 GHC.IO.Exception.$fOrdArrayException_$cmin_entry() //  [R2, R3]
         { []
         }
     {offset
       c8pRg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8pRh; else goto c8pRi;
       c8pRh: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fOrdArrayException_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8pRi: // global
           I64[Sp - 16] = block_c8pR9_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8pSk; else goto c8pRa;
       u8pSk: // global
           call _c8pR9(R1) args: 0, res: 0, upd: 0;
       c8pRa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdArrayException_$cmin_info" {
     GHC.IO.Exception.$fOrdArrayException_$cmin_info:
         const GHC.IO.Exception.$fOrdArrayException_$cmin_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8pR9() //  [R1]
         { []
         }
     {offset
       c8pR9: // global
           _s8ouR::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8pRd; else goto c8pRe;
       c8pRd: // global
           I64[Sp - 8] = block_c8pRl_info;
           _s8ouT::P64 = R1;
           _s8ouU::P64 = P64[R1 + 7];
           R1 = _s8ouR::P64;
           P64[Sp] = _s8ouU::P64;
           P64[Sp + 8] = _s8ouT::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8pSi; else goto c8pRn;
       u8pSi: // global
           call _c8pRl(R1) args: 0, res: 0, upd: 0;
       c8pRn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8pRe: // global
           I64[Sp - 8] = block_c8pRL_info;
           _s8ouT::P64 = R1;
           _s8ouZ::P64 = P64[R1 + 6];
           R1 = _s8ouR::P64;
           P64[Sp] = _s8ouZ::P64;
           P64[Sp + 8] = _s8ouT::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8pSj; else goto c8pRN;
       u8pSj: // global
           call _c8pRL(R1) args: 0, res: 0, upd: 0;
       c8pRN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pR9_info" {
     block_c8pR9_info:
         const _c8pR9;
         const 1;
         const 30;
 },
 _c8pRl() //  [R1]
         { []
         }
     {offset
       c8pRl: // global
           if (R1 & 7 == 1) goto c8pRu; else goto u8pSg;
       c8pRu: // global
           I64[Sp] = block_c8pRr_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
       u8pSg: // global
           Sp = Sp + 16;
           call _c8pS8() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8pRl_info" {
     block_c8pRl_info:
         const _c8pRl;
         const 2;
         const 30;
 },
 _c8pRr() //  [R1]
         { []
         }
     {offset
       c8pRr: // global
           if (R1 & 7 == 1) goto u8pSh; else goto c8pRA;
       u8pSh: // global
           Sp = Sp + 16;
           call _c8pS8() args: 0, res: 0, upd: 0;
       c8pRA: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pRr_info" {
     block_c8pRr_info:
         const _c8pRr;
         const 2;
         const 30;
 },
 _c8pRL() //  [R1]
         { []
         }
     {offset
       c8pRL: // global
           if (R1 & 7 == 1) goto u8pSd; else goto c8pRY;
       u8pSd: // global
           P64[Sp + 16] = R1;
           Sp = Sp + 16;
           call _c8pS4() args: 0, res: 0, upd: 0;
       c8pRY: // global
           I64[Sp] = block_c8pRW_info;
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pRL_info" {
     block_c8pRL_info:
         const _c8pRL;
         const 2;
         const 30;
 },
 _c8pRW() //  [R1]
         { []
         }
     {offset
       c8pRW: // global
           if (R1 & 7 == 1) goto u8pSe; else goto u8pSf;
       u8pSe: // global
           Sp = Sp + 16;
           call _c8pS8() args: 0, res: 0, upd: 0;
       u8pSf: // global
           P64[Sp + 16] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c8pS4() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8pRW_info" {
     block_c8pRW_info:
         const _c8pRW;
         const 2;
         const 30;
 },
 _c8pS8() //  []
         { []
         }
     {offset
       c8pS8: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8pS4() //  []
         { []
         }
     {offset
       c8pS4: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.537825121 UTC

[section ""data" . GHC.IO.Exception.$fOrdArrayException_closure" {
     GHC.IO.Exception.$fOrdArrayException_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.IO.Exception.$fEqArrayException_closure+1;
         const GHC.IO.Exception.$fOrdArrayException_$ccompare_closure+2;
         const GHC.IO.Exception.$fOrdArrayException_$c<_closure+2;
         const GHC.IO.Exception.$fOrdArrayException_$c<=_closure+2;
         const GHC.IO.Exception.$fOrdArrayException_$c>_closure+2;
         const GHC.IO.Exception.$fOrdArrayException_$c>=_closure+2;
         const GHC.IO.Exception.$fOrdArrayException_$cmax_closure+2;
         const GHC.IO.Exception.$fOrdArrayException_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.542371029 UTC

[section ""data" . GHC.IO.Exception.$fEqAsyncException_$c==_closure" {
     GHC.IO.Exception.$fEqAsyncException_$c==_closure:
         const GHC.IO.Exception.$fEqAsyncException_$c==_info;
 },
 GHC.IO.Exception.$fEqAsyncException_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c8pTr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8pTs; else goto c8pTt;
       c8pTs: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fEqAsyncException_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8pTt: // global
           I64[Sp - 16] = block_c8pTi_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8pUK; else goto c8pTj;
       u8pUK: // global
           call _c8pTi(R1) args: 0, res: 0, upd: 0;
       c8pTj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fEqAsyncException_$c==_info" {
     GHC.IO.Exception.$fEqAsyncException_$c==_info:
         const GHC.IO.Exception.$fEqAsyncException_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8pTi() //  [R1]
         { []
         }
     {offset
       c8pTi: // global
           _s8ov5::P64 = P64[Sp + 8];
           _c8pTq::P64 = R1 & 7;
           if (_c8pTq::P64 < 3) goto u8pUw; else goto u8pUx;
       u8pUw: // global
           if (_c8pTq::P64 < 2) goto c8pTm; else goto c8pTn;
       c8pTm: // global
           I64[Sp + 8] = block_c8pTw_info;
           R1 = _s8ov5::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8pUG; else goto c8pTy;
       u8pUG: // global
           call _c8pTw(R1) args: 0, res: 0, upd: 0;
       c8pTy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8pTn: // global
           I64[Sp + 8] = block_c8pTL_info;
           R1 = _s8ov5::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8pUH; else goto c8pTN;
       u8pUH: // global
           call _c8pTL(R1) args: 0, res: 0, upd: 0;
       c8pTN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8pUx: // global
           if (_c8pTq::P64 < 4) goto c8pTo; else goto c8pTp;
       c8pTo: // global
           I64[Sp + 8] = block_c8pU0_info;
           R1 = _s8ov5::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8pUI; else goto c8pU2;
       u8pUI: // global
           call _c8pU0(R1) args: 0, res: 0, upd: 0;
       c8pU2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8pTp: // global
           I64[Sp + 8] = block_c8pUf_info;
           R1 = _s8ov5::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8pUJ; else goto c8pUh;
       u8pUJ: // global
           call _c8pUf(R1) args: 0, res: 0, upd: 0;
       c8pUh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pTi_info" {
     block_c8pTi_info:
         const _c8pTi;
         const 1;
         const 30;
 },
 _c8pTw() //  [R1]
         { []
         }
     {offset
       c8pTw: // global
           if (R1 & 7 == 1) goto u8pUy; else goto u8pUz;
       u8pUy: // global
           Sp = Sp + 8;
           call _c8pUr() args: 0, res: 0, upd: 0;
       u8pUz: // global
           Sp = Sp + 8;
           call _c8pUn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8pTw_info" {
     block_c8pTw_info:
         const _c8pTw;
         const 0;
         const 30;
 },
 _c8pTL() //  [R1]
         { []
         }
     {offset
       c8pTL: // global
           if (R1 & 7 == 2) goto u8pUA; else goto u8pUB;
       u8pUA: // global
           Sp = Sp + 8;
           call _c8pUr() args: 0, res: 0, upd: 0;
       u8pUB: // global
           Sp = Sp + 8;
           call _c8pUn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8pTL_info" {
     block_c8pTL_info:
         const _c8pTL;
         const 0;
         const 30;
 },
 _c8pU0() //  [R1]
         { []
         }
     {offset
       c8pU0: // global
           if (R1 & 7 == 3) goto u8pUC; else goto u8pUD;
       u8pUC: // global
           Sp = Sp + 8;
           call _c8pUr() args: 0, res: 0, upd: 0;
       u8pUD: // global
           Sp = Sp + 8;
           call _c8pUn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8pU0_info" {
     block_c8pU0_info:
         const _c8pU0;
         const 0;
         const 30;
 },
 _c8pUf() //  [R1]
         { []
         }
     {offset
       c8pUf: // global
           if (R1 & 7 == 4) goto u8pUE; else goto u8pUF;
       u8pUE: // global
           Sp = Sp + 8;
           call _c8pUr() args: 0, res: 0, upd: 0;
       u8pUF: // global
           Sp = Sp + 8;
           call _c8pUn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8pUf_info" {
     block_c8pUf_info:
         const _c8pUf;
         const 0;
         const 30;
 },
 _c8pUr() //  []
         { []
         }
     {offset
       c8pUr: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8pUn() //  []
         { []
         }
     {offset
       c8pUn: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.557859876 UTC

[section ""data" . GHC.IO.Exception.$fEqAsyncException_$c/=_closure" {
     GHC.IO.Exception.$fEqAsyncException_$c/=_closure:
         const GHC.IO.Exception.$fEqAsyncException_$c/=_info;
 },
 GHC.IO.Exception.$fEqAsyncException_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8pVR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8pVS; else goto c8pVT;
       c8pVS: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fEqAsyncException_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8pVT: // global
           I64[Sp - 16] = block_c8pVI_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8pXa; else goto c8pVJ;
       u8pXa: // global
           call _c8pVI(R1) args: 0, res: 0, upd: 0;
       c8pVJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fEqAsyncException_$c/=_info" {
     GHC.IO.Exception.$fEqAsyncException_$c/=_info:
         const GHC.IO.Exception.$fEqAsyncException_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8pVI() //  [R1]
         { []
         }
     {offset
       c8pVI: // global
           _s8ovc::P64 = P64[Sp + 8];
           _c8pVQ::P64 = R1 & 7;
           if (_c8pVQ::P64 < 3) goto u8pWW; else goto u8pWX;
       u8pWW: // global
           if (_c8pVQ::P64 < 2) goto c8pVM; else goto c8pVN;
       c8pVM: // global
           I64[Sp + 8] = block_c8pVW_info;
           R1 = _s8ovc::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8pX6; else goto c8pVY;
       u8pX6: // global
           call _c8pVW(R1) args: 0, res: 0, upd: 0;
       c8pVY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8pVN: // global
           I64[Sp + 8] = block_c8pWb_info;
           R1 = _s8ovc::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8pX7; else goto c8pWd;
       u8pX7: // global
           call _c8pWb(R1) args: 0, res: 0, upd: 0;
       c8pWd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8pWX: // global
           if (_c8pVQ::P64 < 4) goto c8pVO; else goto c8pVP;
       c8pVO: // global
           I64[Sp + 8] = block_c8pWq_info;
           R1 = _s8ovc::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8pX8; else goto c8pWs;
       u8pX8: // global
           call _c8pWq(R1) args: 0, res: 0, upd: 0;
       c8pWs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8pVP: // global
           I64[Sp + 8] = block_c8pWF_info;
           R1 = _s8ovc::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8pX9; else goto c8pWH;
       u8pX9: // global
           call _c8pWF(R1) args: 0, res: 0, upd: 0;
       c8pWH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pVI_info" {
     block_c8pVI_info:
         const _c8pVI;
         const 1;
         const 30;
 },
 _c8pVW() //  [R1]
         { []
         }
     {offset
       c8pVW: // global
           if (R1 & 7 == 1) goto u8pWY; else goto u8pWZ;
       u8pWY: // global
           Sp = Sp + 8;
           call _c8pWR() args: 0, res: 0, upd: 0;
       u8pWZ: // global
           Sp = Sp + 8;
           call _c8pWN() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8pVW_info" {
     block_c8pVW_info:
         const _c8pVW;
         const 0;
         const 30;
 },
 _c8pWb() //  [R1]
         { []
         }
     {offset
       c8pWb: // global
           if (R1 & 7 == 2) goto u8pX0; else goto u8pX1;
       u8pX0: // global
           Sp = Sp + 8;
           call _c8pWR() args: 0, res: 0, upd: 0;
       u8pX1: // global
           Sp = Sp + 8;
           call _c8pWN() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8pWb_info" {
     block_c8pWb_info:
         const _c8pWb;
         const 0;
         const 30;
 },
 _c8pWq() //  [R1]
         { []
         }
     {offset
       c8pWq: // global
           if (R1 & 7 == 3) goto u8pX2; else goto u8pX3;
       u8pX2: // global
           Sp = Sp + 8;
           call _c8pWR() args: 0, res: 0, upd: 0;
       u8pX3: // global
           Sp = Sp + 8;
           call _c8pWN() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8pWq_info" {
     block_c8pWq_info:
         const _c8pWq;
         const 0;
         const 30;
 },
 _c8pWF() //  [R1]
         { []
         }
     {offset
       c8pWF: // global
           if (R1 & 7 == 4) goto u8pX4; else goto u8pX5;
       u8pX4: // global
           Sp = Sp + 8;
           call _c8pWR() args: 0, res: 0, upd: 0;
       u8pX5: // global
           Sp = Sp + 8;
           call _c8pWN() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8pWF_info" {
     block_c8pWF_info:
         const _c8pWF;
         const 0;
         const 30;
 },
 _c8pWR() //  []
         { []
         }
     {offset
       c8pWR: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8pWN() //  []
         { []
         }
     {offset
       c8pWN: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.571548873 UTC

[section ""data" . GHC.IO.Exception.$fEqAsyncException_closure" {
     GHC.IO.Exception.$fEqAsyncException_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Exception.$fEqAsyncException_$c==_closure+2;
         const GHC.IO.Exception.$fEqAsyncException_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.57410678 UTC

[section ""data" . GHC.IO.Exception.ioe_filename_closure" {
     GHC.IO.Exception.ioe_filename_closure:
         const GHC.IO.Exception.ioe_filename_info;
 },
 GHC.IO.Exception.ioe_filename_entry() //  [R2]
         { []
         }
     {offset
       c8pYc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8pYd; else goto c8pYe;
       c8pYd: // global
           R2 = R2;
           R1 = GHC.IO.Exception.ioe_filename_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8pYe: // global
           I64[Sp - 8] = block_c8pY9_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8pYi; else goto c8pYa;
       u8pYi: // global
           call _c8pY9(R1) args: 0, res: 0, upd: 0;
       c8pYa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.ioe_filename_info" {
     GHC.IO.Exception.ioe_filename_info:
         const GHC.IO.Exception.ioe_filename_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8pY9() //  [R1]
         { []
         }
     {offset
       c8pY9: // global
           R1 = P64[R1 + 47] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pY9_info" {
     block_c8pY9_info:
         const _c8pY9;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.579773767 UTC

[section ""data" . GHC.IO.Exception.ioe_errno_closure" {
     GHC.IO.Exception.ioe_errno_closure:
         const GHC.IO.Exception.ioe_errno_info;
 },
 GHC.IO.Exception.ioe_errno_entry() //  [R2]
         { []
         }
     {offset
       c8pYC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8pYD; else goto c8pYE;
       c8pYD: // global
           R2 = R2;
           R1 = GHC.IO.Exception.ioe_errno_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8pYE: // global
           I64[Sp - 8] = block_c8pYz_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8pYI; else goto c8pYA;
       u8pYI: // global
           call _c8pYz(R1) args: 0, res: 0, upd: 0;
       c8pYA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.ioe_errno_info" {
     GHC.IO.Exception.ioe_errno_info:
         const GHC.IO.Exception.ioe_errno_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8pYz() //  [R1]
         { []
         }
     {offset
       c8pYz: // global
           R1 = P64[R1 + 39] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pYz_info" {
     block_c8pYz_info:
         const _c8pYz;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.58555789 UTC

[section ""data" . GHC.IO.Exception.ioe_description_closure" {
     GHC.IO.Exception.ioe_description_closure:
         const GHC.IO.Exception.ioe_description_info;
 },
 GHC.IO.Exception.ioe_description_entry() //  [R2]
         { []
         }
     {offset
       c8pZ2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8pZ3; else goto c8pZ4;
       c8pZ3: // global
           R2 = R2;
           R1 = GHC.IO.Exception.ioe_description_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8pZ4: // global
           I64[Sp - 8] = block_c8pYZ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8pZ8; else goto c8pZ0;
       u8pZ8: // global
           call _c8pYZ(R1) args: 0, res: 0, upd: 0;
       c8pZ0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.ioe_description_info" {
     GHC.IO.Exception.ioe_description_info:
         const GHC.IO.Exception.ioe_description_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8pYZ() //  [R1]
         { []
         }
     {offset
       c8pYZ: // global
           R1 = P64[R1 + 31] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pYZ_info" {
     block_c8pYZ_info:
         const _c8pYZ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.590912151 UTC

[section ""data" . GHC.IO.Exception.ioe_location_closure" {
     GHC.IO.Exception.ioe_location_closure:
         const GHC.IO.Exception.ioe_location_info;
 },
 GHC.IO.Exception.ioe_location_entry() //  [R2]
         { []
         }
     {offset
       c8pZs: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8pZt; else goto c8pZu;
       c8pZt: // global
           R2 = R2;
           R1 = GHC.IO.Exception.ioe_location_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8pZu: // global
           I64[Sp - 8] = block_c8pZp_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8pZy; else goto c8pZq;
       u8pZy: // global
           call _c8pZp(R1) args: 0, res: 0, upd: 0;
       c8pZq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.ioe_location_info" {
     GHC.IO.Exception.ioe_location_info:
         const GHC.IO.Exception.ioe_location_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8pZp() //  [R1]
         { []
         }
     {offset
       c8pZp: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pZp_info" {
     block_c8pZp_info:
         const _c8pZp;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.59630367 UTC

[section ""data" . GHC.IO.Exception.ioe_type_closure" {
     GHC.IO.Exception.ioe_type_closure:
         const GHC.IO.Exception.ioe_type_info;
 },
 GHC.IO.Exception.ioe_type_entry() //  [R2]
         { []
         }
     {offset
       c8pZS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8pZT; else goto c8pZU;
       c8pZT: // global
           R2 = R2;
           R1 = GHC.IO.Exception.ioe_type_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8pZU: // global
           I64[Sp - 8] = block_c8pZP_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8pZY; else goto c8pZQ;
       u8pZY: // global
           call _c8pZP(R1) args: 0, res: 0, upd: 0;
       c8pZQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.ioe_type_info" {
     GHC.IO.Exception.ioe_type_info:
         const GHC.IO.Exception.ioe_type_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8pZP() //  [R1]
         { []
         }
     {offset
       c8pZP: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8pZP_info" {
     block_c8pZP_info:
         const _c8pZP;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.602358654 UTC

[section ""data" . GHC.IO.Exception.ioe_handle_closure" {
     GHC.IO.Exception.ioe_handle_closure:
         const GHC.IO.Exception.ioe_handle_info;
 },
 GHC.IO.Exception.ioe_handle_entry() //  [R2]
         { []
         }
     {offset
       c8q0i: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8q0j; else goto c8q0k;
       c8q0j: // global
           R2 = R2;
           R1 = GHC.IO.Exception.ioe_handle_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8q0k: // global
           I64[Sp - 8] = block_c8q0f_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8q0o; else goto c8q0g;
       u8q0o: // global
           call _c8q0f(R1) args: 0, res: 0, upd: 0;
       c8q0g: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.ioe_handle_info" {
     GHC.IO.Exception.ioe_handle_info:
         const GHC.IO.Exception.ioe_handle_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8q0f() //  [R1]
         { []
         }
     {offset
       c8q0f: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8q0f_info" {
     block_c8q0f_info:
         const _c8q0f;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.608177322 UTC

[section ""data" . GHC.IO.Exception.userError_closure" {
     GHC.IO.Exception.userError_closure:
         const GHC.IO.Exception.userError_info;
 },
 GHC.IO.Exception.userError_entry() //  [R2]
         { []
         }
     {offset
       c8q0G: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c8q0K; else goto c8q0J;
       c8q0K: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = GHC.IO.Exception.userError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8q0J: // global
           I64[Hp - 48] = GHC.IO.Exception.IOError_con_info;
           P64[Hp - 40] = GHC.Base.Nothing_closure+1;
           P64[Hp - 32] = GHC.IO.Exception.UserError_closure+1;
           P64[Hp - 24] = GHC.Types.[]_closure+1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = GHC.Base.Nothing_closure+1;
           P64[Hp] = GHC.Base.Nothing_closure+1;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.userError_info" {
     GHC.IO.Exception.userError_info:
         const GHC.IO.Exception.userError_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.611889426 UTC

[section ""cstring" . GHC.IO.Exception.unsupportedOperation2_bytes" {
     GHC.IO.Exception.unsupportedOperation2_bytes:
         I8[] [79,112,101,114,97,116,105,111,110,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.61429367 UTC

[section ""data" . GHC.IO.Exception.unsupportedOperation1_closure" {
     GHC.IO.Exception.unsupportedOperation1_closure:
         const GHC.IO.Exception.unsupportedOperation1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.unsupportedOperation1_entry() //  [R1]
         { []
         }
     {offset
       c8q17: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8q18; else goto c8q19;
       c8q18: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8q19: // global
           (_c8q14::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8q14::I64 == 0) goto c8q16; else goto c8q15;
       c8q16: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8q15: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8q14::I64;
           R2 = GHC.IO.Exception.unsupportedOperation2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.unsupportedOperation1_info" {
     GHC.IO.Exception.unsupportedOperation1_info:
         const GHC.IO.Exception.unsupportedOperation1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.618056997 UTC

[section ""data" . GHC.IO.Exception.unsupportedOperation_closure" {
     GHC.IO.Exception.unsupportedOperation_closure:
         const GHC.IO.Exception.IOError_con_info;
         const GHC.Base.Nothing_closure+1;
         const GHC.IO.Exception.UnsupportedOperation_closure+1;
         const GHC.Types.[]_closure+1;
         const GHC.IO.Exception.unsupportedOperation1_closure;
         const GHC.Base.Nothing_closure+1;
         const GHC.Base.Nothing_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.619806751 UTC

[section ""data" . GHC.IO.Exception.untangle1_closure" {
     GHC.IO.Exception.untangle1_closure:
         const GHC.Types.C#_con_info;
         const 32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.622857474 UTC

[section ""data" . GHC.IO.Exception.untangle4_closure" {
     GHC.IO.Exception.untangle4_closure:
         const GHC.IO.Exception.untangle4_info;
 },
 GHC.IO.Exception.untangle4_entry() //  [R2]
         { []
         }
     {offset
       c8q1r: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8q1s; else goto c8q1t;
       c8q1s: // global
           R2 = R2;
           R1 = GHC.IO.Exception.untangle4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8q1t: // global
           I64[Sp - 8] = block_c8q1o_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8q1B; else goto c8q1p;
       u8q1B: // global
           call _c8q1o(R1) args: 0, res: 0, upd: 0;
       c8q1p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.untangle4_info" {
     GHC.IO.Exception.untangle4_info:
         const GHC.IO.Exception.untangle4_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8q1o() //  [R1]
         { []
         }
     {offset
       c8q1o: // global
           if (I64[R1 + 7] == 124) goto c8q1A; else goto c8q1z;
       c8q1A: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8q1z: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8q1o_info" {
     block_c8q1o_info:
         const _c8q1o;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.627909017 UTC

[section ""cstring" . GHC.IO.Exception.untangle3_bytes" {
     GHC.IO.Exception.untangle3_bytes:
         I8[] [10]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.630253738 UTC

[section ""data" . GHC.IO.Exception.untangle2_closure" {
     GHC.IO.Exception.untangle2_closure:
         const GHC.IO.Exception.untangle2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.untangle2_entry() //  [R1]
         { []
         }
     {offset
       c8q1X: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8q1Y; else goto c8q1Z;
       c8q1Y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8q1Z: // global
           (_c8q1U::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8q1U::I64 == 0) goto c8q1W; else goto c8q1V;
       c8q1W: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8q1V: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8q1U::I64;
           R2 = GHC.IO.Exception.untangle3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.untangle2_info" {
     GHC.IO.Exception.untangle2_info:
         const GHC.IO.Exception.untangle2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.63769982 UTC

[section ""data" . GHC.IO.Exception.untangle_closure" {
     GHC.IO.Exception.untangle_closure:
         const GHC.IO.Exception.untangle_info;
         const 0;
 },
 sat_s8owi_entry() //  [R1]
         { []
         }
     {offset
       c8q2O: // global
           R3 = GHC.IO.Exception.untangle2_closure;
           R2 = P64[R1 + 16];
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8owi_info" {
     sat_s8owi_info:
         const sat_s8owi_entry;
         const 1;
         const 4294967312;
         const S8oB9_srt+544;
 },
 sat_s8owj_entry() //  [R1]
         { []
         }
     {offset
       c8q2R: // global
           _s8owj::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8q2S; else goto c8q2T;
       c8q2T: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8q2V; else goto c8q2U;
       c8q2V: // global
           HpAlloc = 24;
           goto c8q2S;
       c8q2S: // global
           R1 = _s8owj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8q2U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8owj::P64;
           _s8owa::P64 = P64[_s8owj::P64 + 16];
           _s8owh::P64 = P64[_s8owj::P64 + 24];
           I64[Hp - 16] = sat_s8owi_info;
           P64[Hp] = _s8owh::P64;
           R3 = Hp - 16;
           R2 = _s8owa::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8owj_info" {
     sat_s8owj_info:
         const sat_s8owj_entry;
         const 2;
         const 4294967314;
         const S8oB9_srt+544;
 },
 sat_s8owk_entry() //  [R1]
         { []
         }
     {offset
       c8q2W: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8q30; else goto c8q2Z;
       c8q30: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8q2Z: // global
           _s8owa::P64 = P64[R1 + 16];
           _s8owh::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_s8owj_info;
           P64[Hp - 8] = _s8owa::P64;
           P64[Hp] = _s8owh::P64;
           R3 = Hp - 24;
           R2 = GHC.IO.Exception.$fExceptionArrayException3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8owk_info" {
     sat_s8owk_info:
         const sat_s8owk_entry;
         const 2;
         const 4294967314;
         const S8oB9_srt+544;
 },
 GHC.IO.Exception.untangle_entry() //  [R2, R3]
         { []
         }
     {offset
       c8q31: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8q32; else goto c8q33;
       c8q32: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.untangle_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8q33: // global
           I64[Sp - 16] = block_c8q2c_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.CString.unpackCStringUtf8#_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.untangle_info" {
     GHC.IO.Exception.untangle_info:
         const GHC.IO.Exception.untangle_entry;
         const 0;
         const 12884901902;
         const 8589934605;
         const S8oB9_srt+544;
 },
 _c8q2c() //  [R1]
         { []
         }
     {offset
       c8q2c: // global
           I64[Sp] = block_c8q2g_info;
           R3 = R1;
           R2 = GHC.IO.Exception.untangle4_closure+1;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8q2c_info" {
     block_c8q2c_info:
         const _c8q2c;
         const 1;
         const 4294967326;
         const S8oB9_srt+544;
 },
 _c8q2g() //  [R1, R2]
         { []
         }
     {offset
       c8q2g: // global
           I64[Sp - 8] = block_c8q2k_info;
           _s8owd::P64 = R1;
           R1 = R2;
           P64[Sp] = _s8owd::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8q3q; else goto c8q2l;
       u8q3q: // global
           call _c8q2k(R1) args: 0, res: 0, upd: 0;
       c8q2l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8q2g_info" {
     block_c8q2g_info:
         const _c8q2g;
         const 1;
         const 4294967326;
         const S8oB9_srt+544;
 },
 _c8q2k() //  [R1]
         { []
         }
     {offset
       c8q2k: // global
           if (R1 & 7 == 1) goto c8q3c; else goto c8q3e;
       c8q3c: // global
           P64[Sp + 8] = P64[Sp + 8];
           P64[Sp] = GHC.Types.[]_closure+1;
           call _c8q2A() args: 0, res: 0, upd: 0;
       c8q3e: // global
           I64[Sp - 8] = block_c8q2q_info;
           _s8own::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s8own::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8q3r; else goto c8q2r;
       u8q3r: // global
           call _c8q2q(R1) args: 0, res: 0, upd: 0;
       c8q2r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8q2k_info" {
     block_c8q2k_info:
         const _c8q2k;
         const 2;
         const 4294967326;
         const S8oB9_srt+544;
 },
 _c8q2q() //  [R1]
         { []
         }
     {offset
       c8q2q: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8q3h; else goto c8q3g;
       c8q3h: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8q3g: // global
           _s8owd::P64 = P64[Sp + 16];
           if (I64[R1 + 7] == 124) goto c8q3k; else goto c8q3j;
       c8q3k: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.IO.Exception.untangle1_closure+1;
           P64[Hp] = P64[Sp + 8];
           P64[Sp + 16] = _s8owd::P64;
           P64[Sp + 8] = Hp - 14;
           Sp = Sp + 8;
           goto u8q3u;
       c8q3j: // global
           Hp = Hp - 24;
           P64[Sp + 8] = GHC.Types.[]_closure+1;
           P64[Sp + 16] = _s8owd::P64;
           Sp = Sp + 8;
           goto u8q3u;
       u8q3u: // global
           call _c8q2A() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8q2q_info" {
     block_c8q2q_info:
         const _c8q2q;
         const 3;
         const 4294967326;
         const S8oB9_srt+544;
 },
 _c8q2A() //  []
         { []
         }
     {offset
       c8q2A: // global
           Hp = Hp + 32;
           _s8owg::P64 = P64[Sp + 8];
           _s8owh::P64 = P64[Sp];
           if (Hp > HpLim) (likely: False) goto c8q38; else goto c8q37;
       c8q38: // global
           HpAlloc = 32;
           I64[Sp + 8] = block_c8q2z_info;
           R2 = _s8owh::P64;
           R1 = _s8owg::P64;
           Sp = Sp + 8;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c8q37: // global
           I64[Hp - 24] = sat_s8owk_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _s8owh::P64;
           R3 = Hp - 24;
           R2 = _s8owg::P64;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 _c8q2z() //  [R1, R2]
         { []
         }
     {offset
       c8q2z: // global
           P64[Sp] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c8q2A() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8q2z_info" {
     block_c8q2z_info:
         const _c8q2z;
         const 1;
         const 4294967326;
         const S8oB9_srt+544;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.659675514 UTC

[section ""data" . GHC.IO.Exception.$fOrdAsyncException_$ccompare_closure" {
     GHC.IO.Exception.$fOrdAsyncException_$ccompare_closure:
         const GHC.IO.Exception.$fOrdAsyncException_$ccompare_info;
 },
 GHC.IO.Exception.$fOrdAsyncException_$ccompare_entry() //  [R2, R3]
         { []
         }
     {offset
       c8q4C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8q4D; else goto c8q4E;
       c8q4D: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fOrdAsyncException_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8q4E: // global
           I64[Sp - 16] = block_c8q4t_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8q6n; else goto c8q4u;
       u8q6n: // global
           call _c8q4t(R1) args: 0, res: 0, upd: 0;
       c8q4u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdAsyncException_$ccompare_info" {
     GHC.IO.Exception.$fOrdAsyncException_$ccompare_info:
         const GHC.IO.Exception.$fOrdAsyncException_$ccompare_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8q4t() //  [R1]
         { []
         }
     {offset
       c8q4t: // global
           _s8owt::P64 = P64[Sp + 8];
           _c8q4B::P64 = R1 & 7;
           if (_c8q4B::P64 < 3) goto u8q61; else goto u8q62;
       u8q61: // global
           if (_c8q4B::P64 < 2) goto c8q4x; else goto c8q4y;
       c8q4x: // global
           I64[Sp + 8] = block_c8q4H_info;
           R1 = _s8owt::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8q6j; else goto c8q4J;
       u8q6j: // global
           call _c8q4H(R1) args: 0, res: 0, upd: 0;
       c8q4J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8q4y: // global
           I64[Sp + 8] = block_c8q54_info;
           R1 = _s8owt::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8q6k; else goto c8q56;
       u8q6k: // global
           call _c8q54(R1) args: 0, res: 0, upd: 0;
       c8q56: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8q62: // global
           if (_c8q4B::P64 < 4) goto c8q4z; else goto c8q4A;
       c8q4z: // global
           I64[Sp + 8] = block_c8q5r_info;
           R1 = _s8owt::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8q6l; else goto c8q5t;
       u8q6l: // global
           call _c8q5r(R1) args: 0, res: 0, upd: 0;
       c8q5t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8q4A: // global
           I64[Sp + 8] = block_c8q5K_info;
           R1 = _s8owt::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8q6m; else goto c8q5M;
       u8q6m: // global
           call _c8q5K(R1) args: 0, res: 0, upd: 0;
       c8q5M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8q4t_info" {
     block_c8q4t_info:
         const _c8q4t;
         const 1;
         const 30;
 },
 _c8q4H() //  [R1]
         { []
         }
     {offset
       c8q4H: // global
           _c8q60::P64 = R1 & 7;
           if (_c8q60::P64 < 2) goto u8q67; else goto u8q63;
       u8q67: // global
           Sp = Sp + 8;
           call _c8q5W() args: 0, res: 0, upd: 0;
       u8q63: // global
           if (_c8q60::P64 != 3) goto u8q69; else goto u8q69;
       u8q69: // global
           Sp = Sp + 8;
           call _c8q5H() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8q4H_info" {
     block_c8q4H_info:
         const _c8q4H;
         const 0;
         const 30;
 },
 _c8q54() //  [R1]
         { []
         }
     {offset
       c8q54: // global
           _c8q5Z::P64 = R1 & 7;
           if (_c8q5Z::P64 < 3) goto u8q64; else goto u8q65;
       u8q64: // global
           if (_c8q5Z::P64 < 2) goto u8q6b; else goto u8q6a;
       u8q6b: // global
           Sp = Sp + 8;
           call _c8q5S() args: 0, res: 0, upd: 0;
       u8q6a: // global
           Sp = Sp + 8;
           call _c8q5W() args: 0, res: 0, upd: 0;
       u8q65: // global
           if (_c8q5Z::P64 < 4) goto u8q6d; else goto u8q6d;
       u8q6d: // global
           Sp = Sp + 8;
           call _c8q5H() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8q54_info" {
     block_c8q54_info:
         const _c8q54;
         const 0;
         const 30;
 },
 _c8q5r() //  [R1]
         { []
         }
     {offset
       c8q5r: // global
           _c8q5Y::P64 = R1 & 7;
           if (_c8q5Y::P64 != 3) goto u8q66; else goto u8q6e;
       u8q66: // global
           if (_c8q5Y::P64 != 4) goto u8q6g; else goto u8q6f;
       u8q6g: // global
           Sp = Sp + 8;
           call _c8q5S() args: 0, res: 0, upd: 0;
       u8q6f: // global
           Sp = Sp + 8;
           call _c8q5H() args: 0, res: 0, upd: 0;
       u8q6e: // global
           Sp = Sp + 8;
           call _c8q5W() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8q5r_info" {
     block_c8q5r_info:
         const _c8q5r;
         const 0;
         const 30;
 },
 _c8q5H() //  []
         { []
         }
     {offset
       c8q5H: // global
           R1 = GHC.Types.LT_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8q5K() //  [R1]
         { []
         }
     {offset
       c8q5K: // global
           if (R1 & 7 == 4) goto u8q6h; else goto u8q6i;
       u8q6h: // global
           Sp = Sp + 8;
           call _c8q5W() args: 0, res: 0, upd: 0;
       u8q6i: // global
           Sp = Sp + 8;
           call _c8q5S() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8q5K_info" {
     block_c8q5K_info:
         const _c8q5K;
         const 0;
         const 30;
 },
 _c8q5W() //  []
         { []
         }
     {offset
       c8q5W: // global
           R1 = GHC.Types.EQ_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8q5S() //  []
         { []
         }
     {offset
       c8q5S: // global
           R1 = GHC.Types.GT_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.676598601 UTC

[section ""data" . GHC.IO.Exception.$fOrdAsyncException_$c<_closure" {
     GHC.IO.Exception.$fOrdAsyncException_$c<_closure:
         const GHC.IO.Exception.$fOrdAsyncException_$c<_info;
 },
 GHC.IO.Exception.$fOrdAsyncException_$c<_entry() //  [R2, R3]
         { []
         }
     {offset
       c8q7x: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8q7y; else goto c8q7z;
       c8q7y: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fOrdAsyncException_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8q7z: // global
           I64[Sp - 16] = block_c8q7o_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8q8X; else goto c8q7p;
       u8q8X: // global
           call _c8q7o(R1) args: 0, res: 0, upd: 0;
       c8q7p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdAsyncException_$c<_info" {
     GHC.IO.Exception.$fOrdAsyncException_$c<_info:
         const GHC.IO.Exception.$fOrdAsyncException_$c<_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8q7o() //  [R1]
         { []
         }
     {offset
       c8q7o: // global
           _s8owA::P64 = P64[Sp + 8];
           _c8q7w::P64 = R1 & 7;
           if (_c8q7w::P64 < 3) goto u8q8H; else goto u8q8I;
       u8q8H: // global
           if (_c8q7w::P64 < 2) goto c8q7s; else goto c8q7t;
       c8q7s: // global
           I64[Sp + 8] = block_c8q7C_info;
           R1 = _s8owA::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8q8T; else goto c8q7E;
       u8q8T: // global
           call _c8q7C(R1) args: 0, res: 0, upd: 0;
       c8q7E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8q7t: // global
           I64[Sp + 8] = block_c8q7Z_info;
           R1 = _s8owA::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8q8U; else goto c8q81;
       u8q8U: // global
           call _c8q7Z(R1) args: 0, res: 0, upd: 0;
       c8q81: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8q8I: // global
           if (_c8q7w::P64 < 4) goto c8q7u; else goto c8q7v;
       c8q7u: // global
           I64[Sp + 8] = block_c8q8i_info;
           R1 = _s8owA::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8q8V; else goto c8q8k;
       u8q8V: // global
           call _c8q8i(R1) args: 0, res: 0, upd: 0;
       c8q8k: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8q7v: // global
           I64[Sp + 8] = block_c8q8x_info;
           R1 = _s8owA::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8q8W; else goto c8q8z;
       u8q8W: // global
           call _c8q8x() args: 0, res: 0, upd: 0;
       c8q8z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8q7o_info" {
     block_c8q7o_info:
         const _c8q7o;
         const 1;
         const 30;
 },
 _c8q7C() //  [R1]
         { []
         }
     {offset
       c8q7C: // global
           _c8q8G::P64 = R1 & 7;
           if (_c8q8G::P64 < 2) goto u8q8L; else goto u8q8J;
       u8q8L: // global
           Sp = Sp + 8;
           call _c8q8q() args: 0, res: 0, upd: 0;
       u8q8J: // global
           if (_c8q8G::P64 != 3) goto u8q8N; else goto u8q8N;
       u8q8N: // global
           Sp = Sp + 8;
           call _c8q8u() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8q7C_info" {
     block_c8q7C_info:
         const _c8q7C;
         const 0;
         const 30;
 },
 _c8q7Z() //  [R1]
         { []
         }
     {offset
       c8q7Z: // global
           _c8q8F::P64 = R1 & 7;
           if (_c8q8F::P64 != 3) goto u8q8K; else goto u8q8O;
       u8q8K: // global
           if (_c8q8F::P64 != 4) goto u8q8Q; else goto u8q8P;
       u8q8Q: // global
           Sp = Sp + 8;
           call _c8q8q() args: 0, res: 0, upd: 0;
       u8q8P: // global
           Sp = Sp + 8;
           goto u8q91;
       u8q8O: // global
           Sp = Sp + 8;
           goto u8q91;
       u8q91: // global
           call _c8q8u() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8q7Z_info" {
     block_c8q7Z_info:
         const _c8q7Z;
         const 0;
         const 30;
 },
 _c8q8i() //  [R1]
         { []
         }
     {offset
       c8q8i: // global
           if (R1 & 7 == 4) goto u8q8R; else goto u8q8S;
       u8q8R: // global
           Sp = Sp + 8;
           call _c8q8u() args: 0, res: 0, upd: 0;
       u8q8S: // global
           Sp = Sp + 8;
           call _c8q8q() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8q8i_info" {
     block_c8q8i_info:
         const _c8q8i;
         const 0;
         const 30;
 },
 _c8q8u() //  []
         { []
         }
     {offset
       c8q8u: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8q8q() //  []
         { []
         }
     {offset
       c8q8q: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8q8x() //  []
         { []
         }
     {offset
       c8q8x: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8q8x_info" {
     block_c8q8x_info:
         const _c8q8x;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.693379544 UTC

[section ""data" . GHC.IO.Exception.$fOrdAsyncException_$c<=_closure" {
     GHC.IO.Exception.$fOrdAsyncException_$c<=_closure:
         const GHC.IO.Exception.$fOrdAsyncException_$c<=_info;
 },
 GHC.IO.Exception.$fOrdAsyncException_$c<=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8qa1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8qa2; else goto c8qa3;
       c8qa2: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fOrdAsyncException_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8qa3: // global
           I64[Sp - 16] = block_c8q9S_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8qbr; else goto c8q9T;
       u8qbr: // global
           call _c8q9S(R1) args: 0, res: 0, upd: 0;
       c8q9T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdAsyncException_$c<=_info" {
     GHC.IO.Exception.$fOrdAsyncException_$c<=_info:
         const GHC.IO.Exception.$fOrdAsyncException_$c<=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8q9S() //  [R1]
         { []
         }
     {offset
       c8q9S: // global
           _s8owG::P64 = P64[Sp + 8];
           _c8qa0::P64 = R1 & 7;
           if (_c8qa0::P64 < 3) goto u8qbb; else goto u8qbc;
       u8qbb: // global
           if (_c8qa0::P64 < 2) goto c8q9W; else goto c8q9X;
       c8q9W: // global
           I64[Sp + 8] = block_c8qa6_info;
           R1 = _s8owG::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8qbn; else goto c8qa8;
       u8qbn: // global
           call _c8qa6(R1) args: 0, res: 0, upd: 0;
       c8qa8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8q9X: // global
           I64[Sp + 8] = block_c8qat_info;
           R1 = _s8owG::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8qbo; else goto c8qav;
       u8qbo: // global
           call _c8qat(R1) args: 0, res: 0, upd: 0;
       c8qav: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8qbc: // global
           if (_c8qa0::P64 < 4) goto c8q9Y; else goto c8q9Z;
       c8q9Y: // global
           I64[Sp + 8] = block_c8qaM_info;
           R1 = _s8owG::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8qbp; else goto c8qaO;
       u8qbp: // global
           call _c8qaM(R1) args: 0, res: 0, upd: 0;
       c8qaO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8q9Z: // global
           I64[Sp + 8] = block_c8qb1_info;
           R1 = _s8owG::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8qbq; else goto c8qb3;
       u8qbq: // global
           call _c8qb1() args: 0, res: 0, upd: 0;
       c8qb3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8q9S_info" {
     block_c8q9S_info:
         const _c8q9S;
         const 1;
         const 30;
 },
 _c8qa6() //  [R1]
         { []
         }
     {offset
       c8qa6: // global
           _c8qba::P64 = R1 & 7;
           if (_c8qba::P64 < 2) goto u8qbf; else goto u8qbd;
       u8qbf: // global
           Sp = Sp + 8;
           call _c8qaU() args: 0, res: 0, upd: 0;
       u8qbd: // global
           if (_c8qba::P64 != 3) goto u8qbh; else goto u8qbh;
       u8qbh: // global
           Sp = Sp + 8;
           call _c8qaY() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8qa6_info" {
     block_c8qa6_info:
         const _c8qa6;
         const 0;
         const 30;
 },
 _c8qat() //  [R1]
         { []
         }
     {offset
       c8qat: // global
           _c8qb9::P64 = R1 & 7;
           if (_c8qb9::P64 != 3) goto u8qbe; else goto u8qbi;
       u8qbe: // global
           if (_c8qb9::P64 != 4) goto u8qbk; else goto u8qbj;
       u8qbk: // global
           Sp = Sp + 8;
           call _c8qaU() args: 0, res: 0, upd: 0;
       u8qbj: // global
           Sp = Sp + 8;
           goto u8qbv;
       u8qbi: // global
           Sp = Sp + 8;
           goto u8qbv;
       u8qbv: // global
           call _c8qaY() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8qat_info" {
     block_c8qat_info:
         const _c8qat;
         const 0;
         const 30;
 },
 _c8qaM() //  [R1]
         { []
         }
     {offset
       c8qaM: // global
           if (R1 & 7 == 4) goto u8qbl; else goto u8qbm;
       u8qbl: // global
           Sp = Sp + 8;
           call _c8qaY() args: 0, res: 0, upd: 0;
       u8qbm: // global
           Sp = Sp + 8;
           call _c8qaU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8qaM_info" {
     block_c8qaM_info:
         const _c8qaM;
         const 0;
         const 30;
 },
 _c8qaY() //  []
         { []
         }
     {offset
       c8qaY: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8qaU() //  []
         { []
         }
     {offset
       c8qaU: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8qb1() //  []
         { []
         }
     {offset
       c8qb1: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qb1_info" {
     block_c8qb1_info:
         const _c8qb1;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.708619604 UTC

[section ""data" . GHC.IO.Exception.$fOrdAsyncException_$cmax_closure" {
     GHC.IO.Exception.$fOrdAsyncException_$cmax_closure:
         const GHC.IO.Exception.$fOrdAsyncException_$cmax_info;
 },
 GHC.IO.Exception.$fOrdAsyncException_$cmax_entry() //  [R2, R3]
         { []
         }
     {offset
       c8qcv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8qcw; else goto c8qcx;
       c8qcw: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fOrdAsyncException_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8qcx: // global
           I64[Sp - 16] = block_c8qcm_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8qdu; else goto c8qcn;
       u8qdu: // global
           call _c8qcm(R1) args: 0, res: 0, upd: 0;
       c8qcn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdAsyncException_$cmax_info" {
     GHC.IO.Exception.$fOrdAsyncException_$cmax_info:
         const GHC.IO.Exception.$fOrdAsyncException_$cmax_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8qcm() //  [R1]
         { []
         }
     {offset
       c8qcm: // global
           _s8owN::P64 = P64[Sp + 8];
           _c8qcu::P64 = R1 & 7;
           if (_c8qcu::P64 < 3) goto u8qdk; else goto u8qdl;
       u8qdk: // global
           if (_c8qcu::P64 < 2) goto c8qcq; else goto c8qcr;
       c8qcq: // global
           R1 = _s8owN::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8qcr: // global
           I64[Sp + 8] = block_c8qcD_info;
           R1 = _s8owN::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8qdr; else goto c8qcF;
       u8qdr: // global
           call _c8qcD(R1) args: 0, res: 0, upd: 0;
       c8qcF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8qdl: // global
           if (_c8qcu::P64 < 4) goto c8qcs; else goto c8qct;
       c8qcs: // global
           I64[Sp + 8] = block_c8qcW_info;
           R1 = _s8owN::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8qds; else goto c8qcY;
       u8qds: // global
           call _c8qcW(R1) args: 0, res: 0, upd: 0;
       c8qcY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8qct: // global
           I64[Sp + 8] = block_c8qdb_info;
           R1 = _s8owN::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8qdt; else goto c8qdd;
       u8qdt: // global
           call _c8qdb() args: 0, res: 0, upd: 0;
       c8qdd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qcm_info" {
     block_c8qcm_info:
         const _c8qcm;
         const 1;
         const 30;
 },
 _c8qcD() //  [R1]
         { []
         }
     {offset
       c8qcD: // global
           _c8qdj::P64 = R1 & 7;
           if (_c8qdj::P64 != 3) goto u8qdm; else goto u8qdn;
       u8qdm: // global
           if (_c8qdj::P64 != 4) goto c8qcL; else goto u8qdo;
       c8qcL: // global
           R1 = GHC.IO.Exception.HeapOverflow_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u8qdo: // global
           Sp = Sp + 8;
           call _c8qd8() args: 0, res: 0, upd: 0;
       u8qdn: // global
           Sp = Sp + 8;
           call _c8qd4() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8qcD_info" {
     block_c8qcD_info:
         const _c8qcD;
         const 0;
         const 30;
 },
 _c8qcW() //  [R1]
         { []
         }
     {offset
       c8qcW: // global
           if (R1 & 7 == 4) goto u8qdp; else goto u8qdq;
       u8qdp: // global
           Sp = Sp + 8;
           call _c8qd8() args: 0, res: 0, upd: 0;
       u8qdq: // global
           Sp = Sp + 8;
           call _c8qd4() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8qcW_info" {
     block_c8qcW_info:
         const _c8qcW;
         const 0;
         const 30;
 },
 _c8qd8() //  []
         { []
         }
     {offset
       c8qd8: // global
           R1 = GHC.IO.Exception.UserInterrupt_closure+4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8qd4() //  []
         { []
         }
     {offset
       c8qd4: // global
           R1 = GHC.IO.Exception.ThreadKilled_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8qdb() //  []
         { []
         }
     {offset
       c8qdb: // global
           R1 = GHC.IO.Exception.UserInterrupt_closure+4;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qdb_info" {
     block_c8qdb_info:
         const _c8qdb;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.723461678 UTC

[section ""data" . GHC.IO.Exception.$fOrdAsyncException_$c>=_closure" {
     GHC.IO.Exception.$fOrdAsyncException_$c>=_closure:
         const GHC.IO.Exception.$fOrdAsyncException_$c>=_info;
 },
 GHC.IO.Exception.$fOrdAsyncException_$c>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8qep: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8qeq; else goto c8qer;
       c8qeq: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fOrdAsyncException_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8qer: // global
           I64[Sp - 16] = block_c8qeg_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8qfP; else goto c8qeh;
       u8qfP: // global
           call _c8qeg(R1) args: 0, res: 0, upd: 0;
       c8qeh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdAsyncException_$c>=_info" {
     GHC.IO.Exception.$fOrdAsyncException_$c>=_info:
         const GHC.IO.Exception.$fOrdAsyncException_$c>=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8qeg() //  [R1]
         { []
         }
     {offset
       c8qeg: // global
           _s8owU::P64 = P64[Sp + 8];
           _c8qeo::P64 = R1 & 7;
           if (_c8qeo::P64 < 3) goto u8qfz; else goto u8qfA;
       u8qfz: // global
           if (_c8qeo::P64 < 2) goto c8qek; else goto c8qel;
       c8qek: // global
           I64[Sp + 8] = block_c8qeu_info;
           R1 = _s8owU::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8qfL; else goto c8qew;
       u8qfL: // global
           call _c8qeu(R1) args: 0, res: 0, upd: 0;
       c8qew: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8qel: // global
           I64[Sp + 8] = block_c8qeR_info;
           R1 = _s8owU::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8qfM; else goto c8qeT;
       u8qfM: // global
           call _c8qeR(R1) args: 0, res: 0, upd: 0;
       c8qeT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8qfA: // global
           if (_c8qeo::P64 < 4) goto c8qem; else goto c8qen;
       c8qem: // global
           I64[Sp + 8] = block_c8qfa_info;
           R1 = _s8owU::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8qfN; else goto c8qfc;
       u8qfN: // global
           call _c8qfa(R1) args: 0, res: 0, upd: 0;
       c8qfc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8qen: // global
           I64[Sp + 8] = block_c8qfp_info;
           R1 = _s8owU::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8qfO; else goto c8qfr;
       u8qfO: // global
           call _c8qfp() args: 0, res: 0, upd: 0;
       c8qfr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qeg_info" {
     block_c8qeg_info:
         const _c8qeg;
         const 1;
         const 30;
 },
 _c8qeu() //  [R1]
         { []
         }
     {offset
       c8qeu: // global
           _c8qfy::P64 = R1 & 7;
           if (_c8qfy::P64 < 2) goto u8qfD; else goto u8qfB;
       u8qfD: // global
           Sp = Sp + 8;
           call _c8qfi() args: 0, res: 0, upd: 0;
       u8qfB: // global
           if (_c8qfy::P64 != 3) goto u8qfF; else goto u8qfF;
       u8qfF: // global
           Sp = Sp + 8;
           call _c8qfm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8qeu_info" {
     block_c8qeu_info:
         const _c8qeu;
         const 0;
         const 30;
 },
 _c8qeR() //  [R1]
         { []
         }
     {offset
       c8qeR: // global
           _c8qfx::P64 = R1 & 7;
           if (_c8qfx::P64 != 3) goto u8qfC; else goto u8qfG;
       u8qfC: // global
           if (_c8qfx::P64 != 4) goto u8qfI; else goto u8qfH;
       u8qfI: // global
           Sp = Sp + 8;
           call _c8qfi() args: 0, res: 0, upd: 0;
       u8qfH: // global
           Sp = Sp + 8;
           goto u8qfT;
       u8qfG: // global
           Sp = Sp + 8;
           goto u8qfT;
       u8qfT: // global
           call _c8qfm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8qeR_info" {
     block_c8qeR_info:
         const _c8qeR;
         const 0;
         const 30;
 },
 _c8qfa() //  [R1]
         { []
         }
     {offset
       c8qfa: // global
           if (R1 & 7 == 4) goto u8qfJ; else goto u8qfK;
       u8qfJ: // global
           Sp = Sp + 8;
           call _c8qfm() args: 0, res: 0, upd: 0;
       u8qfK: // global
           Sp = Sp + 8;
           call _c8qfi() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8qfa_info" {
     block_c8qfa_info:
         const _c8qfa;
         const 0;
         const 30;
 },
 _c8qfm() //  []
         { []
         }
     {offset
       c8qfm: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8qfi() //  []
         { []
         }
     {offset
       c8qfi: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8qfp() //  []
         { []
         }
     {offset
       c8qfp: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qfp_info" {
     block_c8qfp_info:
         const _c8qfp;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.739105621 UTC

[section ""data" . GHC.IO.Exception.$fOrdAsyncException_$c>_closure" {
     GHC.IO.Exception.$fOrdAsyncException_$c>_closure:
         const GHC.IO.Exception.$fOrdAsyncException_$c>_info;
 },
 GHC.IO.Exception.$fOrdAsyncException_$c>_entry() //  [R2, R3]
         { []
         }
     {offset
       c8qgK: // global
           _s8ox1::P64 = R3;
           R3 = R2;
           R2 = _s8ox1::P64;
           call GHC.IO.Exception.$fOrdAsyncException_$c<_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdAsyncException_$c>_info" {
     GHC.IO.Exception.$fOrdAsyncException_$c>_info:
         const GHC.IO.Exception.$fOrdAsyncException_$c>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.745508137 UTC

[section ""data" . GHC.IO.Exception.$fOrdAsyncException_$cmin_closure" {
     GHC.IO.Exception.$fOrdAsyncException_$cmin_closure:
         const GHC.IO.Exception.$fOrdAsyncException_$cmin_info;
 },
 GHC.IO.Exception.$fOrdAsyncException_$cmin_entry() //  [R2, R3]
         { []
         }
     {offset
       c8qh4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8qh5; else goto c8qh6;
       c8qh5: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.$fOrdAsyncException_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8qh6: // global
           I64[Sp - 16] = block_c8qgV_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8qhZ; else goto c8qgW;
       u8qhZ: // global
           call _c8qgV(R1) args: 0, res: 0, upd: 0;
       c8qgW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fOrdAsyncException_$cmin_info" {
     GHC.IO.Exception.$fOrdAsyncException_$cmin_info:
         const GHC.IO.Exception.$fOrdAsyncException_$cmin_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8qgV() //  [R1]
         { []
         }
     {offset
       c8qgV: // global
           _s8ox2::P64 = P64[Sp + 8];
           _c8qh3::P64 = R1 & 7;
           if (_c8qh3::P64 < 3) goto u8qhT; else goto u8qhU;
       u8qhT: // global
           if (_c8qh3::P64 < 2) goto c8qgZ; else goto c8qh0;
       c8qgZ: // global
           I64[Sp + 8] = block_c8qh9_info;
           R1 = _s8ox2::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8qhW; else goto c8qhb;
       u8qhW: // global
           call _c8qh9() args: 0, res: 0, upd: 0;
       c8qhb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8qh0: // global
           I64[Sp + 8] = block_c8qhi_info;
           R1 = _s8ox2::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8qhX; else goto c8qhk;
       u8qhX: // global
           call _c8qhi(R1) args: 0, res: 0, upd: 0;
       c8qhk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8qhU: // global
           if (_c8qh3::P64 < 4) goto c8qh1; else goto c8qh2;
       c8qh1: // global
           I64[Sp + 8] = block_c8qhB_info;
           R1 = _s8ox2::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8qhY; else goto c8qhD;
       u8qhY: // global
           call _c8qhB(R1) args: 0, res: 0, upd: 0;
       c8qhD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8qh2: // global
           R1 = _s8ox2::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qgV_info" {
     block_c8qgV_info:
         const _c8qgV;
         const 1;
         const 30;
 },
 _c8qh9() //  []
         { []
         }
     {offset
       c8qh9: // global
           R1 = GHC.IO.Exception.StackOverflow_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qh9_info" {
     block_c8qh9_info:
         const _c8qh9;
         const 0;
         const 30;
 },
 _c8qhi() //  [R1]
         { []
         }
     {offset
       c8qhi: // global
           _c8qhS::P64 = R1 & 7;
           if (_c8qhS::P64 == 3) goto c8qhy; else goto u8qhV;
       u8qhV: // global
           if (_c8qhS::P64 == 4) goto c8qhy; else goto c8qhq;
       c8qhy: // global
           R1 = GHC.IO.Exception.HeapOverflow_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8qhq: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qhi_info" {
     block_c8qhi_info:
         const _c8qhi;
         const 0;
         const 30;
 },
 _c8qhB() //  [R1]
         { []
         }
     {offset
       c8qhB: // global
           if (R1 & 7 == 4) goto c8qhN; else goto c8qhJ;
       c8qhN: // global
           R1 = GHC.IO.Exception.ThreadKilled_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8qhJ: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qhB_info" {
     block_c8qhB_info:
         const _c8qhB;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.757979866 UTC

[section ""data" . GHC.IO.Exception.$fOrdAsyncException_closure" {
     GHC.IO.Exception.$fOrdAsyncException_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.IO.Exception.$fEqAsyncException_closure+1;
         const GHC.IO.Exception.$fOrdAsyncException_$ccompare_closure+2;
         const GHC.IO.Exception.$fOrdAsyncException_$c<_closure+2;
         const GHC.IO.Exception.$fOrdAsyncException_$c<=_closure+2;
         const GHC.IO.Exception.$fOrdAsyncException_$c>_closure+2;
         const GHC.IO.Exception.$fOrdAsyncException_$c>=_closure+2;
         const GHC.IO.Exception.$fOrdAsyncException_$cmax_closure+2;
         const GHC.IO.Exception.$fOrdAsyncException_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.760091186 UTC

[section ""cstring" . GHC.IO.Exception.$trModule4_bytes" {
     GHC.IO.Exception.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.762814925 UTC

[section ""data" . GHC.IO.Exception.$trModule3_closure" {
     GHC.IO.Exception.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.764726601 UTC

[section ""cstring" . GHC.IO.Exception.$trModule2_bytes" {
     GHC.IO.Exception.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.766962399 UTC

[section ""data" . GHC.IO.Exception.$trModule1_closure" {
     GHC.IO.Exception.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.769075894 UTC

[section ""data" . GHC.IO.Exception.$trModule_closure" {
     GHC.IO.Exception.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.Exception.$trModule3_closure+1;
         const GHC.IO.Exception.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.771543655 UTC

[section ""data" . $krep_r8j3f_closure" {
     $krep_r8j3f_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.773667233 UTC

[section ""data" . $krep1_r8j3g_closure" {
     $krep1_r8j3g_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Foreign.C.Types.$tcCInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.775821126 UTC

[section ""data" . $krep2_r8j3h_closure" {
     $krep2_r8j3h_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.778308042 UTC

[section ""data" . $krep3_r8j3i_closure" {
     $krep3_r8j3i_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Handle.Types.$tcHandle_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.780339773 UTC

[section ""data" . $krep4_r8j3j_closure" {
     $krep4_r8j3j_closure:
         const :_con_info;
         const $krep1_r8j3g_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.782322375 UTC

[section ""data" . $krep5_r8j3k_closure" {
     $krep5_r8j3k_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep4_r8j3j_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.784083087 UTC

[section ""data" . $krep6_r8j3l_closure" {
     $krep6_r8j3l_closure:
         const :_con_info;
         const $krep3_r8j3i_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.7858358 UTC

[section ""data" . $krep7_r8j3m_closure" {
     $krep7_r8j3m_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep6_r8j3l_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.787547771 UTC

[section ""data" . $krep8_r8j3n_closure" {
     $krep8_r8j3n_closure:
         const :_con_info;
         const $krep2_r8j3h_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.789334142 UTC

[section ""data" . $krep9_r8j3o_closure" {
     $krep9_r8j3o_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep8_r8j3n_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.79153216 UTC

[section ""data" . $krep10_r8j3p_closure" {
     $krep10_r8j3p_closure:
         const :_con_info;
         const $krep9_r8j3o_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.793665648 UTC

[section ""data" . $krep11_r8j3q_closure" {
     $krep11_r8j3q_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep10_r8j3p_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.795376843 UTC

[section ""data" . $krep12_r8j3r_closure" {
     $krep12_r8j3r_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.797108414 UTC

[section ""data" . $krep13_r8j3s_closure" {
     $krep13_r8j3s_closure:
         const :_con_info;
         const $krep12_r8j3r_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.798827352 UTC

[section ""data" . $krep14_r8j3t_closure" {
     $krep14_r8j3t_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Exception.$tcException_closure;
         const $krep13_r8j3s_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.800459123 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar5_bytes" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar5_bytes:
         I8[] [66,108,111,99,107,101,100,73,110,100,101,102,105,110,105,116,101,108,121,79,110,77,86,97,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.802132701 UTC

[section ""data" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar4_closure" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar4_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar5_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.803825006 UTC

[section ""data" . GHC.IO.Exception.$tcBlockedIndefinitelyOnMVar_closure" {
     GHC.IO.Exception.$tcBlockedIndefinitelyOnMVar_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar4_closure+1;
         const GHC.Types.krep$*_closure;
         const 5532209509574600699;
         const 13011219155706606307;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.806116693 UTC

[section ""data" . GHC.IO.Exception.$tc'BlockedIndefinitelyOnMVar1_closure" {
     GHC.IO.Exception.$tc'BlockedIndefinitelyOnMVar1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Exception.$tcBlockedIndefinitelyOnMVar_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.807792815 UTC

[section ""cstring" . GHC.IO.Exception.$tc'BlockedIndefinitelyOnMVar3_bytes" {
     GHC.IO.Exception.$tc'BlockedIndefinitelyOnMVar3_bytes:
         I8[] [39,66,108,111,99,107,101,100,73,110,100,101,102,105,110,105,116,101,108,121,79,110,77,86,97,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.809513179 UTC

[section ""data" . GHC.IO.Exception.$tc'BlockedIndefinitelyOnMVar2_closure" {
     GHC.IO.Exception.$tc'BlockedIndefinitelyOnMVar2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'BlockedIndefinitelyOnMVar3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.811281747 UTC

[section ""data" . GHC.IO.Exception.$tc'BlockedIndefinitelyOnMVar_closure" {
     GHC.IO.Exception.$tc'BlockedIndefinitelyOnMVar_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'BlockedIndefinitelyOnMVar2_closure+1;
         const GHC.IO.Exception.$tc'BlockedIndefinitelyOnMVar1_closure+1;
         const 6834741829236713234;
         const 5957659317954655195;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.814688763 UTC

[section ""data" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar3_closure" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar3_closure:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar3_entry() //  [R1]
         { []
         }
     {offset
       c8qjf: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c8qjg; else goto c8qjh;
       c8qjg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8qjh: // global
           (_c8qj7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8qj7::I64 == 0) goto c8qj9; else goto c8qj8;
       c8qj9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8qj8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8qj7::I64;
           I64[Sp - 24] = block_c8qja_info;
           R6 = 0;
           R5 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar4_closure+1;
           R4 = GHC.IO.Exception.$trModule_closure+1;
           R3 = 13011219155706606307;
           R2 = 5532209509574600699;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar3_info" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar3_info:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar3_entry;
         const 0;
         const 4294967317;
         const S8oB9_srt+560;
 },
 _c8qja() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c8qja: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c8qjb() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8qja_info" {
     block_c8qja_info:
         const _c8qja;
         const 0;
         const 30;
 },
 _c8qjb() //  []
         { []
         }
     {offset
       c8qjb: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8qjk; else goto c8qjj;
       c8qjk: // global
           HpAlloc = 48;
           I64[Sp] = block_c8qjb_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c8qjj: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8qjb_info" {
     block_c8qjb_info:
         const _c8qjb;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.82289046 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM5_bytes" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM5_bytes:
         I8[] [66,108,111,99,107,101,100,73,110,100,101,102,105,110,105,116,101,108,121,79,110,83,84,77]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.824581839 UTC

[section ""data" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM4_closure" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM4_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM5_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.826423515 UTC

[section ""data" . GHC.IO.Exception.$tcBlockedIndefinitelyOnSTM_closure" {
     GHC.IO.Exception.$tcBlockedIndefinitelyOnSTM_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM4_closure+1;
         const GHC.Types.krep$*_closure;
         const 13946898568638194917;
         const 3504019511763148288;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.828240054 UTC

[section ""data" . GHC.IO.Exception.$tc'BlockedIndefinitelyOnSTM1_closure" {
     GHC.IO.Exception.$tc'BlockedIndefinitelyOnSTM1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Exception.$tcBlockedIndefinitelyOnSTM_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.830295973 UTC

[section ""cstring" . GHC.IO.Exception.$tc'BlockedIndefinitelyOnSTM3_bytes" {
     GHC.IO.Exception.$tc'BlockedIndefinitelyOnSTM3_bytes:
         I8[] [39,66,108,111,99,107,101,100,73,110,100,101,102,105,110,105,116,101,108,121,79,110,83,84,77]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.832016101 UTC

[section ""data" . GHC.IO.Exception.$tc'BlockedIndefinitelyOnSTM2_closure" {
     GHC.IO.Exception.$tc'BlockedIndefinitelyOnSTM2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'BlockedIndefinitelyOnSTM3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.833756303 UTC

[section ""data" . GHC.IO.Exception.$tc'BlockedIndefinitelyOnSTM_closure" {
     GHC.IO.Exception.$tc'BlockedIndefinitelyOnSTM_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'BlockedIndefinitelyOnSTM2_closure+1;
         const GHC.IO.Exception.$tc'BlockedIndefinitelyOnSTM1_closure+1;
         const 13856829326869447687;
         const 12209020643191939554;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.837123198 UTC

[section ""data" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM3_closure" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM3_closure:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM3_entry() //  [R1]
         { []
         }
     {offset
       c8qk5: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c8qk6; else goto c8qk7;
       c8qk6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8qk7: // global
           (_c8qjX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8qjX::I64 == 0) goto c8qjZ; else goto c8qjY;
       c8qjZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8qjY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8qjX::I64;
           I64[Sp - 24] = block_c8qk0_info;
           R6 = 0;
           R5 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM4_closure+1;
           R4 = GHC.IO.Exception.$trModule_closure+1;
           R3 = 3504019511763148288;
           R2 = 13946898568638194917;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM3_info" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM3_info:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM3_entry;
         const 0;
         const 4294967317;
         const S8oB9_srt+560;
 },
 _c8qk0() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c8qk0: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c8qk1() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8qk0_info" {
     block_c8qk0_info:
         const _c8qk0;
         const 0;
         const 30;
 },
 _c8qk1() //  []
         { []
         }
     {offset
       c8qk1: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8qka; else goto c8qk9;
       c8qka: // global
           HpAlloc = 48;
           I64[Sp] = block_c8qk1_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c8qk9: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8qk1_info" {
     block_c8qk1_info:
         const _c8qk1;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.84443364 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionDeadlock5_bytes" {
     GHC.IO.Exception.$fExceptionDeadlock5_bytes:
         I8[] [68,101,97,100,108,111,99,107]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.846086761 UTC

[section ""data" . GHC.IO.Exception.$fExceptionDeadlock4_closure" {
     GHC.IO.Exception.$fExceptionDeadlock4_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$fExceptionDeadlock5_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.847835376 UTC

[section ""data" . GHC.IO.Exception.$tcDeadlock_closure" {
     GHC.IO.Exception.$tcDeadlock_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$fExceptionDeadlock4_closure+1;
         const GHC.Types.krep$*_closure;
         const 18363794241794644491;
         const 11186984538024031318;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.849655548 UTC

[section ""data" . GHC.IO.Exception.$tc'Deadlock1_closure" {
     GHC.IO.Exception.$tc'Deadlock1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Exception.$tcDeadlock_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.851959338 UTC

[section ""cstring" . GHC.IO.Exception.$tc'Deadlock3_bytes" {
     GHC.IO.Exception.$tc'Deadlock3_bytes:
         I8[] [39,68,101,97,100,108,111,99,107]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.853921955 UTC

[section ""data" . GHC.IO.Exception.$tc'Deadlock2_closure" {
     GHC.IO.Exception.$tc'Deadlock2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'Deadlock3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.855652061 UTC

[section ""data" . GHC.IO.Exception.$tc'Deadlock_closure" {
     GHC.IO.Exception.$tc'Deadlock_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'Deadlock2_closure+1;
         const GHC.IO.Exception.$tc'Deadlock1_closure+1;
         const 8732553870978897242;
         const 16079179228471909431;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.858994996 UTC

[section ""data" . GHC.IO.Exception.$fExceptionDeadlock3_closure" {
     GHC.IO.Exception.$fExceptionDeadlock3_closure:
         const GHC.IO.Exception.$fExceptionDeadlock3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionDeadlock3_entry() //  [R1]
         { []
         }
     {offset
       c8qkV: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c8qkW; else goto c8qkX;
       c8qkW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8qkX: // global
           (_c8qkN::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8qkN::I64 == 0) goto c8qkP; else goto c8qkO;
       c8qkP: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8qkO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8qkN::I64;
           I64[Sp - 24] = block_c8qkQ_info;
           R6 = 0;
           R5 = GHC.IO.Exception.$fExceptionDeadlock4_closure+1;
           R4 = GHC.IO.Exception.$trModule_closure+1;
           R3 = 11186984538024031318;
           R2 = 18363794241794644491;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionDeadlock3_info" {
     GHC.IO.Exception.$fExceptionDeadlock3_info:
         const GHC.IO.Exception.$fExceptionDeadlock3_entry;
         const 0;
         const 4294967317;
         const S8oB9_srt+560;
 },
 _c8qkQ() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c8qkQ: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c8qkR() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8qkQ_info" {
     block_c8qkQ_info:
         const _c8qkQ;
         const 0;
         const 30;
 },
 _c8qkR() //  []
         { []
         }
     {offset
       c8qkR: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8ql0; else goto c8qkZ;
       c8ql0: // global
           HpAlloc = 48;
           I64[Sp] = block_c8qkR_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c8qkZ: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8qkR_info" {
     block_c8qkR_info:
         const _c8qkR;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.867855037 UTC

[section ""data" . GHC.IO.Exception.$fExceptionDeadlock_$cfromException_closure" {
     GHC.IO.Exception.$fExceptionDeadlock_$cfromException_closure:
         const GHC.IO.Exception.$fExceptionDeadlock_$cfromException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionDeadlock_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c8qlA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8qlE; else goto c8qlF;
       c8qlE: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionDeadlock_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8qlF: // global
           I64[Sp - 8] = block_c8qlx_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8qm0; else goto c8qly;
       u8qm0: // global
           call _c8qlx(R1) args: 0, res: 0, upd: 0;
       c8qly: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionDeadlock_$cfromException_info" {
     GHC.IO.Exception.$fExceptionDeadlock_$cfromException_info:
         const GHC.IO.Exception.$fExceptionDeadlock_$cfromException_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S8oB9_srt+568;
 },
 _c8qlx() //  [R1]
         { []
         }
     {offset
       c8qlx: // global
           I64[Sp - 8] = block_c8qlD_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qlx_info" {
     block_c8qlx_info:
         const _c8qlx;
         const 0;
         const 21474836510;
         const S8oB9_srt+568;
 },
 _c8qlD() //  [R1]
         { []
         }
     {offset
       c8qlD: // global
           I64[Sp] = block_c8qlK_info;
           R3 = GHC.IO.Exception.$fExceptionDeadlock3_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qlD_info" {
     block_c8qlD_info:
         const _c8qlD;
         const 1;
         const 21474836510;
         const S8oB9_srt+568;
 },
 _c8qlK() //  [R1]
         { []
         }
     {offset
       c8qlK: // global
           if (R1 & 7 == 1) goto c8qlR; else goto c8qlV;
       c8qlR: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8qlV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8qlY; else goto c8qlX;
       c8qlY: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8qlX: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qlK_info" {
     block_c8qlK_info:
         const _c8qlK;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.876475618 UTC

[section ""data" . GHC.IO.Exception.$fExceptionDeadlock_closure" {
     GHC.IO.Exception.$fExceptionDeadlock_closure:
         const GHC.Exception.C:Exception_con_info;
         const GHC.IO.Exception.$fExceptionDeadlock3_closure;
         const GHC.IO.Exception.$fShowDeadlock_closure+1;
         const GHC.IO.Exception.$fExceptionDeadlock_$ctoException_closure+1;
         const GHC.IO.Exception.$fExceptionDeadlock_$cfromException_closure+1;
         const GHC.IO.Exception.$fExceptionDeadlock_$cshow_closure+1;
         const 0;
 },
 section ""data" . GHC.IO.Exception.$fExceptionDeadlock_$ctoException_closure" {
     GHC.IO.Exception.$fExceptionDeadlock_$ctoException_closure:
         const GHC.IO.Exception.$fExceptionDeadlock_$ctoException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionDeadlock_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c8qmw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8qmA; else goto c8qmz;
       c8qmA: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionDeadlock_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8qmz: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = GHC.IO.Exception.$fExceptionDeadlock_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionDeadlock_$ctoException_info" {
     GHC.IO.Exception.$fExceptionDeadlock_$ctoException_info:
         const GHC.IO.Exception.$fExceptionDeadlock_$ctoException_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S8oB9_srt+592;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.880792478 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionAllocationLimitExceeded5_bytes" {
     GHC.IO.Exception.$fExceptionAllocationLimitExceeded5_bytes:
         I8[] [65,108,108,111,99,97,116,105,111,110,76,105,109,105,116,69,120,99,101,101,100,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.882500367 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAllocationLimitExceeded4_closure" {
     GHC.IO.Exception.$fExceptionAllocationLimitExceeded4_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded5_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.884762302 UTC

[section ""data" . GHC.IO.Exception.$tcAllocationLimitExceeded_closure" {
     GHC.IO.Exception.$tcAllocationLimitExceeded_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded4_closure+1;
         const GHC.Types.krep$*_closure;
         const 13160607835047152551;
         const 6828489586181860176;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.886769655 UTC

[section ""data" . GHC.IO.Exception.$tc'AllocationLimitExceeded1_closure" {
     GHC.IO.Exception.$tc'AllocationLimitExceeded1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Exception.$tcAllocationLimitExceeded_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.888442786 UTC

[section ""cstring" . GHC.IO.Exception.$tc'AllocationLimitExceeded3_bytes" {
     GHC.IO.Exception.$tc'AllocationLimitExceeded3_bytes:
         I8[] [39,65,108,108,111,99,97,116,105,111,110,76,105,109,105,116,69,120,99,101,101,100,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.890371762 UTC

[section ""data" . GHC.IO.Exception.$tc'AllocationLimitExceeded2_closure" {
     GHC.IO.Exception.$tc'AllocationLimitExceeded2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'AllocationLimitExceeded3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.892027907 UTC

[section ""data" . GHC.IO.Exception.$tc'AllocationLimitExceeded_closure" {
     GHC.IO.Exception.$tc'AllocationLimitExceeded_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'AllocationLimitExceeded2_closure+1;
         const GHC.IO.Exception.$tc'AllocationLimitExceeded1_closure+1;
         const 14911686161474736107;
         const 16735957051754280572;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.895396702 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAllocationLimitExceeded3_closure" {
     GHC.IO.Exception.$fExceptionAllocationLimitExceeded3_closure:
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionAllocationLimitExceeded3_entry() //  [R1]
         { []
         }
     {offset
       c8qn1: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c8qn2; else goto c8qn3;
       c8qn2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8qn3: // global
           (_c8qmT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8qmT::I64 == 0) goto c8qmV; else goto c8qmU;
       c8qmV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8qmU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8qmT::I64;
           I64[Sp - 24] = block_c8qmW_info;
           R6 = 0;
           R5 = GHC.IO.Exception.$fExceptionAllocationLimitExceeded4_closure+1;
           R4 = GHC.IO.Exception.$trModule_closure+1;
           R3 = 6828489586181860176;
           R2 = 13160607835047152551;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionAllocationLimitExceeded3_info" {
     GHC.IO.Exception.$fExceptionAllocationLimitExceeded3_info:
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded3_entry;
         const 0;
         const 4294967317;
         const S8oB9_srt+560;
 },
 _c8qmW() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c8qmW: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c8qmX() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8qmW_info" {
     block_c8qmW_info:
         const _c8qmW;
         const 0;
         const 30;
 },
 _c8qmX() //  []
         { []
         }
     {offset
       c8qmX: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8qn6; else goto c8qn5;
       c8qn6: // global
           HpAlloc = 48;
           I64[Sp] = block_c8qmX_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c8qn5: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8qmX_info" {
     block_c8qmX_info:
         const _c8qmX;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.902791441 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionCompactionFailed4_bytes" {
     GHC.IO.Exception.$fExceptionCompactionFailed4_bytes:
         I8[] [67,111,109,112,97,99,116,105,111,110,70,97,105,108,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.904443071 UTC

[section ""data" . GHC.IO.Exception.$fExceptionCompactionFailed3_closure" {
     GHC.IO.Exception.$fExceptionCompactionFailed3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$fExceptionCompactionFailed4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.906245807 UTC

[section ""data" . GHC.IO.Exception.$tcCompactionFailed_closure" {
     GHC.IO.Exception.$tcCompactionFailed_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$fExceptionCompactionFailed3_closure+1;
         const GHC.Types.krep$*_closure;
         const 7633933266579528523;
         const 6393060685738357435;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.908031661 UTC

[section ""data" . $krep15_r8j3u_closure" {
     $krep15_r8j3u_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Exception.$tcCompactionFailed_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.909793749 UTC

[section ""data" . GHC.IO.Exception.$tc'CompactionFailed1_closure" {
     GHC.IO.Exception.$tc'CompactionFailed1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r8j3o_closure+1;
         const $krep15_r8j3u_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.911520358 UTC

[section ""cstring" . GHC.IO.Exception.$tc'CompactionFailed3_bytes" {
     GHC.IO.Exception.$tc'CompactionFailed3_bytes:
         I8[] [39,67,111,109,112,97,99,116,105,111,110,70,97,105,108,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.913173069 UTC

[section ""data" . GHC.IO.Exception.$tc'CompactionFailed2_closure" {
     GHC.IO.Exception.$tc'CompactionFailed2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'CompactionFailed3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.915877951 UTC

[section ""data" . GHC.IO.Exception.$tc'CompactionFailed_closure" {
     GHC.IO.Exception.$tc'CompactionFailed_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'CompactionFailed2_closure+1;
         const GHC.IO.Exception.$tc'CompactionFailed1_closure+4;
         const 5917738941224226344;
         const 8436844331187314000;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.919206978 UTC

[section ""data" . GHC.IO.Exception.$fExceptionCompactionFailed2_closure" {
     GHC.IO.Exception.$fExceptionCompactionFailed2_closure:
         const GHC.IO.Exception.$fExceptionCompactionFailed2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionCompactionFailed2_entry() //  [R1]
         { []
         }
     {offset
       c8qnS: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c8qnT; else goto c8qnU;
       c8qnT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8qnU: // global
           (_c8qnK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8qnK::I64 == 0) goto c8qnM; else goto c8qnL;
       c8qnM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8qnL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8qnK::I64;
           I64[Sp - 24] = block_c8qnN_info;
           R6 = 0;
           R5 = GHC.IO.Exception.$fExceptionCompactionFailed3_closure+1;
           R4 = GHC.IO.Exception.$trModule_closure+1;
           R3 = 6393060685738357435;
           R2 = 7633933266579528523;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionCompactionFailed2_info" {
     GHC.IO.Exception.$fExceptionCompactionFailed2_info:
         const GHC.IO.Exception.$fExceptionCompactionFailed2_entry;
         const 0;
         const 4294967317;
         const S8oB9_srt+560;
 },
 _c8qnN() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c8qnN: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c8qnO() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8qnN_info" {
     block_c8qnN_info:
         const _c8qnN;
         const 0;
         const 30;
 },
 _c8qnO() //  []
         { []
         }
     {offset
       c8qnO: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8qnX; else goto c8qnW;
       c8qnX: // global
           HpAlloc = 48;
           I64[Sp] = block_c8qnO_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c8qnW: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8qnO_info" {
     block_c8qnO_info:
         const _c8qnO;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.926638981 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionAssertionFailed4_bytes" {
     GHC.IO.Exception.$fExceptionAssertionFailed4_bytes:
         I8[] [65,115,115,101,114,116,105,111,110,70,97,105,108,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.928393664 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAssertionFailed3_closure" {
     GHC.IO.Exception.$fExceptionAssertionFailed3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$fExceptionAssertionFailed4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.930209347 UTC

[section ""data" . GHC.IO.Exception.$tcAssertionFailed_closure" {
     GHC.IO.Exception.$tcAssertionFailed_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$fExceptionAssertionFailed3_closure+1;
         const GHC.Types.krep$*_closure;
         const 7013231185527166567;
         const 11481669896152761825;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.93200078 UTC

[section ""data" . $krep16_r8j3v_closure" {
     $krep16_r8j3v_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Exception.$tcAssertionFailed_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.933747422 UTC

[section ""data" . GHC.IO.Exception.$tc'AssertionFailed1_closure" {
     GHC.IO.Exception.$tc'AssertionFailed1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r8j3o_closure+1;
         const $krep16_r8j3v_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.935391835 UTC

[section ""cstring" . GHC.IO.Exception.$tc'AssertionFailed3_bytes" {
     GHC.IO.Exception.$tc'AssertionFailed3_bytes:
         I8[] [39,65,115,115,101,114,116,105,111,110,70,97,105,108,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.937091237 UTC

[section ""data" . GHC.IO.Exception.$tc'AssertionFailed2_closure" {
     GHC.IO.Exception.$tc'AssertionFailed2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'AssertionFailed3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.938913299 UTC

[section ""data" . GHC.IO.Exception.$tc'AssertionFailed_closure" {
     GHC.IO.Exception.$tc'AssertionFailed_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'AssertionFailed2_closure+1;
         const GHC.IO.Exception.$tc'AssertionFailed1_closure+4;
         const 6421416346863765662;
         const 16131786633010342764;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.942572267 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAssertionFailed2_closure" {
     GHC.IO.Exception.$fExceptionAssertionFailed2_closure:
         const GHC.IO.Exception.$fExceptionAssertionFailed2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionAssertionFailed2_entry() //  [R1]
         { []
         }
     {offset
       c8qoJ: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c8qoK; else goto c8qoL;
       c8qoK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8qoL: // global
           (_c8qoB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8qoB::I64 == 0) goto c8qoD; else goto c8qoC;
       c8qoD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8qoC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8qoB::I64;
           I64[Sp - 24] = block_c8qoE_info;
           R6 = 0;
           R5 = GHC.IO.Exception.$fExceptionAssertionFailed3_closure+1;
           R4 = GHC.IO.Exception.$trModule_closure+1;
           R3 = 11481669896152761825;
           R2 = 7013231185527166567;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionAssertionFailed2_info" {
     GHC.IO.Exception.$fExceptionAssertionFailed2_info:
         const GHC.IO.Exception.$fExceptionAssertionFailed2_entry;
         const 0;
         const 4294967317;
         const S8oB9_srt+560;
 },
 _c8qoE() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c8qoE: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c8qoF() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8qoE_info" {
     block_c8qoE_info:
         const _c8qoE;
         const 0;
         const 30;
 },
 _c8qoF() //  []
         { []
         }
     {offset
       c8qoF: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8qoO; else goto c8qoN;
       c8qoO: // global
           HpAlloc = 48;
           I64[Sp] = block_c8qoF_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c8qoN: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8qoF_info" {
     block_c8qoF_info:
         const _c8qoF;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.951613413 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAssertionFailed_$cfromException_closure" {
     GHC.IO.Exception.$fExceptionAssertionFailed_$cfromException_closure:
         const GHC.IO.Exception.$fExceptionAssertionFailed_$cfromException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionAssertionFailed_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c8qpo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8qps; else goto c8qpt;
       c8qps: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionAssertionFailed_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8qpt: // global
           I64[Sp - 8] = block_c8qpl_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8qpO; else goto c8qpm;
       u8qpO: // global
           call _c8qpl(R1) args: 0, res: 0, upd: 0;
       c8qpm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionAssertionFailed_$cfromException_info" {
     GHC.IO.Exception.$fExceptionAssertionFailed_$cfromException_info:
         const GHC.IO.Exception.$fExceptionAssertionFailed_$cfromException_entry;
         const 0;
         const 416611827726;
         const 4294967301;
         const S8oB9_srt+568;
 },
 _c8qpl() //  [R1]
         { []
         }
     {offset
       c8qpl: // global
           I64[Sp - 8] = block_c8qpr_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qpl_info" {
     block_c8qpl_info:
         const _c8qpl;
         const 0;
         const 279172874270;
         const S8oB9_srt+568;
 },
 _c8qpr() //  [R1]
         { []
         }
     {offset
       c8qpr: // global
           I64[Sp] = block_c8qpy_info;
           R3 = GHC.IO.Exception.$fExceptionAssertionFailed2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qpr_info" {
     block_c8qpr_info:
         const _c8qpr;
         const 1;
         const 279172874270;
         const S8oB9_srt+568;
 },
 _c8qpy() //  [R1]
         { []
         }
     {offset
       c8qpy: // global
           if (R1 & 7 == 1) goto c8qpF; else goto c8qpJ;
       c8qpF: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8qpJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8qpM; else goto c8qpL;
       c8qpM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8qpL: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qpy_info" {
     block_c8qpy_info:
         const _c8qpy;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.96044212 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAssertionFailed_closure" {
     GHC.IO.Exception.$fExceptionAssertionFailed_closure:
         const GHC.Exception.C:Exception_con_info;
         const GHC.IO.Exception.$fExceptionAssertionFailed2_closure;
         const GHC.IO.Exception.$fShowAssertionFailed_closure+1;
         const GHC.IO.Exception.$fExceptionAssertionFailed_$ctoException_closure+1;
         const GHC.IO.Exception.$fExceptionAssertionFailed_$cfromException_closure+1;
         const GHC.IO.Exception.$fExceptionAssertionFailed1_closure+1;
         const 0;
 },
 section ""data" . GHC.IO.Exception.$fExceptionAssertionFailed_$ctoException_closure" {
     GHC.IO.Exception.$fExceptionAssertionFailed_$ctoException_closure:
         const GHC.IO.Exception.$fExceptionAssertionFailed_$ctoException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionAssertionFailed_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c8qqk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8qqo; else goto c8qqn;
       c8qqo: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionAssertionFailed_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8qqn: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = GHC.IO.Exception.$fExceptionAssertionFailed_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionAssertionFailed_$ctoException_info" {
     GHC.IO.Exception.$fExceptionAssertionFailed_$ctoException_info:
         const GHC.IO.Exception.$fExceptionAssertionFailed_$ctoException_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S8oB9_srt+624;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.96532684 UTC

[section ""cstring" . lvl38_r8j3w_bytes" {
     lvl38_r8j3w_bytes:
         I8[] [65,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,10]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:33.974390024 UTC

[section ""data" . GHC.IO.Exception.assertError1_closure" {
     GHC.IO.Exception.assertError1_closure:
         const GHC.IO.Exception.assertError1_info;
         const 0;
 },
 sat_s8oy2_entry() //  [R1]
         { []
         }
     {offset
       c8qr4: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8qr5; else goto c8qr6;
       c8qr5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8qr6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c8qr2_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8oy2_info" {
     sat_s8oy2_info:
         const sat_s8oy2_entry;
         const 1;
         const 4294967312;
         const S8oB9_srt+640;
 },
 _c8qr2() //  [R1]
         { []
         }
     {offset
       c8qr2: // global
           R3 = R1;
           R2 = GHC.Exception.errorCallWithCallStackException9_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8qr2_info" {
     block_c8qr2_info:
         const _c8qr2;
         const 0;
         const 4294967326;
         const S8oB9_srt+640;
 },
 n_s8oxX_entry() //  [R1]
         { []
         }
     {offset
       c8qre: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8qrf; else goto c8qrg;
       c8qrf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8qrg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c8qqS_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8qrn; else goto c8qqT;
       u8qrn: // global
           call _c8qqS(R1) args: 0, res: 0, upd: 0;
       c8qqT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . n_s8oxX_info" {
     n_s8oxX_info:
         const n_s8oxX_entry;
         const 1;
         const 12884901904;
         const S8oB9_srt+640;
 },
 _c8qqS() //  [R1]
         { []
         }
     {offset
       c8qqS: // global
           if (R1 & 7 == 1) goto c8qrb; else goto c8qrc;
       c8qrb: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c8qrc: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8qrm; else goto c8qrl;
       c8qrm: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c8qrl: // global
           I64[Hp - 40] = sat_s8oy2_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Exception.errorCallWithCallStackException11_closure;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8qqS_info" {
     block_c8qqS_info:
         const _c8qqS;
         const 0;
         const 12884901918;
         const S8oB9_srt+640;
 },
 sat_s8oy7_entry() //  [R1]
         { []
         }
     {offset
       c8qrC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8qrD; else goto c8qrE;
       c8qrD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8qrE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.IO.Exception.untangle2_closure;
           Sp = Sp - 16;
           call Data.OldList.prependToAll_entry(R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8oy7_info" {
     sat_s8oy7_info:
         const sat_s8oy7_entry;
         const 1;
         const 4294967312;
         const S8oB9_srt+544;
 },
 sat_s8oyg_entry() //  [R1]
         { []
         }
     {offset
       c8qs1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8qs2; else goto c8qs3;
       c8qs2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8qs3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Exception.errorCallWithCallStackException1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8oyg_info" {
     sat_s8oyg_info:
         const sat_s8oyg_entry;
         const 1;
         const 16;
 },
 go_s8oyb_entry() //  [R1, R2]
         { []
         }
     {offset
       c8qs8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8qs9; else goto c8qsa;
       c8qs9: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8qsa: // global
           I64[Sp - 24] = block_c8qrQ_info;
           _s8oyb::P64 = R1;
           _s8oxX::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s8oxX::P64;
           P64[Sp - 8] = _s8oyb::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8qsh; else goto c8qrR;
       u8qsh: // global
           call _c8qrQ(R1) args: 0, res: 0, upd: 0;
       c8qrR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s8oyb_info" {
     go_s8oyb_info:
         const go_s8oyb_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c8qrQ() //  [R1]
         { []
         }
     {offset
       c8qrQ: // global
           if (R1 & 7 == 1) goto c8qs5; else goto c8qs6;
       c8qs5: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8qs6: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c8qsg; else goto c8qsf;
       c8qsg: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8qsf: // global
           _s8oye::P64 = P64[R1 + 6];
           _s8oyf::P64 = P64[R1 + 14];
           I64[Hp - 72] = stg_ap_2_upd_info;
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = _s8oyf::P64;
           I64[Hp - 40] = sat_s8oyg_info;
           P64[Hp - 24] = _s8oye::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qrQ_info" {
     block_c8qrQ_info:
         const _c8qrQ;
         const 2;
         const 30;
 },
 sat_s8oyj_entry() //  [R1]
         { []
         }
     {offset
       c8qsk: // global
           _s8oyj::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c8qsl; else goto c8qsm;
       c8qsm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8qso; else goto c8qsn;
       c8qso: // global
           HpAlloc = 16;
           goto c8qsl;
       c8qsl: // global
           R1 = _s8oyj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8qsn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8oyj::P64;
           _s8oxX::P64 = P64[_s8oyj::P64 + 16];
           _s8oy3::P64 = P64[_s8oyj::P64 + 24];
           I64[Hp - 8] = go_s8oyb_info;
           P64[Hp] = _s8oxX::P64;
           I64[Sp - 24] = block_c8qsi_info;
           R2 = _s8oy3::P64;
           R1 = Hp - 7;
           Sp = Sp - 24;
           call go_s8oyb_entry(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8oyj_info" {
     sat_s8oyj_info:
         const sat_s8oyj_entry;
         const 2;
         const 4294967314;
         const S8oB9_srt+544;
 },
 _c8qsi() //  [R1]
         { []
         }
     {offset
       c8qsi: // global
           R3 = R1;
           R2 = GHC.IO.Exception.untangle2_closure;
           Sp = Sp + 8;
           call Data.OldList.prependToAll_entry(R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8qsi_info" {
     block_c8qsi_info:
         const _c8qsi;
         const 0;
         const 4294967326;
         const S8oB9_srt+544;
 },
 sat_s8oyl_entry() //  [R1]
         { []
         }
     {offset
       c8qsw: // global
           _s8oyl::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c8qsx; else goto c8qsy;
       c8qsy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8qsA; else goto c8qsz;
       c8qsA: // global
           HpAlloc = 24;
           goto c8qsx;
       c8qsx: // global
           R1 = _s8oyl::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8qsz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8oyl::P64;
           _s8oxU::P64 = P64[_s8oyl::P64 + 16];
           _s8oxV::P64 = P64[_s8oyl::P64 + 24];
           I64[Hp - 16] = n_s8oxX_info;
           P64[Hp] = _s8oxV::P64;
           I64[Sp - 32] = block_c8qro_info;
           R2 = _s8oxU::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call GHC.Stack.Types.getCallStack_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8oyl_info" {
     sat_s8oyl_info:
         const sat_s8oyl_entry;
         const 2;
         const 123149597278226;
         const S8oB9_srt+544;
 },
 _c8qro() //  [R1]
         { []
         }
     {offset
       c8qro: // global
           _c8qqO::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8qst; else goto c8qsu;
       c8qst: // global
           I64[Sp + 8] = block_c8qrs_info;
           R1 = _c8qqO::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8qsQ; else goto c8qrt;
       u8qsQ: // global
           call _c8qrs(R1) args: 0, res: 0, upd: 0;
       c8qrt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       c8qsu: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c8qsO; else goto c8qsN;
       c8qsO: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c8qsN: // global
           I64[Hp - 48] = sat_s8oyj_info;
           P64[Hp - 32] = _c8qqO::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Exception.errorCallWithCallStackException6_closure;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           Sp = Sp + 16;
           call Data.OldList.intercalate1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8qro_info" {
     block_c8qro_info:
         const _c8qro;
         const 1;
         const 70373039144990;
         const S8oB9_srt+544;
 },
 _c8qrs() //  [R1]
         { []
         }
     {offset
       c8qrs: // global
           if (R1 & 7 == 1) goto c8qsF; else goto c8qsH;
       c8qsF: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c8qsH: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8qsK; else goto c8qsJ;
       c8qsK: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c8qsJ: // global
           _s8oy5::P64 = P64[R1 + 6];
           _s8oy6::P64 = P64[R1 + 14];
           I64[Hp - 40] = sat_s8oy7_info;
           P64[Hp - 24] = _s8oy6::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s8oy5::P64;
           P64[Hp] = Hp - 40;
           R2 = Hp - 14;
           Sp = Sp + 8;
           call Data.OldList.intercalate1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8qrs_info" {
     block_c8qrs_info:
         const _c8qrs;
         const 0;
         const 4294967326;
         const S8oB9_srt+544;
 },
 sat_s8oym_entry() //  [R1]
         { []
         }
     {offset
       c8qsR: // global
           _s8oym::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8qsS; else goto c8qsT;
       c8qsT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8qsV; else goto c8qsU;
       c8qsV: // global
           HpAlloc = 32;
           goto c8qsS;
       c8qsS: // global
           R1 = _s8oym::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8qsU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8oym::P64;
           _s8oxU::P64 = P64[_s8oym::P64 + 16];
           _s8oxV::P64 = P64[_s8oym::P64 + 24];
           I64[Hp - 24] = sat_s8oyl_info;
           P64[Hp - 8] = _s8oxU::P64;
           P64[Hp] = _s8oxV::P64;
           R3 = Hp - 24;
           R2 = lvl38_r8j3w_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8oym_info" {
     sat_s8oym_info:
         const sat_s8oym_entry;
         const 2;
         const 123149597278226;
         const S8oB9_srt+544;
 },
 sat_s8oyn_entry() //  [R1]
         { []
         }
     {offset
       c8qsW: // global
           _s8oyn::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8qsX; else goto c8qsY;
       c8qsY: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8qt0; else goto c8qsZ;
       c8qt0: // global
           HpAlloc = 32;
           goto c8qsX;
       c8qsX: // global
           R1 = _s8oyn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8qsZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8oyn::P64;
           _s8oxU::P64 = P64[_s8oyn::P64 + 16];
           _s8oxV::P64 = P64[_s8oyn::P64 + 24];
           I64[Hp - 24] = sat_s8oym_info;
           P64[Hp - 8] = _s8oxU::P64;
           P64[Hp] = _s8oxV::P64;
           R2 = Hp - 24;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionAssertionFailed_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8oyn_info" {
     sat_s8oyn_info:
         const sat_s8oyn_entry;
         const 2;
         const 131945690300434;
         const S8oB9_srt+544;
 },
 GHC.IO.Exception.assertError1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8qt1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8qt5; else goto c8qt4;
       c8qt5: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.assertError1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8qt4: // global
           I64[Hp - 24] = sat_s8oyn_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 24;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.assertError1_info" {
     GHC.IO.Exception.assertError1_info:
         const GHC.IO.Exception.assertError1_entry;
         const 0;
         const 272683178655758;
         const 12884901903;
         const S8oB9_srt+544;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.007820597 UTC

[section ""data" . GHC.IO.Exception.assertError_closure" {
     GHC.IO.Exception.assertError_closure:
         const GHC.IO.Exception.assertError_info;
         const 0;
 },
 GHC.IO.Exception.assertError_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8qv9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8qva; else goto c8qvb;
       c8qva: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.assertError_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8qvb: // global
           I64[Sp - 24] = block_c8qv2_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8qvo; else goto c8qv3;
       u8qvo: // global
           call _c8qv2(R1) args: 0, res: 0, upd: 0;
       c8qv3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.assertError_info" {
     GHC.IO.Exception.assertError_info:
         const GHC.IO.Exception.assertError_entry;
         const 0;
         const 30064771086;
         const 12884901911;
         const S8oB9_srt+664;
 },
 _c8qv2() //  [R1]
         { []
         }
     {offset
       c8qv2: // global
           if (R1 & 7 == 1) goto c8qv6; else goto c8qv7;
       c8qv6: // global
           I64[Sp] = block_c8qve_info;
           R1 = GHC.Stack.CCS.currentCallStack_closure;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       c8qv7: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qv2_info" {
     block_c8qv2_info:
         const _c8qv2;
         const 2;
         const 21474836510;
         const S8oB9_srt+664;
 },
 _c8qve() //  [R1]
         { []
         }
     {offset
       c8qve: // global
           I64[Sp + 16] = block_c8qvg_info;
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.IO.Exception.assertError1_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qve_info" {
     block_c8qve_info:
         const _c8qve;
         const 130;
         const 4294967326;
         const S8oB9_srt+664;
 },
 _c8qvg() //  [R1]
         { []
         }
     {offset
       c8qvg: // global
           R1 = R1;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qvg_info" {
     block_c8qvg_info:
         const _c8qvg;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.015435833 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionAllocationLimitExceeded8_bytes" {
     GHC.IO.Exception.$fExceptionAllocationLimitExceeded8_bytes:
         I8[] [83,111,109,101,65,115,121,110,99,69,120,99,101,112,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.017012855 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAllocationLimitExceeded7_closure" {
     GHC.IO.Exception.$fExceptionAllocationLimitExceeded7_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded8_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.018741723 UTC

[section ""data" . GHC.IO.Exception.$tcSomeAsyncException_closure" {
     GHC.IO.Exception.$tcSomeAsyncException_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded7_closure+1;
         const GHC.Types.krep$*_closure;
         const 7698277271892269964;
         const 12603180528693821542;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.020478753 UTC

[section ""data" . $krep17_r8j3x_closure" {
     $krep17_r8j3x_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Exception.$tcSomeAsyncException_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.02246657 UTC

[section ""data" . $krep18_r8j3y_closure" {
     $krep18_r8j3y_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep12_r8j3r_closure+2;
         const $krep17_r8j3x_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.024655334 UTC

[section ""data" . GHC.IO.Exception.$tc'SomeAsyncException1_closure" {
     GHC.IO.Exception.$tc'SomeAsyncException1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_r8j3t_closure+1;
         const $krep18_r8j3y_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.026463497 UTC

[section ""cstring" . GHC.IO.Exception.$tc'SomeAsyncException3_bytes" {
     GHC.IO.Exception.$tc'SomeAsyncException3_bytes:
         I8[] [39,83,111,109,101,65,115,121,110,99,69,120,99,101,112,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.02801311 UTC

[section ""data" . GHC.IO.Exception.$tc'SomeAsyncException2_closure" {
     GHC.IO.Exception.$tc'SomeAsyncException2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'SomeAsyncException3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.029707644 UTC

[section ""data" . GHC.IO.Exception.$tc'SomeAsyncException_closure" {
     GHC.IO.Exception.$tc'SomeAsyncException_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'SomeAsyncException2_closure+1;
         const GHC.IO.Exception.$tc'SomeAsyncException1_closure+4;
         const 2590663161510005226;
         const 12089333203895315586;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.033080082 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAllocationLimitExceeded6_closure" {
     GHC.IO.Exception.$fExceptionAllocationLimitExceeded6_closure:
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionAllocationLimitExceeded6_entry() //  [R1]
         { []
         }
     {offset
       c8qw3: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c8qw4; else goto c8qw5;
       c8qw4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8qw5: // global
           (_c8qvV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8qvV::I64 == 0) goto c8qvX; else goto c8qvW;
       c8qvX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8qvW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8qvV::I64;
           I64[Sp - 24] = block_c8qvY_info;
           R6 = 0;
           R5 = GHC.IO.Exception.$fExceptionAllocationLimitExceeded7_closure+1;
           R4 = GHC.IO.Exception.$trModule_closure+1;
           R3 = 12603180528693821542;
           R2 = 7698277271892269964;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionAllocationLimitExceeded6_info" {
     GHC.IO.Exception.$fExceptionAllocationLimitExceeded6_info:
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded6_entry;
         const 0;
         const 4294967317;
         const S8oB9_srt+560;
 },
 _c8qvY() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c8qvY: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c8qvZ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8qvY_info" {
     block_c8qvY_info:
         const _c8qvY;
         const 0;
         const 30;
 },
 _c8qvZ() //  []
         { []
         }
     {offset
       c8qvZ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8qw8; else goto c8qw7;
       c8qw8: // global
           HpAlloc = 48;
           I64[Sp] = block_c8qvZ_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c8qw7: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8qvZ_info" {
     block_c8qvZ_info:
         const _c8qvZ;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.042298148 UTC

[section ""data" . GHC.IO.Exception.$fExceptionSomeAsyncException_$cfromException_closure" {
     GHC.IO.Exception.$fExceptionSomeAsyncException_$cfromException_closure:
         const GHC.IO.Exception.$fExceptionSomeAsyncException_$cfromException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionSomeAsyncException_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c8qwI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8qwM; else goto c8qwN;
       c8qwM: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionSomeAsyncException_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8qwN: // global
           I64[Sp - 8] = block_c8qwF_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8qx8; else goto c8qwG;
       u8qx8: // global
           call _c8qwF(R1) args: 0, res: 0, upd: 0;
       c8qwG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionSomeAsyncException_$cfromException_info" {
     GHC.IO.Exception.$fExceptionSomeAsyncException_$cfromException_info:
         const GHC.IO.Exception.$fExceptionSomeAsyncException_$cfromException_entry;
         const 0;
         const 422216760033294;
         const 4294967301;
         const S8oB9_srt+568;
 },
 _c8qwF() //  [R1]
         { []
         }
     {offset
       c8qwF: // global
           I64[Sp - 8] = block_c8qwL_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qwF_info" {
     block_c8qwF_info:
         const _c8qwF;
         const 0;
         const 140741783322654;
         const S8oB9_srt+568;
 },
 _c8qwL() //  [R1]
         { []
         }
     {offset
       c8qwL: // global
           I64[Sp] = block_c8qwS_info;
           R3 = GHC.IO.Exception.$fExceptionAllocationLimitExceeded6_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qwL_info" {
     block_c8qwL_info:
         const _c8qwL;
         const 1;
         const 140741783322654;
         const S8oB9_srt+568;
 },
 _c8qwS() //  [R1]
         { []
         }
     {offset
       c8qwS: // global
           if (R1 & 7 == 1) goto c8qwZ; else goto c8qx3;
       c8qwZ: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8qx3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8qx6; else goto c8qx5;
       c8qx6: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8qx5: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qwS_info" {
     block_c8qwS_info:
         const _c8qwS;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.051695846 UTC

[section ""data" . GHC.IO.Exception.$fExceptionSomeAsyncException_closure" {
     GHC.IO.Exception.$fExceptionSomeAsyncException_closure:
         const GHC.Exception.C:Exception_con_info;
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded6_closure;
         const GHC.IO.Exception.$fShowSomeAsyncException_closure+1;
         const GHC.IO.Exception.$fExceptionSomeAsyncException_$ctoException_closure+1;
         const GHC.IO.Exception.$fExceptionSomeAsyncException_$cfromException_closure+1;
         const GHC.IO.Exception.$fExceptionSomeAsyncException_$cshow_closure+1;
         const 0;
 },
 section ""data" . GHC.IO.Exception.$fExceptionSomeAsyncException_$ctoException_closure" {
     GHC.IO.Exception.$fExceptionSomeAsyncException_$ctoException_closure:
         const GHC.IO.Exception.$fExceptionSomeAsyncException_$ctoException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionSomeAsyncException_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c8qxE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8qxI; else goto c8qxH;
       c8qxI: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionSomeAsyncException_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8qxH: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = GHC.IO.Exception.$fExceptionSomeAsyncException_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionSomeAsyncException_$ctoException_info" {
     GHC.IO.Exception.$fExceptionSomeAsyncException_$ctoException_info:
         const GHC.IO.Exception.$fExceptionSomeAsyncException_$ctoException_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S8oB9_srt+704;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.058007537 UTC

[section ""data" . GHC.IO.Exception.asyncExceptionFromException_closure" {
     GHC.IO.Exception.asyncExceptionFromException_closure:
         const GHC.IO.Exception.asyncExceptionFromException_info;
         const 0;
 },
 GHC.IO.Exception.asyncExceptionFromException_entry() //  [R2, R3]
         { []
         }
     {offset
       c8qxY: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8qy2; else goto c8qy3;
       c8qy2: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.asyncExceptionFromException_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8qy3: // global
           I64[Sp - 16] = block_c8qxV_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8qyR; else goto c8qxW;
       u8qyR: // global
           call _c8qxV(R1) args: 0, res: 0, upd: 0;
       c8qxW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.asyncExceptionFromException_info" {
     GHC.IO.Exception.asyncExceptionFromException_info:
         const GHC.IO.Exception.asyncExceptionFromException_entry;
         const 0;
         const 2392541597007886;
         const 8589934607;
         const S8oB9_srt+568;
 },
 _c8qxV() //  [R1]
         { []
         }
     {offset
       c8qxV: // global
           I64[Sp - 8] = block_c8qy1_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qxV_info" {
     block_c8qxV_info:
         const _c8qxV;
         const 1;
         const 140741783322654;
         const S8oB9_srt+568;
 },
 _c8qy1() //  [R1]
         { []
         }
     {offset
       c8qy1: // global
           I64[Sp] = block_c8qy8_info;
           R3 = GHC.IO.Exception.$fExceptionAllocationLimitExceeded6_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qy1_info" {
     block_c8qy1_info:
         const _c8qy1;
         const 2;
         const 140741783322654;
         const S8oB9_srt+568;
 },
 _c8qy8() //  [R1]
         { []
         }
     {offset
       c8qy8: // global
           if (R1 & 7 == 1) goto u8qyP; else goto c8qys;
       u8qyP: // global
           Sp = Sp + 24;
           call _c8qyF() args: 0, res: 0, upd: 0;
       c8qys: // global
           _s8oyO::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8qyi_info;
           R1 = _s8oyO::P64;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qy8_info" {
     block_c8qy8_info:
         const _c8qy8;
         const 2;
         const 4294967326;
         const S8oB9_srt+568;
 },
 _c8qyi() //  [R1]
         { []
         }
     {offset
       c8qyi: // global
           I64[Sp - 8] = block_c8qym_info;
           R2 = P64[Sp + 8];
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 8] = P64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qyi_info" {
     block_c8qyi_info:
         const _c8qyi;
         const 1;
         const 4294967326;
         const S8oB9_srt+568;
 },
 _c8qym() //  [R1]
         { []
         }
     {offset
       c8qym: // global
           I64[Sp] = block_c8qyq_info;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = R1;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qym_info" {
     block_c8qym_info:
         const _c8qym;
         const 2;
         const 4294967326;
         const S8oB9_srt+568;
 },
 _c8qyq() //  [R1]
         { []
         }
     {offset
       c8qyq: // global
           I64[Sp] = block_c8qyy_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qyq_info" {
     block_c8qyq_info:
         const _c8qyq;
         const 2;
         const 4294967326;
         const S8oB9_srt+568;
 },
 _c8qyy() //  [R1]
         { []
         }
     {offset
       c8qyy: // global
           if (R1 & 7 == 1) goto u8qyQ; else goto c8qyJ;
       u8qyQ: // global
           Sp = Sp + 24;
           call _c8qyF() args: 0, res: 0, upd: 0;
       c8qyJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8qyM; else goto c8qyL;
       c8qyM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8qyL: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qyy_info" {
     block_c8qyy_info:
         const _c8qyy;
         const 130;
         const 30;
 },
 _c8qyF() //  []
         { []
         }
     {offset
       c8qyF: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.074116401 UTC

[section ""data" . GHC.IO.Exception.asyncExceptionToException_closure" {
     GHC.IO.Exception.asyncExceptionToException_closure:
         const GHC.IO.Exception.asyncExceptionToException_info;
         const 0;
 },
 GHC.IO.Exception.asyncExceptionToException_entry() //  [R2, R3]
         { []
         }
     {offset
       c8qzL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8qzP; else goto c8qzO;
       c8qzP: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.asyncExceptionToException_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8qzO: // global
           I64[Hp - 16] = GHC.IO.Exception.SomeAsyncException_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 15;
           call GHC.IO.Exception.$fExceptionSomeAsyncException_$ctoException_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.asyncExceptionToException_info" {
     GHC.IO.Exception.asyncExceptionToException_info:
         const GHC.IO.Exception.asyncExceptionToException_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S8oB9_srt+712;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.077404532 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionAsyncException11_bytes" {
     GHC.IO.Exception.$fExceptionAsyncException11_bytes:
         I8[] [65,115,121,110,99,69,120,99,101,112,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.079095429 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAsyncException10_closure" {
     GHC.IO.Exception.$fExceptionAsyncException10_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$fExceptionAsyncException11_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.080898204 UTC

[section ""data" . GHC.IO.Exception.$tcAsyncException_closure" {
     GHC.IO.Exception.$tcAsyncException_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$fExceptionAsyncException10_closure+1;
         const GHC.Types.krep$*_closure;
         const 3223192752092240512;
         const 6151543105744102738;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.082642881 UTC

[section ""data" . GHC.IO.Exception.$tc'HeapOverflow1_closure" {
     GHC.IO.Exception.$tc'HeapOverflow1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Exception.$tcAsyncException_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.084218342 UTC

[section ""cstring" . GHC.IO.Exception.$tc'StackOverflow2_bytes" {
     GHC.IO.Exception.$tc'StackOverflow2_bytes:
         I8[] [39,83,116,97,99,107,79,118,101,114,102,108,111,119]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.086200662 UTC

[section ""data" . GHC.IO.Exception.$tc'StackOverflow1_closure" {
     GHC.IO.Exception.$tc'StackOverflow1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'StackOverflow2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.087912689 UTC

[section ""data" . GHC.IO.Exception.$tc'StackOverflow_closure" {
     GHC.IO.Exception.$tc'StackOverflow_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'StackOverflow1_closure+1;
         const GHC.IO.Exception.$tc'HeapOverflow1_closure+1;
         const 7140728310745047686;
         const 9210977118047764825;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.089593896 UTC

[section ""cstring" . GHC.IO.Exception.$tc'HeapOverflow3_bytes" {
     GHC.IO.Exception.$tc'HeapOverflow3_bytes:
         I8[] [39,72,101,97,112,79,118,101,114,102,108,111,119]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.091828275 UTC

[section ""data" . GHC.IO.Exception.$tc'HeapOverflow2_closure" {
     GHC.IO.Exception.$tc'HeapOverflow2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'HeapOverflow3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.093561417 UTC

[section ""data" . GHC.IO.Exception.$tc'HeapOverflow_closure" {
     GHC.IO.Exception.$tc'HeapOverflow_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'HeapOverflow2_closure+1;
         const GHC.IO.Exception.$tc'HeapOverflow1_closure+1;
         const 6603650813243937168;
         const 2046005135570222520;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.095329658 UTC

[section ""cstring" . GHC.IO.Exception.$tc'ThreadKilled2_bytes" {
     GHC.IO.Exception.$tc'ThreadKilled2_bytes:
         I8[] [39,84,104,114,101,97,100,75,105,108,108,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.096978116 UTC

[section ""data" . GHC.IO.Exception.$tc'ThreadKilled1_closure" {
     GHC.IO.Exception.$tc'ThreadKilled1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'ThreadKilled2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.099050939 UTC

[section ""data" . GHC.IO.Exception.$tc'ThreadKilled_closure" {
     GHC.IO.Exception.$tc'ThreadKilled_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'ThreadKilled1_closure+1;
         const GHC.IO.Exception.$tc'HeapOverflow1_closure+1;
         const 13600447017231937444;
         const 101896852196063416;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.100835163 UTC

[section ""cstring" . GHC.IO.Exception.$tc'UserInterrupt2_bytes" {
     GHC.IO.Exception.$tc'UserInterrupt2_bytes:
         I8[] [39,85,115,101,114,73,110,116,101,114,114,117,112,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.10257474 UTC

[section ""data" . GHC.IO.Exception.$tc'UserInterrupt1_closure" {
     GHC.IO.Exception.$tc'UserInterrupt1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'UserInterrupt2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.104272515 UTC

[section ""data" . GHC.IO.Exception.$tc'UserInterrupt_closure" {
     GHC.IO.Exception.$tc'UserInterrupt_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'UserInterrupt1_closure+1;
         const GHC.IO.Exception.$tc'HeapOverflow1_closure+1;
         const 1214873852534998649;
         const 13851718192780849484;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.108756793 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAsyncException9_closure" {
     GHC.IO.Exception.$fExceptionAsyncException9_closure:
         const GHC.IO.Exception.$fExceptionAsyncException9_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionAsyncException9_entry() //  [R1]
         { []
         }
     {offset
       c8qAm: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c8qAn; else goto c8qAo;
       c8qAn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8qAo: // global
           (_c8qAe::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8qAe::I64 == 0) goto c8qAg; else goto c8qAf;
       c8qAg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8qAf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8qAe::I64;
           I64[Sp - 24] = block_c8qAh_info;
           R6 = 0;
           R5 = GHC.IO.Exception.$fExceptionAsyncException10_closure+1;
           R4 = GHC.IO.Exception.$trModule_closure+1;
           R3 = 6151543105744102738;
           R2 = 3223192752092240512;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionAsyncException9_info" {
     GHC.IO.Exception.$fExceptionAsyncException9_info:
         const GHC.IO.Exception.$fExceptionAsyncException9_entry;
         const 0;
         const 4294967317;
         const S8oB9_srt+560;
 },
 _c8qAh() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c8qAh: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c8qAi() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8qAh_info" {
     block_c8qAh_info:
         const _c8qAh;
         const 0;
         const 30;
 },
 _c8qAi() //  []
         { []
         }
     {offset
       c8qAi: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8qAr; else goto c8qAq;
       c8qAr: // global
           HpAlloc = 48;
           I64[Sp] = block_c8qAi_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c8qAq: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8qAi_info" {
     block_c8qAi_info:
         const _c8qAi;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.117172104 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionArrayException7_bytes" {
     GHC.IO.Exception.$fExceptionArrayException7_bytes:
         I8[] [65,114,114,97,121,69,120,99,101,112,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.119109349 UTC

[section ""data" . GHC.IO.Exception.$fExceptionArrayException6_closure" {
     GHC.IO.Exception.$fExceptionArrayException6_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$fExceptionArrayException7_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.120938668 UTC

[section ""data" . GHC.IO.Exception.$tcArrayException_closure" {
     GHC.IO.Exception.$tcArrayException_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$fExceptionArrayException6_closure+1;
         const GHC.Types.krep$*_closure;
         const 14361659568498315305;
         const 6805143727974531880;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.123877598 UTC

[section ""data" . $krep19_r8j3z_closure" {
     $krep19_r8j3z_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Exception.$tcArrayException_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.126009991 UTC

[section ""data" . GHC.IO.Exception.$tc'IndexOutOfBounds1_closure" {
     GHC.IO.Exception.$tc'IndexOutOfBounds1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r8j3o_closure+1;
         const $krep19_r8j3z_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.127848497 UTC

[section ""cstring" . GHC.IO.Exception.$tc'IndexOutOfBounds3_bytes" {
     GHC.IO.Exception.$tc'IndexOutOfBounds3_bytes:
         I8[] [39,73,110,100,101,120,79,117,116,79,102,66,111,117,110,100,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.129726684 UTC

[section ""data" . GHC.IO.Exception.$tc'IndexOutOfBounds2_closure" {
     GHC.IO.Exception.$tc'IndexOutOfBounds2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'IndexOutOfBounds3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.131636688 UTC

[section ""data" . GHC.IO.Exception.$tc'IndexOutOfBounds_closure" {
     GHC.IO.Exception.$tc'IndexOutOfBounds_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'IndexOutOfBounds2_closure+1;
         const GHC.IO.Exception.$tc'IndexOutOfBounds1_closure+4;
         const 14241149568806879436;
         const 10551655754853710333;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.133795636 UTC

[section ""cstring" . GHC.IO.Exception.$tc'UndefinedElement2_bytes" {
     GHC.IO.Exception.$tc'UndefinedElement2_bytes:
         I8[] [39,85,110,100,101,102,105,110,101,100,69,108,101,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.135444254 UTC

[section ""data" . GHC.IO.Exception.$tc'UndefinedElement1_closure" {
     GHC.IO.Exception.$tc'UndefinedElement1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'UndefinedElement2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.137321539 UTC

[section ""data" . GHC.IO.Exception.$tc'UndefinedElement_closure" {
     GHC.IO.Exception.$tc'UndefinedElement_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'UndefinedElement1_closure+1;
         const GHC.IO.Exception.$tc'IndexOutOfBounds1_closure+4;
         const 9439210122732754255;
         const 8562757414325900819;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.140817831 UTC

[section ""data" . GHC.IO.Exception.$fExceptionArrayException5_closure" {
     GHC.IO.Exception.$fExceptionArrayException5_closure:
         const GHC.IO.Exception.$fExceptionArrayException5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionArrayException5_entry() //  [R1]
         { []
         }
     {offset
       c8qBg: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c8qBh; else goto c8qBi;
       c8qBh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8qBi: // global
           (_c8qB8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8qB8::I64 == 0) goto c8qBa; else goto c8qB9;
       c8qBa: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8qB9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8qB8::I64;
           I64[Sp - 24] = block_c8qBb_info;
           R6 = 0;
           R5 = GHC.IO.Exception.$fExceptionArrayException6_closure+1;
           R4 = GHC.IO.Exception.$trModule_closure+1;
           R3 = 6805143727974531880;
           R2 = 14361659568498315305;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionArrayException5_info" {
     GHC.IO.Exception.$fExceptionArrayException5_info:
         const GHC.IO.Exception.$fExceptionArrayException5_entry;
         const 0;
         const 4294967317;
         const S8oB9_srt+560;
 },
 _c8qBb() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c8qBb: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c8qBc() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8qBb_info" {
     block_c8qBb_info:
         const _c8qBb;
         const 0;
         const 30;
 },
 _c8qBc() //  []
         { []
         }
     {offset
       c8qBc: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8qBl; else goto c8qBk;
       c8qBl: // global
           HpAlloc = 48;
           I64[Sp] = block_c8qBc_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c8qBk: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8qBc_info" {
     block_c8qBc_info:
         const _c8qBc;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.149573127 UTC

[section ""data" . GHC.IO.Exception.$fExceptionArrayException_$cfromException_closure" {
     GHC.IO.Exception.$fExceptionArrayException_$cfromException_closure:
         const GHC.IO.Exception.$fExceptionArrayException_$cfromException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionArrayException_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c8qBV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8qBZ; else goto c8qC0;
       c8qBZ: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionArrayException_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8qC0: // global
           I64[Sp - 8] = block_c8qBS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8qCl; else goto c8qBT;
       u8qCl: // global
           call _c8qBS(R1) args: 0, res: 0, upd: 0;
       c8qBT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionArrayException_$cfromException_info" {
     GHC.IO.Exception.$fExceptionArrayException_$cfromException_info:
         const GHC.IO.Exception.$fExceptionArrayException_$cfromException_entry;
         const 0;
         const 27021602059190286;
         const 4294967301;
         const S8oB9_srt+568;
 },
 _c8qBS() //  [R1]
         { []
         }
     {offset
       c8qBS: // global
           I64[Sp - 8] = block_c8qBY_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qBS_info" {
     block_c8qBS_info:
         const _c8qBS;
         const 0;
         const 18014402804449310;
         const S8oB9_srt+568;
 },
 _c8qBY() //  [R1]
         { []
         }
     {offset
       c8qBY: // global
           I64[Sp] = block_c8qC5_info;
           R3 = GHC.IO.Exception.$fExceptionArrayException5_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qBY_info" {
     block_c8qBY_info:
         const _c8qBY;
         const 1;
         const 18014402804449310;
         const S8oB9_srt+568;
 },
 _c8qC5() //  [R1]
         { []
         }
     {offset
       c8qC5: // global
           if (R1 & 7 == 1) goto c8qCc; else goto c8qCg;
       c8qCc: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8qCg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8qCj; else goto c8qCi;
       c8qCj: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8qCi: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qC5_info" {
     block_c8qC5_info:
         const _c8qC5;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.159334267 UTC

[section ""data" . GHC.IO.Exception.$fExceptionArrayException_closure" {
     GHC.IO.Exception.$fExceptionArrayException_closure:
         const GHC.Exception.C:Exception_con_info;
         const GHC.IO.Exception.$fExceptionArrayException5_closure;
         const GHC.IO.Exception.$fShowArrayException_closure+1;
         const GHC.IO.Exception.$fExceptionArrayException_$ctoException_closure+1;
         const GHC.IO.Exception.$fExceptionArrayException_$cfromException_closure+1;
         const GHC.IO.Exception.$fExceptionArrayException_$cshow_closure+1;
         const 0;
 },
 section ""data" . GHC.IO.Exception.$fExceptionArrayException_$ctoException_closure" {
     GHC.IO.Exception.$fExceptionArrayException_$ctoException_closure:
         const GHC.IO.Exception.$fExceptionArrayException_$ctoException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionArrayException_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c8qCR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8qCV; else goto c8qCU;
       c8qCV: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionArrayException_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8qCU: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = GHC.IO.Exception.$fExceptionArrayException_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionArrayException_$ctoException_info" {
     GHC.IO.Exception.$fExceptionArrayException_$ctoException_info:
         const GHC.IO.Exception.$fExceptionArrayException_$ctoException_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S8oB9_srt+752;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.163293263 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionFixIOException5_bytes" {
     GHC.IO.Exception.$fExceptionFixIOException5_bytes:
         I8[] [70,105,120,73,79,69,120,99,101,112,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.165009942 UTC

[section ""data" . GHC.IO.Exception.$fExceptionFixIOException4_closure" {
     GHC.IO.Exception.$fExceptionFixIOException4_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$fExceptionFixIOException5_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.166733349 UTC

[section ""data" . GHC.IO.Exception.$tcFixIOException_closure" {
     GHC.IO.Exception.$tcFixIOException_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$fExceptionFixIOException4_closure+1;
         const GHC.Types.krep$*_closure;
         const 175794591112768165;
         const 12820711924146365796;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.168488452 UTC

[section ""data" . GHC.IO.Exception.$tc'FixIOException1_closure" {
     GHC.IO.Exception.$tc'FixIOException1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Exception.$tcFixIOException_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.170583092 UTC

[section ""cstring" . GHC.IO.Exception.$tc'FixIOException3_bytes" {
     GHC.IO.Exception.$tc'FixIOException3_bytes:
         I8[] [39,70,105,120,73,79,69,120,99,101,112,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.172268895 UTC

[section ""data" . GHC.IO.Exception.$tc'FixIOException2_closure" {
     GHC.IO.Exception.$tc'FixIOException2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'FixIOException3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.174042113 UTC

[section ""data" . GHC.IO.Exception.$tc'FixIOException_closure" {
     GHC.IO.Exception.$tc'FixIOException_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'FixIOException2_closure+1;
         const GHC.IO.Exception.$tc'FixIOException1_closure+1;
         const 1253631570386628537;
         const 15724415228749653558;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.177424559 UTC

[section ""data" . GHC.IO.Exception.$fExceptionFixIOException3_closure" {
     GHC.IO.Exception.$fExceptionFixIOException3_closure:
         const GHC.IO.Exception.$fExceptionFixIOException3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionFixIOException3_entry() //  [R1]
         { []
         }
     {offset
       c8qDm: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c8qDn; else goto c8qDo;
       c8qDn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8qDo: // global
           (_c8qDe::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8qDe::I64 == 0) goto c8qDg; else goto c8qDf;
       c8qDg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8qDf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8qDe::I64;
           I64[Sp - 24] = block_c8qDh_info;
           R6 = 0;
           R5 = GHC.IO.Exception.$fExceptionFixIOException4_closure+1;
           R4 = GHC.IO.Exception.$trModule_closure+1;
           R3 = 12820711924146365796;
           R2 = 175794591112768165;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionFixIOException3_info" {
     GHC.IO.Exception.$fExceptionFixIOException3_info:
         const GHC.IO.Exception.$fExceptionFixIOException3_entry;
         const 0;
         const 4294967317;
         const S8oB9_srt+560;
 },
 _c8qDh() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c8qDh: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c8qDi() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8qDh_info" {
     block_c8qDh_info:
         const _c8qDh;
         const 0;
         const 30;
 },
 _c8qDi() //  []
         { []
         }
     {offset
       c8qDi: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8qDr; else goto c8qDq;
       c8qDr: // global
           HpAlloc = 48;
           I64[Sp] = block_c8qDi_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c8qDq: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8qDi_info" {
     block_c8qDi_info:
         const _c8qDi;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.186180789 UTC

[section ""data" . GHC.IO.Exception.$fExceptionFixIOException_$cfromException_closure" {
     GHC.IO.Exception.$fExceptionFixIOException_$cfromException_closure:
         const GHC.IO.Exception.$fExceptionFixIOException_$cfromException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionFixIOException_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c8qE1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8qE5; else goto c8qE6;
       c8qE5: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionFixIOException_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8qE6: // global
           I64[Sp - 8] = block_c8qDY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8qEr; else goto c8qDZ;
       u8qEr: // global
           call _c8qDY(R1) args: 0, res: 0, upd: 0;
       c8qDZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionFixIOException_$cfromException_info" {
     GHC.IO.Exception.$fExceptionFixIOException_$cfromException_info:
         const GHC.IO.Exception.$fExceptionFixIOException_$cfromException_entry;
         const 0;
         const 432345568522534926;
         const 4294967301;
         const S8oB9_srt+568;
 },
 _c8qDY() //  [R1]
         { []
         }
     {offset
       c8qDY: // global
           I64[Sp - 8] = block_c8qE4_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qDY_info" {
     block_c8qDY_info:
         const _c8qDY;
         const 0;
         const 288230380446679070;
         const S8oB9_srt+568;
 },
 _c8qE4() //  [R1]
         { []
         }
     {offset
       c8qE4: // global
           I64[Sp] = block_c8qEb_info;
           R3 = GHC.IO.Exception.$fExceptionFixIOException3_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qE4_info" {
     block_c8qE4_info:
         const _c8qE4;
         const 1;
         const 288230380446679070;
         const S8oB9_srt+568;
 },
 _c8qEb() //  [R1]
         { []
         }
     {offset
       c8qEb: // global
           if (R1 & 7 == 1) goto c8qEi; else goto c8qEm;
       c8qEi: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8qEm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8qEp; else goto c8qEo;
       c8qEp: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8qEo: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qEb_info" {
     block_c8qEb_info:
         const _c8qEb;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.195713629 UTC

[section ""data" . GHC.IO.Exception.$fExceptionFixIOException_closure" {
     GHC.IO.Exception.$fExceptionFixIOException_closure:
         const GHC.Exception.C:Exception_con_info;
         const GHC.IO.Exception.$fExceptionFixIOException3_closure;
         const GHC.IO.Exception.$fShowFixIOException_closure+1;
         const GHC.IO.Exception.$fExceptionFixIOException_$ctoException_closure+1;
         const GHC.IO.Exception.$fExceptionFixIOException_$cfromException_closure+1;
         const GHC.IO.Exception.$fExceptionFixIOException_$cshow_closure+1;
         const 0;
 },
 section ""data" . GHC.IO.Exception.$fExceptionFixIOException_$ctoException_closure" {
     GHC.IO.Exception.$fExceptionFixIOException_$ctoException_closure:
         const GHC.IO.Exception.$fExceptionFixIOException_$ctoException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionFixIOException_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c8qEX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8qF1; else goto c8qF0;
       c8qF1: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionFixIOException_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8qF0: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = GHC.IO.Exception.$fExceptionFixIOException_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionFixIOException_$ctoException_info" {
     GHC.IO.Exception.$fExceptionFixIOException_$ctoException_info:
         const GHC.IO.Exception.$fExceptionFixIOException_$ctoException_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S8oB9_srt+784;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.199794686 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionExitCode6_bytes" {
     GHC.IO.Exception.$fExceptionExitCode6_bytes:
         I8[] [69,120,105,116,67,111,100,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.201422531 UTC

[section ""data" . GHC.IO.Exception.$fExceptionExitCode5_closure" {
     GHC.IO.Exception.$fExceptionExitCode5_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$fExceptionExitCode6_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.203122135 UTC

[section ""data" . GHC.IO.Exception.$tcExitCode_closure" {
     GHC.IO.Exception.$tcExitCode_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$fExceptionExitCode5_closure+1;
         const GHC.Types.krep$*_closure;
         const 8177210543059932106;
         const 3694335570555580912;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.204859366 UTC

[section ""data" . GHC.IO.Exception.$tc'ExitSuccess1_closure" {
     GHC.IO.Exception.$tc'ExitSuccess1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Exception.$tcExitCode_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.206579264 UTC

[section ""cstring" . GHC.IO.Exception.$tc'ExitSuccess3_bytes" {
     GHC.IO.Exception.$tc'ExitSuccess3_bytes:
         I8[] [39,69,120,105,116,83,117,99,99,101,115,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.208238538 UTC

[section ""data" . GHC.IO.Exception.$tc'ExitSuccess2_closure" {
     GHC.IO.Exception.$tc'ExitSuccess2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'ExitSuccess3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.210524765 UTC

[section ""data" . GHC.IO.Exception.$tc'ExitSuccess_closure" {
     GHC.IO.Exception.$tc'ExitSuccess_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'ExitSuccess2_closure+1;
         const GHC.IO.Exception.$tc'ExitSuccess1_closure+1;
         const 6011095708053053284;
         const 14896688531190285489;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.212298508 UTC

[section ""data" . GHC.IO.Exception.$tc'ExitFailure1_closure" {
     GHC.IO.Exception.$tc'ExitFailure1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r8j3f_closure+1;
         const GHC.IO.Exception.$tc'ExitSuccess1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.214122133 UTC

[section ""cstring" . GHC.IO.Exception.$tc'ExitFailure3_bytes" {
     GHC.IO.Exception.$tc'ExitFailure3_bytes:
         I8[] [39,69,120,105,116,70,97,105,108,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.21583854 UTC

[section ""data" . GHC.IO.Exception.$tc'ExitFailure2_closure" {
     GHC.IO.Exception.$tc'ExitFailure2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'ExitFailure3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.218246731 UTC

[section ""data" . GHC.IO.Exception.$tc'ExitFailure_closure" {
     GHC.IO.Exception.$tc'ExitFailure_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'ExitFailure2_closure+1;
         const GHC.IO.Exception.$tc'ExitFailure1_closure+4;
         const 13149331685465745995;
         const 10453046320643141131;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.22172191 UTC

[section ""data" . GHC.IO.Exception.$fExceptionExitCode4_closure" {
     GHC.IO.Exception.$fExceptionExitCode4_closure:
         const GHC.IO.Exception.$fExceptionExitCode4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionExitCode4_entry() //  [R1]
         { []
         }
     {offset
       c8qFw: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c8qFx; else goto c8qFy;
       c8qFx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8qFy: // global
           (_c8qFo::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8qFo::I64 == 0) goto c8qFq; else goto c8qFp;
       c8qFq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8qFp: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8qFo::I64;
           I64[Sp - 24] = block_c8qFr_info;
           R6 = 0;
           R5 = GHC.IO.Exception.$fExceptionExitCode5_closure+1;
           R4 = GHC.IO.Exception.$trModule_closure+1;
           R3 = 3694335570555580912;
           R2 = 8177210543059932106;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionExitCode4_info" {
     GHC.IO.Exception.$fExceptionExitCode4_info:
         const GHC.IO.Exception.$fExceptionExitCode4_entry;
         const 0;
         const 4294967317;
         const S8oB9_srt+560;
 },
 _c8qFr() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c8qFr: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c8qFs() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8qFr_info" {
     block_c8qFr_info:
         const _c8qFr;
         const 0;
         const 30;
 },
 _c8qFs() //  []
         { []
         }
     {offset
       c8qFs: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8qFB; else goto c8qFA;
       c8qFB: // global
           HpAlloc = 48;
           I64[Sp] = block_c8qFs_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c8qFA: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8qFs_info" {
     block_c8qFs_info:
         const _c8qFs;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.230780797 UTC

[section ""data" . GHC.IO.Exception.$fExceptionExitCode_$cfromException_closure" {
     GHC.IO.Exception.$fExceptionExitCode_$cfromException_closure:
         const GHC.IO.Exception.$fExceptionExitCode_$cfromException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionExitCode_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c8qGb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8qGf; else goto c8qGg;
       c8qGf: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionExitCode_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8qGg: // global
           I64[Sp - 8] = block_c8qG8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8qGB; else goto c8qG9;
       u8qGB: // global
           call _c8qG8(R1) args: 0, res: 0, upd: 0;
       c8qG9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionExitCode_$cfromException_info" {
     GHC.IO.Exception.$fExceptionExitCode_$cfromException_info:
         const GHC.IO.Exception.$fExceptionExitCode_$cfromException_entry;
         const 0;
         const 6917529031936049166;
         const 4294967301;
         const S8oB9_srt+568;
 },
 _c8qG8() //  [R1]
         { []
         }
     {offset
       c8qG8: // global
           I64[Sp - 8] = block_c8qGe_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qG8_info" {
     block_c8qG8_info:
         const _c8qG8;
         const 0;
         const 4611686022722355230;
         const S8oB9_srt+568;
 },
 _c8qGe() //  [R1]
         { []
         }
     {offset
       c8qGe: // global
           I64[Sp] = block_c8qGl_info;
           R3 = GHC.IO.Exception.$fExceptionExitCode4_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qGe_info" {
     block_c8qGe_info:
         const _c8qGe;
         const 1;
         const 4611686022722355230;
         const S8oB9_srt+568;
 },
 _c8qGl() //  [R1]
         { []
         }
     {offset
       c8qGl: // global
           if (R1 & 7 == 1) goto c8qGs; else goto c8qGw;
       c8qGs: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8qGw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8qGz; else goto c8qGy;
       c8qGz: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8qGy: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qGl_info" {
     block_c8qGl_info:
         const _c8qGl;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.24008927 UTC

[section ""data" . GHC.IO.Exception.$fExceptionExitCode_closure" {
     GHC.IO.Exception.$fExceptionExitCode_closure:
         const GHC.Exception.C:Exception_con_info;
         const GHC.IO.Exception.$fExceptionExitCode4_closure;
         const GHC.IO.Exception.$fShowExitCode_closure+1;
         const GHC.IO.Exception.$fExceptionExitCode_$ctoException_closure+1;
         const GHC.IO.Exception.$fExceptionExitCode_$cfromException_closure+1;
         const GHC.IO.Exception.$fExceptionExitCode_$cshow_closure+1;
         const 0;
 },
 section ""data" . GHC.IO.Exception.$fExceptionExitCode_$ctoException_closure" {
     GHC.IO.Exception.$fExceptionExitCode_$ctoException_closure:
         const GHC.IO.Exception.$fExceptionExitCode_$ctoException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionExitCode_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c8qH7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8qHb; else goto c8qHa;
       c8qHb: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionExitCode_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8qHa: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = GHC.IO.Exception.$fExceptionExitCode_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionExitCode_$ctoException_info" {
     GHC.IO.Exception.$fExceptionExitCode_$ctoException_info:
         const GHC.IO.Exception.$fExceptionExitCode_$ctoException_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S8oB9_srt+816;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.244206279 UTC

[section ""cstring" . GHC.IO.Exception.$tcIOErrorType2_bytes" {
     GHC.IO.Exception.$tcIOErrorType2_bytes:
         I8[] [73,79,69,114,114,111,114,84,121,112,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.245871345 UTC

[section ""data" . GHC.IO.Exception.$tcIOErrorType1_closure" {
     GHC.IO.Exception.$tcIOErrorType1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tcIOErrorType2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.247540167 UTC

[section ""data" . GHC.IO.Exception.$tcIOErrorType_closure" {
     GHC.IO.Exception.$tcIOErrorType_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tcIOErrorType1_closure+1;
         const GHC.Types.krep$*_closure;
         const 13260403802836574836;
         const 9962456285013293537;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.2493528 UTC

[section ""data" . GHC.IO.Exception.$tc'AlreadyExists1_closure" {
     GHC.IO.Exception.$tc'AlreadyExists1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Exception.$tcIOErrorType_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.250971535 UTC

[section ""cstring" . GHC.IO.Exception.$tc'AlreadyExists3_bytes" {
     GHC.IO.Exception.$tc'AlreadyExists3_bytes:
         I8[] [39,65,108,114,101,97,100,121,69,120,105,115,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.253603991 UTC

[section ""data" . GHC.IO.Exception.$tc'AlreadyExists2_closure" {
     GHC.IO.Exception.$tc'AlreadyExists2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'AlreadyExists3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.255381406 UTC

[section ""data" . GHC.IO.Exception.$tc'AlreadyExists_closure" {
     GHC.IO.Exception.$tc'AlreadyExists_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists2_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const 13383994725479033447;
         const 16077735236426702934;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.257124805 UTC

[section ""cstring" . GHC.IO.Exception.$tc'NoSuchThing2_bytes" {
     GHC.IO.Exception.$tc'NoSuchThing2_bytes:
         I8[] [39,78,111,83,117,99,104,84,104,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.258839978 UTC

[section ""data" . GHC.IO.Exception.$tc'NoSuchThing1_closure" {
     GHC.IO.Exception.$tc'NoSuchThing1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'NoSuchThing2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.260490311 UTC

[section ""data" . GHC.IO.Exception.$tc'NoSuchThing_closure" {
     GHC.IO.Exception.$tc'NoSuchThing_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'NoSuchThing1_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const 1065788776620214811;
         const 7708272823769791518;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.262258166 UTC

[section ""cstring" . GHC.IO.Exception.$tc'ResourceBusy2_bytes" {
     GHC.IO.Exception.$tc'ResourceBusy2_bytes:
         I8[] [39,82,101,115,111,117,114,99,101,66,117,115,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.263906262 UTC

[section ""data" . GHC.IO.Exception.$tc'ResourceBusy1_closure" {
     GHC.IO.Exception.$tc'ResourceBusy1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'ResourceBusy2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.265662254 UTC

[section ""data" . GHC.IO.Exception.$tc'ResourceBusy_closure" {
     GHC.IO.Exception.$tc'ResourceBusy_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'ResourceBusy1_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const 81041156937828521;
         const 16732677038738772765;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.267401357 UTC

[section ""cstring" . GHC.IO.Exception.$tc'ResourceExhausted2_bytes" {
     GHC.IO.Exception.$tc'ResourceExhausted2_bytes:
         I8[] [39,82,101,115,111,117,114,99,101,69,120,104,97,117,115,116,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.26909123 UTC

[section ""data" . GHC.IO.Exception.$tc'ResourceExhausted1_closure" {
     GHC.IO.Exception.$tc'ResourceExhausted1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'ResourceExhausted2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.270810976 UTC

[section ""data" . GHC.IO.Exception.$tc'ResourceExhausted_closure" {
     GHC.IO.Exception.$tc'ResourceExhausted_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'ResourceExhausted1_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const 661664682644939150;
         const 17978068149744050586;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.272539584 UTC

[section ""cstring" . GHC.IO.Exception.$tc'EOF2_bytes" {
     GHC.IO.Exception.$tc'EOF2_bytes:
         I8[] [39,69,79,70]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.274592562 UTC

[section ""data" . GHC.IO.Exception.$tc'EOF1_closure" {
     GHC.IO.Exception.$tc'EOF1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'EOF2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.27625711 UTC

[section ""data" . GHC.IO.Exception.$tc'EOF_closure" {
     GHC.IO.Exception.$tc'EOF_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'EOF1_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const 15446447841260182649;
         const 9615135582901540009;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.278640621 UTC

[section ""cstring" . GHC.IO.Exception.$tc'IllegalOperation2_bytes" {
     GHC.IO.Exception.$tc'IllegalOperation2_bytes:
         I8[] [39,73,108,108,101,103,97,108,79,112,101,114,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.280329422 UTC

[section ""data" . GHC.IO.Exception.$tc'IllegalOperation1_closure" {
     GHC.IO.Exception.$tc'IllegalOperation1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'IllegalOperation2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.282074283 UTC

[section ""data" . GHC.IO.Exception.$tc'IllegalOperation_closure" {
     GHC.IO.Exception.$tc'IllegalOperation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'IllegalOperation1_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const 2997750042243464947;
         const 13732497530673208550;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.283802297 UTC

[section ""cstring" . GHC.IO.Exception.$tc'PermissionDenied2_bytes" {
     GHC.IO.Exception.$tc'PermissionDenied2_bytes:
         I8[] [39,80,101,114,109,105,115,115,105,111,110,68,101,110,105,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.286054814 UTC

[section ""data" . GHC.IO.Exception.$tc'PermissionDenied1_closure" {
     GHC.IO.Exception.$tc'PermissionDenied1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'PermissionDenied2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.287639709 UTC

[section ""data" . GHC.IO.Exception.$tc'PermissionDenied_closure" {
     GHC.IO.Exception.$tc'PermissionDenied_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'PermissionDenied1_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const 17002959889944859215;
         const 11679101384562499698;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.289349912 UTC

[section ""cstring" . GHC.IO.Exception.$tc'UserError2_bytes" {
     GHC.IO.Exception.$tc'UserError2_bytes:
         I8[] [39,85,115,101,114,69,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.290965651 UTC

[section ""data" . GHC.IO.Exception.$tc'UserError1_closure" {
     GHC.IO.Exception.$tc'UserError1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'UserError2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.292677846 UTC

[section ""data" . GHC.IO.Exception.$tc'UserError_closure" {
     GHC.IO.Exception.$tc'UserError_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'UserError1_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const 2110707588451626880;
         const 793010194601470118;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.294352921 UTC

[section ""cstring" . GHC.IO.Exception.$tc'UnsatisfiedConstraints2_bytes" {
     GHC.IO.Exception.$tc'UnsatisfiedConstraints2_bytes:
         I8[] [39,85,110,115,97,116,105,115,102,105,101,100,67,111,110,115,116,114,97,105,110,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.295971743 UTC

[section ""data" . GHC.IO.Exception.$tc'UnsatisfiedConstraints1_closure" {
     GHC.IO.Exception.$tc'UnsatisfiedConstraints1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'UnsatisfiedConstraints2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.297767883 UTC

[section ""data" . GHC.IO.Exception.$tc'UnsatisfiedConstraints_closure" {
     GHC.IO.Exception.$tc'UnsatisfiedConstraints_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'UnsatisfiedConstraints1_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const 7774786765253276509;
         const 11159080782866109022;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.299568506 UTC

[section ""cstring" . GHC.IO.Exception.$tc'SystemError2_bytes" {
     GHC.IO.Exception.$tc'SystemError2_bytes:
         I8[] [39,83,121,115,116,101,109,69,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.301209259 UTC

[section ""data" . GHC.IO.Exception.$tc'SystemError1_closure" {
     GHC.IO.Exception.$tc'SystemError1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'SystemError2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.303836129 UTC

[section ""data" . GHC.IO.Exception.$tc'SystemError_closure" {
     GHC.IO.Exception.$tc'SystemError_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'SystemError1_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const 14723310935893761222;
         const 8619015840207109406;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.305741374 UTC

[section ""cstring" . GHC.IO.Exception.$tc'ProtocolError2_bytes" {
     GHC.IO.Exception.$tc'ProtocolError2_bytes:
         I8[] [39,80,114,111,116,111,99,111,108,69,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.307451489 UTC

[section ""data" . GHC.IO.Exception.$tc'ProtocolError1_closure" {
     GHC.IO.Exception.$tc'ProtocolError1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'ProtocolError2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.309194 UTC

[section ""data" . GHC.IO.Exception.$tc'ProtocolError_closure" {
     GHC.IO.Exception.$tc'ProtocolError_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'ProtocolError1_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const 2348878698518162749;
         const 1616623917153004368;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.310930814 UTC

[section ""cstring" . GHC.IO.Exception.$tc'OtherError2_bytes" {
     GHC.IO.Exception.$tc'OtherError2_bytes:
         I8[] [39,79,116,104,101,114,69,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.312593472 UTC

[section ""data" . GHC.IO.Exception.$tc'OtherError1_closure" {
     GHC.IO.Exception.$tc'OtherError1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'OtherError2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.314887446 UTC

[section ""data" . GHC.IO.Exception.$tc'OtherError_closure" {
     GHC.IO.Exception.$tc'OtherError_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'OtherError1_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const 11457353566076247204;
         const 7448318885269020484;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.316616177 UTC

[section ""cstring" . GHC.IO.Exception.$tc'InvalidArgument2_bytes" {
     GHC.IO.Exception.$tc'InvalidArgument2_bytes:
         I8[] [39,73,110,118,97,108,105,100,65,114,103,117,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.318271203 UTC

[section ""data" . GHC.IO.Exception.$tc'InvalidArgument1_closure" {
     GHC.IO.Exception.$tc'InvalidArgument1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'InvalidArgument2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.320030388 UTC

[section ""data" . GHC.IO.Exception.$tc'InvalidArgument_closure" {
     GHC.IO.Exception.$tc'InvalidArgument_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'InvalidArgument1_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const 2877905627043716713;
         const 870624010466166536;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.321811941 UTC

[section ""cstring" . GHC.IO.Exception.$tc'InappropriateType2_bytes" {
     GHC.IO.Exception.$tc'InappropriateType2_bytes:
         I8[] [39,73,110,97,112,112,114,111,112,114,105,97,116,101,84,121,112,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.323419795 UTC

[section ""data" . GHC.IO.Exception.$tc'InappropriateType1_closure" {
     GHC.IO.Exception.$tc'InappropriateType1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'InappropriateType2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.325107379 UTC

[section ""data" . GHC.IO.Exception.$tc'InappropriateType_closure" {
     GHC.IO.Exception.$tc'InappropriateType_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'InappropriateType1_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const 12194312324817842633;
         const 15900888301186079347;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.327240911 UTC

[section ""cstring" . GHC.IO.Exception.$tc'HardwareFault2_bytes" {
     GHC.IO.Exception.$tc'HardwareFault2_bytes:
         I8[] [39,72,97,114,100,119,97,114,101,70,97,117,108,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.329396633 UTC

[section ""data" . GHC.IO.Exception.$tc'HardwareFault1_closure" {
     GHC.IO.Exception.$tc'HardwareFault1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'HardwareFault2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.331269683 UTC

[section ""data" . GHC.IO.Exception.$tc'HardwareFault_closure" {
     GHC.IO.Exception.$tc'HardwareFault_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'HardwareFault1_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const 56378797976289033;
         const 18431513512258190916;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.332980078 UTC

[section ""cstring" . GHC.IO.Exception.$tc'UnsupportedOperation2_bytes" {
     GHC.IO.Exception.$tc'UnsupportedOperation2_bytes:
         I8[] [39,85,110,115,117,112,112,111,114,116,101,100,79,112,101,114,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.334552319 UTC

[section ""data" . GHC.IO.Exception.$tc'UnsupportedOperation1_closure" {
     GHC.IO.Exception.$tc'UnsupportedOperation1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'UnsupportedOperation2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.336194212 UTC

[section ""data" . GHC.IO.Exception.$tc'UnsupportedOperation_closure" {
     GHC.IO.Exception.$tc'UnsupportedOperation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'UnsupportedOperation1_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const 8512525638220727204;
         const 8859286885870192330;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.338289052 UTC

[section ""cstring" . GHC.IO.Exception.$tc'TimeExpired2_bytes" {
     GHC.IO.Exception.$tc'TimeExpired2_bytes:
         I8[] [39,84,105,109,101,69,120,112,105,114,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.33989502 UTC

[section ""data" . GHC.IO.Exception.$tc'TimeExpired1_closure" {
     GHC.IO.Exception.$tc'TimeExpired1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'TimeExpired2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.34165438 UTC

[section ""data" . GHC.IO.Exception.$tc'TimeExpired_closure" {
     GHC.IO.Exception.$tc'TimeExpired_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'TimeExpired1_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const 10911629093425571025;
         const 350480745296812363;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.343400299 UTC

[section ""cstring" . GHC.IO.Exception.$tc'ResourceVanished2_bytes" {
     GHC.IO.Exception.$tc'ResourceVanished2_bytes:
         I8[] [39,82,101,115,111,117,114,99,101,86,97,110,105,115,104,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.345005496 UTC

[section ""data" . GHC.IO.Exception.$tc'ResourceVanished1_closure" {
     GHC.IO.Exception.$tc'ResourceVanished1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'ResourceVanished2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.346816301 UTC

[section ""data" . GHC.IO.Exception.$tc'ResourceVanished_closure" {
     GHC.IO.Exception.$tc'ResourceVanished_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'ResourceVanished1_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const 14859807110076739958;
         const 15612633629389469803;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.348579706 UTC

[section ""cstring" . GHC.IO.Exception.$tc'Interrupted2_bytes" {
     GHC.IO.Exception.$tc'Interrupted2_bytes:
         I8[] [39,73,110,116,101,114,114,117,112,116,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.35067571 UTC

[section ""data" . GHC.IO.Exception.$tc'Interrupted1_closure" {
     GHC.IO.Exception.$tc'Interrupted1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'Interrupted2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.352385796 UTC

[section ""data" . GHC.IO.Exception.$tc'Interrupted_closure" {
     GHC.IO.Exception.$tc'Interrupted_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'Interrupted1_closure+1;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const 17492795632142579451;
         const 15910845476779721305;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.354196511 UTC

[section ""cstring" . GHC.IO.Exception.$fExceptionIOException6_bytes" {
     GHC.IO.Exception.$fExceptionIOException6_bytes:
         I8[] [73,79,69,120,99,101,112,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.356629002 UTC

[section ""data" . GHC.IO.Exception.$fExceptionIOException5_closure" {
     GHC.IO.Exception.$fExceptionIOException5_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$fExceptionIOException6_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.358438394 UTC

[section ""data" . GHC.IO.Exception.$tcIOException_closure" {
     GHC.IO.Exception.$tcIOException_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$fExceptionIOException5_closure+1;
         const GHC.Types.krep$*_closure;
         const 10434000377887324342;
         const 16509375198449321302;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.360294698 UTC

[section ""data" . $krep20_r8j3A_closure" {
     $krep20_r8j3A_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Exception.$tcIOException_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.362444232 UTC

[section ""data" . $krep21_r8j3B_closure" {
     $krep21_r8j3B_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r8j3q_closure+1;
         const $krep20_r8j3A_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.36412325 UTC

[section ""data" . $krep22_r8j3C_closure" {
     $krep22_r8j3C_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r8j3k_closure+1;
         const $krep21_r8j3B_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.365817775 UTC

[section ""data" . $krep23_r8j3D_closure" {
     $krep23_r8j3D_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r8j3o_closure+1;
         const $krep22_r8j3C_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.367461315 UTC

[section ""data" . $krep24_r8j3E_closure" {
     $krep24_r8j3E_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r8j3o_closure+1;
         const $krep23_r8j3D_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.369180172 UTC

[section ""data" . $krep25_r8j3F_closure" {
     $krep25_r8j3F_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.IO.Exception.$tc'AlreadyExists1_closure+1;
         const $krep24_r8j3E_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.370906774 UTC

[section ""data" . GHC.IO.Exception.$tc'IOError1_closure" {
     GHC.IO.Exception.$tc'IOError1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r8j3m_closure+1;
         const $krep25_r8j3F_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.372642266 UTC

[section ""cstring" . GHC.IO.Exception.$tc'IOError3_bytes" {
     GHC.IO.Exception.$tc'IOError3_bytes:
         I8[] [39,73,79,69,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.374442265 UTC

[section ""data" . GHC.IO.Exception.$tc'IOError2_closure" {
     GHC.IO.Exception.$tc'IOError2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Exception.$tc'IOError3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.376092748 UTC

[section ""data" . GHC.IO.Exception.$tc'IOError_closure" {
     GHC.IO.Exception.$tc'IOError_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Exception.$trModule_closure+1;
         const GHC.IO.Exception.$tc'IOError2_closure+1;
         const GHC.IO.Exception.$tc'IOError1_closure+4;
         const 16489485703680136625;
         const 16514523686887444952;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.379516749 UTC

[section ""data" . GHC.IO.Exception.$fExceptionIOException4_closure" {
     GHC.IO.Exception.$fExceptionIOException4_closure:
         const GHC.IO.Exception.$fExceptionIOException4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.$fExceptionIOException4_entry() //  [R1]
         { []
         }
     {offset
       c8qIH: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c8qII; else goto c8qIJ;
       c8qII: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8qIJ: // global
           (_c8qIz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8qIz::I64 == 0) goto c8qIB; else goto c8qIA;
       c8qIB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8qIA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8qIz::I64;
           I64[Sp - 24] = block_c8qIC_info;
           R6 = 0;
           R5 = GHC.IO.Exception.$fExceptionIOException5_closure+1;
           R4 = GHC.IO.Exception.$trModule_closure+1;
           R3 = 16509375198449321302;
           R2 = 10434000377887324342;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionIOException4_info" {
     GHC.IO.Exception.$fExceptionIOException4_info:
         const GHC.IO.Exception.$fExceptionIOException4_entry;
         const 0;
         const 4294967317;
         const S8oB9_srt+832;
 },
 _c8qIC() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c8qIC: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c8qID() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8qIC_info" {
     block_c8qIC_info:
         const _c8qIC;
         const 0;
         const 30;
 },
 _c8qID() //  []
         { []
         }
     {offset
       c8qID: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8qIM; else goto c8qIL;
       c8qIM: // global
           HpAlloc = 48;
           I64[Sp] = block_c8qID_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c8qIL: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8qID_info" {
     block_c8qID_info:
         const _c8qID;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.389097446 UTC

[section ""data" . GHC.IO.Exception.$fExceptionIOException_$cfromException_closure" {
     GHC.IO.Exception.$fExceptionIOException_$cfromException_closure:
         const GHC.IO.Exception.$fExceptionIOException_$cfromException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionIOException_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c8qJm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8qJq; else goto c8qJr;
       c8qJq: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionIOException_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8qJr: // global
           I64[Sp - 8] = block_c8qJj_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8qJM; else goto c8qJk;
       u8qJM: // global
           call _c8qJj(R1) args: 0, res: 0, upd: 0;
       c8qJk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionIOException_$cfromException_info" {
     GHC.IO.Exception.$fExceptionIOException_$cfromException_info:
         const GHC.IO.Exception.$fExceptionIOException_$cfromException_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S8oB9_srt+840;
 },
 _c8qJj() //  [R1]
         { []
         }
     {offset
       c8qJj: // global
           I64[Sp - 8] = block_c8qJp_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qJj_info" {
     block_c8qJj_info:
         const _c8qJj;
         const 0;
         const 12884901918;
         const S8oB9_srt+848;
 },
 _c8qJp() //  [R1]
         { []
         }
     {offset
       c8qJp: // global
           I64[Sp] = block_c8qJw_info;
           R3 = GHC.IO.Exception.$fExceptionIOException4_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qJp_info" {
     block_c8qJp_info:
         const _c8qJp;
         const 1;
         const 12884901918;
         const S8oB9_srt+848;
 },
 _c8qJw() //  [R1]
         { []
         }
     {offset
       c8qJw: // global
           if (R1 & 7 == 1) goto c8qJD; else goto c8qJH;
       c8qJD: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8qJH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8qJK; else goto c8qJJ;
       c8qJK: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8qJJ: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qJw_info" {
     block_c8qJw_info:
         const _c8qJw;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.398351981 UTC

[section ""data" . GHC.IO.Exception.$fExceptionIOException_closure" {
     GHC.IO.Exception.$fExceptionIOException_closure:
         const GHC.Exception.C:Exception_con_info;
         const GHC.IO.Exception.$fExceptionIOException4_closure;
         const GHC.IO.Exception.$fShowIOException_closure+1;
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure+1;
         const GHC.IO.Exception.$fExceptionIOException_$cfromException_closure+1;
         const GHC.IO.Exception.$fExceptionIOException_$cshow_closure+1;
         const 0;
 },
 section ""data" . GHC.IO.Exception.$fExceptionIOException_$ctoException_closure" {
     GHC.IO.Exception.$fExceptionIOException_$ctoException_closure:
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionIOException_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c8qKi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8qKm; else goto c8qKl;
       c8qKm: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8qKl: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = GHC.IO.Exception.$fExceptionIOException_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionIOException_$ctoException_info" {
     GHC.IO.Exception.$fExceptionIOException_$ctoException_info:
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S8oB9_srt+864;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.403183292 UTC

[section ""data" . GHC.IO.Exception.ioError1_closure" {
     GHC.IO.Exception.ioError1_closure:
         const GHC.IO.Exception.ioError1_info;
         const 0;
 },
 sat_s8ozU_entry() //  [R1]
         { []
         }
     {offset
       c8qKD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8qKE; else goto c8qKF;
       c8qKE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8qKF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8ozU_info" {
     sat_s8ozU_info:
         const sat_s8ozU_entry;
         const 1;
         const 4294967312;
         const S8oB9_srt+872;
 },
 GHC.IO.Exception.ioError1_entry() //  [R2]
         { []
         }
     {offset
       c8qKG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8qKK; else goto c8qKJ;
       c8qKK: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Exception.ioError1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8qKJ: // global
           I64[Hp - 16] = sat_s8ozU_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.ioError1_info" {
     GHC.IO.Exception.ioError1_info:
         const GHC.IO.Exception.ioError1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const S8oB9_srt+872;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.408540399 UTC

[section ""data" . GHC.IO.Exception.ioException_closure" {
     GHC.IO.Exception.ioException_closure:
         const GHC.IO.Exception.ioException_info;
         const 0;
 },
 GHC.IO.Exception.ioException_entry() //  [R2]
         { []
         }
     {offset
       c8qKZ: // global
           R2 = R2;
           call GHC.IO.Exception.ioError1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.ioException_info" {
     GHC.IO.Exception.ioException_info:
         const GHC.IO.Exception.ioException_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S8oB9_srt+880;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.411784482 UTC

[section ""data" . GHC.IO.Exception.ioError_closure" {
     GHC.IO.Exception.ioError_closure:
         const GHC.IO.Exception.ioError_info;
         const 0;
 },
 GHC.IO.Exception.ioError_entry() //  [R2]
         { []
         }
     {offset
       c8qLa: // global
           R2 = R2;
           call GHC.IO.Exception.ioError1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.ioError_info" {
     GHC.IO.Exception.ioError_info:
         const GHC.IO.Exception.ioError_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S8oB9_srt+880;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.414769089 UTC

[section ""data" . GHC.IO.Exception.$fxExceptionIOException_closure" {
     GHC.IO.Exception.$fxExceptionIOException_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Exception.$fExceptionIOException_closure+1;
         const 0;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.418159303 UTC

[section ""data" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cfromException_closure" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cfromException_closure:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cfromException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c8qLp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8qLt; else goto c8qLu;
       c8qLt: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8qLu: // global
           I64[Sp - 8] = block_c8qLm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8qLP; else goto c8qLn;
       u8qLP: // global
           call _c8qLm(R1) args: 0, res: 0, upd: 0;
       c8qLn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cfromException_info" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cfromException_info:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cfromException_entry;
         const 0;
         const 210453397518;
         const 4294967301;
         const S8oB9_srt+856;
 },
 _c8qLm() //  [R1]
         { []
         }
     {offset
       c8qLm: // global
           I64[Sp - 8] = block_c8qLs_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qLm_info" {
     block_c8qLm_info:
         const _c8qLm;
         const 0;
         const 141733920798;
         const S8oB9_srt+856;
 },
 _c8qLs() //  [R1]
         { []
         }
     {offset
       c8qLs: // global
           I64[Sp] = block_c8qLz_info;
           R3 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar3_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qLs_info" {
     block_c8qLs_info:
         const _c8qLs;
         const 1;
         const 141733920798;
         const S8oB9_srt+856;
 },
 _c8qLz() //  [R1]
         { []
         }
     {offset
       c8qLz: // global
           if (R1 & 7 == 1) goto c8qLG; else goto c8qLK;
       c8qLG: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8qLK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8qLN; else goto c8qLM;
       c8qLN: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8qLM: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qLz_info" {
     block_c8qLz_info:
         const _c8qLz;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.427644175 UTC

[section ""data" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_closure" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_closure:
         const GHC.Exception.C:Exception_con_info;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar3_closure;
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_closure+1;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$ctoException_closure+1;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cfromException_closure+1;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cshow_closure+1;
         const 0;
 },
 section ""data" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$ctoException_closure" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$ctoException_closure:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$ctoException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c8qMl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8qMp; else goto c8qMo;
       c8qMp: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8qMo: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$ctoException_info" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$ctoException_info:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$ctoException_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S8oB9_srt+904;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.432486038 UTC

[section ""data" . GHC.IO.Exception.blockedIndefinitelyOnMVar_closure" {
     GHC.IO.Exception.blockedIndefinitelyOnMVar_closure:
         const GHC.IO.Exception.blockedIndefinitelyOnMVar_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.blockedIndefinitelyOnMVar_entry() //  [R1]
         { []
         }
     {offset
       c8qME: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8qMF; else goto c8qMG;
       c8qMF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8qMG: // global
           (_c8qMB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8qMB::I64 == 0) goto c8qMD; else goto c8qMC;
       c8qMD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8qMC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8qMB::I64;
           R2 = GHC.IO.Exception.BlockedIndefinitelyOnMVar_closure+1;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.blockedIndefinitelyOnMVar_info" {
     GHC.IO.Exception.blockedIndefinitelyOnMVar_info:
         const GHC.IO.Exception.blockedIndefinitelyOnMVar_entry;
         const 0;
         const 4294967317;
         const S8oB9_srt+912;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.437339799 UTC

[section ""data" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cfromException_closure" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cfromException_closure:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cfromException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c8qMW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8qN0; else goto c8qN1;
       c8qN0: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8qN1: // global
           I64[Sp - 8] = block_c8qMT_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8qNm; else goto c8qMU;
       u8qNm: // global
           call _c8qMT(R1) args: 0, res: 0, upd: 0;
       c8qMU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cfromException_info" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cfromException_info:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cfromException_entry;
         const 0;
         const 3302829850638;
         const 4294967301;
         const S8oB9_srt+856;
 },
 _c8qMT() //  [R1]
         { []
         }
     {offset
       c8qMT: // global
           I64[Sp - 8] = block_c8qMZ_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qMT_info" {
     block_c8qMT_info:
         const _c8qMT;
         const 0;
         const 2203318222878;
         const S8oB9_srt+856;
 },
 _c8qMZ() //  [R1]
         { []
         }
     {offset
       c8qMZ: // global
           I64[Sp] = block_c8qN6_info;
           R3 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM3_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qMZ_info" {
     block_c8qMZ_info:
         const _c8qMZ;
         const 1;
         const 2203318222878;
         const S8oB9_srt+856;
 },
 _c8qN6() //  [R1]
         { []
         }
     {offset
       c8qN6: // global
           if (R1 & 7 == 1) goto c8qNd; else goto c8qNh;
       c8qNd: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8qNh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8qNk; else goto c8qNj;
       c8qNk: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8qNj: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qN6_info" {
     block_c8qN6_info:
         const _c8qN6;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.446333709 UTC

[section ""data" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_closure" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_closure:
         const GHC.Exception.C:Exception_con_info;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM3_closure;
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_closure+1;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$ctoException_closure+1;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cfromException_closure+1;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cshow_closure+1;
         const 0;
 },
 section ""data" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$ctoException_closure" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$ctoException_closure:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$ctoException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c8qNS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8qNW; else goto c8qNV;
       c8qNW: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8qNV: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$ctoException_info" {
     GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$ctoException_info:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$ctoException_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S8oB9_srt+936;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.451058685 UTC

[section ""data" . GHC.IO.Exception.blockedIndefinitelyOnSTM_closure" {
     GHC.IO.Exception.blockedIndefinitelyOnSTM_closure:
         const GHC.IO.Exception.blockedIndefinitelyOnSTM_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.blockedIndefinitelyOnSTM_entry() //  [R1]
         { []
         }
     {offset
       c8qOb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8qOc; else goto c8qOd;
       c8qOc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8qOd: // global
           (_c8qO8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8qO8::I64 == 0) goto c8qOa; else goto c8qO9;
       c8qOa: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8qO9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8qO8::I64;
           R2 = GHC.IO.Exception.BlockedIndefinitelyOnSTM_closure+1;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.blockedIndefinitelyOnSTM_info" {
     GHC.IO.Exception.blockedIndefinitelyOnSTM_info:
         const GHC.IO.Exception.blockedIndefinitelyOnSTM_entry;
         const 0;
         const 4294967317;
         const S8oB9_srt+944;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.458231653 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cfromException_closure" {
     GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cfromException_closure:
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cfromException_info;
         const 0;
 },
 section ""relreadonly" . u8qPk_srtd" {
     u8qPk_srtd:
         const S8oB9_srt+688;
         const 35;
         const 25771900929;
 },
 GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c8qOt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8qOx; else goto c8qOy;
       c8qOx: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8qOy: // global
           I64[Sp - 8] = block_c8qOq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8qPh; else goto c8qOr;
       u8qPh: // global
           call _c8qOq(R1) args: 0, res: 0, upd: 0;
       c8qOr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cfromException_info" {
     GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cfromException_info:
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cfromException_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u8qPk_srtd;
 },
 section ""relreadonly" . u8qPl_srtd" {
     u8qPl_srtd:
         const S8oB9_srt+688;
         const 35;
         const 17181966337;
 },
 _c8qOq() //  [R1]
         { []
         }
     {offset
       c8qOq: // global
           I64[Sp - 8] = block_c8qOw_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qOq_info" {
     block_c8qOq_info:
         const _c8qOq;
         const 0;
         const 18446744069414584350;
         const u8qPl_srtd;
 },
 section ""relreadonly" . u8qPm_srtd" {
     u8qPm_srtd:
         const S8oB9_srt+688;
         const 35;
         const 17181966337;
 },
 _c8qOw() //  [R1]
         { []
         }
     {offset
       c8qOw: // global
           I64[Sp] = block_c8qOD_info;
           R3 = GHC.IO.Exception.$fExceptionAllocationLimitExceeded6_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qOw_info" {
     block_c8qOw_info:
         const _c8qOw;
         const 1;
         const 18446744069414584350;
         const u8qPm_srtd;
 },
 _c8qOD() //  [R1]
         { []
         }
     {offset
       c8qOD: // global
           if (R1 & 7 == 1) goto u8qPf; else goto c8qOT;
       u8qPf: // global
           Sp = Sp + 16;
           call _c8qP5() args: 0, res: 0, upd: 0;
       c8qOT: // global
           _s8oAa::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8qON_info;
           R1 = _s8oAa::P64;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qOD_info" {
     block_c8qOD_info:
         const _c8qOD;
         const 1;
         const 35188667056158;
         const S8oB9_srt+856;
 },
 _c8qON() //  [R1]
         { []
         }
     {offset
       c8qON: // global
           I64[Sp - 8] = block_c8qOR_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qON_info" {
     block_c8qON_info:
         const _c8qON;
         const 0;
         const 35188667056158;
         const S8oB9_srt+856;
 },
 _c8qOR() //  [R1]
         { []
         }
     {offset
       c8qOR: // global
           I64[Sp] = block_c8qOY_info;
           R3 = GHC.IO.Exception.$fExceptionAllocationLimitExceeded3_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qOR_info" {
     block_c8qOR_info:
         const _c8qOR;
         const 1;
         const 35188667056158;
         const S8oB9_srt+856;
 },
 _c8qOY() //  [R1]
         { []
         }
     {offset
       c8qOY: // global
           if (R1 & 7 == 1) goto u8qPg; else goto c8qP9;
       u8qPg: // global
           Sp = Sp + 16;
           call _c8qP5() args: 0, res: 0, upd: 0;
       c8qP9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8qPc; else goto c8qPb;
       c8qPc: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8qPb: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qOY_info" {
     block_c8qOY_info:
         const _c8qOY;
         const 1;
         const 30;
 },
 _c8qP5() //  []
         { []
         }
     {offset
       c8qP5: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.475461603 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAllocationLimitExceeded_closure" {
     GHC.IO.Exception.$fExceptionAllocationLimitExceeded_closure:
         const GHC.Exception.C:Exception_con_info;
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded3_closure;
         const GHC.IO.Exception.$fShowAllocationLimitExceeded_closure+1;
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$ctoException_closure+1;
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cfromException_closure+1;
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cshow_closure+1;
         const 0;
 },
 section ""data" . GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$ctoException_closure" {
     GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$ctoException_closure:
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$ctoException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c8qQc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8qQg; else goto c8qQf;
       c8qQg: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8qQf: // global
           I64[Hp - 16] = GHC.IO.Exception.SomeAsyncException_con_info;
           P64[Hp - 8] = GHC.IO.Exception.$fExceptionAllocationLimitExceeded_closure+1;
           P64[Hp] = R2;
           R2 = Hp - 15;
           call GHC.IO.Exception.$fExceptionSomeAsyncException_$ctoException_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$ctoException_info" {
     GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$ctoException_info:
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$ctoException_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S8oB9_srt+968;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.480477114 UTC

[section ""data" . GHC.IO.Exception.allocationLimitExceeded_closure" {
     GHC.IO.Exception.allocationLimitExceeded_closure:
         const GHC.IO.Exception.allocationLimitExceeded_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.allocationLimitExceeded_entry() //  [R1]
         { []
         }
     {offset
       c8qQu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8qQv; else goto c8qQw;
       c8qQv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8qQw: // global
           (_c8qQr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8qQr::I64 == 0) goto c8qQt; else goto c8qQs;
       c8qQt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8qQs: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8qQr::I64;
           R2 = GHC.IO.Exception.AllocationLimitExceeded_closure+1;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.allocationLimitExceeded_info" {
     GHC.IO.Exception.allocationLimitExceeded_info:
         const GHC.IO.Exception.allocationLimitExceeded_entry;
         const 0;
         const 4294967317;
         const S8oB9_srt+976;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.485657867 UTC

[section ""data" . GHC.IO.Exception.$fExceptionCompactionFailed_$cfromException_closure" {
     GHC.IO.Exception.$fExceptionCompactionFailed_$cfromException_closure:
         const GHC.IO.Exception.$fExceptionCompactionFailed_$cfromException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionCompactionFailed_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c8qQM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8qQQ; else goto c8qQR;
       c8qQQ: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionCompactionFailed_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8qQR: // global
           I64[Sp - 8] = block_c8qQJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8qRc; else goto c8qQK;
       u8qRc: // global
           call _c8qQJ(R1) args: 0, res: 0, upd: 0;
       c8qQK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionCompactionFailed_$cfromException_info" {
     GHC.IO.Exception.$fExceptionCompactionFailed_$cfromException_info:
         const GHC.IO.Exception.$fExceptionCompactionFailed_$cfromException_entry;
         const 0;
         const 1688854155231246;
         const 4294967301;
         const S8oB9_srt+856;
 },
 _c8qQJ() //  [R1]
         { []
         }
     {offset
       c8qQJ: // global
           I64[Sp - 8] = block_c8qQP_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qQJ_info" {
     block_c8qQJ_info:
         const _c8qQJ;
         const 0;
         const 1125904201809950;
         const S8oB9_srt+856;
 },
 _c8qQP() //  [R1]
         { []
         }
     {offset
       c8qQP: // global
           I64[Sp] = block_c8qQW_info;
           R3 = GHC.IO.Exception.$fExceptionCompactionFailed2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qQP_info" {
     block_c8qQP_info:
         const _c8qQP;
         const 1;
         const 1125904201809950;
         const S8oB9_srt+856;
 },
 _c8qQW() //  [R1]
         { []
         }
     {offset
       c8qQW: // global
           if (R1 & 7 == 1) goto c8qR3; else goto c8qR7;
       c8qR3: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8qR7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8qRa; else goto c8qR9;
       c8qRa: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8qR9: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qQW_info" {
     block_c8qQW_info:
         const _c8qQW;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.49568689 UTC

[section ""data" . GHC.IO.Exception.$fExceptionCompactionFailed_closure" {
     GHC.IO.Exception.$fExceptionCompactionFailed_closure:
         const GHC.Exception.C:Exception_con_info;
         const GHC.IO.Exception.$fExceptionCompactionFailed2_closure;
         const GHC.IO.Exception.$fShowCompactionFailed_closure+1;
         const GHC.IO.Exception.$fExceptionCompactionFailed_$ctoException_closure+1;
         const GHC.IO.Exception.$fExceptionCompactionFailed_$cfromException_closure+1;
         const GHC.IO.Exception.$fExceptionCompactionFailed_$cshow_closure+1;
         const 0;
 },
 section ""data" . GHC.IO.Exception.$fExceptionCompactionFailed_$ctoException_closure" {
     GHC.IO.Exception.$fExceptionCompactionFailed_$ctoException_closure:
         const GHC.IO.Exception.$fExceptionCompactionFailed_$ctoException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionCompactionFailed_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c8qRI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8qRM; else goto c8qRL;
       c8qRM: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionCompactionFailed_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8qRL: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = GHC.IO.Exception.$fExceptionCompactionFailed_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionCompactionFailed_$ctoException_info" {
     GHC.IO.Exception.$fExceptionCompactionFailed_$ctoException_info:
         const GHC.IO.Exception.$fExceptionCompactionFailed_$ctoException_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S8oB9_srt+1008;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.500053811 UTC

[section ""cstring" . GHC.IO.Exception.cannotCompactMutable2_bytes" {
     GHC.IO.Exception.cannotCompactMutable2_bytes:
         I8[] [99,97,110,110,111,116,32,99,111,109,112,97,99,116,32,109,117,116,97,98,108,101,32,111,98,106,101,99,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.502758969 UTC

[section ""data" . GHC.IO.Exception.cannotCompactMutable1_closure" {
     GHC.IO.Exception.cannotCompactMutable1_closure:
         const GHC.IO.Exception.cannotCompactMutable1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.cannotCompactMutable1_entry() //  [R1]
         { []
         }
     {offset
       c8qS2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8qS3; else goto c8qS4;
       c8qS3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8qS4: // global
           (_c8qRZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8qRZ::I64 == 0) goto c8qS1; else goto c8qS0;
       c8qS1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8qS0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8qRZ::I64;
           R2 = GHC.IO.Exception.cannotCompactMutable2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.cannotCompactMutable1_info" {
     GHC.IO.Exception.cannotCompactMutable1_info:
         const GHC.IO.Exception.cannotCompactMutable1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.507200076 UTC

[section ""data" . GHC.IO.Exception.cannotCompactMutable_closure" {
     GHC.IO.Exception.cannotCompactMutable_closure:
         const GHC.IO.Exception.cannotCompactMutable_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.cannotCompactMutable_entry() //  [R1]
         { []
         }
     {offset
       c8qSj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8qSk; else goto c8qSl;
       c8qSk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8qSl: // global
           (_c8qSg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8qSg::I64 == 0) goto c8qSi; else goto c8qSh;
       c8qSi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8qSh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8qSg::I64;
           R2 = GHC.IO.Exception.cannotCompactMutable1_closure;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionCompactionFailed_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.cannotCompactMutable_info" {
     GHC.IO.Exception.cannotCompactMutable_info:
         const GHC.IO.Exception.cannotCompactMutable_entry;
         const 0;
         const 12884901909;
         const S8oB9_srt+1016;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.510862817 UTC

[section ""cstring" . GHC.IO.Exception.cannotCompactPinned2_bytes" {
     GHC.IO.Exception.cannotCompactPinned2_bytes:
         I8[] [99,97,110,110,111,116,32,99,111,109,112,97,99,116,32,112,105,110,110,101,100,32,111,98,106,101,99,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.513263848 UTC

[section ""data" . GHC.IO.Exception.cannotCompactPinned1_closure" {
     GHC.IO.Exception.cannotCompactPinned1_closure:
         const GHC.IO.Exception.cannotCompactPinned1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.cannotCompactPinned1_entry() //  [R1]
         { []
         }
     {offset
       c8qSB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8qSC; else goto c8qSD;
       c8qSC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8qSD: // global
           (_c8qSy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8qSy::I64 == 0) goto c8qSA; else goto c8qSz;
       c8qSA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8qSz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8qSy::I64;
           R2 = GHC.IO.Exception.cannotCompactPinned2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.cannotCompactPinned1_info" {
     GHC.IO.Exception.cannotCompactPinned1_info:
         const GHC.IO.Exception.cannotCompactPinned1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.517784881 UTC

[section ""data" . GHC.IO.Exception.cannotCompactPinned_closure" {
     GHC.IO.Exception.cannotCompactPinned_closure:
         const GHC.IO.Exception.cannotCompactPinned_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.cannotCompactPinned_entry() //  [R1]
         { []
         }
     {offset
       c8qSS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8qST; else goto c8qSU;
       c8qST: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8qSU: // global
           (_c8qSP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8qSP::I64 == 0) goto c8qSR; else goto c8qSQ;
       c8qSR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8qSQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8qSP::I64;
           R2 = GHC.IO.Exception.cannotCompactPinned1_closure;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionCompactionFailed_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.cannotCompactPinned_info" {
     GHC.IO.Exception.cannotCompactPinned_info:
         const GHC.IO.Exception.cannotCompactPinned_entry;
         const 0;
         const 21474836501;
         const S8oB9_srt+1016;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.521370822 UTC

[section ""cstring" . GHC.IO.Exception.cannotCompactFunction2_bytes" {
     GHC.IO.Exception.cannotCompactFunction2_bytes:
         I8[] [99,97,110,110,111,116,32,99,111,109,112,97,99,116,32,102,117,110,99,116,105,111,110,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.523723872 UTC

[section ""data" . GHC.IO.Exception.cannotCompactFunction1_closure" {
     GHC.IO.Exception.cannotCompactFunction1_closure:
         const GHC.IO.Exception.cannotCompactFunction1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.cannotCompactFunction1_entry() //  [R1]
         { []
         }
     {offset
       c8qTa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8qTb; else goto c8qTc;
       c8qTb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8qTc: // global
           (_c8qT7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8qT7::I64 == 0) goto c8qT9; else goto c8qT8;
       c8qT9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8qT8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8qT7::I64;
           R2 = GHC.IO.Exception.cannotCompactFunction2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.cannotCompactFunction1_info" {
     GHC.IO.Exception.cannotCompactFunction1_info:
         const GHC.IO.Exception.cannotCompactFunction1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.527925856 UTC

[section ""data" . GHC.IO.Exception.cannotCompactFunction_closure" {
     GHC.IO.Exception.cannotCompactFunction_closure:
         const GHC.IO.Exception.cannotCompactFunction_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.cannotCompactFunction_entry() //  [R1]
         { []
         }
     {offset
       c8qTr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8qTs; else goto c8qTt;
       c8qTs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8qTt: // global
           (_c8qTo::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8qTo::I64 == 0) goto c8qTq; else goto c8qTp;
       c8qTq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8qTp: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8qTo::I64;
           R2 = GHC.IO.Exception.cannotCompactFunction1_closure;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionCompactionFailed_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.cannotCompactFunction_info" {
     GHC.IO.Exception.cannotCompactFunction_info:
         const GHC.IO.Exception.cannotCompactFunction_entry;
         const 0;
         const 38654705685;
         const S8oB9_srt+1016;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.535016385 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAsyncException_$cfromException_closure" {
     GHC.IO.Exception.$fExceptionAsyncException_$cfromException_closure:
         const GHC.IO.Exception.$fExceptionAsyncException_$cfromException_info;
         const 0;
 },
 section ""relreadonly" . u8qUA_srtd" {
     u8qUA_srtd:
         const S8oB9_srt+688;
         const 47;
         const 105553118363649;
 },
 GHC.IO.Exception.$fExceptionAsyncException_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c8qTJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8qTN; else goto c8qTO;
       c8qTN: // global
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionAsyncException_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8qTO: // global
           I64[Sp - 8] = block_c8qTG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8qUx; else goto c8qTH;
       u8qUx: // global
           call _c8qTG(R1) args: 0, res: 0, upd: 0;
       c8qTH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionAsyncException_$cfromException_info" {
     GHC.IO.Exception.$fExceptionAsyncException_$cfromException_info:
         const GHC.IO.Exception.$fExceptionAsyncException_$cfromException_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u8qUA_srtd;
 },
 section ""relreadonly" . u8qUB_srtd" {
     u8qUB_srtd:
         const S8oB9_srt+688;
         const 47;
         const 70368746274817;
 },
 _c8qTG() //  [R1]
         { []
         }
     {offset
       c8qTG: // global
           I64[Sp - 8] = block_c8qTM_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qTG_info" {
     block_c8qTG_info:
         const _c8qTG;
         const 0;
         const 18446744069414584350;
         const u8qUB_srtd;
 },
 section ""relreadonly" . u8qUC_srtd" {
     u8qUC_srtd:
         const S8oB9_srt+688;
         const 47;
         const 70368746274817;
 },
 _c8qTM() //  [R1]
         { []
         }
     {offset
       c8qTM: // global
           I64[Sp] = block_c8qTT_info;
           R3 = GHC.IO.Exception.$fExceptionAllocationLimitExceeded6_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qTM_info" {
     block_c8qTM_info:
         const _c8qTM;
         const 1;
         const 18446744069414584350;
         const u8qUC_srtd;
 },
 _c8qTT() //  [R1]
         { []
         }
     {offset
       c8qTT: // global
           if (R1 & 7 == 1) goto u8qUv; else goto c8qU9;
       u8qUv: // global
           Sp = Sp + 16;
           call _c8qUl() args: 0, res: 0, upd: 0;
       c8qU9: // global
           _s8oAt::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8qU3_info;
           R1 = _s8oAt::P64;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qTT_info" {
     block_c8qTT_info:
         const _c8qTT;
         const 1;
         const 144115192370823198;
         const S8oB9_srt+856;
 },
 _c8qU3() //  [R1]
         { []
         }
     {offset
       c8qU3: // global
           I64[Sp - 8] = block_c8qU7_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qU3_info" {
     block_c8qU3_info:
         const _c8qU3;
         const 0;
         const 144115192370823198;
         const S8oB9_srt+856;
 },
 _c8qU7() //  [R1]
         { []
         }
     {offset
       c8qU7: // global
           I64[Sp] = block_c8qUe_info;
           R3 = GHC.IO.Exception.$fExceptionAsyncException9_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qU7_info" {
     block_c8qU7_info:
         const _c8qU7;
         const 1;
         const 144115192370823198;
         const S8oB9_srt+856;
 },
 _c8qUe() //  [R1]
         { []
         }
     {offset
       c8qUe: // global
           if (R1 & 7 == 1) goto u8qUw; else goto c8qUp;
       u8qUw: // global
           Sp = Sp + 16;
           call _c8qUl() args: 0, res: 0, upd: 0;
       c8qUp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8qUs; else goto c8qUr;
       c8qUs: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8qUr: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8qUe_info" {
     block_c8qUe_info:
         const _c8qUe;
         const 1;
         const 30;
 },
 _c8qUl() //  []
         { []
         }
     {offset
       c8qUl: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.551233892 UTC

[section ""data" . GHC.IO.Exception.$fExceptionAsyncException_closure" {
     GHC.IO.Exception.$fExceptionAsyncException_closure:
         const GHC.Exception.C:Exception_con_info;
         const GHC.IO.Exception.$fExceptionAsyncException9_closure;
         const GHC.IO.Exception.$fShowAsyncException_closure+1;
         const GHC.IO.Exception.$fExceptionAsyncException_$ctoException_closure+1;
         const GHC.IO.Exception.$fExceptionAsyncException_$cfromException_closure+1;
         const GHC.IO.Exception.$fExceptionAsyncException_$cshow_closure+1;
         const 0;
 },
 section ""data" . GHC.IO.Exception.$fExceptionAsyncException_$ctoException_closure" {
     GHC.IO.Exception.$fExceptionAsyncException_$ctoException_closure:
         const GHC.IO.Exception.$fExceptionAsyncException_$ctoException_info;
         const 0;
 },
 GHC.IO.Exception.$fExceptionAsyncException_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c8qVs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8qVw; else goto c8qVv;
       c8qVw: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Exception.$fExceptionAsyncException_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8qVv: // global
           I64[Hp - 16] = GHC.IO.Exception.SomeAsyncException_con_info;
           P64[Hp - 8] = GHC.IO.Exception.$fExceptionAsyncException_closure+1;
           P64[Hp] = R2;
           R2 = Hp - 15;
           call GHC.IO.Exception.$fExceptionSomeAsyncException_$ctoException_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.$fExceptionAsyncException_$ctoException_info" {
     GHC.IO.Exception.$fExceptionAsyncException_$ctoException_info:
         const GHC.IO.Exception.$fExceptionAsyncException_$ctoException_entry;
         const 0;
         const 13198434500622;
         const 4294967301;
         const S8oB9_srt+984;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.556157154 UTC

[section ""data" . GHC.IO.Exception.heapOverflow_closure" {
     GHC.IO.Exception.heapOverflow_closure:
         const GHC.IO.Exception.heapOverflow_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.heapOverflow_entry() //  [R1]
         { []
         }
     {offset
       c8qVK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8qVL; else goto c8qVM;
       c8qVL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8qVM: // global
           (_c8qVH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8qVH::I64 == 0) goto c8qVJ; else goto c8qVI;
       c8qVJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8qVI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8qVH::I64;
           R2 = GHC.IO.Exception.HeapOverflow_closure+2;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionAsyncException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.heapOverflow_info" {
     GHC.IO.Exception.heapOverflow_info:
         const GHC.IO.Exception.heapOverflow_entry;
         const 0;
         const 4294967317;
         const S8oB9_srt+1072;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.560448892 UTC

[section ""data" . GHC.IO.Exception.stackOverflow_closure" {
     GHC.IO.Exception.stackOverflow_closure:
         const GHC.IO.Exception.stackOverflow_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Exception.stackOverflow_entry() //  [R1]
         { []
         }
     {offset
       c8qW1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8qW2; else goto c8qW3;
       c8qW2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8qW3: // global
           (_c8qVY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8qVY::I64 == 0) goto c8qW0; else goto c8qVZ;
       c8qW0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8qVZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8qVY::I64;
           R2 = GHC.IO.Exception.StackOverflow_closure+1;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionAsyncException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.stackOverflow_info" {
     GHC.IO.Exception.stackOverflow_info:
         const GHC.IO.Exception.stackOverflow_entry;
         const 0;
         const 4294967317;
         const S8oB9_srt+1072;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.565199283 UTC

[section ""data" . GHC.IO.Exception.IOError_closure" {
     GHC.IO.Exception.IOError_closure:
         const GHC.IO.Exception.IOError_info;
 },
 GHC.IO.Exception.IOError_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c8qWh: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c8qWl; else goto c8qWk;
       c8qWl: // global
           HpAlloc = 56;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.IOError_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c8qWk: // global
           I64[Hp - 48] = GHC.IO.Exception.IOError_con_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = P64[Sp];
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.IOError_info" {
     GHC.IO.Exception.IOError_info:
         const GHC.IO.Exception.IOError_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.569497471 UTC

[section ""data" . GHC.IO.Exception.AlreadyExists_closure" {
     GHC.IO.Exception.AlreadyExists_closure:
         const GHC.IO.Exception.AlreadyExists_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.571192417 UTC

[section ""data" . GHC.IO.Exception.NoSuchThing_closure" {
     GHC.IO.Exception.NoSuchThing_closure:
         const GHC.IO.Exception.NoSuchThing_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.572836635 UTC

[section ""data" . GHC.IO.Exception.ResourceBusy_closure" {
     GHC.IO.Exception.ResourceBusy_closure:
         const GHC.IO.Exception.ResourceBusy_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.574593042 UTC

[section ""data" . GHC.IO.Exception.ResourceExhausted_closure" {
     GHC.IO.Exception.ResourceExhausted_closure:
         const GHC.IO.Exception.ResourceExhausted_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.57630954 UTC

[section ""data" . GHC.IO.Exception.EOF_closure" {
     GHC.IO.Exception.EOF_closure:
         const GHC.IO.Exception.EOF_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.577920939 UTC

[section ""data" . GHC.IO.Exception.IllegalOperation_closure" {
     GHC.IO.Exception.IllegalOperation_closure:
         const GHC.IO.Exception.IllegalOperation_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.579644293 UTC

[section ""data" . GHC.IO.Exception.PermissionDenied_closure" {
     GHC.IO.Exception.PermissionDenied_closure:
         const GHC.IO.Exception.PermissionDenied_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.581721255 UTC

[section ""data" . GHC.IO.Exception.UserError_closure" {
     GHC.IO.Exception.UserError_closure:
         const GHC.IO.Exception.UserError_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.583425907 UTC

[section ""data" . GHC.IO.Exception.UnsatisfiedConstraints_closure" {
     GHC.IO.Exception.UnsatisfiedConstraints_closure:
         const GHC.IO.Exception.UnsatisfiedConstraints_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.585112661 UTC

[section ""data" . GHC.IO.Exception.SystemError_closure" {
     GHC.IO.Exception.SystemError_closure:
         const GHC.IO.Exception.SystemError_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.58692035 UTC

[section ""data" . GHC.IO.Exception.ProtocolError_closure" {
     GHC.IO.Exception.ProtocolError_closure:
         const GHC.IO.Exception.ProtocolError_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.588542409 UTC

[section ""data" . GHC.IO.Exception.OtherError_closure" {
     GHC.IO.Exception.OtherError_closure:
         const GHC.IO.Exception.OtherError_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.590258552 UTC

[section ""data" . GHC.IO.Exception.InvalidArgument_closure" {
     GHC.IO.Exception.InvalidArgument_closure:
         const GHC.IO.Exception.InvalidArgument_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.591919929 UTC

[section ""data" . GHC.IO.Exception.InappropriateType_closure" {
     GHC.IO.Exception.InappropriateType_closure:
         const GHC.IO.Exception.InappropriateType_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.594601352 UTC

[section ""data" . GHC.IO.Exception.HardwareFault_closure" {
     GHC.IO.Exception.HardwareFault_closure:
         const GHC.IO.Exception.HardwareFault_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.596894097 UTC

[section ""data" . GHC.IO.Exception.UnsupportedOperation_closure" {
     GHC.IO.Exception.UnsupportedOperation_closure:
         const GHC.IO.Exception.UnsupportedOperation_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.599176795 UTC

[section ""data" . GHC.IO.Exception.TimeExpired_closure" {
     GHC.IO.Exception.TimeExpired_closure:
         const GHC.IO.Exception.TimeExpired_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.602180738 UTC

[section ""data" . GHC.IO.Exception.ResourceVanished_closure" {
     GHC.IO.Exception.ResourceVanished_closure:
         const GHC.IO.Exception.ResourceVanished_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.604478044 UTC

[section ""data" . GHC.IO.Exception.Interrupted_closure" {
     GHC.IO.Exception.Interrupted_closure:
         const GHC.IO.Exception.Interrupted_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.606506286 UTC

[section ""data" . GHC.IO.Exception.ExitSuccess_closure" {
     GHC.IO.Exception.ExitSuccess_closure:
         const GHC.IO.Exception.ExitSuccess_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.608871509 UTC

[section ""data" . GHC.IO.Exception.ExitFailure_closure" {
     GHC.IO.Exception.ExitFailure_closure:
         const GHC.IO.Exception.ExitFailure_info;
 },
 GHC.IO.Exception.ExitFailure_entry() //  [R2]
         { []
         }
     {offset
       c8qWS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8qWW; else goto c8qWV;
       c8qWW: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.IO.Exception.ExitFailure_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8qWV: // global
           I64[Hp - 8] = GHC.IO.Exception.ExitFailure_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.ExitFailure_info" {
     GHC.IO.Exception.ExitFailure_info:
         const GHC.IO.Exception.ExitFailure_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.612446303 UTC

[section ""data" . GHC.IO.Exception.FixIOException_closure" {
     GHC.IO.Exception.FixIOException_closure:
         const GHC.IO.Exception.FixIOException_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.614780977 UTC

[section ""data" . GHC.IO.Exception.IndexOutOfBounds_closure" {
     GHC.IO.Exception.IndexOutOfBounds_closure:
         const GHC.IO.Exception.IndexOutOfBounds_info;
 },
 GHC.IO.Exception.IndexOutOfBounds_entry() //  [R2]
         { []
         }
     {offset
       c8qX9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8qXd; else goto c8qXc;
       c8qXd: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.IO.Exception.IndexOutOfBounds_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8qXc: // global
           I64[Hp - 8] = GHC.IO.Exception.IndexOutOfBounds_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.IndexOutOfBounds_info" {
     GHC.IO.Exception.IndexOutOfBounds_info:
         const GHC.IO.Exception.IndexOutOfBounds_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.61938553 UTC

[section ""data" . GHC.IO.Exception.UndefinedElement_closure" {
     GHC.IO.Exception.UndefinedElement_closure:
         const GHC.IO.Exception.UndefinedElement_info;
 },
 GHC.IO.Exception.UndefinedElement_entry() //  [R2]
         { []
         }
     {offset
       c8qXp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8qXt; else goto c8qXs;
       c8qXt: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.IO.Exception.UndefinedElement_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8qXs: // global
           I64[Hp - 8] = GHC.IO.Exception.UndefinedElement_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.UndefinedElement_info" {
     GHC.IO.Exception.UndefinedElement_info:
         const GHC.IO.Exception.UndefinedElement_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.622801979 UTC

[section ""data" . GHC.IO.Exception.StackOverflow_closure" {
     GHC.IO.Exception.StackOverflow_closure:
         const GHC.IO.Exception.StackOverflow_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.62448528 UTC

[section ""data" . GHC.IO.Exception.HeapOverflow_closure" {
     GHC.IO.Exception.HeapOverflow_closure:
         const GHC.IO.Exception.HeapOverflow_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.626781595 UTC

[section ""data" . GHC.IO.Exception.ThreadKilled_closure" {
     GHC.IO.Exception.ThreadKilled_closure:
         const GHC.IO.Exception.ThreadKilled_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.628578415 UTC

[section ""data" . GHC.IO.Exception.UserInterrupt_closure" {
     GHC.IO.Exception.UserInterrupt_closure:
         const GHC.IO.Exception.UserInterrupt_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.630957976 UTC

[section ""data" . GHC.IO.Exception.SomeAsyncException_closure" {
     GHC.IO.Exception.SomeAsyncException_closure:
         const GHC.IO.Exception.SomeAsyncException_info;
 },
 GHC.IO.Exception.SomeAsyncException_entry() //  [R2, R3]
         { []
         }
     {offset
       c8qXJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8qXN; else goto c8qXM;
       c8qXN: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Exception.SomeAsyncException_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8qXM: // global
           I64[Hp - 16] = GHC.IO.Exception.SomeAsyncException_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.SomeAsyncException_info" {
     GHC.IO.Exception.SomeAsyncException_info:
         const GHC.IO.Exception.SomeAsyncException_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.634950153 UTC

[section ""data" . GHC.IO.Exception.AllocationLimitExceeded_closure" {
     GHC.IO.Exception.AllocationLimitExceeded_closure:
         const GHC.IO.Exception.AllocationLimitExceeded_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.63671688 UTC

[section ""data" . GHC.IO.Exception.Deadlock_closure" {
     GHC.IO.Exception.Deadlock_closure:
         const GHC.IO.Exception.Deadlock_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.638394887 UTC

[section ""data" . GHC.IO.Exception.BlockedIndefinitelyOnSTM_closure" {
     GHC.IO.Exception.BlockedIndefinitelyOnSTM_closure:
         const GHC.IO.Exception.BlockedIndefinitelyOnSTM_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.64006375 UTC

[section ""data" . GHC.IO.Exception.BlockedIndefinitelyOnMVar_closure" {
     GHC.IO.Exception.BlockedIndefinitelyOnMVar_closure:
         const GHC.IO.Exception.BlockedIndefinitelyOnMVar_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.642193225 UTC

[section ""cstring" . i8qXZ_str" {
     i8qXZ_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,73,79,69,114,114,111,114]
 },
 GHC.IO.Exception.IOError_con_entry() //  [R1]
         { []
         }
     {offset
       c8qXY: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.IOError_con_info" {
     GHC.IO.Exception.IOError_con_info:
         const GHC.IO.Exception.IOError_con_entry;
         const 6;
         const 1;
         const i8qXZ_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.645517989 UTC

[section ""relreadonly" . GHC.IO.Exception.IOErrorType_closure_tbl" {
     GHC.IO.Exception.IOErrorType_closure_tbl:
         const GHC.IO.Exception.AlreadyExists_closure+1;
         const GHC.IO.Exception.NoSuchThing_closure+1;
         const GHC.IO.Exception.ResourceBusy_closure+1;
         const GHC.IO.Exception.ResourceExhausted_closure+1;
         const GHC.IO.Exception.EOF_closure+1;
         const GHC.IO.Exception.IllegalOperation_closure+1;
         const GHC.IO.Exception.PermissionDenied_closure+1;
         const GHC.IO.Exception.UserError_closure+1;
         const GHC.IO.Exception.UnsatisfiedConstraints_closure+1;
         const GHC.IO.Exception.SystemError_closure+1;
         const GHC.IO.Exception.ProtocolError_closure+1;
         const GHC.IO.Exception.OtherError_closure+1;
         const GHC.IO.Exception.InvalidArgument_closure+1;
         const GHC.IO.Exception.InappropriateType_closure+1;
         const GHC.IO.Exception.HardwareFault_closure+1;
         const GHC.IO.Exception.UnsupportedOperation_closure+1;
         const GHC.IO.Exception.TimeExpired_closure+1;
         const GHC.IO.Exception.ResourceVanished_closure+1;
         const GHC.IO.Exception.Interrupted_closure+1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.647711524 UTC

[section ""cstring" . i8qY7_str" {
     i8qY7_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,65,108,114,101,97,100,121,69,120,105,115,116,115]
 },
 GHC.IO.Exception.AlreadyExists_con_entry() //  [R1]
         { []
         }
     {offset
       c8qY6: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.AlreadyExists_con_info" {
     GHC.IO.Exception.AlreadyExists_con_info:
         const GHC.IO.Exception.AlreadyExists_con_entry;
         const 4294967296;
         const 3;
         const i8qY7_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.651473074 UTC

[section ""cstring" . i8qYe_str" {
     i8qYe_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,78,111,83,117,99,104,84,104,105,110,103]
 },
 GHC.IO.Exception.NoSuchThing_con_entry() //  [R1]
         { []
         }
     {offset
       c8qYd: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.NoSuchThing_con_info" {
     GHC.IO.Exception.NoSuchThing_con_info:
         const GHC.IO.Exception.NoSuchThing_con_entry;
         const 4294967296;
         const 4294967299;
         const i8qYe_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.654804419 UTC

[section ""cstring" . i8qYl_str" {
     i8qYl_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,82,101,115,111,117,114,99,101,66,117,115,121]
 },
 GHC.IO.Exception.ResourceBusy_con_entry() //  [R1]
         { []
         }
     {offset
       c8qYk: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.ResourceBusy_con_info" {
     GHC.IO.Exception.ResourceBusy_con_info:
         const GHC.IO.Exception.ResourceBusy_con_entry;
         const 4294967296;
         const 8589934595;
         const i8qYl_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.6589055 UTC

[section ""cstring" . i8qYs_str" {
     i8qYs_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,82,101,115,111,117,114,99,101,69,120,104,97,117,115,116,101,100]
 },
 GHC.IO.Exception.ResourceExhausted_con_entry() //  [R1]
         { []
         }
     {offset
       c8qYr: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.ResourceExhausted_con_info" {
     GHC.IO.Exception.ResourceExhausted_con_info:
         const GHC.IO.Exception.ResourceExhausted_con_entry;
         const 4294967296;
         const 12884901891;
         const i8qYs_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.662142721 UTC

[section ""cstring" . i8qYz_str" {
     i8qYz_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,69,79,70]
 },
 GHC.IO.Exception.EOF_con_entry() //  [R1]
         { []
         }
     {offset
       c8qYy: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.EOF_con_info" {
     GHC.IO.Exception.EOF_con_info:
         const GHC.IO.Exception.EOF_con_entry;
         const 4294967296;
         const 17179869187;
         const i8qYz_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.66537646 UTC

[section ""cstring" . i8qYG_str" {
     i8qYG_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,73,108,108,101,103,97,108,79,112,101,114,97,116,105,111,110]
 },
 GHC.IO.Exception.IllegalOperation_con_entry() //  [R1]
         { []
         }
     {offset
       c8qYF: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.IllegalOperation_con_info" {
     GHC.IO.Exception.IllegalOperation_con_info:
         const GHC.IO.Exception.IllegalOperation_con_entry;
         const 4294967296;
         const 21474836483;
         const i8qYG_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.66851122 UTC

[section ""cstring" . i8qYN_str" {
     i8qYN_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,80,101,114,109,105,115,115,105,111,110,68,101,110,105,101,100]
 },
 GHC.IO.Exception.PermissionDenied_con_entry() //  [R1]
         { []
         }
     {offset
       c8qYM: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.PermissionDenied_con_info" {
     GHC.IO.Exception.PermissionDenied_con_info:
         const GHC.IO.Exception.PermissionDenied_con_entry;
         const 4294967296;
         const 25769803779;
         const i8qYN_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.672263914 UTC

[section ""cstring" . i8qYU_str" {
     i8qYU_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,85,115,101,114,69,114,114,111,114]
 },
 GHC.IO.Exception.UserError_con_entry() //  [R1]
         { []
         }
     {offset
       c8qYT: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.UserError_con_info" {
     GHC.IO.Exception.UserError_con_info:
         const GHC.IO.Exception.UserError_con_entry;
         const 4294967296;
         const 30064771075;
         const i8qYU_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.67564778 UTC

[section ""cstring" . i8qZ1_str" {
     i8qZ1_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,85,110,115,97,116,105,115,102,105,101,100,67,111,110,115,116,114,97,105,110,116,115]
 },
 GHC.IO.Exception.UnsatisfiedConstraints_con_entry() //  [R1]
         { []
         }
     {offset
       c8qZ0: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.UnsatisfiedConstraints_con_info" {
     GHC.IO.Exception.UnsatisfiedConstraints_con_info:
         const GHC.IO.Exception.UnsatisfiedConstraints_con_entry;
         const 4294967296;
         const 34359738371;
         const i8qZ1_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.678847128 UTC

[section ""cstring" . i8qZ8_str" {
     i8qZ8_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,83,121,115,116,101,109,69,114,114,111,114]
 },
 GHC.IO.Exception.SystemError_con_entry() //  [R1]
         { []
         }
     {offset
       c8qZ7: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.SystemError_con_info" {
     GHC.IO.Exception.SystemError_con_info:
         const GHC.IO.Exception.SystemError_con_entry;
         const 4294967296;
         const 38654705667;
         const i8qZ8_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.682157585 UTC

[section ""cstring" . i8qZf_str" {
     i8qZf_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,80,114,111,116,111,99,111,108,69,114,114,111,114]
 },
 GHC.IO.Exception.ProtocolError_con_entry() //  [R1]
         { []
         }
     {offset
       c8qZe: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.ProtocolError_con_info" {
     GHC.IO.Exception.ProtocolError_con_info:
         const GHC.IO.Exception.ProtocolError_con_entry;
         const 4294967296;
         const 42949672963;
         const i8qZf_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.686529819 UTC

[section ""cstring" . i8qZm_str" {
     i8qZm_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,79,116,104,101,114,69,114,114,111,114]
 },
 GHC.IO.Exception.OtherError_con_entry() //  [R1]
         { []
         }
     {offset
       c8qZl: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.OtherError_con_info" {
     GHC.IO.Exception.OtherError_con_info:
         const GHC.IO.Exception.OtherError_con_entry;
         const 4294967296;
         const 47244640259;
         const i8qZm_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.689890943 UTC

[section ""cstring" . i8qZt_str" {
     i8qZt_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,73,110,118,97,108,105,100,65,114,103,117,109,101,110,116]
 },
 GHC.IO.Exception.InvalidArgument_con_entry() //  [R1]
         { []
         }
     {offset
       c8qZs: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.InvalidArgument_con_info" {
     GHC.IO.Exception.InvalidArgument_con_info:
         const GHC.IO.Exception.InvalidArgument_con_entry;
         const 4294967296;
         const 51539607555;
         const i8qZt_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.693198578 UTC

[section ""cstring" . i8qZA_str" {
     i8qZA_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,73,110,97,112,112,114,111,112,114,105,97,116,101,84,121,112,101]
 },
 GHC.IO.Exception.InappropriateType_con_entry() //  [R1]
         { []
         }
     {offset
       c8qZz: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.InappropriateType_con_info" {
     GHC.IO.Exception.InappropriateType_con_info:
         const GHC.IO.Exception.InappropriateType_con_entry;
         const 4294967296;
         const 55834574851;
         const i8qZA_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.69652869 UTC

[section ""cstring" . i8qZH_str" {
     i8qZH_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,72,97,114,100,119,97,114,101,70,97,117,108,116]
 },
 GHC.IO.Exception.HardwareFault_con_entry() //  [R1]
         { []
         }
     {offset
       c8qZG: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.HardwareFault_con_info" {
     GHC.IO.Exception.HardwareFault_con_info:
         const GHC.IO.Exception.HardwareFault_con_entry;
         const 4294967296;
         const 60129542147;
         const i8qZH_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.699769017 UTC

[section ""cstring" . i8qZO_str" {
     i8qZO_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,85,110,115,117,112,112,111,114,116,101,100,79,112,101,114,97,116,105,111,110]
 },
 GHC.IO.Exception.UnsupportedOperation_con_entry() //  [R1]
         { []
         }
     {offset
       c8qZN: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.UnsupportedOperation_con_info" {
     GHC.IO.Exception.UnsupportedOperation_con_info:
         const GHC.IO.Exception.UnsupportedOperation_con_entry;
         const 4294967296;
         const 64424509443;
         const i8qZO_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.703432871 UTC

[section ""cstring" . i8qZV_str" {
     i8qZV_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,84,105,109,101,69,120,112,105,114,101,100]
 },
 GHC.IO.Exception.TimeExpired_con_entry() //  [R1]
         { []
         }
     {offset
       c8qZU: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.TimeExpired_con_info" {
     GHC.IO.Exception.TimeExpired_con_info:
         const GHC.IO.Exception.TimeExpired_con_entry;
         const 4294967296;
         const 68719476739;
         const i8qZV_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.706765773 UTC

[section ""cstring" . i8r02_str" {
     i8r02_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,82,101,115,111,117,114,99,101,86,97,110,105,115,104,101,100]
 },
 GHC.IO.Exception.ResourceVanished_con_entry() //  [R1]
         { []
         }
     {offset
       c8r01: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.ResourceVanished_con_info" {
     GHC.IO.Exception.ResourceVanished_con_info:
         const GHC.IO.Exception.ResourceVanished_con_entry;
         const 4294967296;
         const 73014444035;
         const i8r02_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.70997055 UTC

[section ""cstring" . i8r09_str" {
     i8r09_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,73,110,116,101,114,114,117,112,116,101,100]
 },
 GHC.IO.Exception.Interrupted_con_entry() //  [R1]
         { []
         }
     {offset
       c8r08: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.Interrupted_con_info" {
     GHC.IO.Exception.Interrupted_con_info:
         const GHC.IO.Exception.Interrupted_con_entry;
         const 4294967296;
         const 77309411331;
         const i8r09_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.713215452 UTC

[section ""cstring" . i8r0g_str" {
     i8r0g_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,69,120,105,116,83,117,99,99,101,115,115]
 },
 GHC.IO.Exception.ExitSuccess_con_entry() //  [R1]
         { []
         }
     {offset
       c8r0f: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.ExitSuccess_con_info" {
     GHC.IO.Exception.ExitSuccess_con_info:
         const GHC.IO.Exception.ExitSuccess_con_entry;
         const 4294967296;
         const 3;
         const i8r0g_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.717665592 UTC

[section ""cstring" . i8r0n_str" {
     i8r0n_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,69,120,105,116,70,97,105,108,117,114,101]
 },
 GHC.IO.Exception.ExitFailure_con_entry() //  [R1]
         { []
         }
     {offset
       c8r0m: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.ExitFailure_con_info" {
     GHC.IO.Exception.ExitFailure_con_info:
         const GHC.IO.Exception.ExitFailure_con_entry;
         const 1;
         const 4294967298;
         const i8r0n_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.721065159 UTC

[section ""relreadonly" . GHC.IO.Exception.FixIOException_closure_tbl" {
     GHC.IO.Exception.FixIOException_closure_tbl:
         const GHC.IO.Exception.FixIOException_closure+1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.723231479 UTC

[section ""cstring" . i8r0v_str" {
     i8r0v_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,70,105,120,73,79,69,120,99,101,112,116,105,111,110]
 },
 GHC.IO.Exception.FixIOException_con_entry() //  [R1]
         { []
         }
     {offset
       c8r0u: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.FixIOException_con_info" {
     GHC.IO.Exception.FixIOException_con_info:
         const GHC.IO.Exception.FixIOException_con_entry;
         const 4294967296;
         const 3;
         const i8r0v_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.726663426 UTC

[section ""cstring" . i8r0C_str" {
     i8r0C_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,73,110,100,101,120,79,117,116,79,102,66,111,117,110,100,115]
 },
 GHC.IO.Exception.IndexOutOfBounds_con_entry() //  [R1]
         { []
         }
     {offset
       c8r0B: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.IndexOutOfBounds_con_info" {
     GHC.IO.Exception.IndexOutOfBounds_con_info:
         const GHC.IO.Exception.IndexOutOfBounds_con_entry;
         const 1;
         const 2;
         const i8r0C_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.729886379 UTC

[section ""cstring" . i8r0J_str" {
     i8r0J_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,85,110,100,101,102,105,110,101,100,69,108,101,109,101,110,116]
 },
 GHC.IO.Exception.UndefinedElement_con_entry() //  [R1]
         { []
         }
     {offset
       c8r0I: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.UndefinedElement_con_info" {
     GHC.IO.Exception.UndefinedElement_con_info:
         const GHC.IO.Exception.UndefinedElement_con_entry;
         const 1;
         const 4294967298;
         const i8r0J_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.732936484 UTC

[section ""relreadonly" . GHC.IO.Exception.AsyncException_closure_tbl" {
     GHC.IO.Exception.AsyncException_closure_tbl:
         const GHC.IO.Exception.StackOverflow_closure+1;
         const GHC.IO.Exception.HeapOverflow_closure+2;
         const GHC.IO.Exception.ThreadKilled_closure+3;
         const GHC.IO.Exception.UserInterrupt_closure+4;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.734945644 UTC

[section ""cstring" . i8r0R_str" {
     i8r0R_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,83,116,97,99,107,79,118,101,114,102,108,111,119]
 },
 GHC.IO.Exception.StackOverflow_con_entry() //  [R1]
         { []
         }
     {offset
       c8r0Q: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.StackOverflow_con_info" {
     GHC.IO.Exception.StackOverflow_con_info:
         const GHC.IO.Exception.StackOverflow_con_entry;
         const 4294967296;
         const 3;
         const i8r0R_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.738514205 UTC

[section ""cstring" . i8r0Y_str" {
     i8r0Y_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,72,101,97,112,79,118,101,114,102,108,111,119]
 },
 GHC.IO.Exception.HeapOverflow_con_entry() //  [R1]
         { []
         }
     {offset
       c8r0X: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.HeapOverflow_con_info" {
     GHC.IO.Exception.HeapOverflow_con_info:
         const GHC.IO.Exception.HeapOverflow_con_entry;
         const 4294967296;
         const 4294967299;
         const i8r0Y_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.741619862 UTC

[section ""cstring" . i8r15_str" {
     i8r15_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,84,104,114,101,97,100,75,105,108,108,101,100]
 },
 GHC.IO.Exception.ThreadKilled_con_entry() //  [R1]
         { []
         }
     {offset
       c8r14: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.ThreadKilled_con_info" {
     GHC.IO.Exception.ThreadKilled_con_info:
         const GHC.IO.Exception.ThreadKilled_con_entry;
         const 4294967296;
         const 8589934595;
         const i8r15_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.745576211 UTC

[section ""cstring" . i8r1c_str" {
     i8r1c_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,85,115,101,114,73,110,116,101,114,114,117,112,116]
 },
 GHC.IO.Exception.UserInterrupt_con_entry() //  [R1]
         { []
         }
     {offset
       c8r1b: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.UserInterrupt_con_info" {
     GHC.IO.Exception.UserInterrupt_con_info:
         const GHC.IO.Exception.UserInterrupt_con_entry;
         const 4294967296;
         const 12884901891;
         const i8r1c_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.74882788 UTC

[section ""cstring" . i8r1j_str" {
     i8r1j_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,83,111,109,101,65,115,121,110,99,69,120,99,101,112,116,105,111,110]
 },
 GHC.IO.Exception.SomeAsyncException_con_entry() //  [R1]
         { []
         }
     {offset
       c8r1i: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.SomeAsyncException_con_info" {
     GHC.IO.Exception.SomeAsyncException_con_info:
         const GHC.IO.Exception.SomeAsyncException_con_entry;
         const 2;
         const 4;
         const i8r1j_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.752404221 UTC

[section ""relreadonly" . GHC.IO.Exception.AllocationLimitExceeded_closure_tbl" {
     GHC.IO.Exception.AllocationLimitExceeded_closure_tbl:
         const GHC.IO.Exception.AllocationLimitExceeded_closure+1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.754308118 UTC

[section ""cstring" . i8r1r_str" {
     i8r1r_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,65,108,108,111,99,97,116,105,111,110,76,105,109,105,116,69,120,99,101,101,100,101,100]
 },
 GHC.IO.Exception.AllocationLimitExceeded_con_entry() //  [R1]
         { []
         }
     {offset
       c8r1q: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.AllocationLimitExceeded_con_info" {
     GHC.IO.Exception.AllocationLimitExceeded_con_info:
         const GHC.IO.Exception.AllocationLimitExceeded_con_entry;
         const 4294967296;
         const 3;
         const i8r1r_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.757331901 UTC

[section ""relreadonly" . GHC.IO.Exception.Deadlock_closure_tbl" {
     GHC.IO.Exception.Deadlock_closure_tbl:
         const GHC.IO.Exception.Deadlock_closure+1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.759170846 UTC

[section ""cstring" . i8r1z_str" {
     i8r1z_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,68,101,97,100,108,111,99,107]
 },
 GHC.IO.Exception.Deadlock_con_entry() //  [R1]
         { []
         }
     {offset
       c8r1y: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.Deadlock_con_info" {
     GHC.IO.Exception.Deadlock_con_info:
         const GHC.IO.Exception.Deadlock_con_entry;
         const 4294967296;
         const 3;
         const i8r1z_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.762566058 UTC

[section ""relreadonly" . GHC.IO.Exception.BlockedIndefinitelyOnSTM_closure_tbl" {
     GHC.IO.Exception.BlockedIndefinitelyOnSTM_closure_tbl:
         const GHC.IO.Exception.BlockedIndefinitelyOnSTM_closure+1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.764497988 UTC

[section ""cstring" . i8r1H_str" {
     i8r1H_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,66,108,111,99,107,101,100,73,110,100,101,102,105,110,105,116,101,108,121,79,110,83,84,77]
 },
 GHC.IO.Exception.BlockedIndefinitelyOnSTM_con_entry() //  [R1]
         { []
         }
     {offset
       c8r1G: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.BlockedIndefinitelyOnSTM_con_info" {
     GHC.IO.Exception.BlockedIndefinitelyOnSTM_con_info:
         const GHC.IO.Exception.BlockedIndefinitelyOnSTM_con_entry;
         const 4294967296;
         const 3;
         const i8r1H_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.767604309 UTC

[section ""relreadonly" . GHC.IO.Exception.BlockedIndefinitelyOnMVar_closure_tbl" {
     GHC.IO.Exception.BlockedIndefinitelyOnMVar_closure_tbl:
         const GHC.IO.Exception.BlockedIndefinitelyOnMVar_closure+1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.769503552 UTC

[section ""cstring" . i8r1P_str" {
     i8r1P_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,120,99,101,112,116,105,111,110,46,66,108,111,99,107,101,100,73,110,100,101,102,105,110,105,116,101,108,121,79,110,77,86,97,114]
 },
 GHC.IO.Exception.BlockedIndefinitelyOnMVar_con_entry() //  [R1]
         { []
         }
     {offset
       c8r1O: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Exception.BlockedIndefinitelyOnMVar_con_info" {
     GHC.IO.Exception.BlockedIndefinitelyOnMVar_con_info:
         const GHC.IO.Exception.BlockedIndefinitelyOnMVar_con_entry;
         const 4294967296;
         const 3;
         const i8r1P_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:34.774467512 UTC

[section ""relreadonly" . S8oB9_srt" {
     S8oB9_srt:
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar1_closure;
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar_$cshowsPrec_closure;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cshow_closure;
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnMVar1_closure;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM1_closure;
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM_$cshowsPrec_closure;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cshow_closure;
         const GHC.IO.Exception.$fShowBlockedIndefinitelyOnSTM1_closure;
         const GHC.IO.Exception.$fExceptionDeadlock1_closure;
         const GHC.IO.Exception.$fShowDeadlock_$cshowsPrec_closure;
         const GHC.IO.Exception.$fExceptionDeadlock_$cshow_closure;
         const GHC.IO.Exception.$fShowDeadlock1_closure;
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded1_closure;
         const GHC.IO.Exception.$fShowAllocationLimitExceeded_$cshowsPrec_closure;
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cshow_closure;
         const GHC.IO.Exception.$fShowAllocationLimitExceeded1_closure;
         const GHC.IO.Exception.$fExceptionAsyncException1_closure;
         const GHC.IO.Exception.$fExceptionAsyncException3_closure;
         const GHC.IO.Exception.$fExceptionAsyncException5_closure;
         const GHC.IO.Exception.$fExceptionAsyncException7_closure;
         const GHC.IO.Exception.$w$cshowsPrec1_closure;
         const GHC.IO.Exception.$fExceptionAsyncException_$cshow_closure;
         const GHC.IO.Exception.$fExceptionFixIOException1_closure;
         const GHC.IO.Exception.$fShowFixIOException_$cshowsPrec_closure;
         const GHC.IO.Exception.$fExceptionFixIOException_$cshow_closure;
         const GHC.IO.Exception.$fShowFixIOException1_closure;
         const GHC.IO.Exception.$w$cshowsPrec4_closure;
         const lvl1_r8j2E_closure;
         const lvl3_r8j2G_closure;
         const lvl5_r8j2I_closure;
         const lvl7_r8j2K_closure;
         const lvl9_r8j2M_closure;
         const lvl11_r8j2O_closure;
         const lvl13_r8j2Q_closure;
         const lvl15_r8j2S_closure;
         const lvl17_r8j2U_closure;
         const lvl19_r8j2W_closure;
         const lvl21_r8j2Y_closure;
         const lvl23_r8j30_closure;
         const lvl25_r8j32_closure;
         const lvl27_r8j34_closure;
         const lvl29_r8j36_closure;
         const lvl31_r8j38_closure;
         const lvl33_r8j3a_closure;
         const lvl35_r8j3c_closure;
         const lvl37_r8j3e_closure;
         const GHC.IO.Exception.$fExceptionIOException1_closure;
         const GHC.IO.Exception.$w$cshowsPrec3_closure;
         const GHC.IO.Exception.$fExceptionIOException_$cshowsPrec_closure;
         const GHC.IO.Exception.$fExceptionIOException_$cshow_closure;
         const GHC.IO.Exception.$fShowIOException1_closure;
         const GHC.IO.Exception.$fExceptionExitCode2_closure;
         const GHC.IO.Exception.$fShowExitCode_$cshowsPrec_closure;
         const GHC.IO.Exception.$fExceptionExitCode_$cshow_closure;
         const GHC.IO.Exception.$fShowExitCode1_closure;
         const GHC.Read.$fReadInt2_closure;
         const GHC.Read.$fReadInt_$sreadNumber_closure;
         const Text.Read.Lex.$wexpect_closure;
         const GHC.IO.Exception.$fReadExitCode_lexeme_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
         const GHC.IO.Exception.$fReadExitCode2_closure;
         const GHC.IO.Exception.$fReadExitCode_lexeme1_closure;
         const GHC.Read.list3_closure;
         const GHC.IO.Exception.$fReadExitCode_$creadsPrec_closure;
         const GHC.Read.list_closure;
         const GHC.IO.Exception.$fReadExitCode1_closure;
         const GHC.IO.Exception.$fReadExitCode_$creadListPrec_closure;
         const GHC.IO.Exception.$fReadExitCode6_closure;
         const GHC.IO.Exception.untangle2_closure;
         const GHC.IO.Exception.untangle_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const GHC.IO.Exception.$fExceptionDeadlock_$cfromException_closure;
         const GHC.IO.Exception.$fExceptionDeadlock3_closure;
         const GHC.IO.Exception.$fExceptionDeadlock_closure;
         const GHC.IO.Exception.$fExceptionDeadlock_$ctoException_closure;
         const GHC.IO.Exception.$fExceptionAssertionFailed_$cfromException_closure;
         const GHC.IO.Exception.$fExceptionAssertionFailed2_closure;
         const GHC.IO.Exception.$fExceptionAssertionFailed_closure;
         const GHC.IO.Exception.$fExceptionAssertionFailed_$ctoException_closure;
         const GHC.Exception.errorCallWithCallStackException9_closure;
         const GHC.Exception.errorCallWithCallStackException11_closure;
         const GHC.Exception.errorCallWithCallStackException6_closure;
         const GHC.IO.Exception.assertError1_closure;
         const GHC.IO.Exception.assertError_closure;
         const GHC.Stack.CCS.currentCallStack_closure;
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded6_closure;
         const GHC.IO.Exception.$fExceptionSomeAsyncException_$cfromException_closure;
         const GHC.IO.Exception.$fExceptionSomeAsyncException_closure;
         const GHC.IO.Exception.$fExceptionSomeAsyncException_$ctoException_closure;
         const GHC.IO.Exception.asyncExceptionFromException_closure;
         const GHC.IO.Exception.asyncExceptionToException_closure;
         const GHC.IO.Exception.$fExceptionArrayException_$cfromException_closure;
         const GHC.IO.Exception.$fExceptionArrayException5_closure;
         const GHC.IO.Exception.$fExceptionArrayException_closure;
         const GHC.IO.Exception.$fExceptionArrayException_$ctoException_closure;
         const GHC.IO.Exception.$fExceptionFixIOException_$cfromException_closure;
         const GHC.IO.Exception.$fExceptionFixIOException3_closure;
         const GHC.IO.Exception.$fExceptionFixIOException_closure;
         const GHC.IO.Exception.$fExceptionFixIOException_$ctoException_closure;
         const GHC.IO.Exception.$fExceptionExitCode_$cfromException_closure;
         const GHC.IO.Exception.$fExceptionExitCode4_closure;
         const GHC.IO.Exception.$fExceptionExitCode_closure;
         const GHC.IO.Exception.$fExceptionExitCode_$ctoException_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const GHC.IO.Exception.$fExceptionIOException_$cfromException_closure;
         const GHC.IO.Exception.$fExceptionIOException4_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const GHC.IO.Exception.$fExceptionIOException_closure;
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
         const GHC.IO.Exception.ioError1_closure;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$cfromException_closure;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar3_closure;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_closure;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar_$ctoException_closure;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$cfromException_closure;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM3_closure;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_closure;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM_$ctoException_closure;
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$cfromException_closure;
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded3_closure;
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded_closure;
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded_$ctoException_closure;
         const GHC.IO.Exception.$fExceptionSomeAsyncException_$ctoException_closure;
         const GHC.IO.Exception.$fExceptionCompactionFailed_$cfromException_closure;
         const GHC.IO.Exception.$fExceptionCompactionFailed2_closure;
         const GHC.IO.Exception.$fExceptionCompactionFailed_closure;
         const GHC.IO.Exception.$fExceptionCompactionFailed_$ctoException_closure;
         const GHC.IO.Exception.cannotCompactMutable1_closure;
         const GHC.IO.Exception.cannotCompactPinned1_closure;
         const GHC.IO.Exception.cannotCompactFunction1_closure;
         const GHC.IO.Exception.$fExceptionAsyncException_$cfromException_closure;
         const GHC.IO.Exception.$fExceptionAsyncException9_closure;
         const GHC.IO.Exception.$fExceptionAsyncException_closure;
         const GHC.IO.Exception.$fExceptionAsyncException_$ctoException_closure;
 }]

