
==================== Tidy Core ====================
2018-03-16 16:03:34.910521064 UTC

Result size of Tidy Core
  = {terms: 588, types: 453, coercions: 30, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.$fShowCodingFailureMode8 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
GHC.IO.Encoding.Failure.$fShowCodingFailureMode8
  = "ErrorOnCodingFailure"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.$fShowCodingFailureMode7 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.Failure.$fShowCodingFailureMode7
  = unpackCString# GHC.IO.Encoding.Failure.$fShowCodingFailureMode8

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.$fShowCodingFailureMode6 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
GHC.IO.Encoding.Failure.$fShowCodingFailureMode6
  = "IgnoreCodingFailure"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.$fShowCodingFailureMode5 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.Failure.$fShowCodingFailureMode5
  = unpackCString# GHC.IO.Encoding.Failure.$fShowCodingFailureMode6

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.$fShowCodingFailureMode4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 80 0}]
GHC.IO.Encoding.Failure.$fShowCodingFailureMode4
  = "TransliterateCodingFailure"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.$fShowCodingFailureMode3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.Failure.$fShowCodingFailureMode3
  = unpackCString# GHC.IO.Encoding.Failure.$fShowCodingFailureMode4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.$fShowCodingFailureMode2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Encoding.Failure.$fShowCodingFailureMode2
  = "RoundtripFailure"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.$fShowCodingFailureMode1 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.Failure.$fShowCodingFailureMode1
  = unpackCString# GHC.IO.Encoding.Failure.$fShowCodingFailureMode2

-- RHS size: {terms: 20, types: 7, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: CodingFailureMode -> String -> String
[GblId,
 Arity=2,
 Str=<S,1*U><L,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [140 0] 160 0}]
GHC.IO.Encoding.Failure.$w$cshowsPrec
  = \ (w_s8rRd :: CodingFailureMode) (w1_s8rRe :: String) ->
      case w_s8rRd of {
        ErrorOnCodingFailure ->
          ++
            @ Char GHC.IO.Encoding.Failure.$fShowCodingFailureMode7 w1_s8rRe;
        IgnoreCodingFailure ->
          ++
            @ Char GHC.IO.Encoding.Failure.$fShowCodingFailureMode5 w1_s8rRe;
        TransliterateCodingFailure ->
          ++
            @ Char GHC.IO.Encoding.Failure.$fShowCodingFailureMode3 w1_s8rRe;
        RoundtripFailure ->
          ++ @ Char GHC.IO.Encoding.Failure.$fShowCodingFailureMode1 w1_s8rRe
      }

-- RHS size: {terms: 6, types: 3, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.$fShowCodingFailureMode_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int -> CodingFailureMode -> ShowS
[GblId,
 Arity=3,
 Str=<L,A><S,1*U><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (w1_s8rRd [Occ=Once] :: CodingFailureMode)
                 (w2_s8rRe [Occ=Once] :: String) ->
                 GHC.IO.Encoding.Failure.$w$cshowsPrec w1_s8rRd w2_s8rRe}]
GHC.IO.Encoding.Failure.$fShowCodingFailureMode_$cshowsPrec
  = \ _ [Occ=Dead]
      (w1_s8rRd :: CodingFailureMode)
      (w2_s8rRe :: String) ->
      GHC.IO.Encoding.Failure.$w$cshowsPrec w1_s8rRd w2_s8rRe

-- RHS size: {terms: 11, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.$fShowCodingFailureMode_$cshow
  :: CodingFailureMode -> String
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_i7Jay [Occ=Once!] :: CodingFailureMode) ->
                 case x_i7Jay of {
                   ErrorOnCodingFailure ->
                     GHC.IO.Encoding.Failure.$fShowCodingFailureMode7;
                   IgnoreCodingFailure ->
                     GHC.IO.Encoding.Failure.$fShowCodingFailureMode5;
                   TransliterateCodingFailure ->
                     GHC.IO.Encoding.Failure.$fShowCodingFailureMode3;
                   RoundtripFailure ->
                     GHC.IO.Encoding.Failure.$fShowCodingFailureMode1
                 }}]
GHC.IO.Encoding.Failure.$fShowCodingFailureMode_$cshow
  = \ (x_i7Jay :: CodingFailureMode) ->
      case x_i7Jay of {
        ErrorOnCodingFailure ->
          GHC.IO.Encoding.Failure.$fShowCodingFailureMode7;
        IgnoreCodingFailure ->
          GHC.IO.Encoding.Failure.$fShowCodingFailureMode5;
        TransliterateCodingFailure ->
          GHC.IO.Encoding.Failure.$fShowCodingFailureMode3;
        RoundtripFailure ->
          GHC.IO.Encoding.Failure.$fShowCodingFailureMode1
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.$fShowCodingFailureMode_$cshowList
  :: [CodingFailureMode] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7JaB [Occ=Once] :: [CodingFailureMode])
                 (s_i7JaC [Occ=Once] :: String) ->
                 showList__
                   @ CodingFailureMode
                   GHC.IO.Encoding.Failure.$w$cshowsPrec
                   ls_i7JaB
                   s_i7JaC}]
GHC.IO.Encoding.Failure.$fShowCodingFailureMode_$cshowList
  = \ (ls_i7JaB :: [CodingFailureMode]) (s_i7JaC :: String) ->
      showList__
        @ CodingFailureMode
        GHC.IO.Encoding.Failure.$w$cshowsPrec
        ls_i7JaB
        s_i7JaC

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.$fShowCodingFailureMode [InlPrag=NOUSERINLINE CONLIKE]
  :: Show CodingFailureMode
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: CodingFailureMode
                       GHC.IO.Encoding.Failure.$fShowCodingFailureMode_$cshowsPrec
                       GHC.IO.Encoding.Failure.$fShowCodingFailureMode_$cshow
                       GHC.IO.Encoding.Failure.$fShowCodingFailureMode_$cshowList]
GHC.IO.Encoding.Failure.$fShowCodingFailureMode
  = GHC.Show.C:Show
      @ CodingFailureMode
      GHC.IO.Encoding.Failure.$fShowCodingFailureMode_$cshowsPrec
      GHC.IO.Encoding.Failure.$fShowCodingFailureMode_$cshow
      GHC.IO.Encoding.Failure.$fShowCodingFailureMode_$cshowList

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.codingFailureModeSuffix6 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Encoding.Failure.codingFailureModeSuffix6 = "//IGNORE"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.codingFailureModeSuffix5 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.Failure.codingFailureModeSuffix5
  = unpackCString# GHC.IO.Encoding.Failure.codingFailureModeSuffix6

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.codingFailureModeSuffix4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Encoding.Failure.codingFailureModeSuffix4 = "//TRANSLIT"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.codingFailureModeSuffix3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.Failure.codingFailureModeSuffix3
  = unpackCString# GHC.IO.Encoding.Failure.codingFailureModeSuffix4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.codingFailureModeSuffix2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Encoding.Failure.codingFailureModeSuffix2 = "//ROUNDTRIP"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.codingFailureModeSuffix1 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.Failure.codingFailureModeSuffix1
  = unpackCString# GHC.IO.Encoding.Failure.codingFailureModeSuffix2

-- RHS size: {terms: 11, types: 3, coercions: 0, joins: 0/0}
codingFailureModeSuffix :: CodingFailureMode -> String
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d8rCF [Occ=Once!] :: CodingFailureMode) ->
                 case ds_d8rCF of {
                   ErrorOnCodingFailure -> GHC.Types.[] @ Char;
                   IgnoreCodingFailure ->
                     GHC.IO.Encoding.Failure.codingFailureModeSuffix5;
                   TransliterateCodingFailure ->
                     GHC.IO.Encoding.Failure.codingFailureModeSuffix3;
                   RoundtripFailure ->
                     GHC.IO.Encoding.Failure.codingFailureModeSuffix1
                 }}]
codingFailureModeSuffix
  = \ (ds_d8rCF :: CodingFailureMode) ->
      case ds_d8rCF of {
        ErrorOnCodingFailure -> GHC.Types.[] @ Char;
        IgnoreCodingFailure ->
          GHC.IO.Encoding.Failure.codingFailureModeSuffix5;
        TransliterateCodingFailure ->
          GHC.IO.Encoding.Failure.codingFailureModeSuffix3;
        RoundtripFailure ->
          GHC.IO.Encoding.Failure.codingFailureModeSuffix1
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.recoverDecode7 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Encoding.Failure.recoverDecode7 = "recoverDecode"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.recoverDecode6 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.Failure.recoverDecode6
  = unpackCString# GHC.IO.Encoding.Failure.recoverDecode7

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.recoverDecode5 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
GHC.IO.Encoding.Failure.recoverDecode5 = "invalid byte sequence"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.recoverDecode4 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.Failure.recoverDecode4
  = unpackCString# GHC.IO.Encoding.Failure.recoverDecode5

-- RHS size: {terms: 7, types: 3, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.recoverDecode3 :: IOException
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Encoding.Failure.recoverDecode3
  = GHC.IO.Exception.IOError
      (GHC.Base.Nothing @ GHC.IO.Handle.Types.Handle)
      GHC.IO.Exception.InvalidArgument
      GHC.IO.Encoding.Failure.recoverDecode6
      GHC.IO.Encoding.Failure.recoverDecode4
      (GHC.Base.Nothing @ Foreign.C.Types.CInt)
      (GHC.Base.Nothing @ FilePath)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.recoverDecode2
  :: GHC.Exception.SomeException
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.Failure.recoverDecode2
  = GHC.IO.Exception.$fExceptionIOException_$ctoException
      GHC.IO.Encoding.Failure.recoverDecode3

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.recoverEncode7 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Encoding.Failure.recoverEncode7 = "recoverEncode"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.recoverEncode6 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.Failure.recoverEncode6
  = unpackCString# GHC.IO.Encoding.Failure.recoverEncode7

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.recoverEncode5 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
GHC.IO.Encoding.Failure.recoverEncode5 = "invalid character"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.recoverEncode4 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.Failure.recoverEncode4
  = unpackCString# GHC.IO.Encoding.Failure.recoverEncode5

-- RHS size: {terms: 7, types: 3, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.recoverEncode3 :: IOException
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Encoding.Failure.recoverEncode3
  = GHC.IO.Exception.IOError
      (GHC.Base.Nothing @ GHC.IO.Handle.Types.Handle)
      GHC.IO.Exception.InvalidArgument
      GHC.IO.Encoding.Failure.recoverEncode6
      GHC.IO.Encoding.Failure.recoverEncode4
      (GHC.Base.Nothing @ Foreign.C.Types.CInt)
      (GHC.Base.Nothing @ FilePath)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.recoverEncode2
  :: GHC.Exception.SomeException
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.Failure.recoverEncode2
  = GHC.IO.Exception.$fExceptionIOException_$ctoException
      GHC.IO.Encoding.Failure.recoverEncode3

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.$trModule4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.Failure.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.$trModule3 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Encoding.Failure.$trModule3
  = GHC.Types.TrNameS GHC.IO.Encoding.Failure.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.$trModule2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
GHC.IO.Encoding.Failure.$trModule2 = "GHC.IO.Encoding.Failure"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.$trModule1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Encoding.Failure.$trModule1
  = GHC.Types.TrNameS GHC.IO.Encoding.Failure.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.$trModule :: Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Encoding.Failure.$trModule
  = GHC.Types.Module
      GHC.IO.Encoding.Failure.$trModule3
      GHC.IO.Encoding.Failure.$trModule1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.$tcCodingFailureMode2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
GHC.IO.Encoding.Failure.$tcCodingFailureMode2
  = "CodingFailureMode"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.$tcCodingFailureMode1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Encoding.Failure.$tcCodingFailureMode1
  = GHC.Types.TrNameS GHC.IO.Encoding.Failure.$tcCodingFailureMode2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.$tcCodingFailureMode :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Encoding.Failure.$tcCodingFailureMode
  = GHC.Types.TyCon
      14925461047987757098##
      8591318658186141108##
      GHC.IO.Encoding.Failure.$trModule
      GHC.IO.Encoding.Failure.$tcCodingFailureMode1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure1
  = GHC.Types.KindRepTyConApp
      GHC.IO.Encoding.Failure.$tcCodingFailureMode
      (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure3
  = "'ErrorOnCodingFailure"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure2
  = GHC.Types.TrNameS
      GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure
  = GHC.Types.TyCon
      12360460340946478580##
      790065067637529655##
      GHC.IO.Encoding.Failure.$trModule
      GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure2
      0#
      GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.$tc'IgnoreCodingFailure2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
GHC.IO.Encoding.Failure.$tc'IgnoreCodingFailure2
  = "'IgnoreCodingFailure"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.$tc'IgnoreCodingFailure1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Encoding.Failure.$tc'IgnoreCodingFailure1
  = GHC.Types.TrNameS
      GHC.IO.Encoding.Failure.$tc'IgnoreCodingFailure2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.$tc'IgnoreCodingFailure :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Encoding.Failure.$tc'IgnoreCodingFailure
  = GHC.Types.TyCon
      1247277247292781024##
      4030462313976053703##
      GHC.IO.Encoding.Failure.$trModule
      GHC.IO.Encoding.Failure.$tc'IgnoreCodingFailure1
      0#
      GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.$tc'TransliterateCodingFailure2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 80 0}]
GHC.IO.Encoding.Failure.$tc'TransliterateCodingFailure2
  = "'TransliterateCodingFailure"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.$tc'TransliterateCodingFailure1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Encoding.Failure.$tc'TransliterateCodingFailure1
  = GHC.Types.TrNameS
      GHC.IO.Encoding.Failure.$tc'TransliterateCodingFailure2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.$tc'TransliterateCodingFailure :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Encoding.Failure.$tc'TransliterateCodingFailure
  = GHC.Types.TyCon
      2231629224643919862##
      7270908418490455598##
      GHC.IO.Encoding.Failure.$trModule
      GHC.IO.Encoding.Failure.$tc'TransliterateCodingFailure1
      0#
      GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.$tc'RoundtripFailure2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
GHC.IO.Encoding.Failure.$tc'RoundtripFailure2
  = "'RoundtripFailure"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.$tc'RoundtripFailure1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Encoding.Failure.$tc'RoundtripFailure1
  = GHC.Types.TrNameS GHC.IO.Encoding.Failure.$tc'RoundtripFailure2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Failure.$tc'RoundtripFailure :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Encoding.Failure.$tc'RoundtripFailure
  = GHC.Types.TyCon
      12324562344665179767##
      401887646038237864##
      GHC.IO.Encoding.Failure.$trModule
      GHC.IO.Encoding.Failure.$tc'RoundtripFailure1
      0#
      GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure1

-- RHS size: {terms: 180, types: 141, coercions: 0, joins: 0/2}
GHC.IO.Encoding.Failure.recoverDecode1
  :: CodingFailureMode
     -> Buffer Word8
     -> Buffer Char
     -> State# RealWorld
     -> (# State# RealWorld, (Buffer Word8, Buffer Char) #)
[GblId,
 Arity=4,
 Str=<S,1*U><S,1*U(U,U,U,U,U,U)><S,1*U(U,U,U,U,U,U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [107 20 20 0] 289 120}]
GHC.IO.Encoding.Failure.recoverDecode1
  = \ (cfm_a8rqo :: CodingFailureMode)
      (input_a8rqp :: Buffer Word8)
      (output_a8rqs :: Buffer Char)
      (eta_B1 :: State# RealWorld) ->
      case input_a8rqp of
      { Buffer dt_d8rDh dt1_d8rDi ds_d8rCu dt2_d8rDj dt3_d8rDk
               dt4_d8rDl ->
      case output_a8rqs of wild1_Xs
      { Buffer dt5_d8rDm dt6_d8rDn ds1_d8rCz dt7_d8rDo dt8_d8rDp
               dt9_d8rDq ->
      case cfm_a8rqo of {
        ErrorOnCodingFailure ->
          raiseIO#
            @ GHC.Exception.SomeException
            @ (Buffer Word8, Buffer Char)
            GHC.IO.Encoding.Failure.recoverDecode2
            eta_B1;
        IgnoreCodingFailure ->
          (# eta_B1,
             (GHC.IO.Buffer.Buffer
                @ Word8
                dt_d8rDh
                dt1_d8rDi
                ds_d8rCu
                dt2_d8rDj
                (+# dt3_d8rDk 1#)
                dt4_d8rDl,
              wild1_Xs) #);
        TransliterateCodingFailure ->
          case writeWideCharOffAddr#
                 @ RealWorld dt5_d8rDm dt9_d8rDq '\65533'# eta_B1
          of s2_i8ryS
          { __DEFAULT ->
          case touch#
                 @ 'LiftedRep @ GHC.ForeignPtr.ForeignPtrContents dt6_d8rDn s2_i8ryS
          of s'_i8ryT
          { __DEFAULT ->
          (# s'_i8ryT,
             (GHC.IO.Buffer.Buffer
                @ Word8
                dt_d8rDh
                dt1_d8rDi
                ds_d8rCu
                dt2_d8rDj
                (+# dt3_d8rDk 1#)
                dt4_d8rDl,
              GHC.IO.Buffer.Buffer
                @ Char
                dt5_d8rDm
                dt6_d8rDn
                ds1_d8rCz
                dt7_d8rDo
                dt8_d8rDp
                (+# dt9_d8rDq 1#)) #)
          }
          };
        RoundtripFailure ->
          case readWord8OffAddr#
                 @ RealWorld (plusAddr# dt_d8rDh dt3_d8rDk) 0# eta_B1
          of
          { (# ipv_i8rFz, ipv1_i8rFA #) ->
          case touch#
                 @ 'LiftedRep
                 @ GHC.ForeignPtr.ForeignPtrContents
                 dt1_d8rDi
                 ipv_i8rFz
          of s'_i8rFC
          { __DEFAULT ->
          case ltWord# ipv1_i8rFA 128## of {
            __DEFAULT ->
              let {
                i#_i8rAB [Dmd=<S,U>] :: Int#
                [LclId]
                i#_i8rAB = +# 56320# (word2Int# ipv1_i8rFA) } in
              case leWord# (int2Word# i#_i8rAB) 1114111## of {
                __DEFAULT -> case GHC.Char.$wlvl i#_i8rAB of wild3_00 { };
                1# ->
                  case writeWideCharOffAddr#
                         @ RealWorld dt5_d8rDm dt9_d8rDq (chr# i#_i8rAB) s'_i8rFC
                  of s2_i8ryS
                  { __DEFAULT ->
                  case touch#
                         @ 'LiftedRep @ GHC.ForeignPtr.ForeignPtrContents dt6_d8rDn s2_i8ryS
                  of s'1_i8ryT
                  { __DEFAULT ->
                  (# s'1_i8ryT,
                     (GHC.IO.Buffer.Buffer
                        @ Word8
                        dt_d8rDh
                        dt1_d8rDi
                        ds_d8rCu
                        dt2_d8rDj
                        (+# dt3_d8rDk 1#)
                        dt4_d8rDl,
                      GHC.IO.Buffer.Buffer
                        @ Char
                        dt5_d8rDm
                        dt6_d8rDn
                        ds1_d8rCz
                        dt7_d8rDo
                        dt8_d8rDp
                        (+# dt9_d8rDq 1#)) #)
                  }
                  }
              };
            1# ->
              let {
                i#_i8rAB [Dmd=<S,U>] :: Int#
                [LclId]
                i#_i8rAB = word2Int# ipv1_i8rFA } in
              case leWord# (int2Word# i#_i8rAB) 1114111## of {
                __DEFAULT -> case GHC.Char.$wlvl i#_i8rAB of wild3_00 { };
                1# ->
                  case writeWideCharOffAddr#
                         @ RealWorld dt5_d8rDm dt9_d8rDq (chr# i#_i8rAB) s'_i8rFC
                  of s2_i8ryS
                  { __DEFAULT ->
                  case touch#
                         @ 'LiftedRep @ GHC.ForeignPtr.ForeignPtrContents dt6_d8rDn s2_i8ryS
                  of s'1_i8ryT
                  { __DEFAULT ->
                  (# s'1_i8ryT,
                     (GHC.IO.Buffer.Buffer
                        @ Word8
                        dt_d8rDh
                        dt1_d8rDi
                        ds_d8rCu
                        dt2_d8rDj
                        (+# dt3_d8rDk 1#)
                        dt4_d8rDl,
                      GHC.IO.Buffer.Buffer
                        @ Char
                        dt5_d8rDm
                        dt6_d8rDn
                        ds1_d8rCz
                        dt7_d8rDo
                        dt8_d8rDp
                        (+# dt9_d8rDq 1#)) #)
                  }
                  }
              }
          }
          }
          }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 15, joins: 0/0}
recoverDecode
  :: CodingFailureMode
     -> Buffer Word8 -> Buffer Char -> IO (Buffer Word8, Buffer Char)
[GblId,
 Arity=4,
 Str=<S,1*U><S,1*U(U,U,U,U,U,U)><S,1*U(U,U,U,U,U,U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Encoding.Failure.recoverDecode1
               `cast` (<CodingFailureMode>_R
                       ->_R <Buffer Word8>_R
                       ->_R <Buffer Char>_R
                       ->_R Sym (GHC.Types.N:IO[0] <(Buffer Word8, Buffer Char)>_R)
                       :: (CodingFailureMode
                           -> Buffer Word8
                           -> Buffer Char
                           -> State# RealWorld
                           -> (# State# RealWorld, (Buffer Word8, Buffer Char) #) :: *)
                          ~R# (CodingFailureMode
                               -> Buffer Word8
                               -> Buffer Char
                               -> IO (Buffer Word8, Buffer Char) :: *))}]
recoverDecode
  = GHC.IO.Encoding.Failure.recoverDecode1
    `cast` (<CodingFailureMode>_R
            ->_R <Buffer Word8>_R
            ->_R <Buffer Char>_R
            ->_R Sym (GHC.Types.N:IO[0] <(Buffer Word8, Buffer Char)>_R)
            :: (CodingFailureMode
                -> Buffer Word8
                -> Buffer Char
                -> State# RealWorld
                -> (# State# RealWorld, (Buffer Word8, Buffer Char) #) :: *)
               ~R# (CodingFailureMode
                    -> Buffer Word8
                    -> Buffer Char
                    -> IO (Buffer Word8, Buffer Char) :: *))

-- RHS size: {terms: 135, types: 140, coercions: 0, joins: 0/1}
GHC.IO.Encoding.Failure.recoverEncode1
  :: CodingFailureMode
     -> Buffer Char
     -> Buffer Word8
     -> State# RealWorld
     -> (# State# RealWorld, (Buffer Char, Buffer Word8) #)
[GblId,
 Arity=4,
 Str=<S,1*U><S(SLLLSL),1*U(U,U,U,U,U,U)><S,1*U(U,U,U,U,U,U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [126 20 20 0] 220 120}]
GHC.IO.Encoding.Failure.recoverEncode1
  = \ (cfm_a8rqy :: CodingFailureMode)
      (input_a8rqz :: Buffer Char)
      (output_a8rqC :: Buffer Word8)
      (eta_B1 :: State# RealWorld) ->
      case input_a8rqz of wild_XW
      { Buffer dt_d8rCN dt1_d8rCO ds_d8rAn dt2_d8rCP dt3_d8rCQ
               dt4_d8rCR ->
      case output_a8rqC of wild1_Xv
      { Buffer dt5_d8rCS dt6_d8rCT ds1_d8rAs dt7_d8rCU dt8_d8rCV
               dt9_d8rCW ->
      case readWideCharOffAddr# @ RealWorld dt_d8rCN dt3_d8rCQ eta_B1 of
      { (# ipv_i8rzS, ipv1_i8rzT #) ->
      case touch#
             @ 'LiftedRep
             @ GHC.ForeignPtr.ForeignPtrContents
             dt1_d8rCO
             ipv_i8rzS
      of s'_i8rzV
      { __DEFAULT ->
      case cfm_a8rqy of {
        ErrorOnCodingFailure ->
          raiseIO#
            @ GHC.Exception.SomeException
            @ (Buffer Char, Buffer Word8)
            GHC.IO.Encoding.Failure.recoverEncode2
            s'_i8rzV;
        IgnoreCodingFailure ->
          (# s'_i8rzV,
             (GHC.IO.Buffer.Buffer
                @ Char
                dt_d8rCN
                dt1_d8rCO
                ds_d8rAn
                dt2_d8rCP
                (+# dt3_d8rCQ 1#)
                dt4_d8rCR,
              wild1_Xv) #);
        TransliterateCodingFailure ->
          case ipv1_i8rzT of {
            __DEFAULT ->
              case writeWideCharOffAddr#
                     @ RealWorld dt_d8rCN dt3_d8rCQ '?'# s'_i8rzV
              of s2_i8ryS
              { __DEFAULT ->
              case touch#
                     @ 'LiftedRep @ GHC.ForeignPtr.ForeignPtrContents dt1_d8rCO s2_i8ryS
              of s'1_i8ryT
              { __DEFAULT ->
              (# s'1_i8ryT, (wild_XW, wild1_Xv) #)
              }
              };
            '?'# ->
              (# s'_i8rzV,
                 (GHC.IO.Buffer.Buffer
                    @ Char
                    dt_d8rCN
                    dt1_d8rCO
                    ds_d8rAn
                    dt2_d8rCP
                    (+# dt3_d8rCQ 1#)
                    dt4_d8rCR,
                  wild1_Xv) #)
          };
        RoundtripFailure ->
          let {
            x_s8rKP [Dmd=<S,U>] :: Int#
            [LclId]
            x_s8rKP = ord# ipv1_i8rzT } in
          case <=# 56448# x_s8rKP of {
            __DEFAULT ->
              raiseIO#
                @ GHC.Exception.SomeException
                @ (Buffer Char, Buffer Word8)
                GHC.IO.Encoding.Failure.recoverEncode2
                s'_i8rzV;
            1# ->
              case <# x_s8rKP 56576# of {
                __DEFAULT ->
                  raiseIO#
                    @ GHC.Exception.SomeException
                    @ (Buffer Char, Buffer Word8)
                    GHC.IO.Encoding.Failure.recoverEncode2
                    s'_i8rzV;
                1# ->
                  case writeWord8OffAddr#
                         @ RealWorld
                         (plusAddr# dt5_d8rCS dt9_d8rCW)
                         0#
                         (narrow8Word# (int2Word# x_s8rKP))
                         s'_i8rzV
                  of s2_i8rGp
                  { __DEFAULT ->
                  case touch#
                         @ 'LiftedRep @ GHC.ForeignPtr.ForeignPtrContents dt6_d8rCT s2_i8rGp
                  of s'1_i8rGq
                  { __DEFAULT ->
                  (# s'1_i8rGq,
                     (GHC.IO.Buffer.Buffer
                        @ Char
                        dt_d8rCN
                        dt1_d8rCO
                        ds_d8rAn
                        dt2_d8rCP
                        (+# dt3_d8rCQ 1#)
                        dt4_d8rCR,
                      GHC.IO.Buffer.Buffer
                        @ Word8
                        dt5_d8rCS
                        dt6_d8rCT
                        ds1_d8rAs
                        dt7_d8rCU
                        dt8_d8rCV
                        (+# dt9_d8rCW 1#)) #)
                  }
                  }
              }
          }
      }
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 15, joins: 0/0}
recoverEncode
  :: CodingFailureMode
     -> Buffer Char -> Buffer Word8 -> IO (Buffer Char, Buffer Word8)
[GblId,
 Arity=4,
 Str=<S,1*U><S(SLLLSL),1*U(U,U,U,U,U,U)><S,1*U(U,U,U,U,U,U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Encoding.Failure.recoverEncode1
               `cast` (<CodingFailureMode>_R
                       ->_R <Buffer Char>_R
                       ->_R <Buffer Word8>_R
                       ->_R Sym (GHC.Types.N:IO[0] <(Buffer Char, Buffer Word8)>_R)
                       :: (CodingFailureMode
                           -> Buffer Char
                           -> Buffer Word8
                           -> State# RealWorld
                           -> (# State# RealWorld, (Buffer Char, Buffer Word8) #) :: *)
                          ~R# (CodingFailureMode
                               -> Buffer Char
                               -> Buffer Word8
                               -> IO (Buffer Char, Buffer Word8) :: *))}]
recoverEncode
  = GHC.IO.Encoding.Failure.recoverEncode1
    `cast` (<CodingFailureMode>_R
            ->_R <Buffer Char>_R
            ->_R <Buffer Word8>_R
            ->_R Sym (GHC.Types.N:IO[0] <(Buffer Char, Buffer Word8)>_R)
            :: (CodingFailureMode
                -> Buffer Char
                -> Buffer Word8
                -> State# RealWorld
                -> (# State# RealWorld, (Buffer Char, Buffer Word8) #) :: *)
               ~R# (CodingFailureMode
                    -> Buffer Char
                    -> Buffer Word8
                    -> IO (Buffer Char, Buffer Word8) :: *))

-- RHS size: {terms: 42, types: 10, coercions: 0, joins: 0/1}
isSurrogate [InlPrag=INLINE (sat-args=1)] :: Char -> Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=False,boring_ok=False)
         Tmpl= \ (c_a8rqj [Occ=Once!] :: Char) ->
                 let {
                   x_a8rqk :: Int
                   [LclId]
                   x_a8rqk
                     = case c_a8rqj of { C# c#_i8rxX [Occ=Once] ->
                       GHC.Types.I# (ord# c#_i8rxX)
                       } } in
                 join {
                   $j_s8rL4 [Occ=Once*T[0]] :: Bool
                   [LclId[JoinId(0)]]
                   $j_s8rL4
                     = case leInt (GHC.Types.I# 56320#) x_a8rqk of {
                         False -> GHC.Types.False;
                         True -> leInt x_a8rqk (GHC.Types.I# 57343#)
                       } } in
                 case leInt (GHC.Types.I# 55296#) x_a8rqk of {
                   False -> jump $j_s8rL4;
                   True ->
                     case leInt x_a8rqk (GHC.Types.I# 56319#) of {
                       False -> jump $j_s8rL4;
                       True -> GHC.Types.True
                     }
                 }}]
isSurrogate
  = \ (c_a8rqj :: Char) ->
      case c_a8rqj of { C# c#_i8rxX ->
      let {
        y_at1i [Dmd=<S,U>] :: Int#
        [LclId]
        y_at1i = ord# c#_i8rxX } in
      case <=# 55296# y_at1i of {
        __DEFAULT ->
          case <=# 56320# y_at1i of {
            __DEFAULT -> GHC.Types.False;
            1# -> tagToEnum# @ Bool (<=# y_at1i 57343#)
          };
        1# ->
          case <=# y_at1i 56319# of {
            __DEFAULT ->
              case <=# 56320# y_at1i of {
                __DEFAULT -> GHC.Types.False;
                1# -> tagToEnum# @ Bool (<=# y_at1i 57343#)
              };
            1# -> GHC.Types.True
          }
      }
      }


