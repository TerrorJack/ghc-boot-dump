
==================== Tidy Core ====================
2018-03-16 16:03:43.201653785 UTC

Result size of Tidy Core
  = {terms: 2,463, types: 2,322, coercions: 570, joins: 23/33}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.UTF32.$trModule4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.UTF32.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.UTF32.$trModule3 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Encoding.UTF32.$trModule3
  = GHC.Types.TrNameS GHC.IO.Encoding.UTF32.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.UTF32.$trModule2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
GHC.IO.Encoding.UTF32.$trModule2 = "GHC.IO.Encoding.UTF32"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.UTF32.$trModule1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Encoding.UTF32.$trModule1
  = GHC.Types.TrNameS GHC.IO.Encoding.UTF32.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.UTF32.$trModule :: Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Encoding.UTF32.$trModule
  = GHC.Types.Module
      GHC.IO.Encoding.UTF32.$trModule3 GHC.IO.Encoding.UTF32.$trModule1

-- RHS size: {terms: 590, types: 388, coercions: 0, joins: 6/8}
GHC.IO.Encoding.UTF32.mkUTF32le1
  :: Buffer Char
     -> Buffer Word8
     -> State# RealWorld
     -> (# State# RealWorld,
           (CodingProgress, Buffer Char, Buffer Word8) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSS),1*U(U,U,U,U,U,U)><S(LLLLLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 20 0] 605 0}]
GHC.IO.Encoding.UTF32.mkUTF32le1
  = \ (input_a8zjH :: Buffer Char)
      (output_a8zjL :: Buffer Word8)
      (eta_B1 :: State# RealWorld) ->
      case input_a8zjH of
      { Buffer dt_d8zNF dt1_d8zNG ds_d8zFq dt2_d8zNH dt3_d8zNI
               dt4_d8zNJ ->
      case output_a8zjL of
      { Buffer dt5_d8zNK dt6_d8zNL ds1_d8zFv dt7_d8zNM dt8_d8zNN
               dt9_d8zNO ->
      let {
        lvl5_s8A5T :: Buffer Char
        [LclId, Unf=OtherCon []]
        lvl5_s8A5T
          = GHC.IO.Buffer.Buffer
              @ Char dt_d8zNF dt1_d8zNG ds_d8zFq dt2_d8zNH 0# 0# } in
      join {
        exit_X1u [Dmd=<L,C(C1(C1(U(U,U))))>]
          :: Int#
             -> Int#
             -> State# RealWorld
             -> (# State# RealWorld,
                   (CodingProgress, Buffer Char, Buffer Word8) #)
        [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>]
        exit_X1u (ww_s8ABT [OS=OneShot] :: Int#)
                 (ww1_s8ABX [OS=OneShot] :: Int#)
                 (s'_i8rzV [OS=OneShot]
                    :: State# RealWorld
                    Unf=OtherCon [])
          = (# s'_i8rzV,
               (GHC.IO.Encoding.Types.InvalidSequence,
                case ==# ww_s8ABT dt4_d8zNJ of {
                  __DEFAULT ->
                    GHC.IO.Buffer.Buffer
                      @ Char dt_d8zNF dt1_d8zNG ds_d8zFq dt2_d8zNH ww_s8ABT dt4_d8zNJ;
                  1# -> lvl5_s8A5T
                },
                GHC.IO.Buffer.Buffer
                  @ Word8
                  dt5_d8zNK
                  dt6_d8zNL
                  ds1_d8zFv
                  dt7_d8zNM
                  dt8_d8zNN
                  ww1_s8ABX) #) } in
      join {
        exit1_X1w [Dmd=<L,C(C1(C1(U(U,U))))>]
          :: Int#
             -> Int#
             -> State# RealWorld
             -> (# State# RealWorld,
                   (CodingProgress, Buffer Char, Buffer Word8) #)
        [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>]
        exit1_X1w (ww_s8ABT [OS=OneShot] :: Int#)
                  (ww1_s8ABX [OS=OneShot] :: Int#)
                  (s'_i8rzV [OS=OneShot]
                     :: State# RealWorld
                     Unf=OtherCon [])
          = (# s'_i8rzV,
               (GHC.IO.Encoding.Types.InvalidSequence,
                case ==# ww_s8ABT dt4_d8zNJ of {
                  __DEFAULT ->
                    GHC.IO.Buffer.Buffer
                      @ Char dt_d8zNF dt1_d8zNG ds_d8zFq dt2_d8zNH ww_s8ABT dt4_d8zNJ;
                  1# -> lvl5_s8A5T
                },
                GHC.IO.Buffer.Buffer
                  @ Word8
                  dt5_d8zNK
                  dt6_d8zNL
                  ds1_d8zFv
                  dt7_d8zNM
                  dt8_d8zNN
                  ww1_s8ABX) #) } in
      join {
        exit2_X1v [Dmd=<L,C(C1(C1(U(U,U))))>]
          :: Int#
             -> Int#
             -> State# RealWorld
             -> (# State# RealWorld,
                   (CodingProgress, Buffer Char, Buffer Word8) #)
        [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>]
        exit2_X1v (ww_s8ABT [OS=OneShot] :: Int#)
                  (ww1_s8ABX [OS=OneShot] :: Int#)
                  (s'_i8rzV [OS=OneShot]
                     :: State# RealWorld
                     Unf=OtherCon [])
          = (# s'_i8rzV,
               (GHC.IO.Encoding.Types.InvalidSequence,
                case ==# ww_s8ABT dt4_d8zNJ of {
                  __DEFAULT ->
                    GHC.IO.Buffer.Buffer
                      @ Char dt_d8zNF dt1_d8zNG ds_d8zFq dt2_d8zNH ww_s8ABT dt4_d8zNJ;
                  1# -> lvl5_s8A5T
                },
                GHC.IO.Buffer.Buffer
                  @ Word8
                  dt5_d8zNK
                  dt6_d8zNL
                  ds1_d8zFv
                  dt7_d8zNM
                  dt8_d8zNN
                  ww1_s8ABX) #) } in
      join {
        exit3_X1p [Dmd=<L,C(C1(C1(U(U,U))))>]
          :: Int#
             -> Int#
             -> State# RealWorld
             -> (# State# RealWorld,
                   (CodingProgress, Buffer Char, Buffer Word8) #)
        [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>]
        exit3_X1p (ww_s8ABT [OS=OneShot] :: Int#)
                  (ww1_s8ABX [OS=OneShot] :: Int#)
                  (w_s8ABQ [OS=OneShot] :: State# RealWorld)
          = (# w_s8ABQ,
               (GHC.IO.Encoding.Types.OutputUnderflow,
                case ==# ww_s8ABT dt4_d8zNJ of {
                  __DEFAULT ->
                    GHC.IO.Buffer.Buffer
                      @ Char dt_d8zNF dt1_d8zNG ds_d8zFq dt2_d8zNH ww_s8ABT dt4_d8zNJ;
                  1# -> lvl5_s8A5T
                },
                GHC.IO.Buffer.Buffer
                  @ Word8
                  dt5_d8zNK
                  dt6_d8zNL
                  ds1_d8zFv
                  dt7_d8zNM
                  dt8_d8zNN
                  ww1_s8ABX) #) } in
      join {
        exit4_X2O [Dmd=<L,C(C1(C1(U(U,U))))>]
          :: Int#
             -> Int#
             -> State# RealWorld
             -> (# State# RealWorld,
                   (CodingProgress, Buffer Char, Buffer Word8) #)
        [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>]
        exit4_X2O (ww_s8ABT [OS=OneShot] :: Int#)
                  (ww1_s8ABX [OS=OneShot] :: Int#)
                  (w_s8ABQ [OS=OneShot] :: State# RealWorld)
          = (# w_s8ABQ,
               (GHC.IO.Encoding.Types.InputUnderflow,
                case ==# ww_s8ABT dt4_d8zNJ of {
                  __DEFAULT ->
                    GHC.IO.Buffer.Buffer
                      @ Char dt_d8zNF dt1_d8zNG ds_d8zFq dt2_d8zNH ww_s8ABT dt4_d8zNJ;
                  1# -> lvl5_s8A5T
                },
                GHC.IO.Buffer.Buffer
                  @ Word8
                  dt5_d8zNK
                  dt6_d8zNL
                  ds1_d8zFv
                  dt7_d8zNM
                  dt8_d8zNN
                  ww1_s8ABX) #) } in
      joinrec {
        $wloop_s8ABZ [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
          :: Int#
             -> Int#
             -> State# RealWorld
             -> (# State# RealWorld,
                   (CodingProgress, Buffer Char, Buffer Word8) #)
        [LclId[JoinId(3)], Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []]
        $wloop_s8ABZ (ww_s8ABT :: Int#)
                     (ww1_s8ABX :: Int#)
                     (w_s8ABQ :: State# RealWorld)
          = case >=# ww_s8ABT dt4_d8zNJ of {
              __DEFAULT ->
                case <# (-# dt7_d8zNM ww1_s8ABX) 4# of {
                  __DEFAULT ->
                    case readWideCharOffAddr# @ RealWorld dt_d8zNF ww_s8ABT w_s8ABQ of
                    { (# ipv_i8rzS, ipv1_i8rzT #) ->
                    case touch#
                           @ 'LiftedRep
                           @ GHC.ForeignPtr.ForeignPtrContents
                           dt1_d8zNG
                           ipv_i8rzS
                    of s'_i8rzV
                    { __DEFAULT ->
                    let {
                      x_s8A8e [Dmd=<S,U>] :: Int#
                      [LclId]
                      x_s8A8e = ord# ipv1_i8rzT } in
                    case <=# 55296# x_s8A8e of {
                      __DEFAULT ->
                        case <=# 56320# x_s8A8e of {
                          __DEFAULT ->
                            case writeWord8OffAddr#
                                   @ RealWorld
                                   (plusAddr# dt5_d8zNK ww1_s8ABX)
                                   0#
                                   (narrow8Word# (int2Word# x_s8A8e))
                                   s'_i8rzV
                            of s2_i8rGp
                            { __DEFAULT ->
                            case touch#
                                   @ 'LiftedRep
                                   @ GHC.ForeignPtr.ForeignPtrContents
                                   dt6_d8zNL
                                   s2_i8rGp
                            of s'1_i8rGq
                            { __DEFAULT ->
                            case writeWord8OffAddr#
                                   @ RealWorld
                                   (plusAddr# dt5_d8zNK (+# ww1_s8ABX 1#))
                                   0#
                                   (narrow8Word# (int2Word# (uncheckedIShiftRA# x_s8A8e 8#)))
                                   s'1_i8rGq
                            of s1_X8rKz
                            { __DEFAULT ->
                            case touch#
                                   @ 'LiftedRep
                                   @ GHC.ForeignPtr.ForeignPtrContents
                                   dt6_d8zNL
                                   s1_X8rKz
                            of s'2_X8rKD
                            { __DEFAULT ->
                            case writeWord8OffAddr#
                                   @ RealWorld
                                   (plusAddr# dt5_d8zNK (+# ww1_s8ABX 2#))
                                   0#
                                   (narrow8Word# (int2Word# (uncheckedIShiftRA# x_s8A8e 16#)))
                                   s'2_X8rKD
                            of s3_X8rKM
                            { __DEFAULT ->
                            case touch#
                                   @ 'LiftedRep
                                   @ GHC.ForeignPtr.ForeignPtrContents
                                   dt6_d8zNL
                                   s3_X8rKM
                            of s'3_X8rKQ
                            { __DEFAULT ->
                            case writeWord8OffAddr#
                                   @ RealWorld
                                   (plusAddr# dt5_d8zNK (+# ww1_s8ABX 3#))
                                   0#
                                   (narrow8Word# (int2Word# (uncheckedIShiftRA# x_s8A8e 24#)))
                                   s'3_X8rKQ
                            of s4_X8rKZ
                            { __DEFAULT ->
                            case touch#
                                   @ 'LiftedRep
                                   @ GHC.ForeignPtr.ForeignPtrContents
                                   dt6_d8zNL
                                   s4_X8rKZ
                            of s'4_X8rL3
                            { __DEFAULT ->
                            jump $wloop_s8ABZ (+# ww_s8ABT 1#) (+# ww1_s8ABX 4#) s'4_X8rL3
                            }
                            }
                            }
                            }
                            }
                            }
                            }
                            };
                          1# ->
                            case <=# x_s8A8e 57343# of {
                              __DEFAULT ->
                                case writeWord8OffAddr#
                                       @ RealWorld
                                       (plusAddr# dt5_d8zNK ww1_s8ABX)
                                       0#
                                       (narrow8Word# (int2Word# x_s8A8e))
                                       s'_i8rzV
                                of s2_i8rGp
                                { __DEFAULT ->
                                case touch#
                                       @ 'LiftedRep
                                       @ GHC.ForeignPtr.ForeignPtrContents
                                       dt6_d8zNL
                                       s2_i8rGp
                                of s'1_i8rGq
                                { __DEFAULT ->
                                case writeWord8OffAddr#
                                       @ RealWorld
                                       (plusAddr# dt5_d8zNK (+# ww1_s8ABX 1#))
                                       0#
                                       (narrow8Word# (int2Word# (uncheckedIShiftRA# x_s8A8e 8#)))
                                       s'1_i8rGq
                                of s1_X8rKz
                                { __DEFAULT ->
                                case touch#
                                       @ 'LiftedRep
                                       @ GHC.ForeignPtr.ForeignPtrContents
                                       dt6_d8zNL
                                       s1_X8rKz
                                of s'2_X8rKD
                                { __DEFAULT ->
                                case writeWord8OffAddr#
                                       @ RealWorld
                                       (plusAddr# dt5_d8zNK (+# ww1_s8ABX 2#))
                                       0#
                                       (narrow8Word# (int2Word# (uncheckedIShiftRA# x_s8A8e 16#)))
                                       s'2_X8rKD
                                of s3_X8rKM
                                { __DEFAULT ->
                                case touch#
                                       @ 'LiftedRep
                                       @ GHC.ForeignPtr.ForeignPtrContents
                                       dt6_d8zNL
                                       s3_X8rKM
                                of s'3_X8rKQ
                                { __DEFAULT ->
                                case writeWord8OffAddr#
                                       @ RealWorld
                                       (plusAddr# dt5_d8zNK (+# ww1_s8ABX 3#))
                                       0#
                                       (narrow8Word# (int2Word# (uncheckedIShiftRA# x_s8A8e 24#)))
                                       s'3_X8rKQ
                                of s4_X8rKZ
                                { __DEFAULT ->
                                case touch#
                                       @ 'LiftedRep
                                       @ GHC.ForeignPtr.ForeignPtrContents
                                       dt6_d8zNL
                                       s4_X8rKZ
                                of s'4_X8rL3
                                { __DEFAULT ->
                                jump $wloop_s8ABZ (+# ww_s8ABT 1#) (+# ww1_s8ABX 4#) s'4_X8rL3
                                }
                                }
                                }
                                }
                                }
                                }
                                }
                                };
                              1# -> jump exit_X1u ww_s8ABT ww1_s8ABX s'_i8rzV
                            }
                        };
                      1# ->
                        case <=# x_s8A8e 56319# of {
                          __DEFAULT ->
                            case <=# 56320# x_s8A8e of {
                              __DEFAULT ->
                                case writeWord8OffAddr#
                                       @ RealWorld
                                       (plusAddr# dt5_d8zNK ww1_s8ABX)
                                       0#
                                       (narrow8Word# (int2Word# x_s8A8e))
                                       s'_i8rzV
                                of s2_i8rGp
                                { __DEFAULT ->
                                case touch#
                                       @ 'LiftedRep
                                       @ GHC.ForeignPtr.ForeignPtrContents
                                       dt6_d8zNL
                                       s2_i8rGp
                                of s'1_i8rGq
                                { __DEFAULT ->
                                case writeWord8OffAddr#
                                       @ RealWorld
                                       (plusAddr# dt5_d8zNK (+# ww1_s8ABX 1#))
                                       0#
                                       (narrow8Word# (int2Word# (uncheckedIShiftRA# x_s8A8e 8#)))
                                       s'1_i8rGq
                                of s1_X8rKz
                                { __DEFAULT ->
                                case touch#
                                       @ 'LiftedRep
                                       @ GHC.ForeignPtr.ForeignPtrContents
                                       dt6_d8zNL
                                       s1_X8rKz
                                of s'2_X8rKD
                                { __DEFAULT ->
                                case writeWord8OffAddr#
                                       @ RealWorld
                                       (plusAddr# dt5_d8zNK (+# ww1_s8ABX 2#))
                                       0#
                                       (narrow8Word# (int2Word# (uncheckedIShiftRA# x_s8A8e 16#)))
                                       s'2_X8rKD
                                of s3_X8rKM
                                { __DEFAULT ->
                                case touch#
                                       @ 'LiftedRep
                                       @ GHC.ForeignPtr.ForeignPtrContents
                                       dt6_d8zNL
                                       s3_X8rKM
                                of s'3_X8rKQ
                                { __DEFAULT ->
                                case writeWord8OffAddr#
                                       @ RealWorld
                                       (plusAddr# dt5_d8zNK (+# ww1_s8ABX 3#))
                                       0#
                                       (narrow8Word# (int2Word# (uncheckedIShiftRA# x_s8A8e 24#)))
                                       s'3_X8rKQ
                                of s4_X8rKZ
                                { __DEFAULT ->
                                case touch#
                                       @ 'LiftedRep
                                       @ GHC.ForeignPtr.ForeignPtrContents
                                       dt6_d8zNL
                                       s4_X8rKZ
                                of s'4_X8rL3
                                { __DEFAULT ->
                                jump $wloop_s8ABZ (+# ww_s8ABT 1#) (+# ww1_s8ABX 4#) s'4_X8rL3
                                }
                                }
                                }
                                }
                                }
                                }
                                }
                                };
                              1# ->
                                case <=# x_s8A8e 57343# of {
                                  __DEFAULT ->
                                    case writeWord8OffAddr#
                                           @ RealWorld
                                           (plusAddr# dt5_d8zNK ww1_s8ABX)
                                           0#
                                           (narrow8Word# (int2Word# x_s8A8e))
                                           s'_i8rzV
                                    of s2_i8rGp
                                    { __DEFAULT ->
                                    case touch#
                                           @ 'LiftedRep
                                           @ GHC.ForeignPtr.ForeignPtrContents
                                           dt6_d8zNL
                                           s2_i8rGp
                                    of s'1_i8rGq
                                    { __DEFAULT ->
                                    case writeWord8OffAddr#
                                           @ RealWorld
                                           (plusAddr# dt5_d8zNK (+# ww1_s8ABX 1#))
                                           0#
                                           (narrow8Word#
                                              (int2Word# (uncheckedIShiftRA# x_s8A8e 8#)))
                                           s'1_i8rGq
                                    of s1_X8rKz
                                    { __DEFAULT ->
                                    case touch#
                                           @ 'LiftedRep
                                           @ GHC.ForeignPtr.ForeignPtrContents
                                           dt6_d8zNL
                                           s1_X8rKz
                                    of s'2_X8rKD
                                    { __DEFAULT ->
                                    case writeWord8OffAddr#
                                           @ RealWorld
                                           (plusAddr# dt5_d8zNK (+# ww1_s8ABX 2#))
                                           0#
                                           (narrow8Word#
                                              (int2Word# (uncheckedIShiftRA# x_s8A8e 16#)))
                                           s'2_X8rKD
                                    of s3_X8rKM
                                    { __DEFAULT ->
                                    case touch#
                                           @ 'LiftedRep
                                           @ GHC.ForeignPtr.ForeignPtrContents
                                           dt6_d8zNL
                                           s3_X8rKM
                                    of s'3_X8rKQ
                                    { __DEFAULT ->
                                    case writeWord8OffAddr#
                                           @ RealWorld
                                           (plusAddr# dt5_d8zNK (+# ww1_s8ABX 3#))
                                           0#
                                           (narrow8Word#
                                              (int2Word# (uncheckedIShiftRA# x_s8A8e 24#)))
                                           s'3_X8rKQ
                                    of s4_X8rKZ
                                    { __DEFAULT ->
                                    case touch#
                                           @ 'LiftedRep
                                           @ GHC.ForeignPtr.ForeignPtrContents
                                           dt6_d8zNL
                                           s4_X8rKZ
                                    of s'4_X8rL3
                                    { __DEFAULT ->
                                    jump $wloop_s8ABZ (+# ww_s8ABT 1#) (+# ww1_s8ABX 4#) s'4_X8rL3
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                    };
                                  1# -> jump exit1_X1w ww_s8ABT ww1_s8ABX s'_i8rzV
                                }
                            };
                          1# -> jump exit2_X1v ww_s8ABT ww1_s8ABX s'_i8rzV
                        }
                    }
                    }
                    };
                  1# -> jump exit3_X1p ww_s8ABT ww1_s8ABX w_s8ABQ
                };
              1# -> jump exit4_X2O ww_s8ABT ww1_s8ABX w_s8ABQ
            }; } in
      jump $wloop_s8ABZ dt3_d8zNI dt9_d8zNO eta_B1
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 14, joins: 0/0}
utf32le_encode :: EncodeBuffer
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSS),1*U(U,U,U,U,U,U)><S(LLLLLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Encoding.UTF32.mkUTF32le1
               `cast` (<Buffer Char>_R
                       ->_R <Buffer Word8>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <(CodingProgress, Buffer Char, Buffer Word8)>_R)
                       :: (Buffer Char
                           -> Buffer Word8
                           -> State# RealWorld
                           -> (# State# RealWorld,
                                 (CodingProgress, Buffer Char, Buffer Word8) #) :: *)
                          ~R# (Buffer Char
                               -> Buffer Word8
                               -> IO (CodingProgress, Buffer Char, Buffer Word8) :: *))}]
utf32le_encode
  = GHC.IO.Encoding.UTF32.mkUTF32le1
    `cast` (<Buffer Char>_R
            ->_R <Buffer Word8>_R
            ->_R Sym (GHC.Types.N:IO[0]
                          <(CodingProgress, Buffer Char, Buffer Word8)>_R)
            :: (Buffer Char
                -> Buffer Word8
                -> State# RealWorld
                -> (# State# RealWorld,
                      (CodingProgress, Buffer Char, Buffer Word8) #) :: *)
               ~R# (Buffer Char
                    -> Buffer Word8
                    -> IO (CodingProgress, Buffer Char, Buffer Word8) :: *))

-- RHS size: {terms: 590, types: 388, coercions: 0, joins: 6/8}
GHC.IO.Encoding.UTF32.mkUTF1
  :: Buffer Char
     -> Buffer Word8
     -> State# RealWorld
     -> (# State# RealWorld,
           (CodingProgress, Buffer Char, Buffer Word8) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSS),1*U(U,U,U,U,U,U)><S(LLLLLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 20 0] 605 0}]
GHC.IO.Encoding.UTF32.mkUTF1
  = \ (input_a8zjm :: Buffer Char)
      (output_a8zjq :: Buffer Word8)
      (eta_B1 :: State# RealWorld) ->
      case input_a8zjm of
      { Buffer dt_d8zO4 dt1_d8zO5 ds_d8zHE dt2_d8zO6 dt3_d8zO7
               dt4_d8zO8 ->
      case output_a8zjq of
      { Buffer dt5_d8zO9 dt6_d8zOa ds1_d8zHJ dt7_d8zOb dt8_d8zOc
               dt9_d8zOd ->
      let {
        lvl5_s8A6f :: Buffer Char
        [LclId, Unf=OtherCon []]
        lvl5_s8A6f
          = GHC.IO.Buffer.Buffer
              @ Char dt_d8zO4 dt1_d8zO5 ds_d8zHE dt2_d8zO6 0# 0# } in
      join {
        exit_X1u [Dmd=<L,C(C1(C1(U(U,U))))>]
          :: Int#
             -> Int#
             -> State# RealWorld
             -> (# State# RealWorld,
                   (CodingProgress, Buffer Char, Buffer Word8) #)
        [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>]
        exit_X1u (ww_s8ACq [OS=OneShot] :: Int#)
                 (ww1_s8ACu [OS=OneShot] :: Int#)
                 (s'_i8rzV [OS=OneShot]
                    :: State# RealWorld
                    Unf=OtherCon [])
          = (# s'_i8rzV,
               (GHC.IO.Encoding.Types.InvalidSequence,
                case ==# ww_s8ACq dt4_d8zO8 of {
                  __DEFAULT ->
                    GHC.IO.Buffer.Buffer
                      @ Char dt_d8zO4 dt1_d8zO5 ds_d8zHE dt2_d8zO6 ww_s8ACq dt4_d8zO8;
                  1# -> lvl5_s8A6f
                },
                GHC.IO.Buffer.Buffer
                  @ Word8
                  dt5_d8zO9
                  dt6_d8zOa
                  ds1_d8zHJ
                  dt7_d8zOb
                  dt8_d8zOc
                  ww1_s8ACu) #) } in
      join {
        exit1_X1w [Dmd=<L,C(C1(C1(U(U,U))))>]
          :: Int#
             -> Int#
             -> State# RealWorld
             -> (# State# RealWorld,
                   (CodingProgress, Buffer Char, Buffer Word8) #)
        [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>]
        exit1_X1w (ww_s8ACq [OS=OneShot] :: Int#)
                  (ww1_s8ACu [OS=OneShot] :: Int#)
                  (s'_i8rzV [OS=OneShot]
                     :: State# RealWorld
                     Unf=OtherCon [])
          = (# s'_i8rzV,
               (GHC.IO.Encoding.Types.InvalidSequence,
                case ==# ww_s8ACq dt4_d8zO8 of {
                  __DEFAULT ->
                    GHC.IO.Buffer.Buffer
                      @ Char dt_d8zO4 dt1_d8zO5 ds_d8zHE dt2_d8zO6 ww_s8ACq dt4_d8zO8;
                  1# -> lvl5_s8A6f
                },
                GHC.IO.Buffer.Buffer
                  @ Word8
                  dt5_d8zO9
                  dt6_d8zOa
                  ds1_d8zHJ
                  dt7_d8zOb
                  dt8_d8zOc
                  ww1_s8ACu) #) } in
      join {
        exit2_X1v [Dmd=<L,C(C1(C1(U(U,U))))>]
          :: Int#
             -> Int#
             -> State# RealWorld
             -> (# State# RealWorld,
                   (CodingProgress, Buffer Char, Buffer Word8) #)
        [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>]
        exit2_X1v (ww_s8ACq [OS=OneShot] :: Int#)
                  (ww1_s8ACu [OS=OneShot] :: Int#)
                  (s'_i8rzV [OS=OneShot]
                     :: State# RealWorld
                     Unf=OtherCon [])
          = (# s'_i8rzV,
               (GHC.IO.Encoding.Types.InvalidSequence,
                case ==# ww_s8ACq dt4_d8zO8 of {
                  __DEFAULT ->
                    GHC.IO.Buffer.Buffer
                      @ Char dt_d8zO4 dt1_d8zO5 ds_d8zHE dt2_d8zO6 ww_s8ACq dt4_d8zO8;
                  1# -> lvl5_s8A6f
                },
                GHC.IO.Buffer.Buffer
                  @ Word8
                  dt5_d8zO9
                  dt6_d8zOa
                  ds1_d8zHJ
                  dt7_d8zOb
                  dt8_d8zOc
                  ww1_s8ACu) #) } in
      join {
        exit3_X1p [Dmd=<L,C(C1(C1(U(U,U))))>]
          :: Int#
             -> Int#
             -> State# RealWorld
             -> (# State# RealWorld,
                   (CodingProgress, Buffer Char, Buffer Word8) #)
        [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>]
        exit3_X1p (ww_s8ACq [OS=OneShot] :: Int#)
                  (ww1_s8ACu [OS=OneShot] :: Int#)
                  (w_s8ACn [OS=OneShot] :: State# RealWorld)
          = (# w_s8ACn,
               (GHC.IO.Encoding.Types.OutputUnderflow,
                case ==# ww_s8ACq dt4_d8zO8 of {
                  __DEFAULT ->
                    GHC.IO.Buffer.Buffer
                      @ Char dt_d8zO4 dt1_d8zO5 ds_d8zHE dt2_d8zO6 ww_s8ACq dt4_d8zO8;
                  1# -> lvl5_s8A6f
                },
                GHC.IO.Buffer.Buffer
                  @ Word8
                  dt5_d8zO9
                  dt6_d8zOa
                  ds1_d8zHJ
                  dt7_d8zOb
                  dt8_d8zOc
                  ww1_s8ACu) #) } in
      join {
        exit4_X2O [Dmd=<L,C(C1(C1(U(U,U))))>]
          :: Int#
             -> Int#
             -> State# RealWorld
             -> (# State# RealWorld,
                   (CodingProgress, Buffer Char, Buffer Word8) #)
        [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>]
        exit4_X2O (ww_s8ACq [OS=OneShot] :: Int#)
                  (ww1_s8ACu [OS=OneShot] :: Int#)
                  (w_s8ACn [OS=OneShot] :: State# RealWorld)
          = (# w_s8ACn,
               (GHC.IO.Encoding.Types.InputUnderflow,
                case ==# ww_s8ACq dt4_d8zO8 of {
                  __DEFAULT ->
                    GHC.IO.Buffer.Buffer
                      @ Char dt_d8zO4 dt1_d8zO5 ds_d8zHE dt2_d8zO6 ww_s8ACq dt4_d8zO8;
                  1# -> lvl5_s8A6f
                },
                GHC.IO.Buffer.Buffer
                  @ Word8
                  dt5_d8zO9
                  dt6_d8zOa
                  ds1_d8zHJ
                  dt7_d8zOb
                  dt8_d8zOc
                  ww1_s8ACu) #) } in
      joinrec {
        $wloop_s8ACw [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
          :: Int#
             -> Int#
             -> State# RealWorld
             -> (# State# RealWorld,
                   (CodingProgress, Buffer Char, Buffer Word8) #)
        [LclId[JoinId(3)], Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []]
        $wloop_s8ACw (ww_s8ACq :: Int#)
                     (ww1_s8ACu :: Int#)
                     (w_s8ACn :: State# RealWorld)
          = case >=# ww_s8ACq dt4_d8zO8 of {
              __DEFAULT ->
                case <# (-# dt7_d8zOb ww1_s8ACu) 4# of {
                  __DEFAULT ->
                    case readWideCharOffAddr# @ RealWorld dt_d8zO4 ww_s8ACq w_s8ACn of
                    { (# ipv_i8rzS, ipv1_i8rzT #) ->
                    case touch#
                           @ 'LiftedRep
                           @ GHC.ForeignPtr.ForeignPtrContents
                           dt1_d8zO5
                           ipv_i8rzS
                    of s'_i8rzV
                    { __DEFAULT ->
                    let {
                      x_s8A8R [Dmd=<S,U>] :: Int#
                      [LclId]
                      x_s8A8R = ord# ipv1_i8rzT } in
                    case <=# 55296# x_s8A8R of {
                      __DEFAULT ->
                        case <=# 56320# x_s8A8R of {
                          __DEFAULT ->
                            case writeWord8OffAddr#
                                   @ RealWorld
                                   (plusAddr# dt5_d8zO9 ww1_s8ACu)
                                   0#
                                   (narrow8Word# (int2Word# (uncheckedIShiftRA# x_s8A8R 24#)))
                                   s'_i8rzV
                            of s2_i8rGp
                            { __DEFAULT ->
                            case touch#
                                   @ 'LiftedRep
                                   @ GHC.ForeignPtr.ForeignPtrContents
                                   dt6_d8zOa
                                   s2_i8rGp
                            of s'1_i8rGq
                            { __DEFAULT ->
                            case writeWord8OffAddr#
                                   @ RealWorld
                                   (plusAddr# dt5_d8zO9 (+# ww1_s8ACu 1#))
                                   0#
                                   (narrow8Word# (int2Word# (uncheckedIShiftRA# x_s8A8R 16#)))
                                   s'1_i8rGq
                            of s1_X8rKM
                            { __DEFAULT ->
                            case touch#
                                   @ 'LiftedRep
                                   @ GHC.ForeignPtr.ForeignPtrContents
                                   dt6_d8zOa
                                   s1_X8rKM
                            of s'2_X8rKQ
                            { __DEFAULT ->
                            case writeWord8OffAddr#
                                   @ RealWorld
                                   (plusAddr# dt5_d8zO9 (+# ww1_s8ACu 2#))
                                   0#
                                   (narrow8Word# (int2Word# (uncheckedIShiftRA# x_s8A8R 8#)))
                                   s'2_X8rKQ
                            of s3_X8rKZ
                            { __DEFAULT ->
                            case touch#
                                   @ 'LiftedRep
                                   @ GHC.ForeignPtr.ForeignPtrContents
                                   dt6_d8zOa
                                   s3_X8rKZ
                            of s'3_X8rL3
                            { __DEFAULT ->
                            case writeWord8OffAddr#
                                   @ RealWorld
                                   (plusAddr# dt5_d8zO9 (+# ww1_s8ACu 3#))
                                   0#
                                   (narrow8Word# (int2Word# x_s8A8R))
                                   s'3_X8rL3
                            of s4_X8rL9
                            { __DEFAULT ->
                            case touch#
                                   @ 'LiftedRep
                                   @ GHC.ForeignPtr.ForeignPtrContents
                                   dt6_d8zOa
                                   s4_X8rL9
                            of s'4_X8rLd
                            { __DEFAULT ->
                            jump $wloop_s8ACw (+# ww_s8ACq 1#) (+# ww1_s8ACu 4#) s'4_X8rLd
                            }
                            }
                            }
                            }
                            }
                            }
                            }
                            };
                          1# ->
                            case <=# x_s8A8R 57343# of {
                              __DEFAULT ->
                                case writeWord8OffAddr#
                                       @ RealWorld
                                       (plusAddr# dt5_d8zO9 ww1_s8ACu)
                                       0#
                                       (narrow8Word# (int2Word# (uncheckedIShiftRA# x_s8A8R 24#)))
                                       s'_i8rzV
                                of s2_i8rGp
                                { __DEFAULT ->
                                case touch#
                                       @ 'LiftedRep
                                       @ GHC.ForeignPtr.ForeignPtrContents
                                       dt6_d8zOa
                                       s2_i8rGp
                                of s'1_i8rGq
                                { __DEFAULT ->
                                case writeWord8OffAddr#
                                       @ RealWorld
                                       (plusAddr# dt5_d8zO9 (+# ww1_s8ACu 1#))
                                       0#
                                       (narrow8Word# (int2Word# (uncheckedIShiftRA# x_s8A8R 16#)))
                                       s'1_i8rGq
                                of s1_X8rKM
                                { __DEFAULT ->
                                case touch#
                                       @ 'LiftedRep
                                       @ GHC.ForeignPtr.ForeignPtrContents
                                       dt6_d8zOa
                                       s1_X8rKM
                                of s'2_X8rKQ
                                { __DEFAULT ->
                                case writeWord8OffAddr#
                                       @ RealWorld
                                       (plusAddr# dt5_d8zO9 (+# ww1_s8ACu 2#))
                                       0#
                                       (narrow8Word# (int2Word# (uncheckedIShiftRA# x_s8A8R 8#)))
                                       s'2_X8rKQ
                                of s3_X8rKZ
                                { __DEFAULT ->
                                case touch#
                                       @ 'LiftedRep
                                       @ GHC.ForeignPtr.ForeignPtrContents
                                       dt6_d8zOa
                                       s3_X8rKZ
                                of s'3_X8rL3
                                { __DEFAULT ->
                                case writeWord8OffAddr#
                                       @ RealWorld
                                       (plusAddr# dt5_d8zO9 (+# ww1_s8ACu 3#))
                                       0#
                                       (narrow8Word# (int2Word# x_s8A8R))
                                       s'3_X8rL3
                                of s4_X8rL9
                                { __DEFAULT ->
                                case touch#
                                       @ 'LiftedRep
                                       @ GHC.ForeignPtr.ForeignPtrContents
                                       dt6_d8zOa
                                       s4_X8rL9
                                of s'4_X8rLd
                                { __DEFAULT ->
                                jump $wloop_s8ACw (+# ww_s8ACq 1#) (+# ww1_s8ACu 4#) s'4_X8rLd
                                }
                                }
                                }
                                }
                                }
                                }
                                }
                                };
                              1# -> jump exit_X1u ww_s8ACq ww1_s8ACu s'_i8rzV
                            }
                        };
                      1# ->
                        case <=# x_s8A8R 56319# of {
                          __DEFAULT ->
                            case <=# 56320# x_s8A8R of {
                              __DEFAULT ->
                                case writeWord8OffAddr#
                                       @ RealWorld
                                       (plusAddr# dt5_d8zO9 ww1_s8ACu)
                                       0#
                                       (narrow8Word# (int2Word# (uncheckedIShiftRA# x_s8A8R 24#)))
                                       s'_i8rzV
                                of s2_i8rGp
                                { __DEFAULT ->
                                case touch#
                                       @ 'LiftedRep
                                       @ GHC.ForeignPtr.ForeignPtrContents
                                       dt6_d8zOa
                                       s2_i8rGp
                                of s'1_i8rGq
                                { __DEFAULT ->
                                case writeWord8OffAddr#
                                       @ RealWorld
                                       (plusAddr# dt5_d8zO9 (+# ww1_s8ACu 1#))
                                       0#
                                       (narrow8Word# (int2Word# (uncheckedIShiftRA# x_s8A8R 16#)))
                                       s'1_i8rGq
                                of s1_X8rKM
                                { __DEFAULT ->
                                case touch#
                                       @ 'LiftedRep
                                       @ GHC.ForeignPtr.ForeignPtrContents
                                       dt6_d8zOa
                                       s1_X8rKM
                                of s'2_X8rKQ
                                { __DEFAULT ->
                                case writeWord8OffAddr#
                                       @ RealWorld
                                       (plusAddr# dt5_d8zO9 (+# ww1_s8ACu 2#))
                                       0#
                                       (narrow8Word# (int2Word# (uncheckedIShiftRA# x_s8A8R 8#)))
                                       s'2_X8rKQ
                                of s3_X8rKZ
                                { __DEFAULT ->
                                case touch#
                                       @ 'LiftedRep
                                       @ GHC.ForeignPtr.ForeignPtrContents
                                       dt6_d8zOa
                                       s3_X8rKZ
                                of s'3_X8rL3
                                { __DEFAULT ->
                                case writeWord8OffAddr#
                                       @ RealWorld
                                       (plusAddr# dt5_d8zO9 (+# ww1_s8ACu 3#))
                                       0#
                                       (narrow8Word# (int2Word# x_s8A8R))
                                       s'3_X8rL3
                                of s4_X8rL9
                                { __DEFAULT ->
                                case touch#
                                       @ 'LiftedRep
                                       @ GHC.ForeignPtr.ForeignPtrContents
                                       dt6_d8zOa
                                       s4_X8rL9
                                of s'4_X8rLd
                                { __DEFAULT ->
                                jump $wloop_s8ACw (+# ww_s8ACq 1#) (+# ww1_s8ACu 4#) s'4_X8rLd
                                }
                                }
                                }
                                }
                                }
                                }
                                }
                                };
                              1# ->
                                case <=# x_s8A8R 57343# of {
                                  __DEFAULT ->
                                    case writeWord8OffAddr#
                                           @ RealWorld
                                           (plusAddr# dt5_d8zO9 ww1_s8ACu)
                                           0#
                                           (narrow8Word#
                                              (int2Word# (uncheckedIShiftRA# x_s8A8R 24#)))
                                           s'_i8rzV
                                    of s2_i8rGp
                                    { __DEFAULT ->
                                    case touch#
                                           @ 'LiftedRep
                                           @ GHC.ForeignPtr.ForeignPtrContents
                                           dt6_d8zOa
                                           s2_i8rGp
                                    of s'1_i8rGq
                                    { __DEFAULT ->
                                    case writeWord8OffAddr#
                                           @ RealWorld
                                           (plusAddr# dt5_d8zO9 (+# ww1_s8ACu 1#))
                                           0#
                                           (narrow8Word#
                                              (int2Word# (uncheckedIShiftRA# x_s8A8R 16#)))
                                           s'1_i8rGq
                                    of s1_X8rKM
                                    { __DEFAULT ->
                                    case touch#
                                           @ 'LiftedRep
                                           @ GHC.ForeignPtr.ForeignPtrContents
                                           dt6_d8zOa
                                           s1_X8rKM
                                    of s'2_X8rKQ
                                    { __DEFAULT ->
                                    case writeWord8OffAddr#
                                           @ RealWorld
                                           (plusAddr# dt5_d8zO9 (+# ww1_s8ACu 2#))
                                           0#
                                           (narrow8Word#
                                              (int2Word# (uncheckedIShiftRA# x_s8A8R 8#)))
                                           s'2_X8rKQ
                                    of s3_X8rKZ
                                    { __DEFAULT ->
                                    case touch#
                                           @ 'LiftedRep
                                           @ GHC.ForeignPtr.ForeignPtrContents
                                           dt6_d8zOa
                                           s3_X8rKZ
                                    of s'3_X8rL3
                                    { __DEFAULT ->
                                    case writeWord8OffAddr#
                                           @ RealWorld
                                           (plusAddr# dt5_d8zO9 (+# ww1_s8ACu 3#))
                                           0#
                                           (narrow8Word# (int2Word# x_s8A8R))
                                           s'3_X8rL3
                                    of s4_X8rL9
                                    { __DEFAULT ->
                                    case touch#
                                           @ 'LiftedRep
                                           @ GHC.ForeignPtr.ForeignPtrContents
                                           dt6_d8zOa
                                           s4_X8rL9
                                    of s'4_X8rLd
                                    { __DEFAULT ->
                                    jump $wloop_s8ACw (+# ww_s8ACq 1#) (+# ww1_s8ACu 4#) s'4_X8rLd
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                    };
                                  1# -> jump exit1_X1w ww_s8ACq ww1_s8ACu s'_i8rzV
                                }
                            };
                          1# -> jump exit2_X1v ww_s8ACq ww1_s8ACu s'_i8rzV
                        }
                    }
                    }
                    };
                  1# -> jump exit3_X1p ww_s8ACq ww1_s8ACu w_s8ACn
                };
              1# -> jump exit4_X2O ww_s8ACq ww1_s8ACu w_s8ACn
            }; } in
      jump $wloop_s8ACw dt3_d8zO7 dt9_d8zOd eta_B1
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 14, joins: 0/0}
utf32be_encode :: EncodeBuffer
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSS),1*U(U,U,U,U,U,U)><S(LLLLLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Encoding.UTF32.mkUTF1
               `cast` (<Buffer Char>_R
                       ->_R <Buffer Word8>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <(CodingProgress, Buffer Char, Buffer Word8)>_R)
                       :: (Buffer Char
                           -> Buffer Word8
                           -> State# RealWorld
                           -> (# State# RealWorld,
                                 (CodingProgress, Buffer Char, Buffer Word8) #) :: *)
                          ~R# (Buffer Char
                               -> Buffer Word8
                               -> IO (CodingProgress, Buffer Char, Buffer Word8) :: *))}]
utf32be_encode
  = GHC.IO.Encoding.UTF32.mkUTF1
    `cast` (<Buffer Char>_R
            ->_R <Buffer Word8>_R
            ->_R Sym (GHC.Types.N:IO[0]
                          <(CodingProgress, Buffer Char, Buffer Word8)>_R)
            :: (Buffer Char
                -> Buffer Word8
                -> State# RealWorld
                -> (# State# RealWorld,
                      (CodingProgress, Buffer Char, Buffer Word8) #) :: *)
               ~R# (Buffer Char
                    -> Buffer Word8
                    -> IO (CodingProgress, Buffer Char, Buffer Word8) :: *))

-- RHS size: {terms: 285, types: 273, coercions: 0, joins: 5/8}
GHC.IO.Encoding.UTF32.mkUTF3
  :: Buffer Word8
     -> Buffer Char
     -> State# RealWorld
     -> (# State# RealWorld,
           (CodingProgress, Buffer Word8, Buffer Char) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 20 0] 423 0}]
GHC.IO.Encoding.UTF32.mkUTF3
  = \ (input_a8zj0 :: Buffer Word8)
      (output_a8zj4 :: Buffer Char)
      (eta_B1 :: State# RealWorld) ->
      case input_a8zj0 of
      { Buffer dt_d8zOt dt1_d8zOu ds_d8zJu dt2_d8zOv dt3_d8zOw
               dt4_d8zOx ->
      case output_a8zj4 of
      { Buffer dt5_d8zOy dt6_d8zOz ds1_d8zJz dt7_d8zOA dt8_d8zOB
               dt9_d8zOC ->
      let {
        lvl5_s8A6F :: Buffer Word8
        [LclId, Unf=OtherCon []]
        lvl5_s8A6F
          = GHC.IO.Buffer.Buffer
              @ Word8 dt_d8zOt dt1_d8zOu ds_d8zJu dt2_d8zOv 0# 0# } in
      join {
        exit_X1m [Dmd=<L,C(C1(C1(U(U,U))))>]
          :: Int#
             -> Int#
             -> State# RealWorld
             -> (# State# RealWorld,
                   (CodingProgress, Buffer Word8, Buffer Char) #)
        [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>]
        exit_X1m (ww_s8ACX [OS=OneShot] :: Int#)
                 (ww1_s8AD1 [OS=OneShot] :: Int#)
                 (w_s8ACU [OS=OneShot] :: State# RealWorld)
          = (# w_s8ACU,
               (GHC.IO.Encoding.Types.InputUnderflow,
                case ==# ww_s8ACX dt4_d8zOx of {
                  __DEFAULT ->
                    GHC.IO.Buffer.Buffer
                      @ Word8 dt_d8zOt dt1_d8zOu ds_d8zJu dt2_d8zOv ww_s8ACX dt4_d8zOx;
                  1# -> lvl5_s8A6F
                },
                GHC.IO.Buffer.Buffer
                  @ Char
                  dt5_d8zOy
                  dt6_d8zOz
                  ds1_d8zJz
                  dt7_d8zOA
                  dt8_d8zOB
                  ww1_s8AD1) #) } in
      join {
        exit1_X2I [Dmd=<L,C(C1(C1(U(U,U))))>]
          :: Int#
             -> Int#
             -> State# RealWorld
             -> (# State# RealWorld,
                   (CodingProgress, Buffer Word8, Buffer Char) #)
        [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>]
        exit1_X2I (ww_s8ACX [OS=OneShot] :: Int#)
                  (ww1_s8AD1 [OS=OneShot] :: Int#)
                  (w_s8ACU [OS=OneShot] :: State# RealWorld)
          = (# w_s8ACU,
               (GHC.IO.Encoding.Types.OutputUnderflow,
                case ==# ww_s8ACX dt4_d8zOx of {
                  __DEFAULT ->
                    GHC.IO.Buffer.Buffer
                      @ Word8 dt_d8zOt dt1_d8zOu ds_d8zJu dt2_d8zOv ww_s8ACX dt4_d8zOx;
                  1# -> lvl5_s8A6F
                },
                GHC.IO.Buffer.Buffer
                  @ Char
                  dt5_d8zOy
                  dt6_d8zOz
                  ds1_d8zJz
                  dt7_d8zOA
                  dt8_d8zOB
                  ww1_s8AD1) #) } in
      joinrec {
        $wloop_s8AD3 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
          :: Int#
             -> Int#
             -> State# RealWorld
             -> (# State# RealWorld,
                   (CodingProgress, Buffer Word8, Buffer Char) #)
        [LclId[JoinId(3)], Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []]
        $wloop_s8AD3 (ww_s8ACX :: Int#)
                     (ww1_s8AD1 :: Int#)
                     (w_s8ACU :: State# RealWorld)
          = case >=# ww1_s8AD1 dt7_d8zOA of {
              __DEFAULT ->
                case <# (-# dt4_d8zOx ww_s8ACX) 4# of {
                  __DEFAULT ->
                    case readWord8OffAddr#
                           @ RealWorld (plusAddr# dt_d8zOt ww_s8ACX) 0# w_s8ACU
                    of
                    { (# ipv_i8rFz, ipv1_i8rFA #) ->
                    case touch#
                           @ 'LiftedRep
                           @ GHC.ForeignPtr.ForeignPtrContents
                           dt1_d8zOu
                           ipv_i8rFz
                    of s'_i8rFC
                    { __DEFAULT ->
                    case readWord8OffAddr#
                           @ RealWorld (plusAddr# dt_d8zOt (+# ww_s8ACX 1#)) 0# s'_i8rFC
                    of
                    { (# ipv2_X8rJD, ipv3_X8rJF #) ->
                    case touch#
                           @ 'LiftedRep
                           @ GHC.ForeignPtr.ForeignPtrContents
                           dt1_d8zOu
                           ipv2_X8rJD
                    of s'1_X8rJJ
                    { __DEFAULT ->
                    case readWord8OffAddr#
                           @ RealWorld (plusAddr# dt_d8zOt (+# ww_s8ACX 2#)) 0# s'1_X8rJJ
                    of
                    { (# ipv4_X8rJN, ipv5_X8rJP #) ->
                    case touch#
                           @ 'LiftedRep
                           @ GHC.ForeignPtr.ForeignPtrContents
                           dt1_d8zOu
                           ipv4_X8rJN
                    of s'2_X8rJT
                    { __DEFAULT ->
                    case readWord8OffAddr#
                           @ RealWorld (plusAddr# dt_d8zOt (+# ww_s8ACX 3#)) 0# s'2_X8rJT
                    of
                    { (# ipv6_X8rJX, ipv7_X8rJZ #) ->
                    case touch#
                           @ 'LiftedRep
                           @ GHC.ForeignPtr.ForeignPtrContents
                           dt1_d8zOu
                           ipv6_X8rJX
                    of s'3_X8rK3
                    { __DEFAULT ->
                    let {
                      x1_s8A9H [Dmd=<S,U>] :: Char#
                      [LclId]
                      x1_s8A9H
                        = chr#
                            (+#
                               (+#
                                  (+#
                                     (uncheckedIShiftL# (word2Int# ipv7_X8rJZ) 24#)
                                     (uncheckedIShiftL# (word2Int# ipv5_X8rJP) 16#))
                                  (uncheckedIShiftL# (word2Int# ipv3_X8rJF) 8#))
                               (word2Int# ipv1_i8rFA)) } in
                    let {
                      x2_s8A9I [Dmd=<S,U>] :: Int#
                      [LclId]
                      x2_s8A9I = ord# x1_s8A9H } in
                    join {
                      $j_s8A9N [Dmd=<L,1*U(U,U)>]
                        :: (# State# RealWorld,
                              (CodingProgress, Buffer Word8, Buffer Char) #)
                      [LclId[JoinId(0)]]
                      $j_s8A9N
                        = case writeWideCharOffAddr#
                                 @ RealWorld dt5_d8zOy ww1_s8AD1 x1_s8A9H s'3_X8rK3
                          of s2_i8ryS
                          { __DEFAULT ->
                          case touch#
                                 @ 'LiftedRep @ GHC.ForeignPtr.ForeignPtrContents dt6_d8zOz s2_i8ryS
                          of s'4_i8ryT
                          { __DEFAULT ->
                          jump $wloop_s8AD3 (+# ww_s8ACX 4#) (+# ww1_s8AD1 1#) s'4_i8ryT
                          }
                          } } in
                    join {
                      $j1_s8A9k [Dmd=<L,1*U(U,U)>]
                        :: (# State# RealWorld,
                              (CodingProgress, Buffer Word8, Buffer Char) #)
                      [LclId[JoinId(0)]]
                      $j1_s8A9k
                        = case ># x2_s8A9I 57343# of {
                            __DEFAULT ->
                              (# s'3_X8rK3,
                                 (GHC.IO.Encoding.Types.InvalidSequence,
                                  case ==# ww_s8ACX dt4_d8zOx of {
                                    __DEFAULT ->
                                      GHC.IO.Buffer.Buffer
                                        @ Word8
                                        dt_d8zOt
                                        dt1_d8zOu
                                        ds_d8zJu
                                        dt2_d8zOv
                                        ww_s8ACX
                                        dt4_d8zOx;
                                    1# -> lvl5_s8A6F
                                  },
                                  GHC.IO.Buffer.Buffer
                                    @ Char
                                    dt5_d8zOy
                                    dt6_d8zOz
                                    ds1_d8zJz
                                    dt7_d8zOA
                                    dt8_d8zOB
                                    ww1_s8AD1) #);
                            1# ->
                              case <=# x2_s8A9I 1114111# of {
                                __DEFAULT ->
                                  (# s'3_X8rK3,
                                     (GHC.IO.Encoding.Types.InvalidSequence,
                                      case ==# ww_s8ACX dt4_d8zOx of {
                                        __DEFAULT ->
                                          GHC.IO.Buffer.Buffer
                                            @ Word8
                                            dt_d8zOt
                                            dt1_d8zOu
                                            ds_d8zJu
                                            dt2_d8zOv
                                            ww_s8ACX
                                            dt4_d8zOx;
                                        1# -> lvl5_s8A6F
                                      },
                                      GHC.IO.Buffer.Buffer
                                        @ Char
                                        dt5_d8zOy
                                        dt6_d8zOz
                                        ds1_d8zJz
                                        dt7_d8zOA
                                        dt8_d8zOB
                                        ww1_s8AD1) #);
                                1# -> jump $j_s8A9N
                              }
                          } } in
                    case >=# x2_s8A9I 0# of {
                      __DEFAULT -> jump $j1_s8A9k;
                      1# ->
                        case <# x2_s8A9I 55296# of {
                          __DEFAULT -> jump $j1_s8A9k;
                          1# -> jump $j_s8A9N
                        }
                    }
                    }
                    }
                    }
                    }
                    }
                    }
                    }
                    };
                  1# -> jump exit_X1m ww_s8ACX ww1_s8AD1 w_s8ACU
                };
              1# -> jump exit1_X2I ww_s8ACX ww1_s8AD1 w_s8ACU
            }; } in
      jump $wloop_s8AD3 dt3_d8zOw dt9_d8zOC eta_B1
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 14, joins: 0/0}
utf32le_decode :: DecodeBuffer
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Encoding.UTF32.mkUTF3
               `cast` (<Buffer Word8>_R
                       ->_R <Buffer Char>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <(CodingProgress, Buffer Word8, Buffer Char)>_R)
                       :: (Buffer Word8
                           -> Buffer Char
                           -> State# RealWorld
                           -> (# State# RealWorld,
                                 (CodingProgress, Buffer Word8, Buffer Char) #) :: *)
                          ~R# (Buffer Word8
                               -> Buffer Char
                               -> IO (CodingProgress, Buffer Word8, Buffer Char) :: *))}]
utf32le_decode
  = GHC.IO.Encoding.UTF32.mkUTF3
    `cast` (<Buffer Word8>_R
            ->_R <Buffer Char>_R
            ->_R Sym (GHC.Types.N:IO[0]
                          <(CodingProgress, Buffer Word8, Buffer Char)>_R)
            :: (Buffer Word8
                -> Buffer Char
                -> State# RealWorld
                -> (# State# RealWorld,
                      (CodingProgress, Buffer Word8, Buffer Char) #) :: *)
               ~R# (Buffer Word8
                    -> Buffer Char
                    -> IO (CodingProgress, Buffer Word8, Buffer Char) :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.UTF32.mkUTF32le3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Encoding.UTF32.mkUTF32le3 = "UTF-32LE"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.UTF32.mkUTF32le2 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.UTF32.mkUTF32le2
  = unpackCString# GHC.IO.Encoding.UTF32.mkUTF32le3

-- RHS size: {terms: 4, types: 9, coercions: 0, joins: 0/0}
GHC.IO.Encoding.UTF32.mkUTF2
  :: State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (s_X7IBD [Occ=Once] :: State# RealWorld) ->
                 (# s_X7IBD, GHC.Tuple.() #)}]
GHC.IO.Encoding.UTF32.mkUTF2
  = \ (s_X7IBD :: State# RealWorld) -> (# s_X7IBD, GHC.Tuple.() #)

-- RHS size: {terms: 5, types: 10, coercions: 0, joins: 0/0}
GHC.IO.Encoding.UTF32.mkUTF32be1
  :: () -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead] (eta_B1 [Occ=Once] :: State# RealWorld) ->
                 (# eta_B1, GHC.Tuple.() #)}]
GHC.IO.Encoding.UTF32.mkUTF32be1
  = \ _ [Occ=Dead] (eta_B1 :: State# RealWorld) ->
      (# eta_B1, GHC.Tuple.() #)

-- RHS size: {terms: 23, types: 33, coercions: 88, joins: 0/0}
mkUTF32le :: CodingFailureMode -> TextEncoding
[GblId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (cfm_a8ziB :: CodingFailureMode) ->
                 GHC.IO.Encoding.Types.TextEncoding
                   @ ()
                   @ ()
                   GHC.IO.Encoding.UTF32.mkUTF32le2
                   ((\ (s_i7IAV [Occ=Once] :: State# RealWorld) ->
                       (# s_i7IAV,
                          GHC.IO.Encoding.Types.BufferCodec
                            @ Word8
                            @ Char
                            @ ()
                            (GHC.IO.Encoding.UTF32.mkUTF3
                             `cast` (<Buffer Word8>_R
                                     ->_R <Buffer Char>_R
                                     ->_R Sym (GHC.Types.N:IO[0]
                                                   <(CodingProgress, Buffer Word8, Buffer Char)>_R)
                                     :: (Buffer Word8
                                         -> Buffer Char
                                         -> State# RealWorld
                                         -> (# State# RealWorld,
                                               (CodingProgress, Buffer Word8, Buffer Char) #) :: *)
                                        ~R# (Buffer Word8
                                             -> Buffer Char
                                             -> IO
                                                  (CodingProgress, Buffer Word8,
                                                   Buffer Char) :: *)))
                            ((GHC.IO.Encoding.Failure.recoverDecode1 cfm_a8ziB)
                             `cast` (<Buffer Word8>_R
                                     ->_R <Buffer Char>_R
                                     ->_R Sym (GHC.Types.N:IO[0] <(Buffer Word8, Buffer Char)>_R)
                                     :: (Buffer Word8
                                         -> Buffer Char
                                         -> State# RealWorld
                                         -> (# State# RealWorld,
                                               (Buffer Word8, Buffer Char) #) :: *)
                                        ~R# (Buffer Word8
                                             -> Buffer Char
                                             -> IO (Buffer Word8, Buffer Char) :: *)))
                            (GHC.IO.Encoding.UTF32.mkUTF2
                             `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                                     :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                                        ~R# (IO () :: *)))
                            (GHC.IO.Encoding.UTF32.mkUTF2
                             `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                                     :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                                        ~R# (IO () :: *)))
                            (GHC.IO.Encoding.UTF32.mkUTF32be1
                             `cast` (<()>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                     :: (() -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                                        ~R# (() -> IO () :: *))) #))
                    `cast` (Sym (GHC.Types.N:IO[0] <BufferCodec Word8 Char ()>_R)
                            :: (State# RealWorld
                                -> (# State# RealWorld, BufferCodec Word8 Char () #) :: *)
                               ~R# (IO (BufferCodec Word8 Char ()) :: *)))
                   ((\ (s_i7IAV [Occ=Once] :: State# RealWorld) ->
                       (# s_i7IAV,
                          GHC.IO.Encoding.Types.BufferCodec
                            @ Char
                            @ Word8
                            @ ()
                            (GHC.IO.Encoding.UTF32.mkUTF32le1
                             `cast` (<Buffer Char>_R
                                     ->_R <Buffer Word8>_R
                                     ->_R Sym (GHC.Types.N:IO[0]
                                                   <(CodingProgress, Buffer Char, Buffer Word8)>_R)
                                     :: (Buffer Char
                                         -> Buffer Word8
                                         -> State# RealWorld
                                         -> (# State# RealWorld,
                                               (CodingProgress, Buffer Char, Buffer Word8) #) :: *)
                                        ~R# (Buffer Char
                                             -> Buffer Word8
                                             -> IO
                                                  (CodingProgress, Buffer Char,
                                                   Buffer Word8) :: *)))
                            ((GHC.IO.Encoding.Failure.recoverEncode1 cfm_a8ziB)
                             `cast` (<Buffer Char>_R
                                     ->_R <Buffer Word8>_R
                                     ->_R Sym (GHC.Types.N:IO[0] <(Buffer Char, Buffer Word8)>_R)
                                     :: (Buffer Char
                                         -> Buffer Word8
                                         -> State# RealWorld
                                         -> (# State# RealWorld,
                                               (Buffer Char, Buffer Word8) #) :: *)
                                        ~R# (Buffer Char
                                             -> Buffer Word8
                                             -> IO (Buffer Char, Buffer Word8) :: *)))
                            (GHC.IO.Encoding.UTF32.mkUTF2
                             `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                                     :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                                        ~R# (IO () :: *)))
                            (GHC.IO.Encoding.UTF32.mkUTF2
                             `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                                     :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                                        ~R# (IO () :: *)))
                            (GHC.IO.Encoding.UTF32.mkUTF32be1
                             `cast` (<()>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                     :: (() -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                                        ~R# (() -> IO () :: *))) #))
                    `cast` (Sym (GHC.Types.N:IO[0] <BufferCodec Char Word8 ()>_R)
                            :: (State# RealWorld
                                -> (# State# RealWorld, BufferCodec Char Word8 () #) :: *)
                               ~R# (IO (BufferCodec Char Word8 ()) :: *)))}]
mkUTF32le
  = \ (cfm_a8ziB :: CodingFailureMode) ->
      GHC.IO.Encoding.Types.TextEncoding
        @ ()
        @ ()
        GHC.IO.Encoding.UTF32.mkUTF32le2
        ((\ (s_i7IAV :: State# RealWorld) ->
            (# s_i7IAV,
               GHC.IO.Encoding.Types.BufferCodec
                 @ Word8
                 @ Char
                 @ ()
                 (GHC.IO.Encoding.UTF32.mkUTF3
                  `cast` (<Buffer Word8>_R
                          ->_R <Buffer Char>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <(CodingProgress, Buffer Word8, Buffer Char)>_R)
                          :: (Buffer Word8
                              -> Buffer Char
                              -> State# RealWorld
                              -> (# State# RealWorld,
                                    (CodingProgress, Buffer Word8, Buffer Char) #) :: *)
                             ~R# (Buffer Word8
                                  -> Buffer Char
                                  -> IO (CodingProgress, Buffer Word8, Buffer Char) :: *)))
                 ((GHC.IO.Encoding.Failure.recoverDecode1 cfm_a8ziB)
                  `cast` (<Buffer Word8>_R
                          ->_R <Buffer Char>_R
                          ->_R Sym (GHC.Types.N:IO[0] <(Buffer Word8, Buffer Char)>_R)
                          :: (Buffer Word8
                              -> Buffer Char
                              -> State# RealWorld
                              -> (# State# RealWorld, (Buffer Word8, Buffer Char) #) :: *)
                             ~R# (Buffer Word8
                                  -> Buffer Char -> IO (Buffer Word8, Buffer Char) :: *)))
                 (GHC.IO.Encoding.UTF32.mkUTF2
                  `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                          :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                             ~R# (IO () :: *)))
                 (GHC.IO.Encoding.UTF32.mkUTF2
                  `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                          :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                             ~R# (IO () :: *)))
                 (GHC.IO.Encoding.UTF32.mkUTF32be1
                  `cast` (<()>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                          :: (() -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                             ~R# (() -> IO () :: *))) #))
         `cast` (Sym (GHC.Types.N:IO[0] <BufferCodec Word8 Char ()>_R)
                 :: (State# RealWorld
                     -> (# State# RealWorld, BufferCodec Word8 Char () #) :: *)
                    ~R# (IO (BufferCodec Word8 Char ()) :: *)))
        ((\ (s_i7IAV :: State# RealWorld) ->
            (# s_i7IAV,
               GHC.IO.Encoding.Types.BufferCodec
                 @ Char
                 @ Word8
                 @ ()
                 (GHC.IO.Encoding.UTF32.mkUTF32le1
                  `cast` (<Buffer Char>_R
                          ->_R <Buffer Word8>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <(CodingProgress, Buffer Char, Buffer Word8)>_R)
                          :: (Buffer Char
                              -> Buffer Word8
                              -> State# RealWorld
                              -> (# State# RealWorld,
                                    (CodingProgress, Buffer Char, Buffer Word8) #) :: *)
                             ~R# (Buffer Char
                                  -> Buffer Word8
                                  -> IO (CodingProgress, Buffer Char, Buffer Word8) :: *)))
                 ((GHC.IO.Encoding.Failure.recoverEncode1 cfm_a8ziB)
                  `cast` (<Buffer Char>_R
                          ->_R <Buffer Word8>_R
                          ->_R Sym (GHC.Types.N:IO[0] <(Buffer Char, Buffer Word8)>_R)
                          :: (Buffer Char
                              -> Buffer Word8
                              -> State# RealWorld
                              -> (# State# RealWorld, (Buffer Char, Buffer Word8) #) :: *)
                             ~R# (Buffer Char
                                  -> Buffer Word8 -> IO (Buffer Char, Buffer Word8) :: *)))
                 (GHC.IO.Encoding.UTF32.mkUTF2
                  `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                          :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                             ~R# (IO () :: *)))
                 (GHC.IO.Encoding.UTF32.mkUTF2
                  `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                          :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                             ~R# (IO () :: *)))
                 (GHC.IO.Encoding.UTF32.mkUTF32be1
                  `cast` (<()>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                          :: (() -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                             ~R# (() -> IO () :: *))) #))
         `cast` (Sym (GHC.Types.N:IO[0] <BufferCodec Char Word8 ()>_R)
                 :: (State# RealWorld
                     -> (# State# RealWorld, BufferCodec Char Word8 () #) :: *)
                    ~R# (IO (BufferCodec Char Word8 ()) :: *)))

-- RHS size: {terms: 12, types: 28, coercions: 0, joins: 0/0}
lvl_r8AWo
  :: Buffer Word8
     -> Buffer Char
     -> State# RealWorld
     -> (# State# RealWorld, (Buffer Word8, Buffer Char) #)
[GblId, Arity=3, Str=<B,1*H><B,1*H><B,U>x, Unf=OtherCon []]
lvl_r8AWo
  = \ (input_a8rqp :: Buffer Word8)
      (output_a8rqs :: Buffer Char)
      (eta_B1 :: State# RealWorld) ->
      case input_a8rqp of
      { Buffer dt_d8rDh dt1_d8rDi ds_d8rCu dt2_d8rDj dt3_d8rDk
               dt4_d8rDl ->
      case output_a8rqs of
      { Buffer dt5_d8rDm dt6_d8rDn ds1_d8rCz dt7_d8rDo dt8_d8rDp
               dt9_d8rDq ->
      raiseIO#
        @ GHC.Exception.SomeException
        @ (Buffer Word8, Buffer Char)
        GHC.IO.Encoding.Failure.recoverDecode2
        eta_B1
      }
      }

-- RHS size: {terms: 6, types: 3, coercions: 38, joins: 0/0}
lvl1_r8AWp :: BufferCodec Word8 Char ()
[GblId, Str=m, Unf=OtherCon []]
lvl1_r8AWp
  = GHC.IO.Encoding.Types.BufferCodec
      @ Word8
      @ Char
      @ ()
      (GHC.IO.Encoding.UTF32.mkUTF3
       `cast` (<Buffer Word8>_R
               ->_R <Buffer Char>_R
               ->_R Sym (GHC.Types.N:IO[0]
                             <(CodingProgress, Buffer Word8, Buffer Char)>_R)
               :: (Buffer Word8
                   -> Buffer Char
                   -> State# RealWorld
                   -> (# State# RealWorld,
                         (CodingProgress, Buffer Word8, Buffer Char) #) :: *)
                  ~R# (Buffer Word8
                       -> Buffer Char
                       -> IO (CodingProgress, Buffer Word8, Buffer Char) :: *)))
      (lvl_r8AWo
       `cast` (<Buffer Word8>_R
               ->_R <Buffer Char>_R
               ->_R Sym (GHC.Types.N:IO[0] <(Buffer Word8, Buffer Char)>_R)
               :: (Buffer Word8
                   -> Buffer Char
                   -> State# RealWorld
                   -> (# State# RealWorld, (Buffer Word8, Buffer Char) #) :: *)
                  ~R# (Buffer Word8
                       -> Buffer Char -> IO (Buffer Word8, Buffer Char) :: *)))
      (GHC.IO.Encoding.UTF32.mkUTF2
       `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
               :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                  ~R# (IO () :: *)))
      (GHC.IO.Encoding.UTF32.mkUTF2
       `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
               :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                  ~R# (IO () :: *)))
      (GHC.IO.Encoding.UTF32.mkUTF32be1
       `cast` (<()>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (() -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                  ~R# (() -> IO () :: *)))

-- RHS size: {terms: 4, types: 12, coercions: 0, joins: 0/0}
GHC.IO.Encoding.UTF32.utf32le2
  :: State# RealWorld
     -> (# State# RealWorld, BufferCodec Word8 Char () #)
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (s_i7IAV [Occ=Once] :: State# RealWorld) ->
                 (# s_i7IAV,
                    GHC.IO.Encoding.Types.BufferCodec
                      @ Word8
                      @ Char
                      @ ()
                      (GHC.IO.Encoding.UTF32.mkUTF3
                       `cast` (<Buffer Word8>_R
                               ->_R <Buffer Char>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <(CodingProgress, Buffer Word8, Buffer Char)>_R)
                               :: (Buffer Word8
                                   -> Buffer Char
                                   -> State# RealWorld
                                   -> (# State# RealWorld,
                                         (CodingProgress, Buffer Word8, Buffer Char) #) :: *)
                                  ~R# (Buffer Word8
                                       -> Buffer Char
                                       -> IO (CodingProgress, Buffer Word8, Buffer Char) :: *)))
                      ((GHC.IO.Encoding.Failure.recoverDecode1
                          GHC.IO.Encoding.Failure.ErrorOnCodingFailure)
                       `cast` (<Buffer Word8>_R
                               ->_R <Buffer Char>_R
                               ->_R Sym (GHC.Types.N:IO[0] <(Buffer Word8, Buffer Char)>_R)
                               :: (Buffer Word8
                                   -> Buffer Char
                                   -> State# RealWorld
                                   -> (# State# RealWorld, (Buffer Word8, Buffer Char) #) :: *)
                                  ~R# (Buffer Word8
                                       -> Buffer Char -> IO (Buffer Word8, Buffer Char) :: *)))
                      ((\ (s1_X7IBD [Occ=Once] :: State# RealWorld) ->
                          (# s1_X7IBD, GHC.Tuple.() #))
                       `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                               :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                                  ~R# (IO () :: *)))
                      ((\ (s1_X7IBD [Occ=Once] :: State# RealWorld) ->
                          (# s1_X7IBD, GHC.Tuple.() #))
                       `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                               :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                                  ~R# (IO () :: *)))
                      ((\ _ [Occ=Dead] (eta_B1 [Occ=Once] :: State# RealWorld) ->
                          (# eta_B1, GHC.Tuple.() #))
                       `cast` (<()>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                               :: (() -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                                  ~R# (() -> IO () :: *))) #)}]
GHC.IO.Encoding.UTF32.utf32le2
  = \ (s_i7IAV :: State# RealWorld) -> (# s_i7IAV, lvl1_r8AWp #)

-- RHS size: {terms: 23, types: 44, coercions: 0, joins: 0/0}
GHC.IO.Encoding.UTF32.utf32be2
  :: Buffer Char
     -> Buffer Word8
     -> State# RealWorld
     -> (# State# RealWorld, (Buffer Char, Buffer Word8) #)
[GblId,
 Arity=3,
 Str=<B,1*U(U,U,A,A,U,A)><B,1*H><B,U>x,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (input_a8rqz [Occ=Once!] :: Buffer Char)
                 (output_a8rqC [Occ=Once!] :: Buffer Word8)
                 (eta_B1 [Occ=Once] :: State# RealWorld) ->
                 case input_a8rqz of
                 { Buffer dt_d8rCN [Occ=Once] dt1_d8rCO [Occ=Once] _ [Occ=Dead]
                          _ [Occ=Dead] dt3_d8rCQ [Occ=Once] _ [Occ=Dead] ->
                 case output_a8rqC of
                 { Buffer _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                          _ [Occ=Dead] _ [Occ=Dead] ->
                 case readWideCharOffAddr# @ RealWorld dt_d8rCN dt3_d8rCQ eta_B1 of
                 { (# ipv_i8rzS [Occ=Once], _ [Occ=Dead] #) ->
                 case touch#
                        @ 'LiftedRep
                        @ GHC.ForeignPtr.ForeignPtrContents
                        dt1_d8rCO
                        ipv_i8rzS
                 of s'_i8rzV
                 { __DEFAULT ->
                 raiseIO#
                   @ GHC.Exception.SomeException
                   @ (Buffer Char, Buffer Word8)
                   GHC.IO.Encoding.Failure.recoverEncode2
                   s'_i8rzV
                 }
                 }
                 }
                 }}]
GHC.IO.Encoding.UTF32.utf32be2
  = \ (input_a8rqz :: Buffer Char)
      (output_a8rqC :: Buffer Word8)
      (eta_B1 :: State# RealWorld) ->
      case input_a8rqz of
      { Buffer dt_d8rCN dt1_d8rCO ds_d8rAn dt2_d8rCP dt3_d8rCQ
               dt4_d8rCR ->
      case output_a8rqC of
      { Buffer dt5_d8rCS dt6_d8rCT ds1_d8rAs dt7_d8rCU dt8_d8rCV
               dt9_d8rCW ->
      case readWideCharOffAddr# @ RealWorld dt_d8rCN dt3_d8rCQ eta_B1 of
      { (# ipv_i8rzS, ipv1_i8rzT #) ->
      case touch#
             @ 'LiftedRep
             @ GHC.ForeignPtr.ForeignPtrContents
             dt1_d8rCO
             ipv_i8rzS
      of s'_i8rzV
      { __DEFAULT ->
      raiseIO#
        @ GHC.Exception.SomeException
        @ (Buffer Char, Buffer Word8)
        GHC.IO.Encoding.Failure.recoverEncode2
        s'_i8rzV
      }
      }
      }
      }

-- RHS size: {terms: 6, types: 3, coercions: 38, joins: 0/0}
lvl2_r8AWq :: BufferCodec Char Word8 ()
[GblId, Str=m, Unf=OtherCon []]
lvl2_r8AWq
  = GHC.IO.Encoding.Types.BufferCodec
      @ Char
      @ Word8
      @ ()
      (GHC.IO.Encoding.UTF32.mkUTF32le1
       `cast` (<Buffer Char>_R
               ->_R <Buffer Word8>_R
               ->_R Sym (GHC.Types.N:IO[0]
                             <(CodingProgress, Buffer Char, Buffer Word8)>_R)
               :: (Buffer Char
                   -> Buffer Word8
                   -> State# RealWorld
                   -> (# State# RealWorld,
                         (CodingProgress, Buffer Char, Buffer Word8) #) :: *)
                  ~R# (Buffer Char
                       -> Buffer Word8
                       -> IO (CodingProgress, Buffer Char, Buffer Word8) :: *)))
      (GHC.IO.Encoding.UTF32.utf32be2
       `cast` (<Buffer Char>_R
               ->_R <Buffer Word8>_R
               ->_R Sym (GHC.Types.N:IO[0] <(Buffer Char, Buffer Word8)>_R)
               :: (Buffer Char
                   -> Buffer Word8
                   -> State# RealWorld
                   -> (# State# RealWorld, (Buffer Char, Buffer Word8) #) :: *)
                  ~R# (Buffer Char
                       -> Buffer Word8 -> IO (Buffer Char, Buffer Word8) :: *)))
      (GHC.IO.Encoding.UTF32.mkUTF2
       `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
               :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                  ~R# (IO () :: *)))
      (GHC.IO.Encoding.UTF32.mkUTF2
       `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
               :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                  ~R# (IO () :: *)))
      (GHC.IO.Encoding.UTF32.mkUTF32be1
       `cast` (<()>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (() -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                  ~R# (() -> IO () :: *)))

-- RHS size: {terms: 4, types: 12, coercions: 0, joins: 0/0}
GHC.IO.Encoding.UTF32.utf32le1
  :: State# RealWorld
     -> (# State# RealWorld, BufferCodec Char Word8 () #)
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (s_i7IAV [Occ=Once] :: State# RealWorld) ->
                 (# s_i7IAV,
                    GHC.IO.Encoding.Types.BufferCodec
                      @ Char
                      @ Word8
                      @ ()
                      (GHC.IO.Encoding.UTF32.mkUTF32le1
                       `cast` (<Buffer Char>_R
                               ->_R <Buffer Word8>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <(CodingProgress, Buffer Char, Buffer Word8)>_R)
                               :: (Buffer Char
                                   -> Buffer Word8
                                   -> State# RealWorld
                                   -> (# State# RealWorld,
                                         (CodingProgress, Buffer Char, Buffer Word8) #) :: *)
                                  ~R# (Buffer Char
                                       -> Buffer Word8
                                       -> IO (CodingProgress, Buffer Char, Buffer Word8) :: *)))
                      (GHC.IO.Encoding.UTF32.utf32be2
                       `cast` (<Buffer Char>_R
                               ->_R <Buffer Word8>_R
                               ->_R Sym (GHC.Types.N:IO[0] <(Buffer Char, Buffer Word8)>_R)
                               :: (Buffer Char
                                   -> Buffer Word8
                                   -> State# RealWorld
                                   -> (# State# RealWorld, (Buffer Char, Buffer Word8) #) :: *)
                                  ~R# (Buffer Char
                                       -> Buffer Word8 -> IO (Buffer Char, Buffer Word8) :: *)))
                      ((\ (s1_X7IBD [Occ=Once] :: State# RealWorld) ->
                          (# s1_X7IBD, GHC.Tuple.() #))
                       `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                               :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                                  ~R# (IO () :: *)))
                      ((\ (s1_X7IBD [Occ=Once] :: State# RealWorld) ->
                          (# s1_X7IBD, GHC.Tuple.() #))
                       `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                               :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                                  ~R# (IO () :: *)))
                      ((\ _ [Occ=Dead] (eta_B1 [Occ=Once] :: State# RealWorld) ->
                          (# eta_B1, GHC.Tuple.() #))
                       `cast` (<()>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                               :: (() -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                                  ~R# (() -> IO () :: *))) #)}]
GHC.IO.Encoding.UTF32.utf32le1
  = \ (s_i7IAV :: State# RealWorld) -> (# s_i7IAV, lvl2_r8AWq #)

-- RHS size: {terms: 4, types: 2, coercions: 12, joins: 0/0}
utf32le :: TextEncoding
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 40}]
utf32le
  = GHC.IO.Encoding.Types.TextEncoding
      @ ()
      @ ()
      GHC.IO.Encoding.UTF32.mkUTF32le2
      (GHC.IO.Encoding.UTF32.utf32le2
       `cast` (Sym (GHC.Types.N:IO[0] <BufferCodec Word8 Char ()>_R)
               :: (State# RealWorld
                   -> (# State# RealWorld, BufferCodec Word8 Char () #) :: *)
                  ~R# (IO (BufferCodec Word8 Char ()) :: *)))
      (GHC.IO.Encoding.UTF32.utf32le1
       `cast` (Sym (GHC.Types.N:IO[0] <BufferCodec Char Word8 ()>_R)
               :: (State# RealWorld
                   -> (# State# RealWorld, BufferCodec Char Word8 () #) :: *)
                  ~R# (IO (BufferCodec Char Word8 ()) :: *)))

-- RHS size: {terms: 285, types: 273, coercions: 0, joins: 5/8}
GHC.IO.Encoding.UTF32.mkUTF5
  :: Buffer Word8
     -> Buffer Char
     -> State# RealWorld
     -> (# State# RealWorld,
           (CodingProgress, Buffer Word8, Buffer Char) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 20 0] 423 0}]
GHC.IO.Encoding.UTF32.mkUTF5
  = \ (input_a8ziE :: Buffer Word8)
      (output_a8ziI :: Buffer Char)
      (eta_B1 :: State# RealWorld) ->
      case input_a8ziE of
      { Buffer dt_d8zOS dt1_d8zOT ds_d8zLk dt2_d8zOU dt3_d8zOV
               dt4_d8zOW ->
      case output_a8ziI of
      { Buffer dt5_d8zOX dt6_d8zOY ds1_d8zLp dt7_d8zOZ dt8_d8zP0
               dt9_d8zP1 ->
      let {
        lvl5_s8A7k :: Buffer Word8
        [LclId, Unf=OtherCon []]
        lvl5_s8A7k
          = GHC.IO.Buffer.Buffer
              @ Word8 dt_d8zOS dt1_d8zOT ds_d8zLk dt2_d8zOU 0# 0# } in
      join {
        exit_X1m [Dmd=<L,C(C1(C1(U(U,U))))>]
          :: Int#
             -> Int#
             -> State# RealWorld
             -> (# State# RealWorld,
                   (CodingProgress, Buffer Word8, Buffer Char) #)
        [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>]
        exit_X1m (ww_s8ADu [OS=OneShot] :: Int#)
                 (ww1_s8ADy [OS=OneShot] :: Int#)
                 (w_s8ADr [OS=OneShot] :: State# RealWorld)
          = (# w_s8ADr,
               (GHC.IO.Encoding.Types.InputUnderflow,
                case ==# ww_s8ADu dt4_d8zOW of {
                  __DEFAULT ->
                    GHC.IO.Buffer.Buffer
                      @ Word8 dt_d8zOS dt1_d8zOT ds_d8zLk dt2_d8zOU ww_s8ADu dt4_d8zOW;
                  1# -> lvl5_s8A7k
                },
                GHC.IO.Buffer.Buffer
                  @ Char
                  dt5_d8zOX
                  dt6_d8zOY
                  ds1_d8zLp
                  dt7_d8zOZ
                  dt8_d8zP0
                  ww1_s8ADy) #) } in
      join {
        exit1_X2I [Dmd=<L,C(C1(C1(U(U,U))))>]
          :: Int#
             -> Int#
             -> State# RealWorld
             -> (# State# RealWorld,
                   (CodingProgress, Buffer Word8, Buffer Char) #)
        [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>]
        exit1_X2I (ww_s8ADu [OS=OneShot] :: Int#)
                  (ww1_s8ADy [OS=OneShot] :: Int#)
                  (w_s8ADr [OS=OneShot] :: State# RealWorld)
          = (# w_s8ADr,
               (GHC.IO.Encoding.Types.OutputUnderflow,
                case ==# ww_s8ADu dt4_d8zOW of {
                  __DEFAULT ->
                    GHC.IO.Buffer.Buffer
                      @ Word8 dt_d8zOS dt1_d8zOT ds_d8zLk dt2_d8zOU ww_s8ADu dt4_d8zOW;
                  1# -> lvl5_s8A7k
                },
                GHC.IO.Buffer.Buffer
                  @ Char
                  dt5_d8zOX
                  dt6_d8zOY
                  ds1_d8zLp
                  dt7_d8zOZ
                  dt8_d8zP0
                  ww1_s8ADy) #) } in
      joinrec {
        $wloop_s8ADA [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
          :: Int#
             -> Int#
             -> State# RealWorld
             -> (# State# RealWorld,
                   (CodingProgress, Buffer Word8, Buffer Char) #)
        [LclId[JoinId(3)], Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []]
        $wloop_s8ADA (ww_s8ADu :: Int#)
                     (ww1_s8ADy :: Int#)
                     (w_s8ADr :: State# RealWorld)
          = case >=# ww1_s8ADy dt7_d8zOZ of {
              __DEFAULT ->
                case <# (-# dt4_d8zOW ww_s8ADu) 4# of {
                  __DEFAULT ->
                    case readWord8OffAddr#
                           @ RealWorld (plusAddr# dt_d8zOS ww_s8ADu) 0# w_s8ADr
                    of
                    { (# ipv_i8rFz, ipv1_i8rFA #) ->
                    case touch#
                           @ 'LiftedRep
                           @ GHC.ForeignPtr.ForeignPtrContents
                           dt1_d8zOT
                           ipv_i8rFz
                    of s'_i8rFC
                    { __DEFAULT ->
                    case readWord8OffAddr#
                           @ RealWorld (plusAddr# dt_d8zOS (+# ww_s8ADu 1#)) 0# s'_i8rFC
                    of
                    { (# ipv2_X8rJY, ipv3_X8rK0 #) ->
                    case touch#
                           @ 'LiftedRep
                           @ GHC.ForeignPtr.ForeignPtrContents
                           dt1_d8zOT
                           ipv2_X8rJY
                    of s'1_X8rK4
                    { __DEFAULT ->
                    case readWord8OffAddr#
                           @ RealWorld (plusAddr# dt_d8zOS (+# ww_s8ADu 2#)) 0# s'1_X8rK4
                    of
                    { (# ipv4_X8rK8, ipv5_X8rKa #) ->
                    case touch#
                           @ 'LiftedRep
                           @ GHC.ForeignPtr.ForeignPtrContents
                           dt1_d8zOT
                           ipv4_X8rK8
                    of s'2_X8rKe
                    { __DEFAULT ->
                    case readWord8OffAddr#
                           @ RealWorld (plusAddr# dt_d8zOS (+# ww_s8ADu 3#)) 0# s'2_X8rKe
                    of
                    { (# ipv6_X8rKi, ipv7_X8rKk #) ->
                    case touch#
                           @ 'LiftedRep
                           @ GHC.ForeignPtr.ForeignPtrContents
                           dt1_d8zOT
                           ipv6_X8rKi
                    of s'3_X8rKo
                    { __DEFAULT ->
                    let {
                      x1_s8Aaj [Dmd=<S,U>] :: Char#
                      [LclId]
                      x1_s8Aaj
                        = chr#
                            (+#
                               (+#
                                  (+#
                                     (uncheckedIShiftL# (word2Int# ipv1_i8rFA) 24#)
                                     (uncheckedIShiftL# (word2Int# ipv3_X8rK0) 16#))
                                  (uncheckedIShiftL# (word2Int# ipv5_X8rKa) 8#))
                               (word2Int# ipv7_X8rKk)) } in
                    let {
                      x2_s8Aak [Dmd=<S,U>] :: Int#
                      [LclId]
                      x2_s8Aak = ord# x1_s8Aaj } in
                    join {
                      $j_s8Aap [Dmd=<L,1*U(U,U)>]
                        :: (# State# RealWorld,
                              (CodingProgress, Buffer Word8, Buffer Char) #)
                      [LclId[JoinId(0)]]
                      $j_s8Aap
                        = case writeWideCharOffAddr#
                                 @ RealWorld dt5_d8zOX ww1_s8ADy x1_s8Aaj s'3_X8rKo
                          of s2_i8ryS
                          { __DEFAULT ->
                          case touch#
                                 @ 'LiftedRep @ GHC.ForeignPtr.ForeignPtrContents dt6_d8zOY s2_i8ryS
                          of s'4_i8ryT
                          { __DEFAULT ->
                          jump $wloop_s8ADA (+# ww_s8ADu 4#) (+# ww1_s8ADy 1#) s'4_i8ryT
                          }
                          } } in
                    join {
                      $j1_s8A9k [Dmd=<L,1*U(U,U)>]
                        :: (# State# RealWorld,
                              (CodingProgress, Buffer Word8, Buffer Char) #)
                      [LclId[JoinId(0)]]
                      $j1_s8A9k
                        = case ># x2_s8Aak 57343# of {
                            __DEFAULT ->
                              (# s'3_X8rKo,
                                 (GHC.IO.Encoding.Types.InvalidSequence,
                                  case ==# ww_s8ADu dt4_d8zOW of {
                                    __DEFAULT ->
                                      GHC.IO.Buffer.Buffer
                                        @ Word8
                                        dt_d8zOS
                                        dt1_d8zOT
                                        ds_d8zLk
                                        dt2_d8zOU
                                        ww_s8ADu
                                        dt4_d8zOW;
                                    1# -> lvl5_s8A7k
                                  },
                                  GHC.IO.Buffer.Buffer
                                    @ Char
                                    dt5_d8zOX
                                    dt6_d8zOY
                                    ds1_d8zLp
                                    dt7_d8zOZ
                                    dt8_d8zP0
                                    ww1_s8ADy) #);
                            1# ->
                              case <=# x2_s8Aak 1114111# of {
                                __DEFAULT ->
                                  (# s'3_X8rKo,
                                     (GHC.IO.Encoding.Types.InvalidSequence,
                                      case ==# ww_s8ADu dt4_d8zOW of {
                                        __DEFAULT ->
                                          GHC.IO.Buffer.Buffer
                                            @ Word8
                                            dt_d8zOS
                                            dt1_d8zOT
                                            ds_d8zLk
                                            dt2_d8zOU
                                            ww_s8ADu
                                            dt4_d8zOW;
                                        1# -> lvl5_s8A7k
                                      },
                                      GHC.IO.Buffer.Buffer
                                        @ Char
                                        dt5_d8zOX
                                        dt6_d8zOY
                                        ds1_d8zLp
                                        dt7_d8zOZ
                                        dt8_d8zP0
                                        ww1_s8ADy) #);
                                1# -> jump $j_s8Aap
                              }
                          } } in
                    case >=# x2_s8Aak 0# of {
                      __DEFAULT -> jump $j1_s8A9k;
                      1# ->
                        case <# x2_s8Aak 55296# of {
                          __DEFAULT -> jump $j1_s8A9k;
                          1# -> jump $j_s8Aap
                        }
                    }
                    }
                    }
                    }
                    }
                    }
                    }
                    }
                    };
                  1# -> jump exit_X1m ww_s8ADu ww1_s8ADy w_s8ADr
                };
              1# -> jump exit1_X2I ww_s8ADu ww1_s8ADy w_s8ADr
            }; } in
      jump $wloop_s8ADA dt3_d8zOV dt9_d8zP1 eta_B1
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 14, joins: 0/0}
utf32be_decode :: DecodeBuffer
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Encoding.UTF32.mkUTF5
               `cast` (<Buffer Word8>_R
                       ->_R <Buffer Char>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <(CodingProgress, Buffer Word8, Buffer Char)>_R)
                       :: (Buffer Word8
                           -> Buffer Char
                           -> State# RealWorld
                           -> (# State# RealWorld,
                                 (CodingProgress, Buffer Word8, Buffer Char) #) :: *)
                          ~R# (Buffer Word8
                               -> Buffer Char
                               -> IO (CodingProgress, Buffer Word8, Buffer Char) :: *))}]
utf32be_decode
  = GHC.IO.Encoding.UTF32.mkUTF5
    `cast` (<Buffer Word8>_R
            ->_R <Buffer Char>_R
            ->_R Sym (GHC.Types.N:IO[0]
                          <(CodingProgress, Buffer Word8, Buffer Char)>_R)
            :: (Buffer Word8
                -> Buffer Char
                -> State# RealWorld
                -> (# State# RealWorld,
                      (CodingProgress, Buffer Word8, Buffer Char) #) :: *)
               ~R# (Buffer Word8
                    -> Buffer Char
                    -> IO (CodingProgress, Buffer Word8, Buffer Char) :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.UTF32.mkUTF32be3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Encoding.UTF32.mkUTF32be3 = "UTF-32BE"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.UTF32.mkUTF32be2 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.UTF32.mkUTF32be2
  = unpackCString# GHC.IO.Encoding.UTF32.mkUTF32be3

-- RHS size: {terms: 23, types: 33, coercions: 88, joins: 0/0}
mkUTF32be :: CodingFailureMode -> TextEncoding
[GblId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (cfm_a8ziy :: CodingFailureMode) ->
                 GHC.IO.Encoding.Types.TextEncoding
                   @ ()
                   @ ()
                   GHC.IO.Encoding.UTF32.mkUTF32be2
                   ((\ (s_i7IAV [Occ=Once] :: State# RealWorld) ->
                       (# s_i7IAV,
                          GHC.IO.Encoding.Types.BufferCodec
                            @ Word8
                            @ Char
                            @ ()
                            (GHC.IO.Encoding.UTF32.mkUTF5
                             `cast` (<Buffer Word8>_R
                                     ->_R <Buffer Char>_R
                                     ->_R Sym (GHC.Types.N:IO[0]
                                                   <(CodingProgress, Buffer Word8, Buffer Char)>_R)
                                     :: (Buffer Word8
                                         -> Buffer Char
                                         -> State# RealWorld
                                         -> (# State# RealWorld,
                                               (CodingProgress, Buffer Word8, Buffer Char) #) :: *)
                                        ~R# (Buffer Word8
                                             -> Buffer Char
                                             -> IO
                                                  (CodingProgress, Buffer Word8,
                                                   Buffer Char) :: *)))
                            ((GHC.IO.Encoding.Failure.recoverDecode1 cfm_a8ziy)
                             `cast` (<Buffer Word8>_R
                                     ->_R <Buffer Char>_R
                                     ->_R Sym (GHC.Types.N:IO[0] <(Buffer Word8, Buffer Char)>_R)
                                     :: (Buffer Word8
                                         -> Buffer Char
                                         -> State# RealWorld
                                         -> (# State# RealWorld,
                                               (Buffer Word8, Buffer Char) #) :: *)
                                        ~R# (Buffer Word8
                                             -> Buffer Char
                                             -> IO (Buffer Word8, Buffer Char) :: *)))
                            (GHC.IO.Encoding.UTF32.mkUTF2
                             `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                                     :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                                        ~R# (IO () :: *)))
                            (GHC.IO.Encoding.UTF32.mkUTF2
                             `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                                     :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                                        ~R# (IO () :: *)))
                            (GHC.IO.Encoding.UTF32.mkUTF32be1
                             `cast` (<()>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                     :: (() -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                                        ~R# (() -> IO () :: *))) #))
                    `cast` (Sym (GHC.Types.N:IO[0] <BufferCodec Word8 Char ()>_R)
                            :: (State# RealWorld
                                -> (# State# RealWorld, BufferCodec Word8 Char () #) :: *)
                               ~R# (IO (BufferCodec Word8 Char ()) :: *)))
                   ((\ (s_i7IAV [Occ=Once] :: State# RealWorld) ->
                       (# s_i7IAV,
                          GHC.IO.Encoding.Types.BufferCodec
                            @ Char
                            @ Word8
                            @ ()
                            (GHC.IO.Encoding.UTF32.mkUTF1
                             `cast` (<Buffer Char>_R
                                     ->_R <Buffer Word8>_R
                                     ->_R Sym (GHC.Types.N:IO[0]
                                                   <(CodingProgress, Buffer Char, Buffer Word8)>_R)
                                     :: (Buffer Char
                                         -> Buffer Word8
                                         -> State# RealWorld
                                         -> (# State# RealWorld,
                                               (CodingProgress, Buffer Char, Buffer Word8) #) :: *)
                                        ~R# (Buffer Char
                                             -> Buffer Word8
                                             -> IO
                                                  (CodingProgress, Buffer Char,
                                                   Buffer Word8) :: *)))
                            ((GHC.IO.Encoding.Failure.recoverEncode1 cfm_a8ziy)
                             `cast` (<Buffer Char>_R
                                     ->_R <Buffer Word8>_R
                                     ->_R Sym (GHC.Types.N:IO[0] <(Buffer Char, Buffer Word8)>_R)
                                     :: (Buffer Char
                                         -> Buffer Word8
                                         -> State# RealWorld
                                         -> (# State# RealWorld,
                                               (Buffer Char, Buffer Word8) #) :: *)
                                        ~R# (Buffer Char
                                             -> Buffer Word8
                                             -> IO (Buffer Char, Buffer Word8) :: *)))
                            (GHC.IO.Encoding.UTF32.mkUTF2
                             `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                                     :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                                        ~R# (IO () :: *)))
                            (GHC.IO.Encoding.UTF32.mkUTF2
                             `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                                     :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                                        ~R# (IO () :: *)))
                            (GHC.IO.Encoding.UTF32.mkUTF32be1
                             `cast` (<()>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                     :: (() -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                                        ~R# (() -> IO () :: *))) #))
                    `cast` (Sym (GHC.Types.N:IO[0] <BufferCodec Char Word8 ()>_R)
                            :: (State# RealWorld
                                -> (# State# RealWorld, BufferCodec Char Word8 () #) :: *)
                               ~R# (IO (BufferCodec Char Word8 ()) :: *)))}]
mkUTF32be
  = \ (cfm_a8ziy :: CodingFailureMode) ->
      GHC.IO.Encoding.Types.TextEncoding
        @ ()
        @ ()
        GHC.IO.Encoding.UTF32.mkUTF32be2
        ((\ (s_i7IAV :: State# RealWorld) ->
            (# s_i7IAV,
               GHC.IO.Encoding.Types.BufferCodec
                 @ Word8
                 @ Char
                 @ ()
                 (GHC.IO.Encoding.UTF32.mkUTF5
                  `cast` (<Buffer Word8>_R
                          ->_R <Buffer Char>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <(CodingProgress, Buffer Word8, Buffer Char)>_R)
                          :: (Buffer Word8
                              -> Buffer Char
                              -> State# RealWorld
                              -> (# State# RealWorld,
                                    (CodingProgress, Buffer Word8, Buffer Char) #) :: *)
                             ~R# (Buffer Word8
                                  -> Buffer Char
                                  -> IO (CodingProgress, Buffer Word8, Buffer Char) :: *)))
                 ((GHC.IO.Encoding.Failure.recoverDecode1 cfm_a8ziy)
                  `cast` (<Buffer Word8>_R
                          ->_R <Buffer Char>_R
                          ->_R Sym (GHC.Types.N:IO[0] <(Buffer Word8, Buffer Char)>_R)
                          :: (Buffer Word8
                              -> Buffer Char
                              -> State# RealWorld
                              -> (# State# RealWorld, (Buffer Word8, Buffer Char) #) :: *)
                             ~R# (Buffer Word8
                                  -> Buffer Char -> IO (Buffer Word8, Buffer Char) :: *)))
                 (GHC.IO.Encoding.UTF32.mkUTF2
                  `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                          :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                             ~R# (IO () :: *)))
                 (GHC.IO.Encoding.UTF32.mkUTF2
                  `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                          :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                             ~R# (IO () :: *)))
                 (GHC.IO.Encoding.UTF32.mkUTF32be1
                  `cast` (<()>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                          :: (() -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                             ~R# (() -> IO () :: *))) #))
         `cast` (Sym (GHC.Types.N:IO[0] <BufferCodec Word8 Char ()>_R)
                 :: (State# RealWorld
                     -> (# State# RealWorld, BufferCodec Word8 Char () #) :: *)
                    ~R# (IO (BufferCodec Word8 Char ()) :: *)))
        ((\ (s_i7IAV :: State# RealWorld) ->
            (# s_i7IAV,
               GHC.IO.Encoding.Types.BufferCodec
                 @ Char
                 @ Word8
                 @ ()
                 (GHC.IO.Encoding.UTF32.mkUTF1
                  `cast` (<Buffer Char>_R
                          ->_R <Buffer Word8>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <(CodingProgress, Buffer Char, Buffer Word8)>_R)
                          :: (Buffer Char
                              -> Buffer Word8
                              -> State# RealWorld
                              -> (# State# RealWorld,
                                    (CodingProgress, Buffer Char, Buffer Word8) #) :: *)
                             ~R# (Buffer Char
                                  -> Buffer Word8
                                  -> IO (CodingProgress, Buffer Char, Buffer Word8) :: *)))
                 ((GHC.IO.Encoding.Failure.recoverEncode1 cfm_a8ziy)
                  `cast` (<Buffer Char>_R
                          ->_R <Buffer Word8>_R
                          ->_R Sym (GHC.Types.N:IO[0] <(Buffer Char, Buffer Word8)>_R)
                          :: (Buffer Char
                              -> Buffer Word8
                              -> State# RealWorld
                              -> (# State# RealWorld, (Buffer Char, Buffer Word8) #) :: *)
                             ~R# (Buffer Char
                                  -> Buffer Word8 -> IO (Buffer Char, Buffer Word8) :: *)))
                 (GHC.IO.Encoding.UTF32.mkUTF2
                  `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                          :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                             ~R# (IO () :: *)))
                 (GHC.IO.Encoding.UTF32.mkUTF2
                  `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                          :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                             ~R# (IO () :: *)))
                 (GHC.IO.Encoding.UTF32.mkUTF32be1
                  `cast` (<()>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                          :: (() -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                             ~R# (() -> IO () :: *))) #))
         `cast` (Sym (GHC.Types.N:IO[0] <BufferCodec Char Word8 ()>_R)
                 :: (State# RealWorld
                     -> (# State# RealWorld, BufferCodec Char Word8 () #) :: *)
                    ~R# (IO (BufferCodec Char Word8 ()) :: *)))

-- RHS size: {terms: 6, types: 3, coercions: 38, joins: 0/0}
lvl3_r8AWr :: BufferCodec Word8 Char ()
[GblId, Str=m, Unf=OtherCon []]
lvl3_r8AWr
  = GHC.IO.Encoding.Types.BufferCodec
      @ Word8
      @ Char
      @ ()
      (GHC.IO.Encoding.UTF32.mkUTF5
       `cast` (<Buffer Word8>_R
               ->_R <Buffer Char>_R
               ->_R Sym (GHC.Types.N:IO[0]
                             <(CodingProgress, Buffer Word8, Buffer Char)>_R)
               :: (Buffer Word8
                   -> Buffer Char
                   -> State# RealWorld
                   -> (# State# RealWorld,
                         (CodingProgress, Buffer Word8, Buffer Char) #) :: *)
                  ~R# (Buffer Word8
                       -> Buffer Char
                       -> IO (CodingProgress, Buffer Word8, Buffer Char) :: *)))
      (lvl_r8AWo
       `cast` (<Buffer Word8>_R
               ->_R <Buffer Char>_R
               ->_R Sym (GHC.Types.N:IO[0] <(Buffer Word8, Buffer Char)>_R)
               :: (Buffer Word8
                   -> Buffer Char
                   -> State# RealWorld
                   -> (# State# RealWorld, (Buffer Word8, Buffer Char) #) :: *)
                  ~R# (Buffer Word8
                       -> Buffer Char -> IO (Buffer Word8, Buffer Char) :: *)))
      (GHC.IO.Encoding.UTF32.mkUTF2
       `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
               :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                  ~R# (IO () :: *)))
      (GHC.IO.Encoding.UTF32.mkUTF2
       `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
               :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                  ~R# (IO () :: *)))
      (GHC.IO.Encoding.UTF32.mkUTF32be1
       `cast` (<()>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (() -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                  ~R# (() -> IO () :: *)))

-- RHS size: {terms: 4, types: 12, coercions: 0, joins: 0/0}
GHC.IO.Encoding.UTF32.utf32be3
  :: State# RealWorld
     -> (# State# RealWorld, BufferCodec Word8 Char () #)
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (s_i7IAV [Occ=Once] :: State# RealWorld) ->
                 (# s_i7IAV,
                    GHC.IO.Encoding.Types.BufferCodec
                      @ Word8
                      @ Char
                      @ ()
                      (GHC.IO.Encoding.UTF32.mkUTF5
                       `cast` (<Buffer Word8>_R
                               ->_R <Buffer Char>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <(CodingProgress, Buffer Word8, Buffer Char)>_R)
                               :: (Buffer Word8
                                   -> Buffer Char
                                   -> State# RealWorld
                                   -> (# State# RealWorld,
                                         (CodingProgress, Buffer Word8, Buffer Char) #) :: *)
                                  ~R# (Buffer Word8
                                       -> Buffer Char
                                       -> IO (CodingProgress, Buffer Word8, Buffer Char) :: *)))
                      ((GHC.IO.Encoding.Failure.recoverDecode1
                          GHC.IO.Encoding.Failure.ErrorOnCodingFailure)
                       `cast` (<Buffer Word8>_R
                               ->_R <Buffer Char>_R
                               ->_R Sym (GHC.Types.N:IO[0] <(Buffer Word8, Buffer Char)>_R)
                               :: (Buffer Word8
                                   -> Buffer Char
                                   -> State# RealWorld
                                   -> (# State# RealWorld, (Buffer Word8, Buffer Char) #) :: *)
                                  ~R# (Buffer Word8
                                       -> Buffer Char -> IO (Buffer Word8, Buffer Char) :: *)))
                      ((\ (s1_X7IBG [Occ=Once] :: State# RealWorld) ->
                          (# s1_X7IBG, GHC.Tuple.() #))
                       `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                               :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                                  ~R# (IO () :: *)))
                      ((\ (s1_X7IBG [Occ=Once] :: State# RealWorld) ->
                          (# s1_X7IBG, GHC.Tuple.() #))
                       `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                               :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                                  ~R# (IO () :: *)))
                      ((\ _ [Occ=Dead] (eta_B1 [Occ=Once] :: State# RealWorld) ->
                          (# eta_B1, GHC.Tuple.() #))
                       `cast` (<()>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                               :: (() -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                                  ~R# (() -> IO () :: *))) #)}]
GHC.IO.Encoding.UTF32.utf32be3
  = \ (s_i7IAV :: State# RealWorld) -> (# s_i7IAV, lvl3_r8AWr #)

-- RHS size: {terms: 6, types: 3, coercions: 38, joins: 0/0}
lvl4_r8AWs :: BufferCodec Char Word8 ()
[GblId, Str=m, Unf=OtherCon []]
lvl4_r8AWs
  = GHC.IO.Encoding.Types.BufferCodec
      @ Char
      @ Word8
      @ ()
      (GHC.IO.Encoding.UTF32.mkUTF1
       `cast` (<Buffer Char>_R
               ->_R <Buffer Word8>_R
               ->_R Sym (GHC.Types.N:IO[0]
                             <(CodingProgress, Buffer Char, Buffer Word8)>_R)
               :: (Buffer Char
                   -> Buffer Word8
                   -> State# RealWorld
                   -> (# State# RealWorld,
                         (CodingProgress, Buffer Char, Buffer Word8) #) :: *)
                  ~R# (Buffer Char
                       -> Buffer Word8
                       -> IO (CodingProgress, Buffer Char, Buffer Word8) :: *)))
      (GHC.IO.Encoding.UTF32.utf32be2
       `cast` (<Buffer Char>_R
               ->_R <Buffer Word8>_R
               ->_R Sym (GHC.Types.N:IO[0] <(Buffer Char, Buffer Word8)>_R)
               :: (Buffer Char
                   -> Buffer Word8
                   -> State# RealWorld
                   -> (# State# RealWorld, (Buffer Char, Buffer Word8) #) :: *)
                  ~R# (Buffer Char
                       -> Buffer Word8 -> IO (Buffer Char, Buffer Word8) :: *)))
      (GHC.IO.Encoding.UTF32.mkUTF2
       `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
               :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                  ~R# (IO () :: *)))
      (GHC.IO.Encoding.UTF32.mkUTF2
       `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
               :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                  ~R# (IO () :: *)))
      (GHC.IO.Encoding.UTF32.mkUTF32be1
       `cast` (<()>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (() -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                  ~R# (() -> IO () :: *)))

-- RHS size: {terms: 4, types: 12, coercions: 0, joins: 0/0}
GHC.IO.Encoding.UTF32.utf32be1
  :: State# RealWorld
     -> (# State# RealWorld, BufferCodec Char Word8 () #)
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (s_i7IAV [Occ=Once] :: State# RealWorld) ->
                 (# s_i7IAV,
                    GHC.IO.Encoding.Types.BufferCodec
                      @ Char
                      @ Word8
                      @ ()
                      (GHC.IO.Encoding.UTF32.mkUTF1
                       `cast` (<Buffer Char>_R
                               ->_R <Buffer Word8>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <(CodingProgress, Buffer Char, Buffer Word8)>_R)
                               :: (Buffer Char
                                   -> Buffer Word8
                                   -> State# RealWorld
                                   -> (# State# RealWorld,
                                         (CodingProgress, Buffer Char, Buffer Word8) #) :: *)
                                  ~R# (Buffer Char
                                       -> Buffer Word8
                                       -> IO (CodingProgress, Buffer Char, Buffer Word8) :: *)))
                      (GHC.IO.Encoding.UTF32.utf32be2
                       `cast` (<Buffer Char>_R
                               ->_R <Buffer Word8>_R
                               ->_R Sym (GHC.Types.N:IO[0] <(Buffer Char, Buffer Word8)>_R)
                               :: (Buffer Char
                                   -> Buffer Word8
                                   -> State# RealWorld
                                   -> (# State# RealWorld, (Buffer Char, Buffer Word8) #) :: *)
                                  ~R# (Buffer Char
                                       -> Buffer Word8 -> IO (Buffer Char, Buffer Word8) :: *)))
                      ((\ (s1_X7IBG [Occ=Once] :: State# RealWorld) ->
                          (# s1_X7IBG, GHC.Tuple.() #))
                       `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                               :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                                  ~R# (IO () :: *)))
                      ((\ (s1_X7IBG [Occ=Once] :: State# RealWorld) ->
                          (# s1_X7IBG, GHC.Tuple.() #))
                       `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                               :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                                  ~R# (IO () :: *)))
                      ((\ _ [Occ=Dead] (eta_B1 [Occ=Once] :: State# RealWorld) ->
                          (# eta_B1, GHC.Tuple.() #))
                       `cast` (<()>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                               :: (() -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                                  ~R# (() -> IO () :: *))) #)}]
GHC.IO.Encoding.UTF32.utf32be1
  = \ (s_i7IAV :: State# RealWorld) -> (# s_i7IAV, lvl4_r8AWs #)

-- RHS size: {terms: 4, types: 2, coercions: 12, joins: 0/0}
utf32be :: TextEncoding
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 40}]
utf32be
  = GHC.IO.Encoding.Types.TextEncoding
      @ ()
      @ ()
      GHC.IO.Encoding.UTF32.mkUTF32be2
      (GHC.IO.Encoding.UTF32.utf32be3
       `cast` (Sym (GHC.Types.N:IO[0] <BufferCodec Word8 Char ()>_R)
               :: (State# RealWorld
                   -> (# State# RealWorld, BufferCodec Word8 Char () #) :: *)
                  ~R# (IO (BufferCodec Word8 Char ()) :: *)))
      (GHC.IO.Encoding.UTF32.utf32be1
       `cast` (Sym (GHC.Types.N:IO[0] <BufferCodec Char Word8 ()>_R)
               :: (State# RealWorld
                   -> (# State# RealWorld, BufferCodec Char Word8 () #) :: *)
                  ~R# (IO (BufferCodec Char Word8 ()) :: *)))

-- RHS size: {terms: 2, types: 1, coercions: 14, joins: 0/0}
GHC.IO.Encoding.UTF32.mkUTF6 :: Maybe DecodeBuffer
[GblId,
 Caf=NoCafRefs,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Encoding.UTF32.mkUTF6
  = GHC.Base.Just
      @ DecodeBuffer
      (GHC.IO.Encoding.UTF32.mkUTF5
       `cast` (<Buffer Word8>_R
               ->_R <Buffer Char>_R
               ->_R Sym (GHC.Types.N:IO[0]
                             <(CodingProgress, Buffer Word8, Buffer Char)>_R)
               :: (Buffer Word8
                   -> Buffer Char
                   -> State# RealWorld
                   -> (# State# RealWorld,
                         (CodingProgress, Buffer Word8, Buffer Char) #) :: *)
                  ~R# (Buffer Word8
                       -> Buffer Char
                       -> IO (CodingProgress, Buffer Word8, Buffer Char) :: *)))

-- RHS size: {terms: 2, types: 1, coercions: 14, joins: 0/0}
GHC.IO.Encoding.UTF32.mkUTF4 :: Maybe DecodeBuffer
[GblId,
 Caf=NoCafRefs,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Encoding.UTF32.mkUTF4
  = GHC.Base.Just
      @ DecodeBuffer
      (GHC.IO.Encoding.UTF32.mkUTF3
       `cast` (<Buffer Word8>_R
               ->_R <Buffer Char>_R
               ->_R Sym (GHC.Types.N:IO[0]
                             <(CodingProgress, Buffer Word8, Buffer Char)>_R)
               :: (Buffer Word8
                   -> Buffer Char
                   -> State# RealWorld
                   -> (# State# RealWorld,
                         (CodingProgress, Buffer Word8, Buffer Char) #) :: *)
                  ~R# (Buffer Word8
                       -> Buffer Char
                       -> IO (CodingProgress, Buffer Word8, Buffer Char) :: *)))

-- RHS size: {terms: 243, types: 174, coercions: 7, joins: 1/1}
GHC.IO.Encoding.UTF32.$wutf32_decode [InlPrag=NOUSERINLINE[0]]
  :: MutVar# RealWorld (Maybe DecodeBuffer)
     -> Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> BufferState
     -> Int#
     -> Int#
     -> Int#
     -> Buffer Char
     -> State# RealWorld
     -> (# State# RealWorld,
           (CodingProgress, Buffer Word8, Buffer Char) #)
[GblId,
 Arity=9,
 Caf=NoCafRefs,
 Str=<S,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U(U,U,U,U,U,U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 0 0 0 0 0 0 0] 548 30}]
GHC.IO.Encoding.UTF32.$wutf32_decode
  = \ (ww_s8AE2 :: MutVar# RealWorld (Maybe DecodeBuffer))
      (ww1_s8AE6 :: Addr#)
      (ww2_s8AE7 :: GHC.ForeignPtr.ForeignPtrContents)
      (ww3_s8AE8 :: BufferState)
      (ww4_s8AE9 :: Int#)
      (ww5_s8AEa :: Int#)
      (ww6_s8AEb :: Int#)
      (w_s8ADY :: Buffer Char)
      (w1_s8ADZ :: State# RealWorld) ->
      case readMutVar#
             @ RealWorld @ (Maybe DecodeBuffer) ww_s8AE2 w1_s8ADZ
      of
      { (# ipv_i7IAy, ipv1_i7IAz #) ->
      case ipv1_i7IAz of {
        Nothing ->
          case <# (-# ww6_s8AEb ww5_s8AEa) 4# of {
            __DEFAULT ->
              case readWord8OffAddr#
                     @ RealWorld (plusAddr# ww1_s8AE6 ww5_s8AEa) 0# ipv_i7IAy
              of
              { (# ipv2_i8rFz, ipv3_i8rFA #) ->
              case touch#
                     @ 'LiftedRep
                     @ GHC.ForeignPtr.ForeignPtrContents
                     ww2_s8AE7
                     ipv2_i8rFz
              of s'_i8rFC
              { __DEFAULT ->
              case readWord8OffAddr#
                     @ RealWorld (plusAddr# ww1_s8AE6 (+# ww5_s8AEa 1#)) 0# s'_i8rFC
              of
              { (# ipv4_X8rJw, ipv5_X8rJy #) ->
              case touch#
                     @ 'LiftedRep
                     @ GHC.ForeignPtr.ForeignPtrContents
                     ww2_s8AE7
                     ipv4_X8rJw
              of s'1_X8rJC
              { __DEFAULT ->
              case readWord8OffAddr#
                     @ RealWorld (plusAddr# ww1_s8AE6 (+# ww5_s8AEa 2#)) 0# s'1_X8rJC
              of
              { (# ipv6_X8rJH, ipv7_X8rJJ #) ->
              case touch#
                     @ 'LiftedRep
                     @ GHC.ForeignPtr.ForeignPtrContents
                     ww2_s8AE7
                     ipv6_X8rJH
              of s'2_X8rJN
              { __DEFAULT ->
              case readWord8OffAddr#
                     @ RealWorld (plusAddr# ww1_s8AE6 (+# ww5_s8AEa 3#)) 0# s'2_X8rJN
              of
              { (# ipv8_X8rJS, ipv9_X8rJU #) ->
              case touch#
                     @ 'LiftedRep
                     @ GHC.ForeignPtr.ForeignPtrContents
                     ww2_s8AE7
                     ipv8_X8rJS
              of s'3_X8rJY
              { __DEFAULT ->
              join {
                $j_s8AaX [Dmd=<L,1*U(U,U)>]
                  :: (# State# RealWorld,
                        (CodingProgress, Buffer Word8, Buffer Char) #)
                [LclId[JoinId(0)]]
                $j_s8AaX
                  = case ipv3_i8rFA of {
                      __DEFAULT ->
                        case writeMutVar#
                               @ RealWorld
                               @ (Maybe DecodeBuffer)
                               ww_s8AE2
                               GHC.IO.Encoding.UTF32.mkUTF6
                               s'3_X8rJY
                        of s2#_i7IBe
                        { __DEFAULT ->
                        GHC.IO.Encoding.UTF32.mkUTF5
                          (GHC.IO.Buffer.Buffer
                             @ Word8
                             ww1_s8AE6
                             ww2_s8AE7
                             ww3_s8AE8
                             ww4_s8AE9
                             ww5_s8AEa
                             ww6_s8AEb)
                          w_s8ADY
                          s2#_i7IBe
                        };
                      255## ->
                        case ipv5_X8rJy of {
                          __DEFAULT ->
                            case writeMutVar#
                                   @ RealWorld
                                   @ (Maybe DecodeBuffer)
                                   ww_s8AE2
                                   GHC.IO.Encoding.UTF32.mkUTF6
                                   s'3_X8rJY
                            of s2#_i7IBe
                            { __DEFAULT ->
                            GHC.IO.Encoding.UTF32.mkUTF5
                              (GHC.IO.Buffer.Buffer
                                 @ Word8
                                 ww1_s8AE6
                                 ww2_s8AE7
                                 ww3_s8AE8
                                 ww4_s8AE9
                                 ww5_s8AEa
                                 ww6_s8AEb)
                              w_s8ADY
                              s2#_i7IBe
                            };
                          254## ->
                            case ipv7_X8rJJ of {
                              __DEFAULT ->
                                case writeMutVar#
                                       @ RealWorld
                                       @ (Maybe DecodeBuffer)
                                       ww_s8AE2
                                       GHC.IO.Encoding.UTF32.mkUTF6
                                       s'3_X8rJY
                                of s2#_i7IBe
                                { __DEFAULT ->
                                GHC.IO.Encoding.UTF32.mkUTF5
                                  (GHC.IO.Buffer.Buffer
                                     @ Word8
                                     ww1_s8AE6
                                     ww2_s8AE7
                                     ww3_s8AE8
                                     ww4_s8AE9
                                     ww5_s8AEa
                                     ww6_s8AEb)
                                  w_s8ADY
                                  s2#_i7IBe
                                };
                              0## ->
                                case ipv9_X8rJU of {
                                  __DEFAULT ->
                                    case writeMutVar#
                                           @ RealWorld
                                           @ (Maybe DecodeBuffer)
                                           ww_s8AE2
                                           GHC.IO.Encoding.UTF32.mkUTF6
                                           s'3_X8rJY
                                    of s2#_i7IBe
                                    { __DEFAULT ->
                                    GHC.IO.Encoding.UTF32.mkUTF5
                                      (GHC.IO.Buffer.Buffer
                                         @ Word8
                                         ww1_s8AE6
                                         ww2_s8AE7
                                         ww3_s8AE8
                                         ww4_s8AE9
                                         ww5_s8AEa
                                         ww6_s8AEb)
                                      w_s8ADY
                                      s2#_i7IBe
                                    };
                                  0## ->
                                    case writeMutVar#
                                           @ RealWorld
                                           @ (Maybe DecodeBuffer)
                                           ww_s8AE2
                                           GHC.IO.Encoding.UTF32.mkUTF4
                                           s'3_X8rJY
                                    of s2#_i7IBe
                                    { __DEFAULT ->
                                    GHC.IO.Encoding.UTF32.mkUTF3
                                      (GHC.IO.Buffer.Buffer
                                         @ Word8
                                         ww1_s8AE6
                                         ww2_s8AE7
                                         ww3_s8AE8
                                         ww4_s8AE9
                                         (+# ww5_s8AEa 4#)
                                         ww6_s8AEb)
                                      w_s8ADY
                                      s2#_i7IBe
                                    }
                                }
                            }
                        }
                    } } in
              case ipv3_i8rFA of {
                __DEFAULT -> jump $j_s8AaX;
                0## ->
                  case ipv5_X8rJy of {
                    __DEFAULT -> jump $j_s8AaX;
                    0## ->
                      case ipv7_X8rJJ of {
                        __DEFAULT -> jump $j_s8AaX;
                        254## ->
                          case ipv9_X8rJU of {
                            __DEFAULT -> jump $j_s8AaX;
                            255## ->
                              case writeMutVar#
                                     @ RealWorld
                                     @ (Maybe DecodeBuffer)
                                     ww_s8AE2
                                     GHC.IO.Encoding.UTF32.mkUTF6
                                     s'3_X8rJY
                              of s2#_i7IBe
                              { __DEFAULT ->
                              GHC.IO.Encoding.UTF32.mkUTF5
                                (GHC.IO.Buffer.Buffer
                                   @ Word8
                                   ww1_s8AE6
                                   ww2_s8AE7
                                   ww3_s8AE8
                                   ww4_s8AE9
                                   (+# ww5_s8AEa 4#)
                                   ww6_s8AEb)
                                w_s8ADY
                                s2#_i7IBe
                              }
                          }
                      }
                  }
              }
              }
              }
              }
              }
              }
              }
              }
              };
            1# ->
              (# ipv_i7IAy,
                 (GHC.IO.Encoding.Types.InputUnderflow,
                  GHC.IO.Buffer.Buffer
                    @ Word8
                    ww1_s8AE6
                    ww2_s8AE7
                    ww3_s8AE8
                    ww4_s8AE9
                    ww5_s8AEa
                    ww6_s8AEb,
                  w_s8ADY) #)
          };
        Just decode_a8zit ->
          ((decode_a8zit
              (GHC.IO.Buffer.Buffer
                 @ Word8
                 ww1_s8AE6
                 ww2_s8AE7
                 ww3_s8AE8
                 ww4_s8AE9
                 ww5_s8AEa
                 ww6_s8AEb)
              w_s8ADY)
           `cast` (GHC.Types.N:IO[0]
                       <(CodingProgress, Buffer Word8, Buffer Char)>_R
                   :: (IO (CodingProgress, Buffer Word8, Buffer Char) :: *)
                      ~R# (State# RealWorld
                           -> (# State# RealWorld,
                                 (CodingProgress, Buffer Word8, Buffer Char) #) :: *)))
            ipv_i7IAy
      }
      }

-- RHS size: {terms: 20, types: 25, coercions: 3, joins: 0/0}
GHC.IO.Encoding.UTF32.utf32_decode1 [InlPrag=NOUSERINLINE[0]]
  :: IORef (Maybe DecodeBuffer)
     -> Buffer Word8
     -> Buffer Char
     -> State# RealWorld
     -> (# State# RealWorld,
           (CodingProgress, Buffer Word8, Buffer Char) #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(SLLSSS),1*U(U,U,U,U,U,U)><L,U(U,U,U,U,U,U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8ADW [Occ=Once] :: IORef (Maybe DecodeBuffer))
                 (w1_s8ADX [Occ=Once!] :: Buffer Word8)
                 (w2_s8ADY [Occ=Once] :: Buffer Char)
                 (w3_s8ADZ [Occ=Once] :: State# RealWorld) ->
                 case w_s8ADW
                      `cast` (GHC.IORef.N:IORef[0] <Maybe DecodeBuffer>_N
                              :: (IORef (Maybe DecodeBuffer) :: *)
                                 ~R# (GHC.STRef.STRef RealWorld (Maybe DecodeBuffer) :: *))
                 of
                 { GHC.STRef.STRef ww1_s8AE2 [Occ=Once] ->
                 case w1_s8ADX of
                 { Buffer ww3_s8AE6 [Occ=Once] ww4_s8AE7 [Occ=Once]
                          ww5_s8AE8 [Occ=Once] ww6_s8AE9 [Occ=Once] ww7_s8AEa [Occ=Once]
                          ww8_s8AEb [Occ=Once] ->
                 GHC.IO.Encoding.UTF32.$wutf32_decode
                   ww1_s8AE2
                   ww3_s8AE6
                   ww4_s8AE7
                   ww5_s8AE8
                   ww6_s8AE9
                   ww7_s8AEa
                   ww8_s8AEb
                   w2_s8ADY
                   w3_s8ADZ
                 }
                 }}]
GHC.IO.Encoding.UTF32.utf32_decode1
  = \ (w_s8ADW :: IORef (Maybe DecodeBuffer))
      (w1_s8ADX :: Buffer Word8)
      (w2_s8ADY :: Buffer Char)
      (w3_s8ADZ :: State# RealWorld) ->
      case w_s8ADW
           `cast` (GHC.IORef.N:IORef[0] <Maybe DecodeBuffer>_N
                   :: (IORef (Maybe DecodeBuffer) :: *)
                      ~R# (GHC.STRef.STRef RealWorld (Maybe DecodeBuffer) :: *))
      of
      { GHC.STRef.STRef ww1_s8AE2 ->
      case w1_s8ADX of
      { Buffer ww3_s8AE6 ww4_s8AE7 ww5_s8AE8 ww6_s8AE9 ww7_s8AEa
               ww8_s8AEb ->
      GHC.IO.Encoding.UTF32.$wutf32_decode
        ww1_s8AE2
        ww3_s8AE6
        ww4_s8AE7
        ww5_s8AE8
        ww6_s8AE9
        ww7_s8AEa
        ww8_s8AEb
        w2_s8ADY
        w3_s8ADZ
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 18, joins: 0/0}
utf32_decode :: IORef (Maybe DecodeBuffer) -> DecodeBuffer
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(SLLSSS),1*U(U,U,U,U,U,U)><L,U(U,U,U,U,U,U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Encoding.UTF32.utf32_decode1
               `cast` (<IORef (Maybe DecodeBuffer)>_R
                       ->_R <Buffer Word8>_R
                       ->_R <Buffer Char>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <(CodingProgress, Buffer Word8, Buffer Char)>_R)
                       :: (IORef (Maybe DecodeBuffer)
                           -> Buffer Word8
                           -> Buffer Char
                           -> State# RealWorld
                           -> (# State# RealWorld,
                                 (CodingProgress, Buffer Word8, Buffer Char) #) :: *)
                          ~R# (IORef (Maybe DecodeBuffer)
                               -> Buffer Word8
                               -> Buffer Char
                               -> IO (CodingProgress, Buffer Word8, Buffer Char) :: *))}]
utf32_decode
  = GHC.IO.Encoding.UTF32.utf32_decode1
    `cast` (<IORef (Maybe DecodeBuffer)>_R
            ->_R <Buffer Word8>_R
            ->_R <Buffer Char>_R
            ->_R Sym (GHC.Types.N:IO[0]
                          <(CodingProgress, Buffer Word8, Buffer Char)>_R)
            :: (IORef (Maybe DecodeBuffer)
                -> Buffer Word8
                -> Buffer Char
                -> State# RealWorld
                -> (# State# RealWorld,
                      (CodingProgress, Buffer Word8, Buffer Char) #) :: *)
               ~R# (IORef (Maybe DecodeBuffer)
                    -> Buffer Word8
                    -> Buffer Char
                    -> IO (CodingProgress, Buffer Word8, Buffer Char) :: *))

-- RHS size: {terms: 128, types: 80, coercions: 0, joins: 0/0}
GHC.IO.Encoding.UTF32.$wutf32_encode [InlPrag=NOUSERINLINE[0]]
  :: MutVar# RealWorld Bool
     -> Buffer Char
     -> Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> BufferState
     -> Int#
     -> Int#
     -> Int#
     -> State# RealWorld
     -> (# State# RealWorld,
           (CodingProgress, Buffer Char, Buffer Word8) #)
[GblId,
 Arity=9,
 Caf=NoCafRefs,
 Str=<S,U><L,U(U,U,U,U,U,U)><L,U><L,U><L,U><S,U><L,U><S,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 0 0 0 0 0 0 0] 159 30}]
GHC.IO.Encoding.UTF32.$wutf32_encode
  = \ (ww_s8AEk :: MutVar# RealWorld Bool)
      (w_s8AEf :: Buffer Char)
      (ww1_s8AEo :: Addr#)
      (ww2_s8AEp :: GHC.ForeignPtr.ForeignPtrContents)
      (ww3_s8AEq :: BufferState)
      (ww4_s8AEr :: Int#)
      (ww5_s8AEs :: Int#)
      (ww6_s8AEt :: Int#)
      (w1_s8AEh :: State# RealWorld) ->
      case readMutVar# @ RealWorld @ Bool ww_s8AEk w1_s8AEh of
      { (# ipv_i7IAy, ipv1_i7IAz #) ->
      case ipv1_i7IAz of {
        False ->
          case <# (-# ww4_s8AEr ww6_s8AEt) 4# of {
            __DEFAULT ->
              case writeMutVar#
                     @ RealWorld @ Bool ww_s8AEk GHC.Types.True ipv_i7IAy
              of s2#_i7IBe
              { __DEFAULT ->
              case writeWord8OffAddr#
                     @ RealWorld (plusAddr# ww1_s8AEo ww6_s8AEt) 0# 0## s2#_i7IBe
              of s2_i8rGp
              { __DEFAULT ->
              case touch#
                     @ 'LiftedRep @ GHC.ForeignPtr.ForeignPtrContents ww2_s8AEp s2_i8rGp
              of s'_i8rGq
              { __DEFAULT ->
              case writeWord8OffAddr#
                     @ RealWorld (plusAddr# ww1_s8AEo (+# ww6_s8AEt 1#)) 0# 0## s'_i8rGq
              of s1_X8rKo
              { __DEFAULT ->
              case touch#
                     @ 'LiftedRep @ GHC.ForeignPtr.ForeignPtrContents ww2_s8AEp s1_X8rKo
              of s'1_X8rKs
              { __DEFAULT ->
              case writeWord8OffAddr#
                     @ RealWorld
                     (plusAddr# ww1_s8AEo (+# ww6_s8AEt 2#))
                     0#
                     254##
                     s'1_X8rKs
              of s3_X8rKv
              { __DEFAULT ->
              case touch#
                     @ 'LiftedRep @ GHC.ForeignPtr.ForeignPtrContents ww2_s8AEp s3_X8rKv
              of s'2_X8rKz
              { __DEFAULT ->
              case writeWord8OffAddr#
                     @ RealWorld
                     (plusAddr# ww1_s8AEo (+# ww6_s8AEt 3#))
                     0#
                     255##
                     s'2_X8rKz
              of s4_X8rKC
              { __DEFAULT ->
              case touch#
                     @ 'LiftedRep @ GHC.ForeignPtr.ForeignPtrContents ww2_s8AEp s4_X8rKC
              of s'3_X8rKG
              { __DEFAULT ->
              GHC.IO.Encoding.UTF32.mkUTF1
                w_s8AEf
                (GHC.IO.Buffer.Buffer
                   @ Word8
                   ww1_s8AEo
                   ww2_s8AEp
                   ww3_s8AEq
                   ww4_s8AEr
                   ww5_s8AEs
                   (+# ww6_s8AEt 4#))
                s'3_X8rKG
              }
              }
              }
              }
              }
              }
              }
              }
              };
            1# ->
              (# ipv_i7IAy,
                 (GHC.IO.Encoding.Types.OutputUnderflow, w_s8AEf,
                  GHC.IO.Buffer.Buffer
                    @ Word8
                    ww1_s8AEo
                    ww2_s8AEp
                    ww3_s8AEq
                    ww4_s8AEr
                    ww5_s8AEs
                    ww6_s8AEt) #)
          };
        True ->
          GHC.IO.Encoding.UTF32.mkUTF1
            w_s8AEf
            (GHC.IO.Buffer.Buffer
               @ Word8
               ww1_s8AEo
               ww2_s8AEp
               ww3_s8AEq
               ww4_s8AEr
               ww5_s8AEs
               ww6_s8AEt)
            ipv_i7IAy
      }
      }

-- RHS size: {terms: 20, types: 22, coercions: 2, joins: 0/0}
GHC.IO.Encoding.UTF32.utf32_encode1 [InlPrag=NOUSERINLINE[0]]
  :: IORef Bool
     -> Buffer Char
     -> Buffer Word8
     -> State# RealWorld
     -> (# State# RealWorld,
           (CodingProgress, Buffer Char, Buffer Word8) #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U(U,U,U,U,U,U)><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8AEe [Occ=Once] :: IORef Bool)
                 (w1_s8AEf [Occ=Once] :: Buffer Char)
                 (w2_s8AEg [Occ=Once!] :: Buffer Word8)
                 (w3_s8AEh [Occ=Once] :: State# RealWorld) ->
                 case w_s8AEe
                      `cast` (GHC.IORef.N:IORef[0] <Bool>_N
                              :: (IORef Bool :: *) ~R# (GHC.STRef.STRef RealWorld Bool :: *))
                 of
                 { GHC.STRef.STRef ww1_s8AEk [Occ=Once] ->
                 case w2_s8AEg of
                 { Buffer ww3_s8AEo [Occ=Once] ww4_s8AEp [Occ=Once]
                          ww5_s8AEq [Occ=Once] ww6_s8AEr [Occ=Once] ww7_s8AEs [Occ=Once]
                          ww8_s8AEt [Occ=Once] ->
                 GHC.IO.Encoding.UTF32.$wutf32_encode
                   ww1_s8AEk
                   w1_s8AEf
                   ww3_s8AEo
                   ww4_s8AEp
                   ww5_s8AEq
                   ww6_s8AEr
                   ww7_s8AEs
                   ww8_s8AEt
                   w3_s8AEh
                 }
                 }}]
GHC.IO.Encoding.UTF32.utf32_encode1
  = \ (w_s8AEe :: IORef Bool)
      (w1_s8AEf :: Buffer Char)
      (w2_s8AEg :: Buffer Word8)
      (w3_s8AEh :: State# RealWorld) ->
      case w_s8AEe
           `cast` (GHC.IORef.N:IORef[0] <Bool>_N
                   :: (IORef Bool :: *) ~R# (GHC.STRef.STRef RealWorld Bool :: *))
      of
      { GHC.STRef.STRef ww1_s8AEk ->
      case w2_s8AEg of
      { Buffer ww3_s8AEo ww4_s8AEp ww5_s8AEq ww6_s8AEr ww7_s8AEs
               ww8_s8AEt ->
      GHC.IO.Encoding.UTF32.$wutf32_encode
        ww1_s8AEk
        w1_s8AEf
        ww3_s8AEo
        ww4_s8AEp
        ww5_s8AEq
        ww6_s8AEr
        ww7_s8AEs
        ww8_s8AEt
        w3_s8AEh
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 17, joins: 0/0}
utf32_encode :: IORef Bool -> EncodeBuffer
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U(U,U,U,U,U,U)><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Encoding.UTF32.utf32_encode1
               `cast` (<IORef Bool>_R
                       ->_R <Buffer Char>_R
                       ->_R <Buffer Word8>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <(CodingProgress, Buffer Char, Buffer Word8)>_R)
                       :: (IORef Bool
                           -> Buffer Char
                           -> Buffer Word8
                           -> State# RealWorld
                           -> (# State# RealWorld,
                                 (CodingProgress, Buffer Char, Buffer Word8) #) :: *)
                          ~R# (IORef Bool
                               -> Buffer Char
                               -> Buffer Word8
                               -> IO (CodingProgress, Buffer Char, Buffer Word8) :: *))}]
utf32_encode
  = GHC.IO.Encoding.UTF32.utf32_encode1
    `cast` (<IORef Bool>_R
            ->_R <Buffer Char>_R
            ->_R <Buffer Word8>_R
            ->_R Sym (GHC.Types.N:IO[0]
                          <(CodingProgress, Buffer Char, Buffer Word8)>_R)
            :: (IORef Bool
                -> Buffer Char
                -> Buffer Word8
                -> State# RealWorld
                -> (# State# RealWorld,
                      (CodingProgress, Buffer Char, Buffer Word8) #) :: *)
               ~R# (IORef Bool
                    -> Buffer Char
                    -> Buffer Word8
                    -> IO (CodingProgress, Buffer Char, Buffer Word8) :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.UTF32.mkUTF8 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Encoding.UTF32.mkUTF8 = "UTF-32"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.UTF32.mkUTF7 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.UTF32.mkUTF7
  = unpackCString# GHC.IO.Encoding.UTF32.mkUTF8

-- RHS size: {terms: 89, types: 141, coercions: 87, joins: 0/0}
mkUTF32 :: CodingFailureMode -> TextEncoding
[GblId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 366 40}]
mkUTF32
  = \ (cfm_a8zia :: CodingFailureMode) ->
      GHC.IO.Encoding.Types.TextEncoding
        @ (Maybe DecodeBuffer)
        @ Bool
        GHC.IO.Encoding.UTF32.mkUTF7
        ((\ (s_i7IAv :: State# RealWorld) ->
            case newMutVar#
                   @ (Maybe DecodeBuffer)
                   @ RealWorld
                   (GHC.Base.Nothing @ DecodeBuffer)
                   s_i7IAv
            of
            { (# ipv_i8ttV, ipv1_i8ttW #) ->
            (# ipv_i8ttV,
               GHC.IO.Encoding.Types.BufferCodec
                 @ Word8
                 @ Char
                 @ (Maybe DecodeBuffer)
                 ((\ (w_s8ADX :: Buffer Word8)
                     (w1_s8ADY :: Buffer Char)
                     (w2_s8ADZ :: State# RealWorld) ->
                     case w_s8ADX of
                     { Buffer ww1_s8AE6 ww2_s8AE7 ww3_s8AE8 ww4_s8AE9 ww5_s8AEa
                              ww6_s8AEb ->
                     GHC.IO.Encoding.UTF32.$wutf32_decode
                       ipv1_i8ttW
                       ww1_s8AE6
                       ww2_s8AE7
                       ww3_s8AE8
                       ww4_s8AE9
                       ww5_s8AEa
                       ww6_s8AEb
                       w1_s8ADY
                       w2_s8ADZ
                     })
                  `cast` (<Buffer Word8>_R
                          ->_R <Buffer Char>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <(CodingProgress, Buffer Word8, Buffer Char)>_R)
                          :: (Buffer Word8
                              -> Buffer Char
                              -> State# RealWorld
                              -> (# State# RealWorld,
                                    (CodingProgress, Buffer Word8, Buffer Char) #) :: *)
                             ~R# (Buffer Word8
                                  -> Buffer Char
                                  -> IO (CodingProgress, Buffer Word8, Buffer Char) :: *)))
                 ((GHC.IO.Encoding.Failure.recoverDecode1 cfm_a8zia)
                  `cast` (<Buffer Word8>_R
                          ->_R <Buffer Char>_R
                          ->_R Sym (GHC.Types.N:IO[0] <(Buffer Word8, Buffer Char)>_R)
                          :: (Buffer Word8
                              -> Buffer Char
                              -> State# RealWorld
                              -> (# State# RealWorld, (Buffer Word8, Buffer Char) #) :: *)
                             ~R# (Buffer Word8
                                  -> Buffer Char -> IO (Buffer Word8, Buffer Char) :: *)))
                 (GHC.IO.Encoding.UTF32.mkUTF2
                  `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                          :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                             ~R# (IO () :: *)))
                 ((\ (eta_i7IB0 :: State# RealWorld) ->
                     readMutVar#
                       @ RealWorld @ (Maybe DecodeBuffer) ipv1_i8ttW eta_i7IB0)
                  `cast` (Sym (GHC.Types.N:IO[0] <Maybe DecodeBuffer>_R)
                          :: (State# RealWorld
                              -> (# State# RealWorld, Maybe DecodeBuffer #) :: *)
                             ~R# (IO (Maybe DecodeBuffer) :: *)))
                 ((\ (val_i7IB8 :: Maybe DecodeBuffer)
                     (eta_i7IB9 :: State# RealWorld) ->
                     case writeMutVar#
                            @ RealWorld @ (Maybe DecodeBuffer) ipv1_i8ttW val_i7IB8 eta_i7IB9
                     of s2#_i7IBe
                     { __DEFAULT ->
                     (# s2#_i7IBe, GHC.Tuple.() #)
                     })
                  `cast` (<Maybe DecodeBuffer>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                          :: (Maybe DecodeBuffer
                              -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                             ~R# (Maybe DecodeBuffer -> IO () :: *))) #)
            })
         `cast` (Sym (GHC.Types.N:IO[0]
                          <TextDecoder (Maybe DecodeBuffer)>_R)
                 :: (State# RealWorld
                     -> (# State# RealWorld, TextDecoder (Maybe DecodeBuffer) #) :: *)
                    ~R# (IO (TextDecoder (Maybe DecodeBuffer)) :: *)))
        ((\ (s_i7IAv :: State# RealWorld) ->
            case newMutVar# @ Bool @ RealWorld GHC.Types.False s_i7IAv of
            { (# ipv_i8ttV, ipv1_i8ttW #) ->
            (# ipv_i8ttV,
               GHC.IO.Encoding.Types.BufferCodec
                 @ Char
                 @ Word8
                 @ Bool
                 ((\ (w_s8AEf :: Buffer Char)
                     (w1_s8AEg :: Buffer Word8)
                     (w2_s8AEh :: State# RealWorld) ->
                     case w1_s8AEg of
                     { Buffer ww1_s8AEo ww2_s8AEp ww3_s8AEq ww4_s8AEr ww5_s8AEs
                              ww6_s8AEt ->
                     GHC.IO.Encoding.UTF32.$wutf32_encode
                       ipv1_i8ttW
                       w_s8AEf
                       ww1_s8AEo
                       ww2_s8AEp
                       ww3_s8AEq
                       ww4_s8AEr
                       ww5_s8AEs
                       ww6_s8AEt
                       w2_s8AEh
                     })
                  `cast` (<Buffer Char>_R
                          ->_R <Buffer Word8>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <(CodingProgress, Buffer Char, Buffer Word8)>_R)
                          :: (Buffer Char
                              -> Buffer Word8
                              -> State# RealWorld
                              -> (# State# RealWorld,
                                    (CodingProgress, Buffer Char, Buffer Word8) #) :: *)
                             ~R# (Buffer Char
                                  -> Buffer Word8
                                  -> IO (CodingProgress, Buffer Char, Buffer Word8) :: *)))
                 ((GHC.IO.Encoding.Failure.recoverEncode1 cfm_a8zia)
                  `cast` (<Buffer Char>_R
                          ->_R <Buffer Word8>_R
                          ->_R Sym (GHC.Types.N:IO[0] <(Buffer Char, Buffer Word8)>_R)
                          :: (Buffer Char
                              -> Buffer Word8
                              -> State# RealWorld
                              -> (# State# RealWorld, (Buffer Char, Buffer Word8) #) :: *)
                             ~R# (Buffer Char
                                  -> Buffer Word8 -> IO (Buffer Char, Buffer Word8) :: *)))
                 (GHC.IO.Encoding.UTF32.mkUTF2
                  `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                          :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                             ~R# (IO () :: *)))
                 ((\ (eta_i7IB0 :: State# RealWorld) ->
                     readMutVar# @ RealWorld @ Bool ipv1_i8ttW eta_i7IB0)
                  `cast` (Sym (GHC.Types.N:IO[0] <Bool>_R)
                          :: (State# RealWorld -> (# State# RealWorld, Bool #) :: *)
                             ~R# (IO Bool :: *)))
                 ((\ (val_i7IB8 :: Bool) (eta_i7IB9 :: State# RealWorld) ->
                     case writeMutVar# @ RealWorld @ Bool ipv1_i8ttW val_i7IB8 eta_i7IB9
                     of s2#_i7IBe
                     { __DEFAULT ->
                     (# s2#_i7IBe, GHC.Tuple.() #)
                     })
                  `cast` (<Bool>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                          :: (Bool -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                             ~R# (Bool -> IO () :: *))) #)
            })
         `cast` (Sym (GHC.Types.N:IO[0] <TextEncoder Bool>_R)
                 :: (State# RealWorld
                     -> (# State# RealWorld, TextEncoder Bool #) :: *)
                    ~R# (IO (TextEncoder Bool) :: *)))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
utf32 :: TextEncoding
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
utf32 = mkUTF32 GHC.IO.Encoding.Failure.ErrorOnCodingFailure


