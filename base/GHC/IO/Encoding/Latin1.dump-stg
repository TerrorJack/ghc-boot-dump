
==================== Pre unarise: ====================
2018-03-16 16:03:54.286511315 UTC

GHC.IO.Encoding.Latin1.latin5
  :: GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Encoding.Types.CodingProgress,
            GHC.IO.Buffer.Buffer GHC.Word.Word8,
            GHC.IO.Buffer.Buffer GHC.Types.Char) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [input_s8KuE output_s8KuF eta_s8KuG]
        case input_s8KuE of {
          GHC.IO.Buffer.Buffer dt_s8KuI
                               dt1_s8KuJ
                               ds_s8KuK
                               dt2_s8KuL
                               dt3_s8KuM [Occ=Once]
                               dt4_s8KuN ->
              case output_s8KuF of {
                GHC.IO.Buffer.Buffer dt5_s8KuP
                                     dt6_s8KuQ
                                     ds1_s8KuR
                                     dt7_s8KuS
                                     dt8_s8KuT
                                     dt9_s8KuU [Occ=Once] ->
                    let {
                      lvl6_s8KuV :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                      [LclId, Unf=OtherCon []] =
                          CCCS GHC.IO.Buffer.Buffer! [dt_s8KuI
                                                      dt1_s8KuJ
                                                      ds_s8KuK
                                                      dt2_s8KuL
                                                      0#
                                                      0#];
                    } in 
                      let-no-escape {
                        exit_s8KuW [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                          :: GHC.Prim.Int#
                             -> GHC.Prim.Int#
                             -> GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                   (GHC.IO.Encoding.Types.CodingProgress,
                                    GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                    GHC.IO.Buffer.Buffer GHC.Types.Char) #)
                        [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                            sat-only [dt_s8KuI
                                      dt1_s8KuJ
                                      ds_s8KuK
                                      dt2_s8KuL
                                      dt4_s8KuN
                                      dt5_s8KuP
                                      dt6_s8KuQ
                                      ds1_s8KuR
                                      dt7_s8KuS
                                      dt8_s8KuT
                                      lvl6_s8KuV] \r [ww_s8KuX ww1_s8KuY w_s8KuZ]
                                let {
                                  sat_s8Kv2 [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                  [LclId] =
                                      CCCS GHC.IO.Buffer.Buffer! [dt5_s8KuP
                                                                  dt6_s8KuQ
                                                                  ds1_s8KuR
                                                                  dt7_s8KuS
                                                                  dt8_s8KuT
                                                                  ww1_s8KuY]; } in
                                let {
                                  sat_s8Kv1 [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                  [LclId] =
                                      [dt_s8KuI
                                       dt1_s8KuJ
                                       ds_s8KuK
                                       dt2_s8KuL
                                       dt4_s8KuN
                                       lvl6_s8KuV
                                       ww_s8KuX] \u []
                                          case ==# [ww_s8KuX dt4_s8KuN] of {
                                            __DEFAULT ->
                                                GHC.IO.Buffer.Buffer [dt_s8KuI
                                                                      dt1_s8KuJ
                                                                      ds_s8KuK
                                                                      dt2_s8KuL
                                                                      ww_s8KuX
                                                                      dt4_s8KuN];
                                            1# -> lvl6_s8KuV;
                                          }; } in
                                let {
                                  sat_s8Kv3 [Occ=Once]
                                    :: (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char)
                                  [LclId] =
                                      CCCS (,,)! [GHC.IO.Encoding.Types.InputUnderflow
                                                  sat_s8Kv1
                                                  sat_s8Kv2];
                                } in  (#,#) [w_s8KuZ sat_s8Kv3];
                      } in 
                        let-no-escape {
                          exit1_s8Kv4 [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                            :: GHC.Prim.Int#
                               -> GHC.Prim.Int#
                               -> GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     (GHC.IO.Encoding.Types.CodingProgress,
                                      GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                      GHC.IO.Buffer.Buffer GHC.Types.Char) #)
                          [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                              sat-only [dt_s8KuI
                                        dt1_s8KuJ
                                        ds_s8KuK
                                        dt2_s8KuL
                                        dt4_s8KuN
                                        dt5_s8KuP
                                        dt6_s8KuQ
                                        ds1_s8KuR
                                        dt7_s8KuS
                                        dt8_s8KuT
                                        lvl6_s8KuV] \r [ww_s8Kv5 ww1_s8Kv6 w_s8Kv7]
                                  let {
                                    sat_s8Kva [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                    [LclId] =
                                        CCCS GHC.IO.Buffer.Buffer! [dt5_s8KuP
                                                                    dt6_s8KuQ
                                                                    ds1_s8KuR
                                                                    dt7_s8KuS
                                                                    dt8_s8KuT
                                                                    ww1_s8Kv6]; } in
                                  let {
                                    sat_s8Kv9 [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                    [LclId] =
                                        [dt_s8KuI
                                         dt1_s8KuJ
                                         ds_s8KuK
                                         dt2_s8KuL
                                         dt4_s8KuN
                                         lvl6_s8KuV
                                         ww_s8Kv5] \u []
                                            case ==# [ww_s8Kv5 dt4_s8KuN] of {
                                              __DEFAULT ->
                                                  GHC.IO.Buffer.Buffer [dt_s8KuI
                                                                        dt1_s8KuJ
                                                                        ds_s8KuK
                                                                        dt2_s8KuL
                                                                        ww_s8Kv5
                                                                        dt4_s8KuN];
                                              1# -> lvl6_s8KuV;
                                            }; } in
                                  let {
                                    sat_s8Kvb [Occ=Once]
                                      :: (GHC.IO.Encoding.Types.CodingProgress,
                                          GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                          GHC.IO.Buffer.Buffer GHC.Types.Char)
                                    [LclId] =
                                        CCCS (,,)! [GHC.IO.Encoding.Types.OutputUnderflow
                                                    sat_s8Kv9
                                                    sat_s8Kva];
                                  } in  (#,#) [w_s8Kv7 sat_s8Kvb];
                        } in 
                          let-no-escape {
                            $wloop_s8Kvc [InlPrag=NOUSERINLINE[0], Occ=LoopBreakerT[3]]
                              :: GHC.Prim.Int#
                                 -> GHC.Prim.Int#
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                       (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char) #)
                            [LclId[JoinId(3)], Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
                                sat-only [dt_s8KuI
                                          dt1_s8KuJ
                                          dt4_s8KuN
                                          dt5_s8KuP
                                          dt6_s8KuQ
                                          dt7_s8KuS
                                          exit_s8KuW
                                          exit1_s8Kv4
                                          $wloop_s8Kvc] \r [ww_s8Kvd ww1_s8Kve w_s8Kvf]
                                    case >=# [ww1_s8Kve dt7_s8KuS] of {
                                      __DEFAULT ->
                                          case >=# [ww_s8Kvd dt4_s8KuN] of {
                                            __DEFAULT ->
                                                case plusAddr# [dt_s8KuI ww_s8Kvd] of sat_s8Kvi {
                                                  __DEFAULT ->
                                                      case
                                                          readWord8OffAddr# [sat_s8Kvi 0# w_s8Kvf]
                                                      of
                                                      { (#,#) ipv_s8Kvk [Occ=Once]
                                                              ipv1_s8Kvl [Occ=Once] ->
                                                            case
                                                                touch# [dt1_s8KuJ ipv_s8Kvk]
                                                            of
                                                            s'_s8Kvm
                                                            { __DEFAULT ->
                                                                  case
                                                                      word2Int# [ipv1_s8Kvl]
                                                                  of
                                                                  sat_s8Kvn
                                                                  { __DEFAULT ->
                                                                        case
                                                                            chr# [sat_s8Kvn]
                                                                        of
                                                                        sat_s8Kvo
                                                                        { __DEFAULT ->
                                                                              case
                                                                                  writeWideCharOffAddr# [dt5_s8KuP
                                                                                                         ww1_s8Kve
                                                                                                         sat_s8Kvo
                                                                                                         s'_s8Kvm]
                                                                              of
                                                                              s2_s8Kvp
                                                                              { __DEFAULT ->
                                                                                    case
                                                                                        touch# [dt6_s8KuQ
                                                                                                s2_s8Kvp]
                                                                                    of
                                                                                    s'1_s8Kvq
                                                                                    { __DEFAULT ->
                                                                                          case
                                                                                              +# [ww1_s8Kve
                                                                                                  1#]
                                                                                          of
                                                                                          sat_s8Kvs
                                                                                          { __DEFAULT ->
                                                                                                case
                                                                                                    +# [ww_s8Kvd
                                                                                                        1#]
                                                                                                of
                                                                                                sat_s8Kvr
                                                                                                { __DEFAULT ->
                                                                                                      $wloop_s8Kvc
                                                                                                          sat_s8Kvr
                                                                                                          sat_s8Kvs
                                                                                                          s'1_s8Kvq;
                                                                                                };
                                                                                          };
                                                                                    };
                                                                              };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                            1# -> exit_s8KuW ww_s8Kvd ww1_s8Kve w_s8Kvf;
                                          };
                                      1# -> exit1_s8Kv4 ww_s8Kvd ww1_s8Kve w_s8Kvf;
                                    };
                          } in  $wloop_s8Kvc dt3_s8KuM dt9_s8KuU eta_s8KuG;
              };
        };

GHC.IO.Encoding.Latin1.latin1_decode
  :: GHC.IO.Encoding.Types.DecodeBuffer
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Encoding.Latin1.latin5 eta_B3 eta_B2 eta_B1;

GHC.IO.Encoding.Latin1.ascii5
  :: GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Encoding.Types.CodingProgress,
            GHC.IO.Buffer.Buffer GHC.Word.Word8,
            GHC.IO.Buffer.Buffer GHC.Types.Char) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [input_s8Kvt output_s8Kvu eta_s8Kvv]
        case input_s8Kvt of {
          GHC.IO.Buffer.Buffer dt_s8Kvx
                               dt1_s8Kvy
                               ds_s8Kvz
                               dt2_s8KvA
                               dt3_s8KvB [Occ=Once]
                               dt4_s8KvC ->
              case output_s8Kvu of {
                GHC.IO.Buffer.Buffer dt5_s8KvE
                                     dt6_s8KvF
                                     ds1_s8KvG
                                     dt7_s8KvH
                                     dt8_s8KvI
                                     dt9_s8KvJ [Occ=Once] ->
                    let {
                      lvl6_s8KvK :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                      [LclId, Unf=OtherCon []] =
                          CCCS GHC.IO.Buffer.Buffer! [dt_s8Kvx
                                                      dt1_s8Kvy
                                                      ds_s8Kvz
                                                      dt2_s8KvA
                                                      0#
                                                      0#];
                    } in 
                      let-no-escape {
                        exit_s8KvL [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                          :: GHC.Prim.Int#
                             -> GHC.Prim.Int#
                             -> GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                   (GHC.IO.Encoding.Types.CodingProgress,
                                    GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                    GHC.IO.Buffer.Buffer GHC.Types.Char) #)
                        [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                            sat-only [dt_s8Kvx
                                      dt1_s8Kvy
                                      ds_s8Kvz
                                      dt2_s8KvA
                                      dt4_s8KvC
                                      dt5_s8KvE
                                      dt6_s8KvF
                                      ds1_s8KvG
                                      dt7_s8KvH
                                      dt8_s8KvI
                                      lvl6_s8KvK] \r [ww_s8KvM ww1_s8KvN s'_s8KvO]
                                let {
                                  sat_s8KvR [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                  [LclId] =
                                      CCCS GHC.IO.Buffer.Buffer! [dt5_s8KvE
                                                                  dt6_s8KvF
                                                                  ds1_s8KvG
                                                                  dt7_s8KvH
                                                                  dt8_s8KvI
                                                                  ww1_s8KvN]; } in
                                let {
                                  sat_s8KvQ [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                  [LclId] =
                                      [dt_s8Kvx
                                       dt1_s8Kvy
                                       ds_s8Kvz
                                       dt2_s8KvA
                                       dt4_s8KvC
                                       lvl6_s8KvK
                                       ww_s8KvM] \u []
                                          case ==# [ww_s8KvM dt4_s8KvC] of {
                                            __DEFAULT ->
                                                GHC.IO.Buffer.Buffer [dt_s8Kvx
                                                                      dt1_s8Kvy
                                                                      ds_s8Kvz
                                                                      dt2_s8KvA
                                                                      ww_s8KvM
                                                                      dt4_s8KvC];
                                            1# -> lvl6_s8KvK;
                                          }; } in
                                let {
                                  sat_s8KvS [Occ=Once]
                                    :: (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char)
                                  [LclId] =
                                      CCCS (,,)! [GHC.IO.Encoding.Types.InvalidSequence
                                                  sat_s8KvQ
                                                  sat_s8KvR];
                                } in  (#,#) [s'_s8KvO sat_s8KvS];
                      } in 
                        let-no-escape {
                          exit1_s8KvT [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                            :: GHC.Prim.Int#
                               -> GHC.Prim.Int#
                               -> GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     (GHC.IO.Encoding.Types.CodingProgress,
                                      GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                      GHC.IO.Buffer.Buffer GHC.Types.Char) #)
                          [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                              sat-only [dt_s8Kvx
                                        dt1_s8Kvy
                                        ds_s8Kvz
                                        dt2_s8KvA
                                        dt4_s8KvC
                                        dt5_s8KvE
                                        dt6_s8KvF
                                        ds1_s8KvG
                                        dt7_s8KvH
                                        dt8_s8KvI
                                        lvl6_s8KvK] \r [ww_s8KvU ww1_s8KvV w_s8KvW]
                                  let {
                                    sat_s8KvZ [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                    [LclId] =
                                        CCCS GHC.IO.Buffer.Buffer! [dt5_s8KvE
                                                                    dt6_s8KvF
                                                                    ds1_s8KvG
                                                                    dt7_s8KvH
                                                                    dt8_s8KvI
                                                                    ww1_s8KvV]; } in
                                  let {
                                    sat_s8KvY [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                    [LclId] =
                                        [dt_s8Kvx
                                         dt1_s8Kvy
                                         ds_s8Kvz
                                         dt2_s8KvA
                                         dt4_s8KvC
                                         lvl6_s8KvK
                                         ww_s8KvU] \u []
                                            case ==# [ww_s8KvU dt4_s8KvC] of {
                                              __DEFAULT ->
                                                  GHC.IO.Buffer.Buffer [dt_s8Kvx
                                                                        dt1_s8Kvy
                                                                        ds_s8Kvz
                                                                        dt2_s8KvA
                                                                        ww_s8KvU
                                                                        dt4_s8KvC];
                                              1# -> lvl6_s8KvK;
                                            }; } in
                                  let {
                                    sat_s8Kw0 [Occ=Once]
                                      :: (GHC.IO.Encoding.Types.CodingProgress,
                                          GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                          GHC.IO.Buffer.Buffer GHC.Types.Char)
                                    [LclId] =
                                        CCCS (,,)! [GHC.IO.Encoding.Types.InputUnderflow
                                                    sat_s8KvY
                                                    sat_s8KvZ];
                                  } in  (#,#) [w_s8KvW sat_s8Kw0];
                        } in 
                          let-no-escape {
                            exit2_s8Kw1 [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                              :: GHC.Prim.Int#
                                 -> GHC.Prim.Int#
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                       (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char) #)
                            [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                                sat-only [dt_s8Kvx
                                          dt1_s8Kvy
                                          ds_s8Kvz
                                          dt2_s8KvA
                                          dt4_s8KvC
                                          dt5_s8KvE
                                          dt6_s8KvF
                                          ds1_s8KvG
                                          dt7_s8KvH
                                          dt8_s8KvI
                                          lvl6_s8KvK] \r [ww_s8Kw2 ww1_s8Kw3 w_s8Kw4]
                                    let {
                                      sat_s8Kw7 [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                      [LclId] =
                                          CCCS GHC.IO.Buffer.Buffer! [dt5_s8KvE
                                                                      dt6_s8KvF
                                                                      ds1_s8KvG
                                                                      dt7_s8KvH
                                                                      dt8_s8KvI
                                                                      ww1_s8Kw3]; } in
                                    let {
                                      sat_s8Kw6 [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                      [LclId] =
                                          [dt_s8Kvx
                                           dt1_s8Kvy
                                           ds_s8Kvz
                                           dt2_s8KvA
                                           dt4_s8KvC
                                           lvl6_s8KvK
                                           ww_s8Kw2] \u []
                                              case ==# [ww_s8Kw2 dt4_s8KvC] of {
                                                __DEFAULT ->
                                                    GHC.IO.Buffer.Buffer [dt_s8Kvx
                                                                          dt1_s8Kvy
                                                                          ds_s8Kvz
                                                                          dt2_s8KvA
                                                                          ww_s8Kw2
                                                                          dt4_s8KvC];
                                                1# -> lvl6_s8KvK;
                                              }; } in
                                    let {
                                      sat_s8Kw8 [Occ=Once]
                                        :: (GHC.IO.Encoding.Types.CodingProgress,
                                            GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                            GHC.IO.Buffer.Buffer GHC.Types.Char)
                                      [LclId] =
                                          CCCS (,,)! [GHC.IO.Encoding.Types.OutputUnderflow
                                                      sat_s8Kw6
                                                      sat_s8Kw7];
                                    } in  (#,#) [w_s8Kw4 sat_s8Kw8];
                          } in 
                            let-no-escape {
                              $wloop_s8Kw9 [InlPrag=NOUSERINLINE[0], Occ=LoopBreakerT[3]]
                                :: GHC.Prim.Int#
                                   -> GHC.Prim.Int#
                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         (GHC.IO.Encoding.Types.CodingProgress,
                                          GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                          GHC.IO.Buffer.Buffer GHC.Types.Char) #)
                              [LclId[JoinId(3)], Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
                                  sat-only [dt_s8Kvx
                                            dt1_s8Kvy
                                            dt4_s8KvC
                                            dt5_s8KvE
                                            dt6_s8KvF
                                            dt7_s8KvH
                                            exit_s8KvL
                                            exit1_s8KvT
                                            exit2_s8Kw1
                                            $wloop_s8Kw9] \r [ww_s8Kwa ww1_s8Kwb w_s8Kwc]
                                      case >=# [ww1_s8Kwb dt7_s8KvH] of {
                                        __DEFAULT ->
                                            case >=# [ww_s8Kwa dt4_s8KvC] of {
                                              __DEFAULT ->
                                                  case plusAddr# [dt_s8Kvx ww_s8Kwa] of sat_s8Kwf {
                                                    __DEFAULT ->
                                                        case
                                                            readWord8OffAddr# [sat_s8Kwf 0# w_s8Kwc]
                                                        of
                                                        { (#,#) ipv_s8Kwh [Occ=Once] ipv1_s8Kwi ->
                                                              case
                                                                  touch# [dt1_s8Kvy ipv_s8Kwh]
                                                              of
                                                              s'_s8Kwj
                                                              { __DEFAULT ->
                                                                    case
                                                                        gtWord# [ipv1_s8Kwi 127##]
                                                                    of
                                                                    { __DEFAULT ->
                                                                          case
                                                                              word2Int# [ipv1_s8Kwi]
                                                                          of
                                                                          sat_s8Kwl
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    chr# [sat_s8Kwl]
                                                                                of
                                                                                sat_s8Kwm
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          writeWideCharOffAddr# [dt5_s8KvE
                                                                                                                 ww1_s8Kwb
                                                                                                                 sat_s8Kwm
                                                                                                                 s'_s8Kwj]
                                                                                      of
                                                                                      s2_s8Kwn
                                                                                      { __DEFAULT ->
                                                                                            case
                                                                                                touch# [dt6_s8KvF
                                                                                                        s2_s8Kwn]
                                                                                            of
                                                                                            s'1_s8Kwo
                                                                                            { __DEFAULT ->
                                                                                                  case
                                                                                                      +# [ww1_s8Kwb
                                                                                                          1#]
                                                                                                  of
                                                                                                  sat_s8Kwq
                                                                                                  { __DEFAULT ->
                                                                                                        case
                                                                                                            +# [ww_s8Kwa
                                                                                                                1#]
                                                                                                        of
                                                                                                        sat_s8Kwp
                                                                                                        { __DEFAULT ->
                                                                                                              $wloop_s8Kw9
                                                                                                                  sat_s8Kwp
                                                                                                                  sat_s8Kwq
                                                                                                                  s'1_s8Kwo;
                                                                                                        };
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                                };
                                                                          };
                                                                      1# ->
                                                                          exit_s8KvL
                                                                              ww_s8Kwa
                                                                              ww1_s8Kwb
                                                                              s'_s8Kwj;
                                                                    };
                                                              };
                                                        };
                                                  };
                                              1# -> exit1_s8KvT ww_s8Kwa ww1_s8Kwb w_s8Kwc;
                                            };
                                        1# -> exit2_s8Kw1 ww_s8Kwa ww1_s8Kwb w_s8Kwc;
                                      };
                            } in  $wloop_s8Kw9 dt3_s8KvB dt9_s8KvJ eta_s8Kvv;
              };
        };

GHC.IO.Encoding.Latin1.ascii_decode
  :: GHC.IO.Encoding.Types.DecodeBuffer
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Encoding.Latin1.ascii5 eta_B3 eta_B2 eta_B1;

GHC.IO.Encoding.Latin1.latin3
  :: GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Encoding.Types.CodingProgress,
            GHC.IO.Buffer.Buffer GHC.Types.Char,
            GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [input_s8Kwr output_s8Kws eta_s8Kwt]
        case input_s8Kwr of {
          GHC.IO.Buffer.Buffer dt_s8Kwv
                               dt1_s8Kww
                               ds_s8Kwx
                               dt2_s8Kwy
                               dt3_s8Kwz [Occ=Once]
                               dt4_s8KwA ->
              case output_s8Kws of {
                GHC.IO.Buffer.Buffer dt5_s8KwC
                                     dt6_s8KwD
                                     ds1_s8KwE
                                     dt7_s8KwF
                                     dt8_s8KwG
                                     dt9_s8KwH [Occ=Once] ->
                    let {
                      lvl6_s8KwI :: GHC.IO.Buffer.Buffer GHC.Types.Char
                      [LclId, Unf=OtherCon []] =
                          CCCS GHC.IO.Buffer.Buffer! [dt_s8Kwv
                                                      dt1_s8Kww
                                                      ds_s8Kwx
                                                      dt2_s8Kwy
                                                      0#
                                                      0#];
                    } in 
                      let-no-escape {
                        exit_s8KwJ [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                          :: GHC.Prim.Int#
                             -> GHC.Prim.Int#
                             -> GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                   (GHC.IO.Encoding.Types.CodingProgress,
                                    GHC.IO.Buffer.Buffer GHC.Types.Char,
                                    GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                        [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                            sat-only [dt_s8Kwv
                                      dt1_s8Kww
                                      ds_s8Kwx
                                      dt2_s8Kwy
                                      dt4_s8KwA
                                      dt5_s8KwC
                                      dt6_s8KwD
                                      ds1_s8KwE
                                      dt7_s8KwF
                                      dt8_s8KwG
                                      lvl6_s8KwI] \r [ww_s8KwK ww1_s8KwL w_s8KwM]
                                let {
                                  sat_s8KwP [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                  [LclId] =
                                      CCCS GHC.IO.Buffer.Buffer! [dt5_s8KwC
                                                                  dt6_s8KwD
                                                                  ds1_s8KwE
                                                                  dt7_s8KwF
                                                                  dt8_s8KwG
                                                                  ww1_s8KwL]; } in
                                let {
                                  sat_s8KwO [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                  [LclId] =
                                      [dt_s8Kwv
                                       dt1_s8Kww
                                       ds_s8Kwx
                                       dt2_s8Kwy
                                       dt4_s8KwA
                                       lvl6_s8KwI
                                       ww_s8KwK] \u []
                                          case ==# [ww_s8KwK dt4_s8KwA] of {
                                            __DEFAULT ->
                                                GHC.IO.Buffer.Buffer [dt_s8Kwv
                                                                      dt1_s8Kww
                                                                      ds_s8Kwx
                                                                      dt2_s8Kwy
                                                                      ww_s8KwK
                                                                      dt4_s8KwA];
                                            1# -> lvl6_s8KwI;
                                          }; } in
                                let {
                                  sat_s8KwQ [Occ=Once]
                                    :: (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                  [LclId] =
                                      CCCS (,,)! [GHC.IO.Encoding.Types.InputUnderflow
                                                  sat_s8KwO
                                                  sat_s8KwP];
                                } in  (#,#) [w_s8KwM sat_s8KwQ];
                      } in 
                        let-no-escape {
                          exit1_s8KwR [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                            :: GHC.Prim.Int#
                               -> GHC.Prim.Int#
                               -> GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     (GHC.IO.Encoding.Types.CodingProgress,
                                      GHC.IO.Buffer.Buffer GHC.Types.Char,
                                      GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                          [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                              sat-only [dt_s8Kwv
                                        dt1_s8Kww
                                        ds_s8Kwx
                                        dt2_s8Kwy
                                        dt4_s8KwA
                                        dt5_s8KwC
                                        dt6_s8KwD
                                        ds1_s8KwE
                                        dt7_s8KwF
                                        dt8_s8KwG
                                        lvl6_s8KwI] \r [ww_s8KwS ww1_s8KwT w_s8KwU]
                                  let {
                                    sat_s8KwX [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                    [LclId] =
                                        CCCS GHC.IO.Buffer.Buffer! [dt5_s8KwC
                                                                    dt6_s8KwD
                                                                    ds1_s8KwE
                                                                    dt7_s8KwF
                                                                    dt8_s8KwG
                                                                    ww1_s8KwT]; } in
                                  let {
                                    sat_s8KwW [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                    [LclId] =
                                        [dt_s8Kwv
                                         dt1_s8Kww
                                         ds_s8Kwx
                                         dt2_s8Kwy
                                         dt4_s8KwA
                                         lvl6_s8KwI
                                         ww_s8KwS] \u []
                                            case ==# [ww_s8KwS dt4_s8KwA] of {
                                              __DEFAULT ->
                                                  GHC.IO.Buffer.Buffer [dt_s8Kwv
                                                                        dt1_s8Kww
                                                                        ds_s8Kwx
                                                                        dt2_s8Kwy
                                                                        ww_s8KwS
                                                                        dt4_s8KwA];
                                              1# -> lvl6_s8KwI;
                                            }; } in
                                  let {
                                    sat_s8KwY [Occ=Once]
                                      :: (GHC.IO.Encoding.Types.CodingProgress,
                                          GHC.IO.Buffer.Buffer GHC.Types.Char,
                                          GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                    [LclId] =
                                        CCCS (,,)! [GHC.IO.Encoding.Types.OutputUnderflow
                                                    sat_s8KwW
                                                    sat_s8KwX];
                                  } in  (#,#) [w_s8KwU sat_s8KwY];
                        } in 
                          let-no-escape {
                            $wloop_s8KwZ [InlPrag=NOUSERINLINE[0], Occ=LoopBreakerT[3]]
                              :: GHC.Prim.Int#
                                 -> GHC.Prim.Int#
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                       (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                            [LclId[JoinId(3)], Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
                                sat-only [dt_s8Kwv
                                          dt1_s8Kww
                                          dt4_s8KwA
                                          dt5_s8KwC
                                          dt6_s8KwD
                                          dt7_s8KwF
                                          exit_s8KwJ
                                          exit1_s8KwR
                                          $wloop_s8KwZ] \r [ww_s8Kx0 ww1_s8Kx1 w_s8Kx2]
                                    case >=# [ww1_s8Kx1 dt7_s8KwF] of {
                                      __DEFAULT ->
                                          case >=# [ww_s8Kx0 dt4_s8KwA] of {
                                            __DEFAULT ->
                                                case
                                                    readWideCharOffAddr# [dt_s8Kwv ww_s8Kx0 w_s8Kx2]
                                                of
                                                { (#,#) ipv_s8Kx6 [Occ=Once]
                                                        ipv1_s8Kx7 [Occ=Once] ->
                                                      case
                                                          touch# [dt1_s8Kww ipv_s8Kx6]
                                                      of
                                                      s'_s8Kx8
                                                      { __DEFAULT ->
                                                            case ord# [ipv1_s8Kx7] of sat_s8Kxa {
                                                              __DEFAULT ->
                                                                  case
                                                                      int2Word# [sat_s8Kxa]
                                                                  of
                                                                  sat_s8Kxb
                                                                  { __DEFAULT ->
                                                                        case
                                                                            narrow8Word# [sat_s8Kxb]
                                                                        of
                                                                        sat_s8Kxc
                                                                        { __DEFAULT ->
                                                                              case
                                                                                  plusAddr# [dt5_s8KwC
                                                                                             ww1_s8Kx1]
                                                                              of
                                                                              sat_s8Kx9
                                                                              { __DEFAULT ->
                                                                                    case
                                                                                        writeWord8OffAddr# [sat_s8Kx9
                                                                                                            0#
                                                                                                            sat_s8Kxc
                                                                                                            s'_s8Kx8]
                                                                                    of
                                                                                    s2_s8Kxd
                                                                                    { __DEFAULT ->
                                                                                          case
                                                                                              touch# [dt6_s8KwD
                                                                                                      s2_s8Kxd]
                                                                                          of
                                                                                          s'1_s8Kxe
                                                                                          { __DEFAULT ->
                                                                                                case
                                                                                                    +# [ww1_s8Kx1
                                                                                                        1#]
                                                                                                of
                                                                                                sat_s8Kxg
                                                                                                { __DEFAULT ->
                                                                                                      case
                                                                                                          +# [ww_s8Kx0
                                                                                                              1#]
                                                                                                      of
                                                                                                      sat_s8Kxf
                                                                                                      { __DEFAULT ->
                                                                                                            $wloop_s8KwZ
                                                                                                                sat_s8Kxf
                                                                                                                sat_s8Kxg
                                                                                                                s'1_s8Kxe;
                                                                                                      };
                                                                                                };
                                                                                          };
                                                                                    };
                                                                              };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                            1# -> exit_s8KwJ ww_s8Kx0 ww1_s8Kx1 w_s8Kx2;
                                          };
                                      1# -> exit1_s8KwR ww_s8Kx0 ww1_s8Kx1 w_s8Kx2;
                                    };
                          } in  $wloop_s8KwZ dt3_s8Kwz dt9_s8KwH eta_s8Kwt;
              };
        };

GHC.IO.Encoding.Latin1.latin1_encode
  :: GHC.IO.Encoding.Types.EncodeBuffer
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Encoding.Latin1.latin3 eta_B3 eta_B2 eta_B1;

GHC.IO.Encoding.Latin1.ascii3
  :: GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Encoding.Types.CodingProgress,
            GHC.IO.Buffer.Buffer GHC.Types.Char,
            GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [input_s8Kxh output_s8Kxi eta_s8Kxj]
        case input_s8Kxh of {
          GHC.IO.Buffer.Buffer dt_s8Kxl
                               dt1_s8Kxm
                               ds_s8Kxn
                               dt2_s8Kxo
                               dt3_s8Kxp [Occ=Once]
                               dt4_s8Kxq ->
              case output_s8Kxi of {
                GHC.IO.Buffer.Buffer dt5_s8Kxs
                                     dt6_s8Kxt
                                     ds1_s8Kxu
                                     dt7_s8Kxv
                                     dt8_s8Kxw
                                     dt9_s8Kxx [Occ=Once] ->
                    let {
                      lvl6_s8Kxy :: GHC.IO.Buffer.Buffer GHC.Types.Char
                      [LclId, Unf=OtherCon []] =
                          CCCS GHC.IO.Buffer.Buffer! [dt_s8Kxl
                                                      dt1_s8Kxm
                                                      ds_s8Kxn
                                                      dt2_s8Kxo
                                                      0#
                                                      0#];
                    } in 
                      let-no-escape {
                        exit_s8Kxz [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                          :: GHC.Prim.Int#
                             -> GHC.Prim.Int#
                             -> GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                   (GHC.IO.Encoding.Types.CodingProgress,
                                    GHC.IO.Buffer.Buffer GHC.Types.Char,
                                    GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                        [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                            sat-only [dt_s8Kxl
                                      dt1_s8Kxm
                                      ds_s8Kxn
                                      dt2_s8Kxo
                                      dt4_s8Kxq
                                      dt5_s8Kxs
                                      dt6_s8Kxt
                                      ds1_s8Kxu
                                      dt7_s8Kxv
                                      dt8_s8Kxw
                                      lvl6_s8Kxy] \r [ww_s8KxA ww1_s8KxB s'_s8KxC]
                                let {
                                  sat_s8KxF [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                  [LclId] =
                                      CCCS GHC.IO.Buffer.Buffer! [dt5_s8Kxs
                                                                  dt6_s8Kxt
                                                                  ds1_s8Kxu
                                                                  dt7_s8Kxv
                                                                  dt8_s8Kxw
                                                                  ww1_s8KxB]; } in
                                let {
                                  sat_s8KxE [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                  [LclId] =
                                      [dt_s8Kxl
                                       dt1_s8Kxm
                                       ds_s8Kxn
                                       dt2_s8Kxo
                                       dt4_s8Kxq
                                       lvl6_s8Kxy
                                       ww_s8KxA] \u []
                                          case ==# [ww_s8KxA dt4_s8Kxq] of {
                                            __DEFAULT ->
                                                GHC.IO.Buffer.Buffer [dt_s8Kxl
                                                                      dt1_s8Kxm
                                                                      ds_s8Kxn
                                                                      dt2_s8Kxo
                                                                      ww_s8KxA
                                                                      dt4_s8Kxq];
                                            1# -> lvl6_s8Kxy;
                                          }; } in
                                let {
                                  sat_s8KxG [Occ=Once]
                                    :: (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                  [LclId] =
                                      CCCS (,,)! [GHC.IO.Encoding.Types.InvalidSequence
                                                  sat_s8KxE
                                                  sat_s8KxF];
                                } in  (#,#) [s'_s8KxC sat_s8KxG];
                      } in 
                        let-no-escape {
                          exit1_s8KxH [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                            :: GHC.Prim.Int#
                               -> GHC.Prim.Int#
                               -> GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     (GHC.IO.Encoding.Types.CodingProgress,
                                      GHC.IO.Buffer.Buffer GHC.Types.Char,
                                      GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                          [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                              sat-only [dt_s8Kxl
                                        dt1_s8Kxm
                                        ds_s8Kxn
                                        dt2_s8Kxo
                                        dt4_s8Kxq
                                        dt5_s8Kxs
                                        dt6_s8Kxt
                                        ds1_s8Kxu
                                        dt7_s8Kxv
                                        dt8_s8Kxw
                                        lvl6_s8Kxy] \r [ww_s8KxI ww1_s8KxJ w_s8KxK]
                                  let {
                                    sat_s8KxN [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                    [LclId] =
                                        CCCS GHC.IO.Buffer.Buffer! [dt5_s8Kxs
                                                                    dt6_s8Kxt
                                                                    ds1_s8Kxu
                                                                    dt7_s8Kxv
                                                                    dt8_s8Kxw
                                                                    ww1_s8KxJ]; } in
                                  let {
                                    sat_s8KxM [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                    [LclId] =
                                        [dt_s8Kxl
                                         dt1_s8Kxm
                                         ds_s8Kxn
                                         dt2_s8Kxo
                                         dt4_s8Kxq
                                         lvl6_s8Kxy
                                         ww_s8KxI] \u []
                                            case ==# [ww_s8KxI dt4_s8Kxq] of {
                                              __DEFAULT ->
                                                  GHC.IO.Buffer.Buffer [dt_s8Kxl
                                                                        dt1_s8Kxm
                                                                        ds_s8Kxn
                                                                        dt2_s8Kxo
                                                                        ww_s8KxI
                                                                        dt4_s8Kxq];
                                              1# -> lvl6_s8Kxy;
                                            }; } in
                                  let {
                                    sat_s8KxO [Occ=Once]
                                      :: (GHC.IO.Encoding.Types.CodingProgress,
                                          GHC.IO.Buffer.Buffer GHC.Types.Char,
                                          GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                    [LclId] =
                                        CCCS (,,)! [GHC.IO.Encoding.Types.InputUnderflow
                                                    sat_s8KxM
                                                    sat_s8KxN];
                                  } in  (#,#) [w_s8KxK sat_s8KxO];
                        } in 
                          let-no-escape {
                            exit2_s8KxP [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                              :: GHC.Prim.Int#
                                 -> GHC.Prim.Int#
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                       (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                            [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                                sat-only [dt_s8Kxl
                                          dt1_s8Kxm
                                          ds_s8Kxn
                                          dt2_s8Kxo
                                          dt4_s8Kxq
                                          dt5_s8Kxs
                                          dt6_s8Kxt
                                          ds1_s8Kxu
                                          dt7_s8Kxv
                                          dt8_s8Kxw
                                          lvl6_s8Kxy] \r [ww_s8KxQ ww1_s8KxR w_s8KxS]
                                    let {
                                      sat_s8KxV [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                      [LclId] =
                                          CCCS GHC.IO.Buffer.Buffer! [dt5_s8Kxs
                                                                      dt6_s8Kxt
                                                                      ds1_s8Kxu
                                                                      dt7_s8Kxv
                                                                      dt8_s8Kxw
                                                                      ww1_s8KxR]; } in
                                    let {
                                      sat_s8KxU [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                      [LclId] =
                                          [dt_s8Kxl
                                           dt1_s8Kxm
                                           ds_s8Kxn
                                           dt2_s8Kxo
                                           dt4_s8Kxq
                                           lvl6_s8Kxy
                                           ww_s8KxQ] \u []
                                              case ==# [ww_s8KxQ dt4_s8Kxq] of {
                                                __DEFAULT ->
                                                    GHC.IO.Buffer.Buffer [dt_s8Kxl
                                                                          dt1_s8Kxm
                                                                          ds_s8Kxn
                                                                          dt2_s8Kxo
                                                                          ww_s8KxQ
                                                                          dt4_s8Kxq];
                                                1# -> lvl6_s8Kxy;
                                              }; } in
                                    let {
                                      sat_s8KxW [Occ=Once]
                                        :: (GHC.IO.Encoding.Types.CodingProgress,
                                            GHC.IO.Buffer.Buffer GHC.Types.Char,
                                            GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                      [LclId] =
                                          CCCS (,,)! [GHC.IO.Encoding.Types.OutputUnderflow
                                                      sat_s8KxU
                                                      sat_s8KxV];
                                    } in  (#,#) [w_s8KxS sat_s8KxW];
                          } in 
                            let-no-escape {
                              $wloop_s8KxX [InlPrag=NOUSERINLINE[0], Occ=LoopBreakerT[3]]
                                :: GHC.Prim.Int#
                                   -> GHC.Prim.Int#
                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         (GHC.IO.Encoding.Types.CodingProgress,
                                          GHC.IO.Buffer.Buffer GHC.Types.Char,
                                          GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                              [LclId[JoinId(3)], Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
                                  sat-only [dt_s8Kxl
                                            dt1_s8Kxm
                                            dt4_s8Kxq
                                            dt5_s8Kxs
                                            dt6_s8Kxt
                                            dt7_s8Kxv
                                            exit_s8Kxz
                                            exit1_s8KxH
                                            exit2_s8KxP
                                            $wloop_s8KxX] \r [ww_s8KxY ww1_s8KxZ w_s8Ky0]
                                      case >=# [ww1_s8KxZ dt7_s8Kxv] of {
                                        __DEFAULT ->
                                            case >=# [ww_s8KxY dt4_s8Kxq] of {
                                              __DEFAULT ->
                                                  case
                                                      readWideCharOffAddr# [dt_s8Kxl
                                                                            ww_s8KxY
                                                                            w_s8Ky0]
                                                  of
                                                  { (#,#) ipv_s8Ky4 [Occ=Once] ipv1_s8Ky5 ->
                                                        case
                                                            touch# [dt1_s8Kxm ipv_s8Ky4]
                                                        of
                                                        s'_s8Ky6
                                                        { __DEFAULT ->
                                                              case ord# [ipv1_s8Ky5] of sat_s8Ky7 {
                                                                __DEFAULT ->
                                                                    case ># [sat_s8Ky7 127#] of {
                                                                      __DEFAULT ->
                                                                          case
                                                                              ord# [ipv1_s8Ky5]
                                                                          of
                                                                          sat_s8Kya
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    int2Word# [sat_s8Kya]
                                                                                of
                                                                                sat_s8Kyb
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          narrow8Word# [sat_s8Kyb]
                                                                                      of
                                                                                      sat_s8Kyc
                                                                                      { __DEFAULT ->
                                                                                            case
                                                                                                plusAddr# [dt5_s8Kxs
                                                                                                           ww1_s8KxZ]
                                                                                            of
                                                                                            sat_s8Ky9
                                                                                            { __DEFAULT ->
                                                                                                  case
                                                                                                      writeWord8OffAddr# [sat_s8Ky9
                                                                                                                          0#
                                                                                                                          sat_s8Kyc
                                                                                                                          s'_s8Ky6]
                                                                                                  of
                                                                                                  s2_s8Kyd
                                                                                                  { __DEFAULT ->
                                                                                                        case
                                                                                                            touch# [dt6_s8Kxt
                                                                                                                    s2_s8Kyd]
                                                                                                        of
                                                                                                        s'1_s8Kye
                                                                                                        { __DEFAULT ->
                                                                                                              case
                                                                                                                  +# [ww1_s8KxZ
                                                                                                                      1#]
                                                                                                              of
                                                                                                              sat_s8Kyg
                                                                                                              { __DEFAULT ->
                                                                                                                    case
                                                                                                                        +# [ww_s8KxY
                                                                                                                            1#]
                                                                                                                    of
                                                                                                                    sat_s8Kyf
                                                                                                                    { __DEFAULT ->
                                                                                                                          $wloop_s8KxX
                                                                                                                              sat_s8Kyf
                                                                                                                              sat_s8Kyg
                                                                                                                              s'1_s8Kye;
                                                                                                                    };
                                                                                                              };
                                                                                                        };
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                                };
                                                                          };
                                                                      1# ->
                                                                          exit_s8Kxz
                                                                              ww_s8KxY
                                                                              ww1_s8KxZ
                                                                              s'_s8Ky6;
                                                                    };
                                                              };
                                                        };
                                                  };
                                              1# -> exit1_s8KxH ww_s8KxY ww1_s8KxZ w_s8Ky0;
                                            };
                                        1# -> exit2_s8KxP ww_s8KxY ww1_s8KxZ w_s8Ky0;
                                      };
                            } in  $wloop_s8KxX dt3_s8Kxp dt9_s8Kxx eta_s8Kxj;
              };
        };

GHC.IO.Encoding.Latin1.ascii_encode
  :: GHC.IO.Encoding.Types.EncodeBuffer
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Encoding.Latin1.ascii3 eta_B3 eta_B2 eta_B1;

GHC.IO.Encoding.Latin1.latin1_checked2
  :: GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Encoding.Types.CodingProgress,
            GHC.IO.Buffer.Buffer GHC.Types.Char,
            GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [input_s8Kyh output_s8Kyi eta_s8Kyj]
        case input_s8Kyh of {
          GHC.IO.Buffer.Buffer dt_s8Kyl
                               dt1_s8Kym
                               ds_s8Kyn
                               dt2_s8Kyo
                               dt3_s8Kyp [Occ=Once]
                               dt4_s8Kyq ->
              case output_s8Kyi of {
                GHC.IO.Buffer.Buffer dt5_s8Kys
                                     dt6_s8Kyt
                                     ds1_s8Kyu
                                     dt7_s8Kyv
                                     dt8_s8Kyw
                                     dt9_s8Kyx [Occ=Once] ->
                    let {
                      lvl6_s8Kyy :: GHC.IO.Buffer.Buffer GHC.Types.Char
                      [LclId, Unf=OtherCon []] =
                          CCCS GHC.IO.Buffer.Buffer! [dt_s8Kyl
                                                      dt1_s8Kym
                                                      ds_s8Kyn
                                                      dt2_s8Kyo
                                                      0#
                                                      0#];
                    } in 
                      let-no-escape {
                        exit_s8Kyz [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                          :: GHC.Prim.Int#
                             -> GHC.Prim.Int#
                             -> GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                   (GHC.IO.Encoding.Types.CodingProgress,
                                    GHC.IO.Buffer.Buffer GHC.Types.Char,
                                    GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                        [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                            sat-only [dt_s8Kyl
                                      dt1_s8Kym
                                      ds_s8Kyn
                                      dt2_s8Kyo
                                      dt4_s8Kyq
                                      dt5_s8Kys
                                      dt6_s8Kyt
                                      ds1_s8Kyu
                                      dt7_s8Kyv
                                      dt8_s8Kyw
                                      lvl6_s8Kyy] \r [ww_s8KyA ww1_s8KyB s'_s8KyC]
                                let {
                                  sat_s8KyF [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                  [LclId] =
                                      CCCS GHC.IO.Buffer.Buffer! [dt5_s8Kys
                                                                  dt6_s8Kyt
                                                                  ds1_s8Kyu
                                                                  dt7_s8Kyv
                                                                  dt8_s8Kyw
                                                                  ww1_s8KyB]; } in
                                let {
                                  sat_s8KyE [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                  [LclId] =
                                      [dt_s8Kyl
                                       dt1_s8Kym
                                       ds_s8Kyn
                                       dt2_s8Kyo
                                       dt4_s8Kyq
                                       lvl6_s8Kyy
                                       ww_s8KyA] \u []
                                          case ==# [ww_s8KyA dt4_s8Kyq] of {
                                            __DEFAULT ->
                                                GHC.IO.Buffer.Buffer [dt_s8Kyl
                                                                      dt1_s8Kym
                                                                      ds_s8Kyn
                                                                      dt2_s8Kyo
                                                                      ww_s8KyA
                                                                      dt4_s8Kyq];
                                            1# -> lvl6_s8Kyy;
                                          }; } in
                                let {
                                  sat_s8KyG [Occ=Once]
                                    :: (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                  [LclId] =
                                      CCCS (,,)! [GHC.IO.Encoding.Types.InvalidSequence
                                                  sat_s8KyE
                                                  sat_s8KyF];
                                } in  (#,#) [s'_s8KyC sat_s8KyG];
                      } in 
                        let-no-escape {
                          exit1_s8KyH [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                            :: GHC.Prim.Int#
                               -> GHC.Prim.Int#
                               -> GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     (GHC.IO.Encoding.Types.CodingProgress,
                                      GHC.IO.Buffer.Buffer GHC.Types.Char,
                                      GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                          [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                              sat-only [dt_s8Kyl
                                        dt1_s8Kym
                                        ds_s8Kyn
                                        dt2_s8Kyo
                                        dt4_s8Kyq
                                        dt5_s8Kys
                                        dt6_s8Kyt
                                        ds1_s8Kyu
                                        dt7_s8Kyv
                                        dt8_s8Kyw
                                        lvl6_s8Kyy] \r [ww_s8KyI ww1_s8KyJ w_s8KyK]
                                  let {
                                    sat_s8KyN [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                    [LclId] =
                                        CCCS GHC.IO.Buffer.Buffer! [dt5_s8Kys
                                                                    dt6_s8Kyt
                                                                    ds1_s8Kyu
                                                                    dt7_s8Kyv
                                                                    dt8_s8Kyw
                                                                    ww1_s8KyJ]; } in
                                  let {
                                    sat_s8KyM [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                    [LclId] =
                                        [dt_s8Kyl
                                         dt1_s8Kym
                                         ds_s8Kyn
                                         dt2_s8Kyo
                                         dt4_s8Kyq
                                         lvl6_s8Kyy
                                         ww_s8KyI] \u []
                                            case ==# [ww_s8KyI dt4_s8Kyq] of {
                                              __DEFAULT ->
                                                  GHC.IO.Buffer.Buffer [dt_s8Kyl
                                                                        dt1_s8Kym
                                                                        ds_s8Kyn
                                                                        dt2_s8Kyo
                                                                        ww_s8KyI
                                                                        dt4_s8Kyq];
                                              1# -> lvl6_s8Kyy;
                                            }; } in
                                  let {
                                    sat_s8KyO [Occ=Once]
                                      :: (GHC.IO.Encoding.Types.CodingProgress,
                                          GHC.IO.Buffer.Buffer GHC.Types.Char,
                                          GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                    [LclId] =
                                        CCCS (,,)! [GHC.IO.Encoding.Types.InputUnderflow
                                                    sat_s8KyM
                                                    sat_s8KyN];
                                  } in  (#,#) [w_s8KyK sat_s8KyO];
                        } in 
                          let-no-escape {
                            exit2_s8KyP [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                              :: GHC.Prim.Int#
                                 -> GHC.Prim.Int#
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                       (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                            [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                                sat-only [dt_s8Kyl
                                          dt1_s8Kym
                                          ds_s8Kyn
                                          dt2_s8Kyo
                                          dt4_s8Kyq
                                          dt5_s8Kys
                                          dt6_s8Kyt
                                          ds1_s8Kyu
                                          dt7_s8Kyv
                                          dt8_s8Kyw
                                          lvl6_s8Kyy] \r [ww_s8KyQ ww1_s8KyR w_s8KyS]
                                    let {
                                      sat_s8KyV [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                      [LclId] =
                                          CCCS GHC.IO.Buffer.Buffer! [dt5_s8Kys
                                                                      dt6_s8Kyt
                                                                      ds1_s8Kyu
                                                                      dt7_s8Kyv
                                                                      dt8_s8Kyw
                                                                      ww1_s8KyR]; } in
                                    let {
                                      sat_s8KyU [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                      [LclId] =
                                          [dt_s8Kyl
                                           dt1_s8Kym
                                           ds_s8Kyn
                                           dt2_s8Kyo
                                           dt4_s8Kyq
                                           lvl6_s8Kyy
                                           ww_s8KyQ] \u []
                                              case ==# [ww_s8KyQ dt4_s8Kyq] of {
                                                __DEFAULT ->
                                                    GHC.IO.Buffer.Buffer [dt_s8Kyl
                                                                          dt1_s8Kym
                                                                          ds_s8Kyn
                                                                          dt2_s8Kyo
                                                                          ww_s8KyQ
                                                                          dt4_s8Kyq];
                                                1# -> lvl6_s8Kyy;
                                              }; } in
                                    let {
                                      sat_s8KyW [Occ=Once]
                                        :: (GHC.IO.Encoding.Types.CodingProgress,
                                            GHC.IO.Buffer.Buffer GHC.Types.Char,
                                            GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                      [LclId] =
                                          CCCS (,,)! [GHC.IO.Encoding.Types.OutputUnderflow
                                                      sat_s8KyU
                                                      sat_s8KyV];
                                    } in  (#,#) [w_s8KyS sat_s8KyW];
                          } in 
                            let-no-escape {
                              $wloop_s8KyX [InlPrag=NOUSERINLINE[0], Occ=LoopBreakerT[3]]
                                :: GHC.Prim.Int#
                                   -> GHC.Prim.Int#
                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         (GHC.IO.Encoding.Types.CodingProgress,
                                          GHC.IO.Buffer.Buffer GHC.Types.Char,
                                          GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                              [LclId[JoinId(3)], Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
                                  sat-only [dt_s8Kyl
                                            dt1_s8Kym
                                            dt4_s8Kyq
                                            dt5_s8Kys
                                            dt6_s8Kyt
                                            dt7_s8Kyv
                                            exit_s8Kyz
                                            exit1_s8KyH
                                            exit2_s8KyP
                                            $wloop_s8KyX] \r [ww_s8KyY ww1_s8KyZ w_s8Kz0]
                                      case >=# [ww1_s8KyZ dt7_s8Kyv] of {
                                        __DEFAULT ->
                                            case >=# [ww_s8KyY dt4_s8Kyq] of {
                                              __DEFAULT ->
                                                  case
                                                      readWideCharOffAddr# [dt_s8Kyl
                                                                            ww_s8KyY
                                                                            w_s8Kz0]
                                                  of
                                                  { (#,#) ipv_s8Kz4 [Occ=Once] ipv1_s8Kz5 ->
                                                        case
                                                            touch# [dt1_s8Kym ipv_s8Kz4]
                                                        of
                                                        s'_s8Kz6
                                                        { __DEFAULT ->
                                                              case ord# [ipv1_s8Kz5] of sat_s8Kz7 {
                                                                __DEFAULT ->
                                                                    case ># [sat_s8Kz7 255#] of {
                                                                      __DEFAULT ->
                                                                          case
                                                                              ord# [ipv1_s8Kz5]
                                                                          of
                                                                          sat_s8Kza
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    int2Word# [sat_s8Kza]
                                                                                of
                                                                                sat_s8Kzb
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          narrow8Word# [sat_s8Kzb]
                                                                                      of
                                                                                      sat_s8Kzc
                                                                                      { __DEFAULT ->
                                                                                            case
                                                                                                plusAddr# [dt5_s8Kys
                                                                                                           ww1_s8KyZ]
                                                                                            of
                                                                                            sat_s8Kz9
                                                                                            { __DEFAULT ->
                                                                                                  case
                                                                                                      writeWord8OffAddr# [sat_s8Kz9
                                                                                                                          0#
                                                                                                                          sat_s8Kzc
                                                                                                                          s'_s8Kz6]
                                                                                                  of
                                                                                                  s2_s8Kzd
                                                                                                  { __DEFAULT ->
                                                                                                        case
                                                                                                            touch# [dt6_s8Kyt
                                                                                                                    s2_s8Kzd]
                                                                                                        of
                                                                                                        s'1_s8Kze
                                                                                                        { __DEFAULT ->
                                                                                                              case
                                                                                                                  +# [ww1_s8KyZ
                                                                                                                      1#]
                                                                                                              of
                                                                                                              sat_s8Kzg
                                                                                                              { __DEFAULT ->
                                                                                                                    case
                                                                                                                        +# [ww_s8KyY
                                                                                                                            1#]
                                                                                                                    of
                                                                                                                    sat_s8Kzf
                                                                                                                    { __DEFAULT ->
                                                                                                                          $wloop_s8KyX
                                                                                                                              sat_s8Kzf
                                                                                                                              sat_s8Kzg
                                                                                                                              s'1_s8Kze;
                                                                                                                    };
                                                                                                              };
                                                                                                        };
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                                };
                                                                          };
                                                                      1# ->
                                                                          exit_s8Kyz
                                                                              ww_s8KyY
                                                                              ww1_s8KyZ
                                                                              s'_s8Kz6;
                                                                    };
                                                              };
                                                        };
                                                  };
                                              1# -> exit1_s8KyH ww_s8KyY ww1_s8KyZ w_s8Kz0;
                                            };
                                        1# -> exit2_s8KyP ww_s8KyY ww1_s8KyZ w_s8Kz0;
                                      };
                            } in  $wloop_s8KyX dt3_s8Kyp dt9_s8Kyx eta_s8Kyj;
              };
        };

GHC.IO.Encoding.Latin1.latin1_checked_encode
  :: GHC.IO.Encoding.Types.EncodeBuffer
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Encoding.Latin1.latin1_checked2 eta_B3 eta_B2 eta_B1;

GHC.IO.Encoding.Latin1.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.Encoding.Latin1.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Latin1.$trModule4];

GHC.IO.Encoding.Latin1.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Encoding.Latin1"#;

GHC.IO.Encoding.Latin1.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Latin1.$trModule2];

GHC.IO.Encoding.Latin1.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Encoding.Latin1.$trModule3
                                     GHC.IO.Encoding.Latin1.$trModule1];

GHC.IO.Encoding.Latin1.ascii7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ASCII"#;

GHC.IO.Encoding.Latin1.ascii6 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Encoding.Latin1.ascii7;

GHC.IO.Encoding.Latin1.mkAscii2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s8Kzh] (#,#) [s_s8Kzh GHC.Tuple.()];

GHC.IO.Encoding.Latin1.mkAscii1
  :: ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><S,U>, Unf=OtherCon []] =
    [] \r [ds_s8Kzi eta_s8Kzj] (#,#) [eta_s8Kzj GHC.Tuple.()];

GHC.IO.Encoding.Latin1.mkAscii
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.IO.Encoding.Types.TextEncoding
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [cfm_s8Kzk]
        let {
          sat_s8Kzs [Occ=Once]
            :: GHC.Types.IO (GHC.IO.Encoding.Types.TextEncoder ())
          [LclId] =
              [cfm_s8Kzk] \r [s_s8Kzp]
                  let {
                    sat_s8Kzq [Occ=Once]
                      :: GHC.IO.Buffer.Buffer GHC.Types.Char
                         -> GHC.IO.Buffer.Buffer GHC.Word.Word8
                         -> GHC.Types.IO
                              (GHC.IO.Buffer.Buffer GHC.Types.Char,
                               GHC.IO.Buffer.Buffer GHC.Word.Word8)
                    [LclId] =
                        [cfm_s8Kzk] \r [eta_B3 eta_B2 eta_B1]
                            GHC.IO.Encoding.Failure.recoverEncode1
                                cfm_s8Kzk eta_B3 eta_B2 eta_B1; } in
                  let {
                    sat_s8Kzr [Occ=Once]
                      :: GHC.IO.Encoding.Types.BufferCodec
                           GHC.Types.Char GHC.Word.Word8 ()
                    [LclId] =
                        CCCS GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.ascii3
                                                                 sat_s8Kzq
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii1];
                  } in  (#,#) [s_s8Kzp sat_s8Kzr]; } in
        let {
          sat_s8Kzo [Occ=Once]
            :: GHC.Types.IO (GHC.IO.Encoding.Types.TextDecoder ())
          [LclId] =
              [cfm_s8Kzk] \r [s_s8Kzl]
                  let {
                    sat_s8Kzm [Occ=Once]
                      :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                         -> GHC.IO.Buffer.Buffer GHC.Types.Char
                         -> GHC.Types.IO
                              (GHC.IO.Buffer.Buffer GHC.Word.Word8,
                               GHC.IO.Buffer.Buffer GHC.Types.Char)
                    [LclId] =
                        [cfm_s8Kzk] \r [eta_B3 eta_B2 eta_B1]
                            GHC.IO.Encoding.Failure.recoverDecode1
                                cfm_s8Kzk eta_B3 eta_B2 eta_B1; } in
                  let {
                    sat_s8Kzn [Occ=Once]
                      :: GHC.IO.Encoding.Types.BufferCodec
                           GHC.Word.Word8 GHC.Types.Char ()
                    [LclId] =
                        CCCS GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.ascii5
                                                                 sat_s8Kzm
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii1];
                  } in  (#,#) [s_s8Kzl sat_s8Kzn];
        } in 
          GHC.IO.Encoding.Types.TextEncoding [GHC.IO.Encoding.Latin1.ascii6
                                              sat_s8Kzo
                                              sat_s8Kzs];

lvl_r8Kux
  :: GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Buffer.Buffer GHC.Word.Word8,
            GHC.IO.Buffer.Buffer GHC.Types.Char) #)
[GblId, Arity=3, Str=<B,1*H><B,1*H><B,U>x, Unf=OtherCon []] =
    [] \r [input_s8Kzt output_s8Kzu eta_s8Kzv]
        case input_s8Kzt of {
          GHC.IO.Buffer.Buffer _ [Occ=Dead]
                               _ [Occ=Dead]
                               _ [Occ=Dead]
                               _ [Occ=Dead]
                               _ [Occ=Dead]
                               _ [Occ=Dead] ->
              case output_s8Kzu of {
                GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                     _ [Occ=Dead]
                                     _ [Occ=Dead]
                                     _ [Occ=Dead]
                                     _ [Occ=Dead]
                                     _ [Occ=Dead] ->
                    raiseIO# [GHC.IO.Encoding.Failure.recoverDecode2 eta_s8Kzv];
              };
        };

lvl1_r8Kuy
  :: GHC.IO.Encoding.Types.BufferCodec
       GHC.Word.Word8 GHC.Types.Char ()
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.ascii5
                                                      lvl_r8Kux
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii1];

GHC.IO.Encoding.Latin1.ascii4
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.BufferCodec
             GHC.Word.Word8 GHC.Types.Char () #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s8KzK] (#,#) [s_s8KzK lvl1_r8Kuy];

GHC.IO.Encoding.Latin1.ascii2
  :: GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Buffer.Buffer GHC.Types.Char,
            GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=3,
 Str=<B,1*U(U,U,A,A,U,A)><B,1*H><B,U>x,
 Unf=OtherCon []] =
    [] \r [input_s8KzL output_s8KzM eta_s8KzN]
        case input_s8KzL of {
          GHC.IO.Buffer.Buffer dt_s8KzP [Occ=Once]
                               dt1_s8KzQ [Occ=Once]
                               _ [Occ=Dead]
                               _ [Occ=Dead]
                               dt3_s8KzT [Occ=Once]
                               _ [Occ=Dead] ->
              case output_s8KzM of {
                GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                     _ [Occ=Dead]
                                     _ [Occ=Dead]
                                     _ [Occ=Dead]
                                     _ [Occ=Dead]
                                     _ [Occ=Dead] ->
                    case readWideCharOffAddr# [dt_s8KzP dt3_s8KzT eta_s8KzN] of {
                      (#,#) ipv_s8KA3 [Occ=Once] _ [Occ=Dead] ->
                          case touch# [dt1_s8KzQ ipv_s8KA3] of s'_s8KA5 {
                            __DEFAULT ->
                                raiseIO# [GHC.IO.Encoding.Failure.recoverEncode2 s'_s8KA5];
                          };
                    };
              };
        };

lvl2_r8Kuz
  :: GHC.IO.Encoding.Types.BufferCodec
       GHC.Types.Char GHC.Word.Word8 ()
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.ascii3
                                                      GHC.IO.Encoding.Latin1.ascii2
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii1];

GHC.IO.Encoding.Latin1.ascii1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.BufferCodec
             GHC.Types.Char GHC.Word.Word8 () #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s8KA6] (#,#) [s_s8KA6 lvl2_r8Kuz];

GHC.IO.Encoding.Latin1.ascii :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.TextEncoding! [GHC.IO.Encoding.Latin1.ascii6
                                                       GHC.IO.Encoding.Latin1.ascii4
                                                       GHC.IO.Encoding.Latin1.ascii1];

GHC.IO.Encoding.Latin1.latin7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ISO-8859-1"#;

GHC.IO.Encoding.Latin1.latin6 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Encoding.Latin1.latin7;

GHC.IO.Encoding.Latin1.mkLatin1_checked
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.IO.Encoding.Types.TextEncoding
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [cfm_s8KA7]
        let {
          sat_s8KAf [Occ=Once]
            :: GHC.Types.IO (GHC.IO.Encoding.Types.TextEncoder ())
          [LclId] =
              [cfm_s8KA7] \r [s_s8KAc]
                  let {
                    sat_s8KAd [Occ=Once]
                      :: GHC.IO.Buffer.Buffer GHC.Types.Char
                         -> GHC.IO.Buffer.Buffer GHC.Word.Word8
                         -> GHC.Types.IO
                              (GHC.IO.Buffer.Buffer GHC.Types.Char,
                               GHC.IO.Buffer.Buffer GHC.Word.Word8)
                    [LclId] =
                        [cfm_s8KA7] \r [eta_B3 eta_B2 eta_B1]
                            GHC.IO.Encoding.Failure.recoverEncode1
                                cfm_s8KA7 eta_B3 eta_B2 eta_B1; } in
                  let {
                    sat_s8KAe [Occ=Once]
                      :: GHC.IO.Encoding.Types.BufferCodec
                           GHC.Types.Char GHC.Word.Word8 ()
                    [LclId] =
                        CCCS GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.latin1_checked2
                                                                 sat_s8KAd
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii1];
                  } in  (#,#) [s_s8KAc sat_s8KAe]; } in
        let {
          sat_s8KAb [Occ=Once]
            :: GHC.Types.IO (GHC.IO.Encoding.Types.TextDecoder ())
          [LclId] =
              [cfm_s8KA7] \r [s_s8KA8]
                  let {
                    sat_s8KA9 [Occ=Once]
                      :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                         -> GHC.IO.Buffer.Buffer GHC.Types.Char
                         -> GHC.Types.IO
                              (GHC.IO.Buffer.Buffer GHC.Word.Word8,
                               GHC.IO.Buffer.Buffer GHC.Types.Char)
                    [LclId] =
                        [cfm_s8KA7] \r [eta_B3 eta_B2 eta_B1]
                            GHC.IO.Encoding.Failure.recoverDecode1
                                cfm_s8KA7 eta_B3 eta_B2 eta_B1; } in
                  let {
                    sat_s8KAa [Occ=Once]
                      :: GHC.IO.Encoding.Types.BufferCodec
                           GHC.Word.Word8 GHC.Types.Char ()
                    [LclId] =
                        CCCS GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.latin5
                                                                 sat_s8KA9
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii1];
                  } in  (#,#) [s_s8KA8 sat_s8KAa];
        } in 
          GHC.IO.Encoding.Types.TextEncoding [GHC.IO.Encoding.Latin1.latin6
                                              sat_s8KAb
                                              sat_s8KAf];

lvl3_r8KuA
  :: GHC.IO.Encoding.Types.BufferCodec
       GHC.Word.Word8 GHC.Types.Char ()
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.latin5
                                                      lvl_r8Kux
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii1];

GHC.IO.Encoding.Latin1.latin4
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.BufferCodec
             GHC.Word.Word8 GHC.Types.Char () #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s8KAg] (#,#) [s_s8KAg lvl3_r8KuA];

lvl4_r8KuB
  :: GHC.IO.Encoding.Types.BufferCodec
       GHC.Types.Char GHC.Word.Word8 ()
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.latin1_checked2
                                                      GHC.IO.Encoding.Latin1.ascii2
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii1];

GHC.IO.Encoding.Latin1.latin1_checked1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.BufferCodec
             GHC.Types.Char GHC.Word.Word8 () #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s8KAh] (#,#) [s_s8KAh lvl4_r8KuB];

GHC.IO.Encoding.Latin1.latin1_checked
  :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.TextEncoding! [GHC.IO.Encoding.Latin1.latin6
                                                       GHC.IO.Encoding.Latin1.latin4
                                                       GHC.IO.Encoding.Latin1.latin1_checked1];

GHC.IO.Encoding.Latin1.mkLatin1
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.IO.Encoding.Types.TextEncoding
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [cfm_s8KAi]
        let {
          sat_s8KAq [Occ=Once]
            :: GHC.Types.IO (GHC.IO.Encoding.Types.TextEncoder ())
          [LclId] =
              [cfm_s8KAi] \r [s_s8KAn]
                  let {
                    sat_s8KAo [Occ=Once]
                      :: GHC.IO.Buffer.Buffer GHC.Types.Char
                         -> GHC.IO.Buffer.Buffer GHC.Word.Word8
                         -> GHC.Types.IO
                              (GHC.IO.Buffer.Buffer GHC.Types.Char,
                               GHC.IO.Buffer.Buffer GHC.Word.Word8)
                    [LclId] =
                        [cfm_s8KAi] \r [eta_B3 eta_B2 eta_B1]
                            GHC.IO.Encoding.Failure.recoverEncode1
                                cfm_s8KAi eta_B3 eta_B2 eta_B1; } in
                  let {
                    sat_s8KAp [Occ=Once]
                      :: GHC.IO.Encoding.Types.BufferCodec
                           GHC.Types.Char GHC.Word.Word8 ()
                    [LclId] =
                        CCCS GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.latin3
                                                                 sat_s8KAo
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii1];
                  } in  (#,#) [s_s8KAn sat_s8KAp]; } in
        let {
          sat_s8KAm [Occ=Once]
            :: GHC.Types.IO (GHC.IO.Encoding.Types.TextDecoder ())
          [LclId] =
              [cfm_s8KAi] \r [s_s8KAj]
                  let {
                    sat_s8KAk [Occ=Once]
                      :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                         -> GHC.IO.Buffer.Buffer GHC.Types.Char
                         -> GHC.Types.IO
                              (GHC.IO.Buffer.Buffer GHC.Word.Word8,
                               GHC.IO.Buffer.Buffer GHC.Types.Char)
                    [LclId] =
                        [cfm_s8KAi] \r [eta_B3 eta_B2 eta_B1]
                            GHC.IO.Encoding.Failure.recoverDecode1
                                cfm_s8KAi eta_B3 eta_B2 eta_B1; } in
                  let {
                    sat_s8KAl [Occ=Once]
                      :: GHC.IO.Encoding.Types.BufferCodec
                           GHC.Word.Word8 GHC.Types.Char ()
                    [LclId] =
                        CCCS GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.latin5
                                                                 sat_s8KAk
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii1];
                  } in  (#,#) [s_s8KAj sat_s8KAl];
        } in 
          GHC.IO.Encoding.Types.TextEncoding [GHC.IO.Encoding.Latin1.latin6
                                              sat_s8KAm
                                              sat_s8KAq];

lvl5_r8KuC
  :: GHC.IO.Encoding.Types.BufferCodec
       GHC.Types.Char GHC.Word.Word8 ()
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.latin3
                                                      GHC.IO.Encoding.Latin1.ascii2
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii1];

GHC.IO.Encoding.Latin1.latin2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.BufferCodec
             GHC.Types.Char GHC.Word.Word8 () #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s8KAr] (#,#) [s_s8KAr lvl5_r8KuC];

GHC.IO.Encoding.Latin1.latin1 :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.TextEncoding! [GHC.IO.Encoding.Latin1.latin6
                                                       GHC.IO.Encoding.Latin1.latin4
                                                       GHC.IO.Encoding.Latin1.latin2];


==================== STG syntax: ====================
2018-03-16 16:03:54.315981844 UTC

GHC.IO.Encoding.Latin1.latin5
  :: GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Encoding.Types.CodingProgress,
            GHC.IO.Buffer.Buffer GHC.Word.Word8,
            GHC.IO.Buffer.Buffer GHC.Types.Char) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [input_s8KuE output_s8KuF void_0E]
        case input_s8KuE of {
          GHC.IO.Buffer.Buffer dt_s8KuI
                               dt1_s8KuJ
                               ds_s8KuK
                               dt2_s8KuL
                               dt3_s8KuM [Occ=Once]
                               dt4_s8KuN ->
              case output_s8KuF of {
                GHC.IO.Buffer.Buffer dt5_s8KuP
                                     dt6_s8KuQ
                                     ds1_s8KuR
                                     dt7_s8KuS
                                     dt8_s8KuT
                                     dt9_s8KuU [Occ=Once] ->
                    let {
                      lvl6_s8KuV :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                      [LclId, Unf=OtherCon []] =
                          CCCS GHC.IO.Buffer.Buffer! [dt_s8KuI
                                                      dt1_s8KuJ
                                                      ds_s8KuK
                                                      dt2_s8KuL
                                                      0#
                                                      0#];
                    } in 
                      let-no-escape {
                        exit_s8KuW [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                          :: GHC.Prim.Int#
                             -> GHC.Prim.Int#
                             -> GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                   (GHC.IO.Encoding.Types.CodingProgress,
                                    GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                    GHC.IO.Buffer.Buffer GHC.Types.Char) #)
                        [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                            sat-only [dt_s8KuI
                                      dt1_s8KuJ
                                      ds_s8KuK
                                      dt2_s8KuL
                                      dt4_s8KuN
                                      dt5_s8KuP
                                      dt6_s8KuQ
                                      ds1_s8KuR
                                      dt7_s8KuS
                                      dt8_s8KuT
                                      lvl6_s8KuV] \r [ww_s8KuX ww1_s8KuY void_0E]
                                let {
                                  sat_s8Kv2 [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                  [LclId] =
                                      CCCS GHC.IO.Buffer.Buffer! [dt5_s8KuP
                                                                  dt6_s8KuQ
                                                                  ds1_s8KuR
                                                                  dt7_s8KuS
                                                                  dt8_s8KuT
                                                                  ww1_s8KuY]; } in
                                let {
                                  sat_s8Kv1 [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                  [LclId] =
                                      [dt_s8KuI
                                       dt1_s8KuJ
                                       ds_s8KuK
                                       dt2_s8KuL
                                       dt4_s8KuN
                                       lvl6_s8KuV
                                       ww_s8KuX] \u []
                                          case ==# [ww_s8KuX dt4_s8KuN] of {
                                            __DEFAULT ->
                                                GHC.IO.Buffer.Buffer [dt_s8KuI
                                                                      dt1_s8KuJ
                                                                      ds_s8KuK
                                                                      dt2_s8KuL
                                                                      ww_s8KuX
                                                                      dt4_s8KuN];
                                            1# -> lvl6_s8KuV;
                                          }; } in
                                let {
                                  sat_s8Kv3 [Occ=Once]
                                    :: (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char)
                                  [LclId] =
                                      CCCS (,,)! [GHC.IO.Encoding.Types.InputUnderflow
                                                  sat_s8Kv1
                                                  sat_s8Kv2];
                                } in  Unit# [sat_s8Kv3];
                      } in 
                        let-no-escape {
                          exit1_s8Kv4 [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                            :: GHC.Prim.Int#
                               -> GHC.Prim.Int#
                               -> GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     (GHC.IO.Encoding.Types.CodingProgress,
                                      GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                      GHC.IO.Buffer.Buffer GHC.Types.Char) #)
                          [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                              sat-only [dt_s8KuI
                                        dt1_s8KuJ
                                        ds_s8KuK
                                        dt2_s8KuL
                                        dt4_s8KuN
                                        dt5_s8KuP
                                        dt6_s8KuQ
                                        ds1_s8KuR
                                        dt7_s8KuS
                                        dt8_s8KuT
                                        lvl6_s8KuV] \r [ww_s8Kv5 ww1_s8Kv6 void_0E]
                                  let {
                                    sat_s8Kva [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                    [LclId] =
                                        CCCS GHC.IO.Buffer.Buffer! [dt5_s8KuP
                                                                    dt6_s8KuQ
                                                                    ds1_s8KuR
                                                                    dt7_s8KuS
                                                                    dt8_s8KuT
                                                                    ww1_s8Kv6]; } in
                                  let {
                                    sat_s8Kv9 [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                    [LclId] =
                                        [dt_s8KuI
                                         dt1_s8KuJ
                                         ds_s8KuK
                                         dt2_s8KuL
                                         dt4_s8KuN
                                         lvl6_s8KuV
                                         ww_s8Kv5] \u []
                                            case ==# [ww_s8Kv5 dt4_s8KuN] of {
                                              __DEFAULT ->
                                                  GHC.IO.Buffer.Buffer [dt_s8KuI
                                                                        dt1_s8KuJ
                                                                        ds_s8KuK
                                                                        dt2_s8KuL
                                                                        ww_s8Kv5
                                                                        dt4_s8KuN];
                                              1# -> lvl6_s8KuV;
                                            }; } in
                                  let {
                                    sat_s8Kvb [Occ=Once]
                                      :: (GHC.IO.Encoding.Types.CodingProgress,
                                          GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                          GHC.IO.Buffer.Buffer GHC.Types.Char)
                                    [LclId] =
                                        CCCS (,,)! [GHC.IO.Encoding.Types.OutputUnderflow
                                                    sat_s8Kv9
                                                    sat_s8Kva];
                                  } in  Unit# [sat_s8Kvb];
                        } in 
                          let-no-escape {
                            $wloop_s8Kvc [InlPrag=NOUSERINLINE[0], Occ=LoopBreakerT[3]]
                              :: GHC.Prim.Int#
                                 -> GHC.Prim.Int#
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                       (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char) #)
                            [LclId[JoinId(3)], Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
                                sat-only [dt_s8KuI
                                          dt1_s8KuJ
                                          dt4_s8KuN
                                          dt5_s8KuP
                                          dt6_s8KuQ
                                          dt7_s8KuS
                                          exit_s8KuW
                                          exit1_s8Kv4
                                          $wloop_s8Kvc] \r [ww_s8Kvd ww1_s8Kve void_0E]
                                    case >=# [ww1_s8Kve dt7_s8KuS] of {
                                      __DEFAULT ->
                                          case >=# [ww_s8Kvd dt4_s8KuN] of {
                                            __DEFAULT ->
                                                case plusAddr# [dt_s8KuI ww_s8Kvd] of sat_s8Kvi {
                                                  __DEFAULT ->
                                                      case
                                                          readWord8OffAddr# [sat_s8Kvi
                                                                             0#
                                                                             GHC.Prim.void#]
                                                      of
                                                      { Unit# ipv1_s8Kvl [Occ=Once] ->
                                                            case
                                                                touch# [dt1_s8KuJ GHC.Prim.void#]
                                                            of
                                                            s'_s8Kvm
                                                            { (##) ->
                                                                  case
                                                                      word2Int# [ipv1_s8Kvl]
                                                                  of
                                                                  sat_s8Kvn
                                                                  { __DEFAULT ->
                                                                        case
                                                                            chr# [sat_s8Kvn]
                                                                        of
                                                                        sat_s8Kvo
                                                                        { __DEFAULT ->
                                                                              case
                                                                                  writeWideCharOffAddr# [dt5_s8KuP
                                                                                                         ww1_s8Kve
                                                                                                         sat_s8Kvo
                                                                                                         GHC.Prim.void#]
                                                                              of
                                                                              s2_s8Kvp
                                                                              { (##) ->
                                                                                    case
                                                                                        touch# [dt6_s8KuQ
                                                                                                GHC.Prim.void#]
                                                                                    of
                                                                                    s'1_s8Kvq
                                                                                    { (##) ->
                                                                                          case
                                                                                              +# [ww1_s8Kve
                                                                                                  1#]
                                                                                          of
                                                                                          sat_s8Kvs
                                                                                          { __DEFAULT ->
                                                                                                case
                                                                                                    +# [ww_s8Kvd
                                                                                                        1#]
                                                                                                of
                                                                                                sat_s8Kvr
                                                                                                { __DEFAULT ->
                                                                                                      $wloop_s8Kvc
                                                                                                          sat_s8Kvr
                                                                                                          sat_s8Kvs
                                                                                                          GHC.Prim.void#;
                                                                                                };
                                                                                          };
                                                                                    };
                                                                              };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                            1# -> exit_s8KuW ww_s8Kvd ww1_s8Kve GHC.Prim.void#;
                                          };
                                      1# -> exit1_s8Kv4 ww_s8Kvd ww1_s8Kve GHC.Prim.void#;
                                    };
                          } in  $wloop_s8Kvc dt3_s8KuM dt9_s8KuU GHC.Prim.void#;
              };
        };

GHC.IO.Encoding.Latin1.latin1_decode
  :: GHC.IO.Encoding.Types.DecodeBuffer
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Encoding.Latin1.latin5 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Encoding.Latin1.ascii5
  :: GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Encoding.Types.CodingProgress,
            GHC.IO.Buffer.Buffer GHC.Word.Word8,
            GHC.IO.Buffer.Buffer GHC.Types.Char) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [input_s8Kvt output_s8Kvu void_0E]
        case input_s8Kvt of {
          GHC.IO.Buffer.Buffer dt_s8Kvx
                               dt1_s8Kvy
                               ds_s8Kvz
                               dt2_s8KvA
                               dt3_s8KvB [Occ=Once]
                               dt4_s8KvC ->
              case output_s8Kvu of {
                GHC.IO.Buffer.Buffer dt5_s8KvE
                                     dt6_s8KvF
                                     ds1_s8KvG
                                     dt7_s8KvH
                                     dt8_s8KvI
                                     dt9_s8KvJ [Occ=Once] ->
                    let {
                      lvl6_s8KvK :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                      [LclId, Unf=OtherCon []] =
                          CCCS GHC.IO.Buffer.Buffer! [dt_s8Kvx
                                                      dt1_s8Kvy
                                                      ds_s8Kvz
                                                      dt2_s8KvA
                                                      0#
                                                      0#];
                    } in 
                      let-no-escape {
                        exit_s8KvL [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                          :: GHC.Prim.Int#
                             -> GHC.Prim.Int#
                             -> GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                   (GHC.IO.Encoding.Types.CodingProgress,
                                    GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                    GHC.IO.Buffer.Buffer GHC.Types.Char) #)
                        [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                            sat-only [dt_s8Kvx
                                      dt1_s8Kvy
                                      ds_s8Kvz
                                      dt2_s8KvA
                                      dt4_s8KvC
                                      dt5_s8KvE
                                      dt6_s8KvF
                                      ds1_s8KvG
                                      dt7_s8KvH
                                      dt8_s8KvI
                                      lvl6_s8KvK] \r [ww_s8KvM ww1_s8KvN void_0E]
                                let {
                                  sat_s8KvR [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                  [LclId] =
                                      CCCS GHC.IO.Buffer.Buffer! [dt5_s8KvE
                                                                  dt6_s8KvF
                                                                  ds1_s8KvG
                                                                  dt7_s8KvH
                                                                  dt8_s8KvI
                                                                  ww1_s8KvN]; } in
                                let {
                                  sat_s8KvQ [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                  [LclId] =
                                      [dt_s8Kvx
                                       dt1_s8Kvy
                                       ds_s8Kvz
                                       dt2_s8KvA
                                       dt4_s8KvC
                                       lvl6_s8KvK
                                       ww_s8KvM] \u []
                                          case ==# [ww_s8KvM dt4_s8KvC] of {
                                            __DEFAULT ->
                                                GHC.IO.Buffer.Buffer [dt_s8Kvx
                                                                      dt1_s8Kvy
                                                                      ds_s8Kvz
                                                                      dt2_s8KvA
                                                                      ww_s8KvM
                                                                      dt4_s8KvC];
                                            1# -> lvl6_s8KvK;
                                          }; } in
                                let {
                                  sat_s8KvS [Occ=Once]
                                    :: (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char)
                                  [LclId] =
                                      CCCS (,,)! [GHC.IO.Encoding.Types.InvalidSequence
                                                  sat_s8KvQ
                                                  sat_s8KvR];
                                } in  Unit# [sat_s8KvS];
                      } in 
                        let-no-escape {
                          exit1_s8KvT [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                            :: GHC.Prim.Int#
                               -> GHC.Prim.Int#
                               -> GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     (GHC.IO.Encoding.Types.CodingProgress,
                                      GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                      GHC.IO.Buffer.Buffer GHC.Types.Char) #)
                          [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                              sat-only [dt_s8Kvx
                                        dt1_s8Kvy
                                        ds_s8Kvz
                                        dt2_s8KvA
                                        dt4_s8KvC
                                        dt5_s8KvE
                                        dt6_s8KvF
                                        ds1_s8KvG
                                        dt7_s8KvH
                                        dt8_s8KvI
                                        lvl6_s8KvK] \r [ww_s8KvU ww1_s8KvV void_0E]
                                  let {
                                    sat_s8KvZ [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                    [LclId] =
                                        CCCS GHC.IO.Buffer.Buffer! [dt5_s8KvE
                                                                    dt6_s8KvF
                                                                    ds1_s8KvG
                                                                    dt7_s8KvH
                                                                    dt8_s8KvI
                                                                    ww1_s8KvV]; } in
                                  let {
                                    sat_s8KvY [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                    [LclId] =
                                        [dt_s8Kvx
                                         dt1_s8Kvy
                                         ds_s8Kvz
                                         dt2_s8KvA
                                         dt4_s8KvC
                                         lvl6_s8KvK
                                         ww_s8KvU] \u []
                                            case ==# [ww_s8KvU dt4_s8KvC] of {
                                              __DEFAULT ->
                                                  GHC.IO.Buffer.Buffer [dt_s8Kvx
                                                                        dt1_s8Kvy
                                                                        ds_s8Kvz
                                                                        dt2_s8KvA
                                                                        ww_s8KvU
                                                                        dt4_s8KvC];
                                              1# -> lvl6_s8KvK;
                                            }; } in
                                  let {
                                    sat_s8Kw0 [Occ=Once]
                                      :: (GHC.IO.Encoding.Types.CodingProgress,
                                          GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                          GHC.IO.Buffer.Buffer GHC.Types.Char)
                                    [LclId] =
                                        CCCS (,,)! [GHC.IO.Encoding.Types.InputUnderflow
                                                    sat_s8KvY
                                                    sat_s8KvZ];
                                  } in  Unit# [sat_s8Kw0];
                        } in 
                          let-no-escape {
                            exit2_s8Kw1 [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                              :: GHC.Prim.Int#
                                 -> GHC.Prim.Int#
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                       (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char) #)
                            [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                                sat-only [dt_s8Kvx
                                          dt1_s8Kvy
                                          ds_s8Kvz
                                          dt2_s8KvA
                                          dt4_s8KvC
                                          dt5_s8KvE
                                          dt6_s8KvF
                                          ds1_s8KvG
                                          dt7_s8KvH
                                          dt8_s8KvI
                                          lvl6_s8KvK] \r [ww_s8Kw2 ww1_s8Kw3 void_0E]
                                    let {
                                      sat_s8Kw7 [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                      [LclId] =
                                          CCCS GHC.IO.Buffer.Buffer! [dt5_s8KvE
                                                                      dt6_s8KvF
                                                                      ds1_s8KvG
                                                                      dt7_s8KvH
                                                                      dt8_s8KvI
                                                                      ww1_s8Kw3]; } in
                                    let {
                                      sat_s8Kw6 [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                      [LclId] =
                                          [dt_s8Kvx
                                           dt1_s8Kvy
                                           ds_s8Kvz
                                           dt2_s8KvA
                                           dt4_s8KvC
                                           lvl6_s8KvK
                                           ww_s8Kw2] \u []
                                              case ==# [ww_s8Kw2 dt4_s8KvC] of {
                                                __DEFAULT ->
                                                    GHC.IO.Buffer.Buffer [dt_s8Kvx
                                                                          dt1_s8Kvy
                                                                          ds_s8Kvz
                                                                          dt2_s8KvA
                                                                          ww_s8Kw2
                                                                          dt4_s8KvC];
                                                1# -> lvl6_s8KvK;
                                              }; } in
                                    let {
                                      sat_s8Kw8 [Occ=Once]
                                        :: (GHC.IO.Encoding.Types.CodingProgress,
                                            GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                            GHC.IO.Buffer.Buffer GHC.Types.Char)
                                      [LclId] =
                                          CCCS (,,)! [GHC.IO.Encoding.Types.OutputUnderflow
                                                      sat_s8Kw6
                                                      sat_s8Kw7];
                                    } in  Unit# [sat_s8Kw8];
                          } in 
                            let-no-escape {
                              $wloop_s8Kw9 [InlPrag=NOUSERINLINE[0], Occ=LoopBreakerT[3]]
                                :: GHC.Prim.Int#
                                   -> GHC.Prim.Int#
                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         (GHC.IO.Encoding.Types.CodingProgress,
                                          GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                          GHC.IO.Buffer.Buffer GHC.Types.Char) #)
                              [LclId[JoinId(3)], Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
                                  sat-only [dt_s8Kvx
                                            dt1_s8Kvy
                                            dt4_s8KvC
                                            dt5_s8KvE
                                            dt6_s8KvF
                                            dt7_s8KvH
                                            exit_s8KvL
                                            exit1_s8KvT
                                            exit2_s8Kw1
                                            $wloop_s8Kw9] \r [ww_s8Kwa ww1_s8Kwb void_0E]
                                      case >=# [ww1_s8Kwb dt7_s8KvH] of {
                                        __DEFAULT ->
                                            case >=# [ww_s8Kwa dt4_s8KvC] of {
                                              __DEFAULT ->
                                                  case plusAddr# [dt_s8Kvx ww_s8Kwa] of sat_s8Kwf {
                                                    __DEFAULT ->
                                                        case
                                                            readWord8OffAddr# [sat_s8Kwf
                                                                               0#
                                                                               GHC.Prim.void#]
                                                        of
                                                        { Unit# ipv1_s8Kwi ->
                                                              case
                                                                  touch# [dt1_s8Kvy GHC.Prim.void#]
                                                              of
                                                              s'_s8Kwj
                                                              { (##) ->
                                                                    case
                                                                        gtWord# [ipv1_s8Kwi 127##]
                                                                    of
                                                                    { __DEFAULT ->
                                                                          case
                                                                              word2Int# [ipv1_s8Kwi]
                                                                          of
                                                                          sat_s8Kwl
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    chr# [sat_s8Kwl]
                                                                                of
                                                                                sat_s8Kwm
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          writeWideCharOffAddr# [dt5_s8KvE
                                                                                                                 ww1_s8Kwb
                                                                                                                 sat_s8Kwm
                                                                                                                 GHC.Prim.void#]
                                                                                      of
                                                                                      s2_s8Kwn
                                                                                      { (##) ->
                                                                                            case
                                                                                                touch# [dt6_s8KvF
                                                                                                        GHC.Prim.void#]
                                                                                            of
                                                                                            s'1_s8Kwo
                                                                                            { (##) ->
                                                                                                  case
                                                                                                      +# [ww1_s8Kwb
                                                                                                          1#]
                                                                                                  of
                                                                                                  sat_s8Kwq
                                                                                                  { __DEFAULT ->
                                                                                                        case
                                                                                                            +# [ww_s8Kwa
                                                                                                                1#]
                                                                                                        of
                                                                                                        sat_s8Kwp
                                                                                                        { __DEFAULT ->
                                                                                                              $wloop_s8Kw9
                                                                                                                  sat_s8Kwp
                                                                                                                  sat_s8Kwq
                                                                                                                  GHC.Prim.void#;
                                                                                                        };
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                                };
                                                                          };
                                                                      1# ->
                                                                          exit_s8KvL
                                                                              ww_s8Kwa
                                                                              ww1_s8Kwb
                                                                              GHC.Prim.void#;
                                                                    };
                                                              };
                                                        };
                                                  };
                                              1# -> exit1_s8KvT ww_s8Kwa ww1_s8Kwb GHC.Prim.void#;
                                            };
                                        1# -> exit2_s8Kw1 ww_s8Kwa ww1_s8Kwb GHC.Prim.void#;
                                      };
                            } in  $wloop_s8Kw9 dt3_s8KvB dt9_s8KvJ GHC.Prim.void#;
              };
        };

GHC.IO.Encoding.Latin1.ascii_decode
  :: GHC.IO.Encoding.Types.DecodeBuffer
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Encoding.Latin1.ascii5 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Encoding.Latin1.latin3
  :: GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Encoding.Types.CodingProgress,
            GHC.IO.Buffer.Buffer GHC.Types.Char,
            GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [input_s8Kwr output_s8Kws void_0E]
        case input_s8Kwr of {
          GHC.IO.Buffer.Buffer dt_s8Kwv
                               dt1_s8Kww
                               ds_s8Kwx
                               dt2_s8Kwy
                               dt3_s8Kwz [Occ=Once]
                               dt4_s8KwA ->
              case output_s8Kws of {
                GHC.IO.Buffer.Buffer dt5_s8KwC
                                     dt6_s8KwD
                                     ds1_s8KwE
                                     dt7_s8KwF
                                     dt8_s8KwG
                                     dt9_s8KwH [Occ=Once] ->
                    let {
                      lvl6_s8KwI :: GHC.IO.Buffer.Buffer GHC.Types.Char
                      [LclId, Unf=OtherCon []] =
                          CCCS GHC.IO.Buffer.Buffer! [dt_s8Kwv
                                                      dt1_s8Kww
                                                      ds_s8Kwx
                                                      dt2_s8Kwy
                                                      0#
                                                      0#];
                    } in 
                      let-no-escape {
                        exit_s8KwJ [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                          :: GHC.Prim.Int#
                             -> GHC.Prim.Int#
                             -> GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                   (GHC.IO.Encoding.Types.CodingProgress,
                                    GHC.IO.Buffer.Buffer GHC.Types.Char,
                                    GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                        [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                            sat-only [dt_s8Kwv
                                      dt1_s8Kww
                                      ds_s8Kwx
                                      dt2_s8Kwy
                                      dt4_s8KwA
                                      dt5_s8KwC
                                      dt6_s8KwD
                                      ds1_s8KwE
                                      dt7_s8KwF
                                      dt8_s8KwG
                                      lvl6_s8KwI] \r [ww_s8KwK ww1_s8KwL void_0E]
                                let {
                                  sat_s8KwP [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                  [LclId] =
                                      CCCS GHC.IO.Buffer.Buffer! [dt5_s8KwC
                                                                  dt6_s8KwD
                                                                  ds1_s8KwE
                                                                  dt7_s8KwF
                                                                  dt8_s8KwG
                                                                  ww1_s8KwL]; } in
                                let {
                                  sat_s8KwO [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                  [LclId] =
                                      [dt_s8Kwv
                                       dt1_s8Kww
                                       ds_s8Kwx
                                       dt2_s8Kwy
                                       dt4_s8KwA
                                       lvl6_s8KwI
                                       ww_s8KwK] \u []
                                          case ==# [ww_s8KwK dt4_s8KwA] of {
                                            __DEFAULT ->
                                                GHC.IO.Buffer.Buffer [dt_s8Kwv
                                                                      dt1_s8Kww
                                                                      ds_s8Kwx
                                                                      dt2_s8Kwy
                                                                      ww_s8KwK
                                                                      dt4_s8KwA];
                                            1# -> lvl6_s8KwI;
                                          }; } in
                                let {
                                  sat_s8KwQ [Occ=Once]
                                    :: (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                  [LclId] =
                                      CCCS (,,)! [GHC.IO.Encoding.Types.InputUnderflow
                                                  sat_s8KwO
                                                  sat_s8KwP];
                                } in  Unit# [sat_s8KwQ];
                      } in 
                        let-no-escape {
                          exit1_s8KwR [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                            :: GHC.Prim.Int#
                               -> GHC.Prim.Int#
                               -> GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     (GHC.IO.Encoding.Types.CodingProgress,
                                      GHC.IO.Buffer.Buffer GHC.Types.Char,
                                      GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                          [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                              sat-only [dt_s8Kwv
                                        dt1_s8Kww
                                        ds_s8Kwx
                                        dt2_s8Kwy
                                        dt4_s8KwA
                                        dt5_s8KwC
                                        dt6_s8KwD
                                        ds1_s8KwE
                                        dt7_s8KwF
                                        dt8_s8KwG
                                        lvl6_s8KwI] \r [ww_s8KwS ww1_s8KwT void_0E]
                                  let {
                                    sat_s8KwX [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                    [LclId] =
                                        CCCS GHC.IO.Buffer.Buffer! [dt5_s8KwC
                                                                    dt6_s8KwD
                                                                    ds1_s8KwE
                                                                    dt7_s8KwF
                                                                    dt8_s8KwG
                                                                    ww1_s8KwT]; } in
                                  let {
                                    sat_s8KwW [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                    [LclId] =
                                        [dt_s8Kwv
                                         dt1_s8Kww
                                         ds_s8Kwx
                                         dt2_s8Kwy
                                         dt4_s8KwA
                                         lvl6_s8KwI
                                         ww_s8KwS] \u []
                                            case ==# [ww_s8KwS dt4_s8KwA] of {
                                              __DEFAULT ->
                                                  GHC.IO.Buffer.Buffer [dt_s8Kwv
                                                                        dt1_s8Kww
                                                                        ds_s8Kwx
                                                                        dt2_s8Kwy
                                                                        ww_s8KwS
                                                                        dt4_s8KwA];
                                              1# -> lvl6_s8KwI;
                                            }; } in
                                  let {
                                    sat_s8KwY [Occ=Once]
                                      :: (GHC.IO.Encoding.Types.CodingProgress,
                                          GHC.IO.Buffer.Buffer GHC.Types.Char,
                                          GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                    [LclId] =
                                        CCCS (,,)! [GHC.IO.Encoding.Types.OutputUnderflow
                                                    sat_s8KwW
                                                    sat_s8KwX];
                                  } in  Unit# [sat_s8KwY];
                        } in 
                          let-no-escape {
                            $wloop_s8KwZ [InlPrag=NOUSERINLINE[0], Occ=LoopBreakerT[3]]
                              :: GHC.Prim.Int#
                                 -> GHC.Prim.Int#
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                       (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                            [LclId[JoinId(3)], Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
                                sat-only [dt_s8Kwv
                                          dt1_s8Kww
                                          dt4_s8KwA
                                          dt5_s8KwC
                                          dt6_s8KwD
                                          dt7_s8KwF
                                          exit_s8KwJ
                                          exit1_s8KwR
                                          $wloop_s8KwZ] \r [ww_s8Kx0 ww1_s8Kx1 void_0E]
                                    case >=# [ww1_s8Kx1 dt7_s8KwF] of {
                                      __DEFAULT ->
                                          case >=# [ww_s8Kx0 dt4_s8KwA] of {
                                            __DEFAULT ->
                                                case
                                                    readWideCharOffAddr# [dt_s8Kwv
                                                                          ww_s8Kx0
                                                                          GHC.Prim.void#]
                                                of
                                                { Unit# ipv1_s8Kx7 [Occ=Once] ->
                                                      case
                                                          touch# [dt1_s8Kww GHC.Prim.void#]
                                                      of
                                                      s'_s8Kx8
                                                      { (##) ->
                                                            case ord# [ipv1_s8Kx7] of sat_s8Kxa {
                                                              __DEFAULT ->
                                                                  case
                                                                      int2Word# [sat_s8Kxa]
                                                                  of
                                                                  sat_s8Kxb
                                                                  { __DEFAULT ->
                                                                        case
                                                                            narrow8Word# [sat_s8Kxb]
                                                                        of
                                                                        sat_s8Kxc
                                                                        { __DEFAULT ->
                                                                              case
                                                                                  plusAddr# [dt5_s8KwC
                                                                                             ww1_s8Kx1]
                                                                              of
                                                                              sat_s8Kx9
                                                                              { __DEFAULT ->
                                                                                    case
                                                                                        writeWord8OffAddr# [sat_s8Kx9
                                                                                                            0#
                                                                                                            sat_s8Kxc
                                                                                                            GHC.Prim.void#]
                                                                                    of
                                                                                    s2_s8Kxd
                                                                                    { (##) ->
                                                                                          case
                                                                                              touch# [dt6_s8KwD
                                                                                                      GHC.Prim.void#]
                                                                                          of
                                                                                          s'1_s8Kxe
                                                                                          { (##) ->
                                                                                                case
                                                                                                    +# [ww1_s8Kx1
                                                                                                        1#]
                                                                                                of
                                                                                                sat_s8Kxg
                                                                                                { __DEFAULT ->
                                                                                                      case
                                                                                                          +# [ww_s8Kx0
                                                                                                              1#]
                                                                                                      of
                                                                                                      sat_s8Kxf
                                                                                                      { __DEFAULT ->
                                                                                                            $wloop_s8KwZ
                                                                                                                sat_s8Kxf
                                                                                                                sat_s8Kxg
                                                                                                                GHC.Prim.void#;
                                                                                                      };
                                                                                                };
                                                                                          };
                                                                                    };
                                                                              };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                            1# -> exit_s8KwJ ww_s8Kx0 ww1_s8Kx1 GHC.Prim.void#;
                                          };
                                      1# -> exit1_s8KwR ww_s8Kx0 ww1_s8Kx1 GHC.Prim.void#;
                                    };
                          } in  $wloop_s8KwZ dt3_s8Kwz dt9_s8KwH GHC.Prim.void#;
              };
        };

GHC.IO.Encoding.Latin1.latin1_encode
  :: GHC.IO.Encoding.Types.EncodeBuffer
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Encoding.Latin1.latin3 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Encoding.Latin1.ascii3
  :: GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Encoding.Types.CodingProgress,
            GHC.IO.Buffer.Buffer GHC.Types.Char,
            GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [input_s8Kxh output_s8Kxi void_0E]
        case input_s8Kxh of {
          GHC.IO.Buffer.Buffer dt_s8Kxl
                               dt1_s8Kxm
                               ds_s8Kxn
                               dt2_s8Kxo
                               dt3_s8Kxp [Occ=Once]
                               dt4_s8Kxq ->
              case output_s8Kxi of {
                GHC.IO.Buffer.Buffer dt5_s8Kxs
                                     dt6_s8Kxt
                                     ds1_s8Kxu
                                     dt7_s8Kxv
                                     dt8_s8Kxw
                                     dt9_s8Kxx [Occ=Once] ->
                    let {
                      lvl6_s8Kxy :: GHC.IO.Buffer.Buffer GHC.Types.Char
                      [LclId, Unf=OtherCon []] =
                          CCCS GHC.IO.Buffer.Buffer! [dt_s8Kxl
                                                      dt1_s8Kxm
                                                      ds_s8Kxn
                                                      dt2_s8Kxo
                                                      0#
                                                      0#];
                    } in 
                      let-no-escape {
                        exit_s8Kxz [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                          :: GHC.Prim.Int#
                             -> GHC.Prim.Int#
                             -> GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                   (GHC.IO.Encoding.Types.CodingProgress,
                                    GHC.IO.Buffer.Buffer GHC.Types.Char,
                                    GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                        [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                            sat-only [dt_s8Kxl
                                      dt1_s8Kxm
                                      ds_s8Kxn
                                      dt2_s8Kxo
                                      dt4_s8Kxq
                                      dt5_s8Kxs
                                      dt6_s8Kxt
                                      ds1_s8Kxu
                                      dt7_s8Kxv
                                      dt8_s8Kxw
                                      lvl6_s8Kxy] \r [ww_s8KxA ww1_s8KxB void_0E]
                                let {
                                  sat_s8KxF [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                  [LclId] =
                                      CCCS GHC.IO.Buffer.Buffer! [dt5_s8Kxs
                                                                  dt6_s8Kxt
                                                                  ds1_s8Kxu
                                                                  dt7_s8Kxv
                                                                  dt8_s8Kxw
                                                                  ww1_s8KxB]; } in
                                let {
                                  sat_s8KxE [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                  [LclId] =
                                      [dt_s8Kxl
                                       dt1_s8Kxm
                                       ds_s8Kxn
                                       dt2_s8Kxo
                                       dt4_s8Kxq
                                       lvl6_s8Kxy
                                       ww_s8KxA] \u []
                                          case ==# [ww_s8KxA dt4_s8Kxq] of {
                                            __DEFAULT ->
                                                GHC.IO.Buffer.Buffer [dt_s8Kxl
                                                                      dt1_s8Kxm
                                                                      ds_s8Kxn
                                                                      dt2_s8Kxo
                                                                      ww_s8KxA
                                                                      dt4_s8Kxq];
                                            1# -> lvl6_s8Kxy;
                                          }; } in
                                let {
                                  sat_s8KxG [Occ=Once]
                                    :: (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                  [LclId] =
                                      CCCS (,,)! [GHC.IO.Encoding.Types.InvalidSequence
                                                  sat_s8KxE
                                                  sat_s8KxF];
                                } in  Unit# [sat_s8KxG];
                      } in 
                        let-no-escape {
                          exit1_s8KxH [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                            :: GHC.Prim.Int#
                               -> GHC.Prim.Int#
                               -> GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     (GHC.IO.Encoding.Types.CodingProgress,
                                      GHC.IO.Buffer.Buffer GHC.Types.Char,
                                      GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                          [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                              sat-only [dt_s8Kxl
                                        dt1_s8Kxm
                                        ds_s8Kxn
                                        dt2_s8Kxo
                                        dt4_s8Kxq
                                        dt5_s8Kxs
                                        dt6_s8Kxt
                                        ds1_s8Kxu
                                        dt7_s8Kxv
                                        dt8_s8Kxw
                                        lvl6_s8Kxy] \r [ww_s8KxI ww1_s8KxJ void_0E]
                                  let {
                                    sat_s8KxN [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                    [LclId] =
                                        CCCS GHC.IO.Buffer.Buffer! [dt5_s8Kxs
                                                                    dt6_s8Kxt
                                                                    ds1_s8Kxu
                                                                    dt7_s8Kxv
                                                                    dt8_s8Kxw
                                                                    ww1_s8KxJ]; } in
                                  let {
                                    sat_s8KxM [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                    [LclId] =
                                        [dt_s8Kxl
                                         dt1_s8Kxm
                                         ds_s8Kxn
                                         dt2_s8Kxo
                                         dt4_s8Kxq
                                         lvl6_s8Kxy
                                         ww_s8KxI] \u []
                                            case ==# [ww_s8KxI dt4_s8Kxq] of {
                                              __DEFAULT ->
                                                  GHC.IO.Buffer.Buffer [dt_s8Kxl
                                                                        dt1_s8Kxm
                                                                        ds_s8Kxn
                                                                        dt2_s8Kxo
                                                                        ww_s8KxI
                                                                        dt4_s8Kxq];
                                              1# -> lvl6_s8Kxy;
                                            }; } in
                                  let {
                                    sat_s8KxO [Occ=Once]
                                      :: (GHC.IO.Encoding.Types.CodingProgress,
                                          GHC.IO.Buffer.Buffer GHC.Types.Char,
                                          GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                    [LclId] =
                                        CCCS (,,)! [GHC.IO.Encoding.Types.InputUnderflow
                                                    sat_s8KxM
                                                    sat_s8KxN];
                                  } in  Unit# [sat_s8KxO];
                        } in 
                          let-no-escape {
                            exit2_s8KxP [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                              :: GHC.Prim.Int#
                                 -> GHC.Prim.Int#
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                       (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                            [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                                sat-only [dt_s8Kxl
                                          dt1_s8Kxm
                                          ds_s8Kxn
                                          dt2_s8Kxo
                                          dt4_s8Kxq
                                          dt5_s8Kxs
                                          dt6_s8Kxt
                                          ds1_s8Kxu
                                          dt7_s8Kxv
                                          dt8_s8Kxw
                                          lvl6_s8Kxy] \r [ww_s8KxQ ww1_s8KxR void_0E]
                                    let {
                                      sat_s8KxV [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                      [LclId] =
                                          CCCS GHC.IO.Buffer.Buffer! [dt5_s8Kxs
                                                                      dt6_s8Kxt
                                                                      ds1_s8Kxu
                                                                      dt7_s8Kxv
                                                                      dt8_s8Kxw
                                                                      ww1_s8KxR]; } in
                                    let {
                                      sat_s8KxU [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                      [LclId] =
                                          [dt_s8Kxl
                                           dt1_s8Kxm
                                           ds_s8Kxn
                                           dt2_s8Kxo
                                           dt4_s8Kxq
                                           lvl6_s8Kxy
                                           ww_s8KxQ] \u []
                                              case ==# [ww_s8KxQ dt4_s8Kxq] of {
                                                __DEFAULT ->
                                                    GHC.IO.Buffer.Buffer [dt_s8Kxl
                                                                          dt1_s8Kxm
                                                                          ds_s8Kxn
                                                                          dt2_s8Kxo
                                                                          ww_s8KxQ
                                                                          dt4_s8Kxq];
                                                1# -> lvl6_s8Kxy;
                                              }; } in
                                    let {
                                      sat_s8KxW [Occ=Once]
                                        :: (GHC.IO.Encoding.Types.CodingProgress,
                                            GHC.IO.Buffer.Buffer GHC.Types.Char,
                                            GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                      [LclId] =
                                          CCCS (,,)! [GHC.IO.Encoding.Types.OutputUnderflow
                                                      sat_s8KxU
                                                      sat_s8KxV];
                                    } in  Unit# [sat_s8KxW];
                          } in 
                            let-no-escape {
                              $wloop_s8KxX [InlPrag=NOUSERINLINE[0], Occ=LoopBreakerT[3]]
                                :: GHC.Prim.Int#
                                   -> GHC.Prim.Int#
                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         (GHC.IO.Encoding.Types.CodingProgress,
                                          GHC.IO.Buffer.Buffer GHC.Types.Char,
                                          GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                              [LclId[JoinId(3)], Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
                                  sat-only [dt_s8Kxl
                                            dt1_s8Kxm
                                            dt4_s8Kxq
                                            dt5_s8Kxs
                                            dt6_s8Kxt
                                            dt7_s8Kxv
                                            exit_s8Kxz
                                            exit1_s8KxH
                                            exit2_s8KxP
                                            $wloop_s8KxX] \r [ww_s8KxY ww1_s8KxZ void_0E]
                                      case >=# [ww1_s8KxZ dt7_s8Kxv] of {
                                        __DEFAULT ->
                                            case >=# [ww_s8KxY dt4_s8Kxq] of {
                                              __DEFAULT ->
                                                  case
                                                      readWideCharOffAddr# [dt_s8Kxl
                                                                            ww_s8KxY
                                                                            GHC.Prim.void#]
                                                  of
                                                  { Unit# ipv1_s8Ky5 ->
                                                        case
                                                            touch# [dt1_s8Kxm GHC.Prim.void#]
                                                        of
                                                        s'_s8Ky6
                                                        { (##) ->
                                                              case ord# [ipv1_s8Ky5] of sat_s8Ky7 {
                                                                __DEFAULT ->
                                                                    case ># [sat_s8Ky7 127#] of {
                                                                      __DEFAULT ->
                                                                          case
                                                                              ord# [ipv1_s8Ky5]
                                                                          of
                                                                          sat_s8Kya
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    int2Word# [sat_s8Kya]
                                                                                of
                                                                                sat_s8Kyb
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          narrow8Word# [sat_s8Kyb]
                                                                                      of
                                                                                      sat_s8Kyc
                                                                                      { __DEFAULT ->
                                                                                            case
                                                                                                plusAddr# [dt5_s8Kxs
                                                                                                           ww1_s8KxZ]
                                                                                            of
                                                                                            sat_s8Ky9
                                                                                            { __DEFAULT ->
                                                                                                  case
                                                                                                      writeWord8OffAddr# [sat_s8Ky9
                                                                                                                          0#
                                                                                                                          sat_s8Kyc
                                                                                                                          GHC.Prim.void#]
                                                                                                  of
                                                                                                  s2_s8Kyd
                                                                                                  { (##) ->
                                                                                                        case
                                                                                                            touch# [dt6_s8Kxt
                                                                                                                    GHC.Prim.void#]
                                                                                                        of
                                                                                                        s'1_s8Kye
                                                                                                        { (##) ->
                                                                                                              case
                                                                                                                  +# [ww1_s8KxZ
                                                                                                                      1#]
                                                                                                              of
                                                                                                              sat_s8Kyg
                                                                                                              { __DEFAULT ->
                                                                                                                    case
                                                                                                                        +# [ww_s8KxY
                                                                                                                            1#]
                                                                                                                    of
                                                                                                                    sat_s8Kyf
                                                                                                                    { __DEFAULT ->
                                                                                                                          $wloop_s8KxX
                                                                                                                              sat_s8Kyf
                                                                                                                              sat_s8Kyg
                                                                                                                              GHC.Prim.void#;
                                                                                                                    };
                                                                                                              };
                                                                                                        };
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                                };
                                                                          };
                                                                      1# ->
                                                                          exit_s8Kxz
                                                                              ww_s8KxY
                                                                              ww1_s8KxZ
                                                                              GHC.Prim.void#;
                                                                    };
                                                              };
                                                        };
                                                  };
                                              1# -> exit1_s8KxH ww_s8KxY ww1_s8KxZ GHC.Prim.void#;
                                            };
                                        1# -> exit2_s8KxP ww_s8KxY ww1_s8KxZ GHC.Prim.void#;
                                      };
                            } in  $wloop_s8KxX dt3_s8Kxp dt9_s8Kxx GHC.Prim.void#;
              };
        };

GHC.IO.Encoding.Latin1.ascii_encode
  :: GHC.IO.Encoding.Types.EncodeBuffer
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Encoding.Latin1.ascii3 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Encoding.Latin1.latin1_checked2
  :: GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Encoding.Types.CodingProgress,
            GHC.IO.Buffer.Buffer GHC.Types.Char,
            GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [input_s8Kyh output_s8Kyi void_0E]
        case input_s8Kyh of {
          GHC.IO.Buffer.Buffer dt_s8Kyl
                               dt1_s8Kym
                               ds_s8Kyn
                               dt2_s8Kyo
                               dt3_s8Kyp [Occ=Once]
                               dt4_s8Kyq ->
              case output_s8Kyi of {
                GHC.IO.Buffer.Buffer dt5_s8Kys
                                     dt6_s8Kyt
                                     ds1_s8Kyu
                                     dt7_s8Kyv
                                     dt8_s8Kyw
                                     dt9_s8Kyx [Occ=Once] ->
                    let {
                      lvl6_s8Kyy :: GHC.IO.Buffer.Buffer GHC.Types.Char
                      [LclId, Unf=OtherCon []] =
                          CCCS GHC.IO.Buffer.Buffer! [dt_s8Kyl
                                                      dt1_s8Kym
                                                      ds_s8Kyn
                                                      dt2_s8Kyo
                                                      0#
                                                      0#];
                    } in 
                      let-no-escape {
                        exit_s8Kyz [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                          :: GHC.Prim.Int#
                             -> GHC.Prim.Int#
                             -> GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                   (GHC.IO.Encoding.Types.CodingProgress,
                                    GHC.IO.Buffer.Buffer GHC.Types.Char,
                                    GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                        [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                            sat-only [dt_s8Kyl
                                      dt1_s8Kym
                                      ds_s8Kyn
                                      dt2_s8Kyo
                                      dt4_s8Kyq
                                      dt5_s8Kys
                                      dt6_s8Kyt
                                      ds1_s8Kyu
                                      dt7_s8Kyv
                                      dt8_s8Kyw
                                      lvl6_s8Kyy] \r [ww_s8KyA ww1_s8KyB void_0E]
                                let {
                                  sat_s8KyF [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                  [LclId] =
                                      CCCS GHC.IO.Buffer.Buffer! [dt5_s8Kys
                                                                  dt6_s8Kyt
                                                                  ds1_s8Kyu
                                                                  dt7_s8Kyv
                                                                  dt8_s8Kyw
                                                                  ww1_s8KyB]; } in
                                let {
                                  sat_s8KyE [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                  [LclId] =
                                      [dt_s8Kyl
                                       dt1_s8Kym
                                       ds_s8Kyn
                                       dt2_s8Kyo
                                       dt4_s8Kyq
                                       lvl6_s8Kyy
                                       ww_s8KyA] \u []
                                          case ==# [ww_s8KyA dt4_s8Kyq] of {
                                            __DEFAULT ->
                                                GHC.IO.Buffer.Buffer [dt_s8Kyl
                                                                      dt1_s8Kym
                                                                      ds_s8Kyn
                                                                      dt2_s8Kyo
                                                                      ww_s8KyA
                                                                      dt4_s8Kyq];
                                            1# -> lvl6_s8Kyy;
                                          }; } in
                                let {
                                  sat_s8KyG [Occ=Once]
                                    :: (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                  [LclId] =
                                      CCCS (,,)! [GHC.IO.Encoding.Types.InvalidSequence
                                                  sat_s8KyE
                                                  sat_s8KyF];
                                } in  Unit# [sat_s8KyG];
                      } in 
                        let-no-escape {
                          exit1_s8KyH [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                            :: GHC.Prim.Int#
                               -> GHC.Prim.Int#
                               -> GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     (GHC.IO.Encoding.Types.CodingProgress,
                                      GHC.IO.Buffer.Buffer GHC.Types.Char,
                                      GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                          [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                              sat-only [dt_s8Kyl
                                        dt1_s8Kym
                                        ds_s8Kyn
                                        dt2_s8Kyo
                                        dt4_s8Kyq
                                        dt5_s8Kys
                                        dt6_s8Kyt
                                        ds1_s8Kyu
                                        dt7_s8Kyv
                                        dt8_s8Kyw
                                        lvl6_s8Kyy] \r [ww_s8KyI ww1_s8KyJ void_0E]
                                  let {
                                    sat_s8KyN [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                    [LclId] =
                                        CCCS GHC.IO.Buffer.Buffer! [dt5_s8Kys
                                                                    dt6_s8Kyt
                                                                    ds1_s8Kyu
                                                                    dt7_s8Kyv
                                                                    dt8_s8Kyw
                                                                    ww1_s8KyJ]; } in
                                  let {
                                    sat_s8KyM [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                    [LclId] =
                                        [dt_s8Kyl
                                         dt1_s8Kym
                                         ds_s8Kyn
                                         dt2_s8Kyo
                                         dt4_s8Kyq
                                         lvl6_s8Kyy
                                         ww_s8KyI] \u []
                                            case ==# [ww_s8KyI dt4_s8Kyq] of {
                                              __DEFAULT ->
                                                  GHC.IO.Buffer.Buffer [dt_s8Kyl
                                                                        dt1_s8Kym
                                                                        ds_s8Kyn
                                                                        dt2_s8Kyo
                                                                        ww_s8KyI
                                                                        dt4_s8Kyq];
                                              1# -> lvl6_s8Kyy;
                                            }; } in
                                  let {
                                    sat_s8KyO [Occ=Once]
                                      :: (GHC.IO.Encoding.Types.CodingProgress,
                                          GHC.IO.Buffer.Buffer GHC.Types.Char,
                                          GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                    [LclId] =
                                        CCCS (,,)! [GHC.IO.Encoding.Types.InputUnderflow
                                                    sat_s8KyM
                                                    sat_s8KyN];
                                  } in  Unit# [sat_s8KyO];
                        } in 
                          let-no-escape {
                            exit2_s8KyP [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                              :: GHC.Prim.Int#
                                 -> GHC.Prim.Int#
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                       (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                            [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                                sat-only [dt_s8Kyl
                                          dt1_s8Kym
                                          ds_s8Kyn
                                          dt2_s8Kyo
                                          dt4_s8Kyq
                                          dt5_s8Kys
                                          dt6_s8Kyt
                                          ds1_s8Kyu
                                          dt7_s8Kyv
                                          dt8_s8Kyw
                                          lvl6_s8Kyy] \r [ww_s8KyQ ww1_s8KyR void_0E]
                                    let {
                                      sat_s8KyV [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                      [LclId] =
                                          CCCS GHC.IO.Buffer.Buffer! [dt5_s8Kys
                                                                      dt6_s8Kyt
                                                                      ds1_s8Kyu
                                                                      dt7_s8Kyv
                                                                      dt8_s8Kyw
                                                                      ww1_s8KyR]; } in
                                    let {
                                      sat_s8KyU [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                      [LclId] =
                                          [dt_s8Kyl
                                           dt1_s8Kym
                                           ds_s8Kyn
                                           dt2_s8Kyo
                                           dt4_s8Kyq
                                           lvl6_s8Kyy
                                           ww_s8KyQ] \u []
                                              case ==# [ww_s8KyQ dt4_s8Kyq] of {
                                                __DEFAULT ->
                                                    GHC.IO.Buffer.Buffer [dt_s8Kyl
                                                                          dt1_s8Kym
                                                                          ds_s8Kyn
                                                                          dt2_s8Kyo
                                                                          ww_s8KyQ
                                                                          dt4_s8Kyq];
                                                1# -> lvl6_s8Kyy;
                                              }; } in
                                    let {
                                      sat_s8KyW [Occ=Once]
                                        :: (GHC.IO.Encoding.Types.CodingProgress,
                                            GHC.IO.Buffer.Buffer GHC.Types.Char,
                                            GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                      [LclId] =
                                          CCCS (,,)! [GHC.IO.Encoding.Types.OutputUnderflow
                                                      sat_s8KyU
                                                      sat_s8KyV];
                                    } in  Unit# [sat_s8KyW];
                          } in 
                            let-no-escape {
                              $wloop_s8KyX [InlPrag=NOUSERINLINE[0], Occ=LoopBreakerT[3]]
                                :: GHC.Prim.Int#
                                   -> GHC.Prim.Int#
                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         (GHC.IO.Encoding.Types.CodingProgress,
                                          GHC.IO.Buffer.Buffer GHC.Types.Char,
                                          GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                              [LclId[JoinId(3)], Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
                                  sat-only [dt_s8Kyl
                                            dt1_s8Kym
                                            dt4_s8Kyq
                                            dt5_s8Kys
                                            dt6_s8Kyt
                                            dt7_s8Kyv
                                            exit_s8Kyz
                                            exit1_s8KyH
                                            exit2_s8KyP
                                            $wloop_s8KyX] \r [ww_s8KyY ww1_s8KyZ void_0E]
                                      case >=# [ww1_s8KyZ dt7_s8Kyv] of {
                                        __DEFAULT ->
                                            case >=# [ww_s8KyY dt4_s8Kyq] of {
                                              __DEFAULT ->
                                                  case
                                                      readWideCharOffAddr# [dt_s8Kyl
                                                                            ww_s8KyY
                                                                            GHC.Prim.void#]
                                                  of
                                                  { Unit# ipv1_s8Kz5 ->
                                                        case
                                                            touch# [dt1_s8Kym GHC.Prim.void#]
                                                        of
                                                        s'_s8Kz6
                                                        { (##) ->
                                                              case ord# [ipv1_s8Kz5] of sat_s8Kz7 {
                                                                __DEFAULT ->
                                                                    case ># [sat_s8Kz7 255#] of {
                                                                      __DEFAULT ->
                                                                          case
                                                                              ord# [ipv1_s8Kz5]
                                                                          of
                                                                          sat_s8Kza
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    int2Word# [sat_s8Kza]
                                                                                of
                                                                                sat_s8Kzb
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          narrow8Word# [sat_s8Kzb]
                                                                                      of
                                                                                      sat_s8Kzc
                                                                                      { __DEFAULT ->
                                                                                            case
                                                                                                plusAddr# [dt5_s8Kys
                                                                                                           ww1_s8KyZ]
                                                                                            of
                                                                                            sat_s8Kz9
                                                                                            { __DEFAULT ->
                                                                                                  case
                                                                                                      writeWord8OffAddr# [sat_s8Kz9
                                                                                                                          0#
                                                                                                                          sat_s8Kzc
                                                                                                                          GHC.Prim.void#]
                                                                                                  of
                                                                                                  s2_s8Kzd
                                                                                                  { (##) ->
                                                                                                        case
                                                                                                            touch# [dt6_s8Kyt
                                                                                                                    GHC.Prim.void#]
                                                                                                        of
                                                                                                        s'1_s8Kze
                                                                                                        { (##) ->
                                                                                                              case
                                                                                                                  +# [ww1_s8KyZ
                                                                                                                      1#]
                                                                                                              of
                                                                                                              sat_s8Kzg
                                                                                                              { __DEFAULT ->
                                                                                                                    case
                                                                                                                        +# [ww_s8KyY
                                                                                                                            1#]
                                                                                                                    of
                                                                                                                    sat_s8Kzf
                                                                                                                    { __DEFAULT ->
                                                                                                                          $wloop_s8KyX
                                                                                                                              sat_s8Kzf
                                                                                                                              sat_s8Kzg
                                                                                                                              GHC.Prim.void#;
                                                                                                                    };
                                                                                                              };
                                                                                                        };
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                                };
                                                                          };
                                                                      1# ->
                                                                          exit_s8Kyz
                                                                              ww_s8KyY
                                                                              ww1_s8KyZ
                                                                              GHC.Prim.void#;
                                                                    };
                                                              };
                                                        };
                                                  };
                                              1# -> exit1_s8KyH ww_s8KyY ww1_s8KyZ GHC.Prim.void#;
                                            };
                                        1# -> exit2_s8KyP ww_s8KyY ww1_s8KyZ GHC.Prim.void#;
                                      };
                            } in  $wloop_s8KyX dt3_s8Kyp dt9_s8Kyx GHC.Prim.void#;
              };
        };

GHC.IO.Encoding.Latin1.latin1_checked_encode
  :: GHC.IO.Encoding.Types.EncodeBuffer
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Encoding.Latin1.latin1_checked2
            eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Encoding.Latin1.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.Encoding.Latin1.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Latin1.$trModule4];

GHC.IO.Encoding.Latin1.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Encoding.Latin1"#;

GHC.IO.Encoding.Latin1.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Latin1.$trModule2];

GHC.IO.Encoding.Latin1.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Encoding.Latin1.$trModule3
                                     GHC.IO.Encoding.Latin1.$trModule1];

GHC.IO.Encoding.Latin1.ascii7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ASCII"#;

GHC.IO.Encoding.Latin1.ascii6 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Encoding.Latin1.ascii7;

GHC.IO.Encoding.Latin1.mkAscii2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] Unit# [GHC.Tuple.()];

GHC.IO.Encoding.Latin1.mkAscii1
  :: ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><S,U>, Unf=OtherCon []] =
    [] \r [ds_s8Kzi void_0E] Unit# [GHC.Tuple.()];

GHC.IO.Encoding.Latin1.mkAscii
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.IO.Encoding.Types.TextEncoding
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [cfm_s8Kzk]
        let {
          sat_s8Kzs [Occ=Once]
            :: GHC.Types.IO (GHC.IO.Encoding.Types.TextEncoder ())
          [LclId] =
              [cfm_s8Kzk] \r [void_0E]
                  let {
                    sat_s8Kzq [Occ=Once]
                      :: GHC.IO.Buffer.Buffer GHC.Types.Char
                         -> GHC.IO.Buffer.Buffer GHC.Word.Word8
                         -> GHC.Types.IO
                              (GHC.IO.Buffer.Buffer GHC.Types.Char,
                               GHC.IO.Buffer.Buffer GHC.Word.Word8)
                    [LclId] =
                        [cfm_s8Kzk] \r [eta_B3 eta_B2 void_0E]
                            GHC.IO.Encoding.Failure.recoverEncode1
                                cfm_s8Kzk eta_B3 eta_B2 GHC.Prim.void#; } in
                  let {
                    sat_s8Kzr [Occ=Once]
                      :: GHC.IO.Encoding.Types.BufferCodec
                           GHC.Types.Char GHC.Word.Word8 ()
                    [LclId] =
                        CCCS GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.ascii3
                                                                 sat_s8Kzq
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii1];
                  } in  Unit# [sat_s8Kzr]; } in
        let {
          sat_s8Kzo [Occ=Once]
            :: GHC.Types.IO (GHC.IO.Encoding.Types.TextDecoder ())
          [LclId] =
              [cfm_s8Kzk] \r [void_0E]
                  let {
                    sat_s8Kzm [Occ=Once]
                      :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                         -> GHC.IO.Buffer.Buffer GHC.Types.Char
                         -> GHC.Types.IO
                              (GHC.IO.Buffer.Buffer GHC.Word.Word8,
                               GHC.IO.Buffer.Buffer GHC.Types.Char)
                    [LclId] =
                        [cfm_s8Kzk] \r [eta_B3 eta_B2 void_0E]
                            GHC.IO.Encoding.Failure.recoverDecode1
                                cfm_s8Kzk eta_B3 eta_B2 GHC.Prim.void#; } in
                  let {
                    sat_s8Kzn [Occ=Once]
                      :: GHC.IO.Encoding.Types.BufferCodec
                           GHC.Word.Word8 GHC.Types.Char ()
                    [LclId] =
                        CCCS GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.ascii5
                                                                 sat_s8Kzm
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii1];
                  } in  Unit# [sat_s8Kzn];
        } in 
          GHC.IO.Encoding.Types.TextEncoding [GHC.IO.Encoding.Latin1.ascii6
                                              sat_s8Kzo
                                              sat_s8Kzs];

lvl_r8Kux
  :: GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Buffer.Buffer GHC.Word.Word8,
            GHC.IO.Buffer.Buffer GHC.Types.Char) #)
[GblId, Arity=3, Str=<B,1*H><B,1*H><B,U>x, Unf=OtherCon []] =
    [] \r [input_s8Kzt output_s8Kzu void_0E]
        case input_s8Kzt of {
          GHC.IO.Buffer.Buffer _ [Occ=Dead]
                               _ [Occ=Dead]
                               _ [Occ=Dead]
                               _ [Occ=Dead]
                               _ [Occ=Dead]
                               _ [Occ=Dead] ->
              case output_s8Kzu of {
                GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                     _ [Occ=Dead]
                                     _ [Occ=Dead]
                                     _ [Occ=Dead]
                                     _ [Occ=Dead]
                                     _ [Occ=Dead] ->
                    raiseIO# [GHC.IO.Encoding.Failure.recoverDecode2 GHC.Prim.void#];
              };
        };

lvl1_r8Kuy
  :: GHC.IO.Encoding.Types.BufferCodec
       GHC.Word.Word8 GHC.Types.Char ()
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.ascii5
                                                      lvl_r8Kux
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii1];

GHC.IO.Encoding.Latin1.ascii4
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.BufferCodec
             GHC.Word.Word8 GHC.Types.Char () #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] Unit# [lvl1_r8Kuy];

GHC.IO.Encoding.Latin1.ascii2
  :: GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Buffer.Buffer GHC.Types.Char,
            GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=3,
 Str=<B,1*U(U,U,A,A,U,A)><B,1*H><B,U>x,
 Unf=OtherCon []] =
    [] \r [input_s8KzL output_s8KzM void_0E]
        case input_s8KzL of {
          GHC.IO.Buffer.Buffer dt_s8KzP [Occ=Once]
                               dt1_s8KzQ [Occ=Once]
                               _ [Occ=Dead]
                               _ [Occ=Dead]
                               dt3_s8KzT [Occ=Once]
                               _ [Occ=Dead] ->
              case output_s8KzM of {
                GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                     _ [Occ=Dead]
                                     _ [Occ=Dead]
                                     _ [Occ=Dead]
                                     _ [Occ=Dead]
                                     _ [Occ=Dead] ->
                    case readWideCharOffAddr# [dt_s8KzP dt3_s8KzT GHC.Prim.void#] of {
                      Unit# _ [Occ=Dead] ->
                          case touch# [dt1_s8KzQ GHC.Prim.void#] of s'_s8KA5 {
                            (##) ->
                                raiseIO# [GHC.IO.Encoding.Failure.recoverEncode2 GHC.Prim.void#];
                          };
                    };
              };
        };

lvl2_r8Kuz
  :: GHC.IO.Encoding.Types.BufferCodec
       GHC.Types.Char GHC.Word.Word8 ()
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.ascii3
                                                      GHC.IO.Encoding.Latin1.ascii2
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii1];

GHC.IO.Encoding.Latin1.ascii1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.BufferCodec
             GHC.Types.Char GHC.Word.Word8 () #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] Unit# [lvl2_r8Kuz];

GHC.IO.Encoding.Latin1.ascii :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.TextEncoding! [GHC.IO.Encoding.Latin1.ascii6
                                                       GHC.IO.Encoding.Latin1.ascii4
                                                       GHC.IO.Encoding.Latin1.ascii1];

GHC.IO.Encoding.Latin1.latin7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ISO-8859-1"#;

GHC.IO.Encoding.Latin1.latin6 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Encoding.Latin1.latin7;

GHC.IO.Encoding.Latin1.mkLatin1_checked
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.IO.Encoding.Types.TextEncoding
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [cfm_s8KA7]
        let {
          sat_s8KAf [Occ=Once]
            :: GHC.Types.IO (GHC.IO.Encoding.Types.TextEncoder ())
          [LclId] =
              [cfm_s8KA7] \r [void_0E]
                  let {
                    sat_s8KAd [Occ=Once]
                      :: GHC.IO.Buffer.Buffer GHC.Types.Char
                         -> GHC.IO.Buffer.Buffer GHC.Word.Word8
                         -> GHC.Types.IO
                              (GHC.IO.Buffer.Buffer GHC.Types.Char,
                               GHC.IO.Buffer.Buffer GHC.Word.Word8)
                    [LclId] =
                        [cfm_s8KA7] \r [eta_B3 eta_B2 void_0E]
                            GHC.IO.Encoding.Failure.recoverEncode1
                                cfm_s8KA7 eta_B3 eta_B2 GHC.Prim.void#; } in
                  let {
                    sat_s8KAe [Occ=Once]
                      :: GHC.IO.Encoding.Types.BufferCodec
                           GHC.Types.Char GHC.Word.Word8 ()
                    [LclId] =
                        CCCS GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.latin1_checked2
                                                                 sat_s8KAd
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii1];
                  } in  Unit# [sat_s8KAe]; } in
        let {
          sat_s8KAb [Occ=Once]
            :: GHC.Types.IO (GHC.IO.Encoding.Types.TextDecoder ())
          [LclId] =
              [cfm_s8KA7] \r [void_0E]
                  let {
                    sat_s8KA9 [Occ=Once]
                      :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                         -> GHC.IO.Buffer.Buffer GHC.Types.Char
                         -> GHC.Types.IO
                              (GHC.IO.Buffer.Buffer GHC.Word.Word8,
                               GHC.IO.Buffer.Buffer GHC.Types.Char)
                    [LclId] =
                        [cfm_s8KA7] \r [eta_B3 eta_B2 void_0E]
                            GHC.IO.Encoding.Failure.recoverDecode1
                                cfm_s8KA7 eta_B3 eta_B2 GHC.Prim.void#; } in
                  let {
                    sat_s8KAa [Occ=Once]
                      :: GHC.IO.Encoding.Types.BufferCodec
                           GHC.Word.Word8 GHC.Types.Char ()
                    [LclId] =
                        CCCS GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.latin5
                                                                 sat_s8KA9
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii1];
                  } in  Unit# [sat_s8KAa];
        } in 
          GHC.IO.Encoding.Types.TextEncoding [GHC.IO.Encoding.Latin1.latin6
                                              sat_s8KAb
                                              sat_s8KAf];

lvl3_r8KuA
  :: GHC.IO.Encoding.Types.BufferCodec
       GHC.Word.Word8 GHC.Types.Char ()
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.latin5
                                                      lvl_r8Kux
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii1];

GHC.IO.Encoding.Latin1.latin4
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.BufferCodec
             GHC.Word.Word8 GHC.Types.Char () #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] Unit# [lvl3_r8KuA];

lvl4_r8KuB
  :: GHC.IO.Encoding.Types.BufferCodec
       GHC.Types.Char GHC.Word.Word8 ()
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.latin1_checked2
                                                      GHC.IO.Encoding.Latin1.ascii2
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii1];

GHC.IO.Encoding.Latin1.latin1_checked1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.BufferCodec
             GHC.Types.Char GHC.Word.Word8 () #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] Unit# [lvl4_r8KuB];

GHC.IO.Encoding.Latin1.latin1_checked
  :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.TextEncoding! [GHC.IO.Encoding.Latin1.latin6
                                                       GHC.IO.Encoding.Latin1.latin4
                                                       GHC.IO.Encoding.Latin1.latin1_checked1];

GHC.IO.Encoding.Latin1.mkLatin1
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.IO.Encoding.Types.TextEncoding
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [cfm_s8KAi]
        let {
          sat_s8KAq [Occ=Once]
            :: GHC.Types.IO (GHC.IO.Encoding.Types.TextEncoder ())
          [LclId] =
              [cfm_s8KAi] \r [void_0E]
                  let {
                    sat_s8KAo [Occ=Once]
                      :: GHC.IO.Buffer.Buffer GHC.Types.Char
                         -> GHC.IO.Buffer.Buffer GHC.Word.Word8
                         -> GHC.Types.IO
                              (GHC.IO.Buffer.Buffer GHC.Types.Char,
                               GHC.IO.Buffer.Buffer GHC.Word.Word8)
                    [LclId] =
                        [cfm_s8KAi] \r [eta_B3 eta_B2 void_0E]
                            GHC.IO.Encoding.Failure.recoverEncode1
                                cfm_s8KAi eta_B3 eta_B2 GHC.Prim.void#; } in
                  let {
                    sat_s8KAp [Occ=Once]
                      :: GHC.IO.Encoding.Types.BufferCodec
                           GHC.Types.Char GHC.Word.Word8 ()
                    [LclId] =
                        CCCS GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.latin3
                                                                 sat_s8KAo
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii1];
                  } in  Unit# [sat_s8KAp]; } in
        let {
          sat_s8KAm [Occ=Once]
            :: GHC.Types.IO (GHC.IO.Encoding.Types.TextDecoder ())
          [LclId] =
              [cfm_s8KAi] \r [void_0E]
                  let {
                    sat_s8KAk [Occ=Once]
                      :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                         -> GHC.IO.Buffer.Buffer GHC.Types.Char
                         -> GHC.Types.IO
                              (GHC.IO.Buffer.Buffer GHC.Word.Word8,
                               GHC.IO.Buffer.Buffer GHC.Types.Char)
                    [LclId] =
                        [cfm_s8KAi] \r [eta_B3 eta_B2 void_0E]
                            GHC.IO.Encoding.Failure.recoverDecode1
                                cfm_s8KAi eta_B3 eta_B2 GHC.Prim.void#; } in
                  let {
                    sat_s8KAl [Occ=Once]
                      :: GHC.IO.Encoding.Types.BufferCodec
                           GHC.Word.Word8 GHC.Types.Char ()
                    [LclId] =
                        CCCS GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.latin5
                                                                 sat_s8KAk
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii1];
                  } in  Unit# [sat_s8KAl];
        } in 
          GHC.IO.Encoding.Types.TextEncoding [GHC.IO.Encoding.Latin1.latin6
                                              sat_s8KAm
                                              sat_s8KAq];

lvl5_r8KuC
  :: GHC.IO.Encoding.Types.BufferCodec
       GHC.Types.Char GHC.Word.Word8 ()
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.latin3
                                                      GHC.IO.Encoding.Latin1.ascii2
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii1];

GHC.IO.Encoding.Latin1.latin2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.BufferCodec
             GHC.Types.Char GHC.Word.Word8 () #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] Unit# [lvl5_r8KuC];

GHC.IO.Encoding.Latin1.latin1 :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.TextEncoding! [GHC.IO.Encoding.Latin1.latin6
                                                       GHC.IO.Encoding.Latin1.latin4
                                                       GHC.IO.Encoding.Latin1.latin2];


==================== Pre unarise: ====================
2018-03-16 16:03:55.673514004 UTC

GHC.IO.Encoding.Latin1.latin5
  :: GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Encoding.Types.CodingProgress,
            GHC.IO.Buffer.Buffer GHC.Word.Word8,
            GHC.IO.Buffer.Buffer GHC.Types.Char) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [input_s8LuR output_s8LuS eta_s8LuT]
        case input_s8LuR of {
          GHC.IO.Buffer.Buffer dt_s8LuV
                               dt1_s8LuW
                               ds_s8LuX
                               dt2_s8LuY
                               dt3_s8LuZ [Occ=Once]
                               dt4_s8Lv0 ->
              case output_s8LuS of {
                GHC.IO.Buffer.Buffer dt5_s8Lv2
                                     dt6_s8Lv3
                                     ds1_s8Lv4
                                     dt7_s8Lv5
                                     dt8_s8Lv6
                                     dt9_s8Lv7 [Occ=Once] ->
                    let {
                      lvl6_s8Lv8 :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                      [LclId, Unf=OtherCon []] =
                          CCCS GHC.IO.Buffer.Buffer! [dt_s8LuV
                                                      dt1_s8LuW
                                                      ds_s8LuX
                                                      dt2_s8LuY
                                                      0#
                                                      0#];
                    } in 
                      let-no-escape {
                        exit_s8Lv9 [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                          :: GHC.Prim.Int#
                             -> GHC.Prim.Int#
                             -> GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                   (GHC.IO.Encoding.Types.CodingProgress,
                                    GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                    GHC.IO.Buffer.Buffer GHC.Types.Char) #)
                        [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                            sat-only [dt_s8LuV
                                      dt1_s8LuW
                                      ds_s8LuX
                                      dt2_s8LuY
                                      dt4_s8Lv0
                                      dt5_s8Lv2
                                      dt6_s8Lv3
                                      ds1_s8Lv4
                                      dt7_s8Lv5
                                      dt8_s8Lv6
                                      lvl6_s8Lv8] \r [ww_s8Lva ww1_s8Lvb w_s8Lvc]
                                let {
                                  sat_s8Lvf [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                  [LclId] =
                                      CCCS GHC.IO.Buffer.Buffer! [dt5_s8Lv2
                                                                  dt6_s8Lv3
                                                                  ds1_s8Lv4
                                                                  dt7_s8Lv5
                                                                  dt8_s8Lv6
                                                                  ww1_s8Lvb]; } in
                                let {
                                  sat_s8Lve [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                  [LclId] =
                                      [dt_s8LuV
                                       dt1_s8LuW
                                       ds_s8LuX
                                       dt2_s8LuY
                                       dt4_s8Lv0
                                       lvl6_s8Lv8
                                       ww_s8Lva] \u []
                                          case ==# [ww_s8Lva dt4_s8Lv0] of {
                                            __DEFAULT ->
                                                GHC.IO.Buffer.Buffer [dt_s8LuV
                                                                      dt1_s8LuW
                                                                      ds_s8LuX
                                                                      dt2_s8LuY
                                                                      ww_s8Lva
                                                                      dt4_s8Lv0];
                                            1# -> lvl6_s8Lv8;
                                          }; } in
                                let {
                                  sat_s8Lvg [Occ=Once]
                                    :: (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char)
                                  [LclId] =
                                      CCCS (,,)! [GHC.IO.Encoding.Types.InputUnderflow
                                                  sat_s8Lve
                                                  sat_s8Lvf];
                                } in  (#,#) [w_s8Lvc sat_s8Lvg];
                      } in 
                        let-no-escape {
                          exit1_s8Lvh [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                            :: GHC.Prim.Int#
                               -> GHC.Prim.Int#
                               -> GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     (GHC.IO.Encoding.Types.CodingProgress,
                                      GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                      GHC.IO.Buffer.Buffer GHC.Types.Char) #)
                          [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                              sat-only [dt_s8LuV
                                        dt1_s8LuW
                                        ds_s8LuX
                                        dt2_s8LuY
                                        dt4_s8Lv0
                                        dt5_s8Lv2
                                        dt6_s8Lv3
                                        ds1_s8Lv4
                                        dt7_s8Lv5
                                        dt8_s8Lv6
                                        lvl6_s8Lv8] \r [ww_s8Lvi ww1_s8Lvj w_s8Lvk]
                                  let {
                                    sat_s8Lvn [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                    [LclId] =
                                        CCCS GHC.IO.Buffer.Buffer! [dt5_s8Lv2
                                                                    dt6_s8Lv3
                                                                    ds1_s8Lv4
                                                                    dt7_s8Lv5
                                                                    dt8_s8Lv6
                                                                    ww1_s8Lvj]; } in
                                  let {
                                    sat_s8Lvm [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                    [LclId] =
                                        [dt_s8LuV
                                         dt1_s8LuW
                                         ds_s8LuX
                                         dt2_s8LuY
                                         dt4_s8Lv0
                                         lvl6_s8Lv8
                                         ww_s8Lvi] \u []
                                            case ==# [ww_s8Lvi dt4_s8Lv0] of {
                                              __DEFAULT ->
                                                  GHC.IO.Buffer.Buffer [dt_s8LuV
                                                                        dt1_s8LuW
                                                                        ds_s8LuX
                                                                        dt2_s8LuY
                                                                        ww_s8Lvi
                                                                        dt4_s8Lv0];
                                              1# -> lvl6_s8Lv8;
                                            }; } in
                                  let {
                                    sat_s8Lvo [Occ=Once]
                                      :: (GHC.IO.Encoding.Types.CodingProgress,
                                          GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                          GHC.IO.Buffer.Buffer GHC.Types.Char)
                                    [LclId] =
                                        CCCS (,,)! [GHC.IO.Encoding.Types.OutputUnderflow
                                                    sat_s8Lvm
                                                    sat_s8Lvn];
                                  } in  (#,#) [w_s8Lvk sat_s8Lvo];
                        } in 
                          let-no-escape {
                            $wloop_s8Lvp [InlPrag=NOUSERINLINE[0], Occ=LoopBreakerT[3]]
                              :: GHC.Prim.Int#
                                 -> GHC.Prim.Int#
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                       (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char) #)
                            [LclId[JoinId(3)], Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
                                sat-only [dt_s8LuV
                                          dt1_s8LuW
                                          dt4_s8Lv0
                                          dt5_s8Lv2
                                          dt6_s8Lv3
                                          dt7_s8Lv5
                                          exit_s8Lv9
                                          exit1_s8Lvh
                                          $wloop_s8Lvp] \r [ww_s8Lvq ww1_s8Lvr w_s8Lvs]
                                    case >=# [ww1_s8Lvr dt7_s8Lv5] of {
                                      __DEFAULT ->
                                          case >=# [ww_s8Lvq dt4_s8Lv0] of {
                                            __DEFAULT ->
                                                case plusAddr# [dt_s8LuV ww_s8Lvq] of sat_s8Lvv {
                                                  __DEFAULT ->
                                                      case
                                                          readWord8OffAddr# [sat_s8Lvv 0# w_s8Lvs]
                                                      of
                                                      { (#,#) ipv_s8Lvx [Occ=Once]
                                                              ipv1_s8Lvy [Occ=Once] ->
                                                            case
                                                                touch# [dt1_s8LuW ipv_s8Lvx]
                                                            of
                                                            s'_s8Lvz
                                                            { __DEFAULT ->
                                                                  case
                                                                      word2Int# [ipv1_s8Lvy]
                                                                  of
                                                                  sat_s8LvA
                                                                  { __DEFAULT ->
                                                                        case
                                                                            chr# [sat_s8LvA]
                                                                        of
                                                                        sat_s8LvB
                                                                        { __DEFAULT ->
                                                                              case
                                                                                  writeWideCharOffAddr# [dt5_s8Lv2
                                                                                                         ww1_s8Lvr
                                                                                                         sat_s8LvB
                                                                                                         s'_s8Lvz]
                                                                              of
                                                                              s2_s8LvC
                                                                              { __DEFAULT ->
                                                                                    case
                                                                                        touch# [dt6_s8Lv3
                                                                                                s2_s8LvC]
                                                                                    of
                                                                                    s'1_s8LvD
                                                                                    { __DEFAULT ->
                                                                                          case
                                                                                              +# [ww1_s8Lvr
                                                                                                  1#]
                                                                                          of
                                                                                          sat_s8LvF
                                                                                          { __DEFAULT ->
                                                                                                case
                                                                                                    +# [ww_s8Lvq
                                                                                                        1#]
                                                                                                of
                                                                                                sat_s8LvE
                                                                                                { __DEFAULT ->
                                                                                                      $wloop_s8Lvp
                                                                                                          sat_s8LvE
                                                                                                          sat_s8LvF
                                                                                                          s'1_s8LvD;
                                                                                                };
                                                                                          };
                                                                                    };
                                                                              };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                            1# -> exit_s8Lv9 ww_s8Lvq ww1_s8Lvr w_s8Lvs;
                                          };
                                      1# -> exit1_s8Lvh ww_s8Lvq ww1_s8Lvr w_s8Lvs;
                                    };
                          } in  $wloop_s8Lvp dt3_s8LuZ dt9_s8Lv7 eta_s8LuT;
              };
        };

GHC.IO.Encoding.Latin1.latin1_decode
  :: GHC.IO.Encoding.Types.DecodeBuffer
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Encoding.Latin1.latin5 eta_B3 eta_B2 eta_B1;

GHC.IO.Encoding.Latin1.ascii5
  :: GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Encoding.Types.CodingProgress,
            GHC.IO.Buffer.Buffer GHC.Word.Word8,
            GHC.IO.Buffer.Buffer GHC.Types.Char) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [input_s8LvG output_s8LvH eta_s8LvI]
        case input_s8LvG of {
          GHC.IO.Buffer.Buffer dt_s8LvK
                               dt1_s8LvL
                               ds_s8LvM
                               dt2_s8LvN
                               dt3_s8LvO [Occ=Once]
                               dt4_s8LvP ->
              case output_s8LvH of {
                GHC.IO.Buffer.Buffer dt5_s8LvR
                                     dt6_s8LvS
                                     ds1_s8LvT
                                     dt7_s8LvU
                                     dt8_s8LvV
                                     dt9_s8LvW [Occ=Once] ->
                    let {
                      lvl6_s8LvX :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                      [LclId, Unf=OtherCon []] =
                          CCCS GHC.IO.Buffer.Buffer! [dt_s8LvK
                                                      dt1_s8LvL
                                                      ds_s8LvM
                                                      dt2_s8LvN
                                                      0#
                                                      0#];
                    } in 
                      let-no-escape {
                        exit_s8LvY [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                          :: GHC.Prim.Int#
                             -> GHC.Prim.Int#
                             -> GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                   (GHC.IO.Encoding.Types.CodingProgress,
                                    GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                    GHC.IO.Buffer.Buffer GHC.Types.Char) #)
                        [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                            sat-only [dt_s8LvK
                                      dt1_s8LvL
                                      ds_s8LvM
                                      dt2_s8LvN
                                      dt4_s8LvP
                                      dt5_s8LvR
                                      dt6_s8LvS
                                      ds1_s8LvT
                                      dt7_s8LvU
                                      dt8_s8LvV
                                      lvl6_s8LvX] \r [ww_s8LvZ ww1_s8Lw0 s'_s8Lw1]
                                let {
                                  sat_s8Lw4 [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                  [LclId] =
                                      CCCS GHC.IO.Buffer.Buffer! [dt5_s8LvR
                                                                  dt6_s8LvS
                                                                  ds1_s8LvT
                                                                  dt7_s8LvU
                                                                  dt8_s8LvV
                                                                  ww1_s8Lw0]; } in
                                let {
                                  sat_s8Lw3 [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                  [LclId] =
                                      [dt_s8LvK
                                       dt1_s8LvL
                                       ds_s8LvM
                                       dt2_s8LvN
                                       dt4_s8LvP
                                       lvl6_s8LvX
                                       ww_s8LvZ] \u []
                                          case ==# [ww_s8LvZ dt4_s8LvP] of {
                                            __DEFAULT ->
                                                GHC.IO.Buffer.Buffer [dt_s8LvK
                                                                      dt1_s8LvL
                                                                      ds_s8LvM
                                                                      dt2_s8LvN
                                                                      ww_s8LvZ
                                                                      dt4_s8LvP];
                                            1# -> lvl6_s8LvX;
                                          }; } in
                                let {
                                  sat_s8Lw5 [Occ=Once]
                                    :: (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char)
                                  [LclId] =
                                      CCCS (,,)! [GHC.IO.Encoding.Types.InvalidSequence
                                                  sat_s8Lw3
                                                  sat_s8Lw4];
                                } in  (#,#) [s'_s8Lw1 sat_s8Lw5];
                      } in 
                        let-no-escape {
                          exit1_s8Lw6 [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                            :: GHC.Prim.Int#
                               -> GHC.Prim.Int#
                               -> GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     (GHC.IO.Encoding.Types.CodingProgress,
                                      GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                      GHC.IO.Buffer.Buffer GHC.Types.Char) #)
                          [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                              sat-only [dt_s8LvK
                                        dt1_s8LvL
                                        ds_s8LvM
                                        dt2_s8LvN
                                        dt4_s8LvP
                                        dt5_s8LvR
                                        dt6_s8LvS
                                        ds1_s8LvT
                                        dt7_s8LvU
                                        dt8_s8LvV
                                        lvl6_s8LvX] \r [ww_s8Lw7 ww1_s8Lw8 w_s8Lw9]
                                  let {
                                    sat_s8Lwc [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                    [LclId] =
                                        CCCS GHC.IO.Buffer.Buffer! [dt5_s8LvR
                                                                    dt6_s8LvS
                                                                    ds1_s8LvT
                                                                    dt7_s8LvU
                                                                    dt8_s8LvV
                                                                    ww1_s8Lw8]; } in
                                  let {
                                    sat_s8Lwb [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                    [LclId] =
                                        [dt_s8LvK
                                         dt1_s8LvL
                                         ds_s8LvM
                                         dt2_s8LvN
                                         dt4_s8LvP
                                         lvl6_s8LvX
                                         ww_s8Lw7] \u []
                                            case ==# [ww_s8Lw7 dt4_s8LvP] of {
                                              __DEFAULT ->
                                                  GHC.IO.Buffer.Buffer [dt_s8LvK
                                                                        dt1_s8LvL
                                                                        ds_s8LvM
                                                                        dt2_s8LvN
                                                                        ww_s8Lw7
                                                                        dt4_s8LvP];
                                              1# -> lvl6_s8LvX;
                                            }; } in
                                  let {
                                    sat_s8Lwd [Occ=Once]
                                      :: (GHC.IO.Encoding.Types.CodingProgress,
                                          GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                          GHC.IO.Buffer.Buffer GHC.Types.Char)
                                    [LclId] =
                                        CCCS (,,)! [GHC.IO.Encoding.Types.InputUnderflow
                                                    sat_s8Lwb
                                                    sat_s8Lwc];
                                  } in  (#,#) [w_s8Lw9 sat_s8Lwd];
                        } in 
                          let-no-escape {
                            exit2_s8Lwe [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                              :: GHC.Prim.Int#
                                 -> GHC.Prim.Int#
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                       (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char) #)
                            [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                                sat-only [dt_s8LvK
                                          dt1_s8LvL
                                          ds_s8LvM
                                          dt2_s8LvN
                                          dt4_s8LvP
                                          dt5_s8LvR
                                          dt6_s8LvS
                                          ds1_s8LvT
                                          dt7_s8LvU
                                          dt8_s8LvV
                                          lvl6_s8LvX] \r [ww_s8Lwf ww1_s8Lwg w_s8Lwh]
                                    let {
                                      sat_s8Lwk [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                      [LclId] =
                                          CCCS GHC.IO.Buffer.Buffer! [dt5_s8LvR
                                                                      dt6_s8LvS
                                                                      ds1_s8LvT
                                                                      dt7_s8LvU
                                                                      dt8_s8LvV
                                                                      ww1_s8Lwg]; } in
                                    let {
                                      sat_s8Lwj [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                      [LclId] =
                                          [dt_s8LvK
                                           dt1_s8LvL
                                           ds_s8LvM
                                           dt2_s8LvN
                                           dt4_s8LvP
                                           lvl6_s8LvX
                                           ww_s8Lwf] \u []
                                              case ==# [ww_s8Lwf dt4_s8LvP] of {
                                                __DEFAULT ->
                                                    GHC.IO.Buffer.Buffer [dt_s8LvK
                                                                          dt1_s8LvL
                                                                          ds_s8LvM
                                                                          dt2_s8LvN
                                                                          ww_s8Lwf
                                                                          dt4_s8LvP];
                                                1# -> lvl6_s8LvX;
                                              }; } in
                                    let {
                                      sat_s8Lwl [Occ=Once]
                                        :: (GHC.IO.Encoding.Types.CodingProgress,
                                            GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                            GHC.IO.Buffer.Buffer GHC.Types.Char)
                                      [LclId] =
                                          CCCS (,,)! [GHC.IO.Encoding.Types.OutputUnderflow
                                                      sat_s8Lwj
                                                      sat_s8Lwk];
                                    } in  (#,#) [w_s8Lwh sat_s8Lwl];
                          } in 
                            let-no-escape {
                              $wloop_s8Lwm [InlPrag=NOUSERINLINE[0], Occ=LoopBreakerT[3]]
                                :: GHC.Prim.Int#
                                   -> GHC.Prim.Int#
                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         (GHC.IO.Encoding.Types.CodingProgress,
                                          GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                          GHC.IO.Buffer.Buffer GHC.Types.Char) #)
                              [LclId[JoinId(3)], Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
                                  sat-only [dt_s8LvK
                                            dt1_s8LvL
                                            dt4_s8LvP
                                            dt5_s8LvR
                                            dt6_s8LvS
                                            dt7_s8LvU
                                            exit_s8LvY
                                            exit1_s8Lw6
                                            exit2_s8Lwe
                                            $wloop_s8Lwm] \r [ww_s8Lwn ww1_s8Lwo w_s8Lwp]
                                      case >=# [ww1_s8Lwo dt7_s8LvU] of {
                                        __DEFAULT ->
                                            case >=# [ww_s8Lwn dt4_s8LvP] of {
                                              __DEFAULT ->
                                                  case plusAddr# [dt_s8LvK ww_s8Lwn] of sat_s8Lws {
                                                    __DEFAULT ->
                                                        case
                                                            readWord8OffAddr# [sat_s8Lws 0# w_s8Lwp]
                                                        of
                                                        { (#,#) ipv_s8Lwu [Occ=Once] ipv1_s8Lwv ->
                                                              case
                                                                  touch# [dt1_s8LvL ipv_s8Lwu]
                                                              of
                                                              s'_s8Lww
                                                              { __DEFAULT ->
                                                                    case
                                                                        gtWord# [ipv1_s8Lwv 127##]
                                                                    of
                                                                    { __DEFAULT ->
                                                                          case
                                                                              word2Int# [ipv1_s8Lwv]
                                                                          of
                                                                          sat_s8Lwy
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    chr# [sat_s8Lwy]
                                                                                of
                                                                                sat_s8Lwz
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          writeWideCharOffAddr# [dt5_s8LvR
                                                                                                                 ww1_s8Lwo
                                                                                                                 sat_s8Lwz
                                                                                                                 s'_s8Lww]
                                                                                      of
                                                                                      s2_s8LwA
                                                                                      { __DEFAULT ->
                                                                                            case
                                                                                                touch# [dt6_s8LvS
                                                                                                        s2_s8LwA]
                                                                                            of
                                                                                            s'1_s8LwB
                                                                                            { __DEFAULT ->
                                                                                                  case
                                                                                                      +# [ww1_s8Lwo
                                                                                                          1#]
                                                                                                  of
                                                                                                  sat_s8LwD
                                                                                                  { __DEFAULT ->
                                                                                                        case
                                                                                                            +# [ww_s8Lwn
                                                                                                                1#]
                                                                                                        of
                                                                                                        sat_s8LwC
                                                                                                        { __DEFAULT ->
                                                                                                              $wloop_s8Lwm
                                                                                                                  sat_s8LwC
                                                                                                                  sat_s8LwD
                                                                                                                  s'1_s8LwB;
                                                                                                        };
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                                };
                                                                          };
                                                                      1# ->
                                                                          exit_s8LvY
                                                                              ww_s8Lwn
                                                                              ww1_s8Lwo
                                                                              s'_s8Lww;
                                                                    };
                                                              };
                                                        };
                                                  };
                                              1# -> exit1_s8Lw6 ww_s8Lwn ww1_s8Lwo w_s8Lwp;
                                            };
                                        1# -> exit2_s8Lwe ww_s8Lwn ww1_s8Lwo w_s8Lwp;
                                      };
                            } in  $wloop_s8Lwm dt3_s8LvO dt9_s8LvW eta_s8LvI;
              };
        };

GHC.IO.Encoding.Latin1.ascii_decode
  :: GHC.IO.Encoding.Types.DecodeBuffer
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Encoding.Latin1.ascii5 eta_B3 eta_B2 eta_B1;

GHC.IO.Encoding.Latin1.latin3
  :: GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Encoding.Types.CodingProgress,
            GHC.IO.Buffer.Buffer GHC.Types.Char,
            GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [input_s8LwE output_s8LwF eta_s8LwG]
        case input_s8LwE of {
          GHC.IO.Buffer.Buffer dt_s8LwI
                               dt1_s8LwJ
                               ds_s8LwK
                               dt2_s8LwL
                               dt3_s8LwM [Occ=Once]
                               dt4_s8LwN ->
              case output_s8LwF of {
                GHC.IO.Buffer.Buffer dt5_s8LwP
                                     dt6_s8LwQ
                                     ds1_s8LwR
                                     dt7_s8LwS
                                     dt8_s8LwT
                                     dt9_s8LwU [Occ=Once] ->
                    let {
                      lvl6_s8LwV :: GHC.IO.Buffer.Buffer GHC.Types.Char
                      [LclId, Unf=OtherCon []] =
                          CCCS GHC.IO.Buffer.Buffer! [dt_s8LwI
                                                      dt1_s8LwJ
                                                      ds_s8LwK
                                                      dt2_s8LwL
                                                      0#
                                                      0#];
                    } in 
                      let-no-escape {
                        exit_s8LwW [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                          :: GHC.Prim.Int#
                             -> GHC.Prim.Int#
                             -> GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                   (GHC.IO.Encoding.Types.CodingProgress,
                                    GHC.IO.Buffer.Buffer GHC.Types.Char,
                                    GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                        [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                            sat-only [dt_s8LwI
                                      dt1_s8LwJ
                                      ds_s8LwK
                                      dt2_s8LwL
                                      dt4_s8LwN
                                      dt5_s8LwP
                                      dt6_s8LwQ
                                      ds1_s8LwR
                                      dt7_s8LwS
                                      dt8_s8LwT
                                      lvl6_s8LwV] \r [ww_s8LwX ww1_s8LwY w_s8LwZ]
                                let {
                                  sat_s8Lx2 [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                  [LclId] =
                                      CCCS GHC.IO.Buffer.Buffer! [dt5_s8LwP
                                                                  dt6_s8LwQ
                                                                  ds1_s8LwR
                                                                  dt7_s8LwS
                                                                  dt8_s8LwT
                                                                  ww1_s8LwY]; } in
                                let {
                                  sat_s8Lx1 [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                  [LclId] =
                                      [dt_s8LwI
                                       dt1_s8LwJ
                                       ds_s8LwK
                                       dt2_s8LwL
                                       dt4_s8LwN
                                       lvl6_s8LwV
                                       ww_s8LwX] \u []
                                          case ==# [ww_s8LwX dt4_s8LwN] of {
                                            __DEFAULT ->
                                                GHC.IO.Buffer.Buffer [dt_s8LwI
                                                                      dt1_s8LwJ
                                                                      ds_s8LwK
                                                                      dt2_s8LwL
                                                                      ww_s8LwX
                                                                      dt4_s8LwN];
                                            1# -> lvl6_s8LwV;
                                          }; } in
                                let {
                                  sat_s8Lx3 [Occ=Once]
                                    :: (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                  [LclId] =
                                      CCCS (,,)! [GHC.IO.Encoding.Types.InputUnderflow
                                                  sat_s8Lx1
                                                  sat_s8Lx2];
                                } in  (#,#) [w_s8LwZ sat_s8Lx3];
                      } in 
                        let-no-escape {
                          exit1_s8Lx4 [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                            :: GHC.Prim.Int#
                               -> GHC.Prim.Int#
                               -> GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     (GHC.IO.Encoding.Types.CodingProgress,
                                      GHC.IO.Buffer.Buffer GHC.Types.Char,
                                      GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                          [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                              sat-only [dt_s8LwI
                                        dt1_s8LwJ
                                        ds_s8LwK
                                        dt2_s8LwL
                                        dt4_s8LwN
                                        dt5_s8LwP
                                        dt6_s8LwQ
                                        ds1_s8LwR
                                        dt7_s8LwS
                                        dt8_s8LwT
                                        lvl6_s8LwV] \r [ww_s8Lx5 ww1_s8Lx6 w_s8Lx7]
                                  let {
                                    sat_s8Lxa [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                    [LclId] =
                                        CCCS GHC.IO.Buffer.Buffer! [dt5_s8LwP
                                                                    dt6_s8LwQ
                                                                    ds1_s8LwR
                                                                    dt7_s8LwS
                                                                    dt8_s8LwT
                                                                    ww1_s8Lx6]; } in
                                  let {
                                    sat_s8Lx9 [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                    [LclId] =
                                        [dt_s8LwI
                                         dt1_s8LwJ
                                         ds_s8LwK
                                         dt2_s8LwL
                                         dt4_s8LwN
                                         lvl6_s8LwV
                                         ww_s8Lx5] \u []
                                            case ==# [ww_s8Lx5 dt4_s8LwN] of {
                                              __DEFAULT ->
                                                  GHC.IO.Buffer.Buffer [dt_s8LwI
                                                                        dt1_s8LwJ
                                                                        ds_s8LwK
                                                                        dt2_s8LwL
                                                                        ww_s8Lx5
                                                                        dt4_s8LwN];
                                              1# -> lvl6_s8LwV;
                                            }; } in
                                  let {
                                    sat_s8Lxb [Occ=Once]
                                      :: (GHC.IO.Encoding.Types.CodingProgress,
                                          GHC.IO.Buffer.Buffer GHC.Types.Char,
                                          GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                    [LclId] =
                                        CCCS (,,)! [GHC.IO.Encoding.Types.OutputUnderflow
                                                    sat_s8Lx9
                                                    sat_s8Lxa];
                                  } in  (#,#) [w_s8Lx7 sat_s8Lxb];
                        } in 
                          let-no-escape {
                            $wloop_s8Lxc [InlPrag=NOUSERINLINE[0], Occ=LoopBreakerT[3]]
                              :: GHC.Prim.Int#
                                 -> GHC.Prim.Int#
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                       (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                            [LclId[JoinId(3)], Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
                                sat-only [dt_s8LwI
                                          dt1_s8LwJ
                                          dt4_s8LwN
                                          dt5_s8LwP
                                          dt6_s8LwQ
                                          dt7_s8LwS
                                          exit_s8LwW
                                          exit1_s8Lx4
                                          $wloop_s8Lxc] \r [ww_s8Lxd ww1_s8Lxe w_s8Lxf]
                                    case >=# [ww1_s8Lxe dt7_s8LwS] of {
                                      __DEFAULT ->
                                          case >=# [ww_s8Lxd dt4_s8LwN] of {
                                            __DEFAULT ->
                                                case
                                                    readWideCharOffAddr# [dt_s8LwI ww_s8Lxd w_s8Lxf]
                                                of
                                                { (#,#) ipv_s8Lxj [Occ=Once]
                                                        ipv1_s8Lxk [Occ=Once] ->
                                                      case
                                                          touch# [dt1_s8LwJ ipv_s8Lxj]
                                                      of
                                                      s'_s8Lxl
                                                      { __DEFAULT ->
                                                            case ord# [ipv1_s8Lxk] of sat_s8Lxn {
                                                              __DEFAULT ->
                                                                  case
                                                                      int2Word# [sat_s8Lxn]
                                                                  of
                                                                  sat_s8Lxo
                                                                  { __DEFAULT ->
                                                                        case
                                                                            narrow8Word# [sat_s8Lxo]
                                                                        of
                                                                        sat_s8Lxp
                                                                        { __DEFAULT ->
                                                                              case
                                                                                  plusAddr# [dt5_s8LwP
                                                                                             ww1_s8Lxe]
                                                                              of
                                                                              sat_s8Lxm
                                                                              { __DEFAULT ->
                                                                                    case
                                                                                        writeWord8OffAddr# [sat_s8Lxm
                                                                                                            0#
                                                                                                            sat_s8Lxp
                                                                                                            s'_s8Lxl]
                                                                                    of
                                                                                    s2_s8Lxq
                                                                                    { __DEFAULT ->
                                                                                          case
                                                                                              touch# [dt6_s8LwQ
                                                                                                      s2_s8Lxq]
                                                                                          of
                                                                                          s'1_s8Lxr
                                                                                          { __DEFAULT ->
                                                                                                case
                                                                                                    +# [ww1_s8Lxe
                                                                                                        1#]
                                                                                                of
                                                                                                sat_s8Lxt
                                                                                                { __DEFAULT ->
                                                                                                      case
                                                                                                          +# [ww_s8Lxd
                                                                                                              1#]
                                                                                                      of
                                                                                                      sat_s8Lxs
                                                                                                      { __DEFAULT ->
                                                                                                            $wloop_s8Lxc
                                                                                                                sat_s8Lxs
                                                                                                                sat_s8Lxt
                                                                                                                s'1_s8Lxr;
                                                                                                      };
                                                                                                };
                                                                                          };
                                                                                    };
                                                                              };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                            1# -> exit_s8LwW ww_s8Lxd ww1_s8Lxe w_s8Lxf;
                                          };
                                      1# -> exit1_s8Lx4 ww_s8Lxd ww1_s8Lxe w_s8Lxf;
                                    };
                          } in  $wloop_s8Lxc dt3_s8LwM dt9_s8LwU eta_s8LwG;
              };
        };

GHC.IO.Encoding.Latin1.latin1_encode
  :: GHC.IO.Encoding.Types.EncodeBuffer
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Encoding.Latin1.latin3 eta_B3 eta_B2 eta_B1;

GHC.IO.Encoding.Latin1.ascii3
  :: GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Encoding.Types.CodingProgress,
            GHC.IO.Buffer.Buffer GHC.Types.Char,
            GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [input_s8Lxu output_s8Lxv eta_s8Lxw]
        case input_s8Lxu of {
          GHC.IO.Buffer.Buffer dt_s8Lxy
                               dt1_s8Lxz
                               ds_s8LxA
                               dt2_s8LxB
                               dt3_s8LxC [Occ=Once]
                               dt4_s8LxD ->
              case output_s8Lxv of {
                GHC.IO.Buffer.Buffer dt5_s8LxF
                                     dt6_s8LxG
                                     ds1_s8LxH
                                     dt7_s8LxI
                                     dt8_s8LxJ
                                     dt9_s8LxK [Occ=Once] ->
                    let {
                      lvl6_s8LxL :: GHC.IO.Buffer.Buffer GHC.Types.Char
                      [LclId, Unf=OtherCon []] =
                          CCCS GHC.IO.Buffer.Buffer! [dt_s8Lxy
                                                      dt1_s8Lxz
                                                      ds_s8LxA
                                                      dt2_s8LxB
                                                      0#
                                                      0#];
                    } in 
                      let-no-escape {
                        exit_s8LxM [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                          :: GHC.Prim.Int#
                             -> GHC.Prim.Int#
                             -> GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                   (GHC.IO.Encoding.Types.CodingProgress,
                                    GHC.IO.Buffer.Buffer GHC.Types.Char,
                                    GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                        [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                            sat-only [dt_s8Lxy
                                      dt1_s8Lxz
                                      ds_s8LxA
                                      dt2_s8LxB
                                      dt4_s8LxD
                                      dt5_s8LxF
                                      dt6_s8LxG
                                      ds1_s8LxH
                                      dt7_s8LxI
                                      dt8_s8LxJ
                                      lvl6_s8LxL] \r [ww_s8LxN ww1_s8LxO s'_s8LxP]
                                let {
                                  sat_s8LxS [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                  [LclId] =
                                      CCCS GHC.IO.Buffer.Buffer! [dt5_s8LxF
                                                                  dt6_s8LxG
                                                                  ds1_s8LxH
                                                                  dt7_s8LxI
                                                                  dt8_s8LxJ
                                                                  ww1_s8LxO]; } in
                                let {
                                  sat_s8LxR [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                  [LclId] =
                                      [dt_s8Lxy
                                       dt1_s8Lxz
                                       ds_s8LxA
                                       dt2_s8LxB
                                       dt4_s8LxD
                                       lvl6_s8LxL
                                       ww_s8LxN] \u []
                                          case ==# [ww_s8LxN dt4_s8LxD] of {
                                            __DEFAULT ->
                                                GHC.IO.Buffer.Buffer [dt_s8Lxy
                                                                      dt1_s8Lxz
                                                                      ds_s8LxA
                                                                      dt2_s8LxB
                                                                      ww_s8LxN
                                                                      dt4_s8LxD];
                                            1# -> lvl6_s8LxL;
                                          }; } in
                                let {
                                  sat_s8LxT [Occ=Once]
                                    :: (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                  [LclId] =
                                      CCCS (,,)! [GHC.IO.Encoding.Types.InvalidSequence
                                                  sat_s8LxR
                                                  sat_s8LxS];
                                } in  (#,#) [s'_s8LxP sat_s8LxT];
                      } in 
                        let-no-escape {
                          exit1_s8LxU [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                            :: GHC.Prim.Int#
                               -> GHC.Prim.Int#
                               -> GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     (GHC.IO.Encoding.Types.CodingProgress,
                                      GHC.IO.Buffer.Buffer GHC.Types.Char,
                                      GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                          [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                              sat-only [dt_s8Lxy
                                        dt1_s8Lxz
                                        ds_s8LxA
                                        dt2_s8LxB
                                        dt4_s8LxD
                                        dt5_s8LxF
                                        dt6_s8LxG
                                        ds1_s8LxH
                                        dt7_s8LxI
                                        dt8_s8LxJ
                                        lvl6_s8LxL] \r [ww_s8LxV ww1_s8LxW w_s8LxX]
                                  let {
                                    sat_s8Ly0 [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                    [LclId] =
                                        CCCS GHC.IO.Buffer.Buffer! [dt5_s8LxF
                                                                    dt6_s8LxG
                                                                    ds1_s8LxH
                                                                    dt7_s8LxI
                                                                    dt8_s8LxJ
                                                                    ww1_s8LxW]; } in
                                  let {
                                    sat_s8LxZ [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                    [LclId] =
                                        [dt_s8Lxy
                                         dt1_s8Lxz
                                         ds_s8LxA
                                         dt2_s8LxB
                                         dt4_s8LxD
                                         lvl6_s8LxL
                                         ww_s8LxV] \u []
                                            case ==# [ww_s8LxV dt4_s8LxD] of {
                                              __DEFAULT ->
                                                  GHC.IO.Buffer.Buffer [dt_s8Lxy
                                                                        dt1_s8Lxz
                                                                        ds_s8LxA
                                                                        dt2_s8LxB
                                                                        ww_s8LxV
                                                                        dt4_s8LxD];
                                              1# -> lvl6_s8LxL;
                                            }; } in
                                  let {
                                    sat_s8Ly1 [Occ=Once]
                                      :: (GHC.IO.Encoding.Types.CodingProgress,
                                          GHC.IO.Buffer.Buffer GHC.Types.Char,
                                          GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                    [LclId] =
                                        CCCS (,,)! [GHC.IO.Encoding.Types.InputUnderflow
                                                    sat_s8LxZ
                                                    sat_s8Ly0];
                                  } in  (#,#) [w_s8LxX sat_s8Ly1];
                        } in 
                          let-no-escape {
                            exit2_s8Ly2 [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                              :: GHC.Prim.Int#
                                 -> GHC.Prim.Int#
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                       (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                            [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                                sat-only [dt_s8Lxy
                                          dt1_s8Lxz
                                          ds_s8LxA
                                          dt2_s8LxB
                                          dt4_s8LxD
                                          dt5_s8LxF
                                          dt6_s8LxG
                                          ds1_s8LxH
                                          dt7_s8LxI
                                          dt8_s8LxJ
                                          lvl6_s8LxL] \r [ww_s8Ly3 ww1_s8Ly4 w_s8Ly5]
                                    let {
                                      sat_s8Ly8 [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                      [LclId] =
                                          CCCS GHC.IO.Buffer.Buffer! [dt5_s8LxF
                                                                      dt6_s8LxG
                                                                      ds1_s8LxH
                                                                      dt7_s8LxI
                                                                      dt8_s8LxJ
                                                                      ww1_s8Ly4]; } in
                                    let {
                                      sat_s8Ly7 [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                      [LclId] =
                                          [dt_s8Lxy
                                           dt1_s8Lxz
                                           ds_s8LxA
                                           dt2_s8LxB
                                           dt4_s8LxD
                                           lvl6_s8LxL
                                           ww_s8Ly3] \u []
                                              case ==# [ww_s8Ly3 dt4_s8LxD] of {
                                                __DEFAULT ->
                                                    GHC.IO.Buffer.Buffer [dt_s8Lxy
                                                                          dt1_s8Lxz
                                                                          ds_s8LxA
                                                                          dt2_s8LxB
                                                                          ww_s8Ly3
                                                                          dt4_s8LxD];
                                                1# -> lvl6_s8LxL;
                                              }; } in
                                    let {
                                      sat_s8Ly9 [Occ=Once]
                                        :: (GHC.IO.Encoding.Types.CodingProgress,
                                            GHC.IO.Buffer.Buffer GHC.Types.Char,
                                            GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                      [LclId] =
                                          CCCS (,,)! [GHC.IO.Encoding.Types.OutputUnderflow
                                                      sat_s8Ly7
                                                      sat_s8Ly8];
                                    } in  (#,#) [w_s8Ly5 sat_s8Ly9];
                          } in 
                            let-no-escape {
                              $wloop_s8Lya [InlPrag=NOUSERINLINE[0], Occ=LoopBreakerT[3]]
                                :: GHC.Prim.Int#
                                   -> GHC.Prim.Int#
                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         (GHC.IO.Encoding.Types.CodingProgress,
                                          GHC.IO.Buffer.Buffer GHC.Types.Char,
                                          GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                              [LclId[JoinId(3)], Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
                                  sat-only [dt_s8Lxy
                                            dt1_s8Lxz
                                            dt4_s8LxD
                                            dt5_s8LxF
                                            dt6_s8LxG
                                            dt7_s8LxI
                                            exit_s8LxM
                                            exit1_s8LxU
                                            exit2_s8Ly2
                                            $wloop_s8Lya] \r [ww_s8Lyb ww1_s8Lyc w_s8Lyd]
                                      case >=# [ww1_s8Lyc dt7_s8LxI] of {
                                        __DEFAULT ->
                                            case >=# [ww_s8Lyb dt4_s8LxD] of {
                                              __DEFAULT ->
                                                  case
                                                      readWideCharOffAddr# [dt_s8Lxy
                                                                            ww_s8Lyb
                                                                            w_s8Lyd]
                                                  of
                                                  { (#,#) ipv_s8Lyh [Occ=Once] ipv1_s8Lyi ->
                                                        case
                                                            touch# [dt1_s8Lxz ipv_s8Lyh]
                                                        of
                                                        s'_s8Lyj
                                                        { __DEFAULT ->
                                                              case ord# [ipv1_s8Lyi] of sat_s8Lyk {
                                                                __DEFAULT ->
                                                                    case ># [sat_s8Lyk 127#] of {
                                                                      __DEFAULT ->
                                                                          case
                                                                              ord# [ipv1_s8Lyi]
                                                                          of
                                                                          sat_s8Lyn
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    int2Word# [sat_s8Lyn]
                                                                                of
                                                                                sat_s8Lyo
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          narrow8Word# [sat_s8Lyo]
                                                                                      of
                                                                                      sat_s8Lyp
                                                                                      { __DEFAULT ->
                                                                                            case
                                                                                                plusAddr# [dt5_s8LxF
                                                                                                           ww1_s8Lyc]
                                                                                            of
                                                                                            sat_s8Lym
                                                                                            { __DEFAULT ->
                                                                                                  case
                                                                                                      writeWord8OffAddr# [sat_s8Lym
                                                                                                                          0#
                                                                                                                          sat_s8Lyp
                                                                                                                          s'_s8Lyj]
                                                                                                  of
                                                                                                  s2_s8Lyq
                                                                                                  { __DEFAULT ->
                                                                                                        case
                                                                                                            touch# [dt6_s8LxG
                                                                                                                    s2_s8Lyq]
                                                                                                        of
                                                                                                        s'1_s8Lyr
                                                                                                        { __DEFAULT ->
                                                                                                              case
                                                                                                                  +# [ww1_s8Lyc
                                                                                                                      1#]
                                                                                                              of
                                                                                                              sat_s8Lyt
                                                                                                              { __DEFAULT ->
                                                                                                                    case
                                                                                                                        +# [ww_s8Lyb
                                                                                                                            1#]
                                                                                                                    of
                                                                                                                    sat_s8Lys
                                                                                                                    { __DEFAULT ->
                                                                                                                          $wloop_s8Lya
                                                                                                                              sat_s8Lys
                                                                                                                              sat_s8Lyt
                                                                                                                              s'1_s8Lyr;
                                                                                                                    };
                                                                                                              };
                                                                                                        };
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                                };
                                                                          };
                                                                      1# ->
                                                                          exit_s8LxM
                                                                              ww_s8Lyb
                                                                              ww1_s8Lyc
                                                                              s'_s8Lyj;
                                                                    };
                                                              };
                                                        };
                                                  };
                                              1# -> exit1_s8LxU ww_s8Lyb ww1_s8Lyc w_s8Lyd;
                                            };
                                        1# -> exit2_s8Ly2 ww_s8Lyb ww1_s8Lyc w_s8Lyd;
                                      };
                            } in  $wloop_s8Lya dt3_s8LxC dt9_s8LxK eta_s8Lxw;
              };
        };

GHC.IO.Encoding.Latin1.ascii_encode
  :: GHC.IO.Encoding.Types.EncodeBuffer
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Encoding.Latin1.ascii3 eta_B3 eta_B2 eta_B1;

GHC.IO.Encoding.Latin1.latin1_checked2
  :: GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Encoding.Types.CodingProgress,
            GHC.IO.Buffer.Buffer GHC.Types.Char,
            GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [input_s8Lyu output_s8Lyv eta_s8Lyw]
        case input_s8Lyu of {
          GHC.IO.Buffer.Buffer dt_s8Lyy
                               dt1_s8Lyz
                               ds_s8LyA
                               dt2_s8LyB
                               dt3_s8LyC [Occ=Once]
                               dt4_s8LyD ->
              case output_s8Lyv of {
                GHC.IO.Buffer.Buffer dt5_s8LyF
                                     dt6_s8LyG
                                     ds1_s8LyH
                                     dt7_s8LyI
                                     dt8_s8LyJ
                                     dt9_s8LyK [Occ=Once] ->
                    let {
                      lvl6_s8LyL :: GHC.IO.Buffer.Buffer GHC.Types.Char
                      [LclId, Unf=OtherCon []] =
                          CCCS GHC.IO.Buffer.Buffer! [dt_s8Lyy
                                                      dt1_s8Lyz
                                                      ds_s8LyA
                                                      dt2_s8LyB
                                                      0#
                                                      0#];
                    } in 
                      let-no-escape {
                        exit_s8LyM [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                          :: GHC.Prim.Int#
                             -> GHC.Prim.Int#
                             -> GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                   (GHC.IO.Encoding.Types.CodingProgress,
                                    GHC.IO.Buffer.Buffer GHC.Types.Char,
                                    GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                        [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                            sat-only [dt_s8Lyy
                                      dt1_s8Lyz
                                      ds_s8LyA
                                      dt2_s8LyB
                                      dt4_s8LyD
                                      dt5_s8LyF
                                      dt6_s8LyG
                                      ds1_s8LyH
                                      dt7_s8LyI
                                      dt8_s8LyJ
                                      lvl6_s8LyL] \r [ww_s8LyN ww1_s8LyO s'_s8LyP]
                                let {
                                  sat_s8LyS [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                  [LclId] =
                                      CCCS GHC.IO.Buffer.Buffer! [dt5_s8LyF
                                                                  dt6_s8LyG
                                                                  ds1_s8LyH
                                                                  dt7_s8LyI
                                                                  dt8_s8LyJ
                                                                  ww1_s8LyO]; } in
                                let {
                                  sat_s8LyR [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                  [LclId] =
                                      [dt_s8Lyy
                                       dt1_s8Lyz
                                       ds_s8LyA
                                       dt2_s8LyB
                                       dt4_s8LyD
                                       lvl6_s8LyL
                                       ww_s8LyN] \u []
                                          case ==# [ww_s8LyN dt4_s8LyD] of {
                                            __DEFAULT ->
                                                GHC.IO.Buffer.Buffer [dt_s8Lyy
                                                                      dt1_s8Lyz
                                                                      ds_s8LyA
                                                                      dt2_s8LyB
                                                                      ww_s8LyN
                                                                      dt4_s8LyD];
                                            1# -> lvl6_s8LyL;
                                          }; } in
                                let {
                                  sat_s8LyT [Occ=Once]
                                    :: (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                  [LclId] =
                                      CCCS (,,)! [GHC.IO.Encoding.Types.InvalidSequence
                                                  sat_s8LyR
                                                  sat_s8LyS];
                                } in  (#,#) [s'_s8LyP sat_s8LyT];
                      } in 
                        let-no-escape {
                          exit1_s8LyU [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                            :: GHC.Prim.Int#
                               -> GHC.Prim.Int#
                               -> GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     (GHC.IO.Encoding.Types.CodingProgress,
                                      GHC.IO.Buffer.Buffer GHC.Types.Char,
                                      GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                          [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                              sat-only [dt_s8Lyy
                                        dt1_s8Lyz
                                        ds_s8LyA
                                        dt2_s8LyB
                                        dt4_s8LyD
                                        dt5_s8LyF
                                        dt6_s8LyG
                                        ds1_s8LyH
                                        dt7_s8LyI
                                        dt8_s8LyJ
                                        lvl6_s8LyL] \r [ww_s8LyV ww1_s8LyW w_s8LyX]
                                  let {
                                    sat_s8Lz0 [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                    [LclId] =
                                        CCCS GHC.IO.Buffer.Buffer! [dt5_s8LyF
                                                                    dt6_s8LyG
                                                                    ds1_s8LyH
                                                                    dt7_s8LyI
                                                                    dt8_s8LyJ
                                                                    ww1_s8LyW]; } in
                                  let {
                                    sat_s8LyZ [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                    [LclId] =
                                        [dt_s8Lyy
                                         dt1_s8Lyz
                                         ds_s8LyA
                                         dt2_s8LyB
                                         dt4_s8LyD
                                         lvl6_s8LyL
                                         ww_s8LyV] \u []
                                            case ==# [ww_s8LyV dt4_s8LyD] of {
                                              __DEFAULT ->
                                                  GHC.IO.Buffer.Buffer [dt_s8Lyy
                                                                        dt1_s8Lyz
                                                                        ds_s8LyA
                                                                        dt2_s8LyB
                                                                        ww_s8LyV
                                                                        dt4_s8LyD];
                                              1# -> lvl6_s8LyL;
                                            }; } in
                                  let {
                                    sat_s8Lz1 [Occ=Once]
                                      :: (GHC.IO.Encoding.Types.CodingProgress,
                                          GHC.IO.Buffer.Buffer GHC.Types.Char,
                                          GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                    [LclId] =
                                        CCCS (,,)! [GHC.IO.Encoding.Types.InputUnderflow
                                                    sat_s8LyZ
                                                    sat_s8Lz0];
                                  } in  (#,#) [w_s8LyX sat_s8Lz1];
                        } in 
                          let-no-escape {
                            exit2_s8Lz2 [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                              :: GHC.Prim.Int#
                                 -> GHC.Prim.Int#
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                       (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                            [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                                sat-only [dt_s8Lyy
                                          dt1_s8Lyz
                                          ds_s8LyA
                                          dt2_s8LyB
                                          dt4_s8LyD
                                          dt5_s8LyF
                                          dt6_s8LyG
                                          ds1_s8LyH
                                          dt7_s8LyI
                                          dt8_s8LyJ
                                          lvl6_s8LyL] \r [ww_s8Lz3 ww1_s8Lz4 w_s8Lz5]
                                    let {
                                      sat_s8Lz8 [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                      [LclId] =
                                          CCCS GHC.IO.Buffer.Buffer! [dt5_s8LyF
                                                                      dt6_s8LyG
                                                                      ds1_s8LyH
                                                                      dt7_s8LyI
                                                                      dt8_s8LyJ
                                                                      ww1_s8Lz4]; } in
                                    let {
                                      sat_s8Lz7 [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                      [LclId] =
                                          [dt_s8Lyy
                                           dt1_s8Lyz
                                           ds_s8LyA
                                           dt2_s8LyB
                                           dt4_s8LyD
                                           lvl6_s8LyL
                                           ww_s8Lz3] \u []
                                              case ==# [ww_s8Lz3 dt4_s8LyD] of {
                                                __DEFAULT ->
                                                    GHC.IO.Buffer.Buffer [dt_s8Lyy
                                                                          dt1_s8Lyz
                                                                          ds_s8LyA
                                                                          dt2_s8LyB
                                                                          ww_s8Lz3
                                                                          dt4_s8LyD];
                                                1# -> lvl6_s8LyL;
                                              }; } in
                                    let {
                                      sat_s8Lz9 [Occ=Once]
                                        :: (GHC.IO.Encoding.Types.CodingProgress,
                                            GHC.IO.Buffer.Buffer GHC.Types.Char,
                                            GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                      [LclId] =
                                          CCCS (,,)! [GHC.IO.Encoding.Types.OutputUnderflow
                                                      sat_s8Lz7
                                                      sat_s8Lz8];
                                    } in  (#,#) [w_s8Lz5 sat_s8Lz9];
                          } in 
                            let-no-escape {
                              $wloop_s8Lza [InlPrag=NOUSERINLINE[0], Occ=LoopBreakerT[3]]
                                :: GHC.Prim.Int#
                                   -> GHC.Prim.Int#
                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         (GHC.IO.Encoding.Types.CodingProgress,
                                          GHC.IO.Buffer.Buffer GHC.Types.Char,
                                          GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                              [LclId[JoinId(3)], Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
                                  sat-only [dt_s8Lyy
                                            dt1_s8Lyz
                                            dt4_s8LyD
                                            dt5_s8LyF
                                            dt6_s8LyG
                                            dt7_s8LyI
                                            exit_s8LyM
                                            exit1_s8LyU
                                            exit2_s8Lz2
                                            $wloop_s8Lza] \r [ww_s8Lzb ww1_s8Lzc w_s8Lzd]
                                      case >=# [ww1_s8Lzc dt7_s8LyI] of {
                                        __DEFAULT ->
                                            case >=# [ww_s8Lzb dt4_s8LyD] of {
                                              __DEFAULT ->
                                                  case
                                                      readWideCharOffAddr# [dt_s8Lyy
                                                                            ww_s8Lzb
                                                                            w_s8Lzd]
                                                  of
                                                  { (#,#) ipv_s8Lzh [Occ=Once] ipv1_s8Lzi ->
                                                        case
                                                            touch# [dt1_s8Lyz ipv_s8Lzh]
                                                        of
                                                        s'_s8Lzj
                                                        { __DEFAULT ->
                                                              case ord# [ipv1_s8Lzi] of sat_s8Lzk {
                                                                __DEFAULT ->
                                                                    case ># [sat_s8Lzk 255#] of {
                                                                      __DEFAULT ->
                                                                          case
                                                                              ord# [ipv1_s8Lzi]
                                                                          of
                                                                          sat_s8Lzn
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    int2Word# [sat_s8Lzn]
                                                                                of
                                                                                sat_s8Lzo
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          narrow8Word# [sat_s8Lzo]
                                                                                      of
                                                                                      sat_s8Lzp
                                                                                      { __DEFAULT ->
                                                                                            case
                                                                                                plusAddr# [dt5_s8LyF
                                                                                                           ww1_s8Lzc]
                                                                                            of
                                                                                            sat_s8Lzm
                                                                                            { __DEFAULT ->
                                                                                                  case
                                                                                                      writeWord8OffAddr# [sat_s8Lzm
                                                                                                                          0#
                                                                                                                          sat_s8Lzp
                                                                                                                          s'_s8Lzj]
                                                                                                  of
                                                                                                  s2_s8Lzq
                                                                                                  { __DEFAULT ->
                                                                                                        case
                                                                                                            touch# [dt6_s8LyG
                                                                                                                    s2_s8Lzq]
                                                                                                        of
                                                                                                        s'1_s8Lzr
                                                                                                        { __DEFAULT ->
                                                                                                              case
                                                                                                                  +# [ww1_s8Lzc
                                                                                                                      1#]
                                                                                                              of
                                                                                                              sat_s8Lzt
                                                                                                              { __DEFAULT ->
                                                                                                                    case
                                                                                                                        +# [ww_s8Lzb
                                                                                                                            1#]
                                                                                                                    of
                                                                                                                    sat_s8Lzs
                                                                                                                    { __DEFAULT ->
                                                                                                                          $wloop_s8Lza
                                                                                                                              sat_s8Lzs
                                                                                                                              sat_s8Lzt
                                                                                                                              s'1_s8Lzr;
                                                                                                                    };
                                                                                                              };
                                                                                                        };
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                                };
                                                                          };
                                                                      1# ->
                                                                          exit_s8LyM
                                                                              ww_s8Lzb
                                                                              ww1_s8Lzc
                                                                              s'_s8Lzj;
                                                                    };
                                                              };
                                                        };
                                                  };
                                              1# -> exit1_s8LyU ww_s8Lzb ww1_s8Lzc w_s8Lzd;
                                            };
                                        1# -> exit2_s8Lz2 ww_s8Lzb ww1_s8Lzc w_s8Lzd;
                                      };
                            } in  $wloop_s8Lza dt3_s8LyC dt9_s8LyK eta_s8Lyw;
              };
        };

GHC.IO.Encoding.Latin1.latin1_checked_encode
  :: GHC.IO.Encoding.Types.EncodeBuffer
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Encoding.Latin1.latin1_checked2 eta_B3 eta_B2 eta_B1;

GHC.IO.Encoding.Latin1.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.Encoding.Latin1.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Latin1.$trModule4];

GHC.IO.Encoding.Latin1.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Encoding.Latin1"#;

GHC.IO.Encoding.Latin1.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Latin1.$trModule2];

GHC.IO.Encoding.Latin1.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Encoding.Latin1.$trModule3
                                     GHC.IO.Encoding.Latin1.$trModule1];

GHC.IO.Encoding.Latin1.ascii7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ASCII"#;

GHC.IO.Encoding.Latin1.ascii6 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Encoding.Latin1.ascii7;

GHC.IO.Encoding.Latin1.mkAscii2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s8Lzu] (#,#) [s_s8Lzu GHC.Tuple.()];

GHC.IO.Encoding.Latin1.mkAscii1
  :: ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><S,U>, Unf=OtherCon []] =
    [] \r [ds_s8Lzv eta_s8Lzw] (#,#) [eta_s8Lzw GHC.Tuple.()];

GHC.IO.Encoding.Latin1.mkAscii
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.IO.Encoding.Types.TextEncoding
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [cfm_s8Lzx]
        let {
          sat_s8LzF [Occ=Once]
            :: GHC.Types.IO (GHC.IO.Encoding.Types.TextEncoder ())
          [LclId] =
              [cfm_s8Lzx] \r [s_s8LzC]
                  let {
                    sat_s8LzD [Occ=Once]
                      :: GHC.IO.Buffer.Buffer GHC.Types.Char
                         -> GHC.IO.Buffer.Buffer GHC.Word.Word8
                         -> GHC.Types.IO
                              (GHC.IO.Buffer.Buffer GHC.Types.Char,
                               GHC.IO.Buffer.Buffer GHC.Word.Word8)
                    [LclId] =
                        [cfm_s8Lzx] \r [eta_B3 eta_B2 eta_B1]
                            GHC.IO.Encoding.Failure.recoverEncode1
                                cfm_s8Lzx eta_B3 eta_B2 eta_B1; } in
                  let {
                    sat_s8LzE [Occ=Once]
                      :: GHC.IO.Encoding.Types.BufferCodec
                           GHC.Types.Char GHC.Word.Word8 ()
                    [LclId] =
                        CCCS GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.ascii3
                                                                 sat_s8LzD
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii1];
                  } in  (#,#) [s_s8LzC sat_s8LzE]; } in
        let {
          sat_s8LzB [Occ=Once]
            :: GHC.Types.IO (GHC.IO.Encoding.Types.TextDecoder ())
          [LclId] =
              [cfm_s8Lzx] \r [s_s8Lzy]
                  let {
                    sat_s8Lzz [Occ=Once]
                      :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                         -> GHC.IO.Buffer.Buffer GHC.Types.Char
                         -> GHC.Types.IO
                              (GHC.IO.Buffer.Buffer GHC.Word.Word8,
                               GHC.IO.Buffer.Buffer GHC.Types.Char)
                    [LclId] =
                        [cfm_s8Lzx] \r [eta_B3 eta_B2 eta_B1]
                            GHC.IO.Encoding.Failure.recoverDecode1
                                cfm_s8Lzx eta_B3 eta_B2 eta_B1; } in
                  let {
                    sat_s8LzA [Occ=Once]
                      :: GHC.IO.Encoding.Types.BufferCodec
                           GHC.Word.Word8 GHC.Types.Char ()
                    [LclId] =
                        CCCS GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.ascii5
                                                                 sat_s8Lzz
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii1];
                  } in  (#,#) [s_s8Lzy sat_s8LzA];
        } in 
          GHC.IO.Encoding.Types.TextEncoding [GHC.IO.Encoding.Latin1.ascii6
                                              sat_s8LzB
                                              sat_s8LzF];

lvl_r8Kux
  :: GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Buffer.Buffer GHC.Word.Word8,
            GHC.IO.Buffer.Buffer GHC.Types.Char) #)
[GblId, Arity=3, Str=<B,1*H><B,1*H><B,U>x, Unf=OtherCon []] =
    [] \r [input_s8LzG output_s8LzH eta_s8LzI]
        case input_s8LzG of {
          GHC.IO.Buffer.Buffer _ [Occ=Dead]
                               _ [Occ=Dead]
                               _ [Occ=Dead]
                               _ [Occ=Dead]
                               _ [Occ=Dead]
                               _ [Occ=Dead] ->
              case output_s8LzH of {
                GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                     _ [Occ=Dead]
                                     _ [Occ=Dead]
                                     _ [Occ=Dead]
                                     _ [Occ=Dead]
                                     _ [Occ=Dead] ->
                    raiseIO# [GHC.IO.Encoding.Failure.recoverDecode2 eta_s8LzI];
              };
        };

lvl1_r8Kuy
  :: GHC.IO.Encoding.Types.BufferCodec
       GHC.Word.Word8 GHC.Types.Char ()
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.ascii5
                                                      lvl_r8Kux
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii1];

GHC.IO.Encoding.Latin1.ascii4
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.BufferCodec
             GHC.Word.Word8 GHC.Types.Char () #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s8LzX] (#,#) [s_s8LzX lvl1_r8Kuy];

GHC.IO.Encoding.Latin1.ascii2
  :: GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Buffer.Buffer GHC.Types.Char,
            GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=3,
 Str=<B,1*U(U,U,A,A,U,A)><B,1*H><B,U>x,
 Unf=OtherCon []] =
    [] \r [input_s8LzY output_s8LzZ eta_s8LA0]
        case input_s8LzY of {
          GHC.IO.Buffer.Buffer dt_s8LA2 [Occ=Once]
                               dt1_s8LA3 [Occ=Once]
                               _ [Occ=Dead]
                               _ [Occ=Dead]
                               dt3_s8LA6 [Occ=Once]
                               _ [Occ=Dead] ->
              case output_s8LzZ of {
                GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                     _ [Occ=Dead]
                                     _ [Occ=Dead]
                                     _ [Occ=Dead]
                                     _ [Occ=Dead]
                                     _ [Occ=Dead] ->
                    case readWideCharOffAddr# [dt_s8LA2 dt3_s8LA6 eta_s8LA0] of {
                      (#,#) ipv_s8LAg [Occ=Once] _ [Occ=Dead] ->
                          case touch# [dt1_s8LA3 ipv_s8LAg] of s'_s8LAi {
                            __DEFAULT ->
                                raiseIO# [GHC.IO.Encoding.Failure.recoverEncode2 s'_s8LAi];
                          };
                    };
              };
        };

lvl2_r8Kuz
  :: GHC.IO.Encoding.Types.BufferCodec
       GHC.Types.Char GHC.Word.Word8 ()
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.ascii3
                                                      GHC.IO.Encoding.Latin1.ascii2
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii1];

GHC.IO.Encoding.Latin1.ascii1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.BufferCodec
             GHC.Types.Char GHC.Word.Word8 () #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s8LAj] (#,#) [s_s8LAj lvl2_r8Kuz];

GHC.IO.Encoding.Latin1.ascii :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.TextEncoding! [GHC.IO.Encoding.Latin1.ascii6
                                                       GHC.IO.Encoding.Latin1.ascii4
                                                       GHC.IO.Encoding.Latin1.ascii1];

GHC.IO.Encoding.Latin1.latin7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ISO-8859-1"#;

GHC.IO.Encoding.Latin1.latin6 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Encoding.Latin1.latin7;

GHC.IO.Encoding.Latin1.mkLatin1_checked
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.IO.Encoding.Types.TextEncoding
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [cfm_s8LAk]
        let {
          sat_s8LAs [Occ=Once]
            :: GHC.Types.IO (GHC.IO.Encoding.Types.TextEncoder ())
          [LclId] =
              [cfm_s8LAk] \r [s_s8LAp]
                  let {
                    sat_s8LAq [Occ=Once]
                      :: GHC.IO.Buffer.Buffer GHC.Types.Char
                         -> GHC.IO.Buffer.Buffer GHC.Word.Word8
                         -> GHC.Types.IO
                              (GHC.IO.Buffer.Buffer GHC.Types.Char,
                               GHC.IO.Buffer.Buffer GHC.Word.Word8)
                    [LclId] =
                        [cfm_s8LAk] \r [eta_B3 eta_B2 eta_B1]
                            GHC.IO.Encoding.Failure.recoverEncode1
                                cfm_s8LAk eta_B3 eta_B2 eta_B1; } in
                  let {
                    sat_s8LAr [Occ=Once]
                      :: GHC.IO.Encoding.Types.BufferCodec
                           GHC.Types.Char GHC.Word.Word8 ()
                    [LclId] =
                        CCCS GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.latin1_checked2
                                                                 sat_s8LAq
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii1];
                  } in  (#,#) [s_s8LAp sat_s8LAr]; } in
        let {
          sat_s8LAo [Occ=Once]
            :: GHC.Types.IO (GHC.IO.Encoding.Types.TextDecoder ())
          [LclId] =
              [cfm_s8LAk] \r [s_s8LAl]
                  let {
                    sat_s8LAm [Occ=Once]
                      :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                         -> GHC.IO.Buffer.Buffer GHC.Types.Char
                         -> GHC.Types.IO
                              (GHC.IO.Buffer.Buffer GHC.Word.Word8,
                               GHC.IO.Buffer.Buffer GHC.Types.Char)
                    [LclId] =
                        [cfm_s8LAk] \r [eta_B3 eta_B2 eta_B1]
                            GHC.IO.Encoding.Failure.recoverDecode1
                                cfm_s8LAk eta_B3 eta_B2 eta_B1; } in
                  let {
                    sat_s8LAn [Occ=Once]
                      :: GHC.IO.Encoding.Types.BufferCodec
                           GHC.Word.Word8 GHC.Types.Char ()
                    [LclId] =
                        CCCS GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.latin5
                                                                 sat_s8LAm
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii1];
                  } in  (#,#) [s_s8LAl sat_s8LAn];
        } in 
          GHC.IO.Encoding.Types.TextEncoding [GHC.IO.Encoding.Latin1.latin6
                                              sat_s8LAo
                                              sat_s8LAs];

lvl3_r8KuA
  :: GHC.IO.Encoding.Types.BufferCodec
       GHC.Word.Word8 GHC.Types.Char ()
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.latin5
                                                      lvl_r8Kux
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii1];

GHC.IO.Encoding.Latin1.latin4
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.BufferCodec
             GHC.Word.Word8 GHC.Types.Char () #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s8LAt] (#,#) [s_s8LAt lvl3_r8KuA];

lvl4_r8KuB
  :: GHC.IO.Encoding.Types.BufferCodec
       GHC.Types.Char GHC.Word.Word8 ()
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.latin1_checked2
                                                      GHC.IO.Encoding.Latin1.ascii2
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii1];

GHC.IO.Encoding.Latin1.latin1_checked1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.BufferCodec
             GHC.Types.Char GHC.Word.Word8 () #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s8LAu] (#,#) [s_s8LAu lvl4_r8KuB];

GHC.IO.Encoding.Latin1.latin1_checked
  :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.TextEncoding! [GHC.IO.Encoding.Latin1.latin6
                                                       GHC.IO.Encoding.Latin1.latin4
                                                       GHC.IO.Encoding.Latin1.latin1_checked1];

GHC.IO.Encoding.Latin1.mkLatin1
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.IO.Encoding.Types.TextEncoding
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [cfm_s8LAv]
        let {
          sat_s8LAD [Occ=Once]
            :: GHC.Types.IO (GHC.IO.Encoding.Types.TextEncoder ())
          [LclId] =
              [cfm_s8LAv] \r [s_s8LAA]
                  let {
                    sat_s8LAB [Occ=Once]
                      :: GHC.IO.Buffer.Buffer GHC.Types.Char
                         -> GHC.IO.Buffer.Buffer GHC.Word.Word8
                         -> GHC.Types.IO
                              (GHC.IO.Buffer.Buffer GHC.Types.Char,
                               GHC.IO.Buffer.Buffer GHC.Word.Word8)
                    [LclId] =
                        [cfm_s8LAv] \r [eta_B3 eta_B2 eta_B1]
                            GHC.IO.Encoding.Failure.recoverEncode1
                                cfm_s8LAv eta_B3 eta_B2 eta_B1; } in
                  let {
                    sat_s8LAC [Occ=Once]
                      :: GHC.IO.Encoding.Types.BufferCodec
                           GHC.Types.Char GHC.Word.Word8 ()
                    [LclId] =
                        CCCS GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.latin3
                                                                 sat_s8LAB
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii1];
                  } in  (#,#) [s_s8LAA sat_s8LAC]; } in
        let {
          sat_s8LAz [Occ=Once]
            :: GHC.Types.IO (GHC.IO.Encoding.Types.TextDecoder ())
          [LclId] =
              [cfm_s8LAv] \r [s_s8LAw]
                  let {
                    sat_s8LAx [Occ=Once]
                      :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                         -> GHC.IO.Buffer.Buffer GHC.Types.Char
                         -> GHC.Types.IO
                              (GHC.IO.Buffer.Buffer GHC.Word.Word8,
                               GHC.IO.Buffer.Buffer GHC.Types.Char)
                    [LclId] =
                        [cfm_s8LAv] \r [eta_B3 eta_B2 eta_B1]
                            GHC.IO.Encoding.Failure.recoverDecode1
                                cfm_s8LAv eta_B3 eta_B2 eta_B1; } in
                  let {
                    sat_s8LAy [Occ=Once]
                      :: GHC.IO.Encoding.Types.BufferCodec
                           GHC.Word.Word8 GHC.Types.Char ()
                    [LclId] =
                        CCCS GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.latin5
                                                                 sat_s8LAx
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii1];
                  } in  (#,#) [s_s8LAw sat_s8LAy];
        } in 
          GHC.IO.Encoding.Types.TextEncoding [GHC.IO.Encoding.Latin1.latin6
                                              sat_s8LAz
                                              sat_s8LAD];

lvl5_r8KuC
  :: GHC.IO.Encoding.Types.BufferCodec
       GHC.Types.Char GHC.Word.Word8 ()
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.latin3
                                                      GHC.IO.Encoding.Latin1.ascii2
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii1];

GHC.IO.Encoding.Latin1.latin2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.BufferCodec
             GHC.Types.Char GHC.Word.Word8 () #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s8LAE] (#,#) [s_s8LAE lvl5_r8KuC];

GHC.IO.Encoding.Latin1.latin1 :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.TextEncoding! [GHC.IO.Encoding.Latin1.latin6
                                                       GHC.IO.Encoding.Latin1.latin4
                                                       GHC.IO.Encoding.Latin1.latin2];


==================== STG syntax: ====================
2018-03-16 16:03:55.704353265 UTC

GHC.IO.Encoding.Latin1.latin5
  :: GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Encoding.Types.CodingProgress,
            GHC.IO.Buffer.Buffer GHC.Word.Word8,
            GHC.IO.Buffer.Buffer GHC.Types.Char) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [input_s8LuR output_s8LuS void_0E]
        case input_s8LuR of {
          GHC.IO.Buffer.Buffer dt_s8LuV
                               dt1_s8LuW
                               ds_s8LuX
                               dt2_s8LuY
                               dt3_s8LuZ [Occ=Once]
                               dt4_s8Lv0 ->
              case output_s8LuS of {
                GHC.IO.Buffer.Buffer dt5_s8Lv2
                                     dt6_s8Lv3
                                     ds1_s8Lv4
                                     dt7_s8Lv5
                                     dt8_s8Lv6
                                     dt9_s8Lv7 [Occ=Once] ->
                    let {
                      lvl6_s8Lv8 :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                      [LclId, Unf=OtherCon []] =
                          CCCS GHC.IO.Buffer.Buffer! [dt_s8LuV
                                                      dt1_s8LuW
                                                      ds_s8LuX
                                                      dt2_s8LuY
                                                      0#
                                                      0#];
                    } in 
                      let-no-escape {
                        exit_s8Lv9 [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                          :: GHC.Prim.Int#
                             -> GHC.Prim.Int#
                             -> GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                   (GHC.IO.Encoding.Types.CodingProgress,
                                    GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                    GHC.IO.Buffer.Buffer GHC.Types.Char) #)
                        [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                            sat-only [dt_s8LuV
                                      dt1_s8LuW
                                      ds_s8LuX
                                      dt2_s8LuY
                                      dt4_s8Lv0
                                      dt5_s8Lv2
                                      dt6_s8Lv3
                                      ds1_s8Lv4
                                      dt7_s8Lv5
                                      dt8_s8Lv6
                                      lvl6_s8Lv8] \r [ww_s8Lva ww1_s8Lvb void_0E]
                                let {
                                  sat_s8Lvf [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                  [LclId] =
                                      CCCS GHC.IO.Buffer.Buffer! [dt5_s8Lv2
                                                                  dt6_s8Lv3
                                                                  ds1_s8Lv4
                                                                  dt7_s8Lv5
                                                                  dt8_s8Lv6
                                                                  ww1_s8Lvb]; } in
                                let {
                                  sat_s8Lve [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                  [LclId] =
                                      [dt_s8LuV
                                       dt1_s8LuW
                                       ds_s8LuX
                                       dt2_s8LuY
                                       dt4_s8Lv0
                                       lvl6_s8Lv8
                                       ww_s8Lva] \u []
                                          case ==# [ww_s8Lva dt4_s8Lv0] of {
                                            __DEFAULT ->
                                                GHC.IO.Buffer.Buffer [dt_s8LuV
                                                                      dt1_s8LuW
                                                                      ds_s8LuX
                                                                      dt2_s8LuY
                                                                      ww_s8Lva
                                                                      dt4_s8Lv0];
                                            1# -> lvl6_s8Lv8;
                                          }; } in
                                let {
                                  sat_s8Lvg [Occ=Once]
                                    :: (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char)
                                  [LclId] =
                                      CCCS (,,)! [GHC.IO.Encoding.Types.InputUnderflow
                                                  sat_s8Lve
                                                  sat_s8Lvf];
                                } in  Unit# [sat_s8Lvg];
                      } in 
                        let-no-escape {
                          exit1_s8Lvh [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                            :: GHC.Prim.Int#
                               -> GHC.Prim.Int#
                               -> GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     (GHC.IO.Encoding.Types.CodingProgress,
                                      GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                      GHC.IO.Buffer.Buffer GHC.Types.Char) #)
                          [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                              sat-only [dt_s8LuV
                                        dt1_s8LuW
                                        ds_s8LuX
                                        dt2_s8LuY
                                        dt4_s8Lv0
                                        dt5_s8Lv2
                                        dt6_s8Lv3
                                        ds1_s8Lv4
                                        dt7_s8Lv5
                                        dt8_s8Lv6
                                        lvl6_s8Lv8] \r [ww_s8Lvi ww1_s8Lvj void_0E]
                                  let {
                                    sat_s8Lvn [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                    [LclId] =
                                        CCCS GHC.IO.Buffer.Buffer! [dt5_s8Lv2
                                                                    dt6_s8Lv3
                                                                    ds1_s8Lv4
                                                                    dt7_s8Lv5
                                                                    dt8_s8Lv6
                                                                    ww1_s8Lvj]; } in
                                  let {
                                    sat_s8Lvm [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                    [LclId] =
                                        [dt_s8LuV
                                         dt1_s8LuW
                                         ds_s8LuX
                                         dt2_s8LuY
                                         dt4_s8Lv0
                                         lvl6_s8Lv8
                                         ww_s8Lvi] \u []
                                            case ==# [ww_s8Lvi dt4_s8Lv0] of {
                                              __DEFAULT ->
                                                  GHC.IO.Buffer.Buffer [dt_s8LuV
                                                                        dt1_s8LuW
                                                                        ds_s8LuX
                                                                        dt2_s8LuY
                                                                        ww_s8Lvi
                                                                        dt4_s8Lv0];
                                              1# -> lvl6_s8Lv8;
                                            }; } in
                                  let {
                                    sat_s8Lvo [Occ=Once]
                                      :: (GHC.IO.Encoding.Types.CodingProgress,
                                          GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                          GHC.IO.Buffer.Buffer GHC.Types.Char)
                                    [LclId] =
                                        CCCS (,,)! [GHC.IO.Encoding.Types.OutputUnderflow
                                                    sat_s8Lvm
                                                    sat_s8Lvn];
                                  } in  Unit# [sat_s8Lvo];
                        } in 
                          let-no-escape {
                            $wloop_s8Lvp [InlPrag=NOUSERINLINE[0], Occ=LoopBreakerT[3]]
                              :: GHC.Prim.Int#
                                 -> GHC.Prim.Int#
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                       (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char) #)
                            [LclId[JoinId(3)], Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
                                sat-only [dt_s8LuV
                                          dt1_s8LuW
                                          dt4_s8Lv0
                                          dt5_s8Lv2
                                          dt6_s8Lv3
                                          dt7_s8Lv5
                                          exit_s8Lv9
                                          exit1_s8Lvh
                                          $wloop_s8Lvp] \r [ww_s8Lvq ww1_s8Lvr void_0E]
                                    case >=# [ww1_s8Lvr dt7_s8Lv5] of {
                                      __DEFAULT ->
                                          case >=# [ww_s8Lvq dt4_s8Lv0] of {
                                            __DEFAULT ->
                                                case plusAddr# [dt_s8LuV ww_s8Lvq] of sat_s8Lvv {
                                                  __DEFAULT ->
                                                      case
                                                          readWord8OffAddr# [sat_s8Lvv
                                                                             0#
                                                                             GHC.Prim.void#]
                                                      of
                                                      { Unit# ipv1_s8Lvy [Occ=Once] ->
                                                            case
                                                                touch# [dt1_s8LuW GHC.Prim.void#]
                                                            of
                                                            s'_s8Lvz
                                                            { (##) ->
                                                                  case
                                                                      word2Int# [ipv1_s8Lvy]
                                                                  of
                                                                  sat_s8LvA
                                                                  { __DEFAULT ->
                                                                        case
                                                                            chr# [sat_s8LvA]
                                                                        of
                                                                        sat_s8LvB
                                                                        { __DEFAULT ->
                                                                              case
                                                                                  writeWideCharOffAddr# [dt5_s8Lv2
                                                                                                         ww1_s8Lvr
                                                                                                         sat_s8LvB
                                                                                                         GHC.Prim.void#]
                                                                              of
                                                                              s2_s8LvC
                                                                              { (##) ->
                                                                                    case
                                                                                        touch# [dt6_s8Lv3
                                                                                                GHC.Prim.void#]
                                                                                    of
                                                                                    s'1_s8LvD
                                                                                    { (##) ->
                                                                                          case
                                                                                              +# [ww1_s8Lvr
                                                                                                  1#]
                                                                                          of
                                                                                          sat_s8LvF
                                                                                          { __DEFAULT ->
                                                                                                case
                                                                                                    +# [ww_s8Lvq
                                                                                                        1#]
                                                                                                of
                                                                                                sat_s8LvE
                                                                                                { __DEFAULT ->
                                                                                                      $wloop_s8Lvp
                                                                                                          sat_s8LvE
                                                                                                          sat_s8LvF
                                                                                                          GHC.Prim.void#;
                                                                                                };
                                                                                          };
                                                                                    };
                                                                              };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                            1# -> exit_s8Lv9 ww_s8Lvq ww1_s8Lvr GHC.Prim.void#;
                                          };
                                      1# -> exit1_s8Lvh ww_s8Lvq ww1_s8Lvr GHC.Prim.void#;
                                    };
                          } in  $wloop_s8Lvp dt3_s8LuZ dt9_s8Lv7 GHC.Prim.void#;
              };
        };

GHC.IO.Encoding.Latin1.latin1_decode
  :: GHC.IO.Encoding.Types.DecodeBuffer
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Encoding.Latin1.latin5 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Encoding.Latin1.ascii5
  :: GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Encoding.Types.CodingProgress,
            GHC.IO.Buffer.Buffer GHC.Word.Word8,
            GHC.IO.Buffer.Buffer GHC.Types.Char) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [input_s8LvG output_s8LvH void_0E]
        case input_s8LvG of {
          GHC.IO.Buffer.Buffer dt_s8LvK
                               dt1_s8LvL
                               ds_s8LvM
                               dt2_s8LvN
                               dt3_s8LvO [Occ=Once]
                               dt4_s8LvP ->
              case output_s8LvH of {
                GHC.IO.Buffer.Buffer dt5_s8LvR
                                     dt6_s8LvS
                                     ds1_s8LvT
                                     dt7_s8LvU
                                     dt8_s8LvV
                                     dt9_s8LvW [Occ=Once] ->
                    let {
                      lvl6_s8LvX :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                      [LclId, Unf=OtherCon []] =
                          CCCS GHC.IO.Buffer.Buffer! [dt_s8LvK
                                                      dt1_s8LvL
                                                      ds_s8LvM
                                                      dt2_s8LvN
                                                      0#
                                                      0#];
                    } in 
                      let-no-escape {
                        exit_s8LvY [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                          :: GHC.Prim.Int#
                             -> GHC.Prim.Int#
                             -> GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                   (GHC.IO.Encoding.Types.CodingProgress,
                                    GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                    GHC.IO.Buffer.Buffer GHC.Types.Char) #)
                        [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                            sat-only [dt_s8LvK
                                      dt1_s8LvL
                                      ds_s8LvM
                                      dt2_s8LvN
                                      dt4_s8LvP
                                      dt5_s8LvR
                                      dt6_s8LvS
                                      ds1_s8LvT
                                      dt7_s8LvU
                                      dt8_s8LvV
                                      lvl6_s8LvX] \r [ww_s8LvZ ww1_s8Lw0 void_0E]
                                let {
                                  sat_s8Lw4 [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                  [LclId] =
                                      CCCS GHC.IO.Buffer.Buffer! [dt5_s8LvR
                                                                  dt6_s8LvS
                                                                  ds1_s8LvT
                                                                  dt7_s8LvU
                                                                  dt8_s8LvV
                                                                  ww1_s8Lw0]; } in
                                let {
                                  sat_s8Lw3 [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                  [LclId] =
                                      [dt_s8LvK
                                       dt1_s8LvL
                                       ds_s8LvM
                                       dt2_s8LvN
                                       dt4_s8LvP
                                       lvl6_s8LvX
                                       ww_s8LvZ] \u []
                                          case ==# [ww_s8LvZ dt4_s8LvP] of {
                                            __DEFAULT ->
                                                GHC.IO.Buffer.Buffer [dt_s8LvK
                                                                      dt1_s8LvL
                                                                      ds_s8LvM
                                                                      dt2_s8LvN
                                                                      ww_s8LvZ
                                                                      dt4_s8LvP];
                                            1# -> lvl6_s8LvX;
                                          }; } in
                                let {
                                  sat_s8Lw5 [Occ=Once]
                                    :: (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char)
                                  [LclId] =
                                      CCCS (,,)! [GHC.IO.Encoding.Types.InvalidSequence
                                                  sat_s8Lw3
                                                  sat_s8Lw4];
                                } in  Unit# [sat_s8Lw5];
                      } in 
                        let-no-escape {
                          exit1_s8Lw6 [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                            :: GHC.Prim.Int#
                               -> GHC.Prim.Int#
                               -> GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     (GHC.IO.Encoding.Types.CodingProgress,
                                      GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                      GHC.IO.Buffer.Buffer GHC.Types.Char) #)
                          [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                              sat-only [dt_s8LvK
                                        dt1_s8LvL
                                        ds_s8LvM
                                        dt2_s8LvN
                                        dt4_s8LvP
                                        dt5_s8LvR
                                        dt6_s8LvS
                                        ds1_s8LvT
                                        dt7_s8LvU
                                        dt8_s8LvV
                                        lvl6_s8LvX] \r [ww_s8Lw7 ww1_s8Lw8 void_0E]
                                  let {
                                    sat_s8Lwc [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                    [LclId] =
                                        CCCS GHC.IO.Buffer.Buffer! [dt5_s8LvR
                                                                    dt6_s8LvS
                                                                    ds1_s8LvT
                                                                    dt7_s8LvU
                                                                    dt8_s8LvV
                                                                    ww1_s8Lw8]; } in
                                  let {
                                    sat_s8Lwb [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                    [LclId] =
                                        [dt_s8LvK
                                         dt1_s8LvL
                                         ds_s8LvM
                                         dt2_s8LvN
                                         dt4_s8LvP
                                         lvl6_s8LvX
                                         ww_s8Lw7] \u []
                                            case ==# [ww_s8Lw7 dt4_s8LvP] of {
                                              __DEFAULT ->
                                                  GHC.IO.Buffer.Buffer [dt_s8LvK
                                                                        dt1_s8LvL
                                                                        ds_s8LvM
                                                                        dt2_s8LvN
                                                                        ww_s8Lw7
                                                                        dt4_s8LvP];
                                              1# -> lvl6_s8LvX;
                                            }; } in
                                  let {
                                    sat_s8Lwd [Occ=Once]
                                      :: (GHC.IO.Encoding.Types.CodingProgress,
                                          GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                          GHC.IO.Buffer.Buffer GHC.Types.Char)
                                    [LclId] =
                                        CCCS (,,)! [GHC.IO.Encoding.Types.InputUnderflow
                                                    sat_s8Lwb
                                                    sat_s8Lwc];
                                  } in  Unit# [sat_s8Lwd];
                        } in 
                          let-no-escape {
                            exit2_s8Lwe [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                              :: GHC.Prim.Int#
                                 -> GHC.Prim.Int#
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                       (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char) #)
                            [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                                sat-only [dt_s8LvK
                                          dt1_s8LvL
                                          ds_s8LvM
                                          dt2_s8LvN
                                          dt4_s8LvP
                                          dt5_s8LvR
                                          dt6_s8LvS
                                          ds1_s8LvT
                                          dt7_s8LvU
                                          dt8_s8LvV
                                          lvl6_s8LvX] \r [ww_s8Lwf ww1_s8Lwg void_0E]
                                    let {
                                      sat_s8Lwk [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                      [LclId] =
                                          CCCS GHC.IO.Buffer.Buffer! [dt5_s8LvR
                                                                      dt6_s8LvS
                                                                      ds1_s8LvT
                                                                      dt7_s8LvU
                                                                      dt8_s8LvV
                                                                      ww1_s8Lwg]; } in
                                    let {
                                      sat_s8Lwj [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                      [LclId] =
                                          [dt_s8LvK
                                           dt1_s8LvL
                                           ds_s8LvM
                                           dt2_s8LvN
                                           dt4_s8LvP
                                           lvl6_s8LvX
                                           ww_s8Lwf] \u []
                                              case ==# [ww_s8Lwf dt4_s8LvP] of {
                                                __DEFAULT ->
                                                    GHC.IO.Buffer.Buffer [dt_s8LvK
                                                                          dt1_s8LvL
                                                                          ds_s8LvM
                                                                          dt2_s8LvN
                                                                          ww_s8Lwf
                                                                          dt4_s8LvP];
                                                1# -> lvl6_s8LvX;
                                              }; } in
                                    let {
                                      sat_s8Lwl [Occ=Once]
                                        :: (GHC.IO.Encoding.Types.CodingProgress,
                                            GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                            GHC.IO.Buffer.Buffer GHC.Types.Char)
                                      [LclId] =
                                          CCCS (,,)! [GHC.IO.Encoding.Types.OutputUnderflow
                                                      sat_s8Lwj
                                                      sat_s8Lwk];
                                    } in  Unit# [sat_s8Lwl];
                          } in 
                            let-no-escape {
                              $wloop_s8Lwm [InlPrag=NOUSERINLINE[0], Occ=LoopBreakerT[3]]
                                :: GHC.Prim.Int#
                                   -> GHC.Prim.Int#
                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         (GHC.IO.Encoding.Types.CodingProgress,
                                          GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                          GHC.IO.Buffer.Buffer GHC.Types.Char) #)
                              [LclId[JoinId(3)], Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
                                  sat-only [dt_s8LvK
                                            dt1_s8LvL
                                            dt4_s8LvP
                                            dt5_s8LvR
                                            dt6_s8LvS
                                            dt7_s8LvU
                                            exit_s8LvY
                                            exit1_s8Lw6
                                            exit2_s8Lwe
                                            $wloop_s8Lwm] \r [ww_s8Lwn ww1_s8Lwo void_0E]
                                      case >=# [ww1_s8Lwo dt7_s8LvU] of {
                                        __DEFAULT ->
                                            case >=# [ww_s8Lwn dt4_s8LvP] of {
                                              __DEFAULT ->
                                                  case plusAddr# [dt_s8LvK ww_s8Lwn] of sat_s8Lws {
                                                    __DEFAULT ->
                                                        case
                                                            readWord8OffAddr# [sat_s8Lws
                                                                               0#
                                                                               GHC.Prim.void#]
                                                        of
                                                        { Unit# ipv1_s8Lwv ->
                                                              case
                                                                  touch# [dt1_s8LvL GHC.Prim.void#]
                                                              of
                                                              s'_s8Lww
                                                              { (##) ->
                                                                    case
                                                                        gtWord# [ipv1_s8Lwv 127##]
                                                                    of
                                                                    { __DEFAULT ->
                                                                          case
                                                                              word2Int# [ipv1_s8Lwv]
                                                                          of
                                                                          sat_s8Lwy
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    chr# [sat_s8Lwy]
                                                                                of
                                                                                sat_s8Lwz
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          writeWideCharOffAddr# [dt5_s8LvR
                                                                                                                 ww1_s8Lwo
                                                                                                                 sat_s8Lwz
                                                                                                                 GHC.Prim.void#]
                                                                                      of
                                                                                      s2_s8LwA
                                                                                      { (##) ->
                                                                                            case
                                                                                                touch# [dt6_s8LvS
                                                                                                        GHC.Prim.void#]
                                                                                            of
                                                                                            s'1_s8LwB
                                                                                            { (##) ->
                                                                                                  case
                                                                                                      +# [ww1_s8Lwo
                                                                                                          1#]
                                                                                                  of
                                                                                                  sat_s8LwD
                                                                                                  { __DEFAULT ->
                                                                                                        case
                                                                                                            +# [ww_s8Lwn
                                                                                                                1#]
                                                                                                        of
                                                                                                        sat_s8LwC
                                                                                                        { __DEFAULT ->
                                                                                                              $wloop_s8Lwm
                                                                                                                  sat_s8LwC
                                                                                                                  sat_s8LwD
                                                                                                                  GHC.Prim.void#;
                                                                                                        };
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                                };
                                                                          };
                                                                      1# ->
                                                                          exit_s8LvY
                                                                              ww_s8Lwn
                                                                              ww1_s8Lwo
                                                                              GHC.Prim.void#;
                                                                    };
                                                              };
                                                        };
                                                  };
                                              1# -> exit1_s8Lw6 ww_s8Lwn ww1_s8Lwo GHC.Prim.void#;
                                            };
                                        1# -> exit2_s8Lwe ww_s8Lwn ww1_s8Lwo GHC.Prim.void#;
                                      };
                            } in  $wloop_s8Lwm dt3_s8LvO dt9_s8LvW GHC.Prim.void#;
              };
        };

GHC.IO.Encoding.Latin1.ascii_decode
  :: GHC.IO.Encoding.Types.DecodeBuffer
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Encoding.Latin1.ascii5 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Encoding.Latin1.latin3
  :: GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Encoding.Types.CodingProgress,
            GHC.IO.Buffer.Buffer GHC.Types.Char,
            GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [input_s8LwE output_s8LwF void_0E]
        case input_s8LwE of {
          GHC.IO.Buffer.Buffer dt_s8LwI
                               dt1_s8LwJ
                               ds_s8LwK
                               dt2_s8LwL
                               dt3_s8LwM [Occ=Once]
                               dt4_s8LwN ->
              case output_s8LwF of {
                GHC.IO.Buffer.Buffer dt5_s8LwP
                                     dt6_s8LwQ
                                     ds1_s8LwR
                                     dt7_s8LwS
                                     dt8_s8LwT
                                     dt9_s8LwU [Occ=Once] ->
                    let {
                      lvl6_s8LwV :: GHC.IO.Buffer.Buffer GHC.Types.Char
                      [LclId, Unf=OtherCon []] =
                          CCCS GHC.IO.Buffer.Buffer! [dt_s8LwI
                                                      dt1_s8LwJ
                                                      ds_s8LwK
                                                      dt2_s8LwL
                                                      0#
                                                      0#];
                    } in 
                      let-no-escape {
                        exit_s8LwW [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                          :: GHC.Prim.Int#
                             -> GHC.Prim.Int#
                             -> GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                   (GHC.IO.Encoding.Types.CodingProgress,
                                    GHC.IO.Buffer.Buffer GHC.Types.Char,
                                    GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                        [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                            sat-only [dt_s8LwI
                                      dt1_s8LwJ
                                      ds_s8LwK
                                      dt2_s8LwL
                                      dt4_s8LwN
                                      dt5_s8LwP
                                      dt6_s8LwQ
                                      ds1_s8LwR
                                      dt7_s8LwS
                                      dt8_s8LwT
                                      lvl6_s8LwV] \r [ww_s8LwX ww1_s8LwY void_0E]
                                let {
                                  sat_s8Lx2 [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                  [LclId] =
                                      CCCS GHC.IO.Buffer.Buffer! [dt5_s8LwP
                                                                  dt6_s8LwQ
                                                                  ds1_s8LwR
                                                                  dt7_s8LwS
                                                                  dt8_s8LwT
                                                                  ww1_s8LwY]; } in
                                let {
                                  sat_s8Lx1 [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                  [LclId] =
                                      [dt_s8LwI
                                       dt1_s8LwJ
                                       ds_s8LwK
                                       dt2_s8LwL
                                       dt4_s8LwN
                                       lvl6_s8LwV
                                       ww_s8LwX] \u []
                                          case ==# [ww_s8LwX dt4_s8LwN] of {
                                            __DEFAULT ->
                                                GHC.IO.Buffer.Buffer [dt_s8LwI
                                                                      dt1_s8LwJ
                                                                      ds_s8LwK
                                                                      dt2_s8LwL
                                                                      ww_s8LwX
                                                                      dt4_s8LwN];
                                            1# -> lvl6_s8LwV;
                                          }; } in
                                let {
                                  sat_s8Lx3 [Occ=Once]
                                    :: (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                  [LclId] =
                                      CCCS (,,)! [GHC.IO.Encoding.Types.InputUnderflow
                                                  sat_s8Lx1
                                                  sat_s8Lx2];
                                } in  Unit# [sat_s8Lx3];
                      } in 
                        let-no-escape {
                          exit1_s8Lx4 [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                            :: GHC.Prim.Int#
                               -> GHC.Prim.Int#
                               -> GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     (GHC.IO.Encoding.Types.CodingProgress,
                                      GHC.IO.Buffer.Buffer GHC.Types.Char,
                                      GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                          [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                              sat-only [dt_s8LwI
                                        dt1_s8LwJ
                                        ds_s8LwK
                                        dt2_s8LwL
                                        dt4_s8LwN
                                        dt5_s8LwP
                                        dt6_s8LwQ
                                        ds1_s8LwR
                                        dt7_s8LwS
                                        dt8_s8LwT
                                        lvl6_s8LwV] \r [ww_s8Lx5 ww1_s8Lx6 void_0E]
                                  let {
                                    sat_s8Lxa [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                    [LclId] =
                                        CCCS GHC.IO.Buffer.Buffer! [dt5_s8LwP
                                                                    dt6_s8LwQ
                                                                    ds1_s8LwR
                                                                    dt7_s8LwS
                                                                    dt8_s8LwT
                                                                    ww1_s8Lx6]; } in
                                  let {
                                    sat_s8Lx9 [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                    [LclId] =
                                        [dt_s8LwI
                                         dt1_s8LwJ
                                         ds_s8LwK
                                         dt2_s8LwL
                                         dt4_s8LwN
                                         lvl6_s8LwV
                                         ww_s8Lx5] \u []
                                            case ==# [ww_s8Lx5 dt4_s8LwN] of {
                                              __DEFAULT ->
                                                  GHC.IO.Buffer.Buffer [dt_s8LwI
                                                                        dt1_s8LwJ
                                                                        ds_s8LwK
                                                                        dt2_s8LwL
                                                                        ww_s8Lx5
                                                                        dt4_s8LwN];
                                              1# -> lvl6_s8LwV;
                                            }; } in
                                  let {
                                    sat_s8Lxb [Occ=Once]
                                      :: (GHC.IO.Encoding.Types.CodingProgress,
                                          GHC.IO.Buffer.Buffer GHC.Types.Char,
                                          GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                    [LclId] =
                                        CCCS (,,)! [GHC.IO.Encoding.Types.OutputUnderflow
                                                    sat_s8Lx9
                                                    sat_s8Lxa];
                                  } in  Unit# [sat_s8Lxb];
                        } in 
                          let-no-escape {
                            $wloop_s8Lxc [InlPrag=NOUSERINLINE[0], Occ=LoopBreakerT[3]]
                              :: GHC.Prim.Int#
                                 -> GHC.Prim.Int#
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                       (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                            [LclId[JoinId(3)], Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
                                sat-only [dt_s8LwI
                                          dt1_s8LwJ
                                          dt4_s8LwN
                                          dt5_s8LwP
                                          dt6_s8LwQ
                                          dt7_s8LwS
                                          exit_s8LwW
                                          exit1_s8Lx4
                                          $wloop_s8Lxc] \r [ww_s8Lxd ww1_s8Lxe void_0E]
                                    case >=# [ww1_s8Lxe dt7_s8LwS] of {
                                      __DEFAULT ->
                                          case >=# [ww_s8Lxd dt4_s8LwN] of {
                                            __DEFAULT ->
                                                case
                                                    readWideCharOffAddr# [dt_s8LwI
                                                                          ww_s8Lxd
                                                                          GHC.Prim.void#]
                                                of
                                                { Unit# ipv1_s8Lxk [Occ=Once] ->
                                                      case
                                                          touch# [dt1_s8LwJ GHC.Prim.void#]
                                                      of
                                                      s'_s8Lxl
                                                      { (##) ->
                                                            case ord# [ipv1_s8Lxk] of sat_s8Lxn {
                                                              __DEFAULT ->
                                                                  case
                                                                      int2Word# [sat_s8Lxn]
                                                                  of
                                                                  sat_s8Lxo
                                                                  { __DEFAULT ->
                                                                        case
                                                                            narrow8Word# [sat_s8Lxo]
                                                                        of
                                                                        sat_s8Lxp
                                                                        { __DEFAULT ->
                                                                              case
                                                                                  plusAddr# [dt5_s8LwP
                                                                                             ww1_s8Lxe]
                                                                              of
                                                                              sat_s8Lxm
                                                                              { __DEFAULT ->
                                                                                    case
                                                                                        writeWord8OffAddr# [sat_s8Lxm
                                                                                                            0#
                                                                                                            sat_s8Lxp
                                                                                                            GHC.Prim.void#]
                                                                                    of
                                                                                    s2_s8Lxq
                                                                                    { (##) ->
                                                                                          case
                                                                                              touch# [dt6_s8LwQ
                                                                                                      GHC.Prim.void#]
                                                                                          of
                                                                                          s'1_s8Lxr
                                                                                          { (##) ->
                                                                                                case
                                                                                                    +# [ww1_s8Lxe
                                                                                                        1#]
                                                                                                of
                                                                                                sat_s8Lxt
                                                                                                { __DEFAULT ->
                                                                                                      case
                                                                                                          +# [ww_s8Lxd
                                                                                                              1#]
                                                                                                      of
                                                                                                      sat_s8Lxs
                                                                                                      { __DEFAULT ->
                                                                                                            $wloop_s8Lxc
                                                                                                                sat_s8Lxs
                                                                                                                sat_s8Lxt
                                                                                                                GHC.Prim.void#;
                                                                                                      };
                                                                                                };
                                                                                          };
                                                                                    };
                                                                              };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                            1# -> exit_s8LwW ww_s8Lxd ww1_s8Lxe GHC.Prim.void#;
                                          };
                                      1# -> exit1_s8Lx4 ww_s8Lxd ww1_s8Lxe GHC.Prim.void#;
                                    };
                          } in  $wloop_s8Lxc dt3_s8LwM dt9_s8LwU GHC.Prim.void#;
              };
        };

GHC.IO.Encoding.Latin1.latin1_encode
  :: GHC.IO.Encoding.Types.EncodeBuffer
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Encoding.Latin1.latin3 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Encoding.Latin1.ascii3
  :: GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Encoding.Types.CodingProgress,
            GHC.IO.Buffer.Buffer GHC.Types.Char,
            GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [input_s8Lxu output_s8Lxv void_0E]
        case input_s8Lxu of {
          GHC.IO.Buffer.Buffer dt_s8Lxy
                               dt1_s8Lxz
                               ds_s8LxA
                               dt2_s8LxB
                               dt3_s8LxC [Occ=Once]
                               dt4_s8LxD ->
              case output_s8Lxv of {
                GHC.IO.Buffer.Buffer dt5_s8LxF
                                     dt6_s8LxG
                                     ds1_s8LxH
                                     dt7_s8LxI
                                     dt8_s8LxJ
                                     dt9_s8LxK [Occ=Once] ->
                    let {
                      lvl6_s8LxL :: GHC.IO.Buffer.Buffer GHC.Types.Char
                      [LclId, Unf=OtherCon []] =
                          CCCS GHC.IO.Buffer.Buffer! [dt_s8Lxy
                                                      dt1_s8Lxz
                                                      ds_s8LxA
                                                      dt2_s8LxB
                                                      0#
                                                      0#];
                    } in 
                      let-no-escape {
                        exit_s8LxM [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                          :: GHC.Prim.Int#
                             -> GHC.Prim.Int#
                             -> GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                   (GHC.IO.Encoding.Types.CodingProgress,
                                    GHC.IO.Buffer.Buffer GHC.Types.Char,
                                    GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                        [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                            sat-only [dt_s8Lxy
                                      dt1_s8Lxz
                                      ds_s8LxA
                                      dt2_s8LxB
                                      dt4_s8LxD
                                      dt5_s8LxF
                                      dt6_s8LxG
                                      ds1_s8LxH
                                      dt7_s8LxI
                                      dt8_s8LxJ
                                      lvl6_s8LxL] \r [ww_s8LxN ww1_s8LxO void_0E]
                                let {
                                  sat_s8LxS [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                  [LclId] =
                                      CCCS GHC.IO.Buffer.Buffer! [dt5_s8LxF
                                                                  dt6_s8LxG
                                                                  ds1_s8LxH
                                                                  dt7_s8LxI
                                                                  dt8_s8LxJ
                                                                  ww1_s8LxO]; } in
                                let {
                                  sat_s8LxR [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                  [LclId] =
                                      [dt_s8Lxy
                                       dt1_s8Lxz
                                       ds_s8LxA
                                       dt2_s8LxB
                                       dt4_s8LxD
                                       lvl6_s8LxL
                                       ww_s8LxN] \u []
                                          case ==# [ww_s8LxN dt4_s8LxD] of {
                                            __DEFAULT ->
                                                GHC.IO.Buffer.Buffer [dt_s8Lxy
                                                                      dt1_s8Lxz
                                                                      ds_s8LxA
                                                                      dt2_s8LxB
                                                                      ww_s8LxN
                                                                      dt4_s8LxD];
                                            1# -> lvl6_s8LxL;
                                          }; } in
                                let {
                                  sat_s8LxT [Occ=Once]
                                    :: (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                  [LclId] =
                                      CCCS (,,)! [GHC.IO.Encoding.Types.InvalidSequence
                                                  sat_s8LxR
                                                  sat_s8LxS];
                                } in  Unit# [sat_s8LxT];
                      } in 
                        let-no-escape {
                          exit1_s8LxU [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                            :: GHC.Prim.Int#
                               -> GHC.Prim.Int#
                               -> GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     (GHC.IO.Encoding.Types.CodingProgress,
                                      GHC.IO.Buffer.Buffer GHC.Types.Char,
                                      GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                          [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                              sat-only [dt_s8Lxy
                                        dt1_s8Lxz
                                        ds_s8LxA
                                        dt2_s8LxB
                                        dt4_s8LxD
                                        dt5_s8LxF
                                        dt6_s8LxG
                                        ds1_s8LxH
                                        dt7_s8LxI
                                        dt8_s8LxJ
                                        lvl6_s8LxL] \r [ww_s8LxV ww1_s8LxW void_0E]
                                  let {
                                    sat_s8Ly0 [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                    [LclId] =
                                        CCCS GHC.IO.Buffer.Buffer! [dt5_s8LxF
                                                                    dt6_s8LxG
                                                                    ds1_s8LxH
                                                                    dt7_s8LxI
                                                                    dt8_s8LxJ
                                                                    ww1_s8LxW]; } in
                                  let {
                                    sat_s8LxZ [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                    [LclId] =
                                        [dt_s8Lxy
                                         dt1_s8Lxz
                                         ds_s8LxA
                                         dt2_s8LxB
                                         dt4_s8LxD
                                         lvl6_s8LxL
                                         ww_s8LxV] \u []
                                            case ==# [ww_s8LxV dt4_s8LxD] of {
                                              __DEFAULT ->
                                                  GHC.IO.Buffer.Buffer [dt_s8Lxy
                                                                        dt1_s8Lxz
                                                                        ds_s8LxA
                                                                        dt2_s8LxB
                                                                        ww_s8LxV
                                                                        dt4_s8LxD];
                                              1# -> lvl6_s8LxL;
                                            }; } in
                                  let {
                                    sat_s8Ly1 [Occ=Once]
                                      :: (GHC.IO.Encoding.Types.CodingProgress,
                                          GHC.IO.Buffer.Buffer GHC.Types.Char,
                                          GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                    [LclId] =
                                        CCCS (,,)! [GHC.IO.Encoding.Types.InputUnderflow
                                                    sat_s8LxZ
                                                    sat_s8Ly0];
                                  } in  Unit# [sat_s8Ly1];
                        } in 
                          let-no-escape {
                            exit2_s8Ly2 [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                              :: GHC.Prim.Int#
                                 -> GHC.Prim.Int#
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                       (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                            [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                                sat-only [dt_s8Lxy
                                          dt1_s8Lxz
                                          ds_s8LxA
                                          dt2_s8LxB
                                          dt4_s8LxD
                                          dt5_s8LxF
                                          dt6_s8LxG
                                          ds1_s8LxH
                                          dt7_s8LxI
                                          dt8_s8LxJ
                                          lvl6_s8LxL] \r [ww_s8Ly3 ww1_s8Ly4 void_0E]
                                    let {
                                      sat_s8Ly8 [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                      [LclId] =
                                          CCCS GHC.IO.Buffer.Buffer! [dt5_s8LxF
                                                                      dt6_s8LxG
                                                                      ds1_s8LxH
                                                                      dt7_s8LxI
                                                                      dt8_s8LxJ
                                                                      ww1_s8Ly4]; } in
                                    let {
                                      sat_s8Ly7 [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                      [LclId] =
                                          [dt_s8Lxy
                                           dt1_s8Lxz
                                           ds_s8LxA
                                           dt2_s8LxB
                                           dt4_s8LxD
                                           lvl6_s8LxL
                                           ww_s8Ly3] \u []
                                              case ==# [ww_s8Ly3 dt4_s8LxD] of {
                                                __DEFAULT ->
                                                    GHC.IO.Buffer.Buffer [dt_s8Lxy
                                                                          dt1_s8Lxz
                                                                          ds_s8LxA
                                                                          dt2_s8LxB
                                                                          ww_s8Ly3
                                                                          dt4_s8LxD];
                                                1# -> lvl6_s8LxL;
                                              }; } in
                                    let {
                                      sat_s8Ly9 [Occ=Once]
                                        :: (GHC.IO.Encoding.Types.CodingProgress,
                                            GHC.IO.Buffer.Buffer GHC.Types.Char,
                                            GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                      [LclId] =
                                          CCCS (,,)! [GHC.IO.Encoding.Types.OutputUnderflow
                                                      sat_s8Ly7
                                                      sat_s8Ly8];
                                    } in  Unit# [sat_s8Ly9];
                          } in 
                            let-no-escape {
                              $wloop_s8Lya [InlPrag=NOUSERINLINE[0], Occ=LoopBreakerT[3]]
                                :: GHC.Prim.Int#
                                   -> GHC.Prim.Int#
                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         (GHC.IO.Encoding.Types.CodingProgress,
                                          GHC.IO.Buffer.Buffer GHC.Types.Char,
                                          GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                              [LclId[JoinId(3)], Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
                                  sat-only [dt_s8Lxy
                                            dt1_s8Lxz
                                            dt4_s8LxD
                                            dt5_s8LxF
                                            dt6_s8LxG
                                            dt7_s8LxI
                                            exit_s8LxM
                                            exit1_s8LxU
                                            exit2_s8Ly2
                                            $wloop_s8Lya] \r [ww_s8Lyb ww1_s8Lyc void_0E]
                                      case >=# [ww1_s8Lyc dt7_s8LxI] of {
                                        __DEFAULT ->
                                            case >=# [ww_s8Lyb dt4_s8LxD] of {
                                              __DEFAULT ->
                                                  case
                                                      readWideCharOffAddr# [dt_s8Lxy
                                                                            ww_s8Lyb
                                                                            GHC.Prim.void#]
                                                  of
                                                  { Unit# ipv1_s8Lyi ->
                                                        case
                                                            touch# [dt1_s8Lxz GHC.Prim.void#]
                                                        of
                                                        s'_s8Lyj
                                                        { (##) ->
                                                              case ord# [ipv1_s8Lyi] of sat_s8Lyk {
                                                                __DEFAULT ->
                                                                    case ># [sat_s8Lyk 127#] of {
                                                                      __DEFAULT ->
                                                                          case
                                                                              ord# [ipv1_s8Lyi]
                                                                          of
                                                                          sat_s8Lyn
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    int2Word# [sat_s8Lyn]
                                                                                of
                                                                                sat_s8Lyo
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          narrow8Word# [sat_s8Lyo]
                                                                                      of
                                                                                      sat_s8Lyp
                                                                                      { __DEFAULT ->
                                                                                            case
                                                                                                plusAddr# [dt5_s8LxF
                                                                                                           ww1_s8Lyc]
                                                                                            of
                                                                                            sat_s8Lym
                                                                                            { __DEFAULT ->
                                                                                                  case
                                                                                                      writeWord8OffAddr# [sat_s8Lym
                                                                                                                          0#
                                                                                                                          sat_s8Lyp
                                                                                                                          GHC.Prim.void#]
                                                                                                  of
                                                                                                  s2_s8Lyq
                                                                                                  { (##) ->
                                                                                                        case
                                                                                                            touch# [dt6_s8LxG
                                                                                                                    GHC.Prim.void#]
                                                                                                        of
                                                                                                        s'1_s8Lyr
                                                                                                        { (##) ->
                                                                                                              case
                                                                                                                  +# [ww1_s8Lyc
                                                                                                                      1#]
                                                                                                              of
                                                                                                              sat_s8Lyt
                                                                                                              { __DEFAULT ->
                                                                                                                    case
                                                                                                                        +# [ww_s8Lyb
                                                                                                                            1#]
                                                                                                                    of
                                                                                                                    sat_s8Lys
                                                                                                                    { __DEFAULT ->
                                                                                                                          $wloop_s8Lya
                                                                                                                              sat_s8Lys
                                                                                                                              sat_s8Lyt
                                                                                                                              GHC.Prim.void#;
                                                                                                                    };
                                                                                                              };
                                                                                                        };
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                                };
                                                                          };
                                                                      1# ->
                                                                          exit_s8LxM
                                                                              ww_s8Lyb
                                                                              ww1_s8Lyc
                                                                              GHC.Prim.void#;
                                                                    };
                                                              };
                                                        };
                                                  };
                                              1# -> exit1_s8LxU ww_s8Lyb ww1_s8Lyc GHC.Prim.void#;
                                            };
                                        1# -> exit2_s8Ly2 ww_s8Lyb ww1_s8Lyc GHC.Prim.void#;
                                      };
                            } in  $wloop_s8Lya dt3_s8LxC dt9_s8LxK GHC.Prim.void#;
              };
        };

GHC.IO.Encoding.Latin1.ascii_encode
  :: GHC.IO.Encoding.Types.EncodeBuffer
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Encoding.Latin1.ascii3 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Encoding.Latin1.latin1_checked2
  :: GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Encoding.Types.CodingProgress,
            GHC.IO.Buffer.Buffer GHC.Types.Char,
            GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [input_s8Lyu output_s8Lyv void_0E]
        case input_s8Lyu of {
          GHC.IO.Buffer.Buffer dt_s8Lyy
                               dt1_s8Lyz
                               ds_s8LyA
                               dt2_s8LyB
                               dt3_s8LyC [Occ=Once]
                               dt4_s8LyD ->
              case output_s8Lyv of {
                GHC.IO.Buffer.Buffer dt5_s8LyF
                                     dt6_s8LyG
                                     ds1_s8LyH
                                     dt7_s8LyI
                                     dt8_s8LyJ
                                     dt9_s8LyK [Occ=Once] ->
                    let {
                      lvl6_s8LyL :: GHC.IO.Buffer.Buffer GHC.Types.Char
                      [LclId, Unf=OtherCon []] =
                          CCCS GHC.IO.Buffer.Buffer! [dt_s8Lyy
                                                      dt1_s8Lyz
                                                      ds_s8LyA
                                                      dt2_s8LyB
                                                      0#
                                                      0#];
                    } in 
                      let-no-escape {
                        exit_s8LyM [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                          :: GHC.Prim.Int#
                             -> GHC.Prim.Int#
                             -> GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                   (GHC.IO.Encoding.Types.CodingProgress,
                                    GHC.IO.Buffer.Buffer GHC.Types.Char,
                                    GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                        [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                            sat-only [dt_s8Lyy
                                      dt1_s8Lyz
                                      ds_s8LyA
                                      dt2_s8LyB
                                      dt4_s8LyD
                                      dt5_s8LyF
                                      dt6_s8LyG
                                      ds1_s8LyH
                                      dt7_s8LyI
                                      dt8_s8LyJ
                                      lvl6_s8LyL] \r [ww_s8LyN ww1_s8LyO void_0E]
                                let {
                                  sat_s8LyS [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                  [LclId] =
                                      CCCS GHC.IO.Buffer.Buffer! [dt5_s8LyF
                                                                  dt6_s8LyG
                                                                  ds1_s8LyH
                                                                  dt7_s8LyI
                                                                  dt8_s8LyJ
                                                                  ww1_s8LyO]; } in
                                let {
                                  sat_s8LyR [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                  [LclId] =
                                      [dt_s8Lyy
                                       dt1_s8Lyz
                                       ds_s8LyA
                                       dt2_s8LyB
                                       dt4_s8LyD
                                       lvl6_s8LyL
                                       ww_s8LyN] \u []
                                          case ==# [ww_s8LyN dt4_s8LyD] of {
                                            __DEFAULT ->
                                                GHC.IO.Buffer.Buffer [dt_s8Lyy
                                                                      dt1_s8Lyz
                                                                      ds_s8LyA
                                                                      dt2_s8LyB
                                                                      ww_s8LyN
                                                                      dt4_s8LyD];
                                            1# -> lvl6_s8LyL;
                                          }; } in
                                let {
                                  sat_s8LyT [Occ=Once]
                                    :: (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                  [LclId] =
                                      CCCS (,,)! [GHC.IO.Encoding.Types.InvalidSequence
                                                  sat_s8LyR
                                                  sat_s8LyS];
                                } in  Unit# [sat_s8LyT];
                      } in 
                        let-no-escape {
                          exit1_s8LyU [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                            :: GHC.Prim.Int#
                               -> GHC.Prim.Int#
                               -> GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     (GHC.IO.Encoding.Types.CodingProgress,
                                      GHC.IO.Buffer.Buffer GHC.Types.Char,
                                      GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                          [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                              sat-only [dt_s8Lyy
                                        dt1_s8Lyz
                                        ds_s8LyA
                                        dt2_s8LyB
                                        dt4_s8LyD
                                        dt5_s8LyF
                                        dt6_s8LyG
                                        ds1_s8LyH
                                        dt7_s8LyI
                                        dt8_s8LyJ
                                        lvl6_s8LyL] \r [ww_s8LyV ww1_s8LyW void_0E]
                                  let {
                                    sat_s8Lz0 [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                    [LclId] =
                                        CCCS GHC.IO.Buffer.Buffer! [dt5_s8LyF
                                                                    dt6_s8LyG
                                                                    ds1_s8LyH
                                                                    dt7_s8LyI
                                                                    dt8_s8LyJ
                                                                    ww1_s8LyW]; } in
                                  let {
                                    sat_s8LyZ [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                    [LclId] =
                                        [dt_s8Lyy
                                         dt1_s8Lyz
                                         ds_s8LyA
                                         dt2_s8LyB
                                         dt4_s8LyD
                                         lvl6_s8LyL
                                         ww_s8LyV] \u []
                                            case ==# [ww_s8LyV dt4_s8LyD] of {
                                              __DEFAULT ->
                                                  GHC.IO.Buffer.Buffer [dt_s8Lyy
                                                                        dt1_s8Lyz
                                                                        ds_s8LyA
                                                                        dt2_s8LyB
                                                                        ww_s8LyV
                                                                        dt4_s8LyD];
                                              1# -> lvl6_s8LyL;
                                            }; } in
                                  let {
                                    sat_s8Lz1 [Occ=Once]
                                      :: (GHC.IO.Encoding.Types.CodingProgress,
                                          GHC.IO.Buffer.Buffer GHC.Types.Char,
                                          GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                    [LclId] =
                                        CCCS (,,)! [GHC.IO.Encoding.Types.InputUnderflow
                                                    sat_s8LyZ
                                                    sat_s8Lz0];
                                  } in  Unit# [sat_s8Lz1];
                        } in 
                          let-no-escape {
                            exit2_s8Lz2 [Occ=OnceL!T[3], Dmd=<L,C(C1(C1(U(U,U))))>]
                              :: GHC.Prim.Int#
                                 -> GHC.Prim.Int#
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                       (GHC.IO.Encoding.Types.CodingProgress,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char,
                                        GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                            [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
                                sat-only [dt_s8Lyy
                                          dt1_s8Lyz
                                          ds_s8LyA
                                          dt2_s8LyB
                                          dt4_s8LyD
                                          dt5_s8LyF
                                          dt6_s8LyG
                                          ds1_s8LyH
                                          dt7_s8LyI
                                          dt8_s8LyJ
                                          lvl6_s8LyL] \r [ww_s8Lz3 ww1_s8Lz4 void_0E]
                                    let {
                                      sat_s8Lz8 [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                      [LclId] =
                                          CCCS GHC.IO.Buffer.Buffer! [dt5_s8LyF
                                                                      dt6_s8LyG
                                                                      ds1_s8LyH
                                                                      dt7_s8LyI
                                                                      dt8_s8LyJ
                                                                      ww1_s8Lz4]; } in
                                    let {
                                      sat_s8Lz7 [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                      [LclId] =
                                          [dt_s8Lyy
                                           dt1_s8Lyz
                                           ds_s8LyA
                                           dt2_s8LyB
                                           dt4_s8LyD
                                           lvl6_s8LyL
                                           ww_s8Lz3] \u []
                                              case ==# [ww_s8Lz3 dt4_s8LyD] of {
                                                __DEFAULT ->
                                                    GHC.IO.Buffer.Buffer [dt_s8Lyy
                                                                          dt1_s8Lyz
                                                                          ds_s8LyA
                                                                          dt2_s8LyB
                                                                          ww_s8Lz3
                                                                          dt4_s8LyD];
                                                1# -> lvl6_s8LyL;
                                              }; } in
                                    let {
                                      sat_s8Lz9 [Occ=Once]
                                        :: (GHC.IO.Encoding.Types.CodingProgress,
                                            GHC.IO.Buffer.Buffer GHC.Types.Char,
                                            GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                      [LclId] =
                                          CCCS (,,)! [GHC.IO.Encoding.Types.OutputUnderflow
                                                      sat_s8Lz7
                                                      sat_s8Lz8];
                                    } in  Unit# [sat_s8Lz9];
                          } in 
                            let-no-escape {
                              $wloop_s8Lza [InlPrag=NOUSERINLINE[0], Occ=LoopBreakerT[3]]
                                :: GHC.Prim.Int#
                                   -> GHC.Prim.Int#
                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         (GHC.IO.Encoding.Types.CodingProgress,
                                          GHC.IO.Buffer.Buffer GHC.Types.Char,
                                          GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
                              [LclId[JoinId(3)], Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
                                  sat-only [dt_s8Lyy
                                            dt1_s8Lyz
                                            dt4_s8LyD
                                            dt5_s8LyF
                                            dt6_s8LyG
                                            dt7_s8LyI
                                            exit_s8LyM
                                            exit1_s8LyU
                                            exit2_s8Lz2
                                            $wloop_s8Lza] \r [ww_s8Lzb ww1_s8Lzc void_0E]
                                      case >=# [ww1_s8Lzc dt7_s8LyI] of {
                                        __DEFAULT ->
                                            case >=# [ww_s8Lzb dt4_s8LyD] of {
                                              __DEFAULT ->
                                                  case
                                                      readWideCharOffAddr# [dt_s8Lyy
                                                                            ww_s8Lzb
                                                                            GHC.Prim.void#]
                                                  of
                                                  { Unit# ipv1_s8Lzi ->
                                                        case
                                                            touch# [dt1_s8Lyz GHC.Prim.void#]
                                                        of
                                                        s'_s8Lzj
                                                        { (##) ->
                                                              case ord# [ipv1_s8Lzi] of sat_s8Lzk {
                                                                __DEFAULT ->
                                                                    case ># [sat_s8Lzk 255#] of {
                                                                      __DEFAULT ->
                                                                          case
                                                                              ord# [ipv1_s8Lzi]
                                                                          of
                                                                          sat_s8Lzn
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    int2Word# [sat_s8Lzn]
                                                                                of
                                                                                sat_s8Lzo
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          narrow8Word# [sat_s8Lzo]
                                                                                      of
                                                                                      sat_s8Lzp
                                                                                      { __DEFAULT ->
                                                                                            case
                                                                                                plusAddr# [dt5_s8LyF
                                                                                                           ww1_s8Lzc]
                                                                                            of
                                                                                            sat_s8Lzm
                                                                                            { __DEFAULT ->
                                                                                                  case
                                                                                                      writeWord8OffAddr# [sat_s8Lzm
                                                                                                                          0#
                                                                                                                          sat_s8Lzp
                                                                                                                          GHC.Prim.void#]
                                                                                                  of
                                                                                                  s2_s8Lzq
                                                                                                  { (##) ->
                                                                                                        case
                                                                                                            touch# [dt6_s8LyG
                                                                                                                    GHC.Prim.void#]
                                                                                                        of
                                                                                                        s'1_s8Lzr
                                                                                                        { (##) ->
                                                                                                              case
                                                                                                                  +# [ww1_s8Lzc
                                                                                                                      1#]
                                                                                                              of
                                                                                                              sat_s8Lzt
                                                                                                              { __DEFAULT ->
                                                                                                                    case
                                                                                                                        +# [ww_s8Lzb
                                                                                                                            1#]
                                                                                                                    of
                                                                                                                    sat_s8Lzs
                                                                                                                    { __DEFAULT ->
                                                                                                                          $wloop_s8Lza
                                                                                                                              sat_s8Lzs
                                                                                                                              sat_s8Lzt
                                                                                                                              GHC.Prim.void#;
                                                                                                                    };
                                                                                                              };
                                                                                                        };
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                                };
                                                                          };
                                                                      1# ->
                                                                          exit_s8LyM
                                                                              ww_s8Lzb
                                                                              ww1_s8Lzc
                                                                              GHC.Prim.void#;
                                                                    };
                                                              };
                                                        };
                                                  };
                                              1# -> exit1_s8LyU ww_s8Lzb ww1_s8Lzc GHC.Prim.void#;
                                            };
                                        1# -> exit2_s8Lz2 ww_s8Lzb ww1_s8Lzc GHC.Prim.void#;
                                      };
                            } in  $wloop_s8Lza dt3_s8LyC dt9_s8LyK GHC.Prim.void#;
              };
        };

GHC.IO.Encoding.Latin1.latin1_checked_encode
  :: GHC.IO.Encoding.Types.EncodeBuffer
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Encoding.Latin1.latin1_checked2
            eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Encoding.Latin1.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.Encoding.Latin1.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Latin1.$trModule4];

GHC.IO.Encoding.Latin1.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Encoding.Latin1"#;

GHC.IO.Encoding.Latin1.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Latin1.$trModule2];

GHC.IO.Encoding.Latin1.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Encoding.Latin1.$trModule3
                                     GHC.IO.Encoding.Latin1.$trModule1];

GHC.IO.Encoding.Latin1.ascii7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ASCII"#;

GHC.IO.Encoding.Latin1.ascii6 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Encoding.Latin1.ascii7;

GHC.IO.Encoding.Latin1.mkAscii2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] Unit# [GHC.Tuple.()];

GHC.IO.Encoding.Latin1.mkAscii1
  :: ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><S,U>, Unf=OtherCon []] =
    [] \r [ds_s8Lzv void_0E] Unit# [GHC.Tuple.()];

GHC.IO.Encoding.Latin1.mkAscii
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.IO.Encoding.Types.TextEncoding
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [cfm_s8Lzx]
        let {
          sat_s8LzF [Occ=Once]
            :: GHC.Types.IO (GHC.IO.Encoding.Types.TextEncoder ())
          [LclId] =
              [cfm_s8Lzx] \r [void_0E]
                  let {
                    sat_s8LzD [Occ=Once]
                      :: GHC.IO.Buffer.Buffer GHC.Types.Char
                         -> GHC.IO.Buffer.Buffer GHC.Word.Word8
                         -> GHC.Types.IO
                              (GHC.IO.Buffer.Buffer GHC.Types.Char,
                               GHC.IO.Buffer.Buffer GHC.Word.Word8)
                    [LclId] =
                        [cfm_s8Lzx] \r [eta_B3 eta_B2 void_0E]
                            GHC.IO.Encoding.Failure.recoverEncode1
                                cfm_s8Lzx eta_B3 eta_B2 GHC.Prim.void#; } in
                  let {
                    sat_s8LzE [Occ=Once]
                      :: GHC.IO.Encoding.Types.BufferCodec
                           GHC.Types.Char GHC.Word.Word8 ()
                    [LclId] =
                        CCCS GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.ascii3
                                                                 sat_s8LzD
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii1];
                  } in  Unit# [sat_s8LzE]; } in
        let {
          sat_s8LzB [Occ=Once]
            :: GHC.Types.IO (GHC.IO.Encoding.Types.TextDecoder ())
          [LclId] =
              [cfm_s8Lzx] \r [void_0E]
                  let {
                    sat_s8Lzz [Occ=Once]
                      :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                         -> GHC.IO.Buffer.Buffer GHC.Types.Char
                         -> GHC.Types.IO
                              (GHC.IO.Buffer.Buffer GHC.Word.Word8,
                               GHC.IO.Buffer.Buffer GHC.Types.Char)
                    [LclId] =
                        [cfm_s8Lzx] \r [eta_B3 eta_B2 void_0E]
                            GHC.IO.Encoding.Failure.recoverDecode1
                                cfm_s8Lzx eta_B3 eta_B2 GHC.Prim.void#; } in
                  let {
                    sat_s8LzA [Occ=Once]
                      :: GHC.IO.Encoding.Types.BufferCodec
                           GHC.Word.Word8 GHC.Types.Char ()
                    [LclId] =
                        CCCS GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.ascii5
                                                                 sat_s8Lzz
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii1];
                  } in  Unit# [sat_s8LzA];
        } in 
          GHC.IO.Encoding.Types.TextEncoding [GHC.IO.Encoding.Latin1.ascii6
                                              sat_s8LzB
                                              sat_s8LzF];

lvl_r8Kux
  :: GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Buffer.Buffer GHC.Word.Word8,
            GHC.IO.Buffer.Buffer GHC.Types.Char) #)
[GblId, Arity=3, Str=<B,1*H><B,1*H><B,U>x, Unf=OtherCon []] =
    [] \r [input_s8LzG output_s8LzH void_0E]
        case input_s8LzG of {
          GHC.IO.Buffer.Buffer _ [Occ=Dead]
                               _ [Occ=Dead]
                               _ [Occ=Dead]
                               _ [Occ=Dead]
                               _ [Occ=Dead]
                               _ [Occ=Dead] ->
              case output_s8LzH of {
                GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                     _ [Occ=Dead]
                                     _ [Occ=Dead]
                                     _ [Occ=Dead]
                                     _ [Occ=Dead]
                                     _ [Occ=Dead] ->
                    raiseIO# [GHC.IO.Encoding.Failure.recoverDecode2 GHC.Prim.void#];
              };
        };

lvl1_r8Kuy
  :: GHC.IO.Encoding.Types.BufferCodec
       GHC.Word.Word8 GHC.Types.Char ()
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.ascii5
                                                      lvl_r8Kux
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii1];

GHC.IO.Encoding.Latin1.ascii4
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.BufferCodec
             GHC.Word.Word8 GHC.Types.Char () #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] Unit# [lvl1_r8Kuy];

GHC.IO.Encoding.Latin1.ascii2
  :: GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Buffer.Buffer GHC.Types.Char,
            GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=3,
 Str=<B,1*U(U,U,A,A,U,A)><B,1*H><B,U>x,
 Unf=OtherCon []] =
    [] \r [input_s8LzY output_s8LzZ void_0E]
        case input_s8LzY of {
          GHC.IO.Buffer.Buffer dt_s8LA2 [Occ=Once]
                               dt1_s8LA3 [Occ=Once]
                               _ [Occ=Dead]
                               _ [Occ=Dead]
                               dt3_s8LA6 [Occ=Once]
                               _ [Occ=Dead] ->
              case output_s8LzZ of {
                GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                     _ [Occ=Dead]
                                     _ [Occ=Dead]
                                     _ [Occ=Dead]
                                     _ [Occ=Dead]
                                     _ [Occ=Dead] ->
                    case readWideCharOffAddr# [dt_s8LA2 dt3_s8LA6 GHC.Prim.void#] of {
                      Unit# _ [Occ=Dead] ->
                          case touch# [dt1_s8LA3 GHC.Prim.void#] of s'_s8LAi {
                            (##) ->
                                raiseIO# [GHC.IO.Encoding.Failure.recoverEncode2 GHC.Prim.void#];
                          };
                    };
              };
        };

lvl2_r8Kuz
  :: GHC.IO.Encoding.Types.BufferCodec
       GHC.Types.Char GHC.Word.Word8 ()
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.ascii3
                                                      GHC.IO.Encoding.Latin1.ascii2
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii1];

GHC.IO.Encoding.Latin1.ascii1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.BufferCodec
             GHC.Types.Char GHC.Word.Word8 () #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] Unit# [lvl2_r8Kuz];

GHC.IO.Encoding.Latin1.ascii :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.TextEncoding! [GHC.IO.Encoding.Latin1.ascii6
                                                       GHC.IO.Encoding.Latin1.ascii4
                                                       GHC.IO.Encoding.Latin1.ascii1];

GHC.IO.Encoding.Latin1.latin7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ISO-8859-1"#;

GHC.IO.Encoding.Latin1.latin6 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Encoding.Latin1.latin7;

GHC.IO.Encoding.Latin1.mkLatin1_checked
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.IO.Encoding.Types.TextEncoding
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [cfm_s8LAk]
        let {
          sat_s8LAs [Occ=Once]
            :: GHC.Types.IO (GHC.IO.Encoding.Types.TextEncoder ())
          [LclId] =
              [cfm_s8LAk] \r [void_0E]
                  let {
                    sat_s8LAq [Occ=Once]
                      :: GHC.IO.Buffer.Buffer GHC.Types.Char
                         -> GHC.IO.Buffer.Buffer GHC.Word.Word8
                         -> GHC.Types.IO
                              (GHC.IO.Buffer.Buffer GHC.Types.Char,
                               GHC.IO.Buffer.Buffer GHC.Word.Word8)
                    [LclId] =
                        [cfm_s8LAk] \r [eta_B3 eta_B2 void_0E]
                            GHC.IO.Encoding.Failure.recoverEncode1
                                cfm_s8LAk eta_B3 eta_B2 GHC.Prim.void#; } in
                  let {
                    sat_s8LAr [Occ=Once]
                      :: GHC.IO.Encoding.Types.BufferCodec
                           GHC.Types.Char GHC.Word.Word8 ()
                    [LclId] =
                        CCCS GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.latin1_checked2
                                                                 sat_s8LAq
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii1];
                  } in  Unit# [sat_s8LAr]; } in
        let {
          sat_s8LAo [Occ=Once]
            :: GHC.Types.IO (GHC.IO.Encoding.Types.TextDecoder ())
          [LclId] =
              [cfm_s8LAk] \r [void_0E]
                  let {
                    sat_s8LAm [Occ=Once]
                      :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                         -> GHC.IO.Buffer.Buffer GHC.Types.Char
                         -> GHC.Types.IO
                              (GHC.IO.Buffer.Buffer GHC.Word.Word8,
                               GHC.IO.Buffer.Buffer GHC.Types.Char)
                    [LclId] =
                        [cfm_s8LAk] \r [eta_B3 eta_B2 void_0E]
                            GHC.IO.Encoding.Failure.recoverDecode1
                                cfm_s8LAk eta_B3 eta_B2 GHC.Prim.void#; } in
                  let {
                    sat_s8LAn [Occ=Once]
                      :: GHC.IO.Encoding.Types.BufferCodec
                           GHC.Word.Word8 GHC.Types.Char ()
                    [LclId] =
                        CCCS GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.latin5
                                                                 sat_s8LAm
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii1];
                  } in  Unit# [sat_s8LAn];
        } in 
          GHC.IO.Encoding.Types.TextEncoding [GHC.IO.Encoding.Latin1.latin6
                                              sat_s8LAo
                                              sat_s8LAs];

lvl3_r8KuA
  :: GHC.IO.Encoding.Types.BufferCodec
       GHC.Word.Word8 GHC.Types.Char ()
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.latin5
                                                      lvl_r8Kux
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii1];

GHC.IO.Encoding.Latin1.latin4
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.BufferCodec
             GHC.Word.Word8 GHC.Types.Char () #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] Unit# [lvl3_r8KuA];

lvl4_r8KuB
  :: GHC.IO.Encoding.Types.BufferCodec
       GHC.Types.Char GHC.Word.Word8 ()
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.latin1_checked2
                                                      GHC.IO.Encoding.Latin1.ascii2
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii1];

GHC.IO.Encoding.Latin1.latin1_checked1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.BufferCodec
             GHC.Types.Char GHC.Word.Word8 () #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] Unit# [lvl4_r8KuB];

GHC.IO.Encoding.Latin1.latin1_checked
  :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.TextEncoding! [GHC.IO.Encoding.Latin1.latin6
                                                       GHC.IO.Encoding.Latin1.latin4
                                                       GHC.IO.Encoding.Latin1.latin1_checked1];

GHC.IO.Encoding.Latin1.mkLatin1
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.IO.Encoding.Types.TextEncoding
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [cfm_s8LAv]
        let {
          sat_s8LAD [Occ=Once]
            :: GHC.Types.IO (GHC.IO.Encoding.Types.TextEncoder ())
          [LclId] =
              [cfm_s8LAv] \r [void_0E]
                  let {
                    sat_s8LAB [Occ=Once]
                      :: GHC.IO.Buffer.Buffer GHC.Types.Char
                         -> GHC.IO.Buffer.Buffer GHC.Word.Word8
                         -> GHC.Types.IO
                              (GHC.IO.Buffer.Buffer GHC.Types.Char,
                               GHC.IO.Buffer.Buffer GHC.Word.Word8)
                    [LclId] =
                        [cfm_s8LAv] \r [eta_B3 eta_B2 void_0E]
                            GHC.IO.Encoding.Failure.recoverEncode1
                                cfm_s8LAv eta_B3 eta_B2 GHC.Prim.void#; } in
                  let {
                    sat_s8LAC [Occ=Once]
                      :: GHC.IO.Encoding.Types.BufferCodec
                           GHC.Types.Char GHC.Word.Word8 ()
                    [LclId] =
                        CCCS GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.latin3
                                                                 sat_s8LAB
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii1];
                  } in  Unit# [sat_s8LAC]; } in
        let {
          sat_s8LAz [Occ=Once]
            :: GHC.Types.IO (GHC.IO.Encoding.Types.TextDecoder ())
          [LclId] =
              [cfm_s8LAv] \r [void_0E]
                  let {
                    sat_s8LAx [Occ=Once]
                      :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                         -> GHC.IO.Buffer.Buffer GHC.Types.Char
                         -> GHC.Types.IO
                              (GHC.IO.Buffer.Buffer GHC.Word.Word8,
                               GHC.IO.Buffer.Buffer GHC.Types.Char)
                    [LclId] =
                        [cfm_s8LAv] \r [eta_B3 eta_B2 void_0E]
                            GHC.IO.Encoding.Failure.recoverDecode1
                                cfm_s8LAv eta_B3 eta_B2 GHC.Prim.void#; } in
                  let {
                    sat_s8LAy [Occ=Once]
                      :: GHC.IO.Encoding.Types.BufferCodec
                           GHC.Word.Word8 GHC.Types.Char ()
                    [LclId] =
                        CCCS GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.latin5
                                                                 sat_s8LAx
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii2
                                                                 GHC.IO.Encoding.Latin1.mkAscii1];
                  } in  Unit# [sat_s8LAy];
        } in 
          GHC.IO.Encoding.Types.TextEncoding [GHC.IO.Encoding.Latin1.latin6
                                              sat_s8LAz
                                              sat_s8LAD];

lvl5_r8KuC
  :: GHC.IO.Encoding.Types.BufferCodec
       GHC.Types.Char GHC.Word.Word8 ()
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.BufferCodec! [GHC.IO.Encoding.Latin1.latin3
                                                      GHC.IO.Encoding.Latin1.ascii2
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii2
                                                      GHC.IO.Encoding.Latin1.mkAscii1];

GHC.IO.Encoding.Latin1.latin2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.BufferCodec
             GHC.Types.Char GHC.Word.Word8 () #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] Unit# [lvl5_r8KuC];

GHC.IO.Encoding.Latin1.latin1 :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.TextEncoding! [GHC.IO.Encoding.Latin1.latin6
                                                       GHC.IO.Encoding.Latin1.latin4
                                                       GHC.IO.Encoding.Latin1.latin2];

