
==================== Tidy Core ====================
2018-03-16 16:02:57.661461357 UTC

Result size of Tidy Core
  = {terms: 534, types: 498, coercions: 0, joins: 0/0}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$fShowCodingProgress6 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Encoding.Types.$fShowCodingProgress6 = "InputUnderflow"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$fShowCodingProgress5 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.Types.$fShowCodingProgress5
  = unpackCString# GHC.IO.Encoding.Types.$fShowCodingProgress6

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$fShowCodingProgress4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Encoding.Types.$fShowCodingProgress4 = "OutputUnderflow"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$fShowCodingProgress3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.Types.$fShowCodingProgress3
  = unpackCString# GHC.IO.Encoding.Types.$fShowCodingProgress4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$fShowCodingProgress2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Encoding.Types.$fShowCodingProgress2 = "InvalidSequence"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$fShowCodingProgress1 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.Types.$fShowCodingProgress1
  = unpackCString# GHC.IO.Encoding.Types.$fShowCodingProgress2

-- RHS size: {terms: 16, types: 6, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: CodingProgress -> String -> String
[GblId,
 Arity=2,
 Str=<S,1*U><L,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [100 0] 120 0}]
GHC.IO.Encoding.Types.$w$cshowsPrec
  = \ (w_s7QM5 :: CodingProgress) (w1_s7QM6 :: String) ->
      case w_s7QM5 of {
        InputUnderflow ->
          ++ @ Char GHC.IO.Encoding.Types.$fShowCodingProgress5 w1_s7QM6;
        OutputUnderflow ->
          ++ @ Char GHC.IO.Encoding.Types.$fShowCodingProgress3 w1_s7QM6;
        InvalidSequence ->
          ++ @ Char GHC.IO.Encoding.Types.$fShowCodingProgress1 w1_s7QM6
      }

-- RHS size: {terms: 6, types: 3, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int -> CodingProgress -> ShowS
[GblId,
 Arity=3,
 Str=<L,A><S,1*U><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (w1_s7QM5 [Occ=Once] :: CodingProgress)
                 (w2_s7QM6 [Occ=Once] :: String) ->
                 GHC.IO.Encoding.Types.$w$cshowsPrec w1_s7QM5 w2_s7QM6}]
GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec
  = \ _ [Occ=Dead]
      (w1_s7QM5 :: CodingProgress)
      (w2_s7QM6 :: String) ->
      GHC.IO.Encoding.Types.$w$cshowsPrec w1_s7QM5 w2_s7QM6

-- RHS size: {terms: 9, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow
  :: CodingProgress -> String
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_i7Jay [Occ=Once!] :: CodingProgress) ->
                 case x_i7Jay of {
                   InputUnderflow -> GHC.IO.Encoding.Types.$fShowCodingProgress5;
                   OutputUnderflow -> GHC.IO.Encoding.Types.$fShowCodingProgress3;
                   InvalidSequence -> GHC.IO.Encoding.Types.$fShowCodingProgress1
                 }}]
GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow
  = \ (x_i7Jay :: CodingProgress) ->
      case x_i7Jay of {
        InputUnderflow -> GHC.IO.Encoding.Types.$fShowCodingProgress5;
        OutputUnderflow -> GHC.IO.Encoding.Types.$fShowCodingProgress3;
        InvalidSequence -> GHC.IO.Encoding.Types.$fShowCodingProgress1
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList
  :: [CodingProgress] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7JaB [Occ=Once] :: [CodingProgress])
                 (s_i7JaC [Occ=Once] :: String) ->
                 showList__
                   @ CodingProgress
                   GHC.IO.Encoding.Types.$w$cshowsPrec
                   ls_i7JaB
                   s_i7JaC}]
GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList
  = \ (ls_i7JaB :: [CodingProgress]) (s_i7JaC :: String) ->
      showList__
        @ CodingProgress
        GHC.IO.Encoding.Types.$w$cshowsPrec
        ls_i7JaB
        s_i7JaC

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$fShowCodingProgress [InlPrag=NOUSERINLINE CONLIKE]
  :: Show CodingProgress
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: CodingProgress
                       GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec
                       GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow
                       GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList]
GHC.IO.Encoding.Types.$fShowCodingProgress
  = GHC.Show.C:Show
      @ CodingProgress
      GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec
      GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow
      GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList

-- RHS size: {terms: 25, types: 6, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$fEqCodingProgress_$c==
  :: CodingProgress -> CodingProgress -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d7QGQ [Occ=Once!] :: CodingProgress)
                 (ds1_d7QGR [Occ=Once*!] :: CodingProgress) ->
                 case ds_d7QGQ of {
                   InputUnderflow ->
                     case ds1_d7QGR of {
                       __DEFAULT -> GHC.Types.False;
                       InputUnderflow -> GHC.Types.True
                     };
                   OutputUnderflow ->
                     case ds1_d7QGR of {
                       __DEFAULT -> GHC.Types.False;
                       OutputUnderflow -> GHC.Types.True
                     };
                   InvalidSequence ->
                     case ds1_d7QGR of {
                       __DEFAULT -> GHC.Types.False;
                       InvalidSequence -> GHC.Types.True
                     }
                 }}]
GHC.IO.Encoding.Types.$fEqCodingProgress_$c==
  = \ (ds_d7QGQ :: CodingProgress) (ds1_d7QGR :: CodingProgress) ->
      case ds_d7QGQ of {
        InputUnderflow ->
          case ds1_d7QGR of {
            __DEFAULT -> GHC.Types.False;
            InputUnderflow -> GHC.Types.True
          };
        OutputUnderflow ->
          case ds1_d7QGR of {
            __DEFAULT -> GHC.Types.False;
            OutputUnderflow -> GHC.Types.True
          };
        InvalidSequence ->
          case ds1_d7QGR of {
            __DEFAULT -> GHC.Types.False;
            InvalidSequence -> GHC.Types.True
          }
      }

-- RHS size: {terms: 25, types: 6, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$fEqCodingProgress_$c/= [InlPrag=INLINE (sat-args=2)]
  :: CodingProgress -> CodingProgress -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=False)
         Tmpl= \ (x_a22b [Occ=Once!] :: CodingProgress)
                 (y_a22c [Occ=Once*!] :: CodingProgress) ->
                 case x_a22b of {
                   InputUnderflow ->
                     case y_a22c of {
                       __DEFAULT -> GHC.Types.True;
                       InputUnderflow -> GHC.Types.False
                     };
                   OutputUnderflow ->
                     case y_a22c of {
                       __DEFAULT -> GHC.Types.True;
                       OutputUnderflow -> GHC.Types.False
                     };
                   InvalidSequence ->
                     case y_a22c of {
                       __DEFAULT -> GHC.Types.True;
                       InvalidSequence -> GHC.Types.False
                     }
                 }}]
GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=
  = \ (eta_B2 :: CodingProgress) (eta1_B1 :: CodingProgress) ->
      case eta_B2 of {
        InputUnderflow ->
          case eta1_B1 of {
            __DEFAULT -> GHC.Types.True;
            InputUnderflow -> GHC.Types.False
          };
        OutputUnderflow ->
          case eta1_B1 of {
            __DEFAULT -> GHC.Types.True;
            OutputUnderflow -> GHC.Types.False
          };
        InvalidSequence ->
          case eta1_B1 of {
            __DEFAULT -> GHC.Types.True;
            InvalidSequence -> GHC.Types.False
          }
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$fEqCodingProgress [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq CodingProgress
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: CodingProgress
                        GHC.IO.Encoding.Types.$fEqCodingProgress_$c==
                        GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=]
GHC.IO.Encoding.Types.$fEqCodingProgress
  = GHC.Classes.C:Eq
      @ CodingProgress
      GHC.IO.Encoding.Types.$fEqCodingProgress_$c==
      GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=

-- RHS size: {terms: 8, types: 34, coercions: 0, joins: 0/0}
setState
  :: forall from to state.
     BufferCodec from to state -> state -> IO ()
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLS),1*U(A,A,A,A,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ from_a7QDJ)
                 (@ to_a7QDK)
                 (@ state_a7QDL)
                 (ds_d7QGK [Occ=Once!]
                    :: BufferCodec from_a7QDJ to_a7QDK state_a7QDL) ->
                 case ds_d7QGK of
                 { BufferCodec _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                               ds5_d7QGP [Occ=Once] ->
                 ds5_d7QGP
                 }}]
setState
  = \ (@ from_a7QDJ)
      (@ to_a7QDK)
      (@ state_a7QDL)
      (ds_d7QGK :: BufferCodec from_a7QDJ to_a7QDK state_a7QDL) ->
      case ds_d7QGK of
      { BufferCodec ds1_d7QGL ds2_d7QGM ds3_d7QGN ds4_d7QGO ds5_d7QGP ->
      ds5_d7QGP
      }

-- RHS size: {terms: 8, types: 34, coercions: 0, joins: 0/0}
getState
  :: forall from to state. BufferCodec from to state -> IO state
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSL),1*U(A,A,A,1*U,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ from_a7QDF)
                 (@ to_a7QDG)
                 (@ state_a7QDH)
                 (ds_d7QGE [Occ=Once!]
                    :: BufferCodec from_a7QDF to_a7QDG state_a7QDH) ->
                 case ds_d7QGE of
                 { BufferCodec _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                               ds4_d7QGI [Occ=Once] _ [Occ=Dead] ->
                 ds4_d7QGI
                 }}]
getState
  = \ (@ from_a7QDF)
      (@ to_a7QDG)
      (@ state_a7QDH)
      (ds_d7QGE :: BufferCodec from_a7QDF to_a7QDG state_a7QDH) ->
      case ds_d7QGE of
      { BufferCodec ds1_d7QGF ds2_d7QGG ds3_d7QGH ds4_d7QGI ds5_d7QGJ ->
      ds4_d7QGI
      }

-- RHS size: {terms: 8, types: 34, coercions: 0, joins: 0/0}
close :: forall from to state. BufferCodec from to state -> IO ()
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSLL),1*U(A,A,1*U,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ from_a7QDB)
                 (@ to_a7QDC)
                 (@ state_a7QDD)
                 (ds_d7QGy [Occ=Once!]
                    :: BufferCodec from_a7QDB to_a7QDC state_a7QDD) ->
                 case ds_d7QGy of
                 { BufferCodec _ [Occ=Dead] _ [Occ=Dead] ds3_d7QGB [Occ=Once]
                               _ [Occ=Dead] _ [Occ=Dead] ->
                 ds3_d7QGB
                 }}]
close
  = \ (@ from_a7QDB)
      (@ to_a7QDC)
      (@ state_a7QDD)
      (ds_d7QGy :: BufferCodec from_a7QDB to_a7QDC state_a7QDD) ->
      case ds_d7QGy of
      { BufferCodec ds1_d7QGz ds2_d7QGA ds3_d7QGB ds4_d7QGC ds5_d7QGD ->
      ds3_d7QGB
      }

-- RHS size: {terms: 8, types: 34, coercions: 0, joins: 0/0}
recover
  :: forall from to state.
     BufferCodec from to state
     -> Buffer from -> Buffer to -> IO (Buffer from, Buffer to)
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLLL),1*U(A,1*U,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ from_a7QDx)
                 (@ to_a7QDy)
                 (@ state_a7QDz)
                 (ds_d7QGs [Occ=Once!]
                    :: BufferCodec from_a7QDx to_a7QDy state_a7QDz) ->
                 case ds_d7QGs of
                 { BufferCodec _ [Occ=Dead] ds2_d7QGu [Occ=Once] _ [Occ=Dead]
                               _ [Occ=Dead] _ [Occ=Dead] ->
                 ds2_d7QGu
                 }}]
recover
  = \ (@ from_a7QDx)
      (@ to_a7QDy)
      (@ state_a7QDz)
      (ds_d7QGs :: BufferCodec from_a7QDx to_a7QDy state_a7QDz) ->
      case ds_d7QGs of
      { BufferCodec ds1_d7QGt ds2_d7QGu ds3_d7QGv ds4_d7QGw ds5_d7QGx ->
      ds2_d7QGu
      }

-- RHS size: {terms: 8, types: 34, coercions: 0, joins: 0/0}
encode
  :: forall from to state.
     BufferCodec from to state -> CodeBuffer from to
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLLL),1*U(1*U,A,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ from_a7QDt)
                 (@ to_a7QDu)
                 (@ state_a7QDv)
                 (ds_d7QGm [Occ=Once!]
                    :: BufferCodec from_a7QDt to_a7QDu state_a7QDv) ->
                 case ds_d7QGm of
                 { BufferCodec ds1_d7QGn [Occ=Once] _ [Occ=Dead] _ [Occ=Dead]
                               _ [Occ=Dead] _ [Occ=Dead] ->
                 ds1_d7QGn
                 }}]
encode
  = \ (@ from_a7QDt)
      (@ to_a7QDu)
      (@ state_a7QDv)
      (ds_d7QGm :: BufferCodec from_a7QDt to_a7QDu state_a7QDv) ->
      case ds_d7QGm of
      { BufferCodec ds1_d7QGn ds2_d7QGo ds3_d7QGp ds4_d7QGq ds5_d7QGr ->
      ds1_d7QGn
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
mkTextEncoder :: ()
[GblId[[RecSel(naughty)]],
 Caf=NoCafRefs,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Tuple.()}]
mkTextEncoder = GHC.Tuple.()

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
mkTextDecoder :: ()
[GblId[[RecSel(naughty)]],
 Caf=NoCafRefs,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Tuple.()}]
mkTextDecoder = GHC.Tuple.()

-- RHS size: {terms: 5, types: 13, coercions: 0, joins: 0/0}
textEncodingName :: TextEncoding -> String
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d7QGi [Occ=Once!] :: TextEncoding) ->
                 case ds_d7QGi of
                 { TextEncoding @ dstate_a7QEv @ estate_a7QEw ds1_d7QGj [Occ=Once]
                                _ [Occ=Dead] _ [Occ=Dead] ->
                 ds1_d7QGj
                 }}]
textEncodingName
  = \ (ds_d7QGi :: TextEncoding) ->
      case ds_d7QGi of
      { TextEncoding @ dstate_a7QEv @ estate_a7QEw ds1_d7QGj ds2_d7QGk
                     ds3_d7QGl ->
      ds1_d7QGj
      }

-- RHS size: {terms: 9, types: 16, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec
  :: Int -> TextEncoding -> ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ _ [Occ=Dead]
                 (x_i7QGZ [Occ=Once!] :: TextEncoding)
                 (s_i7QH0 [Occ=Once] :: String) ->
                 case x_i7QGZ of
                 { TextEncoding @ dstate_a7QEv @ estate_a7QEw ds1_d7QGj [Occ=Once]
                                _ [Occ=Dead] _ [Occ=Dead] ->
                 augment
                   @ Char
                   (\ (@ b_i7JbU)
                      (c_i7JbV [Occ=Once, OS=OneShot] :: Char -> b_i7JbU -> b_i7JbU)
                      (n_i7JbW [Occ=Once, OS=OneShot] :: b_i7JbU) ->
                      foldr @ Char @ b_i7JbU c_i7JbV n_i7JbW ds1_d7QGj)
                   s_i7QH0
                 }}]
GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec
  = \ _ [Occ=Dead] (x_i7QGZ :: TextEncoding) (s_i7QH0 :: String) ->
      case x_i7QGZ of
      { TextEncoding @ dstate_a7QEv @ estate_a7QEw ds1_d7QGj ds2_d7QGk
                     ds3_d7QGl ->
      ++ @ Char ds1_d7QGj s_i7QH0
      }

-- RHS size: {terms: 8, types: 15, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$fShowTextEncoding1
  :: TextEncoding -> String -> [Char]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_i7QGZ [Occ=Once!] :: TextEncoding)
                 (s_i7QH0 [Occ=Once, OS=OneShot] :: String) ->
                 case x_i7QGZ of
                 { TextEncoding @ dstate_a7QEv @ estate_a7QEw ds_d7QGj [Occ=Once]
                                _ [Occ=Dead] _ [Occ=Dead] ->
                 augment
                   @ Char
                   (\ (@ b_i7JbU)
                      (c_i7JbV [Occ=Once, OS=OneShot] :: Char -> b_i7JbU -> b_i7JbU)
                      (n_i7JbW [Occ=Once, OS=OneShot] :: b_i7JbU) ->
                      foldr @ Char @ b_i7JbU c_i7JbV n_i7JbW ds_d7QGj)
                   s_i7QH0
                 }}]
GHC.IO.Encoding.Types.$fShowTextEncoding1
  = \ (x_i7QGZ :: TextEncoding) (s_i7QH0 [OS=OneShot] :: String) ->
      case x_i7QGZ of
      { TextEncoding @ dstate_a7QEv @ estate_a7QEw ds_d7QGj ds1_d7QGk
                     ds2_d7QGl ->
      ++ @ Char ds_d7QGj s_i7QH0
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList
  :: [TextEncoding] -> ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7JaB [Occ=Once] :: [TextEncoding])
                 (s_i7JaC [Occ=Once] :: String) ->
                 showList__
                   @ TextEncoding
                   GHC.IO.Encoding.Types.$fShowTextEncoding1
                   ls_i7JaB
                   s_i7JaC}]
GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList
  = \ (ls_i7JaB :: [TextEncoding]) (s_i7JaC :: String) ->
      showList__
        @ TextEncoding
        GHC.IO.Encoding.Types.$fShowTextEncoding1
        ls_i7JaB
        s_i7JaC

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$fShowTextEncoding [InlPrag=NOUSERINLINE CONLIKE]
  :: Show TextEncoding
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: TextEncoding
                       GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec
                       textEncodingName
                       GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList]
GHC.IO.Encoding.Types.$fShowTextEncoding
  = GHC.Show.C:Show
      @ TextEncoding
      GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec
      textEncodingName
      GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$trModule4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.Types.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$trModule3 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Encoding.Types.$trModule3
  = GHC.Types.TrNameS GHC.IO.Encoding.Types.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$trModule2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
GHC.IO.Encoding.Types.$trModule2 = "GHC.IO.Encoding.Types"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$trModule1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Encoding.Types.$trModule1
  = GHC.Types.TrNameS GHC.IO.Encoding.Types.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$trModule :: Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Encoding.Types.$trModule
  = GHC.Types.Module
      GHC.IO.Encoding.Types.$trModule3 GHC.IO.Encoding.Types.$trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_r7QPf :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep_r7QPf
  = GHC.Types.KindRepTyConApp
      GHC.Tuple.$tc() (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1_r7QPg :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep1_r7QPg
  = GHC.Types.KindRepTyConApp
      GHC.Word.$tcWord8 (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep2_r7QPh :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep2_r7QPh
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcChar (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep3_r7QPi :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep3_r7QPi
  = GHC.Types.: @ KindRep $krep_r7QPf (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep4_r7QPj :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep4_r7QPj
  = GHC.Types.KindRepTyConApp GHC.Types.$tcIO $krep3_r7QPi

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep5_r7QPk :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep5_r7QPk
  = GHC.Types.: @ KindRep $krep2_r7QPh (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep6_r7QPl :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep6_r7QPl
  = GHC.Types.KindRepTyConApp GHC.Types.$tc[] $krep5_r7QPk

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$tcBufferCodec1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.IO.Encoding.Types.$tcBufferCodec1
  = GHC.Types.KindRepFun GHC.Types.krep$* GHC.Types.krep$*->*->*

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep7_r7QPm :: KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep7_r7QPm = GHC.Types.KindRepVar 2#

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep8_r7QPn :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep8_r7QPn = GHC.Types.KindRepFun $krep7_r7QPm $krep4_r7QPj

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep9_r7QPo :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep9_r7QPo
  = GHC.Types.: @ KindRep $krep7_r7QPm (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep10_r7QPp :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep10_r7QPp
  = GHC.Types.KindRepTyConApp GHC.Types.$tcIO $krep9_r7QPo

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep11_r7QPq :: KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep11_r7QPq = GHC.Types.KindRepVar 1#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep12_r7QPr :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep12_r7QPr
  = GHC.Types.: @ KindRep $krep11_r7QPq (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep13_r7QPs :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep13_r7QPs
  = GHC.Types.KindRepTyConApp GHC.IO.Buffer.$tcBuffer $krep12_r7QPr

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep14_r7QPt :: KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep14_r7QPt = GHC.Types.KindRepVar 0#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep15_r7QPu :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep15_r7QPu
  = GHC.Types.: @ KindRep $krep14_r7QPt (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep16_r7QPv :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep16_r7QPv
  = GHC.Types.KindRepTyConApp GHC.IO.Buffer.$tcBuffer $krep15_r7QPu

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep17_r7QPw :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep17_r7QPw
  = GHC.Types.: @ KindRep $krep13_r7QPs (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep18_r7QPx :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep18_r7QPx = GHC.Types.: @ KindRep $krep16_r7QPv $krep17_r7QPw

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep19_r7QPy :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep19_r7QPy
  = GHC.Types.KindRepTyConApp GHC.Tuple.$tc(,) $krep18_r7QPx

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep20_r7QPz :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep20_r7QPz
  = GHC.Types.: @ KindRep $krep19_r7QPy (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep21_r7QPA :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep21_r7QPA
  = GHC.Types.KindRepTyConApp GHC.Types.$tcIO $krep20_r7QPz

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep22_r7QPB :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep22_r7QPB = GHC.Types.KindRepFun $krep13_r7QPs $krep21_r7QPA

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep23_r7QPC :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep23_r7QPC = GHC.Types.KindRepFun $krep16_r7QPv $krep22_r7QPB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$tcCodingProgress2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Encoding.Types.$tcCodingProgress2 = "CodingProgress"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$tcCodingProgress1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Encoding.Types.$tcCodingProgress1
  = GHC.Types.TrNameS GHC.IO.Encoding.Types.$tcCodingProgress2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$tcCodingProgress :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Encoding.Types.$tcCodingProgress
  = GHC.Types.TyCon
      4536835953909491444##
      10020924989385933984##
      GHC.IO.Encoding.Types.$trModule
      GHC.IO.Encoding.Types.$tcCodingProgress1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$tc'InputUnderflow1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
GHC.IO.Encoding.Types.$tc'InputUnderflow1
  = GHC.Types.KindRepTyConApp
      GHC.IO.Encoding.Types.$tcCodingProgress (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$tc'InputUnderflow3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Encoding.Types.$tc'InputUnderflow3 = "'InputUnderflow"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$tc'InputUnderflow2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Encoding.Types.$tc'InputUnderflow2
  = GHC.Types.TrNameS GHC.IO.Encoding.Types.$tc'InputUnderflow3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$tc'InputUnderflow :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Encoding.Types.$tc'InputUnderflow
  = GHC.Types.TyCon
      7310901713659969130##
      7213149953264042554##
      GHC.IO.Encoding.Types.$trModule
      GHC.IO.Encoding.Types.$tc'InputUnderflow2
      0#
      GHC.IO.Encoding.Types.$tc'InputUnderflow1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$tc'OutputUnderflow2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Encoding.Types.$tc'OutputUnderflow2 = "'OutputUnderflow"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$tc'OutputUnderflow1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Encoding.Types.$tc'OutputUnderflow1
  = GHC.Types.TrNameS GHC.IO.Encoding.Types.$tc'OutputUnderflow2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$tc'OutputUnderflow :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Encoding.Types.$tc'OutputUnderflow
  = GHC.Types.TyCon
      9796056422104521286##
      11682915108109873596##
      GHC.IO.Encoding.Types.$trModule
      GHC.IO.Encoding.Types.$tc'OutputUnderflow1
      0#
      GHC.IO.Encoding.Types.$tc'InputUnderflow1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$tc'InvalidSequence2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Encoding.Types.$tc'InvalidSequence2 = "'InvalidSequence"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$tc'InvalidSequence1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Encoding.Types.$tc'InvalidSequence1
  = GHC.Types.TrNameS GHC.IO.Encoding.Types.$tc'InvalidSequence2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$tc'InvalidSequence :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Encoding.Types.$tc'InvalidSequence
  = GHC.Types.TyCon
      11342030351124486013##
      4985313935970877948##
      GHC.IO.Encoding.Types.$trModule
      GHC.IO.Encoding.Types.$tc'InvalidSequence1
      0#
      GHC.IO.Encoding.Types.$tc'InputUnderflow1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep24_r7QPD :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep24_r7QPD
  = GHC.Types.:
      @ KindRep GHC.IO.Encoding.Types.$tc'InputUnderflow1 $krep18_r7QPx

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep25_r7QPE :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep25_r7QPE
  = GHC.Types.KindRepTyConApp GHC.Tuple.$tc(,,) $krep24_r7QPD

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep26_r7QPF :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep26_r7QPF
  = GHC.Types.: @ KindRep $krep25_r7QPE (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep27_r7QPG :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep27_r7QPG
  = GHC.Types.KindRepTyConApp GHC.Types.$tcIO $krep26_r7QPF

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep28_r7QPH :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep28_r7QPH = GHC.Types.KindRepFun $krep13_r7QPs $krep27_r7QPG

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep29_r7QPI :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep29_r7QPI = GHC.Types.KindRepFun $krep16_r7QPv $krep28_r7QPH

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$tcBufferCodec3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Encoding.Types.$tcBufferCodec3 = "BufferCodec"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$tcBufferCodec2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Encoding.Types.$tcBufferCodec2
  = GHC.Types.TrNameS GHC.IO.Encoding.Types.$tcBufferCodec3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$tcBufferCodec :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Encoding.Types.$tcBufferCodec
  = GHC.Types.TyCon
      8585015667497772909##
      7745120500523128511##
      GHC.IO.Encoding.Types.$trModule
      GHC.IO.Encoding.Types.$tcBufferCodec2
      0#
      GHC.IO.Encoding.Types.$tcBufferCodec1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep30_r7QPJ :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep30_r7QPJ = GHC.Types.: @ KindRep $krep11_r7QPq $krep9_r7QPo

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep31_r7QPK :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep31_r7QPK = GHC.Types.: @ KindRep $krep14_r7QPt $krep30_r7QPJ

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep32_r7QPL :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep32_r7QPL
  = GHC.Types.KindRepTyConApp
      GHC.IO.Encoding.Types.$tcBufferCodec $krep31_r7QPK

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep33_r7QPM :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep33_r7QPM = GHC.Types.KindRepFun $krep8_r7QPn $krep32_r7QPL

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep34_r7QPN :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep34_r7QPN = GHC.Types.KindRepFun $krep10_r7QPp $krep33_r7QPM

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep35_r7QPO :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep35_r7QPO = GHC.Types.KindRepFun $krep4_r7QPj $krep34_r7QPN

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep36_r7QPP :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep36_r7QPP = GHC.Types.KindRepFun $krep23_r7QPC $krep35_r7QPO

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$tc'BufferCodec1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.IO.Encoding.Types.$tc'BufferCodec1
  = GHC.Types.KindRepFun $krep29_r7QPI $krep36_r7QPP

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$tc'BufferCodec3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Encoding.Types.$tc'BufferCodec3 = "'BufferCodec"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$tc'BufferCodec2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Encoding.Types.$tc'BufferCodec2
  = GHC.Types.TrNameS GHC.IO.Encoding.Types.$tc'BufferCodec3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$tc'BufferCodec :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Encoding.Types.$tc'BufferCodec
  = GHC.Types.TyCon
      7854563382940536875##
      13968497653111525953##
      GHC.IO.Encoding.Types.$trModule
      GHC.IO.Encoding.Types.$tc'BufferCodec2
      3#
      GHC.IO.Encoding.Types.$tc'BufferCodec1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep37_r7QPQ :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep37_r7QPQ = GHC.Types.: @ KindRep $krep2_r7QPh $krep15_r7QPu

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep38_r7QPR :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep38_r7QPR = GHC.Types.: @ KindRep $krep1_r7QPg $krep37_r7QPQ

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep39_r7QPS :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep39_r7QPS
  = GHC.Types.KindRepTyConApp
      GHC.IO.Encoding.Types.$tcBufferCodec $krep38_r7QPR

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep40_r7QPT :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep40_r7QPT
  = GHC.Types.: @ KindRep $krep39_r7QPS (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep41_r7QPU :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep41_r7QPU
  = GHC.Types.KindRepTyConApp GHC.Types.$tcIO $krep40_r7QPT

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep42_r7QPV :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep42_r7QPV = GHC.Types.: @ KindRep $krep1_r7QPg $krep12_r7QPr

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep43_r7QPW :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep43_r7QPW = GHC.Types.: @ KindRep $krep2_r7QPh $krep42_r7QPV

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep44_r7QPX :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep44_r7QPX
  = GHC.Types.KindRepTyConApp
      GHC.IO.Encoding.Types.$tcBufferCodec $krep43_r7QPW

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep45_r7QPY :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep45_r7QPY
  = GHC.Types.: @ KindRep $krep44_r7QPX (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep46_r7QPZ :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep46_r7QPZ
  = GHC.Types.KindRepTyConApp GHC.Types.$tcIO $krep45_r7QPY

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$tcTextEncoding2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Encoding.Types.$tcTextEncoding2 = "TextEncoding"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$tcTextEncoding1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Encoding.Types.$tcTextEncoding1
  = GHC.Types.TrNameS GHC.IO.Encoding.Types.$tcTextEncoding2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$tcTextEncoding :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Encoding.Types.$tcTextEncoding
  = GHC.Types.TyCon
      17289914150150147669##
      3676960838620070165##
      GHC.IO.Encoding.Types.$trModule
      GHC.IO.Encoding.Types.$tcTextEncoding1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep47_r7QQ0 :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep47_r7QQ0
  = GHC.Types.KindRepTyConApp
      GHC.IO.Encoding.Types.$tcTextEncoding (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep48_r7QQ1 :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep48_r7QQ1 = GHC.Types.KindRepFun $krep46_r7QPZ $krep47_r7QQ0

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep49_r7QQ2 :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep49_r7QQ2 = GHC.Types.KindRepFun $krep41_r7QPU $krep48_r7QQ1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$tc'TextEncoding1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.IO.Encoding.Types.$tc'TextEncoding1
  = GHC.Types.KindRepFun $krep6_r7QPl $krep49_r7QQ2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$tc'TextEncoding3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Encoding.Types.$tc'TextEncoding3 = "'TextEncoding"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$tc'TextEncoding2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Encoding.Types.$tc'TextEncoding2
  = GHC.Types.TrNameS GHC.IO.Encoding.Types.$tc'TextEncoding3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.Types.$tc'TextEncoding :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Encoding.Types.$tc'TextEncoding
  = GHC.Types.TyCon
      6558277295920728213##
      3754397505420773780##
      GHC.IO.Encoding.Types.$trModule
      GHC.IO.Encoding.Types.$tc'TextEncoding2
      2#
      GHC.IO.Encoding.Types.$tc'TextEncoding1


