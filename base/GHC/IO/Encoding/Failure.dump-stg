
==================== Pre unarise: ====================
2018-03-16 16:03:34.941690603 UTC

GHC.IO.Encoding.Failure.$fShowCodingFailureMode8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ErrorOnCodingFailure"#;

GHC.IO.Encoding.Failure.$fShowCodingFailureMode7
  :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Failure.$fShowCodingFailureMode8;

GHC.IO.Encoding.Failure.$fShowCodingFailureMode6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IgnoreCodingFailure"#;

GHC.IO.Encoding.Failure.$fShowCodingFailureMode5
  :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Failure.$fShowCodingFailureMode6;

GHC.IO.Encoding.Failure.$fShowCodingFailureMode4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "TransliterateCodingFailure"#;

GHC.IO.Encoding.Failure.$fShowCodingFailureMode3
  :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Failure.$fShowCodingFailureMode4;

GHC.IO.Encoding.Failure.$fShowCodingFailureMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "RoundtripFailure"#;

GHC.IO.Encoding.Failure.$fShowCodingFailureMode1
  :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Failure.$fShowCodingFailureMode2;

GHC.IO.Encoding.Failure.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s8rVL w1_s8rVM]
        case w_s8rVL of {
          GHC.IO.Encoding.Failure.ErrorOnCodingFailure ->
              GHC.Base.++
                  GHC.IO.Encoding.Failure.$fShowCodingFailureMode7 w1_s8rVM;
          GHC.IO.Encoding.Failure.IgnoreCodingFailure ->
              GHC.Base.++
                  GHC.IO.Encoding.Failure.$fShowCodingFailureMode5 w1_s8rVM;
          GHC.IO.Encoding.Failure.TransliterateCodingFailure ->
              GHC.Base.++
                  GHC.IO.Encoding.Failure.$fShowCodingFailureMode3 w1_s8rVM;
          GHC.IO.Encoding.Failure.RoundtripFailure ->
              GHC.Base.++
                  GHC.IO.Encoding.Failure.$fShowCodingFailureMode1 w1_s8rVM;
        };

GHC.IO.Encoding.Failure.$fShowCodingFailureMode_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int
     -> GHC.IO.Encoding.Failure.CodingFailureMode -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s8rVO w1_s8rVP w2_s8rVQ]
        GHC.IO.Encoding.Failure.$w$cshowsPrec w1_s8rVP w2_s8rVQ;

GHC.IO.Encoding.Failure.$fShowCodingFailureMode_$cshow
  :: GHC.IO.Encoding.Failure.CodingFailureMode -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s8rVR]
        case x_s8rVR of {
          GHC.IO.Encoding.Failure.ErrorOnCodingFailure ->
              GHC.IO.Encoding.Failure.$fShowCodingFailureMode7;
          GHC.IO.Encoding.Failure.IgnoreCodingFailure ->
              GHC.IO.Encoding.Failure.$fShowCodingFailureMode5;
          GHC.IO.Encoding.Failure.TransliterateCodingFailure ->
              GHC.IO.Encoding.Failure.$fShowCodingFailureMode3;
          GHC.IO.Encoding.Failure.RoundtripFailure ->
              GHC.IO.Encoding.Failure.$fShowCodingFailureMode1;
        };

GHC.IO.Encoding.Failure.$fShowCodingFailureMode_$cshowList
  :: [GHC.IO.Encoding.Failure.CodingFailureMode] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s8rVT s_s8rVU]
        GHC.Show.showList__
            GHC.IO.Encoding.Failure.$w$cshowsPrec ls_s8rVT s_s8rVU;

GHC.IO.Encoding.Failure.$fShowCodingFailureMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Encoding.Failure.CodingFailureMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Encoding.Failure.$fShowCodingFailureMode_$cshowsPrec
                                    GHC.IO.Encoding.Failure.$fShowCodingFailureMode_$cshow
                                    GHC.IO.Encoding.Failure.$fShowCodingFailureMode_$cshowList];

GHC.IO.Encoding.Failure.codingFailureModeSuffix6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "//IGNORE"#;

GHC.IO.Encoding.Failure.codingFailureModeSuffix5
  :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Failure.codingFailureModeSuffix6;

GHC.IO.Encoding.Failure.codingFailureModeSuffix4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "//TRANSLIT"#;

GHC.IO.Encoding.Failure.codingFailureModeSuffix3
  :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Failure.codingFailureModeSuffix4;

GHC.IO.Encoding.Failure.codingFailureModeSuffix2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "//ROUNDTRIP"#;

GHC.IO.Encoding.Failure.codingFailureModeSuffix1
  :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Failure.codingFailureModeSuffix2;

GHC.IO.Encoding.Failure.codingFailureModeSuffix
  :: GHC.IO.Encoding.Failure.CodingFailureMode -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s8rVV]
        case ds_s8rVV of {
          GHC.IO.Encoding.Failure.ErrorOnCodingFailure -> [] [];
          GHC.IO.Encoding.Failure.IgnoreCodingFailure ->
              GHC.IO.Encoding.Failure.codingFailureModeSuffix5;
          GHC.IO.Encoding.Failure.TransliterateCodingFailure ->
              GHC.IO.Encoding.Failure.codingFailureModeSuffix3;
          GHC.IO.Encoding.Failure.RoundtripFailure ->
              GHC.IO.Encoding.Failure.codingFailureModeSuffix1;
        };

GHC.IO.Encoding.Failure.recoverDecode7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "recoverDecode"#;

GHC.IO.Encoding.Failure.recoverDecode6 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.Failure.recoverDecode7;

GHC.IO.Encoding.Failure.recoverDecode5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "invalid byte sequence"#;

GHC.IO.Encoding.Failure.recoverDecode4 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.Failure.recoverDecode5;

GHC.IO.Encoding.Failure.recoverDecode3
  :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.InvalidArgument
                                             GHC.IO.Encoding.Failure.recoverDecode6
                                             GHC.IO.Encoding.Failure.recoverDecode4
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Encoding.Failure.recoverDecode2
  :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Encoding.Failure.recoverDecode3;

GHC.IO.Encoding.Failure.recoverEncode7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "recoverEncode"#;

GHC.IO.Encoding.Failure.recoverEncode6 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.Failure.recoverEncode7;

GHC.IO.Encoding.Failure.recoverEncode5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "invalid character"#;

GHC.IO.Encoding.Failure.recoverEncode4 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.Failure.recoverEncode5;

GHC.IO.Encoding.Failure.recoverEncode3
  :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.InvalidArgument
                                             GHC.IO.Encoding.Failure.recoverEncode6
                                             GHC.IO.Encoding.Failure.recoverEncode4
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Encoding.Failure.recoverEncode2
  :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Encoding.Failure.recoverEncode3;

GHC.IO.Encoding.Failure.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.Encoding.Failure.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Failure.$trModule4];

GHC.IO.Encoding.Failure.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Encoding.Failure"#;

GHC.IO.Encoding.Failure.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Failure.$trModule2];

GHC.IO.Encoding.Failure.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Encoding.Failure.$trModule3
                                     GHC.IO.Encoding.Failure.$trModule1];

GHC.IO.Encoding.Failure.$tcCodingFailureMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "CodingFailureMode"#;

GHC.IO.Encoding.Failure.$tcCodingFailureMode1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Failure.$tcCodingFailureMode2];

GHC.IO.Encoding.Failure.$tcCodingFailureMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [14925461047987757098##
                                    8591318658186141108##
                                    GHC.IO.Encoding.Failure.$trModule
                                    GHC.IO.Encoding.Failure.$tcCodingFailureMode1
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Encoding.Failure.$tcCodingFailureMode
                                              GHC.Types.[]];

GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ErrorOnCodingFailure"#;

GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure2
  :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure3];

GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12360460340946478580##
                                    790065067637529655##
                                    GHC.IO.Encoding.Failure.$trModule
                                    GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure2
                                    0#
                                    GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure1];

GHC.IO.Encoding.Failure.$tc'IgnoreCodingFailure2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'IgnoreCodingFailure"#;

GHC.IO.Encoding.Failure.$tc'IgnoreCodingFailure1
  :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Failure.$tc'IgnoreCodingFailure2];

GHC.IO.Encoding.Failure.$tc'IgnoreCodingFailure :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1247277247292781024##
                                    4030462313976053703##
                                    GHC.IO.Encoding.Failure.$trModule
                                    GHC.IO.Encoding.Failure.$tc'IgnoreCodingFailure1
                                    0#
                                    GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure1];

GHC.IO.Encoding.Failure.$tc'TransliterateCodingFailure2
  :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'TransliterateCodingFailure"#;

GHC.IO.Encoding.Failure.$tc'TransliterateCodingFailure1
  :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Failure.$tc'TransliterateCodingFailure2];

GHC.IO.Encoding.Failure.$tc'TransliterateCodingFailure
  :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2231629224643919862##
                                    7270908418490455598##
                                    GHC.IO.Encoding.Failure.$trModule
                                    GHC.IO.Encoding.Failure.$tc'TransliterateCodingFailure1
                                    0#
                                    GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure1];

GHC.IO.Encoding.Failure.$tc'RoundtripFailure2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'RoundtripFailure"#;

GHC.IO.Encoding.Failure.$tc'RoundtripFailure1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Failure.$tc'RoundtripFailure2];

GHC.IO.Encoding.Failure.$tc'RoundtripFailure :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12324562344665179767##
                                    401887646038237864##
                                    GHC.IO.Encoding.Failure.$trModule
                                    GHC.IO.Encoding.Failure.$tc'RoundtripFailure1
                                    0#
                                    GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure1];

GHC.IO.Encoding.Failure.recoverDecode1
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Buffer.Buffer GHC.Word.Word8,
            GHC.IO.Buffer.Buffer GHC.Types.Char) #)
[GblId,
 Arity=4,
 Str=<S,1*U><S,1*U(U,U,U,U,U,U)><S,1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [cfm_s8rVX input_s8rVY output_s8rVZ eta_s8rW0]
        case input_s8rVY of {
          GHC.IO.Buffer.Buffer dt_s8rW2
                               dt1_s8rW3
                               ds_s8rW4 [Occ=Once*]
                               dt2_s8rW5 [Occ=Once*]
                               dt3_s8rW6
                               dt4_s8rW7 [Occ=Once*] ->
              case output_s8rVZ of wild1_s8rW8 {
                GHC.IO.Buffer.Buffer dt5_s8rW9
                                     dt6_s8rWa
                                     ds1_s8rWb [Occ=Once*]
                                     dt7_s8rWc [Occ=Once*]
                                     dt8_s8rWd [Occ=Once*]
                                     dt9_s8rWe ->
                    case cfm_s8rVX of {
                      GHC.IO.Encoding.Failure.ErrorOnCodingFailure ->
                          raiseIO# [GHC.IO.Encoding.Failure.recoverDecode2 eta_s8rW0];
                      GHC.IO.Encoding.Failure.IgnoreCodingFailure ->
                          case +# [dt3_s8rW6 1#] of sat_s8rWg {
                            __DEFAULT ->
                                let {
                                  sat_s8rWh [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                  [LclId] =
                                      CCCS GHC.IO.Buffer.Buffer! [dt_s8rW2
                                                                  dt1_s8rW3
                                                                  ds_s8rW4
                                                                  dt2_s8rW5
                                                                  sat_s8rWg
                                                                  dt4_s8rW7]; } in
                                let {
                                  sat_s8rWi [Occ=Once]
                                    :: (GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char)
                                  [LclId] =
                                      CCCS (,)! [sat_s8rWh wild1_s8rW8];
                                } in  (#,#) [eta_s8rW0 sat_s8rWi];
                          };
                      GHC.IO.Encoding.Failure.TransliterateCodingFailure ->
                          case
                              writeWideCharOffAddr# [dt5_s8rW9 dt9_s8rWe '\65533'# eta_s8rW0]
                          of
                          s2_s8rWj
                          { __DEFAULT ->
                                case touch# [dt6_s8rWa s2_s8rWj] of s'_s8rWk {
                                  __DEFAULT ->
                                      case +# [dt9_s8rWe 1#] of sat_s8rWn {
                                        __DEFAULT ->
                                            let {
                                              sat_s8rWo [Occ=Once]
                                                :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                              [LclId] =
                                                  CCCS GHC.IO.Buffer.Buffer! [dt5_s8rW9
                                                                              dt6_s8rWa
                                                                              ds1_s8rWb
                                                                              dt7_s8rWc
                                                                              dt8_s8rWd
                                                                              sat_s8rWn];
                                            } in 
                                              case +# [dt3_s8rW6 1#] of sat_s8rWl {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s8rWm [Occ=Once]
                                                        :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                                      [LclId] =
                                                          CCCS GHC.IO.Buffer.Buffer! [dt_s8rW2
                                                                                      dt1_s8rW3
                                                                                      ds_s8rW4
                                                                                      dt2_s8rW5
                                                                                      sat_s8rWl
                                                                                      dt4_s8rW7]; } in
                                                    let {
                                                      sat_s8rWp [Occ=Once]
                                                        :: (GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                                            GHC.IO.Buffer.Buffer GHC.Types.Char)
                                                      [LclId] =
                                                          CCCS (,)! [sat_s8rWm sat_s8rWo];
                                                    } in  (#,#) [s'_s8rWk sat_s8rWp];
                                              };
                                      };
                                };
                          };
                      GHC.IO.Encoding.Failure.RoundtripFailure ->
                          case plusAddr# [dt_s8rW2 dt3_s8rW6] of sat_s8rWq {
                            __DEFAULT ->
                                case readWord8OffAddr# [sat_s8rWq 0# eta_s8rW0] of {
                                  (#,#) ipv_s8rWs [Occ=Once] ipv1_s8rWt ->
                                      case touch# [dt1_s8rW3 ipv_s8rWs] of s'_s8rWu {
                                        __DEFAULT ->
                                            case ltWord# [ipv1_s8rWt 128##] of {
                                              __DEFAULT ->
                                                  case word2Int# [ipv1_s8rWt] of sat_s8rWx {
                                                    __DEFAULT ->
                                                        case
                                                            +# [56320# sat_s8rWx]
                                                        of
                                                        i#_s8rWw [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  int2Word# [i#_s8rWw]
                                                              of
                                                              sat_s8rWy
                                                              { __DEFAULT ->
                                                                    case
                                                                        leWord# [sat_s8rWy
                                                                                 1114111##]
                                                                    of
                                                                    { __DEFAULT ->
                                                                          GHC.Char.$wlvl i#_s8rWw;
                                                                      1# ->
                                                                          case
                                                                              chr# [i#_s8rWw]
                                                                          of
                                                                          sat_s8rWB
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    writeWideCharOffAddr# [dt5_s8rW9
                                                                                                           dt9_s8rWe
                                                                                                           sat_s8rWB
                                                                                                           s'_s8rWu]
                                                                                of
                                                                                s2_s8rWC
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          touch# [dt6_s8rWa
                                                                                                  s2_s8rWC]
                                                                                      of
                                                                                      s'1_s8rWD
                                                                                      { __DEFAULT ->
                                                                                            case
                                                                                                +# [dt9_s8rWe
                                                                                                    1#]
                                                                                            of
                                                                                            sat_s8rWG
                                                                                            { __DEFAULT ->
                                                                                                  let {
                                                                                                    sat_s8rWH [Occ=Once]
                                                                                                      :: GHC.IO.Buffer.Buffer
                                                                                                           GHC.Types.Char
                                                                                                    [LclId] =
                                                                                                        CCCS GHC.IO.Buffer.Buffer! [dt5_s8rW9
                                                                                                                                    dt6_s8rWa
                                                                                                                                    ds1_s8rWb
                                                                                                                                    dt7_s8rWc
                                                                                                                                    dt8_s8rWd
                                                                                                                                    sat_s8rWG];
                                                                                                  } in 
                                                                                                    case
                                                                                                        +# [dt3_s8rW6
                                                                                                            1#]
                                                                                                    of
                                                                                                    sat_s8rWE
                                                                                                    { __DEFAULT ->
                                                                                                          let {
                                                                                                            sat_s8rWF [Occ=Once]
                                                                                                              :: GHC.IO.Buffer.Buffer
                                                                                                                   GHC.Word.Word8
                                                                                                            [LclId] =
                                                                                                                CCCS GHC.IO.Buffer.Buffer! [dt_s8rW2
                                                                                                                                            dt1_s8rW3
                                                                                                                                            ds_s8rW4
                                                                                                                                            dt2_s8rW5
                                                                                                                                            sat_s8rWE
                                                                                                                                            dt4_s8rW7]; } in
                                                                                                          let {
                                                                                                            sat_s8rWI [Occ=Once]
                                                                                                              :: (GHC.IO.Buffer.Buffer
                                                                                                                    GHC.Word.Word8,
                                                                                                                  GHC.IO.Buffer.Buffer
                                                                                                                    GHC.Types.Char)
                                                                                                            [LclId] =
                                                                                                                CCCS (,)! [sat_s8rWF
                                                                                                                           sat_s8rWH];
                                                                                                          } in 
                                                                                                            (#,#) [s'1_s8rWD
                                                                                                                   sat_s8rWI];
                                                                                                    };
                                                                                            };
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                              1# ->
                                                  case
                                                      word2Int# [ipv1_s8rWt]
                                                  of
                                                  i#_s8rWJ [Dmd=<S,U>]
                                                  { __DEFAULT ->
                                                        case int2Word# [i#_s8rWJ] of sat_s8rWK {
                                                          __DEFAULT ->
                                                              case
                                                                  leWord# [sat_s8rWK 1114111##]
                                                              of
                                                              { __DEFAULT ->
                                                                    GHC.Char.$wlvl i#_s8rWJ;
                                                                1# ->
                                                                    case
                                                                        chr# [i#_s8rWJ]
                                                                    of
                                                                    sat_s8rWN
                                                                    { __DEFAULT ->
                                                                          case
                                                                              writeWideCharOffAddr# [dt5_s8rW9
                                                                                                     dt9_s8rWe
                                                                                                     sat_s8rWN
                                                                                                     s'_s8rWu]
                                                                          of
                                                                          s2_s8rWO
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    touch# [dt6_s8rWa
                                                                                            s2_s8rWO]
                                                                                of
                                                                                s'1_s8rWP
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          +# [dt9_s8rWe
                                                                                              1#]
                                                                                      of
                                                                                      sat_s8rWS
                                                                                      { __DEFAULT ->
                                                                                            let {
                                                                                              sat_s8rWT [Occ=Once]
                                                                                                :: GHC.IO.Buffer.Buffer
                                                                                                     GHC.Types.Char
                                                                                              [LclId] =
                                                                                                  CCCS GHC.IO.Buffer.Buffer! [dt5_s8rW9
                                                                                                                              dt6_s8rWa
                                                                                                                              ds1_s8rWb
                                                                                                                              dt7_s8rWc
                                                                                                                              dt8_s8rWd
                                                                                                                              sat_s8rWS];
                                                                                            } in 
                                                                                              case
                                                                                                  +# [dt3_s8rW6
                                                                                                      1#]
                                                                                              of
                                                                                              sat_s8rWQ
                                                                                              { __DEFAULT ->
                                                                                                    let {
                                                                                                      sat_s8rWR [Occ=Once]
                                                                                                        :: GHC.IO.Buffer.Buffer
                                                                                                             GHC.Word.Word8
                                                                                                      [LclId] =
                                                                                                          CCCS GHC.IO.Buffer.Buffer! [dt_s8rW2
                                                                                                                                      dt1_s8rW3
                                                                                                                                      ds_s8rW4
                                                                                                                                      dt2_s8rW5
                                                                                                                                      sat_s8rWQ
                                                                                                                                      dt4_s8rW7]; } in
                                                                                                    let {
                                                                                                      sat_s8rWU [Occ=Once]
                                                                                                        :: (GHC.IO.Buffer.Buffer
                                                                                                              GHC.Word.Word8,
                                                                                                            GHC.IO.Buffer.Buffer
                                                                                                              GHC.Types.Char)
                                                                                                      [LclId] =
                                                                                                          CCCS (,)! [sat_s8rWR
                                                                                                                     sat_s8rWT];
                                                                                                    } in 
                                                                                                      (#,#) [s'1_s8rWP
                                                                                                             sat_s8rWU];
                                                                                              };
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Encoding.Failure.recoverDecode
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.Types.IO
          (GHC.IO.Buffer.Buffer GHC.Word.Word8,
           GHC.IO.Buffer.Buffer GHC.Types.Char)
[GblId,
 Arity=4,
 Str=<S,1*U><S,1*U(U,U,U,U,U,U)><S,1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.Encoding.Failure.recoverDecode1 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.IO.Encoding.Failure.recoverEncode1
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Buffer.Buffer GHC.Types.Char,
            GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=4,
 Str=<S,1*U><S(SLLLSL),1*U(U,U,U,U,U,U)><S,1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [cfm_s8rWV input_s8rWW output_s8rWX eta_s8rWY]
        case input_s8rWW of wild_s8rWZ {
          GHC.IO.Buffer.Buffer dt_s8rX0
                               dt1_s8rX1
                               ds_s8rX2 [Occ=Once*]
                               dt2_s8rX3 [Occ=Once*]
                               dt3_s8rX4
                               dt4_s8rX5 [Occ=Once*] ->
              case output_s8rWX of wild1_s8rX6 {
                GHC.IO.Buffer.Buffer dt5_s8rX7
                                     dt6_s8rX8
                                     ds1_s8rX9 [Occ=Once]
                                     dt7_s8rXa [Occ=Once]
                                     dt8_s8rXb [Occ=Once]
                                     dt9_s8rXc ->
                    case readWideCharOffAddr# [dt_s8rX0 dt3_s8rX4 eta_s8rWY] of {
                      (#,#) ipv_s8rXe [Occ=Once] ipv1_s8rXf [Occ=Once*] ->
                          case touch# [dt1_s8rX1 ipv_s8rXe] of s'_s8rXg {
                            __DEFAULT ->
                                case cfm_s8rWV of {
                                  GHC.IO.Encoding.Failure.ErrorOnCodingFailure ->
                                      raiseIO# [GHC.IO.Encoding.Failure.recoverEncode2 s'_s8rXg];
                                  GHC.IO.Encoding.Failure.IgnoreCodingFailure ->
                                      case +# [dt3_s8rX4 1#] of sat_s8rXi {
                                        __DEFAULT ->
                                            let {
                                              sat_s8rXj [Occ=Once]
                                                :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                              [LclId] =
                                                  CCCS GHC.IO.Buffer.Buffer! [dt_s8rX0
                                                                              dt1_s8rX1
                                                                              ds_s8rX2
                                                                              dt2_s8rX3
                                                                              sat_s8rXi
                                                                              dt4_s8rX5]; } in
                                            let {
                                              sat_s8rXk [Occ=Once]
                                                :: (GHC.IO.Buffer.Buffer GHC.Types.Char,
                                                    GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                              [LclId] =
                                                  CCCS (,)! [sat_s8rXj wild1_s8rX6];
                                            } in  (#,#) [s'_s8rXg sat_s8rXk];
                                      };
                                  GHC.IO.Encoding.Failure.TransliterateCodingFailure ->
                                      case ipv1_s8rXf of {
                                        __DEFAULT ->
                                            case
                                                writeWideCharOffAddr# [dt_s8rX0
                                                                       dt3_s8rX4
                                                                       '?'#
                                                                       s'_s8rXg]
                                            of
                                            s2_s8rXm
                                            { __DEFAULT ->
                                                  case touch# [dt1_s8rX1 s2_s8rXm] of s'1_s8rXn {
                                                    __DEFAULT ->
                                                        let {
                                                          sat_s8rXo [Occ=Once]
                                                            :: (GHC.IO.Buffer.Buffer GHC.Types.Char,
                                                                GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                                          [LclId] =
                                                              CCCS (,)! [wild_s8rWZ wild1_s8rX6];
                                                        } in  (#,#) [s'1_s8rXn sat_s8rXo];
                                                  };
                                            };
                                        '?'# ->
                                            case +# [dt3_s8rX4 1#] of sat_s8rXp {
                                              __DEFAULT ->
                                                  let {
                                                    sat_s8rXq [Occ=Once]
                                                      :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                                    [LclId] =
                                                        CCCS GHC.IO.Buffer.Buffer! [dt_s8rX0
                                                                                    dt1_s8rX1
                                                                                    ds_s8rX2
                                                                                    dt2_s8rX3
                                                                                    sat_s8rXp
                                                                                    dt4_s8rX5]; } in
                                                  let {
                                                    sat_s8rXr [Occ=Once]
                                                      :: (GHC.IO.Buffer.Buffer GHC.Types.Char,
                                                          GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                                    [LclId] =
                                                        CCCS (,)! [sat_s8rXq wild1_s8rX6];
                                                  } in  (#,#) [s'_s8rXg sat_s8rXr];
                                            };
                                      };
                                  GHC.IO.Encoding.Failure.RoundtripFailure ->
                                      case ord# [ipv1_s8rXf] of x_s8rXs [Dmd=<S,U>] {
                                        __DEFAULT ->
                                            case <=# [56448# x_s8rXs] of {
                                              __DEFAULT ->
                                                  raiseIO# [GHC.IO.Encoding.Failure.recoverEncode2
                                                            s'_s8rXg];
                                              1# ->
                                                  case <# [x_s8rXs 56576#] of {
                                                    __DEFAULT ->
                                                        raiseIO# [GHC.IO.Encoding.Failure.recoverEncode2
                                                                  s'_s8rXg];
                                                    1# ->
                                                        case int2Word# [x_s8rXs] of sat_s8rXw {
                                                          __DEFAULT ->
                                                              case
                                                                  narrow8Word# [sat_s8rXw]
                                                              of
                                                              sat_s8rXx
                                                              { __DEFAULT ->
                                                                    case
                                                                        plusAddr# [dt5_s8rX7
                                                                                   dt9_s8rXc]
                                                                    of
                                                                    sat_s8rXv
                                                                    { __DEFAULT ->
                                                                          case
                                                                              writeWord8OffAddr# [sat_s8rXv
                                                                                                  0#
                                                                                                  sat_s8rXx
                                                                                                  s'_s8rXg]
                                                                          of
                                                                          s2_s8rXy
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    touch# [dt6_s8rX8
                                                                                            s2_s8rXy]
                                                                                of
                                                                                s'1_s8rXz
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          +# [dt9_s8rXc
                                                                                              1#]
                                                                                      of
                                                                                      sat_s8rXC
                                                                                      { __DEFAULT ->
                                                                                            let {
                                                                                              sat_s8rXD [Occ=Once]
                                                                                                :: GHC.IO.Buffer.Buffer
                                                                                                     GHC.Word.Word8
                                                                                              [LclId] =
                                                                                                  CCCS GHC.IO.Buffer.Buffer! [dt5_s8rX7
                                                                                                                              dt6_s8rX8
                                                                                                                              ds1_s8rX9
                                                                                                                              dt7_s8rXa
                                                                                                                              dt8_s8rXb
                                                                                                                              sat_s8rXC];
                                                                                            } in 
                                                                                              case
                                                                                                  +# [dt3_s8rX4
                                                                                                      1#]
                                                                                              of
                                                                                              sat_s8rXA
                                                                                              { __DEFAULT ->
                                                                                                    let {
                                                                                                      sat_s8rXB [Occ=Once]
                                                                                                        :: GHC.IO.Buffer.Buffer
                                                                                                             GHC.Types.Char
                                                                                                      [LclId] =
                                                                                                          CCCS GHC.IO.Buffer.Buffer! [dt_s8rX0
                                                                                                                                      dt1_s8rX1
                                                                                                                                      ds_s8rX2
                                                                                                                                      dt2_s8rX3
                                                                                                                                      sat_s8rXA
                                                                                                                                      dt4_s8rX5]; } in
                                                                                                    let {
                                                                                                      sat_s8rXE [Occ=Once]
                                                                                                        :: (GHC.IO.Buffer.Buffer
                                                                                                              GHC.Types.Char,
                                                                                                            GHC.IO.Buffer.Buffer
                                                                                                              GHC.Word.Word8)
                                                                                                      [LclId] =
                                                                                                          CCCS (,)! [sat_s8rXB
                                                                                                                     sat_s8rXD];
                                                                                                    } in 
                                                                                                      (#,#) [s'1_s8rXz
                                                                                                             sat_s8rXE];
                                                                                              };
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Encoding.Failure.recoverEncode
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO
          (GHC.IO.Buffer.Buffer GHC.Types.Char,
           GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId,
 Arity=4,
 Str=<S,1*U><S(SLLLSL),1*U(U,U,U,U,U,U)><S,1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.Encoding.Failure.recoverEncode1 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.IO.Encoding.Failure.isSurrogate [InlPrag=INLINE (sat-args=1)]
  :: GHC.Types.Char -> GHC.Types.Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [c_s8rXF]
        case c_s8rXF of {
          GHC.Types.C# c#_s8rXH [Occ=Once] ->
              case ord# [c#_s8rXH] of y_s8rXI [Dmd=<S,U>] {
                __DEFAULT ->
                    case <=# [55296# y_s8rXI] of {
                      __DEFAULT ->
                          case <=# [56320# y_s8rXI] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# ->
                                case <=# [y_s8rXI 57343#] of sat_s8rXL {
                                  __DEFAULT -> tagToEnum# [sat_s8rXL];
                                };
                          };
                      1# ->
                          case <=# [y_s8rXI 56319#] of {
                            __DEFAULT ->
                                case <=# [56320# y_s8rXI] of {
                                  __DEFAULT -> GHC.Types.False [];
                                  1# ->
                                      case <=# [y_s8rXI 57343#] of sat_s8rXO {
                                        __DEFAULT -> tagToEnum# [sat_s8rXO];
                                      };
                                };
                            1# -> GHC.Types.True [];
                          };
                    };
              };
        };

GHC.IO.Encoding.Failure.ErrorOnCodingFailure
  :: GHC.IO.Encoding.Failure.CodingFailureMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Failure.ErrorOnCodingFailure! [];

GHC.IO.Encoding.Failure.IgnoreCodingFailure
  :: GHC.IO.Encoding.Failure.CodingFailureMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Failure.IgnoreCodingFailure! [];

GHC.IO.Encoding.Failure.TransliterateCodingFailure
  :: GHC.IO.Encoding.Failure.CodingFailureMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Failure.TransliterateCodingFailure! [];

GHC.IO.Encoding.Failure.RoundtripFailure
  :: GHC.IO.Encoding.Failure.CodingFailureMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Failure.RoundtripFailure! [];


==================== STG syntax: ====================
2018-03-16 16:03:34.953560293 UTC

GHC.IO.Encoding.Failure.$fShowCodingFailureMode8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ErrorOnCodingFailure"#;

GHC.IO.Encoding.Failure.$fShowCodingFailureMode7
  :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Failure.$fShowCodingFailureMode8;

GHC.IO.Encoding.Failure.$fShowCodingFailureMode6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IgnoreCodingFailure"#;

GHC.IO.Encoding.Failure.$fShowCodingFailureMode5
  :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Failure.$fShowCodingFailureMode6;

GHC.IO.Encoding.Failure.$fShowCodingFailureMode4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "TransliterateCodingFailure"#;

GHC.IO.Encoding.Failure.$fShowCodingFailureMode3
  :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Failure.$fShowCodingFailureMode4;

GHC.IO.Encoding.Failure.$fShowCodingFailureMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "RoundtripFailure"#;

GHC.IO.Encoding.Failure.$fShowCodingFailureMode1
  :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Failure.$fShowCodingFailureMode2;

GHC.IO.Encoding.Failure.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s8rVL w1_s8rVM]
        case w_s8rVL of {
          GHC.IO.Encoding.Failure.ErrorOnCodingFailure ->
              GHC.Base.++
                  GHC.IO.Encoding.Failure.$fShowCodingFailureMode7 w1_s8rVM;
          GHC.IO.Encoding.Failure.IgnoreCodingFailure ->
              GHC.Base.++
                  GHC.IO.Encoding.Failure.$fShowCodingFailureMode5 w1_s8rVM;
          GHC.IO.Encoding.Failure.TransliterateCodingFailure ->
              GHC.Base.++
                  GHC.IO.Encoding.Failure.$fShowCodingFailureMode3 w1_s8rVM;
          GHC.IO.Encoding.Failure.RoundtripFailure ->
              GHC.Base.++
                  GHC.IO.Encoding.Failure.$fShowCodingFailureMode1 w1_s8rVM;
        };

GHC.IO.Encoding.Failure.$fShowCodingFailureMode_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int
     -> GHC.IO.Encoding.Failure.CodingFailureMode -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s8rVO w1_s8rVP w2_s8rVQ]
        GHC.IO.Encoding.Failure.$w$cshowsPrec w1_s8rVP w2_s8rVQ;

GHC.IO.Encoding.Failure.$fShowCodingFailureMode_$cshow
  :: GHC.IO.Encoding.Failure.CodingFailureMode -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s8rVR]
        case x_s8rVR of {
          GHC.IO.Encoding.Failure.ErrorOnCodingFailure ->
              GHC.IO.Encoding.Failure.$fShowCodingFailureMode7;
          GHC.IO.Encoding.Failure.IgnoreCodingFailure ->
              GHC.IO.Encoding.Failure.$fShowCodingFailureMode5;
          GHC.IO.Encoding.Failure.TransliterateCodingFailure ->
              GHC.IO.Encoding.Failure.$fShowCodingFailureMode3;
          GHC.IO.Encoding.Failure.RoundtripFailure ->
              GHC.IO.Encoding.Failure.$fShowCodingFailureMode1;
        };

GHC.IO.Encoding.Failure.$fShowCodingFailureMode_$cshowList
  :: [GHC.IO.Encoding.Failure.CodingFailureMode] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s8rVT s_s8rVU]
        GHC.Show.showList__
            GHC.IO.Encoding.Failure.$w$cshowsPrec ls_s8rVT s_s8rVU;

GHC.IO.Encoding.Failure.$fShowCodingFailureMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Encoding.Failure.CodingFailureMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Encoding.Failure.$fShowCodingFailureMode_$cshowsPrec
                                    GHC.IO.Encoding.Failure.$fShowCodingFailureMode_$cshow
                                    GHC.IO.Encoding.Failure.$fShowCodingFailureMode_$cshowList];

GHC.IO.Encoding.Failure.codingFailureModeSuffix6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "//IGNORE"#;

GHC.IO.Encoding.Failure.codingFailureModeSuffix5
  :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Failure.codingFailureModeSuffix6;

GHC.IO.Encoding.Failure.codingFailureModeSuffix4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "//TRANSLIT"#;

GHC.IO.Encoding.Failure.codingFailureModeSuffix3
  :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Failure.codingFailureModeSuffix4;

GHC.IO.Encoding.Failure.codingFailureModeSuffix2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "//ROUNDTRIP"#;

GHC.IO.Encoding.Failure.codingFailureModeSuffix1
  :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Failure.codingFailureModeSuffix2;

GHC.IO.Encoding.Failure.codingFailureModeSuffix
  :: GHC.IO.Encoding.Failure.CodingFailureMode -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s8rVV]
        case ds_s8rVV of {
          GHC.IO.Encoding.Failure.ErrorOnCodingFailure -> [] [];
          GHC.IO.Encoding.Failure.IgnoreCodingFailure ->
              GHC.IO.Encoding.Failure.codingFailureModeSuffix5;
          GHC.IO.Encoding.Failure.TransliterateCodingFailure ->
              GHC.IO.Encoding.Failure.codingFailureModeSuffix3;
          GHC.IO.Encoding.Failure.RoundtripFailure ->
              GHC.IO.Encoding.Failure.codingFailureModeSuffix1;
        };

GHC.IO.Encoding.Failure.recoverDecode7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "recoverDecode"#;

GHC.IO.Encoding.Failure.recoverDecode6 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.Failure.recoverDecode7;

GHC.IO.Encoding.Failure.recoverDecode5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "invalid byte sequence"#;

GHC.IO.Encoding.Failure.recoverDecode4 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.Failure.recoverDecode5;

GHC.IO.Encoding.Failure.recoverDecode3
  :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.InvalidArgument
                                             GHC.IO.Encoding.Failure.recoverDecode6
                                             GHC.IO.Encoding.Failure.recoverDecode4
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Encoding.Failure.recoverDecode2
  :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Encoding.Failure.recoverDecode3;

GHC.IO.Encoding.Failure.recoverEncode7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "recoverEncode"#;

GHC.IO.Encoding.Failure.recoverEncode6 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.Failure.recoverEncode7;

GHC.IO.Encoding.Failure.recoverEncode5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "invalid character"#;

GHC.IO.Encoding.Failure.recoverEncode4 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.Failure.recoverEncode5;

GHC.IO.Encoding.Failure.recoverEncode3
  :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.InvalidArgument
                                             GHC.IO.Encoding.Failure.recoverEncode6
                                             GHC.IO.Encoding.Failure.recoverEncode4
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Encoding.Failure.recoverEncode2
  :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Encoding.Failure.recoverEncode3;

GHC.IO.Encoding.Failure.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.Encoding.Failure.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Failure.$trModule4];

GHC.IO.Encoding.Failure.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Encoding.Failure"#;

GHC.IO.Encoding.Failure.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Failure.$trModule2];

GHC.IO.Encoding.Failure.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Encoding.Failure.$trModule3
                                     GHC.IO.Encoding.Failure.$trModule1];

GHC.IO.Encoding.Failure.$tcCodingFailureMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "CodingFailureMode"#;

GHC.IO.Encoding.Failure.$tcCodingFailureMode1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Failure.$tcCodingFailureMode2];

GHC.IO.Encoding.Failure.$tcCodingFailureMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [14925461047987757098##
                                    8591318658186141108##
                                    GHC.IO.Encoding.Failure.$trModule
                                    GHC.IO.Encoding.Failure.$tcCodingFailureMode1
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Encoding.Failure.$tcCodingFailureMode
                                              GHC.Types.[]];

GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ErrorOnCodingFailure"#;

GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure2
  :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure3];

GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12360460340946478580##
                                    790065067637529655##
                                    GHC.IO.Encoding.Failure.$trModule
                                    GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure2
                                    0#
                                    GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure1];

GHC.IO.Encoding.Failure.$tc'IgnoreCodingFailure2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'IgnoreCodingFailure"#;

GHC.IO.Encoding.Failure.$tc'IgnoreCodingFailure1
  :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Failure.$tc'IgnoreCodingFailure2];

GHC.IO.Encoding.Failure.$tc'IgnoreCodingFailure :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1247277247292781024##
                                    4030462313976053703##
                                    GHC.IO.Encoding.Failure.$trModule
                                    GHC.IO.Encoding.Failure.$tc'IgnoreCodingFailure1
                                    0#
                                    GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure1];

GHC.IO.Encoding.Failure.$tc'TransliterateCodingFailure2
  :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'TransliterateCodingFailure"#;

GHC.IO.Encoding.Failure.$tc'TransliterateCodingFailure1
  :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Failure.$tc'TransliterateCodingFailure2];

GHC.IO.Encoding.Failure.$tc'TransliterateCodingFailure
  :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2231629224643919862##
                                    7270908418490455598##
                                    GHC.IO.Encoding.Failure.$trModule
                                    GHC.IO.Encoding.Failure.$tc'TransliterateCodingFailure1
                                    0#
                                    GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure1];

GHC.IO.Encoding.Failure.$tc'RoundtripFailure2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'RoundtripFailure"#;

GHC.IO.Encoding.Failure.$tc'RoundtripFailure1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Failure.$tc'RoundtripFailure2];

GHC.IO.Encoding.Failure.$tc'RoundtripFailure :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12324562344665179767##
                                    401887646038237864##
                                    GHC.IO.Encoding.Failure.$trModule
                                    GHC.IO.Encoding.Failure.$tc'RoundtripFailure1
                                    0#
                                    GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure1];

GHC.IO.Encoding.Failure.recoverDecode1
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Buffer.Buffer GHC.Word.Word8,
            GHC.IO.Buffer.Buffer GHC.Types.Char) #)
[GblId,
 Arity=4,
 Str=<S,1*U><S,1*U(U,U,U,U,U,U)><S,1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [cfm_s8rVX input_s8rVY output_s8rVZ void_0E]
        case input_s8rVY of {
          GHC.IO.Buffer.Buffer dt_s8rW2
                               dt1_s8rW3
                               ds_s8rW4 [Occ=Once*]
                               dt2_s8rW5 [Occ=Once*]
                               dt3_s8rW6
                               dt4_s8rW7 [Occ=Once*] ->
              case output_s8rVZ of wild1_s8rW8 {
                GHC.IO.Buffer.Buffer dt5_s8rW9
                                     dt6_s8rWa
                                     ds1_s8rWb [Occ=Once*]
                                     dt7_s8rWc [Occ=Once*]
                                     dt8_s8rWd [Occ=Once*]
                                     dt9_s8rWe ->
                    case cfm_s8rVX of {
                      GHC.IO.Encoding.Failure.ErrorOnCodingFailure ->
                          raiseIO# [GHC.IO.Encoding.Failure.recoverDecode2 GHC.Prim.void#];
                      GHC.IO.Encoding.Failure.IgnoreCodingFailure ->
                          case +# [dt3_s8rW6 1#] of sat_s8rWg {
                            __DEFAULT ->
                                let {
                                  sat_s8rWh [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                  [LclId] =
                                      CCCS GHC.IO.Buffer.Buffer! [dt_s8rW2
                                                                  dt1_s8rW3
                                                                  ds_s8rW4
                                                                  dt2_s8rW5
                                                                  sat_s8rWg
                                                                  dt4_s8rW7]; } in
                                let {
                                  sat_s8rWi [Occ=Once]
                                    :: (GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char)
                                  [LclId] =
                                      CCCS (,)! [sat_s8rWh wild1_s8rW8];
                                } in  Unit# [sat_s8rWi];
                          };
                      GHC.IO.Encoding.Failure.TransliterateCodingFailure ->
                          case
                              writeWideCharOffAddr# [dt5_s8rW9
                                                     dt9_s8rWe
                                                     '\65533'#
                                                     GHC.Prim.void#]
                          of
                          s2_s8rWj
                          { (##) ->
                                case touch# [dt6_s8rWa GHC.Prim.void#] of s'_s8rWk {
                                  (##) ->
                                      case +# [dt9_s8rWe 1#] of sat_s8rWn {
                                        __DEFAULT ->
                                            let {
                                              sat_s8rWo [Occ=Once]
                                                :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                              [LclId] =
                                                  CCCS GHC.IO.Buffer.Buffer! [dt5_s8rW9
                                                                              dt6_s8rWa
                                                                              ds1_s8rWb
                                                                              dt7_s8rWc
                                                                              dt8_s8rWd
                                                                              sat_s8rWn];
                                            } in 
                                              case +# [dt3_s8rW6 1#] of sat_s8rWl {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s8rWm [Occ=Once]
                                                        :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                                      [LclId] =
                                                          CCCS GHC.IO.Buffer.Buffer! [dt_s8rW2
                                                                                      dt1_s8rW3
                                                                                      ds_s8rW4
                                                                                      dt2_s8rW5
                                                                                      sat_s8rWl
                                                                                      dt4_s8rW7]; } in
                                                    let {
                                                      sat_s8rWp [Occ=Once]
                                                        :: (GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                                            GHC.IO.Buffer.Buffer GHC.Types.Char)
                                                      [LclId] =
                                                          CCCS (,)! [sat_s8rWm sat_s8rWo];
                                                    } in  Unit# [sat_s8rWp];
                                              };
                                      };
                                };
                          };
                      GHC.IO.Encoding.Failure.RoundtripFailure ->
                          case plusAddr# [dt_s8rW2 dt3_s8rW6] of sat_s8rWq {
                            __DEFAULT ->
                                case readWord8OffAddr# [sat_s8rWq 0# GHC.Prim.void#] of {
                                  Unit# ipv1_s8rWt ->
                                      case touch# [dt1_s8rW3 GHC.Prim.void#] of s'_s8rWu {
                                        (##) ->
                                            case ltWord# [ipv1_s8rWt 128##] of {
                                              __DEFAULT ->
                                                  case word2Int# [ipv1_s8rWt] of sat_s8rWx {
                                                    __DEFAULT ->
                                                        case
                                                            +# [56320# sat_s8rWx]
                                                        of
                                                        i#_s8rWw [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  int2Word# [i#_s8rWw]
                                                              of
                                                              sat_s8rWy
                                                              { __DEFAULT ->
                                                                    case
                                                                        leWord# [sat_s8rWy
                                                                                 1114111##]
                                                                    of
                                                                    { __DEFAULT ->
                                                                          GHC.Char.$wlvl i#_s8rWw;
                                                                      1# ->
                                                                          case
                                                                              chr# [i#_s8rWw]
                                                                          of
                                                                          sat_s8rWB
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    writeWideCharOffAddr# [dt5_s8rW9
                                                                                                           dt9_s8rWe
                                                                                                           sat_s8rWB
                                                                                                           GHC.Prim.void#]
                                                                                of
                                                                                s2_s8rWC
                                                                                { (##) ->
                                                                                      case
                                                                                          touch# [dt6_s8rWa
                                                                                                  GHC.Prim.void#]
                                                                                      of
                                                                                      s'1_s8rWD
                                                                                      { (##) ->
                                                                                            case
                                                                                                +# [dt9_s8rWe
                                                                                                    1#]
                                                                                            of
                                                                                            sat_s8rWG
                                                                                            { __DEFAULT ->
                                                                                                  let {
                                                                                                    sat_s8rWH [Occ=Once]
                                                                                                      :: GHC.IO.Buffer.Buffer
                                                                                                           GHC.Types.Char
                                                                                                    [LclId] =
                                                                                                        CCCS GHC.IO.Buffer.Buffer! [dt5_s8rW9
                                                                                                                                    dt6_s8rWa
                                                                                                                                    ds1_s8rWb
                                                                                                                                    dt7_s8rWc
                                                                                                                                    dt8_s8rWd
                                                                                                                                    sat_s8rWG];
                                                                                                  } in 
                                                                                                    case
                                                                                                        +# [dt3_s8rW6
                                                                                                            1#]
                                                                                                    of
                                                                                                    sat_s8rWE
                                                                                                    { __DEFAULT ->
                                                                                                          let {
                                                                                                            sat_s8rWF [Occ=Once]
                                                                                                              :: GHC.IO.Buffer.Buffer
                                                                                                                   GHC.Word.Word8
                                                                                                            [LclId] =
                                                                                                                CCCS GHC.IO.Buffer.Buffer! [dt_s8rW2
                                                                                                                                            dt1_s8rW3
                                                                                                                                            ds_s8rW4
                                                                                                                                            dt2_s8rW5
                                                                                                                                            sat_s8rWE
                                                                                                                                            dt4_s8rW7]; } in
                                                                                                          let {
                                                                                                            sat_s8rWI [Occ=Once]
                                                                                                              :: (GHC.IO.Buffer.Buffer
                                                                                                                    GHC.Word.Word8,
                                                                                                                  GHC.IO.Buffer.Buffer
                                                                                                                    GHC.Types.Char)
                                                                                                            [LclId] =
                                                                                                                CCCS (,)! [sat_s8rWF
                                                                                                                           sat_s8rWH];
                                                                                                          } in 
                                                                                                            Unit# [sat_s8rWI];
                                                                                                    };
                                                                                            };
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                              1# ->
                                                  case
                                                      word2Int# [ipv1_s8rWt]
                                                  of
                                                  i#_s8rWJ [Dmd=<S,U>]
                                                  { __DEFAULT ->
                                                        case int2Word# [i#_s8rWJ] of sat_s8rWK {
                                                          __DEFAULT ->
                                                              case
                                                                  leWord# [sat_s8rWK 1114111##]
                                                              of
                                                              { __DEFAULT ->
                                                                    GHC.Char.$wlvl i#_s8rWJ;
                                                                1# ->
                                                                    case
                                                                        chr# [i#_s8rWJ]
                                                                    of
                                                                    sat_s8rWN
                                                                    { __DEFAULT ->
                                                                          case
                                                                              writeWideCharOffAddr# [dt5_s8rW9
                                                                                                     dt9_s8rWe
                                                                                                     sat_s8rWN
                                                                                                     GHC.Prim.void#]
                                                                          of
                                                                          s2_s8rWO
                                                                          { (##) ->
                                                                                case
                                                                                    touch# [dt6_s8rWa
                                                                                            GHC.Prim.void#]
                                                                                of
                                                                                s'1_s8rWP
                                                                                { (##) ->
                                                                                      case
                                                                                          +# [dt9_s8rWe
                                                                                              1#]
                                                                                      of
                                                                                      sat_s8rWS
                                                                                      { __DEFAULT ->
                                                                                            let {
                                                                                              sat_s8rWT [Occ=Once]
                                                                                                :: GHC.IO.Buffer.Buffer
                                                                                                     GHC.Types.Char
                                                                                              [LclId] =
                                                                                                  CCCS GHC.IO.Buffer.Buffer! [dt5_s8rW9
                                                                                                                              dt6_s8rWa
                                                                                                                              ds1_s8rWb
                                                                                                                              dt7_s8rWc
                                                                                                                              dt8_s8rWd
                                                                                                                              sat_s8rWS];
                                                                                            } in 
                                                                                              case
                                                                                                  +# [dt3_s8rW6
                                                                                                      1#]
                                                                                              of
                                                                                              sat_s8rWQ
                                                                                              { __DEFAULT ->
                                                                                                    let {
                                                                                                      sat_s8rWR [Occ=Once]
                                                                                                        :: GHC.IO.Buffer.Buffer
                                                                                                             GHC.Word.Word8
                                                                                                      [LclId] =
                                                                                                          CCCS GHC.IO.Buffer.Buffer! [dt_s8rW2
                                                                                                                                      dt1_s8rW3
                                                                                                                                      ds_s8rW4
                                                                                                                                      dt2_s8rW5
                                                                                                                                      sat_s8rWQ
                                                                                                                                      dt4_s8rW7]; } in
                                                                                                    let {
                                                                                                      sat_s8rWU [Occ=Once]
                                                                                                        :: (GHC.IO.Buffer.Buffer
                                                                                                              GHC.Word.Word8,
                                                                                                            GHC.IO.Buffer.Buffer
                                                                                                              GHC.Types.Char)
                                                                                                      [LclId] =
                                                                                                          CCCS (,)! [sat_s8rWR
                                                                                                                     sat_s8rWT];
                                                                                                    } in 
                                                                                                      Unit# [sat_s8rWU];
                                                                                              };
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Encoding.Failure.recoverDecode
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.Types.IO
          (GHC.IO.Buffer.Buffer GHC.Word.Word8,
           GHC.IO.Buffer.Buffer GHC.Types.Char)
[GblId,
 Arity=4,
 Str=<S,1*U><S,1*U(U,U,U,U,U,U)><S,1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        GHC.IO.Encoding.Failure.recoverDecode1
            eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Encoding.Failure.recoverEncode1
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Buffer.Buffer GHC.Types.Char,
            GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=4,
 Str=<S,1*U><S(SLLLSL),1*U(U,U,U,U,U,U)><S,1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [cfm_s8rWV input_s8rWW output_s8rWX void_0E]
        case input_s8rWW of wild_s8rWZ {
          GHC.IO.Buffer.Buffer dt_s8rX0
                               dt1_s8rX1
                               ds_s8rX2 [Occ=Once*]
                               dt2_s8rX3 [Occ=Once*]
                               dt3_s8rX4
                               dt4_s8rX5 [Occ=Once*] ->
              case output_s8rWX of wild1_s8rX6 {
                GHC.IO.Buffer.Buffer dt5_s8rX7
                                     dt6_s8rX8
                                     ds1_s8rX9 [Occ=Once]
                                     dt7_s8rXa [Occ=Once]
                                     dt8_s8rXb [Occ=Once]
                                     dt9_s8rXc ->
                    case readWideCharOffAddr# [dt_s8rX0 dt3_s8rX4 GHC.Prim.void#] of {
                      Unit# ipv1_s8rXf [Occ=Once*] ->
                          case touch# [dt1_s8rX1 GHC.Prim.void#] of s'_s8rXg {
                            (##) ->
                                case cfm_s8rWV of {
                                  GHC.IO.Encoding.Failure.ErrorOnCodingFailure ->
                                      raiseIO# [GHC.IO.Encoding.Failure.recoverEncode2
                                                GHC.Prim.void#];
                                  GHC.IO.Encoding.Failure.IgnoreCodingFailure ->
                                      case +# [dt3_s8rX4 1#] of sat_s8rXi {
                                        __DEFAULT ->
                                            let {
                                              sat_s8rXj [Occ=Once]
                                                :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                              [LclId] =
                                                  CCCS GHC.IO.Buffer.Buffer! [dt_s8rX0
                                                                              dt1_s8rX1
                                                                              ds_s8rX2
                                                                              dt2_s8rX3
                                                                              sat_s8rXi
                                                                              dt4_s8rX5]; } in
                                            let {
                                              sat_s8rXk [Occ=Once]
                                                :: (GHC.IO.Buffer.Buffer GHC.Types.Char,
                                                    GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                              [LclId] =
                                                  CCCS (,)! [sat_s8rXj wild1_s8rX6];
                                            } in  Unit# [sat_s8rXk];
                                      };
                                  GHC.IO.Encoding.Failure.TransliterateCodingFailure ->
                                      case ipv1_s8rXf of {
                                        __DEFAULT ->
                                            case
                                                writeWideCharOffAddr# [dt_s8rX0
                                                                       dt3_s8rX4
                                                                       '?'#
                                                                       GHC.Prim.void#]
                                            of
                                            s2_s8rXm
                                            { (##) ->
                                                  case
                                                      touch# [dt1_s8rX1 GHC.Prim.void#]
                                                  of
                                                  s'1_s8rXn
                                                  { (##) ->
                                                        let {
                                                          sat_s8rXo [Occ=Once]
                                                            :: (GHC.IO.Buffer.Buffer GHC.Types.Char,
                                                                GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                                          [LclId] =
                                                              CCCS (,)! [wild_s8rWZ wild1_s8rX6];
                                                        } in  Unit# [sat_s8rXo];
                                                  };
                                            };
                                        '?'# ->
                                            case +# [dt3_s8rX4 1#] of sat_s8rXp {
                                              __DEFAULT ->
                                                  let {
                                                    sat_s8rXq [Occ=Once]
                                                      :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                                    [LclId] =
                                                        CCCS GHC.IO.Buffer.Buffer! [dt_s8rX0
                                                                                    dt1_s8rX1
                                                                                    ds_s8rX2
                                                                                    dt2_s8rX3
                                                                                    sat_s8rXp
                                                                                    dt4_s8rX5]; } in
                                                  let {
                                                    sat_s8rXr [Occ=Once]
                                                      :: (GHC.IO.Buffer.Buffer GHC.Types.Char,
                                                          GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                                    [LclId] =
                                                        CCCS (,)! [sat_s8rXq wild1_s8rX6];
                                                  } in  Unit# [sat_s8rXr];
                                            };
                                      };
                                  GHC.IO.Encoding.Failure.RoundtripFailure ->
                                      case ord# [ipv1_s8rXf] of x_s8rXs [Dmd=<S,U>] {
                                        __DEFAULT ->
                                            case <=# [56448# x_s8rXs] of {
                                              __DEFAULT ->
                                                  raiseIO# [GHC.IO.Encoding.Failure.recoverEncode2
                                                            GHC.Prim.void#];
                                              1# ->
                                                  case <# [x_s8rXs 56576#] of {
                                                    __DEFAULT ->
                                                        raiseIO# [GHC.IO.Encoding.Failure.recoverEncode2
                                                                  GHC.Prim.void#];
                                                    1# ->
                                                        case int2Word# [x_s8rXs] of sat_s8rXw {
                                                          __DEFAULT ->
                                                              case
                                                                  narrow8Word# [sat_s8rXw]
                                                              of
                                                              sat_s8rXx
                                                              { __DEFAULT ->
                                                                    case
                                                                        plusAddr# [dt5_s8rX7
                                                                                   dt9_s8rXc]
                                                                    of
                                                                    sat_s8rXv
                                                                    { __DEFAULT ->
                                                                          case
                                                                              writeWord8OffAddr# [sat_s8rXv
                                                                                                  0#
                                                                                                  sat_s8rXx
                                                                                                  GHC.Prim.void#]
                                                                          of
                                                                          s2_s8rXy
                                                                          { (##) ->
                                                                                case
                                                                                    touch# [dt6_s8rX8
                                                                                            GHC.Prim.void#]
                                                                                of
                                                                                s'1_s8rXz
                                                                                { (##) ->
                                                                                      case
                                                                                          +# [dt9_s8rXc
                                                                                              1#]
                                                                                      of
                                                                                      sat_s8rXC
                                                                                      { __DEFAULT ->
                                                                                            let {
                                                                                              sat_s8rXD [Occ=Once]
                                                                                                :: GHC.IO.Buffer.Buffer
                                                                                                     GHC.Word.Word8
                                                                                              [LclId] =
                                                                                                  CCCS GHC.IO.Buffer.Buffer! [dt5_s8rX7
                                                                                                                              dt6_s8rX8
                                                                                                                              ds1_s8rX9
                                                                                                                              dt7_s8rXa
                                                                                                                              dt8_s8rXb
                                                                                                                              sat_s8rXC];
                                                                                            } in 
                                                                                              case
                                                                                                  +# [dt3_s8rX4
                                                                                                      1#]
                                                                                              of
                                                                                              sat_s8rXA
                                                                                              { __DEFAULT ->
                                                                                                    let {
                                                                                                      sat_s8rXB [Occ=Once]
                                                                                                        :: GHC.IO.Buffer.Buffer
                                                                                                             GHC.Types.Char
                                                                                                      [LclId] =
                                                                                                          CCCS GHC.IO.Buffer.Buffer! [dt_s8rX0
                                                                                                                                      dt1_s8rX1
                                                                                                                                      ds_s8rX2
                                                                                                                                      dt2_s8rX3
                                                                                                                                      sat_s8rXA
                                                                                                                                      dt4_s8rX5]; } in
                                                                                                    let {
                                                                                                      sat_s8rXE [Occ=Once]
                                                                                                        :: (GHC.IO.Buffer.Buffer
                                                                                                              GHC.Types.Char,
                                                                                                            GHC.IO.Buffer.Buffer
                                                                                                              GHC.Word.Word8)
                                                                                                      [LclId] =
                                                                                                          CCCS (,)! [sat_s8rXB
                                                                                                                     sat_s8rXD];
                                                                                                    } in 
                                                                                                      Unit# [sat_s8rXE];
                                                                                              };
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Encoding.Failure.recoverEncode
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO
          (GHC.IO.Buffer.Buffer GHC.Types.Char,
           GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId,
 Arity=4,
 Str=<S,1*U><S(SLLLSL),1*U(U,U,U,U,U,U)><S,1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        GHC.IO.Encoding.Failure.recoverEncode1
            eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Encoding.Failure.isSurrogate [InlPrag=INLINE (sat-args=1)]
  :: GHC.Types.Char -> GHC.Types.Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [c_s8rXF]
        case c_s8rXF of {
          GHC.Types.C# c#_s8rXH [Occ=Once] ->
              case ord# [c#_s8rXH] of y_s8rXI [Dmd=<S,U>] {
                __DEFAULT ->
                    case <=# [55296# y_s8rXI] of {
                      __DEFAULT ->
                          case <=# [56320# y_s8rXI] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# ->
                                case <=# [y_s8rXI 57343#] of sat_s8rXL {
                                  __DEFAULT -> tagToEnum# [sat_s8rXL];
                                };
                          };
                      1# ->
                          case <=# [y_s8rXI 56319#] of {
                            __DEFAULT ->
                                case <=# [56320# y_s8rXI] of {
                                  __DEFAULT -> GHC.Types.False [];
                                  1# ->
                                      case <=# [y_s8rXI 57343#] of sat_s8rXO {
                                        __DEFAULT -> tagToEnum# [sat_s8rXO];
                                      };
                                };
                            1# -> GHC.Types.True [];
                          };
                    };
              };
        };

GHC.IO.Encoding.Failure.ErrorOnCodingFailure
  :: GHC.IO.Encoding.Failure.CodingFailureMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Failure.ErrorOnCodingFailure! [];

GHC.IO.Encoding.Failure.IgnoreCodingFailure
  :: GHC.IO.Encoding.Failure.CodingFailureMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Failure.IgnoreCodingFailure! [];

GHC.IO.Encoding.Failure.TransliterateCodingFailure
  :: GHC.IO.Encoding.Failure.CodingFailureMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Failure.TransliterateCodingFailure! [];

GHC.IO.Encoding.Failure.RoundtripFailure
  :: GHC.IO.Encoding.Failure.CodingFailureMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Failure.RoundtripFailure! [];


==================== Pre unarise: ====================
2018-03-16 16:03:35.719567592 UTC

GHC.IO.Encoding.Failure.$fShowCodingFailureMode8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ErrorOnCodingFailure"#;

GHC.IO.Encoding.Failure.$fShowCodingFailureMode7
  :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Failure.$fShowCodingFailureMode8;

GHC.IO.Encoding.Failure.$fShowCodingFailureMode6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IgnoreCodingFailure"#;

GHC.IO.Encoding.Failure.$fShowCodingFailureMode5
  :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Failure.$fShowCodingFailureMode6;

GHC.IO.Encoding.Failure.$fShowCodingFailureMode4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "TransliterateCodingFailure"#;

GHC.IO.Encoding.Failure.$fShowCodingFailureMode3
  :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Failure.$fShowCodingFailureMode4;

GHC.IO.Encoding.Failure.$fShowCodingFailureMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "RoundtripFailure"#;

GHC.IO.Encoding.Failure.$fShowCodingFailureMode1
  :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Failure.$fShowCodingFailureMode2;

GHC.IO.Encoding.Failure.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s8ss5 w1_s8ss6]
        case w_s8ss5 of {
          GHC.IO.Encoding.Failure.ErrorOnCodingFailure ->
              GHC.Base.++
                  GHC.IO.Encoding.Failure.$fShowCodingFailureMode7 w1_s8ss6;
          GHC.IO.Encoding.Failure.IgnoreCodingFailure ->
              GHC.Base.++
                  GHC.IO.Encoding.Failure.$fShowCodingFailureMode5 w1_s8ss6;
          GHC.IO.Encoding.Failure.TransliterateCodingFailure ->
              GHC.Base.++
                  GHC.IO.Encoding.Failure.$fShowCodingFailureMode3 w1_s8ss6;
          GHC.IO.Encoding.Failure.RoundtripFailure ->
              GHC.Base.++
                  GHC.IO.Encoding.Failure.$fShowCodingFailureMode1 w1_s8ss6;
        };

GHC.IO.Encoding.Failure.$fShowCodingFailureMode_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int
     -> GHC.IO.Encoding.Failure.CodingFailureMode -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s8ss8 w1_s8ss9 w2_s8ssa]
        GHC.IO.Encoding.Failure.$w$cshowsPrec w1_s8ss9 w2_s8ssa;

GHC.IO.Encoding.Failure.$fShowCodingFailureMode_$cshow
  :: GHC.IO.Encoding.Failure.CodingFailureMode -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s8ssb]
        case x_s8ssb of {
          GHC.IO.Encoding.Failure.ErrorOnCodingFailure ->
              GHC.IO.Encoding.Failure.$fShowCodingFailureMode7;
          GHC.IO.Encoding.Failure.IgnoreCodingFailure ->
              GHC.IO.Encoding.Failure.$fShowCodingFailureMode5;
          GHC.IO.Encoding.Failure.TransliterateCodingFailure ->
              GHC.IO.Encoding.Failure.$fShowCodingFailureMode3;
          GHC.IO.Encoding.Failure.RoundtripFailure ->
              GHC.IO.Encoding.Failure.$fShowCodingFailureMode1;
        };

GHC.IO.Encoding.Failure.$fShowCodingFailureMode_$cshowList
  :: [GHC.IO.Encoding.Failure.CodingFailureMode] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s8ssd s_s8sse]
        GHC.Show.showList__
            GHC.IO.Encoding.Failure.$w$cshowsPrec ls_s8ssd s_s8sse;

GHC.IO.Encoding.Failure.$fShowCodingFailureMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Encoding.Failure.CodingFailureMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Encoding.Failure.$fShowCodingFailureMode_$cshowsPrec
                                    GHC.IO.Encoding.Failure.$fShowCodingFailureMode_$cshow
                                    GHC.IO.Encoding.Failure.$fShowCodingFailureMode_$cshowList];

GHC.IO.Encoding.Failure.codingFailureModeSuffix6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "//IGNORE"#;

GHC.IO.Encoding.Failure.codingFailureModeSuffix5
  :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Failure.codingFailureModeSuffix6;

GHC.IO.Encoding.Failure.codingFailureModeSuffix4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "//TRANSLIT"#;

GHC.IO.Encoding.Failure.codingFailureModeSuffix3
  :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Failure.codingFailureModeSuffix4;

GHC.IO.Encoding.Failure.codingFailureModeSuffix2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "//ROUNDTRIP"#;

GHC.IO.Encoding.Failure.codingFailureModeSuffix1
  :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Failure.codingFailureModeSuffix2;

GHC.IO.Encoding.Failure.codingFailureModeSuffix
  :: GHC.IO.Encoding.Failure.CodingFailureMode -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s8ssf]
        case ds_s8ssf of {
          GHC.IO.Encoding.Failure.ErrorOnCodingFailure -> [] [];
          GHC.IO.Encoding.Failure.IgnoreCodingFailure ->
              GHC.IO.Encoding.Failure.codingFailureModeSuffix5;
          GHC.IO.Encoding.Failure.TransliterateCodingFailure ->
              GHC.IO.Encoding.Failure.codingFailureModeSuffix3;
          GHC.IO.Encoding.Failure.RoundtripFailure ->
              GHC.IO.Encoding.Failure.codingFailureModeSuffix1;
        };

GHC.IO.Encoding.Failure.recoverDecode7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "recoverDecode"#;

GHC.IO.Encoding.Failure.recoverDecode6 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.Failure.recoverDecode7;

GHC.IO.Encoding.Failure.recoverDecode5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "invalid byte sequence"#;

GHC.IO.Encoding.Failure.recoverDecode4 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.Failure.recoverDecode5;

GHC.IO.Encoding.Failure.recoverDecode3
  :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.InvalidArgument
                                             GHC.IO.Encoding.Failure.recoverDecode6
                                             GHC.IO.Encoding.Failure.recoverDecode4
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Encoding.Failure.recoverDecode2
  :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Encoding.Failure.recoverDecode3;

GHC.IO.Encoding.Failure.recoverEncode7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "recoverEncode"#;

GHC.IO.Encoding.Failure.recoverEncode6 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.Failure.recoverEncode7;

GHC.IO.Encoding.Failure.recoverEncode5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "invalid character"#;

GHC.IO.Encoding.Failure.recoverEncode4 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.Failure.recoverEncode5;

GHC.IO.Encoding.Failure.recoverEncode3
  :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.InvalidArgument
                                             GHC.IO.Encoding.Failure.recoverEncode6
                                             GHC.IO.Encoding.Failure.recoverEncode4
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Encoding.Failure.recoverEncode2
  :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Encoding.Failure.recoverEncode3;

GHC.IO.Encoding.Failure.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.Encoding.Failure.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Failure.$trModule4];

GHC.IO.Encoding.Failure.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Encoding.Failure"#;

GHC.IO.Encoding.Failure.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Failure.$trModule2];

GHC.IO.Encoding.Failure.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Encoding.Failure.$trModule3
                                     GHC.IO.Encoding.Failure.$trModule1];

GHC.IO.Encoding.Failure.$tcCodingFailureMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "CodingFailureMode"#;

GHC.IO.Encoding.Failure.$tcCodingFailureMode1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Failure.$tcCodingFailureMode2];

GHC.IO.Encoding.Failure.$tcCodingFailureMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [14925461047987757098##
                                    8591318658186141108##
                                    GHC.IO.Encoding.Failure.$trModule
                                    GHC.IO.Encoding.Failure.$tcCodingFailureMode1
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Encoding.Failure.$tcCodingFailureMode
                                              GHC.Types.[]];

GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ErrorOnCodingFailure"#;

GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure2
  :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure3];

GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12360460340946478580##
                                    790065067637529655##
                                    GHC.IO.Encoding.Failure.$trModule
                                    GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure2
                                    0#
                                    GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure1];

GHC.IO.Encoding.Failure.$tc'IgnoreCodingFailure2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'IgnoreCodingFailure"#;

GHC.IO.Encoding.Failure.$tc'IgnoreCodingFailure1
  :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Failure.$tc'IgnoreCodingFailure2];

GHC.IO.Encoding.Failure.$tc'IgnoreCodingFailure :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1247277247292781024##
                                    4030462313976053703##
                                    GHC.IO.Encoding.Failure.$trModule
                                    GHC.IO.Encoding.Failure.$tc'IgnoreCodingFailure1
                                    0#
                                    GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure1];

GHC.IO.Encoding.Failure.$tc'TransliterateCodingFailure2
  :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'TransliterateCodingFailure"#;

GHC.IO.Encoding.Failure.$tc'TransliterateCodingFailure1
  :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Failure.$tc'TransliterateCodingFailure2];

GHC.IO.Encoding.Failure.$tc'TransliterateCodingFailure
  :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2231629224643919862##
                                    7270908418490455598##
                                    GHC.IO.Encoding.Failure.$trModule
                                    GHC.IO.Encoding.Failure.$tc'TransliterateCodingFailure1
                                    0#
                                    GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure1];

GHC.IO.Encoding.Failure.$tc'RoundtripFailure2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'RoundtripFailure"#;

GHC.IO.Encoding.Failure.$tc'RoundtripFailure1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Failure.$tc'RoundtripFailure2];

GHC.IO.Encoding.Failure.$tc'RoundtripFailure :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12324562344665179767##
                                    401887646038237864##
                                    GHC.IO.Encoding.Failure.$trModule
                                    GHC.IO.Encoding.Failure.$tc'RoundtripFailure1
                                    0#
                                    GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure1];

GHC.IO.Encoding.Failure.recoverDecode1
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Buffer.Buffer GHC.Word.Word8,
            GHC.IO.Buffer.Buffer GHC.Types.Char) #)
[GblId,
 Arity=4,
 Str=<S,1*U><S,1*U(U,U,U,U,U,U)><S,1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [cfm_s8ssh input_s8ssi output_s8ssj eta_s8ssk]
        case input_s8ssi of {
          GHC.IO.Buffer.Buffer dt_s8ssm
                               dt1_s8ssn
                               ds_s8sso [Occ=Once*]
                               dt2_s8ssp [Occ=Once*]
                               dt3_s8ssq
                               dt4_s8ssr [Occ=Once*] ->
              case output_s8ssj of wild1_s8sss {
                GHC.IO.Buffer.Buffer dt5_s8sst
                                     dt6_s8ssu
                                     ds1_s8ssv [Occ=Once*]
                                     dt7_s8ssw [Occ=Once*]
                                     dt8_s8ssx [Occ=Once*]
                                     dt9_s8ssy ->
                    case cfm_s8ssh of {
                      GHC.IO.Encoding.Failure.ErrorOnCodingFailure ->
                          raiseIO# [GHC.IO.Encoding.Failure.recoverDecode2 eta_s8ssk];
                      GHC.IO.Encoding.Failure.IgnoreCodingFailure ->
                          case +# [dt3_s8ssq 1#] of sat_s8ssA {
                            __DEFAULT ->
                                let {
                                  sat_s8ssB [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                  [LclId] =
                                      CCCS GHC.IO.Buffer.Buffer! [dt_s8ssm
                                                                  dt1_s8ssn
                                                                  ds_s8sso
                                                                  dt2_s8ssp
                                                                  sat_s8ssA
                                                                  dt4_s8ssr]; } in
                                let {
                                  sat_s8ssC [Occ=Once]
                                    :: (GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char)
                                  [LclId] =
                                      CCCS (,)! [sat_s8ssB wild1_s8sss];
                                } in  (#,#) [eta_s8ssk sat_s8ssC];
                          };
                      GHC.IO.Encoding.Failure.TransliterateCodingFailure ->
                          case
                              writeWideCharOffAddr# [dt5_s8sst dt9_s8ssy '\65533'# eta_s8ssk]
                          of
                          s2_s8ssD
                          { __DEFAULT ->
                                case touch# [dt6_s8ssu s2_s8ssD] of s'_s8ssE {
                                  __DEFAULT ->
                                      case +# [dt9_s8ssy 1#] of sat_s8ssH {
                                        __DEFAULT ->
                                            let {
                                              sat_s8ssI [Occ=Once]
                                                :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                              [LclId] =
                                                  CCCS GHC.IO.Buffer.Buffer! [dt5_s8sst
                                                                              dt6_s8ssu
                                                                              ds1_s8ssv
                                                                              dt7_s8ssw
                                                                              dt8_s8ssx
                                                                              sat_s8ssH];
                                            } in 
                                              case +# [dt3_s8ssq 1#] of sat_s8ssF {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s8ssG [Occ=Once]
                                                        :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                                      [LclId] =
                                                          CCCS GHC.IO.Buffer.Buffer! [dt_s8ssm
                                                                                      dt1_s8ssn
                                                                                      ds_s8sso
                                                                                      dt2_s8ssp
                                                                                      sat_s8ssF
                                                                                      dt4_s8ssr]; } in
                                                    let {
                                                      sat_s8ssJ [Occ=Once]
                                                        :: (GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                                            GHC.IO.Buffer.Buffer GHC.Types.Char)
                                                      [LclId] =
                                                          CCCS (,)! [sat_s8ssG sat_s8ssI];
                                                    } in  (#,#) [s'_s8ssE sat_s8ssJ];
                                              };
                                      };
                                };
                          };
                      GHC.IO.Encoding.Failure.RoundtripFailure ->
                          case plusAddr# [dt_s8ssm dt3_s8ssq] of sat_s8ssK {
                            __DEFAULT ->
                                case readWord8OffAddr# [sat_s8ssK 0# eta_s8ssk] of {
                                  (#,#) ipv_s8ssM [Occ=Once] ipv1_s8ssN ->
                                      case touch# [dt1_s8ssn ipv_s8ssM] of s'_s8ssO {
                                        __DEFAULT ->
                                            case ltWord# [ipv1_s8ssN 128##] of {
                                              __DEFAULT ->
                                                  case word2Int# [ipv1_s8ssN] of sat_s8ssR {
                                                    __DEFAULT ->
                                                        case
                                                            +# [56320# sat_s8ssR]
                                                        of
                                                        i#_s8ssQ [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  int2Word# [i#_s8ssQ]
                                                              of
                                                              sat_s8ssS
                                                              { __DEFAULT ->
                                                                    case
                                                                        leWord# [sat_s8ssS
                                                                                 1114111##]
                                                                    of
                                                                    { __DEFAULT ->
                                                                          GHC.Char.$wlvl i#_s8ssQ;
                                                                      1# ->
                                                                          case
                                                                              chr# [i#_s8ssQ]
                                                                          of
                                                                          sat_s8ssV
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    writeWideCharOffAddr# [dt5_s8sst
                                                                                                           dt9_s8ssy
                                                                                                           sat_s8ssV
                                                                                                           s'_s8ssO]
                                                                                of
                                                                                s2_s8ssW
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          touch# [dt6_s8ssu
                                                                                                  s2_s8ssW]
                                                                                      of
                                                                                      s'1_s8ssX
                                                                                      { __DEFAULT ->
                                                                                            case
                                                                                                +# [dt9_s8ssy
                                                                                                    1#]
                                                                                            of
                                                                                            sat_s8st0
                                                                                            { __DEFAULT ->
                                                                                                  let {
                                                                                                    sat_s8st1 [Occ=Once]
                                                                                                      :: GHC.IO.Buffer.Buffer
                                                                                                           GHC.Types.Char
                                                                                                    [LclId] =
                                                                                                        CCCS GHC.IO.Buffer.Buffer! [dt5_s8sst
                                                                                                                                    dt6_s8ssu
                                                                                                                                    ds1_s8ssv
                                                                                                                                    dt7_s8ssw
                                                                                                                                    dt8_s8ssx
                                                                                                                                    sat_s8st0];
                                                                                                  } in 
                                                                                                    case
                                                                                                        +# [dt3_s8ssq
                                                                                                            1#]
                                                                                                    of
                                                                                                    sat_s8ssY
                                                                                                    { __DEFAULT ->
                                                                                                          let {
                                                                                                            sat_s8ssZ [Occ=Once]
                                                                                                              :: GHC.IO.Buffer.Buffer
                                                                                                                   GHC.Word.Word8
                                                                                                            [LclId] =
                                                                                                                CCCS GHC.IO.Buffer.Buffer! [dt_s8ssm
                                                                                                                                            dt1_s8ssn
                                                                                                                                            ds_s8sso
                                                                                                                                            dt2_s8ssp
                                                                                                                                            sat_s8ssY
                                                                                                                                            dt4_s8ssr]; } in
                                                                                                          let {
                                                                                                            sat_s8st2 [Occ=Once]
                                                                                                              :: (GHC.IO.Buffer.Buffer
                                                                                                                    GHC.Word.Word8,
                                                                                                                  GHC.IO.Buffer.Buffer
                                                                                                                    GHC.Types.Char)
                                                                                                            [LclId] =
                                                                                                                CCCS (,)! [sat_s8ssZ
                                                                                                                           sat_s8st1];
                                                                                                          } in 
                                                                                                            (#,#) [s'1_s8ssX
                                                                                                                   sat_s8st2];
                                                                                                    };
                                                                                            };
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                              1# ->
                                                  case
                                                      word2Int# [ipv1_s8ssN]
                                                  of
                                                  i#_s8st3 [Dmd=<S,U>]
                                                  { __DEFAULT ->
                                                        case int2Word# [i#_s8st3] of sat_s8st4 {
                                                          __DEFAULT ->
                                                              case
                                                                  leWord# [sat_s8st4 1114111##]
                                                              of
                                                              { __DEFAULT ->
                                                                    GHC.Char.$wlvl i#_s8st3;
                                                                1# ->
                                                                    case
                                                                        chr# [i#_s8st3]
                                                                    of
                                                                    sat_s8st7
                                                                    { __DEFAULT ->
                                                                          case
                                                                              writeWideCharOffAddr# [dt5_s8sst
                                                                                                     dt9_s8ssy
                                                                                                     sat_s8st7
                                                                                                     s'_s8ssO]
                                                                          of
                                                                          s2_s8st8
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    touch# [dt6_s8ssu
                                                                                            s2_s8st8]
                                                                                of
                                                                                s'1_s8st9
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          +# [dt9_s8ssy
                                                                                              1#]
                                                                                      of
                                                                                      sat_s8stc
                                                                                      { __DEFAULT ->
                                                                                            let {
                                                                                              sat_s8std [Occ=Once]
                                                                                                :: GHC.IO.Buffer.Buffer
                                                                                                     GHC.Types.Char
                                                                                              [LclId] =
                                                                                                  CCCS GHC.IO.Buffer.Buffer! [dt5_s8sst
                                                                                                                              dt6_s8ssu
                                                                                                                              ds1_s8ssv
                                                                                                                              dt7_s8ssw
                                                                                                                              dt8_s8ssx
                                                                                                                              sat_s8stc];
                                                                                            } in 
                                                                                              case
                                                                                                  +# [dt3_s8ssq
                                                                                                      1#]
                                                                                              of
                                                                                              sat_s8sta
                                                                                              { __DEFAULT ->
                                                                                                    let {
                                                                                                      sat_s8stb [Occ=Once]
                                                                                                        :: GHC.IO.Buffer.Buffer
                                                                                                             GHC.Word.Word8
                                                                                                      [LclId] =
                                                                                                          CCCS GHC.IO.Buffer.Buffer! [dt_s8ssm
                                                                                                                                      dt1_s8ssn
                                                                                                                                      ds_s8sso
                                                                                                                                      dt2_s8ssp
                                                                                                                                      sat_s8sta
                                                                                                                                      dt4_s8ssr]; } in
                                                                                                    let {
                                                                                                      sat_s8ste [Occ=Once]
                                                                                                        :: (GHC.IO.Buffer.Buffer
                                                                                                              GHC.Word.Word8,
                                                                                                            GHC.IO.Buffer.Buffer
                                                                                                              GHC.Types.Char)
                                                                                                      [LclId] =
                                                                                                          CCCS (,)! [sat_s8stb
                                                                                                                     sat_s8std];
                                                                                                    } in 
                                                                                                      (#,#) [s'1_s8st9
                                                                                                             sat_s8ste];
                                                                                              };
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Encoding.Failure.recoverDecode
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.Types.IO
          (GHC.IO.Buffer.Buffer GHC.Word.Word8,
           GHC.IO.Buffer.Buffer GHC.Types.Char)
[GblId,
 Arity=4,
 Str=<S,1*U><S,1*U(U,U,U,U,U,U)><S,1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.Encoding.Failure.recoverDecode1 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.IO.Encoding.Failure.recoverEncode1
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Buffer.Buffer GHC.Types.Char,
            GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=4,
 Str=<S,1*U><S(SLLLSL),1*U(U,U,U,U,U,U)><S,1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [cfm_s8stf input_s8stg output_s8sth eta_s8sti]
        case input_s8stg of wild_s8stj {
          GHC.IO.Buffer.Buffer dt_s8stk
                               dt1_s8stl
                               ds_s8stm [Occ=Once*]
                               dt2_s8stn [Occ=Once*]
                               dt3_s8sto
                               dt4_s8stp [Occ=Once*] ->
              case output_s8sth of wild1_s8stq {
                GHC.IO.Buffer.Buffer dt5_s8str
                                     dt6_s8sts
                                     ds1_s8stt [Occ=Once]
                                     dt7_s8stu [Occ=Once]
                                     dt8_s8stv [Occ=Once]
                                     dt9_s8stw ->
                    case readWideCharOffAddr# [dt_s8stk dt3_s8sto eta_s8sti] of {
                      (#,#) ipv_s8sty [Occ=Once] ipv1_s8stz [Occ=Once*] ->
                          case touch# [dt1_s8stl ipv_s8sty] of s'_s8stA {
                            __DEFAULT ->
                                case cfm_s8stf of {
                                  GHC.IO.Encoding.Failure.ErrorOnCodingFailure ->
                                      raiseIO# [GHC.IO.Encoding.Failure.recoverEncode2 s'_s8stA];
                                  GHC.IO.Encoding.Failure.IgnoreCodingFailure ->
                                      case +# [dt3_s8sto 1#] of sat_s8stC {
                                        __DEFAULT ->
                                            let {
                                              sat_s8stD [Occ=Once]
                                                :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                              [LclId] =
                                                  CCCS GHC.IO.Buffer.Buffer! [dt_s8stk
                                                                              dt1_s8stl
                                                                              ds_s8stm
                                                                              dt2_s8stn
                                                                              sat_s8stC
                                                                              dt4_s8stp]; } in
                                            let {
                                              sat_s8stE [Occ=Once]
                                                :: (GHC.IO.Buffer.Buffer GHC.Types.Char,
                                                    GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                              [LclId] =
                                                  CCCS (,)! [sat_s8stD wild1_s8stq];
                                            } in  (#,#) [s'_s8stA sat_s8stE];
                                      };
                                  GHC.IO.Encoding.Failure.TransliterateCodingFailure ->
                                      case ipv1_s8stz of {
                                        __DEFAULT ->
                                            case
                                                writeWideCharOffAddr# [dt_s8stk
                                                                       dt3_s8sto
                                                                       '?'#
                                                                       s'_s8stA]
                                            of
                                            s2_s8stG
                                            { __DEFAULT ->
                                                  case touch# [dt1_s8stl s2_s8stG] of s'1_s8stH {
                                                    __DEFAULT ->
                                                        let {
                                                          sat_s8stI [Occ=Once]
                                                            :: (GHC.IO.Buffer.Buffer GHC.Types.Char,
                                                                GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                                          [LclId] =
                                                              CCCS (,)! [wild_s8stj wild1_s8stq];
                                                        } in  (#,#) [s'1_s8stH sat_s8stI];
                                                  };
                                            };
                                        '?'# ->
                                            case +# [dt3_s8sto 1#] of sat_s8stJ {
                                              __DEFAULT ->
                                                  let {
                                                    sat_s8stK [Occ=Once]
                                                      :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                                    [LclId] =
                                                        CCCS GHC.IO.Buffer.Buffer! [dt_s8stk
                                                                                    dt1_s8stl
                                                                                    ds_s8stm
                                                                                    dt2_s8stn
                                                                                    sat_s8stJ
                                                                                    dt4_s8stp]; } in
                                                  let {
                                                    sat_s8stL [Occ=Once]
                                                      :: (GHC.IO.Buffer.Buffer GHC.Types.Char,
                                                          GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                                    [LclId] =
                                                        CCCS (,)! [sat_s8stK wild1_s8stq];
                                                  } in  (#,#) [s'_s8stA sat_s8stL];
                                            };
                                      };
                                  GHC.IO.Encoding.Failure.RoundtripFailure ->
                                      case ord# [ipv1_s8stz] of x_s8stM [Dmd=<S,U>] {
                                        __DEFAULT ->
                                            case <=# [56448# x_s8stM] of {
                                              __DEFAULT ->
                                                  raiseIO# [GHC.IO.Encoding.Failure.recoverEncode2
                                                            s'_s8stA];
                                              1# ->
                                                  case <# [x_s8stM 56576#] of {
                                                    __DEFAULT ->
                                                        raiseIO# [GHC.IO.Encoding.Failure.recoverEncode2
                                                                  s'_s8stA];
                                                    1# ->
                                                        case int2Word# [x_s8stM] of sat_s8stQ {
                                                          __DEFAULT ->
                                                              case
                                                                  narrow8Word# [sat_s8stQ]
                                                              of
                                                              sat_s8stR
                                                              { __DEFAULT ->
                                                                    case
                                                                        plusAddr# [dt5_s8str
                                                                                   dt9_s8stw]
                                                                    of
                                                                    sat_s8stP
                                                                    { __DEFAULT ->
                                                                          case
                                                                              writeWord8OffAddr# [sat_s8stP
                                                                                                  0#
                                                                                                  sat_s8stR
                                                                                                  s'_s8stA]
                                                                          of
                                                                          s2_s8stS
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    touch# [dt6_s8sts
                                                                                            s2_s8stS]
                                                                                of
                                                                                s'1_s8stT
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          +# [dt9_s8stw
                                                                                              1#]
                                                                                      of
                                                                                      sat_s8stW
                                                                                      { __DEFAULT ->
                                                                                            let {
                                                                                              sat_s8stX [Occ=Once]
                                                                                                :: GHC.IO.Buffer.Buffer
                                                                                                     GHC.Word.Word8
                                                                                              [LclId] =
                                                                                                  CCCS GHC.IO.Buffer.Buffer! [dt5_s8str
                                                                                                                              dt6_s8sts
                                                                                                                              ds1_s8stt
                                                                                                                              dt7_s8stu
                                                                                                                              dt8_s8stv
                                                                                                                              sat_s8stW];
                                                                                            } in 
                                                                                              case
                                                                                                  +# [dt3_s8sto
                                                                                                      1#]
                                                                                              of
                                                                                              sat_s8stU
                                                                                              { __DEFAULT ->
                                                                                                    let {
                                                                                                      sat_s8stV [Occ=Once]
                                                                                                        :: GHC.IO.Buffer.Buffer
                                                                                                             GHC.Types.Char
                                                                                                      [LclId] =
                                                                                                          CCCS GHC.IO.Buffer.Buffer! [dt_s8stk
                                                                                                                                      dt1_s8stl
                                                                                                                                      ds_s8stm
                                                                                                                                      dt2_s8stn
                                                                                                                                      sat_s8stU
                                                                                                                                      dt4_s8stp]; } in
                                                                                                    let {
                                                                                                      sat_s8stY [Occ=Once]
                                                                                                        :: (GHC.IO.Buffer.Buffer
                                                                                                              GHC.Types.Char,
                                                                                                            GHC.IO.Buffer.Buffer
                                                                                                              GHC.Word.Word8)
                                                                                                      [LclId] =
                                                                                                          CCCS (,)! [sat_s8stV
                                                                                                                     sat_s8stX];
                                                                                                    } in 
                                                                                                      (#,#) [s'1_s8stT
                                                                                                             sat_s8stY];
                                                                                              };
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Encoding.Failure.recoverEncode
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO
          (GHC.IO.Buffer.Buffer GHC.Types.Char,
           GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId,
 Arity=4,
 Str=<S,1*U><S(SLLLSL),1*U(U,U,U,U,U,U)><S,1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.Encoding.Failure.recoverEncode1 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.IO.Encoding.Failure.isSurrogate [InlPrag=INLINE (sat-args=1)]
  :: GHC.Types.Char -> GHC.Types.Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [c_s8stZ]
        case c_s8stZ of {
          GHC.Types.C# c#_s8su1 [Occ=Once] ->
              case ord# [c#_s8su1] of y_s8su2 [Dmd=<S,U>] {
                __DEFAULT ->
                    case <=# [55296# y_s8su2] of {
                      __DEFAULT ->
                          case <=# [56320# y_s8su2] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# ->
                                case <=# [y_s8su2 57343#] of sat_s8su5 {
                                  __DEFAULT -> tagToEnum# [sat_s8su5];
                                };
                          };
                      1# ->
                          case <=# [y_s8su2 56319#] of {
                            __DEFAULT ->
                                case <=# [56320# y_s8su2] of {
                                  __DEFAULT -> GHC.Types.False [];
                                  1# ->
                                      case <=# [y_s8su2 57343#] of sat_s8su8 {
                                        __DEFAULT -> tagToEnum# [sat_s8su8];
                                      };
                                };
                            1# -> GHC.Types.True [];
                          };
                    };
              };
        };

GHC.IO.Encoding.Failure.ErrorOnCodingFailure
  :: GHC.IO.Encoding.Failure.CodingFailureMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Failure.ErrorOnCodingFailure! [];

GHC.IO.Encoding.Failure.IgnoreCodingFailure
  :: GHC.IO.Encoding.Failure.CodingFailureMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Failure.IgnoreCodingFailure! [];

GHC.IO.Encoding.Failure.TransliterateCodingFailure
  :: GHC.IO.Encoding.Failure.CodingFailureMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Failure.TransliterateCodingFailure! [];

GHC.IO.Encoding.Failure.RoundtripFailure
  :: GHC.IO.Encoding.Failure.CodingFailureMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Failure.RoundtripFailure! [];


==================== STG syntax: ====================
2018-03-16 16:03:35.731836197 UTC

GHC.IO.Encoding.Failure.$fShowCodingFailureMode8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ErrorOnCodingFailure"#;

GHC.IO.Encoding.Failure.$fShowCodingFailureMode7
  :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Failure.$fShowCodingFailureMode8;

GHC.IO.Encoding.Failure.$fShowCodingFailureMode6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IgnoreCodingFailure"#;

GHC.IO.Encoding.Failure.$fShowCodingFailureMode5
  :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Failure.$fShowCodingFailureMode6;

GHC.IO.Encoding.Failure.$fShowCodingFailureMode4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "TransliterateCodingFailure"#;

GHC.IO.Encoding.Failure.$fShowCodingFailureMode3
  :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Failure.$fShowCodingFailureMode4;

GHC.IO.Encoding.Failure.$fShowCodingFailureMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "RoundtripFailure"#;

GHC.IO.Encoding.Failure.$fShowCodingFailureMode1
  :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Failure.$fShowCodingFailureMode2;

GHC.IO.Encoding.Failure.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s8ss5 w1_s8ss6]
        case w_s8ss5 of {
          GHC.IO.Encoding.Failure.ErrorOnCodingFailure ->
              GHC.Base.++
                  GHC.IO.Encoding.Failure.$fShowCodingFailureMode7 w1_s8ss6;
          GHC.IO.Encoding.Failure.IgnoreCodingFailure ->
              GHC.Base.++
                  GHC.IO.Encoding.Failure.$fShowCodingFailureMode5 w1_s8ss6;
          GHC.IO.Encoding.Failure.TransliterateCodingFailure ->
              GHC.Base.++
                  GHC.IO.Encoding.Failure.$fShowCodingFailureMode3 w1_s8ss6;
          GHC.IO.Encoding.Failure.RoundtripFailure ->
              GHC.Base.++
                  GHC.IO.Encoding.Failure.$fShowCodingFailureMode1 w1_s8ss6;
        };

GHC.IO.Encoding.Failure.$fShowCodingFailureMode_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int
     -> GHC.IO.Encoding.Failure.CodingFailureMode -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s8ss8 w1_s8ss9 w2_s8ssa]
        GHC.IO.Encoding.Failure.$w$cshowsPrec w1_s8ss9 w2_s8ssa;

GHC.IO.Encoding.Failure.$fShowCodingFailureMode_$cshow
  :: GHC.IO.Encoding.Failure.CodingFailureMode -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s8ssb]
        case x_s8ssb of {
          GHC.IO.Encoding.Failure.ErrorOnCodingFailure ->
              GHC.IO.Encoding.Failure.$fShowCodingFailureMode7;
          GHC.IO.Encoding.Failure.IgnoreCodingFailure ->
              GHC.IO.Encoding.Failure.$fShowCodingFailureMode5;
          GHC.IO.Encoding.Failure.TransliterateCodingFailure ->
              GHC.IO.Encoding.Failure.$fShowCodingFailureMode3;
          GHC.IO.Encoding.Failure.RoundtripFailure ->
              GHC.IO.Encoding.Failure.$fShowCodingFailureMode1;
        };

GHC.IO.Encoding.Failure.$fShowCodingFailureMode_$cshowList
  :: [GHC.IO.Encoding.Failure.CodingFailureMode] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s8ssd s_s8sse]
        GHC.Show.showList__
            GHC.IO.Encoding.Failure.$w$cshowsPrec ls_s8ssd s_s8sse;

GHC.IO.Encoding.Failure.$fShowCodingFailureMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Encoding.Failure.CodingFailureMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Encoding.Failure.$fShowCodingFailureMode_$cshowsPrec
                                    GHC.IO.Encoding.Failure.$fShowCodingFailureMode_$cshow
                                    GHC.IO.Encoding.Failure.$fShowCodingFailureMode_$cshowList];

GHC.IO.Encoding.Failure.codingFailureModeSuffix6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "//IGNORE"#;

GHC.IO.Encoding.Failure.codingFailureModeSuffix5
  :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Failure.codingFailureModeSuffix6;

GHC.IO.Encoding.Failure.codingFailureModeSuffix4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "//TRANSLIT"#;

GHC.IO.Encoding.Failure.codingFailureModeSuffix3
  :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Failure.codingFailureModeSuffix4;

GHC.IO.Encoding.Failure.codingFailureModeSuffix2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "//ROUNDTRIP"#;

GHC.IO.Encoding.Failure.codingFailureModeSuffix1
  :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Failure.codingFailureModeSuffix2;

GHC.IO.Encoding.Failure.codingFailureModeSuffix
  :: GHC.IO.Encoding.Failure.CodingFailureMode -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s8ssf]
        case ds_s8ssf of {
          GHC.IO.Encoding.Failure.ErrorOnCodingFailure -> [] [];
          GHC.IO.Encoding.Failure.IgnoreCodingFailure ->
              GHC.IO.Encoding.Failure.codingFailureModeSuffix5;
          GHC.IO.Encoding.Failure.TransliterateCodingFailure ->
              GHC.IO.Encoding.Failure.codingFailureModeSuffix3;
          GHC.IO.Encoding.Failure.RoundtripFailure ->
              GHC.IO.Encoding.Failure.codingFailureModeSuffix1;
        };

GHC.IO.Encoding.Failure.recoverDecode7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "recoverDecode"#;

GHC.IO.Encoding.Failure.recoverDecode6 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.Failure.recoverDecode7;

GHC.IO.Encoding.Failure.recoverDecode5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "invalid byte sequence"#;

GHC.IO.Encoding.Failure.recoverDecode4 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.Failure.recoverDecode5;

GHC.IO.Encoding.Failure.recoverDecode3
  :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.InvalidArgument
                                             GHC.IO.Encoding.Failure.recoverDecode6
                                             GHC.IO.Encoding.Failure.recoverDecode4
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Encoding.Failure.recoverDecode2
  :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Encoding.Failure.recoverDecode3;

GHC.IO.Encoding.Failure.recoverEncode7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "recoverEncode"#;

GHC.IO.Encoding.Failure.recoverEncode6 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.Failure.recoverEncode7;

GHC.IO.Encoding.Failure.recoverEncode5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "invalid character"#;

GHC.IO.Encoding.Failure.recoverEncode4 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.Failure.recoverEncode5;

GHC.IO.Encoding.Failure.recoverEncode3
  :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.InvalidArgument
                                             GHC.IO.Encoding.Failure.recoverEncode6
                                             GHC.IO.Encoding.Failure.recoverEncode4
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Encoding.Failure.recoverEncode2
  :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Encoding.Failure.recoverEncode3;

GHC.IO.Encoding.Failure.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.Encoding.Failure.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Failure.$trModule4];

GHC.IO.Encoding.Failure.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Encoding.Failure"#;

GHC.IO.Encoding.Failure.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Failure.$trModule2];

GHC.IO.Encoding.Failure.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Encoding.Failure.$trModule3
                                     GHC.IO.Encoding.Failure.$trModule1];

GHC.IO.Encoding.Failure.$tcCodingFailureMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "CodingFailureMode"#;

GHC.IO.Encoding.Failure.$tcCodingFailureMode1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Failure.$tcCodingFailureMode2];

GHC.IO.Encoding.Failure.$tcCodingFailureMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [14925461047987757098##
                                    8591318658186141108##
                                    GHC.IO.Encoding.Failure.$trModule
                                    GHC.IO.Encoding.Failure.$tcCodingFailureMode1
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Encoding.Failure.$tcCodingFailureMode
                                              GHC.Types.[]];

GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ErrorOnCodingFailure"#;

GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure2
  :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure3];

GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12360460340946478580##
                                    790065067637529655##
                                    GHC.IO.Encoding.Failure.$trModule
                                    GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure2
                                    0#
                                    GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure1];

GHC.IO.Encoding.Failure.$tc'IgnoreCodingFailure2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'IgnoreCodingFailure"#;

GHC.IO.Encoding.Failure.$tc'IgnoreCodingFailure1
  :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Failure.$tc'IgnoreCodingFailure2];

GHC.IO.Encoding.Failure.$tc'IgnoreCodingFailure :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1247277247292781024##
                                    4030462313976053703##
                                    GHC.IO.Encoding.Failure.$trModule
                                    GHC.IO.Encoding.Failure.$tc'IgnoreCodingFailure1
                                    0#
                                    GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure1];

GHC.IO.Encoding.Failure.$tc'TransliterateCodingFailure2
  :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'TransliterateCodingFailure"#;

GHC.IO.Encoding.Failure.$tc'TransliterateCodingFailure1
  :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Failure.$tc'TransliterateCodingFailure2];

GHC.IO.Encoding.Failure.$tc'TransliterateCodingFailure
  :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2231629224643919862##
                                    7270908418490455598##
                                    GHC.IO.Encoding.Failure.$trModule
                                    GHC.IO.Encoding.Failure.$tc'TransliterateCodingFailure1
                                    0#
                                    GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure1];

GHC.IO.Encoding.Failure.$tc'RoundtripFailure2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'RoundtripFailure"#;

GHC.IO.Encoding.Failure.$tc'RoundtripFailure1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Failure.$tc'RoundtripFailure2];

GHC.IO.Encoding.Failure.$tc'RoundtripFailure :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12324562344665179767##
                                    401887646038237864##
                                    GHC.IO.Encoding.Failure.$trModule
                                    GHC.IO.Encoding.Failure.$tc'RoundtripFailure1
                                    0#
                                    GHC.IO.Encoding.Failure.$tc'ErrorOnCodingFailure1];

GHC.IO.Encoding.Failure.recoverDecode1
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Buffer.Buffer GHC.Word.Word8,
            GHC.IO.Buffer.Buffer GHC.Types.Char) #)
[GblId,
 Arity=4,
 Str=<S,1*U><S,1*U(U,U,U,U,U,U)><S,1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [cfm_s8ssh input_s8ssi output_s8ssj void_0E]
        case input_s8ssi of {
          GHC.IO.Buffer.Buffer dt_s8ssm
                               dt1_s8ssn
                               ds_s8sso [Occ=Once*]
                               dt2_s8ssp [Occ=Once*]
                               dt3_s8ssq
                               dt4_s8ssr [Occ=Once*] ->
              case output_s8ssj of wild1_s8sss {
                GHC.IO.Buffer.Buffer dt5_s8sst
                                     dt6_s8ssu
                                     ds1_s8ssv [Occ=Once*]
                                     dt7_s8ssw [Occ=Once*]
                                     dt8_s8ssx [Occ=Once*]
                                     dt9_s8ssy ->
                    case cfm_s8ssh of {
                      GHC.IO.Encoding.Failure.ErrorOnCodingFailure ->
                          raiseIO# [GHC.IO.Encoding.Failure.recoverDecode2 GHC.Prim.void#];
                      GHC.IO.Encoding.Failure.IgnoreCodingFailure ->
                          case +# [dt3_s8ssq 1#] of sat_s8ssA {
                            __DEFAULT ->
                                let {
                                  sat_s8ssB [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                  [LclId] =
                                      CCCS GHC.IO.Buffer.Buffer! [dt_s8ssm
                                                                  dt1_s8ssn
                                                                  ds_s8sso
                                                                  dt2_s8ssp
                                                                  sat_s8ssA
                                                                  dt4_s8ssr]; } in
                                let {
                                  sat_s8ssC [Occ=Once]
                                    :: (GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                        GHC.IO.Buffer.Buffer GHC.Types.Char)
                                  [LclId] =
                                      CCCS (,)! [sat_s8ssB wild1_s8sss];
                                } in  Unit# [sat_s8ssC];
                          };
                      GHC.IO.Encoding.Failure.TransliterateCodingFailure ->
                          case
                              writeWideCharOffAddr# [dt5_s8sst
                                                     dt9_s8ssy
                                                     '\65533'#
                                                     GHC.Prim.void#]
                          of
                          s2_s8ssD
                          { (##) ->
                                case touch# [dt6_s8ssu GHC.Prim.void#] of s'_s8ssE {
                                  (##) ->
                                      case +# [dt9_s8ssy 1#] of sat_s8ssH {
                                        __DEFAULT ->
                                            let {
                                              sat_s8ssI [Occ=Once]
                                                :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                              [LclId] =
                                                  CCCS GHC.IO.Buffer.Buffer! [dt5_s8sst
                                                                              dt6_s8ssu
                                                                              ds1_s8ssv
                                                                              dt7_s8ssw
                                                                              dt8_s8ssx
                                                                              sat_s8ssH];
                                            } in 
                                              case +# [dt3_s8ssq 1#] of sat_s8ssF {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s8ssG [Occ=Once]
                                                        :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                                      [LclId] =
                                                          CCCS GHC.IO.Buffer.Buffer! [dt_s8ssm
                                                                                      dt1_s8ssn
                                                                                      ds_s8sso
                                                                                      dt2_s8ssp
                                                                                      sat_s8ssF
                                                                                      dt4_s8ssr]; } in
                                                    let {
                                                      sat_s8ssJ [Occ=Once]
                                                        :: (GHC.IO.Buffer.Buffer GHC.Word.Word8,
                                                            GHC.IO.Buffer.Buffer GHC.Types.Char)
                                                      [LclId] =
                                                          CCCS (,)! [sat_s8ssG sat_s8ssI];
                                                    } in  Unit# [sat_s8ssJ];
                                              };
                                      };
                                };
                          };
                      GHC.IO.Encoding.Failure.RoundtripFailure ->
                          case plusAddr# [dt_s8ssm dt3_s8ssq] of sat_s8ssK {
                            __DEFAULT ->
                                case readWord8OffAddr# [sat_s8ssK 0# GHC.Prim.void#] of {
                                  Unit# ipv1_s8ssN ->
                                      case touch# [dt1_s8ssn GHC.Prim.void#] of s'_s8ssO {
                                        (##) ->
                                            case ltWord# [ipv1_s8ssN 128##] of {
                                              __DEFAULT ->
                                                  case word2Int# [ipv1_s8ssN] of sat_s8ssR {
                                                    __DEFAULT ->
                                                        case
                                                            +# [56320# sat_s8ssR]
                                                        of
                                                        i#_s8ssQ [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  int2Word# [i#_s8ssQ]
                                                              of
                                                              sat_s8ssS
                                                              { __DEFAULT ->
                                                                    case
                                                                        leWord# [sat_s8ssS
                                                                                 1114111##]
                                                                    of
                                                                    { __DEFAULT ->
                                                                          GHC.Char.$wlvl i#_s8ssQ;
                                                                      1# ->
                                                                          case
                                                                              chr# [i#_s8ssQ]
                                                                          of
                                                                          sat_s8ssV
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    writeWideCharOffAddr# [dt5_s8sst
                                                                                                           dt9_s8ssy
                                                                                                           sat_s8ssV
                                                                                                           GHC.Prim.void#]
                                                                                of
                                                                                s2_s8ssW
                                                                                { (##) ->
                                                                                      case
                                                                                          touch# [dt6_s8ssu
                                                                                                  GHC.Prim.void#]
                                                                                      of
                                                                                      s'1_s8ssX
                                                                                      { (##) ->
                                                                                            case
                                                                                                +# [dt9_s8ssy
                                                                                                    1#]
                                                                                            of
                                                                                            sat_s8st0
                                                                                            { __DEFAULT ->
                                                                                                  let {
                                                                                                    sat_s8st1 [Occ=Once]
                                                                                                      :: GHC.IO.Buffer.Buffer
                                                                                                           GHC.Types.Char
                                                                                                    [LclId] =
                                                                                                        CCCS GHC.IO.Buffer.Buffer! [dt5_s8sst
                                                                                                                                    dt6_s8ssu
                                                                                                                                    ds1_s8ssv
                                                                                                                                    dt7_s8ssw
                                                                                                                                    dt8_s8ssx
                                                                                                                                    sat_s8st0];
                                                                                                  } in 
                                                                                                    case
                                                                                                        +# [dt3_s8ssq
                                                                                                            1#]
                                                                                                    of
                                                                                                    sat_s8ssY
                                                                                                    { __DEFAULT ->
                                                                                                          let {
                                                                                                            sat_s8ssZ [Occ=Once]
                                                                                                              :: GHC.IO.Buffer.Buffer
                                                                                                                   GHC.Word.Word8
                                                                                                            [LclId] =
                                                                                                                CCCS GHC.IO.Buffer.Buffer! [dt_s8ssm
                                                                                                                                            dt1_s8ssn
                                                                                                                                            ds_s8sso
                                                                                                                                            dt2_s8ssp
                                                                                                                                            sat_s8ssY
                                                                                                                                            dt4_s8ssr]; } in
                                                                                                          let {
                                                                                                            sat_s8st2 [Occ=Once]
                                                                                                              :: (GHC.IO.Buffer.Buffer
                                                                                                                    GHC.Word.Word8,
                                                                                                                  GHC.IO.Buffer.Buffer
                                                                                                                    GHC.Types.Char)
                                                                                                            [LclId] =
                                                                                                                CCCS (,)! [sat_s8ssZ
                                                                                                                           sat_s8st1];
                                                                                                          } in 
                                                                                                            Unit# [sat_s8st2];
                                                                                                    };
                                                                                            };
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                              1# ->
                                                  case
                                                      word2Int# [ipv1_s8ssN]
                                                  of
                                                  i#_s8st3 [Dmd=<S,U>]
                                                  { __DEFAULT ->
                                                        case int2Word# [i#_s8st3] of sat_s8st4 {
                                                          __DEFAULT ->
                                                              case
                                                                  leWord# [sat_s8st4 1114111##]
                                                              of
                                                              { __DEFAULT ->
                                                                    GHC.Char.$wlvl i#_s8st3;
                                                                1# ->
                                                                    case
                                                                        chr# [i#_s8st3]
                                                                    of
                                                                    sat_s8st7
                                                                    { __DEFAULT ->
                                                                          case
                                                                              writeWideCharOffAddr# [dt5_s8sst
                                                                                                     dt9_s8ssy
                                                                                                     sat_s8st7
                                                                                                     GHC.Prim.void#]
                                                                          of
                                                                          s2_s8st8
                                                                          { (##) ->
                                                                                case
                                                                                    touch# [dt6_s8ssu
                                                                                            GHC.Prim.void#]
                                                                                of
                                                                                s'1_s8st9
                                                                                { (##) ->
                                                                                      case
                                                                                          +# [dt9_s8ssy
                                                                                              1#]
                                                                                      of
                                                                                      sat_s8stc
                                                                                      { __DEFAULT ->
                                                                                            let {
                                                                                              sat_s8std [Occ=Once]
                                                                                                :: GHC.IO.Buffer.Buffer
                                                                                                     GHC.Types.Char
                                                                                              [LclId] =
                                                                                                  CCCS GHC.IO.Buffer.Buffer! [dt5_s8sst
                                                                                                                              dt6_s8ssu
                                                                                                                              ds1_s8ssv
                                                                                                                              dt7_s8ssw
                                                                                                                              dt8_s8ssx
                                                                                                                              sat_s8stc];
                                                                                            } in 
                                                                                              case
                                                                                                  +# [dt3_s8ssq
                                                                                                      1#]
                                                                                              of
                                                                                              sat_s8sta
                                                                                              { __DEFAULT ->
                                                                                                    let {
                                                                                                      sat_s8stb [Occ=Once]
                                                                                                        :: GHC.IO.Buffer.Buffer
                                                                                                             GHC.Word.Word8
                                                                                                      [LclId] =
                                                                                                          CCCS GHC.IO.Buffer.Buffer! [dt_s8ssm
                                                                                                                                      dt1_s8ssn
                                                                                                                                      ds_s8sso
                                                                                                                                      dt2_s8ssp
                                                                                                                                      sat_s8sta
                                                                                                                                      dt4_s8ssr]; } in
                                                                                                    let {
                                                                                                      sat_s8ste [Occ=Once]
                                                                                                        :: (GHC.IO.Buffer.Buffer
                                                                                                              GHC.Word.Word8,
                                                                                                            GHC.IO.Buffer.Buffer
                                                                                                              GHC.Types.Char)
                                                                                                      [LclId] =
                                                                                                          CCCS (,)! [sat_s8stb
                                                                                                                     sat_s8std];
                                                                                                    } in 
                                                                                                      Unit# [sat_s8ste];
                                                                                              };
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Encoding.Failure.recoverDecode
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.Types.IO
          (GHC.IO.Buffer.Buffer GHC.Word.Word8,
           GHC.IO.Buffer.Buffer GHC.Types.Char)
[GblId,
 Arity=4,
 Str=<S,1*U><S,1*U(U,U,U,U,U,U)><S,1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        GHC.IO.Encoding.Failure.recoverDecode1
            eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Encoding.Failure.recoverEncode1
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Buffer.Buffer GHC.Types.Char,
            GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=4,
 Str=<S,1*U><S(SLLLSL),1*U(U,U,U,U,U,U)><S,1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [cfm_s8stf input_s8stg output_s8sth void_0E]
        case input_s8stg of wild_s8stj {
          GHC.IO.Buffer.Buffer dt_s8stk
                               dt1_s8stl
                               ds_s8stm [Occ=Once*]
                               dt2_s8stn [Occ=Once*]
                               dt3_s8sto
                               dt4_s8stp [Occ=Once*] ->
              case output_s8sth of wild1_s8stq {
                GHC.IO.Buffer.Buffer dt5_s8str
                                     dt6_s8sts
                                     ds1_s8stt [Occ=Once]
                                     dt7_s8stu [Occ=Once]
                                     dt8_s8stv [Occ=Once]
                                     dt9_s8stw ->
                    case readWideCharOffAddr# [dt_s8stk dt3_s8sto GHC.Prim.void#] of {
                      Unit# ipv1_s8stz [Occ=Once*] ->
                          case touch# [dt1_s8stl GHC.Prim.void#] of s'_s8stA {
                            (##) ->
                                case cfm_s8stf of {
                                  GHC.IO.Encoding.Failure.ErrorOnCodingFailure ->
                                      raiseIO# [GHC.IO.Encoding.Failure.recoverEncode2
                                                GHC.Prim.void#];
                                  GHC.IO.Encoding.Failure.IgnoreCodingFailure ->
                                      case +# [dt3_s8sto 1#] of sat_s8stC {
                                        __DEFAULT ->
                                            let {
                                              sat_s8stD [Occ=Once]
                                                :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                              [LclId] =
                                                  CCCS GHC.IO.Buffer.Buffer! [dt_s8stk
                                                                              dt1_s8stl
                                                                              ds_s8stm
                                                                              dt2_s8stn
                                                                              sat_s8stC
                                                                              dt4_s8stp]; } in
                                            let {
                                              sat_s8stE [Occ=Once]
                                                :: (GHC.IO.Buffer.Buffer GHC.Types.Char,
                                                    GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                              [LclId] =
                                                  CCCS (,)! [sat_s8stD wild1_s8stq];
                                            } in  Unit# [sat_s8stE];
                                      };
                                  GHC.IO.Encoding.Failure.TransliterateCodingFailure ->
                                      case ipv1_s8stz of {
                                        __DEFAULT ->
                                            case
                                                writeWideCharOffAddr# [dt_s8stk
                                                                       dt3_s8sto
                                                                       '?'#
                                                                       GHC.Prim.void#]
                                            of
                                            s2_s8stG
                                            { (##) ->
                                                  case
                                                      touch# [dt1_s8stl GHC.Prim.void#]
                                                  of
                                                  s'1_s8stH
                                                  { (##) ->
                                                        let {
                                                          sat_s8stI [Occ=Once]
                                                            :: (GHC.IO.Buffer.Buffer GHC.Types.Char,
                                                                GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                                          [LclId] =
                                                              CCCS (,)! [wild_s8stj wild1_s8stq];
                                                        } in  Unit# [sat_s8stI];
                                                  };
                                            };
                                        '?'# ->
                                            case +# [dt3_s8sto 1#] of sat_s8stJ {
                                              __DEFAULT ->
                                                  let {
                                                    sat_s8stK [Occ=Once]
                                                      :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                                    [LclId] =
                                                        CCCS GHC.IO.Buffer.Buffer! [dt_s8stk
                                                                                    dt1_s8stl
                                                                                    ds_s8stm
                                                                                    dt2_s8stn
                                                                                    sat_s8stJ
                                                                                    dt4_s8stp]; } in
                                                  let {
                                                    sat_s8stL [Occ=Once]
                                                      :: (GHC.IO.Buffer.Buffer GHC.Types.Char,
                                                          GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                                    [LclId] =
                                                        CCCS (,)! [sat_s8stK wild1_s8stq];
                                                  } in  Unit# [sat_s8stL];
                                            };
                                      };
                                  GHC.IO.Encoding.Failure.RoundtripFailure ->
                                      case ord# [ipv1_s8stz] of x_s8stM [Dmd=<S,U>] {
                                        __DEFAULT ->
                                            case <=# [56448# x_s8stM] of {
                                              __DEFAULT ->
                                                  raiseIO# [GHC.IO.Encoding.Failure.recoverEncode2
                                                            GHC.Prim.void#];
                                              1# ->
                                                  case <# [x_s8stM 56576#] of {
                                                    __DEFAULT ->
                                                        raiseIO# [GHC.IO.Encoding.Failure.recoverEncode2
                                                                  GHC.Prim.void#];
                                                    1# ->
                                                        case int2Word# [x_s8stM] of sat_s8stQ {
                                                          __DEFAULT ->
                                                              case
                                                                  narrow8Word# [sat_s8stQ]
                                                              of
                                                              sat_s8stR
                                                              { __DEFAULT ->
                                                                    case
                                                                        plusAddr# [dt5_s8str
                                                                                   dt9_s8stw]
                                                                    of
                                                                    sat_s8stP
                                                                    { __DEFAULT ->
                                                                          case
                                                                              writeWord8OffAddr# [sat_s8stP
                                                                                                  0#
                                                                                                  sat_s8stR
                                                                                                  GHC.Prim.void#]
                                                                          of
                                                                          s2_s8stS
                                                                          { (##) ->
                                                                                case
                                                                                    touch# [dt6_s8sts
                                                                                            GHC.Prim.void#]
                                                                                of
                                                                                s'1_s8stT
                                                                                { (##) ->
                                                                                      case
                                                                                          +# [dt9_s8stw
                                                                                              1#]
                                                                                      of
                                                                                      sat_s8stW
                                                                                      { __DEFAULT ->
                                                                                            let {
                                                                                              sat_s8stX [Occ=Once]
                                                                                                :: GHC.IO.Buffer.Buffer
                                                                                                     GHC.Word.Word8
                                                                                              [LclId] =
                                                                                                  CCCS GHC.IO.Buffer.Buffer! [dt5_s8str
                                                                                                                              dt6_s8sts
                                                                                                                              ds1_s8stt
                                                                                                                              dt7_s8stu
                                                                                                                              dt8_s8stv
                                                                                                                              sat_s8stW];
                                                                                            } in 
                                                                                              case
                                                                                                  +# [dt3_s8sto
                                                                                                      1#]
                                                                                              of
                                                                                              sat_s8stU
                                                                                              { __DEFAULT ->
                                                                                                    let {
                                                                                                      sat_s8stV [Occ=Once]
                                                                                                        :: GHC.IO.Buffer.Buffer
                                                                                                             GHC.Types.Char
                                                                                                      [LclId] =
                                                                                                          CCCS GHC.IO.Buffer.Buffer! [dt_s8stk
                                                                                                                                      dt1_s8stl
                                                                                                                                      ds_s8stm
                                                                                                                                      dt2_s8stn
                                                                                                                                      sat_s8stU
                                                                                                                                      dt4_s8stp]; } in
                                                                                                    let {
                                                                                                      sat_s8stY [Occ=Once]
                                                                                                        :: (GHC.IO.Buffer.Buffer
                                                                                                              GHC.Types.Char,
                                                                                                            GHC.IO.Buffer.Buffer
                                                                                                              GHC.Word.Word8)
                                                                                                      [LclId] =
                                                                                                          CCCS (,)! [sat_s8stV
                                                                                                                     sat_s8stX];
                                                                                                    } in 
                                                                                                      Unit# [sat_s8stY];
                                                                                              };
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Encoding.Failure.recoverEncode
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.IO.Buffer.Buffer GHC.Types.Char
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO
          (GHC.IO.Buffer.Buffer GHC.Types.Char,
           GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId,
 Arity=4,
 Str=<S,1*U><S(SLLLSL),1*U(U,U,U,U,U,U)><S,1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        GHC.IO.Encoding.Failure.recoverEncode1
            eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Encoding.Failure.isSurrogate [InlPrag=INLINE (sat-args=1)]
  :: GHC.Types.Char -> GHC.Types.Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [c_s8stZ]
        case c_s8stZ of {
          GHC.Types.C# c#_s8su1 [Occ=Once] ->
              case ord# [c#_s8su1] of y_s8su2 [Dmd=<S,U>] {
                __DEFAULT ->
                    case <=# [55296# y_s8su2] of {
                      __DEFAULT ->
                          case <=# [56320# y_s8su2] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# ->
                                case <=# [y_s8su2 57343#] of sat_s8su5 {
                                  __DEFAULT -> tagToEnum# [sat_s8su5];
                                };
                          };
                      1# ->
                          case <=# [y_s8su2 56319#] of {
                            __DEFAULT ->
                                case <=# [56320# y_s8su2] of {
                                  __DEFAULT -> GHC.Types.False [];
                                  1# ->
                                      case <=# [y_s8su2 57343#] of sat_s8su8 {
                                        __DEFAULT -> tagToEnum# [sat_s8su8];
                                      };
                                };
                            1# -> GHC.Types.True [];
                          };
                    };
              };
        };

GHC.IO.Encoding.Failure.ErrorOnCodingFailure
  :: GHC.IO.Encoding.Failure.CodingFailureMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Failure.ErrorOnCodingFailure! [];

GHC.IO.Encoding.Failure.IgnoreCodingFailure
  :: GHC.IO.Encoding.Failure.CodingFailureMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Failure.IgnoreCodingFailure! [];

GHC.IO.Encoding.Failure.TransliterateCodingFailure
  :: GHC.IO.Encoding.Failure.CodingFailureMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Failure.TransliterateCodingFailure! [];

GHC.IO.Encoding.Failure.RoundtripFailure
  :: GHC.IO.Encoding.Failure.CodingFailureMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Failure.RoundtripFailure! [];

