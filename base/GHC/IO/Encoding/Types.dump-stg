
==================== Pre unarise: ====================
2018-03-16 16:02:57.685407748 UTC

GHC.IO.Encoding.Types.$fShowCodingProgress6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "InputUnderflow"#;

GHC.IO.Encoding.Types.$fShowCodingProgress5 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Types.$fShowCodingProgress6;

GHC.IO.Encoding.Types.$fShowCodingProgress4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "OutputUnderflow"#;

GHC.IO.Encoding.Types.$fShowCodingProgress3 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Types.$fShowCodingProgress4;

GHC.IO.Encoding.Types.$fShowCodingProgress2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "InvalidSequence"#;

GHC.IO.Encoding.Types.$fShowCodingProgress1 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Types.$fShowCodingProgress2;

GHC.IO.Encoding.Types.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Encoding.Types.CodingProgress
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s7QQ4 w1_s7QQ5]
        case w_s7QQ4 of {
          GHC.IO.Encoding.Types.InputUnderflow ->
              GHC.Base.++ GHC.IO.Encoding.Types.$fShowCodingProgress5 w1_s7QQ5;
          GHC.IO.Encoding.Types.OutputUnderflow ->
              GHC.Base.++ GHC.IO.Encoding.Types.$fShowCodingProgress3 w1_s7QQ5;
          GHC.IO.Encoding.Types.InvalidSequence ->
              GHC.Base.++ GHC.IO.Encoding.Types.$fShowCodingProgress1 w1_s7QQ5;
        };

GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int
     -> GHC.IO.Encoding.Types.CodingProgress -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s7QQ7 w1_s7QQ8 w2_s7QQ9]
        GHC.IO.Encoding.Types.$w$cshowsPrec w1_s7QQ8 w2_s7QQ9;

GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow
  :: GHC.IO.Encoding.Types.CodingProgress -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s7QQa]
        case x_s7QQa of {
          GHC.IO.Encoding.Types.InputUnderflow ->
              GHC.IO.Encoding.Types.$fShowCodingProgress5;
          GHC.IO.Encoding.Types.OutputUnderflow ->
              GHC.IO.Encoding.Types.$fShowCodingProgress3;
          GHC.IO.Encoding.Types.InvalidSequence ->
              GHC.IO.Encoding.Types.$fShowCodingProgress1;
        };

GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList
  :: [GHC.IO.Encoding.Types.CodingProgress] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s7QQc s_s7QQd]
        GHC.Show.showList__
            GHC.IO.Encoding.Types.$w$cshowsPrec ls_s7QQc s_s7QQd;

GHC.IO.Encoding.Types.$fShowCodingProgress [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Encoding.Types.CodingProgress
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec
                                    GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow
                                    GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList];

GHC.IO.Encoding.Types.$fEqCodingProgress_$c==
  :: GHC.IO.Encoding.Types.CodingProgress
     -> GHC.IO.Encoding.Types.CodingProgress -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s7QQe ds1_s7QQf]
        case ds_s7QQe of {
          GHC.IO.Encoding.Types.InputUnderflow ->
              case ds1_s7QQf of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Encoding.Types.InputUnderflow -> GHC.Types.True [];
              };
          GHC.IO.Encoding.Types.OutputUnderflow ->
              case ds1_s7QQf of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Encoding.Types.OutputUnderflow -> GHC.Types.True [];
              };
          GHC.IO.Encoding.Types.InvalidSequence ->
              case ds1_s7QQf of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Encoding.Types.InvalidSequence -> GHC.Types.True [];
              };
        };

GHC.IO.Encoding.Types.$fEqCodingProgress_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.IO.Encoding.Types.CodingProgress
     -> GHC.IO.Encoding.Types.CodingProgress -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s7QQk eta1_s7QQl]
        case eta_s7QQk of {
          GHC.IO.Encoding.Types.InputUnderflow ->
              case eta1_s7QQl of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Encoding.Types.InputUnderflow -> GHC.Types.False [];
              };
          GHC.IO.Encoding.Types.OutputUnderflow ->
              case eta1_s7QQl of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Encoding.Types.OutputUnderflow -> GHC.Types.False [];
              };
          GHC.IO.Encoding.Types.InvalidSequence ->
              case eta1_s7QQl of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Encoding.Types.InvalidSequence -> GHC.Types.False [];
              };
        };

GHC.IO.Encoding.Types.$fEqCodingProgress [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.IO.Encoding.Types.CodingProgress
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.IO.Encoding.Types.$fEqCodingProgress_$c==
                                     GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=];

GHC.IO.Encoding.Types.setState
  :: forall from to state.
     GHC.IO.Encoding.Types.BufferCodec from to state
     -> state -> GHC.Types.IO ()
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLS),1*U(A,A,A,A,1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_s7QQq]
        case ds_s7QQq of {
          GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                            _ [Occ=Dead]
                                            _ [Occ=Dead]
                                            _ [Occ=Dead]
                                            ds5_s7QQw [Occ=Once] ->
              ds5_s7QQw;
        };

GHC.IO.Encoding.Types.getState
  :: forall from to state.
     GHC.IO.Encoding.Types.BufferCodec from to state
     -> GHC.Types.IO state
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSL),1*U(A,A,A,1*U,A)>,
 Unf=OtherCon []] =
    [] \r [ds_s7QQx]
        case ds_s7QQx of {
          GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                            _ [Occ=Dead]
                                            _ [Occ=Dead]
                                            ds4_s7QQC [Occ=Once]
                                            _ [Occ=Dead] ->
              ds4_s7QQC;
        };

GHC.IO.Encoding.Types.close
  :: forall from to state.
     GHC.IO.Encoding.Types.BufferCodec from to state -> GHC.Types.IO ()
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSLL),1*U(A,A,1*U,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_s7QQE]
        case ds_s7QQE of {
          GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                            _ [Occ=Dead]
                                            ds3_s7QQI [Occ=Once]
                                            _ [Occ=Dead]
                                            _ [Occ=Dead] ->
              ds3_s7QQI;
        };

GHC.IO.Encoding.Types.recover
  :: forall from to state.
     GHC.IO.Encoding.Types.BufferCodec from to state
     -> GHC.IO.Buffer.Buffer from
     -> GHC.IO.Buffer.Buffer to
     -> GHC.Types.IO
          (GHC.IO.Buffer.Buffer from, GHC.IO.Buffer.Buffer to)
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLLL),1*U(A,1*U,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_s7QQL]
        case ds_s7QQL of {
          GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                            ds2_s7QQO [Occ=Once]
                                            _ [Occ=Dead]
                                            _ [Occ=Dead]
                                            _ [Occ=Dead] ->
              ds2_s7QQO;
        };

GHC.IO.Encoding.Types.encode
  :: forall from to state.
     GHC.IO.Encoding.Types.BufferCodec from to state
     -> GHC.IO.Encoding.Types.CodeBuffer from to
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLLL),1*U(1*U,A,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_s7QQS]
        case ds_s7QQS of {
          GHC.IO.Encoding.Types.BufferCodec ds1_s7QQU [Occ=Once]
                                            _ [Occ=Dead]
                                            _ [Occ=Dead]
                                            _ [Occ=Dead]
                                            _ [Occ=Dead] ->
              ds1_s7QQU;
        };

GHC.IO.Encoding.Types.mkTextEncoder :: ()
[GblId[[RecSel(naughty)]], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE ()! [];

GHC.IO.Encoding.Types.mkTextDecoder :: ()
[GblId[[RecSel(naughty)]], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE ()! [];

GHC.IO.Encoding.Types.textEncodingName
  :: GHC.IO.Encoding.Types.TextEncoding -> GHC.Base.String
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s7QQZ]
        case ds_s7QQZ of {
          GHC.IO.Encoding.Types.TextEncoding ds1_s7QR1 [Occ=Once]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead] ->
              ds1_s7QR1;
        };

GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec
  :: GHC.Types.Int
     -> GHC.IO.Encoding.Types.TextEncoding -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s7QR4 x_s7QR5 s_s7QR6]
        case x_s7QR5 of {
          GHC.IO.Encoding.Types.TextEncoding ds1_s7QR8 [Occ=Once]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead] ->
              GHC.Base.++ ds1_s7QR8 s_s7QR6;
        };

GHC.IO.Encoding.Types.$fShowTextEncoding1
  :: GHC.IO.Encoding.Types.TextEncoding
     -> GHC.Base.String -> [GHC.Types.Char]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s7QRb s_s7QRc]
        case x_s7QRb of {
          GHC.IO.Encoding.Types.TextEncoding ds_s7QRe [Occ=Once]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead] ->
              GHC.Base.++ ds_s7QRe s_s7QRc;
        };

GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList
  :: [GHC.IO.Encoding.Types.TextEncoding] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s7QRh s_s7QRi]
        GHC.Show.showList__
            GHC.IO.Encoding.Types.$fShowTextEncoding1 ls_s7QRh s_s7QRi;

GHC.IO.Encoding.Types.$fShowTextEncoding [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Encoding.Types.TextEncoding
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec
                                    GHC.IO.Encoding.Types.textEncodingName
                                    GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList];

GHC.IO.Encoding.Types.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.Encoding.Types.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$trModule4];

GHC.IO.Encoding.Types.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Encoding.Types"#;

GHC.IO.Encoding.Types.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$trModule2];

GHC.IO.Encoding.Types.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Encoding.Types.$trModule3
                                     GHC.IO.Encoding.Types.$trModule1];

$krep_r7QPf :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc()
                                              GHC.Types.[]];

$krep1_r7QPg :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Word.$tcWord8
                                              GHC.Types.[]];

$krep2_r7QPh :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep3_r7QPi :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r7QPf GHC.Types.[]];

$krep4_r7QPj :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep3_r7QPi];

$krep5_r7QPk :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r7QPh GHC.Types.[]];

$krep6_r7QPl :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep5_r7QPk];

GHC.IO.Encoding.Types.$tcBufferCodec1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$*
                                         GHC.Types.krep$*->*->*];

$krep7_r7QPm :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [2#];

$krep8_r7QPn :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep7_r7QPm $krep4_r7QPj];

$krep9_r7QPo :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep7_r7QPm GHC.Types.[]];

$krep10_r7QPp :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep9_r7QPo];

$krep11_r7QPq :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [1#];

$krep12_r7QPr :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep11_r7QPq GHC.Types.[]];

$krep13_r7QPs :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Buffer.$tcBuffer
                                              $krep12_r7QPr];

$krep14_r7QPt :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep15_r7QPu :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep14_r7QPt GHC.Types.[]];

$krep16_r7QPv :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Buffer.$tcBuffer
                                              $krep15_r7QPu];

$krep17_r7QPw :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep13_r7QPs GHC.Types.[]];

$krep18_r7QPx :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep16_r7QPv $krep17_r7QPw];

$krep19_r7QPy :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,)
                                              $krep18_r7QPx];

$krep20_r7QPz :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep19_r7QPy GHC.Types.[]];

$krep21_r7QPA :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep20_r7QPz];

$krep22_r7QPB :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep13_r7QPs $krep21_r7QPA];

$krep23_r7QPC :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep16_r7QPv $krep22_r7QPB];

GHC.IO.Encoding.Types.$tcCodingProgress2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "CodingProgress"#;

GHC.IO.Encoding.Types.$tcCodingProgress1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$tcCodingProgress2];

GHC.IO.Encoding.Types.$tcCodingProgress :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4536835953909491444##
                                    10020924989385933984##
                                    GHC.IO.Encoding.Types.$trModule
                                    GHC.IO.Encoding.Types.$tcCodingProgress1
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.Encoding.Types.$tc'InputUnderflow1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Encoding.Types.$tcCodingProgress
                                              GHC.Types.[]];

GHC.IO.Encoding.Types.$tc'InputUnderflow3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'InputUnderflow"#;

GHC.IO.Encoding.Types.$tc'InputUnderflow2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$tc'InputUnderflow3];

GHC.IO.Encoding.Types.$tc'InputUnderflow :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [7310901713659969130##
                                    7213149953264042554##
                                    GHC.IO.Encoding.Types.$trModule
                                    GHC.IO.Encoding.Types.$tc'InputUnderflow2
                                    0#
                                    GHC.IO.Encoding.Types.$tc'InputUnderflow1];

GHC.IO.Encoding.Types.$tc'OutputUnderflow2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'OutputUnderflow"#;

GHC.IO.Encoding.Types.$tc'OutputUnderflow1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$tc'OutputUnderflow2];

GHC.IO.Encoding.Types.$tc'OutputUnderflow :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9796056422104521286##
                                    11682915108109873596##
                                    GHC.IO.Encoding.Types.$trModule
                                    GHC.IO.Encoding.Types.$tc'OutputUnderflow1
                                    0#
                                    GHC.IO.Encoding.Types.$tc'InputUnderflow1];

GHC.IO.Encoding.Types.$tc'InvalidSequence2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'InvalidSequence"#;

GHC.IO.Encoding.Types.$tc'InvalidSequence1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$tc'InvalidSequence2];

GHC.IO.Encoding.Types.$tc'InvalidSequence :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [11342030351124486013##
                                    4985313935970877948##
                                    GHC.IO.Encoding.Types.$trModule
                                    GHC.IO.Encoding.Types.$tc'InvalidSequence1
                                    0#
                                    GHC.IO.Encoding.Types.$tc'InputUnderflow1];

$krep24_r7QPD :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.Types.$tc'InputUnderflow1
                      $krep18_r7QPx];

$krep25_r7QPE :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,,)
                                              $krep24_r7QPD];

$krep26_r7QPF :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep25_r7QPE GHC.Types.[]];

$krep27_r7QPG :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep26_r7QPF];

$krep28_r7QPH :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep13_r7QPs $krep27_r7QPG];

$krep29_r7QPI :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep16_r7QPv $krep28_r7QPH];

GHC.IO.Encoding.Types.$tcBufferCodec3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BufferCodec"#;

GHC.IO.Encoding.Types.$tcBufferCodec2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$tcBufferCodec3];

GHC.IO.Encoding.Types.$tcBufferCodec :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [8585015667497772909##
                                    7745120500523128511##
                                    GHC.IO.Encoding.Types.$trModule
                                    GHC.IO.Encoding.Types.$tcBufferCodec2
                                    0#
                                    GHC.IO.Encoding.Types.$tcBufferCodec1];

$krep30_r7QPJ :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep11_r7QPq $krep9_r7QPo];

$krep31_r7QPK :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep14_r7QPt $krep30_r7QPJ];

$krep32_r7QPL :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Encoding.Types.$tcBufferCodec
                                              $krep31_r7QPK];

$krep33_r7QPM :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_r7QPn $krep32_r7QPL];

$krep34_r7QPN :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep10_r7QPp $krep33_r7QPM];

$krep35_r7QPO :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_r7QPj $krep34_r7QPN];

$krep36_r7QPP :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep23_r7QPC $krep35_r7QPO];

GHC.IO.Encoding.Types.$tc'BufferCodec1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r7QPI $krep36_r7QPP];

GHC.IO.Encoding.Types.$tc'BufferCodec3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BufferCodec"#;

GHC.IO.Encoding.Types.$tc'BufferCodec2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$tc'BufferCodec3];

GHC.IO.Encoding.Types.$tc'BufferCodec :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [7854563382940536875##
                                    13968497653111525953##
                                    GHC.IO.Encoding.Types.$trModule
                                    GHC.IO.Encoding.Types.$tc'BufferCodec2
                                    3#
                                    GHC.IO.Encoding.Types.$tc'BufferCodec1];

$krep37_r7QPQ :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r7QPh $krep15_r7QPu];

$krep38_r7QPR :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r7QPg $krep37_r7QPQ];

$krep39_r7QPS :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Encoding.Types.$tcBufferCodec
                                              $krep38_r7QPR];

$krep40_r7QPT :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep39_r7QPS GHC.Types.[]];

$krep41_r7QPU :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep40_r7QPT];

$krep42_r7QPV :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r7QPg $krep12_r7QPr];

$krep43_r7QPW :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r7QPh $krep42_r7QPV];

$krep44_r7QPX :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Encoding.Types.$tcBufferCodec
                                              $krep43_r7QPW];

$krep45_r7QPY :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep44_r7QPX GHC.Types.[]];

$krep46_r7QPZ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep45_r7QPY];

GHC.IO.Encoding.Types.$tcTextEncoding2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "TextEncoding"#;

GHC.IO.Encoding.Types.$tcTextEncoding1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$tcTextEncoding2];

GHC.IO.Encoding.Types.$tcTextEncoding :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17289914150150147669##
                                    3676960838620070165##
                                    GHC.IO.Encoding.Types.$trModule
                                    GHC.IO.Encoding.Types.$tcTextEncoding1
                                    0#
                                    GHC.Types.krep$*];

$krep47_r7QQ0 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Encoding.Types.$tcTextEncoding
                                              GHC.Types.[]];

$krep48_r7QQ1 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep46_r7QPZ $krep47_r7QQ0];

$krep49_r7QQ2 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep41_r7QPU $krep48_r7QQ1];

GHC.IO.Encoding.Types.$tc'TextEncoding1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep6_r7QPl $krep49_r7QQ2];

GHC.IO.Encoding.Types.$tc'TextEncoding3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'TextEncoding"#;

GHC.IO.Encoding.Types.$tc'TextEncoding2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$tc'TextEncoding3];

GHC.IO.Encoding.Types.$tc'TextEncoding :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6558277295920728213##
                                    3754397505420773780##
                                    GHC.IO.Encoding.Types.$trModule
                                    GHC.IO.Encoding.Types.$tc'TextEncoding2
                                    2#
                                    GHC.IO.Encoding.Types.$tc'TextEncoding1];

GHC.IO.Encoding.Types.InputUnderflow
  :: GHC.IO.Encoding.Types.CodingProgress
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.InputUnderflow! [];

GHC.IO.Encoding.Types.OutputUnderflow
  :: GHC.IO.Encoding.Types.CodingProgress
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.OutputUnderflow! [];

GHC.IO.Encoding.Types.InvalidSequence
  :: GHC.IO.Encoding.Types.CodingProgress
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.InvalidSequence! [];

GHC.IO.Encoding.Types.TextEncoding
  :: forall dstate estate.
     GHC.Base.String
     -> GHC.Types.IO (GHC.IO.Encoding.Types.TextDecoder dstate)
     -> GHC.Types.IO (GHC.IO.Encoding.Types.TextEncoder estate)
     -> GHC.IO.Encoding.Types.TextEncoding
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Encoding.Types.TextEncoding [eta_B3 eta_B2 eta_B1];

GHC.IO.Encoding.Types.BufferCodec
  :: forall from to state.
     GHC.IO.Encoding.Types.CodeBuffer from to
     -> (GHC.IO.Buffer.Buffer from
         -> GHC.IO.Buffer.Buffer to
         -> GHC.Types.IO
              (GHC.IO.Buffer.Buffer from, GHC.IO.Buffer.Buffer to))
     -> GHC.Types.IO ()
     -> GHC.Types.IO state
     -> (state -> GHC.Types.IO ())
     -> GHC.IO.Encoding.Types.BufferCodec from to state
[GblId[DataCon],
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.Encoding.Types.BufferCodec [eta_B5
                                           eta_B4
                                           eta_B3
                                           eta_B2
                                           eta_B1];


==================== STG syntax: ====================
2018-03-16 16:02:57.696966011 UTC

GHC.IO.Encoding.Types.$fShowCodingProgress6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "InputUnderflow"#;

GHC.IO.Encoding.Types.$fShowCodingProgress5 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Types.$fShowCodingProgress6;

GHC.IO.Encoding.Types.$fShowCodingProgress4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "OutputUnderflow"#;

GHC.IO.Encoding.Types.$fShowCodingProgress3 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Types.$fShowCodingProgress4;

GHC.IO.Encoding.Types.$fShowCodingProgress2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "InvalidSequence"#;

GHC.IO.Encoding.Types.$fShowCodingProgress1 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Types.$fShowCodingProgress2;

GHC.IO.Encoding.Types.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Encoding.Types.CodingProgress
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s7QQ4 w1_s7QQ5]
        case w_s7QQ4 of {
          GHC.IO.Encoding.Types.InputUnderflow ->
              GHC.Base.++ GHC.IO.Encoding.Types.$fShowCodingProgress5 w1_s7QQ5;
          GHC.IO.Encoding.Types.OutputUnderflow ->
              GHC.Base.++ GHC.IO.Encoding.Types.$fShowCodingProgress3 w1_s7QQ5;
          GHC.IO.Encoding.Types.InvalidSequence ->
              GHC.Base.++ GHC.IO.Encoding.Types.$fShowCodingProgress1 w1_s7QQ5;
        };

GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int
     -> GHC.IO.Encoding.Types.CodingProgress -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s7QQ7 w1_s7QQ8 w2_s7QQ9]
        GHC.IO.Encoding.Types.$w$cshowsPrec w1_s7QQ8 w2_s7QQ9;

GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow
  :: GHC.IO.Encoding.Types.CodingProgress -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s7QQa]
        case x_s7QQa of {
          GHC.IO.Encoding.Types.InputUnderflow ->
              GHC.IO.Encoding.Types.$fShowCodingProgress5;
          GHC.IO.Encoding.Types.OutputUnderflow ->
              GHC.IO.Encoding.Types.$fShowCodingProgress3;
          GHC.IO.Encoding.Types.InvalidSequence ->
              GHC.IO.Encoding.Types.$fShowCodingProgress1;
        };

GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList
  :: [GHC.IO.Encoding.Types.CodingProgress] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s7QQc s_s7QQd]
        GHC.Show.showList__
            GHC.IO.Encoding.Types.$w$cshowsPrec ls_s7QQc s_s7QQd;

GHC.IO.Encoding.Types.$fShowCodingProgress [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Encoding.Types.CodingProgress
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec
                                    GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow
                                    GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList];

GHC.IO.Encoding.Types.$fEqCodingProgress_$c==
  :: GHC.IO.Encoding.Types.CodingProgress
     -> GHC.IO.Encoding.Types.CodingProgress -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s7QQe ds1_s7QQf]
        case ds_s7QQe of {
          GHC.IO.Encoding.Types.InputUnderflow ->
              case ds1_s7QQf of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Encoding.Types.InputUnderflow -> GHC.Types.True [];
              };
          GHC.IO.Encoding.Types.OutputUnderflow ->
              case ds1_s7QQf of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Encoding.Types.OutputUnderflow -> GHC.Types.True [];
              };
          GHC.IO.Encoding.Types.InvalidSequence ->
              case ds1_s7QQf of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Encoding.Types.InvalidSequence -> GHC.Types.True [];
              };
        };

GHC.IO.Encoding.Types.$fEqCodingProgress_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.IO.Encoding.Types.CodingProgress
     -> GHC.IO.Encoding.Types.CodingProgress -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s7QQk eta1_s7QQl]
        case eta_s7QQk of {
          GHC.IO.Encoding.Types.InputUnderflow ->
              case eta1_s7QQl of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Encoding.Types.InputUnderflow -> GHC.Types.False [];
              };
          GHC.IO.Encoding.Types.OutputUnderflow ->
              case eta1_s7QQl of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Encoding.Types.OutputUnderflow -> GHC.Types.False [];
              };
          GHC.IO.Encoding.Types.InvalidSequence ->
              case eta1_s7QQl of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Encoding.Types.InvalidSequence -> GHC.Types.False [];
              };
        };

GHC.IO.Encoding.Types.$fEqCodingProgress [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.IO.Encoding.Types.CodingProgress
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.IO.Encoding.Types.$fEqCodingProgress_$c==
                                     GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=];

GHC.IO.Encoding.Types.setState
  :: forall from to state.
     GHC.IO.Encoding.Types.BufferCodec from to state
     -> state -> GHC.Types.IO ()
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLS),1*U(A,A,A,A,1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_s7QQq]
        case ds_s7QQq of {
          GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                            _ [Occ=Dead]
                                            _ [Occ=Dead]
                                            _ [Occ=Dead]
                                            ds5_s7QQw [Occ=Once] ->
              ds5_s7QQw;
        };

GHC.IO.Encoding.Types.getState
  :: forall from to state.
     GHC.IO.Encoding.Types.BufferCodec from to state
     -> GHC.Types.IO state
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSL),1*U(A,A,A,1*U,A)>,
 Unf=OtherCon []] =
    [] \r [ds_s7QQx]
        case ds_s7QQx of {
          GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                            _ [Occ=Dead]
                                            _ [Occ=Dead]
                                            ds4_s7QQC [Occ=Once]
                                            _ [Occ=Dead] ->
              ds4_s7QQC;
        };

GHC.IO.Encoding.Types.close
  :: forall from to state.
     GHC.IO.Encoding.Types.BufferCodec from to state -> GHC.Types.IO ()
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSLL),1*U(A,A,1*U,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_s7QQE]
        case ds_s7QQE of {
          GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                            _ [Occ=Dead]
                                            ds3_s7QQI [Occ=Once]
                                            _ [Occ=Dead]
                                            _ [Occ=Dead] ->
              ds3_s7QQI;
        };

GHC.IO.Encoding.Types.recover
  :: forall from to state.
     GHC.IO.Encoding.Types.BufferCodec from to state
     -> GHC.IO.Buffer.Buffer from
     -> GHC.IO.Buffer.Buffer to
     -> GHC.Types.IO
          (GHC.IO.Buffer.Buffer from, GHC.IO.Buffer.Buffer to)
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLLL),1*U(A,1*U,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_s7QQL]
        case ds_s7QQL of {
          GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                            ds2_s7QQO [Occ=Once]
                                            _ [Occ=Dead]
                                            _ [Occ=Dead]
                                            _ [Occ=Dead] ->
              ds2_s7QQO;
        };

GHC.IO.Encoding.Types.encode
  :: forall from to state.
     GHC.IO.Encoding.Types.BufferCodec from to state
     -> GHC.IO.Encoding.Types.CodeBuffer from to
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLLL),1*U(1*U,A,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_s7QQS]
        case ds_s7QQS of {
          GHC.IO.Encoding.Types.BufferCodec ds1_s7QQU [Occ=Once]
                                            _ [Occ=Dead]
                                            _ [Occ=Dead]
                                            _ [Occ=Dead]
                                            _ [Occ=Dead] ->
              ds1_s7QQU;
        };

GHC.IO.Encoding.Types.mkTextEncoder :: ()
[GblId[[RecSel(naughty)]], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE ()! [];

GHC.IO.Encoding.Types.mkTextDecoder :: ()
[GblId[[RecSel(naughty)]], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE ()! [];

GHC.IO.Encoding.Types.textEncodingName
  :: GHC.IO.Encoding.Types.TextEncoding -> GHC.Base.String
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s7QQZ]
        case ds_s7QQZ of {
          GHC.IO.Encoding.Types.TextEncoding ds1_s7QR1 [Occ=Once]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead] ->
              ds1_s7QR1;
        };

GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec
  :: GHC.Types.Int
     -> GHC.IO.Encoding.Types.TextEncoding -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s7QR4 x_s7QR5 s_s7QR6]
        case x_s7QR5 of {
          GHC.IO.Encoding.Types.TextEncoding ds1_s7QR8 [Occ=Once]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead] ->
              GHC.Base.++ ds1_s7QR8 s_s7QR6;
        };

GHC.IO.Encoding.Types.$fShowTextEncoding1
  :: GHC.IO.Encoding.Types.TextEncoding
     -> GHC.Base.String -> [GHC.Types.Char]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s7QRb s_s7QRc]
        case x_s7QRb of {
          GHC.IO.Encoding.Types.TextEncoding ds_s7QRe [Occ=Once]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead] ->
              GHC.Base.++ ds_s7QRe s_s7QRc;
        };

GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList
  :: [GHC.IO.Encoding.Types.TextEncoding] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s7QRh s_s7QRi]
        GHC.Show.showList__
            GHC.IO.Encoding.Types.$fShowTextEncoding1 ls_s7QRh s_s7QRi;

GHC.IO.Encoding.Types.$fShowTextEncoding [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Encoding.Types.TextEncoding
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec
                                    GHC.IO.Encoding.Types.textEncodingName
                                    GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList];

GHC.IO.Encoding.Types.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.Encoding.Types.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$trModule4];

GHC.IO.Encoding.Types.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Encoding.Types"#;

GHC.IO.Encoding.Types.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$trModule2];

GHC.IO.Encoding.Types.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Encoding.Types.$trModule3
                                     GHC.IO.Encoding.Types.$trModule1];

$krep_r7QPf :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc()
                                              GHC.Types.[]];

$krep1_r7QPg :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Word.$tcWord8
                                              GHC.Types.[]];

$krep2_r7QPh :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep3_r7QPi :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r7QPf GHC.Types.[]];

$krep4_r7QPj :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep3_r7QPi];

$krep5_r7QPk :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r7QPh GHC.Types.[]];

$krep6_r7QPl :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep5_r7QPk];

GHC.IO.Encoding.Types.$tcBufferCodec1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$*
                                         GHC.Types.krep$*->*->*];

$krep7_r7QPm :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [2#];

$krep8_r7QPn :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep7_r7QPm $krep4_r7QPj];

$krep9_r7QPo :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep7_r7QPm GHC.Types.[]];

$krep10_r7QPp :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep9_r7QPo];

$krep11_r7QPq :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [1#];

$krep12_r7QPr :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep11_r7QPq GHC.Types.[]];

$krep13_r7QPs :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Buffer.$tcBuffer
                                              $krep12_r7QPr];

$krep14_r7QPt :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep15_r7QPu :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep14_r7QPt GHC.Types.[]];

$krep16_r7QPv :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Buffer.$tcBuffer
                                              $krep15_r7QPu];

$krep17_r7QPw :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep13_r7QPs GHC.Types.[]];

$krep18_r7QPx :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep16_r7QPv $krep17_r7QPw];

$krep19_r7QPy :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,)
                                              $krep18_r7QPx];

$krep20_r7QPz :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep19_r7QPy GHC.Types.[]];

$krep21_r7QPA :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep20_r7QPz];

$krep22_r7QPB :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep13_r7QPs $krep21_r7QPA];

$krep23_r7QPC :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep16_r7QPv $krep22_r7QPB];

GHC.IO.Encoding.Types.$tcCodingProgress2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "CodingProgress"#;

GHC.IO.Encoding.Types.$tcCodingProgress1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$tcCodingProgress2];

GHC.IO.Encoding.Types.$tcCodingProgress :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4536835953909491444##
                                    10020924989385933984##
                                    GHC.IO.Encoding.Types.$trModule
                                    GHC.IO.Encoding.Types.$tcCodingProgress1
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.Encoding.Types.$tc'InputUnderflow1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Encoding.Types.$tcCodingProgress
                                              GHC.Types.[]];

GHC.IO.Encoding.Types.$tc'InputUnderflow3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'InputUnderflow"#;

GHC.IO.Encoding.Types.$tc'InputUnderflow2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$tc'InputUnderflow3];

GHC.IO.Encoding.Types.$tc'InputUnderflow :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [7310901713659969130##
                                    7213149953264042554##
                                    GHC.IO.Encoding.Types.$trModule
                                    GHC.IO.Encoding.Types.$tc'InputUnderflow2
                                    0#
                                    GHC.IO.Encoding.Types.$tc'InputUnderflow1];

GHC.IO.Encoding.Types.$tc'OutputUnderflow2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'OutputUnderflow"#;

GHC.IO.Encoding.Types.$tc'OutputUnderflow1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$tc'OutputUnderflow2];

GHC.IO.Encoding.Types.$tc'OutputUnderflow :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9796056422104521286##
                                    11682915108109873596##
                                    GHC.IO.Encoding.Types.$trModule
                                    GHC.IO.Encoding.Types.$tc'OutputUnderflow1
                                    0#
                                    GHC.IO.Encoding.Types.$tc'InputUnderflow1];

GHC.IO.Encoding.Types.$tc'InvalidSequence2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'InvalidSequence"#;

GHC.IO.Encoding.Types.$tc'InvalidSequence1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$tc'InvalidSequence2];

GHC.IO.Encoding.Types.$tc'InvalidSequence :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [11342030351124486013##
                                    4985313935970877948##
                                    GHC.IO.Encoding.Types.$trModule
                                    GHC.IO.Encoding.Types.$tc'InvalidSequence1
                                    0#
                                    GHC.IO.Encoding.Types.$tc'InputUnderflow1];

$krep24_r7QPD :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.Types.$tc'InputUnderflow1
                      $krep18_r7QPx];

$krep25_r7QPE :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,,)
                                              $krep24_r7QPD];

$krep26_r7QPF :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep25_r7QPE GHC.Types.[]];

$krep27_r7QPG :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep26_r7QPF];

$krep28_r7QPH :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep13_r7QPs $krep27_r7QPG];

$krep29_r7QPI :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep16_r7QPv $krep28_r7QPH];

GHC.IO.Encoding.Types.$tcBufferCodec3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BufferCodec"#;

GHC.IO.Encoding.Types.$tcBufferCodec2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$tcBufferCodec3];

GHC.IO.Encoding.Types.$tcBufferCodec :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [8585015667497772909##
                                    7745120500523128511##
                                    GHC.IO.Encoding.Types.$trModule
                                    GHC.IO.Encoding.Types.$tcBufferCodec2
                                    0#
                                    GHC.IO.Encoding.Types.$tcBufferCodec1];

$krep30_r7QPJ :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep11_r7QPq $krep9_r7QPo];

$krep31_r7QPK :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep14_r7QPt $krep30_r7QPJ];

$krep32_r7QPL :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Encoding.Types.$tcBufferCodec
                                              $krep31_r7QPK];

$krep33_r7QPM :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_r7QPn $krep32_r7QPL];

$krep34_r7QPN :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep10_r7QPp $krep33_r7QPM];

$krep35_r7QPO :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_r7QPj $krep34_r7QPN];

$krep36_r7QPP :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep23_r7QPC $krep35_r7QPO];

GHC.IO.Encoding.Types.$tc'BufferCodec1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r7QPI $krep36_r7QPP];

GHC.IO.Encoding.Types.$tc'BufferCodec3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BufferCodec"#;

GHC.IO.Encoding.Types.$tc'BufferCodec2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$tc'BufferCodec3];

GHC.IO.Encoding.Types.$tc'BufferCodec :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [7854563382940536875##
                                    13968497653111525953##
                                    GHC.IO.Encoding.Types.$trModule
                                    GHC.IO.Encoding.Types.$tc'BufferCodec2
                                    3#
                                    GHC.IO.Encoding.Types.$tc'BufferCodec1];

$krep37_r7QPQ :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r7QPh $krep15_r7QPu];

$krep38_r7QPR :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r7QPg $krep37_r7QPQ];

$krep39_r7QPS :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Encoding.Types.$tcBufferCodec
                                              $krep38_r7QPR];

$krep40_r7QPT :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep39_r7QPS GHC.Types.[]];

$krep41_r7QPU :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep40_r7QPT];

$krep42_r7QPV :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r7QPg $krep12_r7QPr];

$krep43_r7QPW :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r7QPh $krep42_r7QPV];

$krep44_r7QPX :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Encoding.Types.$tcBufferCodec
                                              $krep43_r7QPW];

$krep45_r7QPY :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep44_r7QPX GHC.Types.[]];

$krep46_r7QPZ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep45_r7QPY];

GHC.IO.Encoding.Types.$tcTextEncoding2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "TextEncoding"#;

GHC.IO.Encoding.Types.$tcTextEncoding1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$tcTextEncoding2];

GHC.IO.Encoding.Types.$tcTextEncoding :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17289914150150147669##
                                    3676960838620070165##
                                    GHC.IO.Encoding.Types.$trModule
                                    GHC.IO.Encoding.Types.$tcTextEncoding1
                                    0#
                                    GHC.Types.krep$*];

$krep47_r7QQ0 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Encoding.Types.$tcTextEncoding
                                              GHC.Types.[]];

$krep48_r7QQ1 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep46_r7QPZ $krep47_r7QQ0];

$krep49_r7QQ2 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep41_r7QPU $krep48_r7QQ1];

GHC.IO.Encoding.Types.$tc'TextEncoding1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep6_r7QPl $krep49_r7QQ2];

GHC.IO.Encoding.Types.$tc'TextEncoding3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'TextEncoding"#;

GHC.IO.Encoding.Types.$tc'TextEncoding2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$tc'TextEncoding3];

GHC.IO.Encoding.Types.$tc'TextEncoding :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6558277295920728213##
                                    3754397505420773780##
                                    GHC.IO.Encoding.Types.$trModule
                                    GHC.IO.Encoding.Types.$tc'TextEncoding2
                                    2#
                                    GHC.IO.Encoding.Types.$tc'TextEncoding1];

GHC.IO.Encoding.Types.InputUnderflow
  :: GHC.IO.Encoding.Types.CodingProgress
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.InputUnderflow! [];

GHC.IO.Encoding.Types.OutputUnderflow
  :: GHC.IO.Encoding.Types.CodingProgress
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.OutputUnderflow! [];

GHC.IO.Encoding.Types.InvalidSequence
  :: GHC.IO.Encoding.Types.CodingProgress
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.InvalidSequence! [];

GHC.IO.Encoding.Types.TextEncoding
  :: forall dstate estate.
     GHC.Base.String
     -> GHC.Types.IO (GHC.IO.Encoding.Types.TextDecoder dstate)
     -> GHC.Types.IO (GHC.IO.Encoding.Types.TextEncoder estate)
     -> GHC.IO.Encoding.Types.TextEncoding
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Encoding.Types.TextEncoding [eta_B3 eta_B2 eta_B1];

GHC.IO.Encoding.Types.BufferCodec
  :: forall from to state.
     GHC.IO.Encoding.Types.CodeBuffer from to
     -> (GHC.IO.Buffer.Buffer from
         -> GHC.IO.Buffer.Buffer to
         -> GHC.Types.IO
              (GHC.IO.Buffer.Buffer from, GHC.IO.Buffer.Buffer to))
     -> GHC.Types.IO ()
     -> GHC.Types.IO state
     -> (state -> GHC.Types.IO ())
     -> GHC.IO.Encoding.Types.BufferCodec from to state
[GblId[DataCon],
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.Encoding.Types.BufferCodec [eta_B5
                                           eta_B4
                                           eta_B3
                                           eta_B2
                                           eta_B1];


==================== Pre unarise: ====================
2018-03-16 16:02:58.794453859 UTC

GHC.IO.Encoding.Types.$fShowCodingProgress6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "InputUnderflow"#;

GHC.IO.Encoding.Types.$fShowCodingProgress5 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Types.$fShowCodingProgress6;

GHC.IO.Encoding.Types.$fShowCodingProgress4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "OutputUnderflow"#;

GHC.IO.Encoding.Types.$fShowCodingProgress3 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Types.$fShowCodingProgress4;

GHC.IO.Encoding.Types.$fShowCodingProgress2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "InvalidSequence"#;

GHC.IO.Encoding.Types.$fShowCodingProgress1 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Types.$fShowCodingProgress2;

GHC.IO.Encoding.Types.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Encoding.Types.CodingProgress
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s7RfV w1_s7RfW]
        case w_s7RfV of {
          GHC.IO.Encoding.Types.InputUnderflow ->
              GHC.Base.++ GHC.IO.Encoding.Types.$fShowCodingProgress5 w1_s7RfW;
          GHC.IO.Encoding.Types.OutputUnderflow ->
              GHC.Base.++ GHC.IO.Encoding.Types.$fShowCodingProgress3 w1_s7RfW;
          GHC.IO.Encoding.Types.InvalidSequence ->
              GHC.Base.++ GHC.IO.Encoding.Types.$fShowCodingProgress1 w1_s7RfW;
        };

GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int
     -> GHC.IO.Encoding.Types.CodingProgress -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s7RfY w1_s7RfZ w2_s7Rg0]
        GHC.IO.Encoding.Types.$w$cshowsPrec w1_s7RfZ w2_s7Rg0;

GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow
  :: GHC.IO.Encoding.Types.CodingProgress -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s7Rg1]
        case x_s7Rg1 of {
          GHC.IO.Encoding.Types.InputUnderflow ->
              GHC.IO.Encoding.Types.$fShowCodingProgress5;
          GHC.IO.Encoding.Types.OutputUnderflow ->
              GHC.IO.Encoding.Types.$fShowCodingProgress3;
          GHC.IO.Encoding.Types.InvalidSequence ->
              GHC.IO.Encoding.Types.$fShowCodingProgress1;
        };

GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList
  :: [GHC.IO.Encoding.Types.CodingProgress] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s7Rg3 s_s7Rg4]
        GHC.Show.showList__
            GHC.IO.Encoding.Types.$w$cshowsPrec ls_s7Rg3 s_s7Rg4;

GHC.IO.Encoding.Types.$fShowCodingProgress [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Encoding.Types.CodingProgress
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec
                                    GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow
                                    GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList];

GHC.IO.Encoding.Types.$fEqCodingProgress_$c==
  :: GHC.IO.Encoding.Types.CodingProgress
     -> GHC.IO.Encoding.Types.CodingProgress -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s7Rg5 ds1_s7Rg6]
        case ds_s7Rg5 of {
          GHC.IO.Encoding.Types.InputUnderflow ->
              case ds1_s7Rg6 of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Encoding.Types.InputUnderflow -> GHC.Types.True [];
              };
          GHC.IO.Encoding.Types.OutputUnderflow ->
              case ds1_s7Rg6 of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Encoding.Types.OutputUnderflow -> GHC.Types.True [];
              };
          GHC.IO.Encoding.Types.InvalidSequence ->
              case ds1_s7Rg6 of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Encoding.Types.InvalidSequence -> GHC.Types.True [];
              };
        };

GHC.IO.Encoding.Types.$fEqCodingProgress_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.IO.Encoding.Types.CodingProgress
     -> GHC.IO.Encoding.Types.CodingProgress -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s7Rgb eta1_s7Rgc]
        case eta_s7Rgb of {
          GHC.IO.Encoding.Types.InputUnderflow ->
              case eta1_s7Rgc of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Encoding.Types.InputUnderflow -> GHC.Types.False [];
              };
          GHC.IO.Encoding.Types.OutputUnderflow ->
              case eta1_s7Rgc of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Encoding.Types.OutputUnderflow -> GHC.Types.False [];
              };
          GHC.IO.Encoding.Types.InvalidSequence ->
              case eta1_s7Rgc of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Encoding.Types.InvalidSequence -> GHC.Types.False [];
              };
        };

GHC.IO.Encoding.Types.$fEqCodingProgress [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.IO.Encoding.Types.CodingProgress
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.IO.Encoding.Types.$fEqCodingProgress_$c==
                                     GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=];

GHC.IO.Encoding.Types.setState
  :: forall from to state.
     GHC.IO.Encoding.Types.BufferCodec from to state
     -> state -> GHC.Types.IO ()
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLS),1*U(A,A,A,A,1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_s7Rgh]
        case ds_s7Rgh of {
          GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                            _ [Occ=Dead]
                                            _ [Occ=Dead]
                                            _ [Occ=Dead]
                                            ds5_s7Rgn [Occ=Once] ->
              ds5_s7Rgn;
        };

GHC.IO.Encoding.Types.getState
  :: forall from to state.
     GHC.IO.Encoding.Types.BufferCodec from to state
     -> GHC.Types.IO state
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSL),1*U(A,A,A,1*U,A)>,
 Unf=OtherCon []] =
    [] \r [ds_s7Rgo]
        case ds_s7Rgo of {
          GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                            _ [Occ=Dead]
                                            _ [Occ=Dead]
                                            ds4_s7Rgt [Occ=Once]
                                            _ [Occ=Dead] ->
              ds4_s7Rgt;
        };

GHC.IO.Encoding.Types.close
  :: forall from to state.
     GHC.IO.Encoding.Types.BufferCodec from to state -> GHC.Types.IO ()
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSLL),1*U(A,A,1*U,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_s7Rgv]
        case ds_s7Rgv of {
          GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                            _ [Occ=Dead]
                                            ds3_s7Rgz [Occ=Once]
                                            _ [Occ=Dead]
                                            _ [Occ=Dead] ->
              ds3_s7Rgz;
        };

GHC.IO.Encoding.Types.recover
  :: forall from to state.
     GHC.IO.Encoding.Types.BufferCodec from to state
     -> GHC.IO.Buffer.Buffer from
     -> GHC.IO.Buffer.Buffer to
     -> GHC.Types.IO
          (GHC.IO.Buffer.Buffer from, GHC.IO.Buffer.Buffer to)
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLLL),1*U(A,1*U,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_s7RgC]
        case ds_s7RgC of {
          GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                            ds2_s7RgF [Occ=Once]
                                            _ [Occ=Dead]
                                            _ [Occ=Dead]
                                            _ [Occ=Dead] ->
              ds2_s7RgF;
        };

GHC.IO.Encoding.Types.encode
  :: forall from to state.
     GHC.IO.Encoding.Types.BufferCodec from to state
     -> GHC.IO.Encoding.Types.CodeBuffer from to
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLLL),1*U(1*U,A,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_s7RgJ]
        case ds_s7RgJ of {
          GHC.IO.Encoding.Types.BufferCodec ds1_s7RgL [Occ=Once]
                                            _ [Occ=Dead]
                                            _ [Occ=Dead]
                                            _ [Occ=Dead]
                                            _ [Occ=Dead] ->
              ds1_s7RgL;
        };

GHC.IO.Encoding.Types.mkTextEncoder :: ()
[GblId[[RecSel(naughty)]], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE ()! [];

GHC.IO.Encoding.Types.mkTextDecoder :: ()
[GblId[[RecSel(naughty)]], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE ()! [];

GHC.IO.Encoding.Types.textEncodingName
  :: GHC.IO.Encoding.Types.TextEncoding -> GHC.Base.String
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s7RgQ]
        case ds_s7RgQ of {
          GHC.IO.Encoding.Types.TextEncoding ds1_s7RgS [Occ=Once]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead] ->
              ds1_s7RgS;
        };

GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec
  :: GHC.Types.Int
     -> GHC.IO.Encoding.Types.TextEncoding -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s7RgV x_s7RgW s_s7RgX]
        case x_s7RgW of {
          GHC.IO.Encoding.Types.TextEncoding ds1_s7RgZ [Occ=Once]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead] ->
              GHC.Base.++ ds1_s7RgZ s_s7RgX;
        };

GHC.IO.Encoding.Types.$fShowTextEncoding1
  :: GHC.IO.Encoding.Types.TextEncoding
     -> GHC.Base.String -> [GHC.Types.Char]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s7Rh2 s_s7Rh3]
        case x_s7Rh2 of {
          GHC.IO.Encoding.Types.TextEncoding ds_s7Rh5 [Occ=Once]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead] ->
              GHC.Base.++ ds_s7Rh5 s_s7Rh3;
        };

GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList
  :: [GHC.IO.Encoding.Types.TextEncoding] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s7Rh8 s_s7Rh9]
        GHC.Show.showList__
            GHC.IO.Encoding.Types.$fShowTextEncoding1 ls_s7Rh8 s_s7Rh9;

GHC.IO.Encoding.Types.$fShowTextEncoding [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Encoding.Types.TextEncoding
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec
                                    GHC.IO.Encoding.Types.textEncodingName
                                    GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList];

GHC.IO.Encoding.Types.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.Encoding.Types.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$trModule4];

GHC.IO.Encoding.Types.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Encoding.Types"#;

GHC.IO.Encoding.Types.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$trModule2];

GHC.IO.Encoding.Types.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Encoding.Types.$trModule3
                                     GHC.IO.Encoding.Types.$trModule1];

$krep_r7QPf :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc()
                                              GHC.Types.[]];

$krep1_r7QPg :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Word.$tcWord8
                                              GHC.Types.[]];

$krep2_r7QPh :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep3_r7QPi :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r7QPf GHC.Types.[]];

$krep4_r7QPj :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep3_r7QPi];

$krep5_r7QPk :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r7QPh GHC.Types.[]];

$krep6_r7QPl :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep5_r7QPk];

GHC.IO.Encoding.Types.$tcBufferCodec1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$*
                                         GHC.Types.krep$*->*->*];

$krep7_r7QPm :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [2#];

$krep8_r7QPn :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep7_r7QPm $krep4_r7QPj];

$krep9_r7QPo :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep7_r7QPm GHC.Types.[]];

$krep10_r7QPp :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep9_r7QPo];

$krep11_r7QPq :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [1#];

$krep12_r7QPr :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep11_r7QPq GHC.Types.[]];

$krep13_r7QPs :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Buffer.$tcBuffer
                                              $krep12_r7QPr];

$krep14_r7QPt :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep15_r7QPu :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep14_r7QPt GHC.Types.[]];

$krep16_r7QPv :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Buffer.$tcBuffer
                                              $krep15_r7QPu];

$krep17_r7QPw :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep13_r7QPs GHC.Types.[]];

$krep18_r7QPx :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep16_r7QPv $krep17_r7QPw];

$krep19_r7QPy :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,)
                                              $krep18_r7QPx];

$krep20_r7QPz :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep19_r7QPy GHC.Types.[]];

$krep21_r7QPA :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep20_r7QPz];

$krep22_r7QPB :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep13_r7QPs $krep21_r7QPA];

$krep23_r7QPC :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep16_r7QPv $krep22_r7QPB];

GHC.IO.Encoding.Types.$tcCodingProgress2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "CodingProgress"#;

GHC.IO.Encoding.Types.$tcCodingProgress1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$tcCodingProgress2];

GHC.IO.Encoding.Types.$tcCodingProgress :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4536835953909491444##
                                    10020924989385933984##
                                    GHC.IO.Encoding.Types.$trModule
                                    GHC.IO.Encoding.Types.$tcCodingProgress1
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.Encoding.Types.$tc'InputUnderflow1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Encoding.Types.$tcCodingProgress
                                              GHC.Types.[]];

GHC.IO.Encoding.Types.$tc'InputUnderflow3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'InputUnderflow"#;

GHC.IO.Encoding.Types.$tc'InputUnderflow2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$tc'InputUnderflow3];

GHC.IO.Encoding.Types.$tc'InputUnderflow :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [7310901713659969130##
                                    7213149953264042554##
                                    GHC.IO.Encoding.Types.$trModule
                                    GHC.IO.Encoding.Types.$tc'InputUnderflow2
                                    0#
                                    GHC.IO.Encoding.Types.$tc'InputUnderflow1];

GHC.IO.Encoding.Types.$tc'OutputUnderflow2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'OutputUnderflow"#;

GHC.IO.Encoding.Types.$tc'OutputUnderflow1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$tc'OutputUnderflow2];

GHC.IO.Encoding.Types.$tc'OutputUnderflow :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9796056422104521286##
                                    11682915108109873596##
                                    GHC.IO.Encoding.Types.$trModule
                                    GHC.IO.Encoding.Types.$tc'OutputUnderflow1
                                    0#
                                    GHC.IO.Encoding.Types.$tc'InputUnderflow1];

GHC.IO.Encoding.Types.$tc'InvalidSequence2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'InvalidSequence"#;

GHC.IO.Encoding.Types.$tc'InvalidSequence1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$tc'InvalidSequence2];

GHC.IO.Encoding.Types.$tc'InvalidSequence :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [11342030351124486013##
                                    4985313935970877948##
                                    GHC.IO.Encoding.Types.$trModule
                                    GHC.IO.Encoding.Types.$tc'InvalidSequence1
                                    0#
                                    GHC.IO.Encoding.Types.$tc'InputUnderflow1];

$krep24_r7QPD :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.Types.$tc'InputUnderflow1
                      $krep18_r7QPx];

$krep25_r7QPE :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,,)
                                              $krep24_r7QPD];

$krep26_r7QPF :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep25_r7QPE GHC.Types.[]];

$krep27_r7QPG :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep26_r7QPF];

$krep28_r7QPH :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep13_r7QPs $krep27_r7QPG];

$krep29_r7QPI :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep16_r7QPv $krep28_r7QPH];

GHC.IO.Encoding.Types.$tcBufferCodec3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BufferCodec"#;

GHC.IO.Encoding.Types.$tcBufferCodec2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$tcBufferCodec3];

GHC.IO.Encoding.Types.$tcBufferCodec :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [8585015667497772909##
                                    7745120500523128511##
                                    GHC.IO.Encoding.Types.$trModule
                                    GHC.IO.Encoding.Types.$tcBufferCodec2
                                    0#
                                    GHC.IO.Encoding.Types.$tcBufferCodec1];

$krep30_r7QPJ :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep11_r7QPq $krep9_r7QPo];

$krep31_r7QPK :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep14_r7QPt $krep30_r7QPJ];

$krep32_r7QPL :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Encoding.Types.$tcBufferCodec
                                              $krep31_r7QPK];

$krep33_r7QPM :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_r7QPn $krep32_r7QPL];

$krep34_r7QPN :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep10_r7QPp $krep33_r7QPM];

$krep35_r7QPO :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_r7QPj $krep34_r7QPN];

$krep36_r7QPP :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep23_r7QPC $krep35_r7QPO];

GHC.IO.Encoding.Types.$tc'BufferCodec1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r7QPI $krep36_r7QPP];

GHC.IO.Encoding.Types.$tc'BufferCodec3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BufferCodec"#;

GHC.IO.Encoding.Types.$tc'BufferCodec2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$tc'BufferCodec3];

GHC.IO.Encoding.Types.$tc'BufferCodec :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [7854563382940536875##
                                    13968497653111525953##
                                    GHC.IO.Encoding.Types.$trModule
                                    GHC.IO.Encoding.Types.$tc'BufferCodec2
                                    3#
                                    GHC.IO.Encoding.Types.$tc'BufferCodec1];

$krep37_r7QPQ :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r7QPh $krep15_r7QPu];

$krep38_r7QPR :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r7QPg $krep37_r7QPQ];

$krep39_r7QPS :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Encoding.Types.$tcBufferCodec
                                              $krep38_r7QPR];

$krep40_r7QPT :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep39_r7QPS GHC.Types.[]];

$krep41_r7QPU :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep40_r7QPT];

$krep42_r7QPV :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r7QPg $krep12_r7QPr];

$krep43_r7QPW :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r7QPh $krep42_r7QPV];

$krep44_r7QPX :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Encoding.Types.$tcBufferCodec
                                              $krep43_r7QPW];

$krep45_r7QPY :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep44_r7QPX GHC.Types.[]];

$krep46_r7QPZ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep45_r7QPY];

GHC.IO.Encoding.Types.$tcTextEncoding2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "TextEncoding"#;

GHC.IO.Encoding.Types.$tcTextEncoding1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$tcTextEncoding2];

GHC.IO.Encoding.Types.$tcTextEncoding :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17289914150150147669##
                                    3676960838620070165##
                                    GHC.IO.Encoding.Types.$trModule
                                    GHC.IO.Encoding.Types.$tcTextEncoding1
                                    0#
                                    GHC.Types.krep$*];

$krep47_r7QQ0 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Encoding.Types.$tcTextEncoding
                                              GHC.Types.[]];

$krep48_r7QQ1 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep46_r7QPZ $krep47_r7QQ0];

$krep49_r7QQ2 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep41_r7QPU $krep48_r7QQ1];

GHC.IO.Encoding.Types.$tc'TextEncoding1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep6_r7QPl $krep49_r7QQ2];

GHC.IO.Encoding.Types.$tc'TextEncoding3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'TextEncoding"#;

GHC.IO.Encoding.Types.$tc'TextEncoding2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$tc'TextEncoding3];

GHC.IO.Encoding.Types.$tc'TextEncoding :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6558277295920728213##
                                    3754397505420773780##
                                    GHC.IO.Encoding.Types.$trModule
                                    GHC.IO.Encoding.Types.$tc'TextEncoding2
                                    2#
                                    GHC.IO.Encoding.Types.$tc'TextEncoding1];

GHC.IO.Encoding.Types.InputUnderflow
  :: GHC.IO.Encoding.Types.CodingProgress
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.InputUnderflow! [];

GHC.IO.Encoding.Types.OutputUnderflow
  :: GHC.IO.Encoding.Types.CodingProgress
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.OutputUnderflow! [];

GHC.IO.Encoding.Types.InvalidSequence
  :: GHC.IO.Encoding.Types.CodingProgress
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.InvalidSequence! [];

GHC.IO.Encoding.Types.TextEncoding
  :: forall dstate estate.
     GHC.Base.String
     -> GHC.Types.IO (GHC.IO.Encoding.Types.TextDecoder dstate)
     -> GHC.Types.IO (GHC.IO.Encoding.Types.TextEncoder estate)
     -> GHC.IO.Encoding.Types.TextEncoding
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Encoding.Types.TextEncoding [eta_B3 eta_B2 eta_B1];

GHC.IO.Encoding.Types.BufferCodec
  :: forall from to state.
     GHC.IO.Encoding.Types.CodeBuffer from to
     -> (GHC.IO.Buffer.Buffer from
         -> GHC.IO.Buffer.Buffer to
         -> GHC.Types.IO
              (GHC.IO.Buffer.Buffer from, GHC.IO.Buffer.Buffer to))
     -> GHC.Types.IO ()
     -> GHC.Types.IO state
     -> (state -> GHC.Types.IO ())
     -> GHC.IO.Encoding.Types.BufferCodec from to state
[GblId[DataCon],
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.Encoding.Types.BufferCodec [eta_B5
                                           eta_B4
                                           eta_B3
                                           eta_B2
                                           eta_B1];


==================== STG syntax: ====================
2018-03-16 16:02:58.804503414 UTC

GHC.IO.Encoding.Types.$fShowCodingProgress6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "InputUnderflow"#;

GHC.IO.Encoding.Types.$fShowCodingProgress5 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Types.$fShowCodingProgress6;

GHC.IO.Encoding.Types.$fShowCodingProgress4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "OutputUnderflow"#;

GHC.IO.Encoding.Types.$fShowCodingProgress3 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Types.$fShowCodingProgress4;

GHC.IO.Encoding.Types.$fShowCodingProgress2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "InvalidSequence"#;

GHC.IO.Encoding.Types.$fShowCodingProgress1 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Encoding.Types.$fShowCodingProgress2;

GHC.IO.Encoding.Types.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Encoding.Types.CodingProgress
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s7RfV w1_s7RfW]
        case w_s7RfV of {
          GHC.IO.Encoding.Types.InputUnderflow ->
              GHC.Base.++ GHC.IO.Encoding.Types.$fShowCodingProgress5 w1_s7RfW;
          GHC.IO.Encoding.Types.OutputUnderflow ->
              GHC.Base.++ GHC.IO.Encoding.Types.$fShowCodingProgress3 w1_s7RfW;
          GHC.IO.Encoding.Types.InvalidSequence ->
              GHC.Base.++ GHC.IO.Encoding.Types.$fShowCodingProgress1 w1_s7RfW;
        };

GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int
     -> GHC.IO.Encoding.Types.CodingProgress -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s7RfY w1_s7RfZ w2_s7Rg0]
        GHC.IO.Encoding.Types.$w$cshowsPrec w1_s7RfZ w2_s7Rg0;

GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow
  :: GHC.IO.Encoding.Types.CodingProgress -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s7Rg1]
        case x_s7Rg1 of {
          GHC.IO.Encoding.Types.InputUnderflow ->
              GHC.IO.Encoding.Types.$fShowCodingProgress5;
          GHC.IO.Encoding.Types.OutputUnderflow ->
              GHC.IO.Encoding.Types.$fShowCodingProgress3;
          GHC.IO.Encoding.Types.InvalidSequence ->
              GHC.IO.Encoding.Types.$fShowCodingProgress1;
        };

GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList
  :: [GHC.IO.Encoding.Types.CodingProgress] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s7Rg3 s_s7Rg4]
        GHC.Show.showList__
            GHC.IO.Encoding.Types.$w$cshowsPrec ls_s7Rg3 s_s7Rg4;

GHC.IO.Encoding.Types.$fShowCodingProgress [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Encoding.Types.CodingProgress
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec
                                    GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow
                                    GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList];

GHC.IO.Encoding.Types.$fEqCodingProgress_$c==
  :: GHC.IO.Encoding.Types.CodingProgress
     -> GHC.IO.Encoding.Types.CodingProgress -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s7Rg5 ds1_s7Rg6]
        case ds_s7Rg5 of {
          GHC.IO.Encoding.Types.InputUnderflow ->
              case ds1_s7Rg6 of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Encoding.Types.InputUnderflow -> GHC.Types.True [];
              };
          GHC.IO.Encoding.Types.OutputUnderflow ->
              case ds1_s7Rg6 of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Encoding.Types.OutputUnderflow -> GHC.Types.True [];
              };
          GHC.IO.Encoding.Types.InvalidSequence ->
              case ds1_s7Rg6 of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Encoding.Types.InvalidSequence -> GHC.Types.True [];
              };
        };

GHC.IO.Encoding.Types.$fEqCodingProgress_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.IO.Encoding.Types.CodingProgress
     -> GHC.IO.Encoding.Types.CodingProgress -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s7Rgb eta1_s7Rgc]
        case eta_s7Rgb of {
          GHC.IO.Encoding.Types.InputUnderflow ->
              case eta1_s7Rgc of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Encoding.Types.InputUnderflow -> GHC.Types.False [];
              };
          GHC.IO.Encoding.Types.OutputUnderflow ->
              case eta1_s7Rgc of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Encoding.Types.OutputUnderflow -> GHC.Types.False [];
              };
          GHC.IO.Encoding.Types.InvalidSequence ->
              case eta1_s7Rgc of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Encoding.Types.InvalidSequence -> GHC.Types.False [];
              };
        };

GHC.IO.Encoding.Types.$fEqCodingProgress [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.IO.Encoding.Types.CodingProgress
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.IO.Encoding.Types.$fEqCodingProgress_$c==
                                     GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=];

GHC.IO.Encoding.Types.setState
  :: forall from to state.
     GHC.IO.Encoding.Types.BufferCodec from to state
     -> state -> GHC.Types.IO ()
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLS),1*U(A,A,A,A,1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_s7Rgh]
        case ds_s7Rgh of {
          GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                            _ [Occ=Dead]
                                            _ [Occ=Dead]
                                            _ [Occ=Dead]
                                            ds5_s7Rgn [Occ=Once] ->
              ds5_s7Rgn;
        };

GHC.IO.Encoding.Types.getState
  :: forall from to state.
     GHC.IO.Encoding.Types.BufferCodec from to state
     -> GHC.Types.IO state
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSL),1*U(A,A,A,1*U,A)>,
 Unf=OtherCon []] =
    [] \r [ds_s7Rgo]
        case ds_s7Rgo of {
          GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                            _ [Occ=Dead]
                                            _ [Occ=Dead]
                                            ds4_s7Rgt [Occ=Once]
                                            _ [Occ=Dead] ->
              ds4_s7Rgt;
        };

GHC.IO.Encoding.Types.close
  :: forall from to state.
     GHC.IO.Encoding.Types.BufferCodec from to state -> GHC.Types.IO ()
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSLL),1*U(A,A,1*U,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_s7Rgv]
        case ds_s7Rgv of {
          GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                            _ [Occ=Dead]
                                            ds3_s7Rgz [Occ=Once]
                                            _ [Occ=Dead]
                                            _ [Occ=Dead] ->
              ds3_s7Rgz;
        };

GHC.IO.Encoding.Types.recover
  :: forall from to state.
     GHC.IO.Encoding.Types.BufferCodec from to state
     -> GHC.IO.Buffer.Buffer from
     -> GHC.IO.Buffer.Buffer to
     -> GHC.Types.IO
          (GHC.IO.Buffer.Buffer from, GHC.IO.Buffer.Buffer to)
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLLL),1*U(A,1*U,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_s7RgC]
        case ds_s7RgC of {
          GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                            ds2_s7RgF [Occ=Once]
                                            _ [Occ=Dead]
                                            _ [Occ=Dead]
                                            _ [Occ=Dead] ->
              ds2_s7RgF;
        };

GHC.IO.Encoding.Types.encode
  :: forall from to state.
     GHC.IO.Encoding.Types.BufferCodec from to state
     -> GHC.IO.Encoding.Types.CodeBuffer from to
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLLL),1*U(1*U,A,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_s7RgJ]
        case ds_s7RgJ of {
          GHC.IO.Encoding.Types.BufferCodec ds1_s7RgL [Occ=Once]
                                            _ [Occ=Dead]
                                            _ [Occ=Dead]
                                            _ [Occ=Dead]
                                            _ [Occ=Dead] ->
              ds1_s7RgL;
        };

GHC.IO.Encoding.Types.mkTextEncoder :: ()
[GblId[[RecSel(naughty)]], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE ()! [];

GHC.IO.Encoding.Types.mkTextDecoder :: ()
[GblId[[RecSel(naughty)]], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE ()! [];

GHC.IO.Encoding.Types.textEncodingName
  :: GHC.IO.Encoding.Types.TextEncoding -> GHC.Base.String
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s7RgQ]
        case ds_s7RgQ of {
          GHC.IO.Encoding.Types.TextEncoding ds1_s7RgS [Occ=Once]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead] ->
              ds1_s7RgS;
        };

GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec
  :: GHC.Types.Int
     -> GHC.IO.Encoding.Types.TextEncoding -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s7RgV x_s7RgW s_s7RgX]
        case x_s7RgW of {
          GHC.IO.Encoding.Types.TextEncoding ds1_s7RgZ [Occ=Once]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead] ->
              GHC.Base.++ ds1_s7RgZ s_s7RgX;
        };

GHC.IO.Encoding.Types.$fShowTextEncoding1
  :: GHC.IO.Encoding.Types.TextEncoding
     -> GHC.Base.String -> [GHC.Types.Char]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s7Rh2 s_s7Rh3]
        case x_s7Rh2 of {
          GHC.IO.Encoding.Types.TextEncoding ds_s7Rh5 [Occ=Once]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead] ->
              GHC.Base.++ ds_s7Rh5 s_s7Rh3;
        };

GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList
  :: [GHC.IO.Encoding.Types.TextEncoding] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s7Rh8 s_s7Rh9]
        GHC.Show.showList__
            GHC.IO.Encoding.Types.$fShowTextEncoding1 ls_s7Rh8 s_s7Rh9;

GHC.IO.Encoding.Types.$fShowTextEncoding [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Encoding.Types.TextEncoding
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec
                                    GHC.IO.Encoding.Types.textEncodingName
                                    GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList];

GHC.IO.Encoding.Types.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.Encoding.Types.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$trModule4];

GHC.IO.Encoding.Types.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Encoding.Types"#;

GHC.IO.Encoding.Types.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$trModule2];

GHC.IO.Encoding.Types.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Encoding.Types.$trModule3
                                     GHC.IO.Encoding.Types.$trModule1];

$krep_r7QPf :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc()
                                              GHC.Types.[]];

$krep1_r7QPg :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Word.$tcWord8
                                              GHC.Types.[]];

$krep2_r7QPh :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep3_r7QPi :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r7QPf GHC.Types.[]];

$krep4_r7QPj :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep3_r7QPi];

$krep5_r7QPk :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r7QPh GHC.Types.[]];

$krep6_r7QPl :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep5_r7QPk];

GHC.IO.Encoding.Types.$tcBufferCodec1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$*
                                         GHC.Types.krep$*->*->*];

$krep7_r7QPm :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [2#];

$krep8_r7QPn :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep7_r7QPm $krep4_r7QPj];

$krep9_r7QPo :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep7_r7QPm GHC.Types.[]];

$krep10_r7QPp :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep9_r7QPo];

$krep11_r7QPq :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [1#];

$krep12_r7QPr :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep11_r7QPq GHC.Types.[]];

$krep13_r7QPs :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Buffer.$tcBuffer
                                              $krep12_r7QPr];

$krep14_r7QPt :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep15_r7QPu :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep14_r7QPt GHC.Types.[]];

$krep16_r7QPv :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Buffer.$tcBuffer
                                              $krep15_r7QPu];

$krep17_r7QPw :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep13_r7QPs GHC.Types.[]];

$krep18_r7QPx :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep16_r7QPv $krep17_r7QPw];

$krep19_r7QPy :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,)
                                              $krep18_r7QPx];

$krep20_r7QPz :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep19_r7QPy GHC.Types.[]];

$krep21_r7QPA :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep20_r7QPz];

$krep22_r7QPB :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep13_r7QPs $krep21_r7QPA];

$krep23_r7QPC :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep16_r7QPv $krep22_r7QPB];

GHC.IO.Encoding.Types.$tcCodingProgress2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "CodingProgress"#;

GHC.IO.Encoding.Types.$tcCodingProgress1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$tcCodingProgress2];

GHC.IO.Encoding.Types.$tcCodingProgress :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4536835953909491444##
                                    10020924989385933984##
                                    GHC.IO.Encoding.Types.$trModule
                                    GHC.IO.Encoding.Types.$tcCodingProgress1
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.Encoding.Types.$tc'InputUnderflow1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Encoding.Types.$tcCodingProgress
                                              GHC.Types.[]];

GHC.IO.Encoding.Types.$tc'InputUnderflow3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'InputUnderflow"#;

GHC.IO.Encoding.Types.$tc'InputUnderflow2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$tc'InputUnderflow3];

GHC.IO.Encoding.Types.$tc'InputUnderflow :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [7310901713659969130##
                                    7213149953264042554##
                                    GHC.IO.Encoding.Types.$trModule
                                    GHC.IO.Encoding.Types.$tc'InputUnderflow2
                                    0#
                                    GHC.IO.Encoding.Types.$tc'InputUnderflow1];

GHC.IO.Encoding.Types.$tc'OutputUnderflow2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'OutputUnderflow"#;

GHC.IO.Encoding.Types.$tc'OutputUnderflow1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$tc'OutputUnderflow2];

GHC.IO.Encoding.Types.$tc'OutputUnderflow :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9796056422104521286##
                                    11682915108109873596##
                                    GHC.IO.Encoding.Types.$trModule
                                    GHC.IO.Encoding.Types.$tc'OutputUnderflow1
                                    0#
                                    GHC.IO.Encoding.Types.$tc'InputUnderflow1];

GHC.IO.Encoding.Types.$tc'InvalidSequence2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'InvalidSequence"#;

GHC.IO.Encoding.Types.$tc'InvalidSequence1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$tc'InvalidSequence2];

GHC.IO.Encoding.Types.$tc'InvalidSequence :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [11342030351124486013##
                                    4985313935970877948##
                                    GHC.IO.Encoding.Types.$trModule
                                    GHC.IO.Encoding.Types.$tc'InvalidSequence1
                                    0#
                                    GHC.IO.Encoding.Types.$tc'InputUnderflow1];

$krep24_r7QPD :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.Types.$tc'InputUnderflow1
                      $krep18_r7QPx];

$krep25_r7QPE :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,,)
                                              $krep24_r7QPD];

$krep26_r7QPF :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep25_r7QPE GHC.Types.[]];

$krep27_r7QPG :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep26_r7QPF];

$krep28_r7QPH :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep13_r7QPs $krep27_r7QPG];

$krep29_r7QPI :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep16_r7QPv $krep28_r7QPH];

GHC.IO.Encoding.Types.$tcBufferCodec3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BufferCodec"#;

GHC.IO.Encoding.Types.$tcBufferCodec2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$tcBufferCodec3];

GHC.IO.Encoding.Types.$tcBufferCodec :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [8585015667497772909##
                                    7745120500523128511##
                                    GHC.IO.Encoding.Types.$trModule
                                    GHC.IO.Encoding.Types.$tcBufferCodec2
                                    0#
                                    GHC.IO.Encoding.Types.$tcBufferCodec1];

$krep30_r7QPJ :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep11_r7QPq $krep9_r7QPo];

$krep31_r7QPK :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep14_r7QPt $krep30_r7QPJ];

$krep32_r7QPL :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Encoding.Types.$tcBufferCodec
                                              $krep31_r7QPK];

$krep33_r7QPM :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_r7QPn $krep32_r7QPL];

$krep34_r7QPN :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep10_r7QPp $krep33_r7QPM];

$krep35_r7QPO :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_r7QPj $krep34_r7QPN];

$krep36_r7QPP :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep23_r7QPC $krep35_r7QPO];

GHC.IO.Encoding.Types.$tc'BufferCodec1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r7QPI $krep36_r7QPP];

GHC.IO.Encoding.Types.$tc'BufferCodec3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BufferCodec"#;

GHC.IO.Encoding.Types.$tc'BufferCodec2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$tc'BufferCodec3];

GHC.IO.Encoding.Types.$tc'BufferCodec :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [7854563382940536875##
                                    13968497653111525953##
                                    GHC.IO.Encoding.Types.$trModule
                                    GHC.IO.Encoding.Types.$tc'BufferCodec2
                                    3#
                                    GHC.IO.Encoding.Types.$tc'BufferCodec1];

$krep37_r7QPQ :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r7QPh $krep15_r7QPu];

$krep38_r7QPR :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r7QPg $krep37_r7QPQ];

$krep39_r7QPS :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Encoding.Types.$tcBufferCodec
                                              $krep38_r7QPR];

$krep40_r7QPT :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep39_r7QPS GHC.Types.[]];

$krep41_r7QPU :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep40_r7QPT];

$krep42_r7QPV :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r7QPg $krep12_r7QPr];

$krep43_r7QPW :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r7QPh $krep42_r7QPV];

$krep44_r7QPX :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Encoding.Types.$tcBufferCodec
                                              $krep43_r7QPW];

$krep45_r7QPY :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep44_r7QPX GHC.Types.[]];

$krep46_r7QPZ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep45_r7QPY];

GHC.IO.Encoding.Types.$tcTextEncoding2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "TextEncoding"#;

GHC.IO.Encoding.Types.$tcTextEncoding1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$tcTextEncoding2];

GHC.IO.Encoding.Types.$tcTextEncoding :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17289914150150147669##
                                    3676960838620070165##
                                    GHC.IO.Encoding.Types.$trModule
                                    GHC.IO.Encoding.Types.$tcTextEncoding1
                                    0#
                                    GHC.Types.krep$*];

$krep47_r7QQ0 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Encoding.Types.$tcTextEncoding
                                              GHC.Types.[]];

$krep48_r7QQ1 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep46_r7QPZ $krep47_r7QQ0];

$krep49_r7QQ2 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep41_r7QPU $krep48_r7QQ1];

GHC.IO.Encoding.Types.$tc'TextEncoding1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep6_r7QPl $krep49_r7QQ2];

GHC.IO.Encoding.Types.$tc'TextEncoding3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'TextEncoding"#;

GHC.IO.Encoding.Types.$tc'TextEncoding2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.Types.$tc'TextEncoding3];

GHC.IO.Encoding.Types.$tc'TextEncoding :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6558277295920728213##
                                    3754397505420773780##
                                    GHC.IO.Encoding.Types.$trModule
                                    GHC.IO.Encoding.Types.$tc'TextEncoding2
                                    2#
                                    GHC.IO.Encoding.Types.$tc'TextEncoding1];

GHC.IO.Encoding.Types.InputUnderflow
  :: GHC.IO.Encoding.Types.CodingProgress
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.InputUnderflow! [];

GHC.IO.Encoding.Types.OutputUnderflow
  :: GHC.IO.Encoding.Types.CodingProgress
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.OutputUnderflow! [];

GHC.IO.Encoding.Types.InvalidSequence
  :: GHC.IO.Encoding.Types.CodingProgress
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Encoding.Types.InvalidSequence! [];

GHC.IO.Encoding.Types.TextEncoding
  :: forall dstate estate.
     GHC.Base.String
     -> GHC.Types.IO (GHC.IO.Encoding.Types.TextDecoder dstate)
     -> GHC.Types.IO (GHC.IO.Encoding.Types.TextEncoder estate)
     -> GHC.IO.Encoding.Types.TextEncoding
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Encoding.Types.TextEncoding [eta_B3 eta_B2 eta_B1];

GHC.IO.Encoding.Types.BufferCodec
  :: forall from to state.
     GHC.IO.Encoding.Types.CodeBuffer from to
     -> (GHC.IO.Buffer.Buffer from
         -> GHC.IO.Buffer.Buffer to
         -> GHC.Types.IO
              (GHC.IO.Buffer.Buffer from, GHC.IO.Buffer.Buffer to))
     -> GHC.Types.IO ()
     -> GHC.Types.IO state
     -> (state -> GHC.Types.IO ())
     -> GHC.IO.Encoding.Types.BufferCodec from to state
[GblId[DataCon],
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.Encoding.Types.BufferCodec [eta_B5
                                           eta_B4
                                           eta_B3
                                           eta_B2
                                           eta_B1];

