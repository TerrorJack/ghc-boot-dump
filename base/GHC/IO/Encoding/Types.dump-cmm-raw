
==================== Raw Cmm ====================
2018-03-16 16:02:57.931883744 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:02:57.934055974 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$fShowCodingProgress6_bytes" {
     GHC.IO.Encoding.Types.$fShowCodingProgress6_bytes:
         I8[] [73,110,112,117,116,85,110,100,101,114,102,108,111,119]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.937556065 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress5_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress5_closure:
         const GHC.IO.Encoding.Types.$fShowCodingProgress5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.Types.$fShowCodingProgress5_entry() //  [R1]
         { []
         }
     {offset
       c7R4k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7R4l; else goto c7R4m;
       c7R4l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7R4m: // global
           (_c7R4h::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7R4h::I64 == 0) goto c7R4j; else goto c7R4i;
       c7R4j: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7R4i: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7R4h::I64;
           R2 = GHC.IO.Encoding.Types.$fShowCodingProgress6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.$fShowCodingProgress5_info" {
     GHC.IO.Encoding.Types.$fShowCodingProgress5_info:
         const GHC.IO.Encoding.Types.$fShowCodingProgress5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.942948613 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$fShowCodingProgress4_bytes" {
     GHC.IO.Encoding.Types.$fShowCodingProgress4_bytes:
         I8[] [79,117,116,112,117,116,85,110,100,101,114,102,108,111,119]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.946760823 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress3_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress3_closure:
         const GHC.IO.Encoding.Types.$fShowCodingProgress3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.Types.$fShowCodingProgress3_entry() //  [R1]
         { []
         }
     {offset
       c7R4B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7R4C; else goto c7R4D;
       c7R4C: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7R4D: // global
           (_c7R4y::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7R4y::I64 == 0) goto c7R4A; else goto c7R4z;
       c7R4A: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7R4z: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7R4y::I64;
           R2 = GHC.IO.Encoding.Types.$fShowCodingProgress4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.$fShowCodingProgress3_info" {
     GHC.IO.Encoding.Types.$fShowCodingProgress3_info:
         const GHC.IO.Encoding.Types.$fShowCodingProgress3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.951969676 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$fShowCodingProgress2_bytes" {
     GHC.IO.Encoding.Types.$fShowCodingProgress2_bytes:
         I8[] [73,110,118,97,108,105,100,83,101,113,117,101,110,99,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.955097729 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress1_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress1_closure:
         const GHC.IO.Encoding.Types.$fShowCodingProgress1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.Types.$fShowCodingProgress1_entry() //  [R1]
         { []
         }
     {offset
       c7R4S: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7R4T; else goto c7R4U;
       c7R4T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7R4U: // global
           (_c7R4P::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7R4P::I64 == 0) goto c7R4R; else goto c7R4Q;
       c7R4R: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7R4Q: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7R4P::I64;
           R2 = GHC.IO.Encoding.Types.$fShowCodingProgress2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.$fShowCodingProgress1_info" {
     GHC.IO.Encoding.Types.$fShowCodingProgress1_info:
         const GHC.IO.Encoding.Types.$fShowCodingProgress1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.962791085 UTC

[section ""data" . GHC.IO.Encoding.Types.$w$cshowsPrec_closure" {
     GHC.IO.Encoding.Types.$w$cshowsPrec_closure:
         const GHC.IO.Encoding.Types.$w$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Encoding.Types.$w$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c7R5e: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7R5f; else goto c7R5g;
       c7R5f: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7R5g: // global
           I64[Sp - 16] = block_c7R56_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7R5r; else goto c7R57;
       u7R5r: // global
           call _c7R56(R1) args: 0, res: 0, upd: 0;
       c7R57: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.$w$cshowsPrec_info" {
     GHC.IO.Encoding.Types.$w$cshowsPrec_info:
         const GHC.IO.Encoding.Types.$w$cshowsPrec_entry;
         const 0;
         const 64424509454;
         const 8589934607;
         const S7QSa_srt;
 },
 _c7R56() //  [R1]
         { []
         }
     {offset
       c7R56: // global
           _s7QQ5::P64 = P64[Sp + 8];
           _c7R5d::P64 = R1 & 7;
           if (_c7R5d::P64 < 3) goto u7R5q; else goto c7R5c;
       u7R5q: // global
           if (_c7R5d::P64 < 2) goto c7R5a; else goto c7R5b;
       c7R5a: // global
           R3 = _s7QQ5::P64;
           R2 = GHC.IO.Encoding.Types.$fShowCodingProgress5_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7R5b: // global
           R3 = _s7QQ5::P64;
           R2 = GHC.IO.Encoding.Types.$fShowCodingProgress3_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7R5c: // global
           R3 = _s7QQ5::P64;
           R2 = GHC.IO.Encoding.Types.$fShowCodingProgress1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7R56_info" {
     block_c7R56_info:
         const _c7R56;
         const 1;
         const 30064771102;
         const S7QSa_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.971570014 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_closure:
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_entry() //  [R3,
                                                                     R4]
         { []
         }
     {offset
       c7R5G: // global
           _s7QQ8::P64 = R3;
           R3 = R4;
           R2 = _s7QQ8::P64;
           call GHC.IO.Encoding.Types.$w$cshowsPrec_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_info" {
     GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_info:
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S7QSa_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.977227986 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_closure:
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_info;
         const 0;
 },
 GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c7R5Z: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7R60; else goto c7R61;
       c7R60: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7R61: // global
           I64[Sp - 8] = block_c7R5R_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7R6c; else goto c7R5S;
       u7R6c: // global
           call _c7R5R(R1) args: 0, res: 0, upd: 0;
       c7R5S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_info" {
     GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_info:
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_entry;
         const 0;
         const 64424509454;
         const 4294967301;
         const S7QSa_srt+8;
 },
 _c7R5R() //  [R1]
         { []
         }
     {offset
       c7R5R: // global
           _c7R5Y::P64 = R1 & 7;
           if (_c7R5Y::P64 < 3) goto u7R6b; else goto c7R5X;
       u7R6b: // global
           if (_c7R5Y::P64 < 2) goto c7R5V; else goto c7R5W;
       c7R5V: // global
           R1 = GHC.IO.Encoding.Types.$fShowCodingProgress5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7R5W: // global
           R1 = GHC.IO.Encoding.Types.$fShowCodingProgress3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7R5X: // global
           R1 = GHC.IO.Encoding.Types.$fShowCodingProgress1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7R5R_info" {
     block_c7R5R_info:
         const _c7R5R;
         const 0;
         const 30064771102;
         const S7QSa_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.984067028 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_closure:
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_info;
         const 0;
 },
 GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_entry() //  [R2,
                                                                    R3]
         { []
         }
     {offset
       c7R6u: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Encoding.Types.$w$cshowsPrec_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_info" {
     GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_info:
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S7QSa_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.987657203 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_closure+3;
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_closure+1;
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.992309304 UTC

[section ""data" . GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_closure" {
     GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_closure:
         const GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_info;
 },
 GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c7R6O: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7R6P; else goto c7R6Q;
       c7R6P: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7R6Q: // global
           I64[Sp - 16] = block_c7R6G_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7R7N; else goto c7R6H;
       u7R7N: // global
           call _c7R6G(R1) args: 0, res: 0, upd: 0;
       c7R6H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_info" {
     GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_info:
         const GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7R6G() //  [R1]
         { []
         }
     {offset
       c7R6G: // global
           _s7QQf::P64 = P64[Sp + 8];
           _c7R6N::P64 = R1 & 7;
           if (_c7R6N::P64 < 3) goto u7R7D; else goto c7R6M;
       u7R7D: // global
           if (_c7R6N::P64 < 2) goto c7R6K; else goto c7R6L;
       c7R6K: // global
           I64[Sp + 8] = block_c7R6T_info;
           R1 = _s7QQf::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7R7K; else goto c7R6V;
       u7R7K: // global
           call _c7R6T(R1) args: 0, res: 0, upd: 0;
       c7R6V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7R6L: // global
           I64[Sp + 8] = block_c7R78_info;
           R1 = _s7QQf::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7R7L; else goto c7R7a;
       u7R7L: // global
           call _c7R78(R1) args: 0, res: 0, upd: 0;
       c7R7a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7R6M: // global
           I64[Sp + 8] = block_c7R7n_info;
           R1 = _s7QQf::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7R7M; else goto c7R7p;
       u7R7M: // global
           call _c7R7n(R1) args: 0, res: 0, upd: 0;
       c7R7p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7R6G_info" {
     block_c7R6G_info:
         const _c7R6G;
         const 1;
         const 30;
 },
 _c7R6T() //  [R1]
         { []
         }
     {offset
       c7R6T: // global
           if (R1 & 7 == 1) goto u7R7E; else goto u7R7F;
       u7R7E: // global
           Sp = Sp + 8;
           call _c7R7z() args: 0, res: 0, upd: 0;
       u7R7F: // global
           Sp = Sp + 8;
           call _c7R7v() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7R6T_info" {
     block_c7R6T_info:
         const _c7R6T;
         const 0;
         const 30;
 },
 _c7R78() //  [R1]
         { []
         }
     {offset
       c7R78: // global
           if (R1 & 7 == 2) goto u7R7G; else goto u7R7H;
       u7R7G: // global
           Sp = Sp + 8;
           call _c7R7z() args: 0, res: 0, upd: 0;
       u7R7H: // global
           Sp = Sp + 8;
           call _c7R7v() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7R78_info" {
     block_c7R78_info:
         const _c7R78;
         const 0;
         const 30;
 },
 _c7R7n() //  [R1]
         { []
         }
     {offset
       c7R7n: // global
           if (R1 & 7 == 3) goto u7R7I; else goto u7R7J;
       u7R7I: // global
           Sp = Sp + 8;
           call _c7R7z() args: 0, res: 0, upd: 0;
       u7R7J: // global
           Sp = Sp + 8;
           call _c7R7v() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7R7n_info" {
     block_c7R7n_info:
         const _c7R7n;
         const 0;
         const 30;
 },
 _c7R7z() //  []
         { []
         }
     {offset
       c7R7z: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7R7v() //  []
         { []
         }
     {offset
       c7R7v: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.007301075 UTC

[section ""data" . GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_closure" {
     GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_closure:
         const GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_info;
 },
 GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c7R8E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7R8F; else goto c7R8G;
       c7R8F: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7R8G: // global
           I64[Sp - 16] = block_c7R8w_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7R9D; else goto c7R8x;
       u7R9D: // global
           call _c7R8w(R1) args: 0, res: 0, upd: 0;
       c7R8x: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_info" {
     GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_info:
         const GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7R8w() //  [R1]
         { []
         }
     {offset
       c7R8w: // global
           _s7QQl::P64 = P64[Sp + 8];
           _c7R8D::P64 = R1 & 7;
           if (_c7R8D::P64 < 3) goto u7R9t; else goto c7R8C;
       u7R9t: // global
           if (_c7R8D::P64 < 2) goto c7R8A; else goto c7R8B;
       c7R8A: // global
           I64[Sp + 8] = block_c7R8J_info;
           R1 = _s7QQl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7R9A; else goto c7R8L;
       u7R9A: // global
           call _c7R8J(R1) args: 0, res: 0, upd: 0;
       c7R8L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7R8B: // global
           I64[Sp + 8] = block_c7R8Y_info;
           R1 = _s7QQl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7R9B; else goto c7R90;
       u7R9B: // global
           call _c7R8Y(R1) args: 0, res: 0, upd: 0;
       c7R90: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7R8C: // global
           I64[Sp + 8] = block_c7R9d_info;
           R1 = _s7QQl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7R9C; else goto c7R9f;
       u7R9C: // global
           call _c7R9d(R1) args: 0, res: 0, upd: 0;
       c7R9f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7R8w_info" {
     block_c7R8w_info:
         const _c7R8w;
         const 1;
         const 30;
 },
 _c7R8J() //  [R1]
         { []
         }
     {offset
       c7R8J: // global
           if (R1 & 7 == 1) goto u7R9u; else goto u7R9v;
       u7R9u: // global
           Sp = Sp + 8;
           call _c7R9p() args: 0, res: 0, upd: 0;
       u7R9v: // global
           Sp = Sp + 8;
           call _c7R9l() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7R8J_info" {
     block_c7R8J_info:
         const _c7R8J;
         const 0;
         const 30;
 },
 _c7R8Y() //  [R1]
         { []
         }
     {offset
       c7R8Y: // global
           if (R1 & 7 == 2) goto u7R9w; else goto u7R9x;
       u7R9w: // global
           Sp = Sp + 8;
           call _c7R9p() args: 0, res: 0, upd: 0;
       u7R9x: // global
           Sp = Sp + 8;
           call _c7R9l() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7R8Y_info" {
     block_c7R8Y_info:
         const _c7R8Y;
         const 0;
         const 30;
 },
 _c7R9d() //  [R1]
         { []
         }
     {offset
       c7R9d: // global
           if (R1 & 7 == 3) goto u7R9y; else goto u7R9z;
       u7R9y: // global
           Sp = Sp + 8;
           call _c7R9p() args: 0, res: 0, upd: 0;
       u7R9z: // global
           Sp = Sp + 8;
           call _c7R9l() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7R9d_info" {
     block_c7R9d_info:
         const _c7R9d;
         const 0;
         const 30;
 },
 _c7R9p() //  []
         { []
         }
     {offset
       c7R9p: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7R9l() //  []
         { []
         }
     {offset
       c7R9l: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.020052673 UTC

[section ""data" . GHC.IO.Encoding.Types.$fEqCodingProgress_closure" {
     GHC.IO.Encoding.Types.$fEqCodingProgress_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_closure+2;
         const GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.023081876 UTC

[section ""data" . GHC.IO.Encoding.Types.setState_closure" {
     GHC.IO.Encoding.Types.setState_closure:
         const GHC.IO.Encoding.Types.setState_info;
 },
 GHC.IO.Encoding.Types.setState_entry() //  [R2]
         { []
         }
     {offset
       c7Raq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Rar; else goto c7Ras;
       c7Rar: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.setState_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Ras: // global
           I64[Sp - 8] = block_c7Ran_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Raw; else goto c7Rao;
       u7Raw: // global
           call _c7Ran(R1) args: 0, res: 0, upd: 0;
       c7Rao: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.setState_info" {
     GHC.IO.Encoding.Types.setState_info:
         const GHC.IO.Encoding.Types.setState_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c7Ran() //  [R1]
         { []
         }
     {offset
       c7Ran: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Ran_info" {
     block_c7Ran_info:
         const _c7Ran;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.029546367 UTC

[section ""data" . GHC.IO.Encoding.Types.getState_closure" {
     GHC.IO.Encoding.Types.getState_closure:
         const GHC.IO.Encoding.Types.getState_info;
 },
 GHC.IO.Encoding.Types.getState_entry() //  [R2]
         { []
         }
     {offset
       c7RaN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7RaO; else goto c7RaP;
       c7RaO: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.getState_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7RaP: // global
           I64[Sp - 8] = block_c7RaK_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7RaT; else goto c7RaL;
       u7RaT: // global
           call _c7RaK(R1) args: 0, res: 0, upd: 0;
       c7RaL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.getState_info" {
     GHC.IO.Encoding.Types.getState_info:
         const GHC.IO.Encoding.Types.getState_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c7RaK() //  [R1]
         { []
         }
     {offset
       c7RaK: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7RaK_info" {
     block_c7RaK_info:
         const _c7RaK;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.037772513 UTC

[section ""data" . GHC.IO.Encoding.Types.close_closure" {
     GHC.IO.Encoding.Types.close_closure:
         const GHC.IO.Encoding.Types.close_info;
 },
 GHC.IO.Encoding.Types.close_entry() //  [R2]
         { []
         }
     {offset
       c7Rba: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Rbb; else goto c7Rbc;
       c7Rbb: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.close_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Rbc: // global
           I64[Sp - 8] = block_c7Rb7_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Rbg; else goto c7Rb8;
       u7Rbg: // global
           call _c7Rb7(R1) args: 0, res: 0, upd: 0;
       c7Rb8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.close_info" {
     GHC.IO.Encoding.Types.close_info:
         const GHC.IO.Encoding.Types.close_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c7Rb7() //  [R1]
         { []
         }
     {offset
       c7Rb7: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Rb7_info" {
     block_c7Rb7_info:
         const _c7Rb7;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.046155083 UTC

[section ""data" . GHC.IO.Encoding.Types.recover_closure" {
     GHC.IO.Encoding.Types.recover_closure:
         const GHC.IO.Encoding.Types.recover_info;
 },
 GHC.IO.Encoding.Types.recover_entry() //  [R2]
         { []
         }
     {offset
       c7Rbx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Rby; else goto c7Rbz;
       c7Rby: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.recover_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Rbz: // global
           I64[Sp - 8] = block_c7Rbu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7RbD; else goto c7Rbv;
       u7RbD: // global
           call _c7Rbu(R1) args: 0, res: 0, upd: 0;
       c7Rbv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.recover_info" {
     GHC.IO.Encoding.Types.recover_info:
         const GHC.IO.Encoding.Types.recover_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c7Rbu() //  [R1]
         { []
         }
     {offset
       c7Rbu: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Rbu_info" {
     block_c7Rbu_info:
         const _c7Rbu;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.054632651 UTC

[section ""data" . GHC.IO.Encoding.Types.encode_closure" {
     GHC.IO.Encoding.Types.encode_closure:
         const GHC.IO.Encoding.Types.encode_info;
 },
 GHC.IO.Encoding.Types.encode_entry() //  [R2]
         { []
         }
     {offset
       c7RbU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7RbV; else goto c7RbW;
       c7RbV: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.encode_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7RbW: // global
           I64[Sp - 8] = block_c7RbR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Rc0; else goto c7RbS;
       u7Rc0: // global
           call _c7RbR(R1) args: 0, res: 0, upd: 0;
       c7RbS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.encode_info" {
     GHC.IO.Encoding.Types.encode_info:
         const GHC.IO.Encoding.Types.encode_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c7RbR() //  [R1]
         { []
         }
     {offset
       c7RbR: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7RbR_info" {
     block_c7RbR_info:
         const _c7RbR;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.061989723 UTC

[section ""data" . GHC.IO.Encoding.Types.mkTextEncoder_closure" {
     GHC.IO.Encoding.Types.mkTextEncoder_closure:
         const ()_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.064289087 UTC

[section ""data" . GHC.IO.Encoding.Types.mkTextDecoder_closure" {
     GHC.IO.Encoding.Types.mkTextDecoder_closure:
         const ()_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.067786995 UTC

[section ""data" . GHC.IO.Encoding.Types.textEncodingName_closure" {
     GHC.IO.Encoding.Types.textEncodingName_closure:
         const GHC.IO.Encoding.Types.textEncodingName_info;
 },
 GHC.IO.Encoding.Types.textEncodingName_entry() //  [R2]
         { []
         }
     {offset
       c7Rcj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Rck; else goto c7Rcl;
       c7Rck: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.textEncodingName_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Rcl: // global
           I64[Sp - 8] = block_c7Rcg_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Rcp; else goto c7Rch;
       u7Rcp: // global
           call _c7Rcg(R1) args: 0, res: 0, upd: 0;
       c7Rch: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.textEncodingName_info" {
     GHC.IO.Encoding.Types.textEncodingName_info:
         const GHC.IO.Encoding.Types.textEncodingName_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c7Rcg() //  [R1]
         { []
         }
     {offset
       c7Rcg: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Rcg_info" {
     block_c7Rcg_info:
         const _c7Rcg;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.076562815 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_closure" {
     GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_closure:
         const GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_info;
 },
 GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_entry() //  [R2,
                                                                   R3, R4]
         { []
         }
     {offset
       c7RcI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7RcJ; else goto c7RcK;
       c7RcJ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7RcK: // global
           I64[Sp - 16] = block_c7RcF_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7RcO; else goto c7RcG;
       u7RcO: // global
           call _c7RcF(R1) args: 0, res: 0, upd: 0;
       c7RcG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_info" {
     GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_info:
         const GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c7RcF() //  [R1]
         { []
         }
     {offset
       c7RcF: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7RcF_info" {
     block_c7RcF_info:
         const _c7RcF;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.082761336 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowTextEncoding1_closure" {
     GHC.IO.Encoding.Types.$fShowTextEncoding1_closure:
         const GHC.IO.Encoding.Types.$fShowTextEncoding1_info;
 },
 GHC.IO.Encoding.Types.$fShowTextEncoding1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Rd5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Rd6; else goto c7Rd7;
       c7Rd6: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.$fShowTextEncoding1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Rd7: // global
           I64[Sp - 16] = block_c7Rd2_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Rdb; else goto c7Rd3;
       u7Rdb: // global
           call _c7Rd2(R1) args: 0, res: 0, upd: 0;
       c7Rd3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.$fShowTextEncoding1_info" {
     GHC.IO.Encoding.Types.$fShowTextEncoding1_info:
         const GHC.IO.Encoding.Types.$fShowTextEncoding1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7Rd2() //  [R1]
         { []
         }
     {offset
       c7Rd2: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Rd2_info" {
     block_c7Rd2_info:
         const _c7Rd2;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.088989343 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_closure" {
     GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_closure:
         const GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_info;
 },
 GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_entry() //  [R2,
                                                                  R3]
         { []
         }
     {offset
       c7Rdp: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Encoding.Types.$fShowTextEncoding1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_info" {
     GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_info:
         const GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.092791207 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowTextEncoding_closure" {
     GHC.IO.Encoding.Types.$fShowTextEncoding_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_closure+3;
         const GHC.IO.Encoding.Types.textEncodingName_closure+1;
         const GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.094618696 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$trModule4_bytes" {
     GHC.IO.Encoding.Types.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.096385181 UTC

[section ""data" . GHC.IO.Encoding.Types.$trModule3_closure" {
     GHC.IO.Encoding.Types.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.09828109 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$trModule2_bytes" {
     GHC.IO.Encoding.Types.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,46,69,110,99,111,100,105,110,103,46,84,121,112,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.100522381 UTC

[section ""data" . GHC.IO.Encoding.Types.$trModule1_closure" {
     GHC.IO.Encoding.Types.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.102660921 UTC

[section ""data" . GHC.IO.Encoding.Types.$trModule_closure" {
     GHC.IO.Encoding.Types.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.Encoding.Types.$trModule3_closure+1;
         const GHC.IO.Encoding.Types.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.10459204 UTC

[section ""data" . $krep_r7QPf_closure" {
     $krep_r7QPf_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc()_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.106485698 UTC

[section ""data" . $krep1_r7QPg_closure" {
     $krep1_r7QPg_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord8_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.1086667 UTC

[section ""data" . $krep2_r7QPh_closure" {
     $krep2_r7QPh_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.110462739 UTC

[section ""data" . $krep3_r7QPi_closure" {
     $krep3_r7QPi_closure:
         const :_con_info;
         const $krep_r7QPf_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.112253826 UTC

[section ""data" . $krep4_r7QPj_closure" {
     $krep4_r7QPj_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep3_r7QPi_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.114181304 UTC

[section ""data" . $krep5_r7QPk_closure" {
     $krep5_r7QPk_closure:
         const :_con_info;
         const $krep2_r7QPh_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.116402481 UTC

[section ""data" . $krep6_r7QPl_closure" {
     $krep6_r7QPl_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep5_r7QPk_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.118710014 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcBufferCodec1_closure" {
     GHC.IO.Encoding.Types.$tcBufferCodec1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const GHC.Types.krep$*->*->*_closure;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.120565269 UTC

[section ""data" . $krep7_r7QPm_closure" {
     $krep7_r7QPm_closure:
         const GHC.Types.KindRepVar_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.122457273 UTC

[section ""data" . $krep8_r7QPn_closure" {
     $krep8_r7QPn_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r7QPm_closure+2;
         const $krep4_r7QPj_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.12471599 UTC

[section ""data" . $krep9_r7QPo_closure" {
     $krep9_r7QPo_closure:
         const :_con_info;
         const $krep7_r7QPm_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.126431432 UTC

[section ""data" . $krep10_r7QPp_closure" {
     $krep10_r7QPp_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep9_r7QPo_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.128125933 UTC

[section ""data" . $krep11_r7QPq_closure" {
     $krep11_r7QPq_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.130242282 UTC

[section ""data" . $krep12_r7QPr_closure" {
     $krep12_r7QPr_closure:
         const :_con_info;
         const $krep11_r7QPq_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.133206429 UTC

[section ""data" . $krep13_r7QPs_closure" {
     $krep13_r7QPs_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Buffer.$tcBuffer_closure;
         const $krep12_r7QPr_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.135603455 UTC

[section ""data" . $krep14_r7QPt_closure" {
     $krep14_r7QPt_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.13799844 UTC

[section ""data" . $krep15_r7QPu_closure" {
     $krep15_r7QPu_closure:
         const :_con_info;
         const $krep14_r7QPt_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.14058739 UTC

[section ""data" . $krep16_r7QPv_closure" {
     $krep16_r7QPv_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Buffer.$tcBuffer_closure;
         const $krep15_r7QPu_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.1431501 UTC

[section ""data" . $krep17_r7QPw_closure" {
     $krep17_r7QPw_closure:
         const :_con_info;
         const $krep13_r7QPs_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.146508325 UTC

[section ""data" . $krep18_r7QPx_closure" {
     $krep18_r7QPx_closure:
         const :_con_info;
         const $krep16_r7QPv_closure+1;
         const $krep17_r7QPw_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.14912387 UTC

[section ""data" . $krep19_r7QPy_closure" {
     $krep19_r7QPy_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep18_r7QPx_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.151778226 UTC

[section ""data" . $krep20_r7QPz_closure" {
     $krep20_r7QPz_closure:
         const :_con_info;
         const $krep19_r7QPy_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.153730184 UTC

[section ""data" . $krep21_r7QPA_closure" {
     $krep21_r7QPA_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep20_r7QPz_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.155926467 UTC

[section ""data" . $krep22_r7QPB_closure" {
     $krep22_r7QPB_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep13_r7QPs_closure+1;
         const $krep21_r7QPA_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.157704354 UTC

[section ""data" . $krep23_r7QPC_closure" {
     $krep23_r7QPC_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep16_r7QPv_closure+1;
         const $krep22_r7QPB_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.159497552 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tcCodingProgress2_bytes" {
     GHC.IO.Encoding.Types.$tcCodingProgress2_bytes:
         I8[] [67,111,100,105,110,103,80,114,111,103,114,101,115,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.161366246 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcCodingProgress1_closure" {
     GHC.IO.Encoding.Types.$tcCodingProgress1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tcCodingProgress2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.163525658 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcCodingProgress_closure" {
     GHC.IO.Encoding.Types.$tcCodingProgress_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tcCodingProgress1_closure+1;
         const GHC.Types.krep$*_closure;
         const 4536835953909491444;
         const 10020924989385933984;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.16534732 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'InputUnderflow1_closure" {
     GHC.IO.Encoding.Types.$tc'InputUnderflow1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Encoding.Types.$tcCodingProgress_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.167146061 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tc'InputUnderflow3_bytes" {
     GHC.IO.Encoding.Types.$tc'InputUnderflow3_bytes:
         I8[] [39,73,110,112,117,116,85,110,100,101,114,102,108,111,119]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.168978694 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'InputUnderflow2_closure" {
     GHC.IO.Encoding.Types.$tc'InputUnderflow2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tc'InputUnderflow3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.171149657 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'InputUnderflow_closure" {
     GHC.IO.Encoding.Types.$tc'InputUnderflow_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tc'InputUnderflow2_closure+1;
         const GHC.IO.Encoding.Types.$tc'InputUnderflow1_closure+1;
         const 7310901713659969130;
         const 7213149953264042554;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.173061037 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tc'OutputUnderflow2_bytes" {
     GHC.IO.Encoding.Types.$tc'OutputUnderflow2_bytes:
         I8[] [39,79,117,116,112,117,116,85,110,100,101,114,102,108,111,119]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.174935187 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'OutputUnderflow1_closure" {
     GHC.IO.Encoding.Types.$tc'OutputUnderflow1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tc'OutputUnderflow2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.177119356 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'OutputUnderflow_closure" {
     GHC.IO.Encoding.Types.$tc'OutputUnderflow_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tc'OutputUnderflow1_closure+1;
         const GHC.IO.Encoding.Types.$tc'InputUnderflow1_closure+1;
         const 9796056422104521286;
         const 11682915108109873596;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.179235017 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tc'InvalidSequence2_bytes" {
     GHC.IO.Encoding.Types.$tc'InvalidSequence2_bytes:
         I8[] [39,73,110,118,97,108,105,100,83,101,113,117,101,110,99,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.180962163 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'InvalidSequence1_closure" {
     GHC.IO.Encoding.Types.$tc'InvalidSequence1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tc'InvalidSequence2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.182800717 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'InvalidSequence_closure" {
     GHC.IO.Encoding.Types.$tc'InvalidSequence_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tc'InvalidSequence1_closure+1;
         const GHC.IO.Encoding.Types.$tc'InputUnderflow1_closure+1;
         const 11342030351124486013;
         const 4985313935970877948;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.184985829 UTC

[section ""data" . $krep24_r7QPD_closure" {
     $krep24_r7QPD_closure:
         const :_con_info;
         const GHC.IO.Encoding.Types.$tc'InputUnderflow1_closure+1;
         const $krep18_r7QPx_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.186767131 UTC

[section ""data" . $krep25_r7QPE_closure" {
     $krep25_r7QPE_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,,)_closure;
         const $krep24_r7QPD_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.188530057 UTC

[section ""data" . $krep26_r7QPF_closure" {
     $krep26_r7QPF_closure:
         const :_con_info;
         const $krep25_r7QPE_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.190980957 UTC

[section ""data" . $krep27_r7QPG_closure" {
     $krep27_r7QPG_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep26_r7QPF_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.19314344 UTC

[section ""data" . $krep28_r7QPH_closure" {
     $krep28_r7QPH_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep13_r7QPs_closure+1;
         const $krep27_r7QPG_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.194901513 UTC

[section ""data" . $krep29_r7QPI_closure" {
     $krep29_r7QPI_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep16_r7QPv_closure+1;
         const $krep28_r7QPH_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.196601567 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tcBufferCodec3_bytes" {
     GHC.IO.Encoding.Types.$tcBufferCodec3_bytes:
         I8[] [66,117,102,102,101,114,67,111,100,101,99]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.19840562 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcBufferCodec2_closure" {
     GHC.IO.Encoding.Types.$tcBufferCodec2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tcBufferCodec3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.200610948 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcBufferCodec_closure" {
     GHC.IO.Encoding.Types.$tcBufferCodec_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tcBufferCodec2_closure+1;
         const GHC.IO.Encoding.Types.$tcBufferCodec1_closure+4;
         const 8585015667497772909;
         const 7745120500523128511;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.202787065 UTC

[section ""data" . $krep30_r7QPJ_closure" {
     $krep30_r7QPJ_closure:
         const :_con_info;
         const $krep11_r7QPq_closure+2;
         const $krep9_r7QPo_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.204499036 UTC

[section ""data" . $krep31_r7QPK_closure" {
     $krep31_r7QPK_closure:
         const :_con_info;
         const $krep14_r7QPt_closure+2;
         const $krep30_r7QPJ_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.206342212 UTC

[section ""data" . $krep32_r7QPL_closure" {
     $krep32_r7QPL_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Encoding.Types.$tcBufferCodec_closure+1;
         const $krep31_r7QPK_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.208455495 UTC

[section ""data" . $krep33_r7QPM_closure" {
     $krep33_r7QPM_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r7QPn_closure+4;
         const $krep32_r7QPL_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.210372801 UTC

[section ""data" . $krep34_r7QPN_closure" {
     $krep34_r7QPN_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r7QPp_closure+1;
         const $krep33_r7QPM_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.212134584 UTC

[section ""data" . $krep35_r7QPO_closure" {
     $krep35_r7QPO_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r7QPj_closure+1;
         const $krep34_r7QPN_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.214052545 UTC

[section ""data" . $krep36_r7QPP_closure" {
     $krep36_r7QPP_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep23_r7QPC_closure+4;
         const $krep35_r7QPO_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.216266397 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'BufferCodec1_closure" {
     GHC.IO.Encoding.Types.$tc'BufferCodec1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r7QPI_closure+4;
         const $krep36_r7QPP_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.218083067 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tc'BufferCodec3_bytes" {
     GHC.IO.Encoding.Types.$tc'BufferCodec3_bytes:
         I8[] [39,66,117,102,102,101,114,67,111,100,101,99]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.219821666 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'BufferCodec2_closure" {
     GHC.IO.Encoding.Types.$tc'BufferCodec2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tc'BufferCodec3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.221956327 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'BufferCodec_closure" {
     GHC.IO.Encoding.Types.$tc'BufferCodec_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tc'BufferCodec2_closure+1;
         const GHC.IO.Encoding.Types.$tc'BufferCodec1_closure+4;
         const 7854563382940536875;
         const 13968497653111525953;
         const 3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.224641648 UTC

[section ""data" . $krep37_r7QPQ_closure" {
     $krep37_r7QPQ_closure:
         const :_con_info;
         const $krep2_r7QPh_closure+1;
         const $krep15_r7QPu_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.226585533 UTC

[section ""data" . $krep38_r7QPR_closure" {
     $krep38_r7QPR_closure:
         const :_con_info;
         const $krep1_r7QPg_closure+1;
         const $krep37_r7QPQ_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.228453486 UTC

[section ""data" . $krep39_r7QPS_closure" {
     $krep39_r7QPS_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Encoding.Types.$tcBufferCodec_closure+1;
         const $krep38_r7QPR_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.230462503 UTC

[section ""data" . $krep40_r7QPT_closure" {
     $krep40_r7QPT_closure:
         const :_con_info;
         const $krep39_r7QPS_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.232953938 UTC

[section ""data" . $krep41_r7QPU_closure" {
     $krep41_r7QPU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep40_r7QPT_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.234930612 UTC

[section ""data" . $krep42_r7QPV_closure" {
     $krep42_r7QPV_closure:
         const :_con_info;
         const $krep1_r7QPg_closure+1;
         const $krep12_r7QPr_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.236705845 UTC

[section ""data" . $krep43_r7QPW_closure" {
     $krep43_r7QPW_closure:
         const :_con_info;
         const $krep2_r7QPh_closure+1;
         const $krep42_r7QPV_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.238590927 UTC

[section ""data" . $krep44_r7QPX_closure" {
     $krep44_r7QPX_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Encoding.Types.$tcBufferCodec_closure+1;
         const $krep43_r7QPW_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.240761769 UTC

[section ""data" . $krep45_r7QPY_closure" {
     $krep45_r7QPY_closure:
         const :_con_info;
         const $krep44_r7QPX_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.242449718 UTC

[section ""data" . $krep46_r7QPZ_closure" {
     $krep46_r7QPZ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep45_r7QPY_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.244196141 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tcTextEncoding2_bytes" {
     GHC.IO.Encoding.Types.$tcTextEncoding2_bytes:
         I8[] [84,101,120,116,69,110,99,111,100,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.24600383 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcTextEncoding1_closure" {
     GHC.IO.Encoding.Types.$tcTextEncoding1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tcTextEncoding2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.248334423 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcTextEncoding_closure" {
     GHC.IO.Encoding.Types.$tcTextEncoding_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tcTextEncoding1_closure+1;
         const GHC.Types.krep$*_closure;
         const 17289914150150147669;
         const 3676960838620070165;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.250334848 UTC

[section ""data" . $krep47_r7QQ0_closure" {
     $krep47_r7QQ0_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Encoding.Types.$tcTextEncoding_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.252120824 UTC

[section ""data" . $krep48_r7QQ1_closure" {
     $krep48_r7QQ1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep46_r7QPZ_closure+1;
         const $krep47_r7QQ0_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.254594941 UTC

[section ""data" . $krep49_r7QQ2_closure" {
     $krep49_r7QQ2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep41_r7QPU_closure+1;
         const $krep48_r7QQ1_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.257064363 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'TextEncoding1_closure" {
     GHC.IO.Encoding.Types.$tc'TextEncoding1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r7QPl_closure+1;
         const $krep49_r7QQ2_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.258969224 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tc'TextEncoding3_bytes" {
     GHC.IO.Encoding.Types.$tc'TextEncoding3_bytes:
         I8[] [39,84,101,120,116,69,110,99,111,100,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.260691526 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'TextEncoding2_closure" {
     GHC.IO.Encoding.Types.$tc'TextEncoding2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tc'TextEncoding3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.262699615 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'TextEncoding_closure" {
     GHC.IO.Encoding.Types.$tc'TextEncoding_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tc'TextEncoding2_closure+1;
         const GHC.IO.Encoding.Types.$tc'TextEncoding1_closure+4;
         const 6558277295920728213;
         const 3754397505420773780;
         const 2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.26508979 UTC

[section ""data" . GHC.IO.Encoding.Types.InputUnderflow_closure" {
     GHC.IO.Encoding.Types.InputUnderflow_closure:
         const GHC.IO.Encoding.Types.InputUnderflow_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.267243168 UTC

[section ""data" . GHC.IO.Encoding.Types.OutputUnderflow_closure" {
     GHC.IO.Encoding.Types.OutputUnderflow_closure:
         const GHC.IO.Encoding.Types.OutputUnderflow_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.269124028 UTC

[section ""data" . GHC.IO.Encoding.Types.InvalidSequence_closure" {
     GHC.IO.Encoding.Types.InvalidSequence_closure:
         const GHC.IO.Encoding.Types.InvalidSequence_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.271882149 UTC

[section ""data" . GHC.IO.Encoding.Types.TextEncoding_closure" {
     GHC.IO.Encoding.Types.TextEncoding_closure:
         const GHC.IO.Encoding.Types.TextEncoding_info;
 },
 GHC.IO.Encoding.Types.TextEncoding_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7Rf0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7Rf4; else goto c7Rf3;
       c7Rf4: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.TextEncoding_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Rf3: // global
           I64[Hp - 24] = GHC.IO.Encoding.Types.TextEncoding_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.TextEncoding_info" {
     GHC.IO.Encoding.Types.TextEncoding_info:
         const GHC.IO.Encoding.Types.TextEncoding_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.276774562 UTC

[section ""data" . GHC.IO.Encoding.Types.BufferCodec_closure" {
     GHC.IO.Encoding.Types.BufferCodec_closure:
         const GHC.IO.Encoding.Types.BufferCodec_info;
 },
 GHC.IO.Encoding.Types.BufferCodec_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c7Rff: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7Rfj; else goto c7Rfi;
       c7Rfj: // global
           HpAlloc = 48;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.BufferCodec_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Rfi: // global
           I64[Hp - 40] = GHC.IO.Encoding.Types.BufferCodec_con_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           P64[Hp] = R6;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.BufferCodec_info" {
     GHC.IO.Encoding.Types.BufferCodec_info:
         const GHC.IO.Encoding.Types.BufferCodec_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.281678601 UTC

[section ""relreadonly" . GHC.IO.Encoding.Types.CodingProgress_closure_tbl" {
     GHC.IO.Encoding.Types.CodingProgress_closure_tbl:
         const GHC.IO.Encoding.Types.InputUnderflow_closure+1;
         const GHC.IO.Encoding.Types.OutputUnderflow_closure+2;
         const GHC.IO.Encoding.Types.InvalidSequence_closure+3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.284298466 UTC

[section ""cstring" . i7R44_str" {
     i7R44_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,110,99,111,100,105,110,103,46,84,121,112,101,115,46,73,110,112,117,116,85,110,100,101,114,102,108,111,119]
 },
 GHC.IO.Encoding.Types.InputUnderflow_con_entry() //  [R1]
         { []
         }
     {offset
       c7Rfq: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.InputUnderflow_con_info" {
     GHC.IO.Encoding.Types.InputUnderflow_con_info:
         const GHC.IO.Encoding.Types.InputUnderflow_con_entry;
         const 4294967296;
         const 3;
         const i7R44_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.287754394 UTC

[section ""cstring" . i7R46_str" {
     i7R46_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,110,99,111,100,105,110,103,46,84,121,112,101,115,46,79,117,116,112,117,116,85,110,100,101,114,102,108,111,119]
 },
 GHC.IO.Encoding.Types.OutputUnderflow_con_entry() //  [R1]
         { []
         }
     {offset
       c7Rfw: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.OutputUnderflow_con_info" {
     GHC.IO.Encoding.Types.OutputUnderflow_con_info:
         const GHC.IO.Encoding.Types.OutputUnderflow_con_entry;
         const 4294967296;
         const 4294967299;
         const i7R46_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.292110375 UTC

[section ""cstring" . i7R48_str" {
     i7R48_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,110,99,111,100,105,110,103,46,84,121,112,101,115,46,73,110,118,97,108,105,100,83,101,113,117,101,110,99,101]
 },
 GHC.IO.Encoding.Types.InvalidSequence_con_entry() //  [R1]
         { []
         }
     {offset
       c7RfC: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.InvalidSequence_con_info" {
     GHC.IO.Encoding.Types.InvalidSequence_con_info:
         const GHC.IO.Encoding.Types.InvalidSequence_con_entry;
         const 4294967296;
         const 8589934595;
         const i7R48_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.295436431 UTC

[section ""cstring" . i7R4a_str" {
     i7R4a_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,110,99,111,100,105,110,103,46,84,121,112,101,115,46,84,101,120,116,69,110,99,111,100,105,110,103]
 },
 GHC.IO.Encoding.Types.TextEncoding_con_entry() //  [R1]
         { []
         }
     {offset
       c7RfI: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.TextEncoding_con_info" {
     GHC.IO.Encoding.Types.TextEncoding_con_info:
         const GHC.IO.Encoding.Types.TextEncoding_con_entry;
         const 3;
         const 1;
         const i7R4a_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.29904539 UTC

[section ""cstring" . i7R4c_str" {
     i7R4c_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,110,99,111,100,105,110,103,46,84,121,112,101,115,46,66,117,102,102,101,114,67,111,100,101,99]
 },
 GHC.IO.Encoding.Types.BufferCodec_con_entry() //  [R1]
         { []
         }
     {offset
       c7RfO: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.BufferCodec_con_info" {
     GHC.IO.Encoding.Types.BufferCodec_con_info:
         const GHC.IO.Encoding.Types.BufferCodec_con_entry;
         const 5;
         const 1;
         const i7R4c_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.302611743 UTC

[section ""relreadonly" . S7QSa_srt" {
     S7QSa_srt:
         const GHC.IO.Encoding.Types.$w$cshowsPrec_closure;
         const GHC.IO.Encoding.Types.$fShowCodingProgress1_closure;
         const GHC.IO.Encoding.Types.$fShowCodingProgress3_closure;
         const GHC.IO.Encoding.Types.$fShowCodingProgress5_closure;
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.814549114 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:02:58.815771528 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$fShowCodingProgress6_bytes" {
     GHC.IO.Encoding.Types.$fShowCodingProgress6_bytes:
         I8[] [73,110,112,117,116,85,110,100,101,114,102,108,111,119]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.818635537 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress5_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress5_closure:
         const GHC.IO.Encoding.Types.$fShowCodingProgress5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.Types.$fShowCodingProgress5_entry() //  [R1]
         { []
         }
     {offset
       c7Rhh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Rhi; else goto c7Rhj;
       c7Rhi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Rhj: // global
           (_c7Rhe::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7Rhe::I64 == 0) goto c7Rhg; else goto c7Rhf;
       c7Rhg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7Rhf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7Rhe::I64;
           R2 = GHC.IO.Encoding.Types.$fShowCodingProgress6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.$fShowCodingProgress5_info" {
     GHC.IO.Encoding.Types.$fShowCodingProgress5_info:
         const GHC.IO.Encoding.Types.$fShowCodingProgress5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.823013706 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$fShowCodingProgress4_bytes" {
     GHC.IO.Encoding.Types.$fShowCodingProgress4_bytes:
         I8[] [79,117,116,112,117,116,85,110,100,101,114,102,108,111,119]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.825631543 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress3_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress3_closure:
         const GHC.IO.Encoding.Types.$fShowCodingProgress3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.Types.$fShowCodingProgress3_entry() //  [R1]
         { []
         }
     {offset
       c7Rhz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7RhA; else goto c7RhB;
       c7RhA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7RhB: // global
           (_c7Rhw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7Rhw::I64 == 0) goto c7Rhy; else goto c7Rhx;
       c7Rhy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7Rhx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7Rhw::I64;
           R2 = GHC.IO.Encoding.Types.$fShowCodingProgress4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.$fShowCodingProgress3_info" {
     GHC.IO.Encoding.Types.$fShowCodingProgress3_info:
         const GHC.IO.Encoding.Types.$fShowCodingProgress3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.830134213 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$fShowCodingProgress2_bytes" {
     GHC.IO.Encoding.Types.$fShowCodingProgress2_bytes:
         I8[] [73,110,118,97,108,105,100,83,101,113,117,101,110,99,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.833888259 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress1_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress1_closure:
         const GHC.IO.Encoding.Types.$fShowCodingProgress1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.Types.$fShowCodingProgress1_entry() //  [R1]
         { []
         }
     {offset
       c7RhR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7RhS; else goto c7RhT;
       c7RhS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7RhT: // global
           (_c7RhO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7RhO::I64 == 0) goto c7RhQ; else goto c7RhP;
       c7RhQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7RhP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7RhO::I64;
           R2 = GHC.IO.Encoding.Types.$fShowCodingProgress2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.$fShowCodingProgress1_info" {
     GHC.IO.Encoding.Types.$fShowCodingProgress1_info:
         const GHC.IO.Encoding.Types.$fShowCodingProgress1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.83910801 UTC

[section ""data" . GHC.IO.Encoding.Types.$w$cshowsPrec_closure" {
     GHC.IO.Encoding.Types.$w$cshowsPrec_closure:
         const GHC.IO.Encoding.Types.$w$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Encoding.Types.$w$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Rie: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Rif; else goto c7Rig;
       c7Rif: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Rig: // global
           I64[Sp - 16] = block_c7Ri6_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Rir; else goto c7Ri7;
       u7Rir: // global
           call _c7Ri6(R1) args: 0, res: 0, upd: 0;
       c7Ri7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.$w$cshowsPrec_info" {
     GHC.IO.Encoding.Types.$w$cshowsPrec_info:
         const GHC.IO.Encoding.Types.$w$cshowsPrec_entry;
         const 0;
         const 64424509454;
         const 8589934607;
         const S7Ris_srt;
 },
 _c7Ri6() //  [R1]
         { []
         }
     {offset
       c7Ri6: // global
           _s7RfW::P64 = P64[Sp + 8];
           _c7Rid::P64 = R1 & 7;
           if (_c7Rid::P64 < 3) goto u7Riq; else goto c7Ric;
       u7Riq: // global
           if (_c7Rid::P64 < 2) goto c7Ria; else goto c7Rib;
       c7Ria: // global
           R3 = _s7RfW::P64;
           R2 = GHC.IO.Encoding.Types.$fShowCodingProgress5_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7Rib: // global
           R3 = _s7RfW::P64;
           R2 = GHC.IO.Encoding.Types.$fShowCodingProgress3_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7Ric: // global
           R3 = _s7RfW::P64;
           R2 = GHC.IO.Encoding.Types.$fShowCodingProgress1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Ri6_info" {
     block_c7Ri6_info:
         const _c7Ri6;
         const 1;
         const 30064771102;
         const S7Ris_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.845460814 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_closure:
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_entry() //  [R3,
                                                                     R4]
         { []
         }
     {offset
       c7RiI: // global
           _s7RfZ::P64 = R3;
           R3 = R4;
           R2 = _s7RfZ::P64;
           call GHC.IO.Encoding.Types.$w$cshowsPrec_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_info" {
     GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_info:
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S7Ris_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.8499726 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_closure:
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_info;
         const 0;
 },
 GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c7Rj1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Rj2; else goto c7Rj3;
       c7Rj2: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Rj3: // global
           I64[Sp - 8] = block_c7RiT_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Rje; else goto c7RiU;
       u7Rje: // global
           call _c7RiT(R1) args: 0, res: 0, upd: 0;
       c7RiU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_info" {
     GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_info:
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_entry;
         const 0;
         const 64424509454;
         const 4294967301;
         const S7Ris_srt+8;
 },
 _c7RiT() //  [R1]
         { []
         }
     {offset
       c7RiT: // global
           _c7Rj0::P64 = R1 & 7;
           if (_c7Rj0::P64 < 3) goto u7Rjd; else goto c7RiZ;
       u7Rjd: // global
           if (_c7Rj0::P64 < 2) goto c7RiX; else goto c7RiY;
       c7RiX: // global
           R1 = GHC.IO.Encoding.Types.$fShowCodingProgress5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7RiY: // global
           R1 = GHC.IO.Encoding.Types.$fShowCodingProgress3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7RiZ: // global
           R1 = GHC.IO.Encoding.Types.$fShowCodingProgress1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7RiT_info" {
     block_c7RiT_info:
         const _c7RiT;
         const 0;
         const 30064771102;
         const S7Ris_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.856128611 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_closure:
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_info;
         const 0;
 },
 GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_entry() //  [R2,
                                                                    R3]
         { []
         }
     {offset
       c7Rjx: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Encoding.Types.$w$cshowsPrec_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_info" {
     GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_info:
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S7Ris_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.859623464 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_closure+3;
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_closure+1;
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.86407187 UTC

[section ""data" . GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_closure" {
     GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_closure:
         const GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_info;
 },
 GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c7RjR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7RjS; else goto c7RjT;
       c7RjS: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7RjT: // global
           I64[Sp - 16] = block_c7RjJ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7RkQ; else goto c7RjK;
       u7RkQ: // global
           call _c7RjJ(R1) args: 0, res: 0, upd: 0;
       c7RjK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_info" {
     GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_info:
         const GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7RjJ() //  [R1]
         { []
         }
     {offset
       c7RjJ: // global
           _s7Rg6::P64 = P64[Sp + 8];
           _c7RjQ::P64 = R1 & 7;
           if (_c7RjQ::P64 < 3) goto u7RkG; else goto c7RjP;
       u7RkG: // global
           if (_c7RjQ::P64 < 2) goto c7RjN; else goto c7RjO;
       c7RjN: // global
           I64[Sp + 8] = block_c7RjW_info;
           R1 = _s7Rg6::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7RkN; else goto c7RjY;
       u7RkN: // global
           call _c7RjW(R1) args: 0, res: 0, upd: 0;
       c7RjY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7RjO: // global
           I64[Sp + 8] = block_c7Rkb_info;
           R1 = _s7Rg6::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7RkO; else goto c7Rkd;
       u7RkO: // global
           call _c7Rkb(R1) args: 0, res: 0, upd: 0;
       c7Rkd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7RjP: // global
           I64[Sp + 8] = block_c7Rkq_info;
           R1 = _s7Rg6::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7RkP; else goto c7Rks;
       u7RkP: // global
           call _c7Rkq(R1) args: 0, res: 0, upd: 0;
       c7Rks: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7RjJ_info" {
     block_c7RjJ_info:
         const _c7RjJ;
         const 1;
         const 30;
 },
 _c7RjW() //  [R1]
         { []
         }
     {offset
       c7RjW: // global
           if (R1 & 7 == 1) goto u7RkH; else goto u7RkI;
       u7RkH: // global
           Sp = Sp + 8;
           call _c7RkC() args: 0, res: 0, upd: 0;
       u7RkI: // global
           Sp = Sp + 8;
           call _c7Rky() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7RjW_info" {
     block_c7RjW_info:
         const _c7RjW;
         const 0;
         const 30;
 },
 _c7Rkb() //  [R1]
         { []
         }
     {offset
       c7Rkb: // global
           if (R1 & 7 == 2) goto u7RkJ; else goto u7RkK;
       u7RkJ: // global
           Sp = Sp + 8;
           call _c7RkC() args: 0, res: 0, upd: 0;
       u7RkK: // global
           Sp = Sp + 8;
           call _c7Rky() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7Rkb_info" {
     block_c7Rkb_info:
         const _c7Rkb;
         const 0;
         const 30;
 },
 _c7Rkq() //  [R1]
         { []
         }
     {offset
       c7Rkq: // global
           if (R1 & 7 == 3) goto u7RkL; else goto u7RkM;
       u7RkL: // global
           Sp = Sp + 8;
           call _c7RkC() args: 0, res: 0, upd: 0;
       u7RkM: // global
           Sp = Sp + 8;
           call _c7Rky() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7Rkq_info" {
     block_c7Rkq_info:
         const _c7Rkq;
         const 0;
         const 30;
 },
 _c7RkC() //  []
         { []
         }
     {offset
       c7RkC: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7Rky() //  []
         { []
         }
     {offset
       c7Rky: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.880584791 UTC

[section ""data" . GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_closure" {
     GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_closure:
         const GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_info;
 },
 GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c7RlN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7RlO; else goto c7RlP;
       c7RlO: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7RlP: // global
           I64[Sp - 16] = block_c7RlF_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7RmM; else goto c7RlG;
       u7RmM: // global
           call _c7RlF(R1) args: 0, res: 0, upd: 0;
       c7RlG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_info" {
     GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_info:
         const GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7RlF() //  [R1]
         { []
         }
     {offset
       c7RlF: // global
           _s7Rgc::P64 = P64[Sp + 8];
           _c7RlM::P64 = R1 & 7;
           if (_c7RlM::P64 < 3) goto u7RmC; else goto c7RlL;
       u7RmC: // global
           if (_c7RlM::P64 < 2) goto c7RlJ; else goto c7RlK;
       c7RlJ: // global
           I64[Sp + 8] = block_c7RlS_info;
           R1 = _s7Rgc::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7RmJ; else goto c7RlU;
       u7RmJ: // global
           call _c7RlS(R1) args: 0, res: 0, upd: 0;
       c7RlU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7RlK: // global
           I64[Sp + 8] = block_c7Rm7_info;
           R1 = _s7Rgc::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7RmK; else goto c7Rm9;
       u7RmK: // global
           call _c7Rm7(R1) args: 0, res: 0, upd: 0;
       c7Rm9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7RlL: // global
           I64[Sp + 8] = block_c7Rmm_info;
           R1 = _s7Rgc::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7RmL; else goto c7Rmo;
       u7RmL: // global
           call _c7Rmm(R1) args: 0, res: 0, upd: 0;
       c7Rmo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7RlF_info" {
     block_c7RlF_info:
         const _c7RlF;
         const 1;
         const 30;
 },
 _c7RlS() //  [R1]
         { []
         }
     {offset
       c7RlS: // global
           if (R1 & 7 == 1) goto u7RmD; else goto u7RmE;
       u7RmD: // global
           Sp = Sp + 8;
           call _c7Rmy() args: 0, res: 0, upd: 0;
       u7RmE: // global
           Sp = Sp + 8;
           call _c7Rmu() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7RlS_info" {
     block_c7RlS_info:
         const _c7RlS;
         const 0;
         const 30;
 },
 _c7Rm7() //  [R1]
         { []
         }
     {offset
       c7Rm7: // global
           if (R1 & 7 == 2) goto u7RmF; else goto u7RmG;
       u7RmF: // global
           Sp = Sp + 8;
           call _c7Rmy() args: 0, res: 0, upd: 0;
       u7RmG: // global
           Sp = Sp + 8;
           call _c7Rmu() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7Rm7_info" {
     block_c7Rm7_info:
         const _c7Rm7;
         const 0;
         const 30;
 },
 _c7Rmm() //  [R1]
         { []
         }
     {offset
       c7Rmm: // global
           if (R1 & 7 == 3) goto u7RmH; else goto u7RmI;
       u7RmH: // global
           Sp = Sp + 8;
           call _c7Rmy() args: 0, res: 0, upd: 0;
       u7RmI: // global
           Sp = Sp + 8;
           call _c7Rmu() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7Rmm_info" {
     block_c7Rmm_info:
         const _c7Rmm;
         const 0;
         const 30;
 },
 _c7Rmy() //  []
         { []
         }
     {offset
       c7Rmy: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7Rmu() //  []
         { []
         }
     {offset
       c7Rmu: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.892763197 UTC

[section ""data" . GHC.IO.Encoding.Types.$fEqCodingProgress_closure" {
     GHC.IO.Encoding.Types.$fEqCodingProgress_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_closure+2;
         const GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.895876932 UTC

[section ""data" . GHC.IO.Encoding.Types.setState_closure" {
     GHC.IO.Encoding.Types.setState_closure:
         const GHC.IO.Encoding.Types.setState_info;
 },
 GHC.IO.Encoding.Types.setState_entry() //  [R2]
         { []
         }
     {offset
       c7RnF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7RnG; else goto c7RnH;
       c7RnG: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.setState_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7RnH: // global
           I64[Sp - 8] = block_c7RnC_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7RnL; else goto c7RnD;
       u7RnL: // global
           call _c7RnC(R1) args: 0, res: 0, upd: 0;
       c7RnD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.setState_info" {
     GHC.IO.Encoding.Types.setState_info:
         const GHC.IO.Encoding.Types.setState_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c7RnC() //  [R1]
         { []
         }
     {offset
       c7RnC: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7RnC_info" {
     block_c7RnC_info:
         const _c7RnC;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.902365749 UTC

[section ""data" . GHC.IO.Encoding.Types.getState_closure" {
     GHC.IO.Encoding.Types.getState_closure:
         const GHC.IO.Encoding.Types.getState_info;
 },
 GHC.IO.Encoding.Types.getState_entry() //  [R2]
         { []
         }
     {offset
       c7Ro3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Ro4; else goto c7Ro5;
       c7Ro4: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.getState_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Ro5: // global
           I64[Sp - 8] = block_c7Ro0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Ro9; else goto c7Ro1;
       u7Ro9: // global
           call _c7Ro0(R1) args: 0, res: 0, upd: 0;
       c7Ro1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.getState_info" {
     GHC.IO.Encoding.Types.getState_info:
         const GHC.IO.Encoding.Types.getState_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c7Ro0() //  [R1]
         { []
         }
     {offset
       c7Ro0: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Ro0_info" {
     block_c7Ro0_info:
         const _c7Ro0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.911235785 UTC

[section ""data" . GHC.IO.Encoding.Types.close_closure" {
     GHC.IO.Encoding.Types.close_closure:
         const GHC.IO.Encoding.Types.close_info;
 },
 GHC.IO.Encoding.Types.close_entry() //  [R2]
         { []
         }
     {offset
       c7Ror: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Ros; else goto c7Rot;
       c7Ros: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.close_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Rot: // global
           I64[Sp - 8] = block_c7Roo_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Rox; else goto c7Rop;
       u7Rox: // global
           call _c7Roo(R1) args: 0, res: 0, upd: 0;
       c7Rop: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.close_info" {
     GHC.IO.Encoding.Types.close_info:
         const GHC.IO.Encoding.Types.close_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c7Roo() //  [R1]
         { []
         }
     {offset
       c7Roo: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Roo_info" {
     block_c7Roo_info:
         const _c7Roo;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.920365238 UTC

[section ""data" . GHC.IO.Encoding.Types.recover_closure" {
     GHC.IO.Encoding.Types.recover_closure:
         const GHC.IO.Encoding.Types.recover_info;
 },
 GHC.IO.Encoding.Types.recover_entry() //  [R2]
         { []
         }
     {offset
       c7RoP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7RoQ; else goto c7RoR;
       c7RoQ: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.recover_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7RoR: // global
           I64[Sp - 8] = block_c7RoM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7RoV; else goto c7RoN;
       u7RoV: // global
           call _c7RoM(R1) args: 0, res: 0, upd: 0;
       c7RoN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.recover_info" {
     GHC.IO.Encoding.Types.recover_info:
         const GHC.IO.Encoding.Types.recover_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c7RoM() //  [R1]
         { []
         }
     {offset
       c7RoM: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7RoM_info" {
     block_c7RoM_info:
         const _c7RoM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.928213998 UTC

[section ""data" . GHC.IO.Encoding.Types.encode_closure" {
     GHC.IO.Encoding.Types.encode_closure:
         const GHC.IO.Encoding.Types.encode_info;
 },
 GHC.IO.Encoding.Types.encode_entry() //  [R2]
         { []
         }
     {offset
       c7Rpd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Rpe; else goto c7Rpf;
       c7Rpe: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.encode_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Rpf: // global
           I64[Sp - 8] = block_c7Rpa_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Rpj; else goto c7Rpb;
       u7Rpj: // global
           call _c7Rpa(R1) args: 0, res: 0, upd: 0;
       c7Rpb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.encode_info" {
     GHC.IO.Encoding.Types.encode_info:
         const GHC.IO.Encoding.Types.encode_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c7Rpa() //  [R1]
         { []
         }
     {offset
       c7Rpa: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Rpa_info" {
     block_c7Rpa_info:
         const _c7Rpa;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.93514188 UTC

[section ""data" . GHC.IO.Encoding.Types.mkTextEncoder_closure" {
     GHC.IO.Encoding.Types.mkTextEncoder_closure:
         const ()_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.937693811 UTC

[section ""data" . GHC.IO.Encoding.Types.mkTextDecoder_closure" {
     GHC.IO.Encoding.Types.mkTextDecoder_closure:
         const ()_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.940140931 UTC

[section ""data" . GHC.IO.Encoding.Types.textEncodingName_closure" {
     GHC.IO.Encoding.Types.textEncodingName_closure:
         const GHC.IO.Encoding.Types.textEncodingName_info;
 },
 GHC.IO.Encoding.Types.textEncodingName_entry() //  [R2]
         { []
         }
     {offset
       c7RpD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7RpE; else goto c7RpF;
       c7RpE: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.textEncodingName_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7RpF: // global
           I64[Sp - 8] = block_c7RpA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7RpJ; else goto c7RpB;
       u7RpJ: // global
           call _c7RpA(R1) args: 0, res: 0, upd: 0;
       c7RpB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.textEncodingName_info" {
     GHC.IO.Encoding.Types.textEncodingName_info:
         const GHC.IO.Encoding.Types.textEncodingName_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c7RpA() //  [R1]
         { []
         }
     {offset
       c7RpA: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7RpA_info" {
     block_c7RpA_info:
         const _c7RpA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.945896065 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_closure" {
     GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_closure:
         const GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_info;
 },
 GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_entry() //  [R2,
                                                                   R3, R4]
         { []
         }
     {offset
       c7Rq3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Rq4; else goto c7Rq5;
       c7Rq4: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Rq5: // global
           I64[Sp - 16] = block_c7Rq0_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Rq9; else goto c7Rq1;
       u7Rq9: // global
           call _c7Rq0(R1) args: 0, res: 0, upd: 0;
       c7Rq1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_info" {
     GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_info:
         const GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c7Rq0() //  [R1]
         { []
         }
     {offset
       c7Rq0: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Rq0_info" {
     block_c7Rq0_info:
         const _c7Rq0;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.952160641 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowTextEncoding1_closure" {
     GHC.IO.Encoding.Types.$fShowTextEncoding1_closure:
         const GHC.IO.Encoding.Types.$fShowTextEncoding1_info;
 },
 GHC.IO.Encoding.Types.$fShowTextEncoding1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Rqr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Rqs; else goto c7Rqt;
       c7Rqs: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.$fShowTextEncoding1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Rqt: // global
           I64[Sp - 16] = block_c7Rqo_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Rqx; else goto c7Rqp;
       u7Rqx: // global
           call _c7Rqo(R1) args: 0, res: 0, upd: 0;
       c7Rqp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.$fShowTextEncoding1_info" {
     GHC.IO.Encoding.Types.$fShowTextEncoding1_info:
         const GHC.IO.Encoding.Types.$fShowTextEncoding1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7Rqo() //  [R1]
         { []
         }
     {offset
       c7Rqo: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Rqo_info" {
     block_c7Rqo_info:
         const _c7Rqo;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.958397043 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_closure" {
     GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_closure:
         const GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_info;
 },
 GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_entry() //  [R2,
                                                                  R3]
         { []
         }
     {offset
       c7RqM: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Encoding.Types.$fShowTextEncoding1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_info" {
     GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_info:
         const GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.961862769 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowTextEncoding_closure" {
     GHC.IO.Encoding.Types.$fShowTextEncoding_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_closure+3;
         const GHC.IO.Encoding.Types.textEncodingName_closure+1;
         const GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.963673936 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$trModule4_bytes" {
     GHC.IO.Encoding.Types.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.965529093 UTC

[section ""data" . GHC.IO.Encoding.Types.$trModule3_closure" {
     GHC.IO.Encoding.Types.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.967293415 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$trModule2_bytes" {
     GHC.IO.Encoding.Types.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,46,69,110,99,111,100,105,110,103,46,84,121,112,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.969097445 UTC

[section ""data" . GHC.IO.Encoding.Types.$trModule1_closure" {
     GHC.IO.Encoding.Types.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.970861194 UTC

[section ""data" . GHC.IO.Encoding.Types.$trModule_closure" {
     GHC.IO.Encoding.Types.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.Encoding.Types.$trModule3_closure+1;
         const GHC.IO.Encoding.Types.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.972648816 UTC

[section ""data" . $krep_r7QPf_closure" {
     $krep_r7QPf_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc()_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.974471447 UTC

[section ""data" . $krep1_r7QPg_closure" {
     $krep1_r7QPg_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord8_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.976243975 UTC

[section ""data" . $krep2_r7QPh_closure" {
     $krep2_r7QPh_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.978439152 UTC

[section ""data" . $krep3_r7QPi_closure" {
     $krep3_r7QPi_closure:
         const :_con_info;
         const $krep_r7QPf_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.980204084 UTC

[section ""data" . $krep4_r7QPj_closure" {
     $krep4_r7QPj_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep3_r7QPi_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.982084971 UTC

[section ""data" . $krep5_r7QPk_closure" {
     $krep5_r7QPk_closure:
         const :_con_info;
         const $krep2_r7QPh_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.984603641 UTC

[section ""data" . $krep6_r7QPl_closure" {
     $krep6_r7QPl_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep5_r7QPk_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.986450496 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcBufferCodec1_closure" {
     GHC.IO.Encoding.Types.$tcBufferCodec1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const GHC.Types.krep$*->*->*_closure;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.988286998 UTC

[section ""data" . $krep7_r7QPm_closure" {
     $krep7_r7QPm_closure:
         const GHC.Types.KindRepVar_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.990087151 UTC

[section ""data" . $krep8_r7QPn_closure" {
     $krep8_r7QPn_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r7QPm_closure+2;
         const $krep4_r7QPj_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.991986957 UTC

[section ""data" . $krep9_r7QPo_closure" {
     $krep9_r7QPo_closure:
         const :_con_info;
         const $krep7_r7QPm_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.993890362 UTC

[section ""data" . $krep10_r7QPp_closure" {
     $krep10_r7QPp_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep9_r7QPo_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.995712946 UTC

[section ""data" . $krep11_r7QPq_closure" {
     $krep11_r7QPq_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.997516031 UTC

[section ""data" . $krep12_r7QPr_closure" {
     $krep12_r7QPr_closure:
         const :_con_info;
         const $krep11_r7QPq_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:58.999290378 UTC

[section ""data" . $krep13_r7QPs_closure" {
     $krep13_r7QPs_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Buffer.$tcBuffer_closure;
         const $krep12_r7QPr_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.001046801 UTC

[section ""data" . $krep14_r7QPt_closure" {
     $krep14_r7QPt_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.00333361 UTC

[section ""data" . $krep15_r7QPu_closure" {
     $krep15_r7QPu_closure:
         const :_con_info;
         const $krep14_r7QPt_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.00510712 UTC

[section ""data" . $krep16_r7QPv_closure" {
     $krep16_r7QPv_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Buffer.$tcBuffer_closure;
         const $krep15_r7QPu_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.006907777 UTC

[section ""data" . $krep17_r7QPw_closure" {
     $krep17_r7QPw_closure:
         const :_con_info;
         const $krep13_r7QPs_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.008686321 UTC

[section ""data" . $krep18_r7QPx_closure" {
     $krep18_r7QPx_closure:
         const :_con_info;
         const $krep16_r7QPv_closure+1;
         const $krep17_r7QPw_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.010549679 UTC

[section ""data" . $krep19_r7QPy_closure" {
     $krep19_r7QPy_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep18_r7QPx_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.013133355 UTC

[section ""data" . $krep20_r7QPz_closure" {
     $krep20_r7QPz_closure:
         const :_con_info;
         const $krep19_r7QPy_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.015633577 UTC

[section ""data" . $krep21_r7QPA_closure" {
     $krep21_r7QPA_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep20_r7QPz_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.017495771 UTC

[section ""data" . $krep22_r7QPB_closure" {
     $krep22_r7QPB_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep13_r7QPs_closure+1;
         const $krep21_r7QPA_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.019383472 UTC

[section ""data" . $krep23_r7QPC_closure" {
     $krep23_r7QPC_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep16_r7QPv_closure+1;
         const $krep22_r7QPB_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.021164805 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tcCodingProgress2_bytes" {
     GHC.IO.Encoding.Types.$tcCodingProgress2_bytes:
         I8[] [67,111,100,105,110,103,80,114,111,103,114,101,115,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.022971133 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcCodingProgress1_closure" {
     GHC.IO.Encoding.Types.$tcCodingProgress1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tcCodingProgress2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.024802459 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcCodingProgress_closure" {
     GHC.IO.Encoding.Types.$tcCodingProgress_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tcCodingProgress1_closure+1;
         const GHC.Types.krep$*_closure;
         const 4536835953909491444;
         const 10020924989385933984;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.027105697 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'InputUnderflow1_closure" {
     GHC.IO.Encoding.Types.$tc'InputUnderflow1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Encoding.Types.$tcCodingProgress_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.028933537 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tc'InputUnderflow3_bytes" {
     GHC.IO.Encoding.Types.$tc'InputUnderflow3_bytes:
         I8[] [39,73,110,112,117,116,85,110,100,101,114,102,108,111,119]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.030814678 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'InputUnderflow2_closure" {
     GHC.IO.Encoding.Types.$tc'InputUnderflow2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tc'InputUnderflow3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.032645496 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'InputUnderflow_closure" {
     GHC.IO.Encoding.Types.$tc'InputUnderflow_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tc'InputUnderflow2_closure+1;
         const GHC.IO.Encoding.Types.$tc'InputUnderflow1_closure+1;
         const 7310901713659969130;
         const 7213149953264042554;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.034472197 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tc'OutputUnderflow2_bytes" {
     GHC.IO.Encoding.Types.$tc'OutputUnderflow2_bytes:
         I8[] [39,79,117,116,112,117,116,85,110,100,101,114,102,108,111,119]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.036261693 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'OutputUnderflow1_closure" {
     GHC.IO.Encoding.Types.$tc'OutputUnderflow1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tc'OutputUnderflow2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.038373709 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'OutputUnderflow_closure" {
     GHC.IO.Encoding.Types.$tc'OutputUnderflow_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tc'OutputUnderflow1_closure+1;
         const GHC.IO.Encoding.Types.$tc'InputUnderflow1_closure+1;
         const 9796056422104521286;
         const 11682915108109873596;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.04104337 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tc'InvalidSequence2_bytes" {
     GHC.IO.Encoding.Types.$tc'InvalidSequence2_bytes:
         I8[] [39,73,110,118,97,108,105,100,83,101,113,117,101,110,99,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.042804486 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'InvalidSequence1_closure" {
     GHC.IO.Encoding.Types.$tc'InvalidSequence1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tc'InvalidSequence2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.044731449 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'InvalidSequence_closure" {
     GHC.IO.Encoding.Types.$tc'InvalidSequence_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tc'InvalidSequence1_closure+1;
         const GHC.IO.Encoding.Types.$tc'InputUnderflow1_closure+1;
         const 11342030351124486013;
         const 4985313935970877948;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.046621711 UTC

[section ""data" . $krep24_r7QPD_closure" {
     $krep24_r7QPD_closure:
         const :_con_info;
         const GHC.IO.Encoding.Types.$tc'InputUnderflow1_closure+1;
         const $krep18_r7QPx_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.048475246 UTC

[section ""data" . $krep25_r7QPE_closure" {
     $krep25_r7QPE_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,,)_closure;
         const $krep24_r7QPD_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.050303134 UTC

[section ""data" . $krep26_r7QPF_closure" {
     $krep26_r7QPF_closure:
         const :_con_info;
         const $krep25_r7QPE_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.052219044 UTC

[section ""data" . $krep27_r7QPG_closure" {
     $krep27_r7QPG_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep26_r7QPF_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.054048015 UTC

[section ""data" . $krep28_r7QPH_closure" {
     $krep28_r7QPH_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep13_r7QPs_closure+1;
         const $krep27_r7QPG_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.05582053 UTC

[section ""data" . $krep29_r7QPI_closure" {
     $krep29_r7QPI_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep16_r7QPv_closure+1;
         const $krep28_r7QPH_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.057732327 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tcBufferCodec3_bytes" {
     GHC.IO.Encoding.Types.$tcBufferCodec3_bytes:
         I8[] [66,117,102,102,101,114,67,111,100,101,99]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.059547393 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcBufferCodec2_closure" {
     GHC.IO.Encoding.Types.$tcBufferCodec2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tcBufferCodec3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.062111243 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcBufferCodec_closure" {
     GHC.IO.Encoding.Types.$tcBufferCodec_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tcBufferCodec2_closure+1;
         const GHC.IO.Encoding.Types.$tcBufferCodec1_closure+4;
         const 8585015667497772909;
         const 7745120500523128511;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.063980196 UTC

[section ""data" . $krep30_r7QPJ_closure" {
     $krep30_r7QPJ_closure:
         const :_con_info;
         const $krep11_r7QPq_closure+2;
         const $krep9_r7QPo_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.065875486 UTC

[section ""data" . $krep31_r7QPK_closure" {
     $krep31_r7QPK_closure:
         const :_con_info;
         const $krep14_r7QPt_closure+2;
         const $krep30_r7QPJ_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.068521081 UTC

[section ""data" . $krep32_r7QPL_closure" {
     $krep32_r7QPL_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Encoding.Types.$tcBufferCodec_closure+1;
         const $krep31_r7QPK_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.070385908 UTC

[section ""data" . $krep33_r7QPM_closure" {
     $krep33_r7QPM_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r7QPn_closure+4;
         const $krep32_r7QPL_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.072199545 UTC

[section ""data" . $krep34_r7QPN_closure" {
     $krep34_r7QPN_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r7QPp_closure+1;
         const $krep33_r7QPM_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.074761965 UTC

[section ""data" . $krep35_r7QPO_closure" {
     $krep35_r7QPO_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r7QPj_closure+1;
         const $krep34_r7QPN_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.076574008 UTC

[section ""data" . $krep36_r7QPP_closure" {
     $krep36_r7QPP_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep23_r7QPC_closure+4;
         const $krep35_r7QPO_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.078361707 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'BufferCodec1_closure" {
     GHC.IO.Encoding.Types.$tc'BufferCodec1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r7QPI_closure+4;
         const $krep36_r7QPP_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.080224674 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tc'BufferCodec3_bytes" {
     GHC.IO.Encoding.Types.$tc'BufferCodec3_bytes:
         I8[] [39,66,117,102,102,101,114,67,111,100,101,99]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.082051176 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'BufferCodec2_closure" {
     GHC.IO.Encoding.Types.$tc'BufferCodec2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tc'BufferCodec3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.083920316 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'BufferCodec_closure" {
     GHC.IO.Encoding.Types.$tc'BufferCodec_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tc'BufferCodec2_closure+1;
         const GHC.IO.Encoding.Types.$tc'BufferCodec1_closure+4;
         const 7854563382940536875;
         const 13968497653111525953;
         const 3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.086264887 UTC

[section ""data" . $krep37_r7QPQ_closure" {
     $krep37_r7QPQ_closure:
         const :_con_info;
         const $krep2_r7QPh_closure+1;
         const $krep15_r7QPu_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.088236681 UTC

[section ""data" . $krep38_r7QPR_closure" {
     $krep38_r7QPR_closure:
         const :_con_info;
         const $krep1_r7QPg_closure+1;
         const $krep37_r7QPQ_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.090107385 UTC

[section ""data" . $krep39_r7QPS_closure" {
     $krep39_r7QPS_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Encoding.Types.$tcBufferCodec_closure+1;
         const $krep38_r7QPR_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.091762639 UTC

[section ""data" . $krep40_r7QPT_closure" {
     $krep40_r7QPT_closure:
         const :_con_info;
         const $krep39_r7QPS_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.09352508 UTC

[section ""data" . $krep41_r7QPU_closure" {
     $krep41_r7QPU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep40_r7QPT_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.095671083 UTC

[section ""data" . $krep42_r7QPV_closure" {
     $krep42_r7QPV_closure:
         const :_con_info;
         const $krep1_r7QPg_closure+1;
         const $krep12_r7QPr_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.097904709 UTC

[section ""data" . $krep43_r7QPW_closure" {
     $krep43_r7QPW_closure:
         const :_con_info;
         const $krep2_r7QPh_closure+1;
         const $krep42_r7QPV_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.099726903 UTC

[section ""data" . $krep44_r7QPX_closure" {
     $krep44_r7QPX_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Encoding.Types.$tcBufferCodec_closure+1;
         const $krep43_r7QPW_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.101665845 UTC

[section ""data" . $krep45_r7QPY_closure" {
     $krep45_r7QPY_closure:
         const :_con_info;
         const $krep44_r7QPX_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.103508251 UTC

[section ""data" . $krep46_r7QPZ_closure" {
     $krep46_r7QPZ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep45_r7QPY_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.105378121 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tcTextEncoding2_bytes" {
     GHC.IO.Encoding.Types.$tcTextEncoding2_bytes:
         I8[] [84,101,120,116,69,110,99,111,100,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.107202551 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcTextEncoding1_closure" {
     GHC.IO.Encoding.Types.$tcTextEncoding1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tcTextEncoding2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.109075181 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcTextEncoding_closure" {
     GHC.IO.Encoding.Types.$tcTextEncoding_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tcTextEncoding1_closure+1;
         const GHC.Types.krep$*_closure;
         const 17289914150150147669;
         const 3676960838620070165;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.111126195 UTC

[section ""data" . $krep47_r7QQ0_closure" {
     $krep47_r7QQ0_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Encoding.Types.$tcTextEncoding_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.112963473 UTC

[section ""data" . $krep48_r7QQ1_closure" {
     $krep48_r7QQ1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep46_r7QPZ_closure+1;
         const $krep47_r7QQ0_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.114952978 UTC

[section ""data" . $krep49_r7QQ2_closure" {
     $krep49_r7QQ2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep41_r7QPU_closure+1;
         const $krep48_r7QQ1_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.116787821 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'TextEncoding1_closure" {
     GHC.IO.Encoding.Types.$tc'TextEncoding1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r7QPl_closure+1;
         const $krep49_r7QQ2_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.118601049 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tc'TextEncoding3_bytes" {
     GHC.IO.Encoding.Types.$tc'TextEncoding3_bytes:
         I8[] [39,84,101,120,116,69,110,99,111,100,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.120348511 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'TextEncoding2_closure" {
     GHC.IO.Encoding.Types.$tc'TextEncoding2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tc'TextEncoding3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.122578508 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'TextEncoding_closure" {
     GHC.IO.Encoding.Types.$tc'TextEncoding_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tc'TextEncoding2_closure+1;
         const GHC.IO.Encoding.Types.$tc'TextEncoding1_closure+4;
         const 6558277295920728213;
         const 3754397505420773780;
         const 2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.125085587 UTC

[section ""data" . GHC.IO.Encoding.Types.InputUnderflow_closure" {
     GHC.IO.Encoding.Types.InputUnderflow_closure:
         const GHC.IO.Encoding.Types.InputUnderflow_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.126877092 UTC

[section ""data" . GHC.IO.Encoding.Types.OutputUnderflow_closure" {
     GHC.IO.Encoding.Types.OutputUnderflow_closure:
         const GHC.IO.Encoding.Types.OutputUnderflow_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.128619844 UTC

[section ""data" . GHC.IO.Encoding.Types.InvalidSequence_closure" {
     GHC.IO.Encoding.Types.InvalidSequence_closure:
         const GHC.IO.Encoding.Types.InvalidSequence_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.131375973 UTC

[section ""data" . GHC.IO.Encoding.Types.TextEncoding_closure" {
     GHC.IO.Encoding.Types.TextEncoding_closure:
         const GHC.IO.Encoding.Types.TextEncoding_info;
 },
 GHC.IO.Encoding.Types.TextEncoding_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7Rsn: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7Rsr; else goto c7Rsq;
       c7Rsr: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.TextEncoding_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Rsq: // global
           I64[Hp - 24] = GHC.IO.Encoding.Types.TextEncoding_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.TextEncoding_info" {
     GHC.IO.Encoding.Types.TextEncoding_info:
         const GHC.IO.Encoding.Types.TextEncoding_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.135806531 UTC

[section ""data" . GHC.IO.Encoding.Types.BufferCodec_closure" {
     GHC.IO.Encoding.Types.BufferCodec_closure:
         const GHC.IO.Encoding.Types.BufferCodec_info;
 },
 GHC.IO.Encoding.Types.BufferCodec_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c7RsD: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7RsH; else goto c7RsG;
       c7RsH: // global
           HpAlloc = 48;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.BufferCodec_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7RsG: // global
           I64[Hp - 40] = GHC.IO.Encoding.Types.BufferCodec_con_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           P64[Hp] = R6;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.BufferCodec_info" {
     GHC.IO.Encoding.Types.BufferCodec_info:
         const GHC.IO.Encoding.Types.BufferCodec_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.139436668 UTC

[section ""relreadonly" . GHC.IO.Encoding.Types.CodingProgress_closure_tbl" {
     GHC.IO.Encoding.Types.CodingProgress_closure_tbl:
         const GHC.IO.Encoding.Types.InputUnderflow_closure+1;
         const GHC.IO.Encoding.Types.OutputUnderflow_closure+2;
         const GHC.IO.Encoding.Types.InvalidSequence_closure+3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.141804221 UTC

[section ""cstring" . i7RsQ_str" {
     i7RsQ_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,110,99,111,100,105,110,103,46,84,121,112,101,115,46,73,110,112,117,116,85,110,100,101,114,102,108,111,119]
 },
 GHC.IO.Encoding.Types.InputUnderflow_con_entry() //  [R1]
         { []
         }
     {offset
       c7RsP: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.InputUnderflow_con_info" {
     GHC.IO.Encoding.Types.InputUnderflow_con_info:
         const GHC.IO.Encoding.Types.InputUnderflow_con_entry;
         const 4294967296;
         const 3;
         const i7RsQ_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.145170211 UTC

[section ""cstring" . i7RsX_str" {
     i7RsX_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,110,99,111,100,105,110,103,46,84,121,112,101,115,46,79,117,116,112,117,116,85,110,100,101,114,102,108,111,119]
 },
 GHC.IO.Encoding.Types.OutputUnderflow_con_entry() //  [R1]
         { []
         }
     {offset
       c7RsW: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.OutputUnderflow_con_info" {
     GHC.IO.Encoding.Types.OutputUnderflow_con_info:
         const GHC.IO.Encoding.Types.OutputUnderflow_con_entry;
         const 4294967296;
         const 4294967299;
         const i7RsX_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.148630601 UTC

[section ""cstring" . i7Rt4_str" {
     i7Rt4_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,110,99,111,100,105,110,103,46,84,121,112,101,115,46,73,110,118,97,108,105,100,83,101,113,117,101,110,99,101]
 },
 GHC.IO.Encoding.Types.InvalidSequence_con_entry() //  [R1]
         { []
         }
     {offset
       c7Rt3: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.InvalidSequence_con_info" {
     GHC.IO.Encoding.Types.InvalidSequence_con_info:
         const GHC.IO.Encoding.Types.InvalidSequence_con_entry;
         const 4294967296;
         const 8589934595;
         const i7Rt4_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.152159214 UTC

[section ""cstring" . i7Rtb_str" {
     i7Rtb_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,110,99,111,100,105,110,103,46,84,121,112,101,115,46,84,101,120,116,69,110,99,111,100,105,110,103]
 },
 GHC.IO.Encoding.Types.TextEncoding_con_entry() //  [R1]
         { []
         }
     {offset
       c7Rta: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.TextEncoding_con_info" {
     GHC.IO.Encoding.Types.TextEncoding_con_info:
         const GHC.IO.Encoding.Types.TextEncoding_con_entry;
         const 3;
         const 1;
         const i7Rtb_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.156822831 UTC

[section ""cstring" . i7Rti_str" {
     i7Rti_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,69,110,99,111,100,105,110,103,46,84,121,112,101,115,46,66,117,102,102,101,114,67,111,100,101,99]
 },
 GHC.IO.Encoding.Types.BufferCodec_con_entry() //  [R1]
         { []
         }
     {offset
       c7Rth: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Encoding.Types.BufferCodec_con_info" {
     GHC.IO.Encoding.Types.BufferCodec_con_info:
         const GHC.IO.Encoding.Types.BufferCodec_con_entry;
         const 5;
         const 1;
         const i7Rti_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:59.160028091 UTC

[section ""relreadonly" . S7Ris_srt" {
     S7Ris_srt:
         const GHC.IO.Encoding.Types.$w$cshowsPrec_closure;
         const GHC.IO.Encoding.Types.$fShowCodingProgress1_closure;
         const GHC.IO.Encoding.Types.$fShowCodingProgress3_closure;
         const GHC.IO.Encoding.Types.$fShowCodingProgress5_closure;
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_closure;
 }]

