
==================== Output Cmm ====================
2018-03-16 16:02:57.705977701 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:02:57.707103724 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$fShowCodingProgress6_bytes" {
     GHC.IO.Encoding.Types.$fShowCodingProgress6_bytes:
         I8[] [73,110,112,117,116,85,110,100,101,114,102,108,111,119]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.708109535 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress5_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress5_closure:
         const GHC.IO.Encoding.Types.$fShowCodingProgress5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.Types.$fShowCodingProgress5_entry() //  [R1]
         { info_tbl: [(c7QRp,
                       label: GHC.IO.Encoding.Types.$fShowCodingProgress5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QRp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7QRq; else goto c7QRr;
       c7QRq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7QRr: // global
           (_c7QRm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7QRm::I64 == 0) goto c7QRo; else goto c7QRn;
       c7QRo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7QRn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7QRm::I64;
           R2 = GHC.IO.Encoding.Types.$fShowCodingProgress6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.709136717 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$fShowCodingProgress4_bytes" {
     GHC.IO.Encoding.Types.$fShowCodingProgress4_bytes:
         I8[] [79,117,116,112,117,116,85,110,100,101,114,102,108,111,119]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.709970421 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress3_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress3_closure:
         const GHC.IO.Encoding.Types.$fShowCodingProgress3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.Types.$fShowCodingProgress3_entry() //  [R1]
         { info_tbl: [(c7QRy,
                       label: GHC.IO.Encoding.Types.$fShowCodingProgress3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QRy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7QRz; else goto c7QRA;
       c7QRz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7QRA: // global
           (_c7QRv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7QRv::I64 == 0) goto c7QRx; else goto c7QRw;
       c7QRx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7QRw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7QRv::I64;
           R2 = GHC.IO.Encoding.Types.$fShowCodingProgress4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.710924248 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$fShowCodingProgress2_bytes" {
     GHC.IO.Encoding.Types.$fShowCodingProgress2_bytes:
         I8[] [73,110,118,97,108,105,100,83,101,113,117,101,110,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.711717902 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress1_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress1_closure:
         const GHC.IO.Encoding.Types.$fShowCodingProgress1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.Types.$fShowCodingProgress1_entry() //  [R1]
         { info_tbl: [(c7QRH,
                       label: GHC.IO.Encoding.Types.$fShowCodingProgress1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QRH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7QRI; else goto c7QRJ;
       c7QRI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7QRJ: // global
           (_c7QRE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7QRE::I64 == 0) goto c7QRG; else goto c7QRF;
       c7QRG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7QRF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7QRE::I64;
           R2 = GHC.IO.Encoding.Types.$fShowCodingProgress2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.713163079 UTC

[section ""data" . GHC.IO.Encoding.Types.$w$cshowsPrec_closure" {
     GHC.IO.Encoding.Types.$w$cshowsPrec_closure:
         const GHC.IO.Encoding.Types.$w$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Encoding.Types.$w$cshowsPrec_entry() //  [R2, R3]
         { info_tbl: [(c7QRW,
                       label: GHC.IO.Encoding.Types.$w$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QRW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7QRX; else goto c7QRY;
       c7QRX: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7QRY: // global
           I64[Sp - 16] = block_c7QRO_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7QS9; else goto c7QRP;
       u7QS9: // global
           call _c7QRO(R1) args: 0, res: 0, upd: 0;
       c7QRP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7QRO() //  [R1]
         { info_tbl: [(c7QRO,
                       label: block_c7QRO_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QRO: // global
           _s7QQ5::P64 = P64[Sp + 8];
           _c7QRV::P64 = R1 & 7;
           if (_c7QRV::P64 < 3) goto u7QS8; else goto c7QRU;
       u7QS8: // global
           if (_c7QRV::P64 < 2) goto c7QRS; else goto c7QRT;
       c7QRS: // global
           R3 = _s7QQ5::P64;
           R2 = GHC.IO.Encoding.Types.$fShowCodingProgress5_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7QRT: // global
           R3 = _s7QQ5::P64;
           R2 = GHC.IO.Encoding.Types.$fShowCodingProgress3_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7QRU: // global
           R3 = _s7QQ5::P64;
           R2 = GHC.IO.Encoding.Types.$fShowCodingProgress1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.714849578 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_closure:
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_entry() //  [R3,
                                                                     R4]
         { info_tbl: [(c7QSf,
                       label: GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QSf: // global
           _s7QQ8::P64 = R3;
           R3 = R4;
           R2 = _s7QQ8::P64;
           call GHC.IO.Encoding.Types.$w$cshowsPrec_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.716179252 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_closure:
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_info;
         const 0;
 },
 GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_entry() //  [R2]
         { info_tbl: [(c7QSu,
                       label: GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QSu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7QSv; else goto c7QSw;
       c7QSv: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7QSw: // global
           I64[Sp - 8] = block_c7QSm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7QSH; else goto c7QSn;
       u7QSH: // global
           call _c7QSm(R1) args: 0, res: 0, upd: 0;
       c7QSn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7QSm() //  [R1]
         { info_tbl: [(c7QSm,
                       label: block_c7QSm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QSm: // global
           _c7QSt::P64 = R1 & 7;
           if (_c7QSt::P64 < 3) goto u7QSG; else goto c7QSs;
       u7QSG: // global
           if (_c7QSt::P64 < 2) goto c7QSq; else goto c7QSr;
       c7QSq: // global
           R1 = GHC.IO.Encoding.Types.$fShowCodingProgress5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7QSr: // global
           R1 = GHC.IO.Encoding.Types.$fShowCodingProgress3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7QSs: // global
           R1 = GHC.IO.Encoding.Types.$fShowCodingProgress1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.718440216 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_closure:
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_info;
         const 0;
 },
 GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_entry() //  [R2,
                                                                    R3]
         { info_tbl: [(c7QSM,
                       label: GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QSM: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Encoding.Types.$w$cshowsPrec_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.719365492 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_closure+3;
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_closure+1;
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.720915846 UTC

[section ""data" . GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_closure" {
     GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_closure:
         const GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_info;
 },
 GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_entry() //  [R2, R3]
         { info_tbl: [(c7QT1,
                       label: GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QT1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7QT2; else goto c7QT3;
       c7QT2: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7QT3: // global
           I64[Sp - 16] = block_c7QST_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7QU0; else goto c7QSU;
       u7QU0: // global
           call _c7QST(R1) args: 0, res: 0, upd: 0;
       c7QSU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7QST() //  [R1]
         { info_tbl: [(c7QST,
                       label: block_c7QST_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QST: // global
           _s7QQf::P64 = P64[Sp + 8];
           _c7QT0::P64 = R1 & 7;
           if (_c7QT0::P64 < 3) goto u7QTQ; else goto c7QSZ;
       u7QTQ: // global
           if (_c7QT0::P64 < 2) goto c7QSX; else goto c7QSY;
       c7QSX: // global
           I64[Sp + 8] = block_c7QT6_info;
           R1 = _s7QQf::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7QTX; else goto c7QT8;
       u7QTX: // global
           call _c7QT6(R1) args: 0, res: 0, upd: 0;
       c7QT8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7QSY: // global
           I64[Sp + 8] = block_c7QTl_info;
           R1 = _s7QQf::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7QTY; else goto c7QTn;
       u7QTY: // global
           call _c7QTl(R1) args: 0, res: 0, upd: 0;
       c7QTn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7QSZ: // global
           I64[Sp + 8] = block_c7QTA_info;
           R1 = _s7QQf::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7QTZ; else goto c7QTC;
       u7QTZ: // global
           call _c7QTA(R1) args: 0, res: 0, upd: 0;
       c7QTC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7QT6() //  [R1]
         { info_tbl: [(c7QT6,
                       label: block_c7QT6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QT6: // global
           if (R1 & 7 == 1) goto u7QTR; else goto u7QTS;
       u7QTR: // global
           Sp = Sp + 8;
           call _c7QTM() args: 0, res: 0, upd: 0;
       u7QTS: // global
           Sp = Sp + 8;
           call _c7QTI() args: 0, res: 0, upd: 0;
     }
 },
 _c7QTl() //  [R1]
         { info_tbl: [(c7QTl,
                       label: block_c7QTl_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QTl: // global
           if (R1 & 7 == 2) goto u7QTT; else goto u7QTU;
       u7QTT: // global
           Sp = Sp + 8;
           call _c7QTM() args: 0, res: 0, upd: 0;
       u7QTU: // global
           Sp = Sp + 8;
           call _c7QTI() args: 0, res: 0, upd: 0;
     }
 },
 _c7QTA() //  [R1]
         { info_tbl: [(c7QTA,
                       label: block_c7QTA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QTA: // global
           if (R1 & 7 == 3) goto u7QTV; else goto u7QTW;
       u7QTV: // global
           Sp = Sp + 8;
           call _c7QTM() args: 0, res: 0, upd: 0;
       u7QTW: // global
           Sp = Sp + 8;
           call _c7QTI() args: 0, res: 0, upd: 0;
     }
 },
 _c7QTM() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QTM: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7QTI() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QTI: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.724263144 UTC

[section ""data" . GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_closure" {
     GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_closure:
         const GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_info;
 },
 GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c7QUj,
                       label: GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QUj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7QUk; else goto c7QUl;
       c7QUk: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7QUl: // global
           I64[Sp - 16] = block_c7QUb_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7QVi; else goto c7QUc;
       u7QVi: // global
           call _c7QUb(R1) args: 0, res: 0, upd: 0;
       c7QUc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7QUb() //  [R1]
         { info_tbl: [(c7QUb,
                       label: block_c7QUb_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QUb: // global
           _s7QQl::P64 = P64[Sp + 8];
           _c7QUi::P64 = R1 & 7;
           if (_c7QUi::P64 < 3) goto u7QV8; else goto c7QUh;
       u7QV8: // global
           if (_c7QUi::P64 < 2) goto c7QUf; else goto c7QUg;
       c7QUf: // global
           I64[Sp + 8] = block_c7QUo_info;
           R1 = _s7QQl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7QVf; else goto c7QUq;
       u7QVf: // global
           call _c7QUo(R1) args: 0, res: 0, upd: 0;
       c7QUq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7QUg: // global
           I64[Sp + 8] = block_c7QUD_info;
           R1 = _s7QQl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7QVg; else goto c7QUF;
       u7QVg: // global
           call _c7QUD(R1) args: 0, res: 0, upd: 0;
       c7QUF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7QUh: // global
           I64[Sp + 8] = block_c7QUS_info;
           R1 = _s7QQl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7QVh; else goto c7QUU;
       u7QVh: // global
           call _c7QUS(R1) args: 0, res: 0, upd: 0;
       c7QUU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7QUo() //  [R1]
         { info_tbl: [(c7QUo,
                       label: block_c7QUo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QUo: // global
           if (R1 & 7 == 1) goto u7QV9; else goto u7QVa;
       u7QV9: // global
           Sp = Sp + 8;
           call _c7QV4() args: 0, res: 0, upd: 0;
       u7QVa: // global
           Sp = Sp + 8;
           call _c7QV0() args: 0, res: 0, upd: 0;
     }
 },
 _c7QUD() //  [R1]
         { info_tbl: [(c7QUD,
                       label: block_c7QUD_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QUD: // global
           if (R1 & 7 == 2) goto u7QVb; else goto u7QVc;
       u7QVb: // global
           Sp = Sp + 8;
           call _c7QV4() args: 0, res: 0, upd: 0;
       u7QVc: // global
           Sp = Sp + 8;
           call _c7QV0() args: 0, res: 0, upd: 0;
     }
 },
 _c7QUS() //  [R1]
         { info_tbl: [(c7QUS,
                       label: block_c7QUS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QUS: // global
           if (R1 & 7 == 3) goto u7QVd; else goto u7QVe;
       u7QVd: // global
           Sp = Sp + 8;
           call _c7QV4() args: 0, res: 0, upd: 0;
       u7QVe: // global
           Sp = Sp + 8;
           call _c7QV0() args: 0, res: 0, upd: 0;
     }
 },
 _c7QV4() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QV4: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7QV0() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QV0: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.726669387 UTC

[section ""data" . GHC.IO.Encoding.Types.$fEqCodingProgress_closure" {
     GHC.IO.Encoding.Types.$fEqCodingProgress_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_closure+2;
         const GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.727744291 UTC

[section ""data" . GHC.IO.Encoding.Types.setState_closure" {
     GHC.IO.Encoding.Types.setState_closure:
         const GHC.IO.Encoding.Types.setState_info;
 },
 GHC.IO.Encoding.Types.setState_entry() //  [R2]
         { info_tbl: [(c7QVw,
                       label: GHC.IO.Encoding.Types.setState_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QVw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7QVx; else goto c7QVy;
       c7QVx: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.setState_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7QVy: // global
           I64[Sp - 8] = block_c7QVt_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7QVC; else goto c7QVu;
       u7QVC: // global
           call _c7QVt(R1) args: 0, res: 0, upd: 0;
       c7QVu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7QVt() //  [R1]
         { info_tbl: [(c7QVt,
                       label: block_c7QVt_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QVt: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.729894073 UTC

[section ""data" . GHC.IO.Encoding.Types.getState_closure" {
     GHC.IO.Encoding.Types.getState_closure:
         const GHC.IO.Encoding.Types.getState_info;
 },
 GHC.IO.Encoding.Types.getState_entry() //  [R2]
         { info_tbl: [(c7QVK,
                       label: GHC.IO.Encoding.Types.getState_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QVK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7QVL; else goto c7QVM;
       c7QVL: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.getState_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7QVM: // global
           I64[Sp - 8] = block_c7QVH_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7QVQ; else goto c7QVI;
       u7QVQ: // global
           call _c7QVH(R1) args: 0, res: 0, upd: 0;
       c7QVI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7QVH() //  [R1]
         { info_tbl: [(c7QVH,
                       label: block_c7QVH_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QVH: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.731352302 UTC

[section ""data" . GHC.IO.Encoding.Types.close_closure" {
     GHC.IO.Encoding.Types.close_closure:
         const GHC.IO.Encoding.Types.close_info;
 },
 GHC.IO.Encoding.Types.close_entry() //  [R2]
         { info_tbl: [(c7QVY,
                       label: GHC.IO.Encoding.Types.close_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QVY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7QVZ; else goto c7QW0;
       c7QVZ: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.close_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7QW0: // global
           I64[Sp - 8] = block_c7QVV_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7QW4; else goto c7QVW;
       u7QW4: // global
           call _c7QVV(R1) args: 0, res: 0, upd: 0;
       c7QVW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7QVV() //  [R1]
         { info_tbl: [(c7QVV,
                       label: block_c7QVV_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QVV: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.732736515 UTC

[section ""data" . GHC.IO.Encoding.Types.recover_closure" {
     GHC.IO.Encoding.Types.recover_closure:
         const GHC.IO.Encoding.Types.recover_info;
 },
 GHC.IO.Encoding.Types.recover_entry() //  [R2]
         { info_tbl: [(c7QWc,
                       label: GHC.IO.Encoding.Types.recover_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QWc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7QWd; else goto c7QWe;
       c7QWd: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.recover_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7QWe: // global
           I64[Sp - 8] = block_c7QW9_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7QWi; else goto c7QWa;
       u7QWi: // global
           call _c7QW9(R1) args: 0, res: 0, upd: 0;
       c7QWa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7QW9() //  [R1]
         { info_tbl: [(c7QW9,
                       label: block_c7QW9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QW9: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.734598771 UTC

[section ""data" . GHC.IO.Encoding.Types.encode_closure" {
     GHC.IO.Encoding.Types.encode_closure:
         const GHC.IO.Encoding.Types.encode_info;
 },
 GHC.IO.Encoding.Types.encode_entry() //  [R2]
         { info_tbl: [(c7QWq,
                       label: GHC.IO.Encoding.Types.encode_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QWq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7QWr; else goto c7QWs;
       c7QWr: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.encode_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7QWs: // global
           I64[Sp - 8] = block_c7QWn_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7QWw; else goto c7QWo;
       u7QWw: // global
           call _c7QWn(R1) args: 0, res: 0, upd: 0;
       c7QWo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7QWn() //  [R1]
         { info_tbl: [(c7QWn,
                       label: block_c7QWn_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QWn: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.73584095 UTC

[section ""data" . GHC.IO.Encoding.Types.mkTextEncoder_closure" {
     GHC.IO.Encoding.Types.mkTextEncoder_closure:
         const ()_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.736503679 UTC

[section ""data" . GHC.IO.Encoding.Types.mkTextDecoder_closure" {
     GHC.IO.Encoding.Types.mkTextDecoder_closure:
         const ()_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.7374983 UTC

[section ""data" . GHC.IO.Encoding.Types.textEncodingName_closure" {
     GHC.IO.Encoding.Types.textEncodingName_closure:
         const GHC.IO.Encoding.Types.textEncodingName_info;
 },
 GHC.IO.Encoding.Types.textEncodingName_entry() //  [R2]
         { info_tbl: [(c7QWE,
                       label: GHC.IO.Encoding.Types.textEncodingName_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QWE: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7QWF; else goto c7QWG;
       c7QWF: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.textEncodingName_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7QWG: // global
           I64[Sp - 8] = block_c7QWB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7QWK; else goto c7QWC;
       u7QWK: // global
           call _c7QWB(R1) args: 0, res: 0, upd: 0;
       c7QWC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7QWB() //  [R1]
         { info_tbl: [(c7QWB,
                       label: block_c7QWB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QWB: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.738892655 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_closure" {
     GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_closure:
         const GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_info;
 },
 GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_entry() //  [R2,
                                                                   R3, R4]
         { info_tbl: [(c7QWS,
                       label: GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QWS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7QWT; else goto c7QWU;
       c7QWT: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7QWU: // global
           I64[Sp - 16] = block_c7QWP_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7QWY; else goto c7QWQ;
       u7QWY: // global
           call _c7QWP(R1) args: 0, res: 0, upd: 0;
       c7QWQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7QWP() //  [R1]
         { info_tbl: [(c7QWP,
                       label: block_c7QWP_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QWP: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.741092212 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowTextEncoding1_closure" {
     GHC.IO.Encoding.Types.$fShowTextEncoding1_closure:
         const GHC.IO.Encoding.Types.$fShowTextEncoding1_info;
 },
 GHC.IO.Encoding.Types.$fShowTextEncoding1_entry() //  [R2, R3]
         { info_tbl: [(c7QX6,
                       label: GHC.IO.Encoding.Types.$fShowTextEncoding1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QX6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7QX7; else goto c7QX8;
       c7QX7: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.$fShowTextEncoding1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7QX8: // global
           I64[Sp - 16] = block_c7QX3_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7QXc; else goto c7QX4;
       u7QXc: // global
           call _c7QX3(R1) args: 0, res: 0, upd: 0;
       c7QX4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7QX3() //  [R1]
         { info_tbl: [(c7QX3,
                       label: block_c7QX3_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QX3: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.742573161 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_closure" {
     GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_closure:
         const GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_info;
 },
 GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_entry() //  [R2,
                                                                  R3]
         { info_tbl: [(c7QXh,
                       label: GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QXh: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Encoding.Types.$fShowTextEncoding1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.743556247 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowTextEncoding_closure" {
     GHC.IO.Encoding.Types.$fShowTextEncoding_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_closure+3;
         const GHC.IO.Encoding.Types.textEncodingName_closure+1;
         const GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.744353939 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$trModule4_bytes" {
     GHC.IO.Encoding.Types.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.74506216 UTC

[section ""data" . GHC.IO.Encoding.Types.$trModule3_closure" {
     GHC.IO.Encoding.Types.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.745849517 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$trModule2_bytes" {
     GHC.IO.Encoding.Types.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,46,69,110,99,111,100,105,110,103,46,84,121,112,101,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.746570385 UTC

[section ""data" . GHC.IO.Encoding.Types.$trModule1_closure" {
     GHC.IO.Encoding.Types.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.74729588 UTC

[section ""data" . GHC.IO.Encoding.Types.$trModule_closure" {
     GHC.IO.Encoding.Types.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.Encoding.Types.$trModule3_closure+1;
         const GHC.IO.Encoding.Types.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.748068568 UTC

[section ""data" . $krep_r7QPf_closure" {
     $krep_r7QPf_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc()_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.748843991 UTC

[section ""data" . $krep1_r7QPg_closure" {
     $krep1_r7QPg_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord8_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.749859179 UTC

[section ""data" . $krep2_r7QPh_closure" {
     $krep2_r7QPh_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.751066925 UTC

[section ""data" . $krep3_r7QPi_closure" {
     $krep3_r7QPi_closure:
         const :_con_info;
         const $krep_r7QPf_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.751680329 UTC

[section ""data" . $krep4_r7QPj_closure" {
     $krep4_r7QPj_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep3_r7QPi_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.752285665 UTC

[section ""data" . $krep5_r7QPk_closure" {
     $krep5_r7QPk_closure:
         const :_con_info;
         const $krep2_r7QPh_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.752849638 UTC

[section ""data" . $krep6_r7QPl_closure" {
     $krep6_r7QPl_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep5_r7QPk_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.753596379 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcBufferCodec1_closure" {
     GHC.IO.Encoding.Types.$tcBufferCodec1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const GHC.Types.krep$*->*->*_closure;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.75437696 UTC

[section ""data" . $krep7_r7QPm_closure" {
     $krep7_r7QPm_closure:
         const GHC.Types.KindRepVar_con_info;
         const 2;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.75514437 UTC

[section ""data" . $krep8_r7QPn_closure" {
     $krep8_r7QPn_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r7QPm_closure+2;
         const $krep4_r7QPj_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.755823588 UTC

[section ""data" . $krep9_r7QPo_closure" {
     $krep9_r7QPo_closure:
         const :_con_info;
         const $krep7_r7QPm_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.756536873 UTC

[section ""data" . $krep10_r7QPp_closure" {
     $krep10_r7QPp_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep9_r7QPo_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.757230252 UTC

[section ""data" . $krep11_r7QPq_closure" {
     $krep11_r7QPq_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.757947092 UTC

[section ""data" . $krep12_r7QPr_closure" {
     $krep12_r7QPr_closure:
         const :_con_info;
         const $krep11_r7QPq_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.758628071 UTC

[section ""data" . $krep13_r7QPs_closure" {
     $krep13_r7QPs_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Buffer.$tcBuffer_closure;
         const $krep12_r7QPr_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.75998616 UTC

[section ""data" . $krep14_r7QPt_closure" {
     $krep14_r7QPt_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.760587705 UTC

[section ""data" . $krep15_r7QPu_closure" {
     $krep15_r7QPu_closure:
         const :_con_info;
         const $krep14_r7QPt_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.761288986 UTC

[section ""data" . $krep16_r7QPv_closure" {
     $krep16_r7QPv_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Buffer.$tcBuffer_closure;
         const $krep15_r7QPu_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.762012999 UTC

[section ""data" . $krep17_r7QPw_closure" {
     $krep17_r7QPw_closure:
         const :_con_info;
         const $krep13_r7QPs_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.762638447 UTC

[section ""data" . $krep18_r7QPx_closure" {
     $krep18_r7QPx_closure:
         const :_con_info;
         const $krep16_r7QPv_closure+1;
         const $krep17_r7QPw_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.763283012 UTC

[section ""data" . $krep19_r7QPy_closure" {
     $krep19_r7QPy_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep18_r7QPx_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.763957362 UTC

[section ""data" . $krep20_r7QPz_closure" {
     $krep20_r7QPz_closure:
         const :_con_info;
         const $krep19_r7QPy_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.764586847 UTC

[section ""data" . $krep21_r7QPA_closure" {
     $krep21_r7QPA_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep20_r7QPz_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.765237196 UTC

[section ""data" . $krep22_r7QPB_closure" {
     $krep22_r7QPB_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep13_r7QPs_closure+1;
         const $krep21_r7QPA_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.765982345 UTC

[section ""data" . $krep23_r7QPC_closure" {
     $krep23_r7QPC_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep16_r7QPv_closure+1;
         const $krep22_r7QPB_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.766598801 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tcCodingProgress2_bytes" {
     GHC.IO.Encoding.Types.$tcCodingProgress2_bytes:
         I8[] [67,111,100,105,110,103,80,114,111,103,114,101,115,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.767273092 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcCodingProgress1_closure" {
     GHC.IO.Encoding.Types.$tcCodingProgress1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tcCodingProgress2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.767932441 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcCodingProgress_closure" {
     GHC.IO.Encoding.Types.$tcCodingProgress_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tcCodingProgress1_closure+1;
         const GHC.Types.krep$*_closure;
         const 4536835953909491444;
         const 10020924989385933984;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.769093434 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'InputUnderflow1_closure" {
     GHC.IO.Encoding.Types.$tc'InputUnderflow1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Encoding.Types.$tcCodingProgress_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.770016959 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tc'InputUnderflow3_bytes" {
     GHC.IO.Encoding.Types.$tc'InputUnderflow3_bytes:
         I8[] [39,73,110,112,117,116,85,110,100,101,114,102,108,111,119]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.770909259 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'InputUnderflow2_closure" {
     GHC.IO.Encoding.Types.$tc'InputUnderflow2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tc'InputUnderflow3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.771762409 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'InputUnderflow_closure" {
     GHC.IO.Encoding.Types.$tc'InputUnderflow_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tc'InputUnderflow2_closure+1;
         const GHC.IO.Encoding.Types.$tc'InputUnderflow1_closure+1;
         const 7310901713659969130;
         const 7213149953264042554;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.7726468 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tc'OutputUnderflow2_bytes" {
     GHC.IO.Encoding.Types.$tc'OutputUnderflow2_bytes:
         I8[] [39,79,117,116,112,117,116,85,110,100,101,114,102,108,111,119]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.773457278 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'OutputUnderflow1_closure" {
     GHC.IO.Encoding.Types.$tc'OutputUnderflow1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tc'OutputUnderflow2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.774289994 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'OutputUnderflow_closure" {
     GHC.IO.Encoding.Types.$tc'OutputUnderflow_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tc'OutputUnderflow1_closure+1;
         const GHC.IO.Encoding.Types.$tc'InputUnderflow1_closure+1;
         const 9796056422104521286;
         const 11682915108109873596;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.775185684 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tc'InvalidSequence2_bytes" {
     GHC.IO.Encoding.Types.$tc'InvalidSequence2_bytes:
         I8[] [39,73,110,118,97,108,105,100,83,101,113,117,101,110,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.776030997 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'InvalidSequence1_closure" {
     GHC.IO.Encoding.Types.$tc'InvalidSequence1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tc'InvalidSequence2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.776730124 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'InvalidSequence_closure" {
     GHC.IO.Encoding.Types.$tc'InvalidSequence_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tc'InvalidSequence1_closure+1;
         const GHC.IO.Encoding.Types.$tc'InputUnderflow1_closure+1;
         const 11342030351124486013;
         const 4985313935970877948;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.77747198 UTC

[section ""data" . $krep24_r7QPD_closure" {
     $krep24_r7QPD_closure:
         const :_con_info;
         const GHC.IO.Encoding.Types.$tc'InputUnderflow1_closure+1;
         const $krep18_r7QPx_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.778129677 UTC

[section ""data" . $krep25_r7QPE_closure" {
     $krep25_r7QPE_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,,)_closure;
         const $krep24_r7QPD_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.779265143 UTC

[section ""data" . $krep26_r7QPF_closure" {
     $krep26_r7QPF_closure:
         const :_con_info;
         const $krep25_r7QPE_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.779918553 UTC

[section ""data" . $krep27_r7QPG_closure" {
     $krep27_r7QPG_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep26_r7QPF_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.780548615 UTC

[section ""data" . $krep28_r7QPH_closure" {
     $krep28_r7QPH_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep13_r7QPs_closure+1;
         const $krep27_r7QPG_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.781131919 UTC

[section ""data" . $krep29_r7QPI_closure" {
     $krep29_r7QPI_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep16_r7QPv_closure+1;
         const $krep28_r7QPH_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.781799358 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tcBufferCodec3_bytes" {
     GHC.IO.Encoding.Types.$tcBufferCodec3_bytes:
         I8[] [66,117,102,102,101,114,67,111,100,101,99]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.782377697 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcBufferCodec2_closure" {
     GHC.IO.Encoding.Types.$tcBufferCodec2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tcBufferCodec3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.783030504 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcBufferCodec_closure" {
     GHC.IO.Encoding.Types.$tcBufferCodec_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tcBufferCodec2_closure+1;
         const GHC.IO.Encoding.Types.$tcBufferCodec1_closure+4;
         const 8585015667497772909;
         const 7745120500523128511;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.783745564 UTC

[section ""data" . $krep30_r7QPJ_closure" {
     $krep30_r7QPJ_closure:
         const :_con_info;
         const $krep11_r7QPq_closure+2;
         const $krep9_r7QPo_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.784380911 UTC

[section ""data" . $krep31_r7QPK_closure" {
     $krep31_r7QPK_closure:
         const :_con_info;
         const $krep14_r7QPt_closure+2;
         const $krep30_r7QPJ_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.785021619 UTC

[section ""data" . $krep32_r7QPL_closure" {
     $krep32_r7QPL_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Encoding.Types.$tcBufferCodec_closure+1;
         const $krep31_r7QPK_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.785756482 UTC

[section ""data" . $krep33_r7QPM_closure" {
     $krep33_r7QPM_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r7QPn_closure+4;
         const $krep32_r7QPL_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.786423977 UTC

[section ""data" . $krep34_r7QPN_closure" {
     $krep34_r7QPN_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r7QPp_closure+1;
         const $krep33_r7QPM_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.787542231 UTC

[section ""data" . $krep35_r7QPO_closure" {
     $krep35_r7QPO_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r7QPj_closure+1;
         const $krep34_r7QPN_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.788166143 UTC

[section ""data" . $krep36_r7QPP_closure" {
     $krep36_r7QPP_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep23_r7QPC_closure+4;
         const $krep35_r7QPO_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.788839853 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'BufferCodec1_closure" {
     GHC.IO.Encoding.Types.$tc'BufferCodec1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r7QPI_closure+4;
         const $krep36_r7QPP_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.789501568 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tc'BufferCodec3_bytes" {
     GHC.IO.Encoding.Types.$tc'BufferCodec3_bytes:
         I8[] [39,66,117,102,102,101,114,67,111,100,101,99]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.790061961 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'BufferCodec2_closure" {
     GHC.IO.Encoding.Types.$tc'BufferCodec2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tc'BufferCodec3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.79067499 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'BufferCodec_closure" {
     GHC.IO.Encoding.Types.$tc'BufferCodec_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tc'BufferCodec2_closure+1;
         const GHC.IO.Encoding.Types.$tc'BufferCodec1_closure+4;
         const 7854563382940536875;
         const 13968497653111525953;
         const 3;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.791332913 UTC

[section ""data" . $krep37_r7QPQ_closure" {
     $krep37_r7QPQ_closure:
         const :_con_info;
         const $krep2_r7QPh_closure+1;
         const $krep15_r7QPu_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.792044144 UTC

[section ""data" . $krep38_r7QPR_closure" {
     $krep38_r7QPR_closure:
         const :_con_info;
         const $krep1_r7QPg_closure+1;
         const $krep37_r7QPQ_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.792728603 UTC

[section ""data" . $krep39_r7QPS_closure" {
     $krep39_r7QPS_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Encoding.Types.$tcBufferCodec_closure+1;
         const $krep38_r7QPR_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.793480111 UTC

[section ""data" . $krep40_r7QPT_closure" {
     $krep40_r7QPT_closure:
         const :_con_info;
         const $krep39_r7QPS_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.794169242 UTC

[section ""data" . $krep41_r7QPU_closure" {
     $krep41_r7QPU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep40_r7QPT_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.794810602 UTC

[section ""data" . $krep42_r7QPV_closure" {
     $krep42_r7QPV_closure:
         const :_con_info;
         const $krep1_r7QPg_closure+1;
         const $krep12_r7QPr_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.795948313 UTC

[section ""data" . $krep43_r7QPW_closure" {
     $krep43_r7QPW_closure:
         const :_con_info;
         const $krep2_r7QPh_closure+1;
         const $krep42_r7QPV_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.796557851 UTC

[section ""data" . $krep44_r7QPX_closure" {
     $krep44_r7QPX_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Encoding.Types.$tcBufferCodec_closure+1;
         const $krep43_r7QPW_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.797232214 UTC

[section ""data" . $krep45_r7QPY_closure" {
     $krep45_r7QPY_closure:
         const :_con_info;
         const $krep44_r7QPX_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.797881531 UTC

[section ""data" . $krep46_r7QPZ_closure" {
     $krep46_r7QPZ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep45_r7QPY_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.798477979 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tcTextEncoding2_bytes" {
     GHC.IO.Encoding.Types.$tcTextEncoding2_bytes:
         I8[] [84,101,120,116,69,110,99,111,100,105,110,103]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.799110418 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcTextEncoding1_closure" {
     GHC.IO.Encoding.Types.$tcTextEncoding1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tcTextEncoding2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.799777585 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcTextEncoding_closure" {
     GHC.IO.Encoding.Types.$tcTextEncoding_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tcTextEncoding1_closure+1;
         const GHC.Types.krep$*_closure;
         const 17289914150150147669;
         const 3676960838620070165;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.800450331 UTC

[section ""data" . $krep47_r7QQ0_closure" {
     $krep47_r7QQ0_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Encoding.Types.$tcTextEncoding_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.801095305 UTC

[section ""data" . $krep48_r7QQ1_closure" {
     $krep48_r7QQ1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep46_r7QPZ_closure+1;
         const $krep47_r7QQ0_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.802283939 UTC

[section ""data" . $krep49_r7QQ2_closure" {
     $krep49_r7QQ2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep41_r7QPU_closure+1;
         const $krep48_r7QQ1_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.802952666 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'TextEncoding1_closure" {
     GHC.IO.Encoding.Types.$tc'TextEncoding1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r7QPl_closure+1;
         const $krep49_r7QQ2_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.803607274 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tc'TextEncoding3_bytes" {
     GHC.IO.Encoding.Types.$tc'TextEncoding3_bytes:
         I8[] [39,84,101,120,116,69,110,99,111,100,105,110,103]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.80471453 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'TextEncoding2_closure" {
     GHC.IO.Encoding.Types.$tc'TextEncoding2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tc'TextEncoding3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.805348135 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'TextEncoding_closure" {
     GHC.IO.Encoding.Types.$tc'TextEncoding_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tc'TextEncoding2_closure+1;
         const GHC.IO.Encoding.Types.$tc'TextEncoding1_closure+4;
         const 6558277295920728213;
         const 3754397505420773780;
         const 2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.806021089 UTC

[section ""data" . GHC.IO.Encoding.Types.InputUnderflow_closure" {
     GHC.IO.Encoding.Types.InputUnderflow_closure:
         const GHC.IO.Encoding.Types.InputUnderflow_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.806626323 UTC

[section ""data" . GHC.IO.Encoding.Types.OutputUnderflow_closure" {
     GHC.IO.Encoding.Types.OutputUnderflow_closure:
         const GHC.IO.Encoding.Types.OutputUnderflow_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.807229592 UTC

[section ""data" . GHC.IO.Encoding.Types.InvalidSequence_closure" {
     GHC.IO.Encoding.Types.InvalidSequence_closure:
         const GHC.IO.Encoding.Types.InvalidSequence_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.808237179 UTC

[section ""data" . GHC.IO.Encoding.Types.TextEncoding_closure" {
     GHC.IO.Encoding.Types.TextEncoding_closure:
         const GHC.IO.Encoding.Types.TextEncoding_info;
 },
 GHC.IO.Encoding.Types.TextEncoding_entry() //  [R2, R3, R4]
         { info_tbl: [(c7QXp,
                       label: GHC.IO.Encoding.Types.TextEncoding_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QXp: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7QXt; else goto c7QXs;
       c7QXt: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.TextEncoding_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7QXs: // global
           I64[Hp - 24] = GHC.IO.Encoding.Types.TextEncoding_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.809545855 UTC

[section ""data" . GHC.IO.Encoding.Types.BufferCodec_closure" {
     GHC.IO.Encoding.Types.BufferCodec_closure:
         const GHC.IO.Encoding.Types.BufferCodec_info;
 },
 GHC.IO.Encoding.Types.BufferCodec_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c7QXz,
                       label: GHC.IO.Encoding.Types.BufferCodec_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 25} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QXz: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7QXD; else goto c7QXC;
       c7QXD: // global
           HpAlloc = 48;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.BufferCodec_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7QXC: // global
           I64[Hp - 40] = GHC.IO.Encoding.Types.BufferCodec_con_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           P64[Hp] = R6;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.810577834 UTC

[section ""relreadonly" . GHC.IO.Encoding.Types.CodingProgress_closure_tbl" {
     GHC.IO.Encoding.Types.CodingProgress_closure_tbl:
         const GHC.IO.Encoding.Types.InputUnderflow_closure+1;
         const GHC.IO.Encoding.Types.OutputUnderflow_closure+2;
         const GHC.IO.Encoding.Types.InvalidSequence_closure+3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.811273287 UTC

[GHC.IO.Encoding.Types.InputUnderflow_con_entry() //  [R1]
         { info_tbl: [(c7QXE,
                       label: GHC.IO.Encoding.Types.InputUnderflow_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,69,110,99,111,100,105,110,103,46,84,121,112,101,115,46,73,110,112,117,116,85,110,100,101,114,102,108,111,119]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QXE: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.812118511 UTC

[GHC.IO.Encoding.Types.OutputUnderflow_con_entry() //  [R1]
         { info_tbl: [(c7QXF,
                       label: GHC.IO.Encoding.Types.OutputUnderflow_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,69,110,99,111,100,105,110,103,46,84,121,112,101,115,46,79,117,116,112,117,116,85,110,100,101,114,102,108,111,119]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QXF: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.812954889 UTC

[GHC.IO.Encoding.Types.InvalidSequence_con_entry() //  [R1]
         { info_tbl: [(c7QXG,
                       label: GHC.IO.Encoding.Types.InvalidSequence_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,69,110,99,111,100,105,110,103,46,84,121,112,101,115,46,73,110,118,97,108,105,100,83,101,113,117,101,110,99,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QXG: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.81428984 UTC

[GHC.IO.Encoding.Types.TextEncoding_con_entry() //  [R1]
         { info_tbl: [(c7QXH,
                       label: GHC.IO.Encoding.Types.TextEncoding_con_info
                       rep:HeapRep 3 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,69,110,99,111,100,105,110,103,46,84,121,112,101,115,46,84,101,120,116,69,110,99,111,100,105,110,103]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QXH: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.815058534 UTC

[GHC.IO.Encoding.Types.BufferCodec_con_entry() //  [R1]
         { info_tbl: [(c7QXI,
                       label: GHC.IO.Encoding.Types.BufferCodec_con_info
                       rep:HeapRep 5 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,69,110,99,111,100,105,110,103,46,84,121,112,101,115,46,66,117,102,102,101,114,67,111,100,101,99]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QXI: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.815817859 UTC

[section ""relreadonly" . S7QSa_srt" {
     S7QSa_srt:
         const GHC.IO.Encoding.Types.$w$cshowsPrec_closure;
         const GHC.IO.Encoding.Types.$fShowCodingProgress1_closure;
         const GHC.IO.Encoding.Types.$fShowCodingProgress3_closure;
         const GHC.IO.Encoding.Types.$fShowCodingProgress5_closure;
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.81644275 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:02:57.816983006 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$fShowCodingProgress6_bytes" {
     GHC.IO.Encoding.Types.$fShowCodingProgress6_bytes:
         I8[] [73,110,112,117,116,85,110,100,101,114,102,108,111,119]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.818425869 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress5_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress5_closure:
         const GHC.IO.Encoding.Types.$fShowCodingProgress5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.Types.$fShowCodingProgress5_entry() //  [R1]
         { info_tbl: [(c7QXP,
                       label: GHC.IO.Encoding.Types.$fShowCodingProgress5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QXP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7QXQ; else goto c7QXR;
       c7QXQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7QXR: // global
           (_c7QXM::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7QXM::I64 == 0) goto c7QXO; else goto c7QXN;
       c7QXO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7QXN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7QXM::I64;
           R2 = GHC.IO.Encoding.Types.$fShowCodingProgress6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.819446138 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$fShowCodingProgress4_bytes" {
     GHC.IO.Encoding.Types.$fShowCodingProgress4_bytes:
         I8[] [79,117,116,112,117,116,85,110,100,101,114,102,108,111,119]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.820251945 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress3_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress3_closure:
         const GHC.IO.Encoding.Types.$fShowCodingProgress3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.Types.$fShowCodingProgress3_entry() //  [R1]
         { info_tbl: [(c7QXY,
                       label: GHC.IO.Encoding.Types.$fShowCodingProgress3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QXY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7QXZ; else goto c7QY0;
       c7QXZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7QY0: // global
           (_c7QXV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7QXV::I64 == 0) goto c7QXX; else goto c7QXW;
       c7QXX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7QXW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7QXV::I64;
           R2 = GHC.IO.Encoding.Types.$fShowCodingProgress4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.821278163 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$fShowCodingProgress2_bytes" {
     GHC.IO.Encoding.Types.$fShowCodingProgress2_bytes:
         I8[] [73,110,118,97,108,105,100,83,101,113,117,101,110,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.822108086 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress1_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress1_closure:
         const GHC.IO.Encoding.Types.$fShowCodingProgress1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.Types.$fShowCodingProgress1_entry() //  [R1]
         { info_tbl: [(c7QY7,
                       label: GHC.IO.Encoding.Types.$fShowCodingProgress1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QY7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7QY8; else goto c7QY9;
       c7QY8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7QY9: // global
           (_c7QY4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7QY4::I64 == 0) goto c7QY6; else goto c7QY5;
       c7QY6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7QY5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7QY4::I64;
           R2 = GHC.IO.Encoding.Types.$fShowCodingProgress2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.824147112 UTC

[section ""data" . GHC.IO.Encoding.Types.$w$cshowsPrec_closure" {
     GHC.IO.Encoding.Types.$w$cshowsPrec_closure:
         const GHC.IO.Encoding.Types.$w$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Encoding.Types.$w$cshowsPrec_entry() //  [R2, R3]
         { info_tbl: [(c7QYm,
                       label: GHC.IO.Encoding.Types.$w$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QYm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7QYn; else goto c7QYo;
       c7QYn: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7QYo: // global
           I64[Sp - 16] = block_c7QYe_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7QYz; else goto c7QYf;
       u7QYz: // global
           call _c7QYe(R1) args: 0, res: 0, upd: 0;
       c7QYf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7QYe() //  [R1]
         { info_tbl: [(c7QYe,
                       label: block_c7QYe_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QYe: // global
           _s7QQ5::P64 = P64[Sp + 8];
           _c7QYl::P64 = R1 & 7;
           if (_c7QYl::P64 < 3) goto u7QYy; else goto c7QYk;
       u7QYy: // global
           if (_c7QYl::P64 < 2) goto c7QYi; else goto c7QYj;
       c7QYi: // global
           R3 = _s7QQ5::P64;
           R2 = GHC.IO.Encoding.Types.$fShowCodingProgress5_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7QYj: // global
           R3 = _s7QQ5::P64;
           R2 = GHC.IO.Encoding.Types.$fShowCodingProgress3_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7QYk: // global
           R3 = _s7QQ5::P64;
           R2 = GHC.IO.Encoding.Types.$fShowCodingProgress1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.825602311 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_closure:
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_entry() //  [R3,
                                                                     R4]
         { info_tbl: [(c7QYE,
                       label: GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QYE: // global
           _s7QQ8::P64 = R3;
           R3 = R4;
           R2 = _s7QQ8::P64;
           call GHC.IO.Encoding.Types.$w$cshowsPrec_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.8267427 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_closure:
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_info;
         const 0;
 },
 GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_entry() //  [R2]
         { info_tbl: [(c7QYT,
                       label: GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QYT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7QYU; else goto c7QYV;
       c7QYU: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7QYV: // global
           I64[Sp - 8] = block_c7QYL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7QZ6; else goto c7QYM;
       u7QZ6: // global
           call _c7QYL(R1) args: 0, res: 0, upd: 0;
       c7QYM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7QYL() //  [R1]
         { info_tbl: [(c7QYL,
                       label: block_c7QYL_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QYL: // global
           _c7QYS::P64 = R1 & 7;
           if (_c7QYS::P64 < 3) goto u7QZ5; else goto c7QYR;
       u7QZ5: // global
           if (_c7QYS::P64 < 2) goto c7QYP; else goto c7QYQ;
       c7QYP: // global
           R1 = GHC.IO.Encoding.Types.$fShowCodingProgress5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7QYQ: // global
           R1 = GHC.IO.Encoding.Types.$fShowCodingProgress3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7QYR: // global
           R1 = GHC.IO.Encoding.Types.$fShowCodingProgress1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.828126025 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_closure:
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_info;
         const 0;
 },
 GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_entry() //  [R2,
                                                                    R3]
         { info_tbl: [(c7QZb,
                       label: GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QZb: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Encoding.Types.$w$cshowsPrec_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.828951675 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_closure+3;
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_closure+1;
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.831294005 UTC

[section ""data" . GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_closure" {
     GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_closure:
         const GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_info;
 },
 GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_entry() //  [R2, R3]
         { info_tbl: [(c7QZq,
                       label: GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QZq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7QZr; else goto c7QZs;
       c7QZr: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7QZs: // global
           I64[Sp - 16] = block_c7QZi_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7R0p; else goto c7QZj;
       u7R0p: // global
           call _c7QZi(R1) args: 0, res: 0, upd: 0;
       c7QZj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7QZi() //  [R1]
         { info_tbl: [(c7QZi,
                       label: block_c7QZi_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QZi: // global
           _s7QQf::P64 = P64[Sp + 8];
           _c7QZp::P64 = R1 & 7;
           if (_c7QZp::P64 < 3) goto u7R0f; else goto c7QZo;
       u7R0f: // global
           if (_c7QZp::P64 < 2) goto c7QZm; else goto c7QZn;
       c7QZm: // global
           I64[Sp + 8] = block_c7QZv_info;
           R1 = _s7QQf::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7R0m; else goto c7QZx;
       u7R0m: // global
           call _c7QZv(R1) args: 0, res: 0, upd: 0;
       c7QZx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7QZn: // global
           I64[Sp + 8] = block_c7QZK_info;
           R1 = _s7QQf::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7R0n; else goto c7QZM;
       u7R0n: // global
           call _c7QZK(R1) args: 0, res: 0, upd: 0;
       c7QZM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7QZo: // global
           I64[Sp + 8] = block_c7QZZ_info;
           R1 = _s7QQf::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7R0o; else goto c7R01;
       u7R0o: // global
           call _c7QZZ(R1) args: 0, res: 0, upd: 0;
       c7R01: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7QZv() //  [R1]
         { info_tbl: [(c7QZv,
                       label: block_c7QZv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QZv: // global
           if (R1 & 7 == 1) goto u7R0g; else goto u7R0h;
       u7R0g: // global
           Sp = Sp + 8;
           call _c7R0b() args: 0, res: 0, upd: 0;
       u7R0h: // global
           Sp = Sp + 8;
           call _c7R07() args: 0, res: 0, upd: 0;
     }
 },
 _c7QZK() //  [R1]
         { info_tbl: [(c7QZK,
                       label: block_c7QZK_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QZK: // global
           if (R1 & 7 == 2) goto u7R0i; else goto u7R0j;
       u7R0i: // global
           Sp = Sp + 8;
           call _c7R0b() args: 0, res: 0, upd: 0;
       u7R0j: // global
           Sp = Sp + 8;
           call _c7R07() args: 0, res: 0, upd: 0;
     }
 },
 _c7QZZ() //  [R1]
         { info_tbl: [(c7QZZ,
                       label: block_c7QZZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7QZZ: // global
           if (R1 & 7 == 3) goto u7R0k; else goto u7R0l;
       u7R0k: // global
           Sp = Sp + 8;
           call _c7R0b() args: 0, res: 0, upd: 0;
       u7R0l: // global
           Sp = Sp + 8;
           call _c7R07() args: 0, res: 0, upd: 0;
     }
 },
 _c7R0b() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R0b: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7R07() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R07: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.835205287 UTC

[section ""data" . GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_closure" {
     GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_closure:
         const GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_info;
 },
 GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c7R0I,
                       label: GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R0I: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7R0J; else goto c7R0K;
       c7R0J: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7R0K: // global
           I64[Sp - 16] = block_c7R0A_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7R1H; else goto c7R0B;
       u7R1H: // global
           call _c7R0A(R1) args: 0, res: 0, upd: 0;
       c7R0B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7R0A() //  [R1]
         { info_tbl: [(c7R0A,
                       label: block_c7R0A_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R0A: // global
           _s7QQl::P64 = P64[Sp + 8];
           _c7R0H::P64 = R1 & 7;
           if (_c7R0H::P64 < 3) goto u7R1x; else goto c7R0G;
       u7R1x: // global
           if (_c7R0H::P64 < 2) goto c7R0E; else goto c7R0F;
       c7R0E: // global
           I64[Sp + 8] = block_c7R0N_info;
           R1 = _s7QQl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7R1E; else goto c7R0P;
       u7R1E: // global
           call _c7R0N(R1) args: 0, res: 0, upd: 0;
       c7R0P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7R0F: // global
           I64[Sp + 8] = block_c7R12_info;
           R1 = _s7QQl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7R1F; else goto c7R14;
       u7R1F: // global
           call _c7R12(R1) args: 0, res: 0, upd: 0;
       c7R14: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7R0G: // global
           I64[Sp + 8] = block_c7R1h_info;
           R1 = _s7QQl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7R1G; else goto c7R1j;
       u7R1G: // global
           call _c7R1h(R1) args: 0, res: 0, upd: 0;
       c7R1j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7R0N() //  [R1]
         { info_tbl: [(c7R0N,
                       label: block_c7R0N_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R0N: // global
           if (R1 & 7 == 1) goto u7R1y; else goto u7R1z;
       u7R1y: // global
           Sp = Sp + 8;
           call _c7R1t() args: 0, res: 0, upd: 0;
       u7R1z: // global
           Sp = Sp + 8;
           call _c7R1p() args: 0, res: 0, upd: 0;
     }
 },
 _c7R12() //  [R1]
         { info_tbl: [(c7R12,
                       label: block_c7R12_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R12: // global
           if (R1 & 7 == 2) goto u7R1A; else goto u7R1B;
       u7R1A: // global
           Sp = Sp + 8;
           call _c7R1t() args: 0, res: 0, upd: 0;
       u7R1B: // global
           Sp = Sp + 8;
           call _c7R1p() args: 0, res: 0, upd: 0;
     }
 },
 _c7R1h() //  [R1]
         { info_tbl: [(c7R1h,
                       label: block_c7R1h_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R1h: // global
           if (R1 & 7 == 3) goto u7R1C; else goto u7R1D;
       u7R1C: // global
           Sp = Sp + 8;
           call _c7R1t() args: 0, res: 0, upd: 0;
       u7R1D: // global
           Sp = Sp + 8;
           call _c7R1p() args: 0, res: 0, upd: 0;
     }
 },
 _c7R1t() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R1t: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7R1p() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R1p: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.838917751 UTC

[section ""data" . GHC.IO.Encoding.Types.$fEqCodingProgress_closure" {
     GHC.IO.Encoding.Types.$fEqCodingProgress_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_closure+2;
         const GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.840048304 UTC

[section ""data" . GHC.IO.Encoding.Types.setState_closure" {
     GHC.IO.Encoding.Types.setState_closure:
         const GHC.IO.Encoding.Types.setState_info;
 },
 GHC.IO.Encoding.Types.setState_entry() //  [R2]
         { info_tbl: [(c7R1V,
                       label: GHC.IO.Encoding.Types.setState_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R1V: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7R1W; else goto c7R1X;
       c7R1W: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.setState_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7R1X: // global
           I64[Sp - 8] = block_c7R1S_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7R21; else goto c7R1T;
       u7R21: // global
           call _c7R1S(R1) args: 0, res: 0, upd: 0;
       c7R1T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7R1S() //  [R1]
         { info_tbl: [(c7R1S,
                       label: block_c7R1S_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R1S: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.84170829 UTC

[section ""data" . GHC.IO.Encoding.Types.getState_closure" {
     GHC.IO.Encoding.Types.getState_closure:
         const GHC.IO.Encoding.Types.getState_info;
 },
 GHC.IO.Encoding.Types.getState_entry() //  [R2]
         { info_tbl: [(c7R29,
                       label: GHC.IO.Encoding.Types.getState_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R29: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7R2a; else goto c7R2b;
       c7R2a: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.getState_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7R2b: // global
           I64[Sp - 8] = block_c7R26_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7R2f; else goto c7R27;
       u7R2f: // global
           call _c7R26(R1) args: 0, res: 0, upd: 0;
       c7R27: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7R26() //  [R1]
         { info_tbl: [(c7R26,
                       label: block_c7R26_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R26: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.843413448 UTC

[section ""data" . GHC.IO.Encoding.Types.close_closure" {
     GHC.IO.Encoding.Types.close_closure:
         const GHC.IO.Encoding.Types.close_info;
 },
 GHC.IO.Encoding.Types.close_entry() //  [R2]
         { info_tbl: [(c7R2n,
                       label: GHC.IO.Encoding.Types.close_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R2n: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7R2o; else goto c7R2p;
       c7R2o: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.close_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7R2p: // global
           I64[Sp - 8] = block_c7R2k_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7R2t; else goto c7R2l;
       u7R2t: // global
           call _c7R2k(R1) args: 0, res: 0, upd: 0;
       c7R2l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7R2k() //  [R1]
         { info_tbl: [(c7R2k,
                       label: block_c7R2k_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R2k: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.845131317 UTC

[section ""data" . GHC.IO.Encoding.Types.recover_closure" {
     GHC.IO.Encoding.Types.recover_closure:
         const GHC.IO.Encoding.Types.recover_info;
 },
 GHC.IO.Encoding.Types.recover_entry() //  [R2]
         { info_tbl: [(c7R2B,
                       label: GHC.IO.Encoding.Types.recover_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R2B: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7R2C; else goto c7R2D;
       c7R2C: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.recover_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7R2D: // global
           I64[Sp - 8] = block_c7R2y_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7R2H; else goto c7R2z;
       u7R2H: // global
           call _c7R2y(R1) args: 0, res: 0, upd: 0;
       c7R2z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7R2y() //  [R1]
         { info_tbl: [(c7R2y,
                       label: block_c7R2y_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R2y: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.846910261 UTC

[section ""data" . GHC.IO.Encoding.Types.encode_closure" {
     GHC.IO.Encoding.Types.encode_closure:
         const GHC.IO.Encoding.Types.encode_info;
 },
 GHC.IO.Encoding.Types.encode_entry() //  [R2]
         { info_tbl: [(c7R2P,
                       label: GHC.IO.Encoding.Types.encode_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R2P: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7R2Q; else goto c7R2R;
       c7R2Q: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.encode_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7R2R: // global
           I64[Sp - 8] = block_c7R2M_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7R2V; else goto c7R2N;
       u7R2V: // global
           call _c7R2M(R1) args: 0, res: 0, upd: 0;
       c7R2N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7R2M() //  [R1]
         { info_tbl: [(c7R2M,
                       label: block_c7R2M_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R2M: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.849061242 UTC

[section ""data" . GHC.IO.Encoding.Types.mkTextEncoder_closure" {
     GHC.IO.Encoding.Types.mkTextEncoder_closure:
         const ()_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.849966007 UTC

[section ""data" . GHC.IO.Encoding.Types.mkTextDecoder_closure" {
     GHC.IO.Encoding.Types.mkTextDecoder_closure:
         const ()_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.851036161 UTC

[section ""data" . GHC.IO.Encoding.Types.textEncodingName_closure" {
     GHC.IO.Encoding.Types.textEncodingName_closure:
         const GHC.IO.Encoding.Types.textEncodingName_info;
 },
 GHC.IO.Encoding.Types.textEncodingName_entry() //  [R2]
         { info_tbl: [(c7R33,
                       label: GHC.IO.Encoding.Types.textEncodingName_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R33: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7R34; else goto c7R35;
       c7R34: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.textEncodingName_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7R35: // global
           I64[Sp - 8] = block_c7R30_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7R39; else goto c7R31;
       u7R39: // global
           call _c7R30(R1) args: 0, res: 0, upd: 0;
       c7R31: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7R30() //  [R1]
         { info_tbl: [(c7R30,
                       label: block_c7R30_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R30: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.852788137 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_closure" {
     GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_closure:
         const GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_info;
 },
 GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_entry() //  [R2,
                                                                   R3, R4]
         { info_tbl: [(c7R3h,
                       label: GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R3h: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7R3i; else goto c7R3j;
       c7R3i: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7R3j: // global
           I64[Sp - 16] = block_c7R3e_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7R3n; else goto c7R3f;
       u7R3n: // global
           call _c7R3e(R1) args: 0, res: 0, upd: 0;
       c7R3f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7R3e() //  [R1]
         { info_tbl: [(c7R3e,
                       label: block_c7R3e_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R3e: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.854573982 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowTextEncoding1_closure" {
     GHC.IO.Encoding.Types.$fShowTextEncoding1_closure:
         const GHC.IO.Encoding.Types.$fShowTextEncoding1_info;
 },
 GHC.IO.Encoding.Types.$fShowTextEncoding1_entry() //  [R2, R3]
         { info_tbl: [(c7R3v,
                       label: GHC.IO.Encoding.Types.$fShowTextEncoding1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R3v: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7R3w; else goto c7R3x;
       c7R3w: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.$fShowTextEncoding1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7R3x: // global
           I64[Sp - 16] = block_c7R3s_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7R3B; else goto c7R3t;
       u7R3B: // global
           call _c7R3s(R1) args: 0, res: 0, upd: 0;
       c7R3t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7R3s() //  [R1]
         { info_tbl: [(c7R3s,
                       label: block_c7R3s_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R3s: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.856279576 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_closure" {
     GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_closure:
         const GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_info;
 },
 GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_entry() //  [R2,
                                                                  R3]
         { info_tbl: [(c7R3G,
                       label: GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R3G: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Encoding.Types.$fShowTextEncoding1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.857347718 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowTextEncoding_closure" {
     GHC.IO.Encoding.Types.$fShowTextEncoding_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_closure+3;
         const GHC.IO.Encoding.Types.textEncodingName_closure+1;
         const GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.858003536 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$trModule4_bytes" {
     GHC.IO.Encoding.Types.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.858809935 UTC

[section ""data" . GHC.IO.Encoding.Types.$trModule3_closure" {
     GHC.IO.Encoding.Types.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.859663797 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$trModule2_bytes" {
     GHC.IO.Encoding.Types.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,46,69,110,99,111,100,105,110,103,46,84,121,112,101,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.861058059 UTC

[section ""data" . GHC.IO.Encoding.Types.$trModule1_closure" {
     GHC.IO.Encoding.Types.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.862540657 UTC

[section ""data" . GHC.IO.Encoding.Types.$trModule_closure" {
     GHC.IO.Encoding.Types.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.Encoding.Types.$trModule3_closure+1;
         const GHC.IO.Encoding.Types.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.863418792 UTC

[section ""data" . $krep_r7QPf_closure" {
     $krep_r7QPf_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc()_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.86426148 UTC

[section ""data" . $krep1_r7QPg_closure" {
     $krep1_r7QPg_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord8_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.865070775 UTC

[section ""data" . $krep2_r7QPh_closure" {
     $krep2_r7QPh_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.86594276 UTC

[section ""data" . $krep3_r7QPi_closure" {
     $krep3_r7QPi_closure:
         const :_con_info;
         const $krep_r7QPf_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.866802104 UTC

[section ""data" . $krep4_r7QPj_closure" {
     $krep4_r7QPj_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep3_r7QPi_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.86766356 UTC

[section ""data" . $krep5_r7QPk_closure" {
     $krep5_r7QPk_closure:
         const :_con_info;
         const $krep2_r7QPh_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.868516358 UTC

[section ""data" . $krep6_r7QPl_closure" {
     $krep6_r7QPl_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep5_r7QPk_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.869474439 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcBufferCodec1_closure" {
     GHC.IO.Encoding.Types.$tcBufferCodec1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const GHC.Types.krep$*->*->*_closure;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.870355571 UTC

[section ""data" . $krep7_r7QPm_closure" {
     $krep7_r7QPm_closure:
         const GHC.Types.KindRepVar_con_info;
         const 2;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.871219262 UTC

[section ""data" . $krep8_r7QPn_closure" {
     $krep8_r7QPn_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r7QPm_closure+2;
         const $krep4_r7QPj_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.872624112 UTC

[section ""data" . $krep9_r7QPo_closure" {
     $krep9_r7QPo_closure:
         const :_con_info;
         const $krep7_r7QPm_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.873428801 UTC

[section ""data" . $krep10_r7QPp_closure" {
     $krep10_r7QPp_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep9_r7QPo_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.874241283 UTC

[section ""data" . $krep11_r7QPq_closure" {
     $krep11_r7QPq_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.874879772 UTC

[section ""data" . $krep12_r7QPr_closure" {
     $krep12_r7QPr_closure:
         const :_con_info;
         const $krep11_r7QPq_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.875489889 UTC

[section ""data" . $krep13_r7QPs_closure" {
     $krep13_r7QPs_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Buffer.$tcBuffer_closure;
         const $krep12_r7QPr_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.87611031 UTC

[section ""data" . $krep14_r7QPt_closure" {
     $krep14_r7QPt_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.87664929 UTC

[section ""data" . $krep15_r7QPu_closure" {
     $krep15_r7QPu_closure:
         const :_con_info;
         const $krep14_r7QPt_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.877282124 UTC

[section ""data" . $krep16_r7QPv_closure" {
     $krep16_r7QPv_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Buffer.$tcBuffer_closure;
         const $krep15_r7QPu_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.877960162 UTC

[section ""data" . $krep17_r7QPw_closure" {
     $krep17_r7QPw_closure:
         const :_con_info;
         const $krep13_r7QPs_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.878608434 UTC

[section ""data" . $krep18_r7QPx_closure" {
     $krep18_r7QPx_closure:
         const :_con_info;
         const $krep16_r7QPv_closure+1;
         const $krep17_r7QPw_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.879235873 UTC

[section ""data" . $krep19_r7QPy_closure" {
     $krep19_r7QPy_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep18_r7QPx_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.879883171 UTC

[section ""data" . $krep20_r7QPz_closure" {
     $krep20_r7QPz_closure:
         const :_con_info;
         const $krep19_r7QPy_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.880511471 UTC

[section ""data" . $krep21_r7QPA_closure" {
     $krep21_r7QPA_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep20_r7QPz_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.88190861 UTC

[section ""data" . $krep22_r7QPB_closure" {
     $krep22_r7QPB_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep13_r7QPs_closure+1;
         const $krep21_r7QPA_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.882526304 UTC

[section ""data" . $krep23_r7QPC_closure" {
     $krep23_r7QPC_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep16_r7QPv_closure+1;
         const $krep22_r7QPB_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.883114329 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tcCodingProgress2_bytes" {
     GHC.IO.Encoding.Types.$tcCodingProgress2_bytes:
         I8[] [67,111,100,105,110,103,80,114,111,103,114,101,115,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.883730752 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcCodingProgress1_closure" {
     GHC.IO.Encoding.Types.$tcCodingProgress1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tcCodingProgress2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.884306382 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcCodingProgress_closure" {
     GHC.IO.Encoding.Types.$tcCodingProgress_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tcCodingProgress1_closure+1;
         const GHC.Types.krep$*_closure;
         const 4536835953909491444;
         const 10020924989385933984;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.884962522 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'InputUnderflow1_closure" {
     GHC.IO.Encoding.Types.$tc'InputUnderflow1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Encoding.Types.$tcCodingProgress_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.885662423 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tc'InputUnderflow3_bytes" {
     GHC.IO.Encoding.Types.$tc'InputUnderflow3_bytes:
         I8[] [39,73,110,112,117,116,85,110,100,101,114,102,108,111,119]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.886268866 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'InputUnderflow2_closure" {
     GHC.IO.Encoding.Types.$tc'InputUnderflow2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tc'InputUnderflow3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.886874853 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'InputUnderflow_closure" {
     GHC.IO.Encoding.Types.$tc'InputUnderflow_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tc'InputUnderflow2_closure+1;
         const GHC.IO.Encoding.Types.$tc'InputUnderflow1_closure+1;
         const 7310901713659969130;
         const 7213149953264042554;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.887564904 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tc'OutputUnderflow2_bytes" {
     GHC.IO.Encoding.Types.$tc'OutputUnderflow2_bytes:
         I8[] [39,79,117,116,112,117,116,85,110,100,101,114,102,108,111,119]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.888152763 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'OutputUnderflow1_closure" {
     GHC.IO.Encoding.Types.$tc'OutputUnderflow1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tc'OutputUnderflow2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.888781291 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'OutputUnderflow_closure" {
     GHC.IO.Encoding.Types.$tc'OutputUnderflow_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tc'OutputUnderflow1_closure+1;
         const GHC.IO.Encoding.Types.$tc'InputUnderflow1_closure+1;
         const 9796056422104521286;
         const 11682915108109873596;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.889925354 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tc'InvalidSequence2_bytes" {
     GHC.IO.Encoding.Types.$tc'InvalidSequence2_bytes:
         I8[] [39,73,110,118,97,108,105,100,83,101,113,117,101,110,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.890492966 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'InvalidSequence1_closure" {
     GHC.IO.Encoding.Types.$tc'InvalidSequence1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tc'InvalidSequence2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.891133709 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'InvalidSequence_closure" {
     GHC.IO.Encoding.Types.$tc'InvalidSequence_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tc'InvalidSequence1_closure+1;
         const GHC.IO.Encoding.Types.$tc'InputUnderflow1_closure+1;
         const 11342030351124486013;
         const 4985313935970877948;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.891869122 UTC

[section ""data" . $krep24_r7QPD_closure" {
     $krep24_r7QPD_closure:
         const :_con_info;
         const GHC.IO.Encoding.Types.$tc'InputUnderflow1_closure+1;
         const $krep18_r7QPx_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.892473326 UTC

[section ""data" . $krep25_r7QPE_closure" {
     $krep25_r7QPE_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,,)_closure;
         const $krep24_r7QPD_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.893077151 UTC

[section ""data" . $krep26_r7QPF_closure" {
     $krep26_r7QPF_closure:
         const :_con_info;
         const $krep25_r7QPE_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.8937504 UTC

[section ""data" . $krep27_r7QPG_closure" {
     $krep27_r7QPG_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep26_r7QPF_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.894326137 UTC

[section ""data" . $krep28_r7QPH_closure" {
     $krep28_r7QPH_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep13_r7QPs_closure+1;
         const $krep27_r7QPG_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.894984521 UTC

[section ""data" . $krep29_r7QPI_closure" {
     $krep29_r7QPI_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep16_r7QPv_closure+1;
         const $krep28_r7QPH_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.895630503 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tcBufferCodec3_bytes" {
     GHC.IO.Encoding.Types.$tcBufferCodec3_bytes:
         I8[] [66,117,102,102,101,114,67,111,100,101,99]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.896248691 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcBufferCodec2_closure" {
     GHC.IO.Encoding.Types.$tcBufferCodec2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tcBufferCodec3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.897376767 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcBufferCodec_closure" {
     GHC.IO.Encoding.Types.$tcBufferCodec_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tcBufferCodec2_closure+1;
         const GHC.IO.Encoding.Types.$tcBufferCodec1_closure+4;
         const 8585015667497772909;
         const 7745120500523128511;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.898054878 UTC

[section ""data" . $krep30_r7QPJ_closure" {
     $krep30_r7QPJ_closure:
         const :_con_info;
         const $krep11_r7QPq_closure+2;
         const $krep9_r7QPo_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.898679699 UTC

[section ""data" . $krep31_r7QPK_closure" {
     $krep31_r7QPK_closure:
         const :_con_info;
         const $krep14_r7QPt_closure+2;
         const $krep30_r7QPJ_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.899317242 UTC

[section ""data" . $krep32_r7QPL_closure" {
     $krep32_r7QPL_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Encoding.Types.$tcBufferCodec_closure+1;
         const $krep31_r7QPK_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.899936738 UTC

[section ""data" . $krep33_r7QPM_closure" {
     $krep33_r7QPM_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r7QPn_closure+4;
         const $krep32_r7QPL_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.900530425 UTC

[section ""data" . $krep34_r7QPN_closure" {
     $krep34_r7QPN_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r7QPp_closure+1;
         const $krep33_r7QPM_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.901115121 UTC

[section ""data" . $krep35_r7QPO_closure" {
     $krep35_r7QPO_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r7QPj_closure+1;
         const $krep34_r7QPN_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.901798764 UTC

[section ""data" . $krep36_r7QPP_closure" {
     $krep36_r7QPP_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep23_r7QPC_closure+4;
         const $krep35_r7QPO_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.902439386 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'BufferCodec1_closure" {
     GHC.IO.Encoding.Types.$tc'BufferCodec1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r7QPI_closure+4;
         const $krep36_r7QPP_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.903043046 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tc'BufferCodec3_bytes" {
     GHC.IO.Encoding.Types.$tc'BufferCodec3_bytes:
         I8[] [39,66,117,102,102,101,114,67,111,100,101,99]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.903697569 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'BufferCodec2_closure" {
     GHC.IO.Encoding.Types.$tc'BufferCodec2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tc'BufferCodec3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.904338835 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'BufferCodec_closure" {
     GHC.IO.Encoding.Types.$tc'BufferCodec_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tc'BufferCodec2_closure+1;
         const GHC.IO.Encoding.Types.$tc'BufferCodec1_closure+4;
         const 7854563382940536875;
         const 13968497653111525953;
         const 3;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.905476334 UTC

[section ""data" . $krep37_r7QPQ_closure" {
     $krep37_r7QPQ_closure:
         const :_con_info;
         const $krep2_r7QPh_closure+1;
         const $krep15_r7QPu_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.906126004 UTC

[section ""data" . $krep38_r7QPR_closure" {
     $krep38_r7QPR_closure:
         const :_con_info;
         const $krep1_r7QPg_closure+1;
         const $krep37_r7QPQ_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.906730514 UTC

[section ""data" . $krep39_r7QPS_closure" {
     $krep39_r7QPS_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Encoding.Types.$tcBufferCodec_closure+1;
         const $krep38_r7QPR_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.907377594 UTC

[section ""data" . $krep40_r7QPT_closure" {
     $krep40_r7QPT_closure:
         const :_con_info;
         const $krep39_r7QPS_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.907970459 UTC

[section ""data" . $krep41_r7QPU_closure" {
     $krep41_r7QPU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep40_r7QPT_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.908564651 UTC

[section ""data" . $krep42_r7QPV_closure" {
     $krep42_r7QPV_closure:
         const :_con_info;
         const $krep1_r7QPg_closure+1;
         const $krep12_r7QPr_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.90973029 UTC

[section ""data" . $krep43_r7QPW_closure" {
     $krep43_r7QPW_closure:
         const :_con_info;
         const $krep2_r7QPh_closure+1;
         const $krep42_r7QPV_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.910389559 UTC

[section ""data" . $krep44_r7QPX_closure" {
     $krep44_r7QPX_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Encoding.Types.$tcBufferCodec_closure+1;
         const $krep43_r7QPW_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.911005619 UTC

[section ""data" . $krep45_r7QPY_closure" {
     $krep45_r7QPY_closure:
         const :_con_info;
         const $krep44_r7QPX_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.911650039 UTC

[section ""data" . $krep46_r7QPZ_closure" {
     $krep46_r7QPZ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep45_r7QPY_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.912294929 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tcTextEncoding2_bytes" {
     GHC.IO.Encoding.Types.$tcTextEncoding2_bytes:
         I8[] [84,101,120,116,69,110,99,111,100,105,110,103]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.912886248 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcTextEncoding1_closure" {
     GHC.IO.Encoding.Types.$tcTextEncoding1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tcTextEncoding2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.913969952 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcTextEncoding_closure" {
     GHC.IO.Encoding.Types.$tcTextEncoding_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tcTextEncoding1_closure+1;
         const GHC.Types.krep$*_closure;
         const 17289914150150147669;
         const 3676960838620070165;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.914599687 UTC

[section ""data" . $krep47_r7QQ0_closure" {
     $krep47_r7QQ0_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Encoding.Types.$tcTextEncoding_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.91522546 UTC

[section ""data" . $krep48_r7QQ1_closure" {
     $krep48_r7QQ1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep46_r7QPZ_closure+1;
         const $krep47_r7QQ0_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.915823332 UTC

[section ""data" . $krep49_r7QQ2_closure" {
     $krep49_r7QQ2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep41_r7QPU_closure+1;
         const $krep48_r7QQ1_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.916466107 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'TextEncoding1_closure" {
     GHC.IO.Encoding.Types.$tc'TextEncoding1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r7QPl_closure+1;
         const $krep49_r7QQ2_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.917102983 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tc'TextEncoding3_bytes" {
     GHC.IO.Encoding.Types.$tc'TextEncoding3_bytes:
         I8[] [39,84,101,120,116,69,110,99,111,100,105,110,103]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.918081121 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'TextEncoding2_closure" {
     GHC.IO.Encoding.Types.$tc'TextEncoding2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tc'TextEncoding3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.918731916 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'TextEncoding_closure" {
     GHC.IO.Encoding.Types.$tc'TextEncoding_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tc'TextEncoding2_closure+1;
         const GHC.IO.Encoding.Types.$tc'TextEncoding1_closure+4;
         const 6558277295920728213;
         const 3754397505420773780;
         const 2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.919373793 UTC

[section ""data" . GHC.IO.Encoding.Types.InputUnderflow_closure" {
     GHC.IO.Encoding.Types.InputUnderflow_closure:
         const GHC.IO.Encoding.Types.InputUnderflow_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.919984413 UTC

[section ""data" . GHC.IO.Encoding.Types.OutputUnderflow_closure" {
     GHC.IO.Encoding.Types.OutputUnderflow_closure:
         const GHC.IO.Encoding.Types.OutputUnderflow_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.920584352 UTC

[section ""data" . GHC.IO.Encoding.Types.InvalidSequence_closure" {
     GHC.IO.Encoding.Types.InvalidSequence_closure:
         const GHC.IO.Encoding.Types.InvalidSequence_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.921665965 UTC

[section ""data" . GHC.IO.Encoding.Types.TextEncoding_closure" {
     GHC.IO.Encoding.Types.TextEncoding_closure:
         const GHC.IO.Encoding.Types.TextEncoding_info;
 },
 GHC.IO.Encoding.Types.TextEncoding_entry() //  [R2, R3, R4]
         { info_tbl: [(c7R3O,
                       label: GHC.IO.Encoding.Types.TextEncoding_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R3O: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7R3S; else goto c7R3R;
       c7R3S: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.TextEncoding_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7R3R: // global
           I64[Hp - 24] = GHC.IO.Encoding.Types.TextEncoding_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.923432891 UTC

[section ""data" . GHC.IO.Encoding.Types.BufferCodec_closure" {
     GHC.IO.Encoding.Types.BufferCodec_closure:
         const GHC.IO.Encoding.Types.BufferCodec_info;
 },
 GHC.IO.Encoding.Types.BufferCodec_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c7R3Y,
                       label: GHC.IO.Encoding.Types.BufferCodec_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 25} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R3Y: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7R42; else goto c7R41;
       c7R42: // global
           HpAlloc = 48;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.BufferCodec_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7R41: // global
           I64[Hp - 40] = GHC.IO.Encoding.Types.BufferCodec_con_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           P64[Hp] = R6;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.924428745 UTC

[section ""relreadonly" . GHC.IO.Encoding.Types.CodingProgress_closure_tbl" {
     GHC.IO.Encoding.Types.CodingProgress_closure_tbl:
         const GHC.IO.Encoding.Types.InputUnderflow_closure+1;
         const GHC.IO.Encoding.Types.OutputUnderflow_closure+2;
         const GHC.IO.Encoding.Types.InvalidSequence_closure+3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.925088236 UTC

[GHC.IO.Encoding.Types.InputUnderflow_con_entry() //  [R1]
         { info_tbl: [(c7R43,
                       label: GHC.IO.Encoding.Types.InputUnderflow_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,69,110,99,111,100,105,110,103,46,84,121,112,101,115,46,73,110,112,117,116,85,110,100,101,114,102,108,111,119]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R43: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.926573792 UTC

[GHC.IO.Encoding.Types.OutputUnderflow_con_entry() //  [R1]
         { info_tbl: [(c7R45,
                       label: GHC.IO.Encoding.Types.OutputUnderflow_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,69,110,99,111,100,105,110,103,46,84,121,112,101,115,46,79,117,116,112,117,116,85,110,100,101,114,102,108,111,119]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R45: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.927306014 UTC

[GHC.IO.Encoding.Types.InvalidSequence_con_entry() //  [R1]
         { info_tbl: [(c7R47,
                       label: GHC.IO.Encoding.Types.InvalidSequence_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,69,110,99,111,100,105,110,103,46,84,121,112,101,115,46,73,110,118,97,108,105,100,83,101,113,117,101,110,99,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R47: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.928151543 UTC

[GHC.IO.Encoding.Types.TextEncoding_con_entry() //  [R1]
         { info_tbl: [(c7R49,
                       label: GHC.IO.Encoding.Types.TextEncoding_con_info
                       rep:HeapRep 3 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,69,110,99,111,100,105,110,103,46,84,121,112,101,115,46,84,101,120,116,69,110,99,111,100,105,110,103]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R49: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.928959231 UTC

[GHC.IO.Encoding.Types.BufferCodec_con_entry() //  [R1]
         { info_tbl: [(c7R4b,
                       label: GHC.IO.Encoding.Types.BufferCodec_con_info
                       rep:HeapRep 5 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,69,110,99,111,100,105,110,103,46,84,121,112,101,115,46,66,117,102,102,101,114,67,111,100,101,99]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R4b: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.929905828 UTC

[section ""relreadonly" . S7QSa_srt" {
     S7QSa_srt:
         const GHC.IO.Encoding.Types.$w$cshowsPrec_closure;
         const GHC.IO.Encoding.Types.$fShowCodingProgress1_closure;
         const GHC.IO.Encoding.Types.$fShowCodingProgress3_closure;
         const GHC.IO.Encoding.Types.$fShowCodingProgress5_closure;
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.931097384 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:02:57.932614219 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$fShowCodingProgress6_bytes" {
     GHC.IO.Encoding.Types.$fShowCodingProgress6_bytes:
         I8[] [73,110,112,117,116,85,110,100,101,114,102,108,111,119]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.93622394 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress5_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress5_closure:
         const GHC.IO.Encoding.Types.$fShowCodingProgress5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.Types.$fShowCodingProgress5_entry() //  [R1]
         { info_tbl: [(c7R4k,
                       label: GHC.IO.Encoding.Types.$fShowCodingProgress5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R4k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7R4l; else goto c7R4m;
       c7R4l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7R4m: // global
           (_c7R4h::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7R4h::I64 == 0) goto c7R4j; else goto c7R4i;
       c7R4j: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7R4i: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7R4h::I64;
           R2 = GHC.IO.Encoding.Types.$fShowCodingProgress6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.942103167 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$fShowCodingProgress4_bytes" {
     GHC.IO.Encoding.Types.$fShowCodingProgress4_bytes:
         I8[] [79,117,116,112,117,116,85,110,100,101,114,102,108,111,119]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.945488253 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress3_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress3_closure:
         const GHC.IO.Encoding.Types.$fShowCodingProgress3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.Types.$fShowCodingProgress3_entry() //  [R1]
         { info_tbl: [(c7R4B,
                       label: GHC.IO.Encoding.Types.$fShowCodingProgress3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R4B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7R4C; else goto c7R4D;
       c7R4C: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7R4D: // global
           (_c7R4y::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7R4y::I64 == 0) goto c7R4A; else goto c7R4z;
       c7R4A: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7R4z: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7R4y::I64;
           R2 = GHC.IO.Encoding.Types.$fShowCodingProgress4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.951178263 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$fShowCodingProgress2_bytes" {
     GHC.IO.Encoding.Types.$fShowCodingProgress2_bytes:
         I8[] [73,110,118,97,108,105,100,83,101,113,117,101,110,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.954067163 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress1_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress1_closure:
         const GHC.IO.Encoding.Types.$fShowCodingProgress1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.Types.$fShowCodingProgress1_entry() //  [R1]
         { info_tbl: [(c7R4S,
                       label: GHC.IO.Encoding.Types.$fShowCodingProgress1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R4S: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7R4T; else goto c7R4U;
       c7R4T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7R4U: // global
           (_c7R4P::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7R4P::I64 == 0) goto c7R4R; else goto c7R4Q;
       c7R4R: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7R4Q: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7R4P::I64;
           R2 = GHC.IO.Encoding.Types.$fShowCodingProgress2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.96038341 UTC

[section ""data" . GHC.IO.Encoding.Types.$w$cshowsPrec_closure" {
     GHC.IO.Encoding.Types.$w$cshowsPrec_closure:
         const GHC.IO.Encoding.Types.$w$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Encoding.Types.$w$cshowsPrec_entry() //  [R2, R3]
         { info_tbl: [(c7R5e,
                       label: GHC.IO.Encoding.Types.$w$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R5e: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7R5f; else goto c7R5g;
       c7R5f: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7R5g: // global
           I64[Sp - 16] = block_c7R56_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7R5r; else goto c7R57;
       u7R5r: // global
           call _c7R56(R1) args: 0, res: 0, upd: 0;
       c7R57: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7R56() //  [R1]
         { info_tbl: [(c7R56,
                       label: block_c7R56_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R56: // global
           _s7QQ5::P64 = P64[Sp + 8];
           _c7R5d::P64 = R1 & 7;
           if (_c7R5d::P64 < 3) goto u7R5q; else goto c7R5c;
       u7R5q: // global
           if (_c7R5d::P64 < 2) goto c7R5a; else goto c7R5b;
       c7R5a: // global
           R3 = _s7QQ5::P64;
           R2 = GHC.IO.Encoding.Types.$fShowCodingProgress5_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7R5b: // global
           R3 = _s7QQ5::P64;
           R2 = GHC.IO.Encoding.Types.$fShowCodingProgress3_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7R5c: // global
           R3 = _s7QQ5::P64;
           R2 = GHC.IO.Encoding.Types.$fShowCodingProgress1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.970423994 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_closure:
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_entry() //  [R3,
                                                                     R4]
         { info_tbl: [(c7R5G,
                       label: GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R5G: // global
           _s7QQ8::P64 = R3;
           R3 = R4;
           R2 = _s7QQ8::P64;
           call GHC.IO.Encoding.Types.$w$cshowsPrec_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.97585421 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_closure:
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_info;
         const 0;
 },
 GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_entry() //  [R2]
         { info_tbl: [(c7R5Z,
                       label: GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R5Z: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7R60; else goto c7R61;
       c7R60: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7R61: // global
           I64[Sp - 8] = block_c7R5R_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7R6c; else goto c7R5S;
       u7R6c: // global
           call _c7R5R(R1) args: 0, res: 0, upd: 0;
       c7R5S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7R5R() //  [R1]
         { info_tbl: [(c7R5R,
                       label: block_c7R5R_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R5R: // global
           _c7R5Y::P64 = R1 & 7;
           if (_c7R5Y::P64 < 3) goto u7R6b; else goto c7R5X;
       u7R6b: // global
           if (_c7R5Y::P64 < 2) goto c7R5V; else goto c7R5W;
       c7R5V: // global
           R1 = GHC.IO.Encoding.Types.$fShowCodingProgress5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7R5W: // global
           R1 = GHC.IO.Encoding.Types.$fShowCodingProgress3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7R5X: // global
           R1 = GHC.IO.Encoding.Types.$fShowCodingProgress1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.983269248 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_closure:
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_info;
         const 0;
 },
 GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_entry() //  [R2,
                                                                    R3]
         { info_tbl: [(c7R6u,
                       label: GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R6u: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Encoding.Types.$w$cshowsPrec_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.98698802 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_closure+3;
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_closure+1;
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:57.990275891 UTC

[section ""data" . GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_closure" {
     GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_closure:
         const GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_info;
 },
 GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_entry() //  [R2, R3]
         { info_tbl: [(c7R6O,
                       label: GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R6O: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7R6P; else goto c7R6Q;
       c7R6P: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7R6Q: // global
           I64[Sp - 16] = block_c7R6G_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7R7N; else goto c7R6H;
       u7R7N: // global
           call _c7R6G(R1) args: 0, res: 0, upd: 0;
       c7R6H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7R6G() //  [R1]
         { info_tbl: [(c7R6G,
                       label: block_c7R6G_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R6G: // global
           _s7QQf::P64 = P64[Sp + 8];
           _c7R6N::P64 = R1 & 7;
           if (_c7R6N::P64 < 3) goto u7R7D; else goto c7R6M;
       u7R7D: // global
           if (_c7R6N::P64 < 2) goto c7R6K; else goto c7R6L;
       c7R6K: // global
           I64[Sp + 8] = block_c7R6T_info;
           R1 = _s7QQf::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7R7K; else goto c7R6V;
       u7R7K: // global
           call _c7R6T(R1) args: 0, res: 0, upd: 0;
       c7R6V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7R6L: // global
           I64[Sp + 8] = block_c7R78_info;
           R1 = _s7QQf::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7R7L; else goto c7R7a;
       u7R7L: // global
           call _c7R78(R1) args: 0, res: 0, upd: 0;
       c7R7a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7R6M: // global
           I64[Sp + 8] = block_c7R7n_info;
           R1 = _s7QQf::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7R7M; else goto c7R7p;
       u7R7M: // global
           call _c7R7n(R1) args: 0, res: 0, upd: 0;
       c7R7p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7R6T() //  [R1]
         { info_tbl: [(c7R6T,
                       label: block_c7R6T_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R6T: // global
           if (R1 & 7 == 1) goto u7R7E; else goto u7R7F;
       u7R7E: // global
           Sp = Sp + 8;
           call _c7R7z() args: 0, res: 0, upd: 0;
       u7R7F: // global
           Sp = Sp + 8;
           call _c7R7v() args: 0, res: 0, upd: 0;
     }
 },
 _c7R78() //  [R1]
         { info_tbl: [(c7R78,
                       label: block_c7R78_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R78: // global
           if (R1 & 7 == 2) goto u7R7G; else goto u7R7H;
       u7R7G: // global
           Sp = Sp + 8;
           call _c7R7z() args: 0, res: 0, upd: 0;
       u7R7H: // global
           Sp = Sp + 8;
           call _c7R7v() args: 0, res: 0, upd: 0;
     }
 },
 _c7R7n() //  [R1]
         { info_tbl: [(c7R7n,
                       label: block_c7R7n_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R7n: // global
           if (R1 & 7 == 3) goto u7R7I; else goto u7R7J;
       u7R7I: // global
           Sp = Sp + 8;
           call _c7R7z() args: 0, res: 0, upd: 0;
       u7R7J: // global
           Sp = Sp + 8;
           call _c7R7v() args: 0, res: 0, upd: 0;
     }
 },
 _c7R7z() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R7z: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7R7v() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R7v: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.005086773 UTC

[section ""data" . GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_closure" {
     GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_closure:
         const GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_info;
 },
 GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c7R8E,
                       label: GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R8E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7R8F; else goto c7R8G;
       c7R8F: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7R8G: // global
           I64[Sp - 16] = block_c7R8w_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7R9D; else goto c7R8x;
       u7R9D: // global
           call _c7R8w(R1) args: 0, res: 0, upd: 0;
       c7R8x: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7R8w() //  [R1]
         { info_tbl: [(c7R8w,
                       label: block_c7R8w_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R8w: // global
           _s7QQl::P64 = P64[Sp + 8];
           _c7R8D::P64 = R1 & 7;
           if (_c7R8D::P64 < 3) goto u7R9t; else goto c7R8C;
       u7R9t: // global
           if (_c7R8D::P64 < 2) goto c7R8A; else goto c7R8B;
       c7R8A: // global
           I64[Sp + 8] = block_c7R8J_info;
           R1 = _s7QQl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7R9A; else goto c7R8L;
       u7R9A: // global
           call _c7R8J(R1) args: 0, res: 0, upd: 0;
       c7R8L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7R8B: // global
           I64[Sp + 8] = block_c7R8Y_info;
           R1 = _s7QQl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7R9B; else goto c7R90;
       u7R9B: // global
           call _c7R8Y(R1) args: 0, res: 0, upd: 0;
       c7R90: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7R8C: // global
           I64[Sp + 8] = block_c7R9d_info;
           R1 = _s7QQl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7R9C; else goto c7R9f;
       u7R9C: // global
           call _c7R9d(R1) args: 0, res: 0, upd: 0;
       c7R9f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7R8J() //  [R1]
         { info_tbl: [(c7R8J,
                       label: block_c7R8J_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R8J: // global
           if (R1 & 7 == 1) goto u7R9u; else goto u7R9v;
       u7R9u: // global
           Sp = Sp + 8;
           call _c7R9p() args: 0, res: 0, upd: 0;
       u7R9v: // global
           Sp = Sp + 8;
           call _c7R9l() args: 0, res: 0, upd: 0;
     }
 },
 _c7R8Y() //  [R1]
         { info_tbl: [(c7R8Y,
                       label: block_c7R8Y_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R8Y: // global
           if (R1 & 7 == 2) goto u7R9w; else goto u7R9x;
       u7R9w: // global
           Sp = Sp + 8;
           call _c7R9p() args: 0, res: 0, upd: 0;
       u7R9x: // global
           Sp = Sp + 8;
           call _c7R9l() args: 0, res: 0, upd: 0;
     }
 },
 _c7R9d() //  [R1]
         { info_tbl: [(c7R9d,
                       label: block_c7R9d_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R9d: // global
           if (R1 & 7 == 3) goto u7R9y; else goto u7R9z;
       u7R9y: // global
           Sp = Sp + 8;
           call _c7R9p() args: 0, res: 0, upd: 0;
       u7R9z: // global
           Sp = Sp + 8;
           call _c7R9l() args: 0, res: 0, upd: 0;
     }
 },
 _c7R9p() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R9p: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7R9l() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7R9l: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.01944897 UTC

[section ""data" . GHC.IO.Encoding.Types.$fEqCodingProgress_closure" {
     GHC.IO.Encoding.Types.$fEqCodingProgress_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_closure+2;
         const GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.021985119 UTC

[section ""data" . GHC.IO.Encoding.Types.setState_closure" {
     GHC.IO.Encoding.Types.setState_closure:
         const GHC.IO.Encoding.Types.setState_info;
 },
 GHC.IO.Encoding.Types.setState_entry() //  [R2]
         { info_tbl: [(c7Raq,
                       label: GHC.IO.Encoding.Types.setState_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Raq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Rar; else goto c7Ras;
       c7Rar: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.setState_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Ras: // global
           I64[Sp - 8] = block_c7Ran_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Raw; else goto c7Rao;
       u7Raw: // global
           call _c7Ran(R1) args: 0, res: 0, upd: 0;
       c7Rao: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Ran() //  [R1]
         { info_tbl: [(c7Ran,
                       label: block_c7Ran_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ran: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.028419805 UTC

[section ""data" . GHC.IO.Encoding.Types.getState_closure" {
     GHC.IO.Encoding.Types.getState_closure:
         const GHC.IO.Encoding.Types.getState_info;
 },
 GHC.IO.Encoding.Types.getState_entry() //  [R2]
         { info_tbl: [(c7RaN,
                       label: GHC.IO.Encoding.Types.getState_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RaN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7RaO; else goto c7RaP;
       c7RaO: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.getState_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7RaP: // global
           I64[Sp - 8] = block_c7RaK_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7RaT; else goto c7RaL;
       u7RaT: // global
           call _c7RaK(R1) args: 0, res: 0, upd: 0;
       c7RaL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RaK() //  [R1]
         { info_tbl: [(c7RaK,
                       label: block_c7RaK_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RaK: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.036247585 UTC

[section ""data" . GHC.IO.Encoding.Types.close_closure" {
     GHC.IO.Encoding.Types.close_closure:
         const GHC.IO.Encoding.Types.close_info;
 },
 GHC.IO.Encoding.Types.close_entry() //  [R2]
         { info_tbl: [(c7Rba,
                       label: GHC.IO.Encoding.Types.close_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Rba: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Rbb; else goto c7Rbc;
       c7Rbb: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.close_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Rbc: // global
           I64[Sp - 8] = block_c7Rb7_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Rbg; else goto c7Rb8;
       u7Rbg: // global
           call _c7Rb7(R1) args: 0, res: 0, upd: 0;
       c7Rb8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Rb7() //  [R1]
         { info_tbl: [(c7Rb7,
                       label: block_c7Rb7_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Rb7: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.044645097 UTC

[section ""data" . GHC.IO.Encoding.Types.recover_closure" {
     GHC.IO.Encoding.Types.recover_closure:
         const GHC.IO.Encoding.Types.recover_info;
 },
 GHC.IO.Encoding.Types.recover_entry() //  [R2]
         { info_tbl: [(c7Rbx,
                       label: GHC.IO.Encoding.Types.recover_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Rbx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Rby; else goto c7Rbz;
       c7Rby: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.recover_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Rbz: // global
           I64[Sp - 8] = block_c7Rbu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7RbD; else goto c7Rbv;
       u7RbD: // global
           call _c7Rbu(R1) args: 0, res: 0, upd: 0;
       c7Rbv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Rbu() //  [R1]
         { info_tbl: [(c7Rbu,
                       label: block_c7Rbu_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Rbu: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.053163357 UTC

[section ""data" . GHC.IO.Encoding.Types.encode_closure" {
     GHC.IO.Encoding.Types.encode_closure:
         const GHC.IO.Encoding.Types.encode_info;
 },
 GHC.IO.Encoding.Types.encode_entry() //  [R2]
         { info_tbl: [(c7RbU,
                       label: GHC.IO.Encoding.Types.encode_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RbU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7RbV; else goto c7RbW;
       c7RbV: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.encode_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7RbW: // global
           I64[Sp - 8] = block_c7RbR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Rc0; else goto c7RbS;
       u7Rc0: // global
           call _c7RbR(R1) args: 0, res: 0, upd: 0;
       c7RbS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RbR() //  [R1]
         { info_tbl: [(c7RbR,
                       label: block_c7RbR_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RbR: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.06066385 UTC

[section ""data" . GHC.IO.Encoding.Types.mkTextEncoder_closure" {
     GHC.IO.Encoding.Types.mkTextEncoder_closure:
         const ()_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.06354219 UTC

[section ""data" . GHC.IO.Encoding.Types.mkTextDecoder_closure" {
     GHC.IO.Encoding.Types.mkTextDecoder_closure:
         const ()_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.066374153 UTC

[section ""data" . GHC.IO.Encoding.Types.textEncodingName_closure" {
     GHC.IO.Encoding.Types.textEncodingName_closure:
         const GHC.IO.Encoding.Types.textEncodingName_info;
 },
 GHC.IO.Encoding.Types.textEncodingName_entry() //  [R2]
         { info_tbl: [(c7Rcj,
                       label: GHC.IO.Encoding.Types.textEncodingName_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Rcj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Rck; else goto c7Rcl;
       c7Rck: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.textEncodingName_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Rcl: // global
           I64[Sp - 8] = block_c7Rcg_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Rcp; else goto c7Rch;
       u7Rcp: // global
           call _c7Rcg(R1) args: 0, res: 0, upd: 0;
       c7Rch: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Rcg() //  [R1]
         { info_tbl: [(c7Rcg,
                       label: block_c7Rcg_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Rcg: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.075332647 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_closure" {
     GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_closure:
         const GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_info;
 },
 GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_entry() //  [R2,
                                                                   R3, R4]
         { info_tbl: [(c7RcI,
                       label: GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RcI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7RcJ; else goto c7RcK;
       c7RcJ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7RcK: // global
           I64[Sp - 16] = block_c7RcF_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7RcO; else goto c7RcG;
       u7RcO: // global
           call _c7RcF(R1) args: 0, res: 0, upd: 0;
       c7RcG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RcF() //  [R1]
         { info_tbl: [(c7RcF,
                       label: block_c7RcF_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RcF: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.081564149 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowTextEncoding1_closure" {
     GHC.IO.Encoding.Types.$fShowTextEncoding1_closure:
         const GHC.IO.Encoding.Types.$fShowTextEncoding1_info;
 },
 GHC.IO.Encoding.Types.$fShowTextEncoding1_entry() //  [R2, R3]
         { info_tbl: [(c7Rd5,
                       label: GHC.IO.Encoding.Types.$fShowTextEncoding1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Rd5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Rd6; else goto c7Rd7;
       c7Rd6: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.$fShowTextEncoding1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Rd7: // global
           I64[Sp - 16] = block_c7Rd2_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Rdb; else goto c7Rd3;
       u7Rdb: // global
           call _c7Rd2(R1) args: 0, res: 0, upd: 0;
       c7Rd3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Rd2() //  [R1]
         { info_tbl: [(c7Rd2,
                       label: block_c7Rd2_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Rd2: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.088206425 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_closure" {
     GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_closure:
         const GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_info;
 },
 GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_entry() //  [R2,
                                                                  R3]
         { info_tbl: [(c7Rdp,
                       label: GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Rdp: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Encoding.Types.$fShowTextEncoding1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.091805014 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowTextEncoding_closure" {
     GHC.IO.Encoding.Types.$fShowTextEncoding_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_closure+3;
         const GHC.IO.Encoding.Types.textEncodingName_closure+1;
         const GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.094032418 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$trModule4_bytes" {
     GHC.IO.Encoding.Types.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.095801388 UTC

[section ""data" . GHC.IO.Encoding.Types.$trModule3_closure" {
     GHC.IO.Encoding.Types.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.097717545 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$trModule2_bytes" {
     GHC.IO.Encoding.Types.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,46,69,110,99,111,100,105,110,103,46,84,121,112,101,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.099552496 UTC

[section ""data" . GHC.IO.Encoding.Types.$trModule1_closure" {
     GHC.IO.Encoding.Types.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.102002474 UTC

[section ""data" . GHC.IO.Encoding.Types.$trModule_closure" {
     GHC.IO.Encoding.Types.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.Encoding.Types.$trModule3_closure+1;
         const GHC.IO.Encoding.Types.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.103971925 UTC

[section ""data" . $krep_r7QPf_closure" {
     $krep_r7QPf_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc()_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.105840159 UTC

[section ""data" . $krep1_r7QPg_closure" {
     $krep1_r7QPg_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord8_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.107694364 UTC

[section ""data" . $krep2_r7QPh_closure" {
     $krep2_r7QPh_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.109893305 UTC

[section ""data" . $krep3_r7QPi_closure" {
     $krep3_r7QPi_closure:
         const :_con_info;
         const $krep_r7QPf_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.111642398 UTC

[section ""data" . $krep4_r7QPj_closure" {
     $krep4_r7QPj_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep3_r7QPi_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.113556287 UTC

[section ""data" . $krep5_r7QPk_closure" {
     $krep5_r7QPk_closure:
         const :_con_info;
         const $krep2_r7QPh_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.115437181 UTC

[section ""data" . $krep6_r7QPl_closure" {
     $krep6_r7QPl_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep5_r7QPk_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.118088391 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcBufferCodec1_closure" {
     GHC.IO.Encoding.Types.$tcBufferCodec1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const GHC.Types.krep$*->*->*_closure;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.119968467 UTC

[section ""data" . $krep7_r7QPm_closure" {
     $krep7_r7QPm_closure:
         const GHC.Types.KindRepVar_con_info;
         const 2;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.121809586 UTC

[section ""data" . $krep8_r7QPn_closure" {
     $krep8_r7QPn_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r7QPm_closure+2;
         const $krep4_r7QPj_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.123753435 UTC

[section ""data" . $krep9_r7QPo_closure" {
     $krep9_r7QPo_closure:
         const :_con_info;
         const $krep7_r7QPm_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.125877448 UTC

[section ""data" . $krep10_r7QPp_closure" {
     $krep10_r7QPp_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep9_r7QPo_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.1275614 UTC

[section ""data" . $krep11_r7QPq_closure" {
     $krep11_r7QPq_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.129372334 UTC

[section ""data" . $krep12_r7QPr_closure" {
     $krep12_r7QPr_closure:
         const :_con_info;
         const $krep11_r7QPq_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.131927243 UTC

[section ""data" . $krep13_r7QPs_closure" {
     $krep13_r7QPs_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Buffer.$tcBuffer_closure;
         const $krep12_r7QPr_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.134821757 UTC

[section ""data" . $krep14_r7QPt_closure" {
     $krep14_r7QPt_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.137075567 UTC

[section ""data" . $krep15_r7QPu_closure" {
     $krep15_r7QPu_closure:
         const :_con_info;
         const $krep14_r7QPt_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.139671573 UTC

[section ""data" . $krep16_r7QPv_closure" {
     $krep16_r7QPv_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Buffer.$tcBuffer_closure;
         const $krep15_r7QPu_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.142297503 UTC

[section ""data" . $krep17_r7QPw_closure" {
     $krep17_r7QPw_closure:
         const :_con_info;
         const $krep13_r7QPs_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.144946942 UTC

[section ""data" . $krep18_r7QPx_closure" {
     $krep18_r7QPx_closure:
         const :_con_info;
         const $krep16_r7QPv_closure+1;
         const $krep17_r7QPw_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.148221749 UTC

[section ""data" . $krep19_r7QPy_closure" {
     $krep19_r7QPy_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep18_r7QPx_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.151079703 UTC

[section ""data" . $krep20_r7QPz_closure" {
     $krep20_r7QPz_closure:
         const :_con_info;
         const $krep19_r7QPy_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.153082365 UTC

[section ""data" . $krep21_r7QPA_closure" {
     $krep21_r7QPA_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep20_r7QPz_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.155295128 UTC

[section ""data" . $krep22_r7QPB_closure" {
     $krep22_r7QPB_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep13_r7QPs_closure+1;
         const $krep21_r7QPA_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.157079538 UTC

[section ""data" . $krep23_r7QPC_closure" {
     $krep23_r7QPC_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep16_r7QPv_closure+1;
         const $krep22_r7QPB_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.158895226 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tcCodingProgress2_bytes" {
     GHC.IO.Encoding.Types.$tcCodingProgress2_bytes:
         I8[] [67,111,100,105,110,103,80,114,111,103,114,101,115,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.160709587 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcCodingProgress1_closure" {
     GHC.IO.Encoding.Types.$tcCodingProgress1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tcCodingProgress2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.162922395 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcCodingProgress_closure" {
     GHC.IO.Encoding.Types.$tcCodingProgress_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tcCodingProgress1_closure+1;
         const GHC.Types.krep$*_closure;
         const 4536835953909491444;
         const 10020924989385933984;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.16476597 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'InputUnderflow1_closure" {
     GHC.IO.Encoding.Types.$tc'InputUnderflow1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Encoding.Types.$tcCodingProgress_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.166573031 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tc'InputUnderflow3_bytes" {
     GHC.IO.Encoding.Types.$tc'InputUnderflow3_bytes:
         I8[] [39,73,110,112,117,116,85,110,100,101,114,102,108,111,119]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.168355757 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'InputUnderflow2_closure" {
     GHC.IO.Encoding.Types.$tc'InputUnderflow2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tc'InputUnderflow3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.170518121 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'InputUnderflow_closure" {
     GHC.IO.Encoding.Types.$tc'InputUnderflow_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tc'InputUnderflow2_closure+1;
         const GHC.IO.Encoding.Types.$tc'InputUnderflow1_closure+1;
         const 7310901713659969130;
         const 7213149953264042554;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.172476141 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tc'OutputUnderflow2_bytes" {
     GHC.IO.Encoding.Types.$tc'OutputUnderflow2_bytes:
         I8[] [39,79,117,116,112,117,116,85,110,100,101,114,102,108,111,119]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.174330942 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'OutputUnderflow1_closure" {
     GHC.IO.Encoding.Types.$tc'OutputUnderflow1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tc'OutputUnderflow2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.176146424 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'OutputUnderflow_closure" {
     GHC.IO.Encoding.Types.$tc'OutputUnderflow_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tc'OutputUnderflow1_closure+1;
         const GHC.IO.Encoding.Types.$tc'InputUnderflow1_closure+1;
         const 9796056422104521286;
         const 11682915108109873596;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.178692348 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tc'InvalidSequence2_bytes" {
     GHC.IO.Encoding.Types.$tc'InvalidSequence2_bytes:
         I8[] [39,73,110,118,97,108,105,100,83,101,113,117,101,110,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.180400254 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'InvalidSequence1_closure" {
     GHC.IO.Encoding.Types.$tc'InvalidSequence1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tc'InvalidSequence2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.182188538 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'InvalidSequence_closure" {
     GHC.IO.Encoding.Types.$tc'InvalidSequence_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tc'InvalidSequence1_closure+1;
         const GHC.IO.Encoding.Types.$tc'InputUnderflow1_closure+1;
         const 11342030351124486013;
         const 4985313935970877948;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.184040212 UTC

[section ""data" . $krep24_r7QPD_closure" {
     $krep24_r7QPD_closure:
         const :_con_info;
         const GHC.IO.Encoding.Types.$tc'InputUnderflow1_closure+1;
         const $krep18_r7QPx_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.186166447 UTC

[section ""data" . $krep25_r7QPE_closure" {
     $krep25_r7QPE_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,,)_closure;
         const $krep24_r7QPD_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.187947259 UTC

[section ""data" . $krep26_r7QPF_closure" {
     $krep26_r7QPF_closure:
         const :_con_info;
         const $krep25_r7QPE_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.190384533 UTC

[section ""data" . $krep27_r7QPG_closure" {
     $krep27_r7QPG_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep26_r7QPF_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.19221193 UTC

[section ""data" . $krep28_r7QPH_closure" {
     $krep28_r7QPH_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep13_r7QPs_closure+1;
         const $krep27_r7QPG_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.194337884 UTC

[section ""data" . $krep29_r7QPI_closure" {
     $krep29_r7QPI_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep16_r7QPv_closure+1;
         const $krep28_r7QPH_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.196041032 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tcBufferCodec3_bytes" {
     GHC.IO.Encoding.Types.$tcBufferCodec3_bytes:
         I8[] [66,117,102,102,101,114,67,111,100,101,99]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.197810951 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcBufferCodec2_closure" {
     GHC.IO.Encoding.Types.$tcBufferCodec2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tcBufferCodec3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.199604605 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcBufferCodec_closure" {
     GHC.IO.Encoding.Types.$tcBufferCodec_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tcBufferCodec2_closure+1;
         const GHC.IO.Encoding.Types.$tcBufferCodec1_closure+4;
         const 8585015667497772909;
         const 7745120500523128511;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.202263802 UTC

[section ""data" . $krep30_r7QPJ_closure" {
     $krep30_r7QPJ_closure:
         const :_con_info;
         const $krep11_r7QPq_closure+2;
         const $krep9_r7QPo_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.203965625 UTC

[section ""data" . $krep31_r7QPK_closure" {
     $krep31_r7QPK_closure:
         const :_con_info;
         const $krep14_r7QPt_closure+2;
         const $krep30_r7QPJ_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.205720065 UTC

[section ""data" . $krep32_r7QPL_closure" {
     $krep32_r7QPL_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Encoding.Types.$tcBufferCodec_closure+1;
         const $krep31_r7QPK_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.207555728 UTC

[section ""data" . $krep33_r7QPM_closure" {
     $krep33_r7QPM_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r7QPn_closure+4;
         const $krep32_r7QPL_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.209730657 UTC

[section ""data" . $krep34_r7QPN_closure" {
     $krep34_r7QPN_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r7QPp_closure+1;
         const $krep33_r7QPM_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.21154915 UTC

[section ""data" . $krep35_r7QPO_closure" {
     $krep35_r7QPO_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r7QPj_closure+1;
         const $krep34_r7QPN_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.213393403 UTC

[section ""data" . $krep36_r7QPP_closure" {
     $krep36_r7QPP_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep23_r7QPC_closure+4;
         const $krep35_r7QPO_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.215682031 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'BufferCodec1_closure" {
     GHC.IO.Encoding.Types.$tc'BufferCodec1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r7QPI_closure+4;
         const $krep36_r7QPP_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.217537312 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tc'BufferCodec3_bytes" {
     GHC.IO.Encoding.Types.$tc'BufferCodec3_bytes:
         I8[] [39,66,117,102,102,101,114,67,111,100,101,99]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.219240628 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'BufferCodec2_closure" {
     GHC.IO.Encoding.Types.$tc'BufferCodec2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tc'BufferCodec3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.221067904 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'BufferCodec_closure" {
     GHC.IO.Encoding.Types.$tc'BufferCodec_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tc'BufferCodec2_closure+1;
         const GHC.IO.Encoding.Types.$tc'BufferCodec1_closure+4;
         const 7854563382940536875;
         const 13968497653111525953;
         const 3;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.223956471 UTC

[section ""data" . $krep37_r7QPQ_closure" {
     $krep37_r7QPQ_closure:
         const :_con_info;
         const $krep2_r7QPh_closure+1;
         const $krep15_r7QPu_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.225965236 UTC

[section ""data" . $krep38_r7QPR_closure" {
     $krep38_r7QPR_closure:
         const :_con_info;
         const $krep1_r7QPg_closure+1;
         const $krep37_r7QPQ_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.227847725 UTC

[section ""data" . $krep39_r7QPS_closure" {
     $krep39_r7QPS_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Encoding.Types.$tcBufferCodec_closure+1;
         const $krep38_r7QPR_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.229785196 UTC

[section ""data" . $krep40_r7QPT_closure" {
     $krep40_r7QPT_closure:
         const :_con_info;
         const $krep39_r7QPS_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.232330679 UTC

[section ""data" . $krep41_r7QPU_closure" {
     $krep41_r7QPU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep40_r7QPT_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.234268661 UTC

[section ""data" . $krep42_r7QPV_closure" {
     $krep42_r7QPV_closure:
         const :_con_info;
         const $krep1_r7QPg_closure+1;
         const $krep12_r7QPr_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.236117598 UTC

[section ""data" . $krep43_r7QPW_closure" {
     $krep43_r7QPW_closure:
         const :_con_info;
         const $krep2_r7QPh_closure+1;
         const $krep42_r7QPV_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.237995695 UTC

[section ""data" . $krep44_r7QPX_closure" {
     $krep44_r7QPX_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Encoding.Types.$tcBufferCodec_closure+1;
         const $krep43_r7QPW_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.240190483 UTC

[section ""data" . $krep45_r7QPY_closure" {
     $krep45_r7QPY_closure:
         const :_con_info;
         const $krep44_r7QPX_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.24192224 UTC

[section ""data" . $krep46_r7QPZ_closure" {
     $krep46_r7QPZ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep45_r7QPY_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.243628628 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tcTextEncoding2_bytes" {
     GHC.IO.Encoding.Types.$tcTextEncoding2_bytes:
         I8[] [84,101,120,116,69,110,99,111,100,105,110,103]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.245446971 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcTextEncoding1_closure" {
     GHC.IO.Encoding.Types.$tcTextEncoding1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tcTextEncoding2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.24728013 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcTextEncoding_closure" {
     GHC.IO.Encoding.Types.$tcTextEncoding_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tcTextEncoding1_closure+1;
         const GHC.Types.krep$*_closure;
         const 17289914150150147669;
         const 3676960838620070165;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.24972189 UTC

[section ""data" . $krep47_r7QQ0_closure" {
     $krep47_r7QQ0_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Encoding.Types.$tcTextEncoding_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.251494189 UTC

[section ""data" . $krep48_r7QQ1_closure" {
     $krep48_r7QQ1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep46_r7QPZ_closure+1;
         const $krep47_r7QQ0_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.253967795 UTC

[section ""data" . $krep49_r7QQ2_closure" {
     $krep49_r7QQ2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep41_r7QPU_closure+1;
         const $krep48_r7QQ1_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.255965845 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'TextEncoding1_closure" {
     GHC.IO.Encoding.Types.$tc'TextEncoding1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r7QPl_closure+1;
         const $krep49_r7QQ2_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.258375869 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tc'TextEncoding3_bytes" {
     GHC.IO.Encoding.Types.$tc'TextEncoding3_bytes:
         I8[] [39,84,101,120,116,69,110,99,111,100,105,110,103]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.260109325 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'TextEncoding2_closure" {
     GHC.IO.Encoding.Types.$tc'TextEncoding2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tc'TextEncoding3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.262028548 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'TextEncoding_closure" {
     GHC.IO.Encoding.Types.$tc'TextEncoding_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tc'TextEncoding2_closure+1;
         const GHC.IO.Encoding.Types.$tc'TextEncoding1_closure+4;
         const 6558277295920728213;
         const 3754397505420773780;
         const 2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.264460974 UTC

[section ""data" . GHC.IO.Encoding.Types.InputUnderflow_closure" {
     GHC.IO.Encoding.Types.InputUnderflow_closure:
         const GHC.IO.Encoding.Types.InputUnderflow_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.266647583 UTC

[section ""data" . GHC.IO.Encoding.Types.OutputUnderflow_closure" {
     GHC.IO.Encoding.Types.OutputUnderflow_closure:
         const GHC.IO.Encoding.Types.OutputUnderflow_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.268491492 UTC

[section ""data" . GHC.IO.Encoding.Types.InvalidSequence_closure" {
     GHC.IO.Encoding.Types.InvalidSequence_closure:
         const GHC.IO.Encoding.Types.InvalidSequence_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.27087308 UTC

[section ""data" . GHC.IO.Encoding.Types.TextEncoding_closure" {
     GHC.IO.Encoding.Types.TextEncoding_closure:
         const GHC.IO.Encoding.Types.TextEncoding_info;
 },
 GHC.IO.Encoding.Types.TextEncoding_entry() //  [R2, R3, R4]
         { info_tbl: [(c7Rf0,
                       label: GHC.IO.Encoding.Types.TextEncoding_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Rf0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7Rf4; else goto c7Rf3;
       c7Rf4: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.TextEncoding_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Rf3: // global
           I64[Hp - 24] = GHC.IO.Encoding.Types.TextEncoding_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.275835416 UTC

[section ""data" . GHC.IO.Encoding.Types.BufferCodec_closure" {
     GHC.IO.Encoding.Types.BufferCodec_closure:
         const GHC.IO.Encoding.Types.BufferCodec_info;
 },
 GHC.IO.Encoding.Types.BufferCodec_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c7Rff,
                       label: GHC.IO.Encoding.Types.BufferCodec_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 25} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Rff: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7Rfj; else goto c7Rfi;
       c7Rfj: // global
           HpAlloc = 48;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.BufferCodec_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Rfi: // global
           I64[Hp - 40] = GHC.IO.Encoding.Types.BufferCodec_con_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           P64[Hp] = R6;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.280965328 UTC

[section ""relreadonly" . GHC.IO.Encoding.Types.CodingProgress_closure_tbl" {
     GHC.IO.Encoding.Types.CodingProgress_closure_tbl:
         const GHC.IO.Encoding.Types.InputUnderflow_closure+1;
         const GHC.IO.Encoding.Types.OutputUnderflow_closure+2;
         const GHC.IO.Encoding.Types.InvalidSequence_closure+3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.283513173 UTC

[GHC.IO.Encoding.Types.InputUnderflow_con_entry() //  [R1]
         { info_tbl: [(c7Rfq,
                       label: GHC.IO.Encoding.Types.InputUnderflow_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,69,110,99,111,100,105,110,103,46,84,121,112,101,115,46,73,110,112,117,116,85,110,100,101,114,102,108,111,119]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Rfq: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.287013306 UTC

[GHC.IO.Encoding.Types.OutputUnderflow_con_entry() //  [R1]
         { info_tbl: [(c7Rfw,
                       label: GHC.IO.Encoding.Types.OutputUnderflow_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,69,110,99,111,100,105,110,103,46,84,121,112,101,115,46,79,117,116,112,117,116,85,110,100,101,114,102,108,111,119]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Rfw: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.291380689 UTC

[GHC.IO.Encoding.Types.InvalidSequence_con_entry() //  [R1]
         { info_tbl: [(c7RfC,
                       label: GHC.IO.Encoding.Types.InvalidSequence_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,69,110,99,111,100,105,110,103,46,84,121,112,101,115,46,73,110,118,97,108,105,100,83,101,113,117,101,110,99,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RfC: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.294688564 UTC

[GHC.IO.Encoding.Types.TextEncoding_con_entry() //  [R1]
         { info_tbl: [(c7RfI,
                       label: GHC.IO.Encoding.Types.TextEncoding_con_info
                       rep:HeapRep 3 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,69,110,99,111,100,105,110,103,46,84,121,112,101,115,46,84,101,120,116,69,110,99,111,100,105,110,103]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RfI: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.298296028 UTC

[GHC.IO.Encoding.Types.BufferCodec_con_entry() //  [R1]
         { info_tbl: [(c7RfO,
                       label: GHC.IO.Encoding.Types.BufferCodec_con_info
                       rep:HeapRep 5 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,69,110,99,111,100,105,110,103,46,84,121,112,101,115,46,66,117,102,102,101,114,67,111,100,101,99]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RfO: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.301995105 UTC

[section ""relreadonly" . S7QSa_srt" {
     S7QSa_srt:
         const GHC.IO.Encoding.Types.$w$cshowsPrec_closure;
         const GHC.IO.Encoding.Types.$fShowCodingProgress1_closure;
         const GHC.IO.Encoding.Types.$fShowCodingProgress3_closure;
         const GHC.IO.Encoding.Types.$fShowCodingProgress5_closure;
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.813961341 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:02:58.815120633 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$fShowCodingProgress6_bytes" {
     GHC.IO.Encoding.Types.$fShowCodingProgress6_bytes:
         I8[] [73,110,112,117,116,85,110,100,101,114,102,108,111,119]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.817513265 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress5_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress5_closure:
         const GHC.IO.Encoding.Types.$fShowCodingProgress5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.Types.$fShowCodingProgress5_entry() //  [R1]
         { info_tbl: [(c7Rhh,
                       label: GHC.IO.Encoding.Types.$fShowCodingProgress5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Rhh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Rhi; else goto c7Rhj;
       c7Rhi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Rhj: // global
           (_c7Rhe::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7Rhe::I64 == 0) goto c7Rhg; else goto c7Rhf;
       c7Rhg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7Rhf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7Rhe::I64;
           R2 = GHC.IO.Encoding.Types.$fShowCodingProgress6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.822349003 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$fShowCodingProgress4_bytes" {
     GHC.IO.Encoding.Types.$fShowCodingProgress4_bytes:
         I8[] [79,117,116,112,117,116,85,110,100,101,114,102,108,111,119]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.82455533 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress3_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress3_closure:
         const GHC.IO.Encoding.Types.$fShowCodingProgress3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.Types.$fShowCodingProgress3_entry() //  [R1]
         { info_tbl: [(c7Rhz,
                       label: GHC.IO.Encoding.Types.$fShowCodingProgress3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Rhz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7RhA; else goto c7RhB;
       c7RhA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7RhB: // global
           (_c7Rhw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7Rhw::I64 == 0) goto c7Rhy; else goto c7Rhx;
       c7Rhy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7Rhx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7Rhw::I64;
           R2 = GHC.IO.Encoding.Types.$fShowCodingProgress4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.829456065 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$fShowCodingProgress2_bytes" {
     GHC.IO.Encoding.Types.$fShowCodingProgress2_bytes:
         I8[] [73,110,118,97,108,105,100,83,101,113,117,101,110,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.832881016 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress1_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress1_closure:
         const GHC.IO.Encoding.Types.$fShowCodingProgress1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.Types.$fShowCodingProgress1_entry() //  [R1]
         { info_tbl: [(c7RhR,
                       label: GHC.IO.Encoding.Types.$fShowCodingProgress1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RhR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7RhS; else goto c7RhT;
       c7RhS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7RhT: // global
           (_c7RhO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7RhO::I64 == 0) goto c7RhQ; else goto c7RhP;
       c7RhQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7RhP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7RhO::I64;
           R2 = GHC.IO.Encoding.Types.$fShowCodingProgress2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.837744846 UTC

[section ""data" . GHC.IO.Encoding.Types.$w$cshowsPrec_closure" {
     GHC.IO.Encoding.Types.$w$cshowsPrec_closure:
         const GHC.IO.Encoding.Types.$w$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Encoding.Types.$w$cshowsPrec_entry() //  [R2, R3]
         { info_tbl: [(c7Rie,
                       label: GHC.IO.Encoding.Types.$w$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Rie: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Rif; else goto c7Rig;
       c7Rif: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Rig: // global
           I64[Sp - 16] = block_c7Ri6_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Rir; else goto c7Ri7;
       u7Rir: // global
           call _c7Ri6(R1) args: 0, res: 0, upd: 0;
       c7Ri7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Ri6() //  [R1]
         { info_tbl: [(c7Ri6,
                       label: block_c7Ri6_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ri6: // global
           _s7RfW::P64 = P64[Sp + 8];
           _c7Rid::P64 = R1 & 7;
           if (_c7Rid::P64 < 3) goto u7Riq; else goto c7Ric;
       u7Riq: // global
           if (_c7Rid::P64 < 2) goto c7Ria; else goto c7Rib;
       c7Ria: // global
           R3 = _s7RfW::P64;
           R2 = GHC.IO.Encoding.Types.$fShowCodingProgress5_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7Rib: // global
           R3 = _s7RfW::P64;
           R2 = GHC.IO.Encoding.Types.$fShowCodingProgress3_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7Ric: // global
           R3 = _s7RfW::P64;
           R2 = GHC.IO.Encoding.Types.$fShowCodingProgress1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.844560373 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_closure:
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_entry() //  [R3,
                                                                     R4]
         { info_tbl: [(c7RiI,
                       label: GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RiI: // global
           _s7RfZ::P64 = R3;
           R3 = R4;
           R2 = _s7RfZ::P64;
           call GHC.IO.Encoding.Types.$w$cshowsPrec_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.848667096 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_closure:
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_info;
         const 0;
 },
 GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_entry() //  [R2]
         { info_tbl: [(c7Rj1,
                       label: GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Rj1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Rj2; else goto c7Rj3;
       c7Rj2: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Rj3: // global
           I64[Sp - 8] = block_c7RiT_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Rje; else goto c7RiU;
       u7Rje: // global
           call _c7RiT(R1) args: 0, res: 0, upd: 0;
       c7RiU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RiT() //  [R1]
         { info_tbl: [(c7RiT,
                       label: block_c7RiT_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RiT: // global
           _c7Rj0::P64 = R1 & 7;
           if (_c7Rj0::P64 < 3) goto u7Rjd; else goto c7RiZ;
       u7Rjd: // global
           if (_c7Rj0::P64 < 2) goto c7RiX; else goto c7RiY;
       c7RiX: // global
           R1 = GHC.IO.Encoding.Types.$fShowCodingProgress5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7RiY: // global
           R1 = GHC.IO.Encoding.Types.$fShowCodingProgress3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7RiZ: // global
           R1 = GHC.IO.Encoding.Types.$fShowCodingProgress1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.855246895 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_closure:
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_info;
         const 0;
 },
 GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_entry() //  [R2,
                                                                    R3]
         { info_tbl: [(c7Rjx,
                       label: GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Rjx: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Encoding.Types.$w$cshowsPrec_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.859002465 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowCodingProgress_closure" {
     GHC.IO.Encoding.Types.$fShowCodingProgress_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowsPrec_closure+3;
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_closure+1;
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.861934094 UTC

[section ""data" . GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_closure" {
     GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_closure:
         const GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_info;
 },
 GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_entry() //  [R2, R3]
         { info_tbl: [(c7RjR,
                       label: GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RjR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7RjS; else goto c7RjT;
       c7RjS: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7RjT: // global
           I64[Sp - 16] = block_c7RjJ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7RkQ; else goto c7RjK;
       u7RkQ: // global
           call _c7RjJ(R1) args: 0, res: 0, upd: 0;
       c7RjK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RjJ() //  [R1]
         { info_tbl: [(c7RjJ,
                       label: block_c7RjJ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RjJ: // global
           _s7Rg6::P64 = P64[Sp + 8];
           _c7RjQ::P64 = R1 & 7;
           if (_c7RjQ::P64 < 3) goto u7RkG; else goto c7RjP;
       u7RkG: // global
           if (_c7RjQ::P64 < 2) goto c7RjN; else goto c7RjO;
       c7RjN: // global
           I64[Sp + 8] = block_c7RjW_info;
           R1 = _s7Rg6::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7RkN; else goto c7RjY;
       u7RkN: // global
           call _c7RjW(R1) args: 0, res: 0, upd: 0;
       c7RjY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7RjO: // global
           I64[Sp + 8] = block_c7Rkb_info;
           R1 = _s7Rg6::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7RkO; else goto c7Rkd;
       u7RkO: // global
           call _c7Rkb(R1) args: 0, res: 0, upd: 0;
       c7Rkd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7RjP: // global
           I64[Sp + 8] = block_c7Rkq_info;
           R1 = _s7Rg6::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7RkP; else goto c7Rks;
       u7RkP: // global
           call _c7Rkq(R1) args: 0, res: 0, upd: 0;
       c7Rks: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RjW() //  [R1]
         { info_tbl: [(c7RjW,
                       label: block_c7RjW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RjW: // global
           if (R1 & 7 == 1) goto u7RkH; else goto u7RkI;
       u7RkH: // global
           Sp = Sp + 8;
           call _c7RkC() args: 0, res: 0, upd: 0;
       u7RkI: // global
           Sp = Sp + 8;
           call _c7Rky() args: 0, res: 0, upd: 0;
     }
 },
 _c7Rkb() //  [R1]
         { info_tbl: [(c7Rkb,
                       label: block_c7Rkb_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Rkb: // global
           if (R1 & 7 == 2) goto u7RkJ; else goto u7RkK;
       u7RkJ: // global
           Sp = Sp + 8;
           call _c7RkC() args: 0, res: 0, upd: 0;
       u7RkK: // global
           Sp = Sp + 8;
           call _c7Rky() args: 0, res: 0, upd: 0;
     }
 },
 _c7Rkq() //  [R1]
         { info_tbl: [(c7Rkq,
                       label: block_c7Rkq_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Rkq: // global
           if (R1 & 7 == 3) goto u7RkL; else goto u7RkM;
       u7RkL: // global
           Sp = Sp + 8;
           call _c7RkC() args: 0, res: 0, upd: 0;
       u7RkM: // global
           Sp = Sp + 8;
           call _c7Rky() args: 0, res: 0, upd: 0;
     }
 },
 _c7RkC() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RkC: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7Rky() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Rky: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.878491612 UTC

[section ""data" . GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_closure" {
     GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_closure:
         const GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_info;
 },
 GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c7RlN,
                       label: GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RlN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7RlO; else goto c7RlP;
       c7RlO: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7RlP: // global
           I64[Sp - 16] = block_c7RlF_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7RmM; else goto c7RlG;
       u7RmM: // global
           call _c7RlF(R1) args: 0, res: 0, upd: 0;
       c7RlG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RlF() //  [R1]
         { info_tbl: [(c7RlF,
                       label: block_c7RlF_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RlF: // global
           _s7Rgc::P64 = P64[Sp + 8];
           _c7RlM::P64 = R1 & 7;
           if (_c7RlM::P64 < 3) goto u7RmC; else goto c7RlL;
       u7RmC: // global
           if (_c7RlM::P64 < 2) goto c7RlJ; else goto c7RlK;
       c7RlJ: // global
           I64[Sp + 8] = block_c7RlS_info;
           R1 = _s7Rgc::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7RmJ; else goto c7RlU;
       u7RmJ: // global
           call _c7RlS(R1) args: 0, res: 0, upd: 0;
       c7RlU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7RlK: // global
           I64[Sp + 8] = block_c7Rm7_info;
           R1 = _s7Rgc::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7RmK; else goto c7Rm9;
       u7RmK: // global
           call _c7Rm7(R1) args: 0, res: 0, upd: 0;
       c7Rm9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7RlL: // global
           I64[Sp + 8] = block_c7Rmm_info;
           R1 = _s7Rgc::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7RmL; else goto c7Rmo;
       u7RmL: // global
           call _c7Rmm(R1) args: 0, res: 0, upd: 0;
       c7Rmo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RlS() //  [R1]
         { info_tbl: [(c7RlS,
                       label: block_c7RlS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RlS: // global
           if (R1 & 7 == 1) goto u7RmD; else goto u7RmE;
       u7RmD: // global
           Sp = Sp + 8;
           call _c7Rmy() args: 0, res: 0, upd: 0;
       u7RmE: // global
           Sp = Sp + 8;
           call _c7Rmu() args: 0, res: 0, upd: 0;
     }
 },
 _c7Rm7() //  [R1]
         { info_tbl: [(c7Rm7,
                       label: block_c7Rm7_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Rm7: // global
           if (R1 & 7 == 2) goto u7RmF; else goto u7RmG;
       u7RmF: // global
           Sp = Sp + 8;
           call _c7Rmy() args: 0, res: 0, upd: 0;
       u7RmG: // global
           Sp = Sp + 8;
           call _c7Rmu() args: 0, res: 0, upd: 0;
     }
 },
 _c7Rmm() //  [R1]
         { info_tbl: [(c7Rmm,
                       label: block_c7Rmm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Rmm: // global
           if (R1 & 7 == 3) goto u7RmH; else goto u7RmI;
       u7RmH: // global
           Sp = Sp + 8;
           call _c7Rmy() args: 0, res: 0, upd: 0;
       u7RmI: // global
           Sp = Sp + 8;
           call _c7Rmu() args: 0, res: 0, upd: 0;
     }
 },
 _c7Rmy() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Rmy: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7Rmu() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Rmu: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.89215936 UTC

[section ""data" . GHC.IO.Encoding.Types.$fEqCodingProgress_closure" {
     GHC.IO.Encoding.Types.$fEqCodingProgress_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Encoding.Types.$fEqCodingProgress_$c==_closure+2;
         const GHC.IO.Encoding.Types.$fEqCodingProgress_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.894769429 UTC

[section ""data" . GHC.IO.Encoding.Types.setState_closure" {
     GHC.IO.Encoding.Types.setState_closure:
         const GHC.IO.Encoding.Types.setState_info;
 },
 GHC.IO.Encoding.Types.setState_entry() //  [R2]
         { info_tbl: [(c7RnF,
                       label: GHC.IO.Encoding.Types.setState_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RnF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7RnG; else goto c7RnH;
       c7RnG: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.setState_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7RnH: // global
           I64[Sp - 8] = block_c7RnC_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7RnL; else goto c7RnD;
       u7RnL: // global
           call _c7RnC(R1) args: 0, res: 0, upd: 0;
       c7RnD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RnC() //  [R1]
         { info_tbl: [(c7RnC,
                       label: block_c7RnC_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RnC: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.900833664 UTC

[section ""data" . GHC.IO.Encoding.Types.getState_closure" {
     GHC.IO.Encoding.Types.getState_closure:
         const GHC.IO.Encoding.Types.getState_info;
 },
 GHC.IO.Encoding.Types.getState_entry() //  [R2]
         { info_tbl: [(c7Ro3,
                       label: GHC.IO.Encoding.Types.getState_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ro3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Ro4; else goto c7Ro5;
       c7Ro4: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.getState_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Ro5: // global
           I64[Sp - 8] = block_c7Ro0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Ro9; else goto c7Ro1;
       u7Ro9: // global
           call _c7Ro0(R1) args: 0, res: 0, upd: 0;
       c7Ro1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Ro0() //  [R1]
         { info_tbl: [(c7Ro0,
                       label: block_c7Ro0_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ro0: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.909670004 UTC

[section ""data" . GHC.IO.Encoding.Types.close_closure" {
     GHC.IO.Encoding.Types.close_closure:
         const GHC.IO.Encoding.Types.close_info;
 },
 GHC.IO.Encoding.Types.close_entry() //  [R2]
         { info_tbl: [(c7Ror,
                       label: GHC.IO.Encoding.Types.close_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ror: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Ros; else goto c7Rot;
       c7Ros: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.close_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Rot: // global
           I64[Sp - 8] = block_c7Roo_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Rox; else goto c7Rop;
       u7Rox: // global
           call _c7Roo(R1) args: 0, res: 0, upd: 0;
       c7Rop: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Roo() //  [R1]
         { info_tbl: [(c7Roo,
                       label: block_c7Roo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Roo: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.918847414 UTC

[section ""data" . GHC.IO.Encoding.Types.recover_closure" {
     GHC.IO.Encoding.Types.recover_closure:
         const GHC.IO.Encoding.Types.recover_info;
 },
 GHC.IO.Encoding.Types.recover_entry() //  [R2]
         { info_tbl: [(c7RoP,
                       label: GHC.IO.Encoding.Types.recover_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RoP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7RoQ; else goto c7RoR;
       c7RoQ: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.recover_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7RoR: // global
           I64[Sp - 8] = block_c7RoM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7RoV; else goto c7RoN;
       u7RoV: // global
           call _c7RoM(R1) args: 0, res: 0, upd: 0;
       c7RoN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RoM() //  [R1]
         { info_tbl: [(c7RoM,
                       label: block_c7RoM_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RoM: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.926967901 UTC

[section ""data" . GHC.IO.Encoding.Types.encode_closure" {
     GHC.IO.Encoding.Types.encode_closure:
         const GHC.IO.Encoding.Types.encode_info;
 },
 GHC.IO.Encoding.Types.encode_entry() //  [R2]
         { info_tbl: [(c7Rpd,
                       label: GHC.IO.Encoding.Types.encode_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Rpd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Rpe; else goto c7Rpf;
       c7Rpe: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.encode_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Rpf: // global
           I64[Sp - 8] = block_c7Rpa_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Rpj; else goto c7Rpb;
       u7Rpj: // global
           call _c7Rpa(R1) args: 0, res: 0, upd: 0;
       c7Rpb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Rpa() //  [R1]
         { info_tbl: [(c7Rpa,
                       label: block_c7Rpa_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Rpa: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.934282347 UTC

[section ""data" . GHC.IO.Encoding.Types.mkTextEncoder_closure" {
     GHC.IO.Encoding.Types.mkTextEncoder_closure:
         const ()_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.936800681 UTC

[section ""data" . GHC.IO.Encoding.Types.mkTextDecoder_closure" {
     GHC.IO.Encoding.Types.mkTextDecoder_closure:
         const ()_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.939135002 UTC

[section ""data" . GHC.IO.Encoding.Types.textEncodingName_closure" {
     GHC.IO.Encoding.Types.textEncodingName_closure:
         const GHC.IO.Encoding.Types.textEncodingName_info;
 },
 GHC.IO.Encoding.Types.textEncodingName_entry() //  [R2]
         { info_tbl: [(c7RpD,
                       label: GHC.IO.Encoding.Types.textEncodingName_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RpD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7RpE; else goto c7RpF;
       c7RpE: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.textEncodingName_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7RpF: // global
           I64[Sp - 8] = block_c7RpA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7RpJ; else goto c7RpB;
       u7RpJ: // global
           call _c7RpA(R1) args: 0, res: 0, upd: 0;
       c7RpB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RpA() //  [R1]
         { info_tbl: [(c7RpA,
                       label: block_c7RpA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RpA: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.944584189 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_closure" {
     GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_closure:
         const GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_info;
 },
 GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_entry() //  [R2,
                                                                   R3, R4]
         { info_tbl: [(c7Rq3,
                       label: GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Rq3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Rq4; else goto c7Rq5;
       c7Rq4: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Rq5: // global
           I64[Sp - 16] = block_c7Rq0_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Rq9; else goto c7Rq1;
       u7Rq9: // global
           call _c7Rq0(R1) args: 0, res: 0, upd: 0;
       c7Rq1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Rq0() //  [R1]
         { info_tbl: [(c7Rq0,
                       label: block_c7Rq0_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Rq0: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.951089016 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowTextEncoding1_closure" {
     GHC.IO.Encoding.Types.$fShowTextEncoding1_closure:
         const GHC.IO.Encoding.Types.$fShowTextEncoding1_info;
 },
 GHC.IO.Encoding.Types.$fShowTextEncoding1_entry() //  [R2, R3]
         { info_tbl: [(c7Rqr,
                       label: GHC.IO.Encoding.Types.$fShowTextEncoding1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Rqr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Rqs; else goto c7Rqt;
       c7Rqs: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.$fShowTextEncoding1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Rqt: // global
           I64[Sp - 16] = block_c7Rqo_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Rqx; else goto c7Rqp;
       u7Rqx: // global
           call _c7Rqo(R1) args: 0, res: 0, upd: 0;
       c7Rqp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Rqo() //  [R1]
         { info_tbl: [(c7Rqo,
                       label: block_c7Rqo_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Rqo: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.957557616 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_closure" {
     GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_closure:
         const GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_info;
 },
 GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_entry() //  [R2,
                                                                  R3]
         { info_tbl: [(c7RqM,
                       label: GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RqM: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Encoding.Types.$fShowTextEncoding1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.961200821 UTC

[section ""data" . GHC.IO.Encoding.Types.$fShowTextEncoding_closure" {
     GHC.IO.Encoding.Types.$fShowTextEncoding_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowsPrec_closure+3;
         const GHC.IO.Encoding.Types.textEncodingName_closure+1;
         const GHC.IO.Encoding.Types.$fShowTextEncoding_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.96311886 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$trModule4_bytes" {
     GHC.IO.Encoding.Types.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.964888349 UTC

[section ""data" . GHC.IO.Encoding.Types.$trModule3_closure" {
     GHC.IO.Encoding.Types.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.966710563 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$trModule2_bytes" {
     GHC.IO.Encoding.Types.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,46,69,110,99,111,100,105,110,103,46,84,121,112,101,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.968503331 UTC

[section ""data" . GHC.IO.Encoding.Types.$trModule1_closure" {
     GHC.IO.Encoding.Types.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.97026933 UTC

[section ""data" . GHC.IO.Encoding.Types.$trModule_closure" {
     GHC.IO.Encoding.Types.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.Encoding.Types.$trModule3_closure+1;
         const GHC.IO.Encoding.Types.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.972046646 UTC

[section ""data" . $krep_r7QPf_closure" {
     $krep_r7QPf_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc()_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.973879146 UTC

[section ""data" . $krep1_r7QPg_closure" {
     $krep1_r7QPg_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord8_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.975632876 UTC

[section ""data" . $krep2_r7QPh_closure" {
     $krep2_r7QPh_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.97787886 UTC

[section ""data" . $krep3_r7QPi_closure" {
     $krep3_r7QPi_closure:
         const :_con_info;
         const $krep_r7QPf_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.979628771 UTC

[section ""data" . $krep4_r7QPj_closure" {
     $krep4_r7QPj_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep3_r7QPi_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.981462521 UTC

[section ""data" . $krep5_r7QPk_closure" {
     $krep5_r7QPk_closure:
         const :_con_info;
         const $krep2_r7QPh_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.98333529 UTC

[section ""data" . $krep6_r7QPl_closure" {
     $krep6_r7QPl_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep5_r7QPk_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.985841287 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcBufferCodec1_closure" {
     GHC.IO.Encoding.Types.$tcBufferCodec1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const GHC.Types.krep$*->*->*_closure;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.987680822 UTC

[section ""data" . $krep7_r7QPm_closure" {
     $krep7_r7QPm_closure:
         const GHC.Types.KindRepVar_con_info;
         const 2;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.98950805 UTC

[section ""data" . $krep8_r7QPn_closure" {
     $krep8_r7QPn_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r7QPm_closure+2;
         const $krep4_r7QPj_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.991374683 UTC

[section ""data" . $krep9_r7QPo_closure" {
     $krep9_r7QPo_closure:
         const :_con_info;
         const $krep7_r7QPm_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.993264684 UTC

[section ""data" . $krep10_r7QPp_closure" {
     $krep10_r7QPp_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep9_r7QPo_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.995118413 UTC

[section ""data" . $krep11_r7QPq_closure" {
     $krep11_r7QPq_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.99690926 UTC

[section ""data" . $krep12_r7QPr_closure" {
     $krep12_r7QPr_closure:
         const :_con_info;
         const $krep11_r7QPq_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:58.998694565 UTC

[section ""data" . $krep13_r7QPs_closure" {
     $krep13_r7QPs_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Buffer.$tcBuffer_closure;
         const $krep12_r7QPr_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.000477834 UTC

[section ""data" . $krep14_r7QPt_closure" {
     $krep14_r7QPt_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.002711192 UTC

[section ""data" . $krep15_r7QPu_closure" {
     $krep15_r7QPu_closure:
         const :_con_info;
         const $krep14_r7QPt_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.004522437 UTC

[section ""data" . $krep16_r7QPv_closure" {
     $krep16_r7QPv_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Buffer.$tcBuffer_closure;
         const $krep15_r7QPu_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.006303626 UTC

[section ""data" . $krep17_r7QPw_closure" {
     $krep17_r7QPw_closure:
         const :_con_info;
         const $krep13_r7QPs_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.008113509 UTC

[section ""data" . $krep18_r7QPx_closure" {
     $krep18_r7QPx_closure:
         const :_con_info;
         const $krep16_r7QPv_closure+1;
         const $krep17_r7QPw_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.009953126 UTC

[section ""data" . $krep19_r7QPy_closure" {
     $krep19_r7QPy_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep18_r7QPx_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.012532446 UTC

[section ""data" . $krep20_r7QPz_closure" {
     $krep20_r7QPz_closure:
         const :_con_info;
         const $krep19_r7QPy_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.015057582 UTC

[section ""data" . $krep21_r7QPA_closure" {
     $krep21_r7QPA_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep20_r7QPz_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.016833663 UTC

[section ""data" . $krep22_r7QPB_closure" {
     $krep22_r7QPB_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep13_r7QPs_closure+1;
         const $krep21_r7QPA_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.018763388 UTC

[section ""data" . $krep23_r7QPC_closure" {
     $krep23_r7QPC_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep16_r7QPv_closure+1;
         const $krep22_r7QPB_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.020540822 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tcCodingProgress2_bytes" {
     GHC.IO.Encoding.Types.$tcCodingProgress2_bytes:
         I8[] [67,111,100,105,110,103,80,114,111,103,114,101,115,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.022397764 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcCodingProgress1_closure" {
     GHC.IO.Encoding.Types.$tcCodingProgress1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tcCodingProgress2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.024202234 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcCodingProgress_closure" {
     GHC.IO.Encoding.Types.$tcCodingProgress_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tcCodingProgress1_closure+1;
         const GHC.Types.krep$*_closure;
         const 4536835953909491444;
         const 10020924989385933984;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.026429228 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'InputUnderflow1_closure" {
     GHC.IO.Encoding.Types.$tc'InputUnderflow1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Encoding.Types.$tcCodingProgress_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.028334098 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tc'InputUnderflow3_bytes" {
     GHC.IO.Encoding.Types.$tc'InputUnderflow3_bytes:
         I8[] [39,73,110,112,117,116,85,110,100,101,114,102,108,111,119]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.030193777 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'InputUnderflow2_closure" {
     GHC.IO.Encoding.Types.$tc'InputUnderflow2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tc'InputUnderflow3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.032013002 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'InputUnderflow_closure" {
     GHC.IO.Encoding.Types.$tc'InputUnderflow_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tc'InputUnderflow2_closure+1;
         const GHC.IO.Encoding.Types.$tc'InputUnderflow1_closure+1;
         const 7310901713659969130;
         const 7213149953264042554;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.033911822 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tc'OutputUnderflow2_bytes" {
     GHC.IO.Encoding.Types.$tc'OutputUnderflow2_bytes:
         I8[] [39,79,117,116,112,117,116,85,110,100,101,114,102,108,111,119]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.035670231 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'OutputUnderflow1_closure" {
     GHC.IO.Encoding.Types.$tc'OutputUnderflow1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tc'OutputUnderflow2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.037741325 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'OutputUnderflow_closure" {
     GHC.IO.Encoding.Types.$tc'OutputUnderflow_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tc'OutputUnderflow1_closure+1;
         const GHC.IO.Encoding.Types.$tc'InputUnderflow1_closure+1;
         const 9796056422104521286;
         const 11682915108109873596;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.040422193 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tc'InvalidSequence2_bytes" {
     GHC.IO.Encoding.Types.$tc'InvalidSequence2_bytes:
         I8[] [39,73,110,118,97,108,105,100,83,101,113,117,101,110,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.042252596 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'InvalidSequence1_closure" {
     GHC.IO.Encoding.Types.$tc'InvalidSequence1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tc'InvalidSequence2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.044080644 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'InvalidSequence_closure" {
     GHC.IO.Encoding.Types.$tc'InvalidSequence_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tc'InvalidSequence1_closure+1;
         const GHC.IO.Encoding.Types.$tc'InputUnderflow1_closure+1;
         const 11342030351124486013;
         const 4985313935970877948;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.046020191 UTC

[section ""data" . $krep24_r7QPD_closure" {
     $krep24_r7QPD_closure:
         const :_con_info;
         const GHC.IO.Encoding.Types.$tc'InputUnderflow1_closure+1;
         const $krep18_r7QPx_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.047870399 UTC

[section ""data" . $krep25_r7QPE_closure" {
     $krep25_r7QPE_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,,)_closure;
         const $krep24_r7QPD_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.049723847 UTC

[section ""data" . $krep26_r7QPF_closure" {
     $krep26_r7QPF_closure:
         const :_con_info;
         const $krep25_r7QPE_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.051610912 UTC

[section ""data" . $krep27_r7QPG_closure" {
     $krep27_r7QPG_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep26_r7QPF_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.053420019 UTC

[section ""data" . $krep28_r7QPH_closure" {
     $krep28_r7QPH_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep13_r7QPs_closure+1;
         const $krep27_r7QPG_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.05523739 UTC

[section ""data" . $krep29_r7QPI_closure" {
     $krep29_r7QPI_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep16_r7QPv_closure+1;
         const $krep28_r7QPH_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.057087261 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tcBufferCodec3_bytes" {
     GHC.IO.Encoding.Types.$tcBufferCodec3_bytes:
         I8[] [66,117,102,102,101,114,67,111,100,101,99]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.058951495 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcBufferCodec2_closure" {
     GHC.IO.Encoding.Types.$tcBufferCodec2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tcBufferCodec3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.060813617 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcBufferCodec_closure" {
     GHC.IO.Encoding.Types.$tcBufferCodec_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tcBufferCodec2_closure+1;
         const GHC.IO.Encoding.Types.$tcBufferCodec1_closure+4;
         const 8585015667497772909;
         const 7745120500523128511;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.06342171 UTC

[section ""data" . $krep30_r7QPJ_closure" {
     $krep30_r7QPJ_closure:
         const :_con_info;
         const $krep11_r7QPq_closure+2;
         const $krep9_r7QPo_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.065187699 UTC

[section ""data" . $krep31_r7QPK_closure" {
     $krep31_r7QPK_closure:
         const :_con_info;
         const $krep14_r7QPt_closure+2;
         const $krep30_r7QPJ_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.067827213 UTC

[section ""data" . $krep32_r7QPL_closure" {
     $krep32_r7QPL_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Encoding.Types.$tcBufferCodec_closure+1;
         const $krep31_r7QPK_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.069760197 UTC

[section ""data" . $krep33_r7QPM_closure" {
     $krep33_r7QPM_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r7QPn_closure+4;
         const $krep32_r7QPL_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.071614574 UTC

[section ""data" . $krep34_r7QPN_closure" {
     $krep34_r7QPN_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r7QPp_closure+1;
         const $krep33_r7QPM_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.074145041 UTC

[section ""data" . $krep35_r7QPO_closure" {
     $krep35_r7QPO_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r7QPj_closure+1;
         const $krep34_r7QPN_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.075988588 UTC

[section ""data" . $krep36_r7QPP_closure" {
     $krep36_r7QPP_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep23_r7QPC_closure+4;
         const $krep35_r7QPO_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.077768015 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'BufferCodec1_closure" {
     GHC.IO.Encoding.Types.$tc'BufferCodec1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r7QPI_closure+4;
         const $krep36_r7QPP_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.079634129 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tc'BufferCodec3_bytes" {
     GHC.IO.Encoding.Types.$tc'BufferCodec3_bytes:
         I8[] [39,66,117,102,102,101,114,67,111,100,101,99]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.081501125 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'BufferCodec2_closure" {
     GHC.IO.Encoding.Types.$tc'BufferCodec2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tc'BufferCodec3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.083277082 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'BufferCodec_closure" {
     GHC.IO.Encoding.Types.$tc'BufferCodec_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tc'BufferCodec2_closure+1;
         const GHC.IO.Encoding.Types.$tc'BufferCodec1_closure+4;
         const 7854563382940536875;
         const 13968497653111525953;
         const 3;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.085634797 UTC

[section ""data" . $krep37_r7QPQ_closure" {
     $krep37_r7QPQ_closure:
         const :_con_info;
         const $krep2_r7QPh_closure+1;
         const $krep15_r7QPu_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.087549228 UTC

[section ""data" . $krep38_r7QPR_closure" {
     $krep38_r7QPR_closure:
         const :_con_info;
         const $krep1_r7QPg_closure+1;
         const $krep37_r7QPQ_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.089514354 UTC

[section ""data" . $krep39_r7QPS_closure" {
     $krep39_r7QPS_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Encoding.Types.$tcBufferCodec_closure+1;
         const $krep38_r7QPR_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.091210811 UTC

[section ""data" . $krep40_r7QPT_closure" {
     $krep40_r7QPT_closure:
         const :_con_info;
         const $krep39_r7QPS_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.092879547 UTC

[section ""data" . $krep41_r7QPU_closure" {
     $krep41_r7QPU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep40_r7QPT_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.094619004 UTC

[section ""data" . $krep42_r7QPV_closure" {
     $krep42_r7QPV_closure:
         const :_con_info;
         const $krep1_r7QPg_closure+1;
         const $krep12_r7QPr_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.097134513 UTC

[section ""data" . $krep43_r7QPW_closure" {
     $krep43_r7QPW_closure:
         const :_con_info;
         const $krep2_r7QPh_closure+1;
         const $krep42_r7QPV_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.099138772 UTC

[section ""data" . $krep44_r7QPX_closure" {
     $krep44_r7QPX_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Encoding.Types.$tcBufferCodec_closure+1;
         const $krep43_r7QPW_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.100928853 UTC

[section ""data" . $krep45_r7QPY_closure" {
     $krep45_r7QPY_closure:
         const :_con_info;
         const $krep44_r7QPX_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.102912562 UTC

[section ""data" . $krep46_r7QPZ_closure" {
     $krep46_r7QPZ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep45_r7QPY_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.104740656 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tcTextEncoding2_bytes" {
     GHC.IO.Encoding.Types.$tcTextEncoding2_bytes:
         I8[] [84,101,120,116,69,110,99,111,100,105,110,103]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.106584744 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcTextEncoding1_closure" {
     GHC.IO.Encoding.Types.$tcTextEncoding1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tcTextEncoding2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.108441939 UTC

[section ""data" . GHC.IO.Encoding.Types.$tcTextEncoding_closure" {
     GHC.IO.Encoding.Types.$tcTextEncoding_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tcTextEncoding1_closure+1;
         const GHC.Types.krep$*_closure;
         const 17289914150150147669;
         const 3676960838620070165;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.110505141 UTC

[section ""data" . $krep47_r7QQ0_closure" {
     $krep47_r7QQ0_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Encoding.Types.$tcTextEncoding_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.112356693 UTC

[section ""data" . $krep48_r7QQ1_closure" {
     $krep48_r7QQ1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep46_r7QPZ_closure+1;
         const $krep47_r7QQ0_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.114328346 UTC

[section ""data" . $krep49_r7QQ2_closure" {
     $krep49_r7QQ2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep41_r7QPU_closure+1;
         const $krep48_r7QQ1_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.116186886 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'TextEncoding1_closure" {
     GHC.IO.Encoding.Types.$tc'TextEncoding1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r7QPl_closure+1;
         const $krep49_r7QQ2_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.118057427 UTC

[section ""cstring" . GHC.IO.Encoding.Types.$tc'TextEncoding3_bytes" {
     GHC.IO.Encoding.Types.$tc'TextEncoding3_bytes:
         I8[] [39,84,101,120,116,69,110,99,111,100,105,110,103]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.119780012 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'TextEncoding2_closure" {
     GHC.IO.Encoding.Types.$tc'TextEncoding2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.Types.$tc'TextEncoding3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.1219956 UTC

[section ""data" . GHC.IO.Encoding.Types.$tc'TextEncoding_closure" {
     GHC.IO.Encoding.Types.$tc'TextEncoding_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Encoding.Types.$trModule_closure+1;
         const GHC.IO.Encoding.Types.$tc'TextEncoding2_closure+1;
         const GHC.IO.Encoding.Types.$tc'TextEncoding1_closure+4;
         const 6558277295920728213;
         const 3754397505420773780;
         const 2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.124519944 UTC

[section ""data" . GHC.IO.Encoding.Types.InputUnderflow_closure" {
     GHC.IO.Encoding.Types.InputUnderflow_closure:
         const GHC.IO.Encoding.Types.InputUnderflow_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.126329026 UTC

[section ""data" . GHC.IO.Encoding.Types.OutputUnderflow_closure" {
     GHC.IO.Encoding.Types.OutputUnderflow_closure:
         const GHC.IO.Encoding.Types.OutputUnderflow_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.128053298 UTC

[section ""data" . GHC.IO.Encoding.Types.InvalidSequence_closure" {
     GHC.IO.Encoding.Types.InvalidSequence_closure:
         const GHC.IO.Encoding.Types.InvalidSequence_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.130421787 UTC

[section ""data" . GHC.IO.Encoding.Types.TextEncoding_closure" {
     GHC.IO.Encoding.Types.TextEncoding_closure:
         const GHC.IO.Encoding.Types.TextEncoding_info;
 },
 GHC.IO.Encoding.Types.TextEncoding_entry() //  [R2, R3, R4]
         { info_tbl: [(c7Rsn,
                       label: GHC.IO.Encoding.Types.TextEncoding_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Rsn: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7Rsr; else goto c7Rsq;
       c7Rsr: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.TextEncoding_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Rsq: // global
           I64[Hp - 24] = GHC.IO.Encoding.Types.TextEncoding_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.134828058 UTC

[section ""data" . GHC.IO.Encoding.Types.BufferCodec_closure" {
     GHC.IO.Encoding.Types.BufferCodec_closure:
         const GHC.IO.Encoding.Types.BufferCodec_info;
 },
 GHC.IO.Encoding.Types.BufferCodec_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c7RsD,
                       label: GHC.IO.Encoding.Types.BufferCodec_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 25} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RsD: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7RsH; else goto c7RsG;
       c7RsH: // global
           HpAlloc = 48;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.Types.BufferCodec_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7RsG: // global
           I64[Hp - 40] = GHC.IO.Encoding.Types.BufferCodec_con_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           P64[Hp] = R6;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.138861273 UTC

[section ""relreadonly" . GHC.IO.Encoding.Types.CodingProgress_closure_tbl" {
     GHC.IO.Encoding.Types.CodingProgress_closure_tbl:
         const GHC.IO.Encoding.Types.InputUnderflow_closure+1;
         const GHC.IO.Encoding.Types.OutputUnderflow_closure+2;
         const GHC.IO.Encoding.Types.InvalidSequence_closure+3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.140698509 UTC

[GHC.IO.Encoding.Types.InputUnderflow_con_entry() //  [R1]
         { info_tbl: [(c7RsP,
                       label: GHC.IO.Encoding.Types.InputUnderflow_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,69,110,99,111,100,105,110,103,46,84,121,112,101,115,46,73,110,112,117,116,85,110,100,101,114,102,108,111,119]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RsP: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.144458216 UTC

[GHC.IO.Encoding.Types.OutputUnderflow_con_entry() //  [R1]
         { info_tbl: [(c7RsW,
                       label: GHC.IO.Encoding.Types.OutputUnderflow_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,69,110,99,111,100,105,110,103,46,84,121,112,101,115,46,79,117,116,112,117,116,85,110,100,101,114,102,108,111,119]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RsW: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.147863591 UTC

[GHC.IO.Encoding.Types.InvalidSequence_con_entry() //  [R1]
         { info_tbl: [(c7Rt3,
                       label: GHC.IO.Encoding.Types.InvalidSequence_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,69,110,99,111,100,105,110,103,46,84,121,112,101,115,46,73,110,118,97,108,105,100,83,101,113,117,101,110,99,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Rt3: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.151406005 UTC

[GHC.IO.Encoding.Types.TextEncoding_con_entry() //  [R1]
         { info_tbl: [(c7Rta,
                       label: GHC.IO.Encoding.Types.TextEncoding_con_info
                       rep:HeapRep 3 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,69,110,99,111,100,105,110,103,46,84,121,112,101,115,46,84,101,120,116,69,110,99,111,100,105,110,103]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Rta: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.156116883 UTC

[GHC.IO.Encoding.Types.BufferCodec_con_entry() //  [R1]
         { info_tbl: [(c7Rth,
                       label: GHC.IO.Encoding.Types.BufferCodec_con_info
                       rep:HeapRep 5 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,69,110,99,111,100,105,110,103,46,84,121,112,101,115,46,66,117,102,102,101,114,67,111,100,101,99]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Rth: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.159408282 UTC

[section ""relreadonly" . S7Ris_srt" {
     S7Ris_srt:
         const GHC.IO.Encoding.Types.$w$cshowsPrec_closure;
         const GHC.IO.Encoding.Types.$fShowCodingProgress1_closure;
         const GHC.IO.Encoding.Types.$fShowCodingProgress3_closure;
         const GHC.IO.Encoding.Types.$fShowCodingProgress5_closure;
         const GHC.IO.Encoding.Types.$fShowCodingProgress_$cshow_closure;
 }]

