
==================== Pre unarise: ====================
2018-03-16 16:03:16.442354433 UTC

GHC.IO.Handle.Types.$WHandle__ [InlPrag=INLINE[2]]
  :: forall dev enc_state dec_state.
     (GHC.IO.Device.IODevice dev, GHC.IO.BufferedIO.BufferedIO dev,
      Data.Typeable.Internal.Typeable dev) =>
     dev
     -> GHC.IO.Handle.Types.HandleType
     -> GHC.IORef.IORef (GHC.IO.Buffer.Buffer GHC.Word.Word8)
     -> GHC.IO.Handle.Types.BufferMode
     -> GHC.IORef.IORef (dec_state, GHC.IO.Buffer.Buffer GHC.Word.Word8)
     -> GHC.IORef.IORef (GHC.IO.Buffer.Buffer GHC.IO.Buffer.CharBufElem)
     -> GHC.IORef.IORef
          (GHC.IO.Handle.Types.BufferList GHC.IO.Buffer.CharBufElem)
     -> GHC.Base.Maybe (GHC.IO.Encoding.Types.TextEncoder enc_state)
     -> GHC.Base.Maybe (GHC.IO.Encoding.Types.TextDecoder dec_state)
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
     -> GHC.IO.Handle.Types.Handle__
[GblId[DataConWrapper],
 Arity=16,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><S,U><L,U><S,U><L,U><S,U><S,U><S,U><L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [dt_s8a6j
           dt_s8a6k
           dt_s8a6l
           dt_s8a6m
           dt_s8a6n
           dt_s8a6o
           dt_s8a6p
           dt_s8a6q
           dt_s8a6r
           dt_s8a6s
           dt_s8a6t
           dt_s8a6u
           dt_s8a6v
           dt_s8a6w
           dt_s8a6x
           dt_s8a6y]
        case dt_s8a6m of dt_s8a6z {
          __DEFAULT ->
              case dt_s8a6o of {
                GHC.STRef.STRef dt_s8a6B [Occ=Once] ->
                    case dt_s8a6q of {
                      GHC.STRef.STRef dt_s8a6D [Occ=Once] ->
                          case dt_s8a6r of {
                            GHC.STRef.STRef dt_s8a6F [Occ=Once] ->
                                case dt_s8a6s of {
                                  GHC.STRef.STRef dt_s8a6H [Occ=Once] ->
                                      GHC.IO.Handle.Types.Handle__ [dt_s8a6j
                                                                    dt_s8a6k
                                                                    dt_s8a6l
                                                                    dt_s8a6z
                                                                    dt_s8a6n
                                                                    dt_s8a6B
                                                                    dt_s8a6p
                                                                    dt_s8a6D
                                                                    dt_s8a6F
                                                                    dt_s8a6H
                                                                    dt_s8a6t
                                                                    dt_s8a6u
                                                                    dt_s8a6v
                                                                    dt_s8a6w
                                                                    dt_s8a6x
                                                                    dt_s8a6y];
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$WFileHandle [InlPrag=INLINE[2]]
  :: GHC.IO.FilePath
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Handle.Types.Handle
[GblId[DataConWrapper],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S,U>m1,
 Unf=OtherCon []] =
    [] \r [dt_s8a6I dt_s8a6J]
        case dt_s8a6J of {
          GHC.MVar.MVar dt_s8a6L [Occ=Once] ->
              GHC.IO.Handle.Types.FileHandle [dt_s8a6I dt_s8a6L];
        };

GHC.IO.Handle.Types.$WDuplexHandle [InlPrag=INLINE[2]]
  :: GHC.IO.FilePath
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Handle.Types.Handle
[GblId[DataConWrapper],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><S,U><S,U>m2,
 Unf=OtherCon []] =
    [] \r [dt_s8a6M dt_s8a6N dt_s8a6O]
        case dt_s8a6N of {
          GHC.MVar.MVar dt_s8a6Q [Occ=Once] ->
              case dt_s8a6O of {
                GHC.MVar.MVar dt_s8a6S [Occ=Once] ->
                    GHC.IO.Handle.Types.DuplexHandle [dt_s8a6M dt_s8a6Q dt_s8a6S];
              };
        };

GHC.IO.Handle.Types.$fShowHandleType12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "closed"#;

GHC.IO.Handle.Types.$fShowHandleType11 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fShowHandleType12;

GHC.IO.Handle.Types.$fShowHandleType10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "semi-closed"#;

GHC.IO.Handle.Types.$fShowHandleType9 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fShowHandleType10;

GHC.IO.Handle.Types.$fShowHandleType8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "readable"#;

GHC.IO.Handle.Types.$fShowHandleType7 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fShowHandleType8;

GHC.IO.Handle.Types.$fShowHandleType6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "writable"#;

GHC.IO.Handle.Types.$fShowHandleType5 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fShowHandleType6;

GHC.IO.Handle.Types.$fShowHandleType4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "writable (append)"#;

GHC.IO.Handle.Types.$fShowHandleType3 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fShowHandleType4;

GHC.IO.Handle.Types.$fShowHandleType2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "read-writable"#;

GHC.IO.Handle.Types.$fShowHandleType1 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fShowHandleType2;

GHC.IO.Handle.Types.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.HandleType
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s8a6T w1_s8a6U]
        case w_s8a6T of {
          GHC.IO.Handle.Types.ClosedHandle ->
              GHC.Base.++ GHC.IO.Handle.Types.$fShowHandleType11 w1_s8a6U;
          GHC.IO.Handle.Types.SemiClosedHandle ->
              GHC.Base.++ GHC.IO.Handle.Types.$fShowHandleType9 w1_s8a6U;
          GHC.IO.Handle.Types.ReadHandle ->
              GHC.Base.++ GHC.IO.Handle.Types.$fShowHandleType7 w1_s8a6U;
          GHC.IO.Handle.Types.WriteHandle ->
              GHC.Base.++ GHC.IO.Handle.Types.$fShowHandleType5 w1_s8a6U;
          GHC.IO.Handle.Types.AppendHandle ->
              GHC.Base.++ GHC.IO.Handle.Types.$fShowHandleType3 w1_s8a6U;
          GHC.IO.Handle.Types.ReadWriteHandle ->
              GHC.Base.++ GHC.IO.Handle.Types.$fShowHandleType1 w1_s8a6U;
        };

GHC.IO.Handle.Types.$fShowHandleType_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int
     -> GHC.IO.Handle.Types.HandleType -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s8a6W w1_s8a6X w2_s8a6Y]
        GHC.IO.Handle.Types.$w$cshowsPrec w1_s8a6X w2_s8a6Y;

GHC.IO.Handle.Types.$fShowHandleType_$cshow
  :: GHC.IO.Handle.Types.HandleType -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s8a6Z]
        case x_s8a6Z of {
          GHC.IO.Handle.Types.ClosedHandle ->
              GHC.IO.Handle.Types.$fShowHandleType11;
          GHC.IO.Handle.Types.SemiClosedHandle ->
              GHC.IO.Handle.Types.$fShowHandleType9;
          GHC.IO.Handle.Types.ReadHandle ->
              GHC.IO.Handle.Types.$fShowHandleType7;
          GHC.IO.Handle.Types.WriteHandle ->
              GHC.IO.Handle.Types.$fShowHandleType5;
          GHC.IO.Handle.Types.AppendHandle ->
              GHC.IO.Handle.Types.$fShowHandleType3;
          GHC.IO.Handle.Types.ReadWriteHandle ->
              GHC.IO.Handle.Types.$fShowHandleType1;
        };

GHC.IO.Handle.Types.$fShowHandleType_$cshowList
  :: [GHC.IO.Handle.Types.HandleType] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s8a71 s_s8a72]
        GHC.Show.showList__
            GHC.IO.Handle.Types.$w$cshowsPrec ls_s8a71 s_s8a72;

GHC.IO.Handle.Types.$fShowHandleType [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Handle.Types.HandleType
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Handle.Types.$fShowHandleType_$cshowsPrec
                                    GHC.IO.Handle.Types.$fShowHandleType_$cshow
                                    GHC.IO.Handle.Types.$fShowHandleType_$cshowList];

GHC.IO.Handle.Types.$fEqHandle_$c==
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Types.Handle -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s8a73 ds1_s8a74]
        case ds_s8a73 of {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_s8a77 [Occ=Once] ->
              case ds1_s8a74 of {
                GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt1_s8a7a [Occ=Once] ->
                    case sameMVar# [dt_s8a77 dt1_s8a7a] of sat_s8a7b {
                      __DEFAULT -> tagToEnum# [sat_s8a7b];
                    };
                GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead] ->
                    GHC.Types.False [];
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_s8a7g [Occ=Once]
                                           _ [Occ=Dead] ->
              case ds1_s8a74 of {
                GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] _ [Occ=Dead] ->
                    GHC.Types.False [];
                GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                 dt2_s8a7m [Occ=Once]
                                                 _ [Occ=Dead] ->
                    case sameMVar# [dt_s8a7g dt2_s8a7m] of sat_s8a7o {
                      __DEFAULT -> tagToEnum# [sat_s8a7o];
                    };
              };
        };

GHC.IO.Handle.Types.$fEqHandle_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Types.Handle -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s8a7p eta1_s8a7q]
        case eta_s8a7p of {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_s8a7t [Occ=Once] ->
              case eta1_s8a7q of {
                GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt1_s8a7w [Occ=Once] ->
                    case sameMVar# [dt_s8a7t dt1_s8a7w] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
                GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead] ->
                    GHC.Types.True [];
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_s8a7C [Occ=Once]
                                           _ [Occ=Dead] ->
              case eta1_s8a7q of {
                GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] _ [Occ=Dead] ->
                    GHC.Types.True [];
                GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                 dt2_s8a7I [Occ=Once]
                                                 _ [Occ=Dead] ->
                    case sameMVar# [dt_s8a7C dt2_s8a7I] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.IO.Handle.Types.$fEqHandle [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.IO.Handle.Types.Handle
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.IO.Handle.Types.$fEqHandle_$c==
                                     GHC.IO.Handle.Types.$fEqHandle_$c/=];

GHC.IO.Handle.Types.$fReadNewline11 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LF"#;

GHC.IO.Handle.Types.$fReadNewline10 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadNewline11;

GHC.IO.Handle.Types.$fReadNewline7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "CRLF"#;

GHC.IO.Handle.Types.$fReadNewline6 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadNewline7;

GHC.IO.Handle.Types.$fShowNewline_$cshowsPrec
  :: GHC.Types.Int -> GHC.IO.Handle.Types.Newline -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_s8a7L ds1_s8a7M eta_s8a7N]
        case ds1_s8a7M of {
          GHC.IO.Handle.Types.LF ->
              GHC.Base.++ GHC.IO.Handle.Types.$fReadNewline10 eta_s8a7N;
          GHC.IO.Handle.Types.CRLF ->
              GHC.Base.++ GHC.IO.Handle.Types.$fReadNewline6 eta_s8a7N;
        };

GHC.IO.Handle.Types.$fShowNewline_$cshow
  :: GHC.IO.Handle.Types.Newline -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s8a7P]
        case x_s8a7P of {
          GHC.IO.Handle.Types.LF -> GHC.IO.Handle.Types.$fReadNewline10;
          GHC.IO.Handle.Types.CRLF -> GHC.IO.Handle.Types.$fReadNewline6;
        };

GHC.IO.Handle.Types.$fShowNewline1
  :: GHC.IO.Handle.Types.Newline -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_s8a7R eta_s8a7S]
        case ds_s8a7R of {
          GHC.IO.Handle.Types.LF ->
              GHC.Base.++ GHC.IO.Handle.Types.$fReadNewline10 eta_s8a7S;
          GHC.IO.Handle.Types.CRLF ->
              GHC.Base.++ GHC.IO.Handle.Types.$fReadNewline6 eta_s8a7S;
        };

GHC.IO.Handle.Types.$fShowNewline_$cshowList
  :: [GHC.IO.Handle.Types.Newline] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s8a7U s_s8a7V]
        GHC.Show.showList__
            GHC.IO.Handle.Types.$fShowNewline1 ls_s8a7U s_s8a7V;

GHC.IO.Handle.Types.$fShowNewline [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Handle.Types.Newline
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Handle.Types.$fShowNewline_$cshowsPrec
                                    GHC.IO.Handle.Types.$fShowNewline_$cshow
                                    GHC.IO.Handle.Types.$fShowNewline_$cshowList];

GHC.IO.Handle.Types.$fShowNewlineMode4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NewlineMode {"#;

GHC.IO.Handle.Types.$fShowNewlineMode3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "inputNL = "#;

GHC.IO.Handle.Types.$fShowNewlineMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "outputNL = "#;

GHC.IO.Handle.Types.$fReadNewlineMode5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "}"#;

GHC.IO.Handle.Types.$w$cshowsPrec1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.Base.String
     -> GHC.Base.String
[GblId, Arity=4, Str=<S,U><L,1*U><L,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ww_s8a7W ww1_s8a7X ww2_s8a7Y w_s8a7Z]
        let {
          p_s8a80 [Occ=Once*!, Dmd=<L,1*C1(U)>] :: GHC.Show.ShowS
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              sat-only [ww1_s8a7X ww2_s8a7Y] \r [x_s8a81]
                  let {
                    sat_s8a8a [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [ww1_s8a7X ww2_s8a7Y x_s8a81] \u []
                            let {
                              sat_s8a89 [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [ww1_s8a7X ww2_s8a7Y x_s8a81] \u []
                                      let {
                                        karg_s8a82 [Occ=Once*, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                        [LclId] =
                                            [ww2_s8a7Y x_s8a81] \s []
                                                let {
                                                  sat_s8a87 [Occ=Once, Dmd=<L,1*U>]
                                                    :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [ww2_s8a7Y x_s8a81] \s []
                                                          let {
                                                            sat_s8a86 [Occ=Once] :: [GHC.Types.Char]
                                                            [LclId] =
                                                                [ww2_s8a7Y x_s8a81] \u []
                                                                    case ww2_s8a7Y of {
                                                                      GHC.IO.Handle.Types.LF ->
                                                                          let {
                                                                            sat_s8a84 [Occ=Once,
                                                                                       Dmd=<L,1*U>]
                                                                              :: [GHC.Types.Char]
                                                                            [LclId] =
                                                                                [x_s8a81] \s []
                                                                                    GHC.CString.unpackAppendCString#
                                                                                        GHC.IO.Handle.Types.$fReadNewlineMode5
                                                                                        x_s8a81;
                                                                          } in 
                                                                            GHC.Base.++
                                                                                GHC.IO.Handle.Types.$fReadNewline10
                                                                                sat_s8a84;
                                                                      GHC.IO.Handle.Types.CRLF ->
                                                                          let {
                                                                            sat_s8a85 [Occ=Once,
                                                                                       Dmd=<L,1*U>]
                                                                              :: [GHC.Types.Char]
                                                                            [LclId] =
                                                                                [x_s8a81] \s []
                                                                                    GHC.CString.unpackAppendCString#
                                                                                        GHC.IO.Handle.Types.$fReadNewlineMode5
                                                                                        x_s8a81;
                                                                          } in 
                                                                            GHC.Base.++
                                                                                GHC.IO.Handle.Types.$fReadNewline6
                                                                                sat_s8a85;
                                                                    };
                                                          } in 
                                                            GHC.CString.unpackAppendCString#
                                                                GHC.IO.Handle.Types.$fShowNewlineMode2
                                                                sat_s8a86;
                                                } in 
                                                  GHC.Base.++ GHC.Show.showCommaSpace1 sat_s8a87;
                                      } in 
                                        case ww1_s8a7X of {
                                          GHC.IO.Handle.Types.LF ->
                                              GHC.Base.++
                                                  GHC.IO.Handle.Types.$fReadNewline10 karg_s8a82;
                                          GHC.IO.Handle.Types.CRLF ->
                                              GHC.Base.++
                                                  GHC.IO.Handle.Types.$fReadNewline6 karg_s8a82;
                                        };
                            } in 
                              GHC.CString.unpackAppendCString#
                                  GHC.IO.Handle.Types.$fShowNewlineMode3 sat_s8a89;
                  } in 
                    GHC.CString.unpackAppendCString#
                        GHC.IO.Handle.Types.$fShowNewlineMode4 sat_s8a8a;
        } in 
          case >=# [ww_s8a7W 11#] of {
            __DEFAULT -> p_s8a80 w_s8a7Z;
            1# ->
                let {
                  sat_s8a8d [Occ=Once] :: [GHC.Types.Char]
                  [LclId] =
                      [w_s8a7Z p_s8a80] \u []
                          let {
                            sat_s8a8c [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                CCCS :! [GHC.Show.$fShow(,)2 w_s8a7Z];
                          } in  p_s8a80 sat_s8a8c;
                } in  : [GHC.Show.$fShow(,)4 sat_s8a8d];
          };

GHC.IO.Handle.Types.$fShowNewlineMode_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int
     -> GHC.IO.Handle.Types.NewlineMode -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S,1*U(1*U,1*U)><L,U>,
 Unf=OtherCon []] =
    [] \r [w_s8a8e w1_s8a8f w2_s8a8g]
        case w_s8a8e of {
          GHC.Types.I# ww1_s8a8i [Occ=Once] ->
              case w1_s8a8f of {
                GHC.IO.Handle.Types.NewlineMode ww3_s8a8k [Occ=Once]
                                                ww4_s8a8l [Occ=Once] ->
                    GHC.IO.Handle.Types.$w$cshowsPrec1
                        ww1_s8a8i ww3_s8a8k ww4_s8a8l w2_s8a8g;
              };
        };

GHC.IO.Handle.Types.$fShowBufferMode2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.IO.Handle.Types.$fShowNewlineMode_$cshow
  :: GHC.IO.Handle.Types.NewlineMode -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U(1*U,1*U)>, Unf=OtherCon []] =
    [] \r [x_s8a8m]
        case x_s8a8m of {
          GHC.IO.Handle.Types.NewlineMode ww1_s8a8o [Occ=Once]
                                          ww2_s8a8p [Occ=Once] ->
              GHC.IO.Handle.Types.$w$cshowsPrec1
                  0# ww1_s8a8o ww2_s8a8p GHC.Types.[];
        };

GHC.IO.Handle.Types.$fShowNewlineMode1
  :: GHC.IO.Handle.Types.NewlineMode -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U(1*U,1*U)><L,U>, Unf=OtherCon []] =
    [] \r [w_s8a8q w1_s8a8r]
        case w_s8a8q of {
          GHC.IO.Handle.Types.NewlineMode ww1_s8a8t [Occ=Once]
                                          ww2_s8a8u [Occ=Once] ->
              GHC.IO.Handle.Types.$w$cshowsPrec1 0# ww1_s8a8t ww2_s8a8u w1_s8a8r;
        };

GHC.IO.Handle.Types.$fShowNewlineMode_$cshowList
  :: [GHC.IO.Handle.Types.NewlineMode] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s8a8v s_s8a8w]
        GHC.Show.showList__
            GHC.IO.Handle.Types.$fShowNewlineMode1 ls_s8a8v s_s8a8w;

GHC.IO.Handle.Types.$fShowNewlineMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Handle.Types.NewlineMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Handle.Types.$fShowNewlineMode_$cshowsPrec
                                    GHC.IO.Handle.Types.$fShowNewlineMode_$cshow
                                    GHC.IO.Handle.Types.$fShowNewlineMode_$cshowList];

GHC.IO.Handle.Types.$fReadNewline9
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Handle.Types.Newline -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s8a8x k_s8a8y] k_s8a8y GHC.IO.Handle.Types.LF;

GHC.IO.Handle.Types.$fReadNewline8
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.IO.Handle.Types.Newline)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.Handle.Types.$fReadNewline10
                        GHC.IO.Handle.Types.$fReadNewline9];

GHC.IO.Handle.Types.$fReadNewline5
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Handle.Types.Newline -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s8a8z k_s8a8A] k_s8a8A GHC.IO.Handle.Types.CRLF;

GHC.IO.Handle.Types.$fReadNewline4
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.IO.Handle.Types.Newline)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.Handle.Types.$fReadNewline6
                        GHC.IO.Handle.Types.$fReadNewline5];

GHC.IO.Handle.Types.$fReadNewline3
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec
         GHC.IO.Handle.Types.Newline)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Handle.Types.$fReadNewline4 GHC.Types.[]];

GHC.IO.Handle.Types.$fReadNewline_sps
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec
         GHC.IO.Handle.Types.Newline)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Handle.Types.$fReadNewline8
                      GHC.IO.Handle.Types.$fReadNewline3];

GHC.IO.Handle.Types.$fReadNewline2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.IO.Handle.Types.Newline
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_s8a8B]
        GHC.Read.choose2 GHC.IO.Handle.Types.$fReadNewline_sps eta_s8a8B;

GHC.IO.Handle.Types.$fReadNewline1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Handle.Types.Newline -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.IO.Handle.Types.$fReadNewline2 eta_B2 eta_B1;

GHC.IO.Handle.Types.$fReadNewline_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.IO.Handle.Types.Newline
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s8a8C]
        let {
          sat_s8a8D [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.IO.Handle.Types.Newline
          [LclId] =
              [n_s8a8C] \u []
                  GHC.Read.list3
                      GHC.IO.Handle.Types.$fReadNewline2
                      n_s8a8C
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s8a8D;

GHC.IO.Handle.Types.$fReadNewline_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec
       [GHC.IO.Handle.Types.Newline]
[GblId] =
    [] \u [] GHC.Read.list GHC.IO.Handle.Types.$fReadNewline1;

GHC.IO.Handle.Types.$fReadNewline12
  :: Text.ParserCombinators.ReadP.P [GHC.IO.Handle.Types.Newline]
[GblId] =
    [] \u []
        GHC.IO.Handle.Types.$fReadNewline_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.IO.Handle.Types.$fReadNewline_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.IO.Handle.Types.Newline]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run
            GHC.IO.Handle.Types.$fReadNewline12 eta_B1;

GHC.IO.Handle.Types.$fReadNewline [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.IO.Handle.Types.Newline
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.IO.Handle.Types.$fReadNewline_$creadsPrec
                                    GHC.IO.Handle.Types.$fReadNewline_$creadList
                                    GHC.IO.Handle.Types.$fReadNewline1
                                    GHC.IO.Handle.Types.$fReadNewline_$creadListPrec];

GHC.IO.Handle.Types.$fReadNewlineMode17 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NewlineMode"#;

GHC.IO.Handle.Types.$fReadNewlineMode16 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadNewlineMode17;

GHC.IO.Handle.Types.$fReadNewlineMode_lexeme1
  :: Text.Read.Lex.Lexeme
[GblId, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Ident! [GHC.IO.Handle.Types.$fReadNewlineMode16];

GHC.IO.Handle.Types.$fReadNewlineMode15 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "{"#;

GHC.IO.Handle.Types.$fReadNewlineMode14 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadNewlineMode15;

GHC.IO.Handle.Types.$fReadNewlineMode_lexeme
  :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [GHC.IO.Handle.Types.$fReadNewlineMode14];

GHC.IO.Handle.Types.$fReadNewlineMode13 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "inputNL"#;

GHC.IO.Handle.Types.$fReadNewlineMode12 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadNewlineMode13;

GHC.IO.Handle.Types.$fReadNewlineMode11
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Handle.Types.Newline -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,U>, Unf=OtherCon []] =
    [] \r [ds1_s8a8E eta_s8a8F]
        GHC.Read.list3
            GHC.IO.Handle.Types.$fReadNewline2
            Text.ParserCombinators.ReadPrec.minPrec
            eta_s8a8F;

GHC.IO.Handle.Types.$fReadBufferMode_n
  :: Text.ParserCombinators.ReadPrec.Prec
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [11#];

GHC.IO.Handle.Types.$fReadNewlineMode10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ","#;

GHC.IO.Handle.Types.$fReadNewlineMode9 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadNewlineMode10;

GHC.IO.Handle.Types.$fReadNewlineMode8 :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [GHC.IO.Handle.Types.$fReadNewlineMode9];

GHC.IO.Handle.Types.$fReadNewlineMode7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "outputNL"#;

GHC.IO.Handle.Types.$fReadNewlineMode6 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadNewlineMode7;

GHC.IO.Handle.Types.$fReadNewlineMode4 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadNewlineMode5;

GHC.IO.Handle.Types.$fReadNewlineMode3 :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [GHC.IO.Handle.Types.$fReadNewlineMode4];

GHC.IO.Handle.Types.$w$creadPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> forall b.
        (GHC.IO.Handle.Types.NewlineMode
         -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<S,U><L,C(U)>, Unf=OtherCon []] =
    [] \r [ww_s8a8G w_s8a8H]
        case <=# [ww_s8a8G 11#] of {
          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
          1# ->
              let {
                sat_s8a91 [Occ=Once]
                  :: () -> Text.ParserCombinators.ReadP.P b_s89BH
                [LclId] =
                    [w_s8a8H] \r [a1_s8a8J]
                        let {
                          sat_s8a8Y [Occ=Once]
                            :: () -> Text.ParserCombinators.ReadP.P b_s89BH
                          [LclId] =
                              [w_s8a8H] \r [a2_s8a8K]
                                  let {
                                    sat_s8a8X [Occ=Once]
                                      :: GHC.IO.Handle.Types.Newline
                                         -> Text.ParserCombinators.ReadP.P b_s89BH
                                    [LclId] =
                                        [w_s8a8H] \r [a3_s8a8L]
                                            let {
                                              sat_s8a8U [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b_s89BH
                                              [LclId] =
                                                  [w_s8a8H a3_s8a8L] \r [a4_s8a8M]
                                                      let {
                                                        sat_s8a8T [Occ=Once]
                                                          :: GHC.IO.Handle.Types.Newline
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b_s89BH
                                                        [LclId] =
                                                            [w_s8a8H a3_s8a8L] \r [a5_s8a8N]
                                                                let {
                                                                  sat_s8a8Q [Occ=Once]
                                                                    :: ()
                                                                       -> Text.ParserCombinators.ReadP.P
                                                                            b_s89BH
                                                                  [LclId] =
                                                                      [w_s8a8H
                                                                       a3_s8a8L
                                                                       a5_s8a8N] \r [a6_s8a8O]
                                                                          let {
                                                                            sat_s8a8P [Occ=Once]
                                                                              :: GHC.IO.Handle.Types.NewlineMode
                                                                            [LclId] =
                                                                                CCCS GHC.IO.Handle.Types.NewlineMode! [a3_s8a8L
                                                                                                                       a5_s8a8N];
                                                                          } in  w_s8a8H sat_s8a8P;
                                                                } in 
                                                                  case
                                                                      Text.Read.Lex.$wexpect
                                                                          GHC.IO.Handle.Types.$fReadNewlineMode3
                                                                          sat_s8a8Q
                                                                  of
                                                                  { Unit# ww2_s8a8S [Occ=Once] ->
                                                                        Text.ParserCombinators.ReadP.Look [ww2_s8a8S];
                                                                  };
                                                      } in 
                                                        GHC.Read.readField
                                                            GHC.IO.Handle.Types.$fReadNewlineMode6
                                                            GHC.IO.Handle.Types.$fReadNewlineMode11
                                                            GHC.IO.Handle.Types.$fReadBufferMode_n
                                                            sat_s8a8T;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.IO.Handle.Types.$fReadNewlineMode8
                                                      sat_s8a8U
                                              of
                                              { Unit# ww2_s8a8W [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww2_s8a8W];
                                              };
                                  } in 
                                    GHC.Read.readField
                                        GHC.IO.Handle.Types.$fReadNewlineMode12
                                        GHC.IO.Handle.Types.$fReadNewlineMode11
                                        GHC.IO.Handle.Types.$fReadBufferMode_n
                                        sat_s8a8X;
                        } in 
                          case
                              Text.Read.Lex.$wexpect
                                  GHC.IO.Handle.Types.$fReadNewlineMode_lexeme sat_s8a8Y
                          of
                          { Unit# ww2_s8a90 [Occ=Once] ->
                                Text.ParserCombinators.ReadP.Look [ww2_s8a90];
                          };
              } in 
                case
                    Text.Read.Lex.$wexpect
                        GHC.IO.Handle.Types.$fReadNewlineMode_lexeme1 sat_s8a91
                of
                { Unit# ww2_s8a93 [Occ=Once] ->
                      Text.ParserCombinators.ReadP.Look [ww2_s8a93];
                };
        };

GHC.IO.Handle.Types.$fReadNewlineMode2 [InlPrag=NOUSERINLINE[0]]
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Handle.Types.NewlineMode
         -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<S(S),1*U(U)><L,C(U)>, Unf=OtherCon []] =
    [] \r [w_s8a94 w1_s8a95]
        case w_s8a94 of {
          GHC.Types.I# ww1_s8a97 [Occ=Once] ->
              GHC.IO.Handle.Types.$w$creadPrec ww1_s8a97 w1_s8a95;
        };

GHC.IO.Handle.Types.$fReadNewlineMode1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Handle.Types.NewlineMode
         -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3
            GHC.IO.Handle.Types.$fReadNewlineMode2 eta_B2 eta_B1;

GHC.IO.Handle.Types.$fReadNewlineMode_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS
          GHC.IO.Handle.Types.NewlineMode
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s8a98]
        let {
          sat_s8a99 [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.IO.Handle.Types.NewlineMode
          [LclId] =
              [n_s8a98] \u []
                  GHC.Read.list3
                      GHC.IO.Handle.Types.$fReadNewlineMode2
                      n_s8a98
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s8a99;

GHC.IO.Handle.Types.$fReadNewlineMode_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec
       [GHC.IO.Handle.Types.NewlineMode]
[GblId] =
    [] \u [] GHC.Read.list GHC.IO.Handle.Types.$fReadNewlineMode1;

GHC.IO.Handle.Types.$fReadNewlineMode18
  :: Text.ParserCombinators.ReadP.P [GHC.IO.Handle.Types.NewlineMode]
[GblId] =
    [] \u []
        GHC.IO.Handle.Types.$fReadNewlineMode_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.IO.Handle.Types.$fReadNewlineMode_$creadList
  :: Text.ParserCombinators.ReadP.ReadS
       [GHC.IO.Handle.Types.NewlineMode]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run
            GHC.IO.Handle.Types.$fReadNewlineMode18 eta_B1;

GHC.IO.Handle.Types.$fReadNewlineMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.IO.Handle.Types.NewlineMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.IO.Handle.Types.$fReadNewlineMode_$creadsPrec
                                    GHC.IO.Handle.Types.$fReadNewlineMode_$creadList
                                    GHC.IO.Handle.Types.$fReadNewlineMode1
                                    GHC.IO.Handle.Types.$fReadNewlineMode_$creadListPrec];

GHC.IO.Handle.Types.$fOrdNewline_$c<
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8a9a b_s8a9b]
        case a_s8a9a of {
          GHC.IO.Handle.Types.LF ->
              case b_s8a9b of {
                GHC.IO.Handle.Types.LF -> GHC.Types.False [];
                GHC.IO.Handle.Types.CRLF -> GHC.Types.True [];
              };
          GHC.IO.Handle.Types.CRLF ->
              case b_s8a9b of { __DEFAULT -> GHC.Types.False []; };
        };

GHC.IO.Handle.Types.$fOrdNewline_$ccompare
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8a9f b_s8a9g]
        case a_s8a9f of {
          GHC.IO.Handle.Types.LF ->
              case b_s8a9g of {
                GHC.IO.Handle.Types.LF -> GHC.Types.EQ [];
                GHC.IO.Handle.Types.CRLF -> GHC.Types.LT [];
              };
          GHC.IO.Handle.Types.CRLF ->
              case b_s8a9g of {
                GHC.IO.Handle.Types.LF -> GHC.Types.GT [];
                GHC.IO.Handle.Types.CRLF -> GHC.Types.EQ [];
              };
        };

GHC.IO.Handle.Types.$fEqNewline_$c==
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s8a9k ds1_s8a9l]
        case ds_s8a9k of {
          GHC.IO.Handle.Types.LF ->
              case ds1_s8a9l of {
                GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
              };
          GHC.IO.Handle.Types.CRLF ->
              case ds1_s8a9l of {
                GHC.IO.Handle.Types.LF -> GHC.Types.False [];
                GHC.IO.Handle.Types.CRLF -> GHC.Types.True [];
              };
        };

GHC.IO.Handle.Types.$fEqNewline_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s8a9p eta1_s8a9q]
        case eta_s8a9p of {
          GHC.IO.Handle.Types.LF ->
              case eta1_s8a9q of {
                GHC.IO.Handle.Types.LF -> GHC.Types.False [];
                GHC.IO.Handle.Types.CRLF -> GHC.Types.True [];
              };
          GHC.IO.Handle.Types.CRLF ->
              case eta1_s8a9q of {
                GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
              };
        };

GHC.IO.Handle.Types.$fEqNewline [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.IO.Handle.Types.Newline
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.IO.Handle.Types.$fEqNewline_$c==
                                     GHC.IO.Handle.Types.$fEqNewline_$c/=];

GHC.IO.Handle.Types.$fOrdNewline_$c<=
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8a9u b_s8a9v]
        case b_s8a9v of {
          GHC.IO.Handle.Types.LF ->
              case a_s8a9u of {
                GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
              };
          GHC.IO.Handle.Types.CRLF ->
              case a_s8a9u of { __DEFAULT -> GHC.Types.True []; };
        };

GHC.IO.Handle.Types.$fOrdNewline_$cmax
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.IO.Handle.Types.Newline
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s8a9z y_s8a9A]
        case y_s8a9A of {
          GHC.IO.Handle.Types.LF -> x_s8a9z;
          GHC.IO.Handle.Types.CRLF ->
              case x_s8a9z of { __DEFAULT -> GHC.IO.Handle.Types.CRLF []; };
        };

GHC.IO.Handle.Types.$fOrdNewline_$c>=
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8a9D b_s8a9E]
        case a_s8a9D of {
          GHC.IO.Handle.Types.LF ->
              case b_s8a9E of {
                GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
              };
          GHC.IO.Handle.Types.CRLF ->
              case b_s8a9E of { __DEFAULT -> GHC.Types.True []; };
        };

GHC.IO.Handle.Types.$fOrdNewline_$c>
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8a9I b_s8a9J]
        GHC.IO.Handle.Types.$fOrdNewline_$c< b_s8a9J a_s8a9I;

GHC.IO.Handle.Types.$fOrdNewline_$cmin
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.IO.Handle.Types.Newline
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s8a9K y_s8a9L]
        case y_s8a9L of {
          GHC.IO.Handle.Types.LF ->
              case x_s8a9K of { __DEFAULT -> GHC.IO.Handle.Types.LF []; };
          GHC.IO.Handle.Types.CRLF -> x_s8a9K;
        };

GHC.IO.Handle.Types.$fOrdNewline [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.IO.Handle.Types.Newline
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.IO.Handle.Types.$fEqNewline
                                      GHC.IO.Handle.Types.$fOrdNewline_$ccompare
                                      GHC.IO.Handle.Types.$fOrdNewline_$c<
                                      GHC.IO.Handle.Types.$fOrdNewline_$c<=
                                      GHC.IO.Handle.Types.$fOrdNewline_$c>
                                      GHC.IO.Handle.Types.$fOrdNewline_$c>=
                                      GHC.IO.Handle.Types.$fOrdNewline_$cmax
                                      GHC.IO.Handle.Types.$fOrdNewline_$cmin];

GHC.IO.Handle.Types.$w$ccompare [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.Types.Ordering
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s8a9O ww1_s8a9P ww2_s8a9Q ww3_s8a9R]
        case ww_s8a9O of {
          GHC.IO.Handle.Types.LF ->
              case ww2_s8a9Q of {
                GHC.IO.Handle.Types.LF ->
                    GHC.IO.Handle.Types.$fOrdNewline_$ccompare ww1_s8a9P ww3_s8a9R;
                GHC.IO.Handle.Types.CRLF -> GHC.Types.LT [];
              };
          GHC.IO.Handle.Types.CRLF ->
              case ww2_s8a9Q of {
                GHC.IO.Handle.Types.LF -> GHC.Types.GT [];
                GHC.IO.Handle.Types.CRLF ->
                    GHC.IO.Handle.Types.$fOrdNewline_$ccompare ww1_s8a9P ww3_s8a9R;
              };
        };

GHC.IO.Handle.Types.$fOrdNewlineMode_$ccompare [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [w_s8a9V w1_s8a9W]
        case w_s8a9V of {
          GHC.IO.Handle.Types.NewlineMode ww1_s8a9Y [Occ=Once]
                                          ww2_s8a9Z [Occ=Once] ->
              case w1_s8a9W of {
                GHC.IO.Handle.Types.NewlineMode ww4_s8aa1 [Occ=Once]
                                                ww5_s8aa2 [Occ=Once] ->
                    GHC.IO.Handle.Types.$w$ccompare
                        ww1_s8a9Y ww2_s8a9Z ww4_s8aa1 ww5_s8aa2;
              };
        };

GHC.IO.Handle.Types.$w$c< [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.Types.Bool
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s8aa3 ww1_s8aa4 ww2_s8aa5 ww3_s8aa6]
        case ww_s8aa3 of {
          GHC.IO.Handle.Types.LF ->
              case ww2_s8aa5 of {
                GHC.IO.Handle.Types.LF ->
                    GHC.IO.Handle.Types.$fOrdNewline_$c< ww1_s8aa4 ww3_s8aa6;
                GHC.IO.Handle.Types.CRLF -> GHC.Types.True [];
              };
          GHC.IO.Handle.Types.CRLF ->
              case ww2_s8aa5 of {
                GHC.IO.Handle.Types.LF -> GHC.Types.False [];
                GHC.IO.Handle.Types.CRLF ->
                    GHC.IO.Handle.Types.$fOrdNewline_$c< ww1_s8aa4 ww3_s8aa6;
              };
        };

GHC.IO.Handle.Types.$fOrdNewlineMode_$c< [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [w_s8aaa w1_s8aab]
        case w_s8aaa of {
          GHC.IO.Handle.Types.NewlineMode ww1_s8aad [Occ=Once]
                                          ww2_s8aae [Occ=Once] ->
              case w1_s8aab of {
                GHC.IO.Handle.Types.NewlineMode ww4_s8aag [Occ=Once]
                                                ww5_s8aah [Occ=Once] ->
                    GHC.IO.Handle.Types.$w$c< ww1_s8aad ww2_s8aae ww4_s8aag ww5_s8aah;
              };
        };

GHC.IO.Handle.Types.$w$c== [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.Types.Bool
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s8aai ww1_s8aaj ww2_s8aak ww3_s8aal]
        case ww_s8aai of {
          GHC.IO.Handle.Types.LF ->
              case ww2_s8aak of {
                GHC.IO.Handle.Types.LF ->
                    GHC.IO.Handle.Types.$fEqNewline_$c== ww1_s8aaj ww3_s8aal;
                GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
              };
          GHC.IO.Handle.Types.CRLF ->
              case ww2_s8aak of {
                GHC.IO.Handle.Types.LF -> GHC.Types.False [];
                GHC.IO.Handle.Types.CRLF ->
                    GHC.IO.Handle.Types.$fEqNewline_$c== ww1_s8aaj ww3_s8aal;
              };
        };

GHC.IO.Handle.Types.$fEqNewlineMode_$c== [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [w_s8aap w1_s8aaq]
        case w_s8aap of {
          GHC.IO.Handle.Types.NewlineMode ww1_s8aas [Occ=Once]
                                          ww2_s8aat [Occ=Once] ->
              case w1_s8aaq of {
                GHC.IO.Handle.Types.NewlineMode ww4_s8aav [Occ=Once]
                                                ww5_s8aaw [Occ=Once] ->
                    GHC.IO.Handle.Types.$w$c== ww1_s8aas ww2_s8aat ww4_s8aav ww5_s8aaw;
              };
        };

GHC.IO.Handle.Types.$fEqNewlineMode_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [eta_s8aax eta1_s8aay]
        case eta_s8aax of {
          GHC.IO.Handle.Types.NewlineMode ww1_s8aaA [Occ=Once!]
                                          ww2_s8aaB [Occ=Once*!] ->
              case eta1_s8aay of {
                GHC.IO.Handle.Types.NewlineMode ww4_s8aaD [Occ=Once*!]
                                                ww5_s8aaE [Occ=Once*!] ->
                    case ww1_s8aaA of {
                      GHC.IO.Handle.Types.LF ->
                          case ww4_s8aaD of {
                            GHC.IO.Handle.Types.LF ->
                                case ww2_s8aaB of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8aaE of {
                                        GHC.IO.Handle.Types.LF -> GHC.Types.False [];
                                        GHC.IO.Handle.Types.CRLF -> GHC.Types.True [];
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8aaE of {
                                        GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                                        GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
                                      };
                                };
                            GHC.IO.Handle.Types.CRLF -> GHC.Types.True [];
                          };
                      GHC.IO.Handle.Types.CRLF ->
                          case ww4_s8aaD of {
                            GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                            GHC.IO.Handle.Types.CRLF ->
                                case ww2_s8aaB of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8aaE of {
                                        GHC.IO.Handle.Types.LF -> GHC.Types.False [];
                                        GHC.IO.Handle.Types.CRLF -> GHC.Types.True [];
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8aaE of {
                                        GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                                        GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fEqNewlineMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.IO.Handle.Types.NewlineMode
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.IO.Handle.Types.$fEqNewlineMode_$c==
                                     GHC.IO.Handle.Types.$fEqNewlineMode_$c/=];

GHC.IO.Handle.Types.$fOrdNewlineMode_$c<=
  :: GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [a_s8aaO b_s8aaP]
        case b_s8aaP of {
          GHC.IO.Handle.Types.NewlineMode ww1_s8aaR [Occ=Once!]
                                          ww2_s8aaS [Occ=Once*!] ->
              case a_s8aaO of {
                GHC.IO.Handle.Types.NewlineMode ww4_s8aaU [Occ=Once*!]
                                                ww5_s8aaV [Occ=Once*] ->
                    case ww1_s8aaR of {
                      GHC.IO.Handle.Types.LF ->
                          case ww4_s8aaU of {
                            GHC.IO.Handle.Types.LF ->
                                case ww2_s8aaS of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8aaV of {
                                        GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                                        GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8aaV of { __DEFAULT -> GHC.Types.True []; };
                                };
                            GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
                          };
                      GHC.IO.Handle.Types.CRLF ->
                          case ww4_s8aaU of {
                            GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                            GHC.IO.Handle.Types.CRLF ->
                                case ww2_s8aaS of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8aaV of {
                                        GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                                        GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8aaV of { __DEFAULT -> GHC.Types.True []; };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fOrdNewlineMode_$cmax
  :: GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [x_s8ab5 y_s8ab6]
        case y_s8ab6 of ww_s8ab7 {
          GHC.IO.Handle.Types.NewlineMode ww1_s8ab8 [Occ=Once!]
                                          ww2_s8ab9 [Occ=Once*!] ->
              case x_s8ab5 of ww3_s8aba {
                GHC.IO.Handle.Types.NewlineMode ww4_s8abb [Occ=Once*!]
                                                ww5_s8abc [Occ=Once*] ->
                    case ww1_s8ab8 of {
                      GHC.IO.Handle.Types.LF ->
                          case ww4_s8abb of {
                            GHC.IO.Handle.Types.LF ->
                                case ww2_s8ab9 of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8abc of {
                                        GHC.IO.Handle.Types.LF -> ww_s8ab7;
                                        GHC.IO.Handle.Types.CRLF -> ww3_s8aba;
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8abc of { __DEFAULT -> ww_s8ab7; };
                                };
                            GHC.IO.Handle.Types.CRLF -> ww3_s8aba;
                          };
                      GHC.IO.Handle.Types.CRLF ->
                          case ww4_s8abb of {
                            GHC.IO.Handle.Types.LF -> ww_s8ab7;
                            GHC.IO.Handle.Types.CRLF ->
                                case ww2_s8ab9 of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8abc of {
                                        GHC.IO.Handle.Types.LF -> ww_s8ab7;
                                        GHC.IO.Handle.Types.CRLF -> ww3_s8aba;
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8abc of { __DEFAULT -> ww_s8ab7; };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fOrdNewlineMode_$c>=
  :: GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [a_s8abm b_s8abn]
        case a_s8abm of {
          GHC.IO.Handle.Types.NewlineMode ww1_s8abp [Occ=Once!]
                                          ww2_s8abq [Occ=Once*!] ->
              case b_s8abn of {
                GHC.IO.Handle.Types.NewlineMode ww4_s8abs [Occ=Once*!]
                                                ww5_s8abt [Occ=Once*] ->
                    case ww1_s8abp of {
                      GHC.IO.Handle.Types.LF ->
                          case ww4_s8abs of {
                            GHC.IO.Handle.Types.LF ->
                                case ww2_s8abq of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8abt of {
                                        GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                                        GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8abt of { __DEFAULT -> GHC.Types.True []; };
                                };
                            GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
                          };
                      GHC.IO.Handle.Types.CRLF ->
                          case ww4_s8abs of {
                            GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                            GHC.IO.Handle.Types.CRLF ->
                                case ww2_s8abq of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8abt of {
                                        GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                                        GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8abt of { __DEFAULT -> GHC.Types.True []; };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fOrdNewlineMode_$c>
  :: GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [a_s8abD b_s8abE]
        GHC.IO.Handle.Types.$fOrdNewlineMode_$c< b_s8abE a_s8abD;

GHC.IO.Handle.Types.$fOrdNewlineMode_$cmin
  :: GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [x_s8abF y_s8abG]
        case y_s8abG of ww_s8abH {
          GHC.IO.Handle.Types.NewlineMode ww1_s8abI [Occ=Once!]
                                          ww2_s8abJ [Occ=Once*!] ->
              case x_s8abF of ww3_s8abK {
                GHC.IO.Handle.Types.NewlineMode ww4_s8abL [Occ=Once*!]
                                                ww5_s8abM [Occ=Once*] ->
                    case ww1_s8abI of {
                      GHC.IO.Handle.Types.LF ->
                          case ww4_s8abL of {
                            GHC.IO.Handle.Types.LF ->
                                case ww2_s8abJ of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8abM of {
                                        GHC.IO.Handle.Types.LF -> ww3_s8abK;
                                        GHC.IO.Handle.Types.CRLF -> ww_s8abH;
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8abM of { __DEFAULT -> ww3_s8abK; };
                                };
                            GHC.IO.Handle.Types.CRLF -> ww_s8abH;
                          };
                      GHC.IO.Handle.Types.CRLF ->
                          case ww4_s8abL of {
                            GHC.IO.Handle.Types.LF -> ww3_s8abK;
                            GHC.IO.Handle.Types.CRLF ->
                                case ww2_s8abJ of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8abM of {
                                        GHC.IO.Handle.Types.LF -> ww3_s8abK;
                                        GHC.IO.Handle.Types.CRLF -> ww_s8abH;
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8abM of { __DEFAULT -> ww3_s8abK; };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fOrdNewlineMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.IO.Handle.Types.NewlineMode
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.IO.Handle.Types.$fEqNewlineMode
                                      GHC.IO.Handle.Types.$fOrdNewlineMode_$ccompare
                                      GHC.IO.Handle.Types.$fOrdNewlineMode_$c<
                                      GHC.IO.Handle.Types.$fOrdNewlineMode_$c<=
                                      GHC.IO.Handle.Types.$fOrdNewlineMode_$c>
                                      GHC.IO.Handle.Types.$fOrdNewlineMode_$c>=
                                      GHC.IO.Handle.Types.$fOrdNewlineMode_$cmax
                                      GHC.IO.Handle.Types.$fOrdNewlineMode_$cmin];

GHC.IO.Handle.Types.$fReadBufferMode13 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NoBuffering"#;

GHC.IO.Handle.Types.$fReadBufferMode12 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadBufferMode13;

GHC.IO.Handle.Types.$fShowBufferMode6
  :: [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Base.++ GHC.IO.Handle.Types.$fReadBufferMode12 eta_B1;

GHC.IO.Handle.Types.$fReadBufferMode9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LineBuffering"#;

GHC.IO.Handle.Types.$fReadBufferMode8 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadBufferMode9;

GHC.IO.Handle.Types.$fShowBufferMode5
  :: [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Base.++ GHC.IO.Handle.Types.$fReadBufferMode8 eta_B1;

GHC.IO.Handle.Types.$fShowBufferMode4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BlockBuffering "#;

GHC.IO.Handle.Types.$fShowBufferMode3 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fShowBufferMode4;

GHC.IO.Handle.Types.$fShowBufferMode_$cshowsPrec
  :: GHC.Types.Int
     -> GHC.IO.Handle.Types.BufferMode -> GHC.Show.ShowS
[GblId, Arity=2, Str=<L,1*U(U)><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s8abW ds1_s8abX]
        case ds1_s8abX of {
          GHC.IO.Handle.Types.NoBuffering ->
              GHC.IO.Handle.Types.$fShowBufferMode6;
          GHC.IO.Handle.Types.LineBuffering ->
              GHC.IO.Handle.Types.$fShowBufferMode5;
          GHC.IO.Handle.Types.BlockBuffering b1_s8abZ [Occ=Once] ->
              case ds_s8abW of {
                GHC.Types.I# x_s8ac1 [Occ=Once] ->
                    let {
                      g_s8ac2 [Occ=OnceL*!, Dmd=<L,C(U)>]
                        :: GHC.Base.String -> GHC.Base.String
                      [LclId] =
                          [b1_s8abZ] \u []
                              GHC.Show.$fShowMaybe_$cshowsPrec
                                  GHC.Show.$fShowInt
                                  GHC.IO.Handle.Types.$fReadBufferMode_n
                                  b1_s8abZ;
                    } in 
                      case >=# [x_s8ac1 11#] of {
                        __DEFAULT ->
                            let {
                              sat_s8ac6 [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                              [LclId] =
                                  [g_s8ac2] \r [x1_s8ac4]
                                      let {
                                        sat_s8ac5 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                        [LclId] =
                                            [g_s8ac2 x1_s8ac4] \s [] g_s8ac2 x1_s8ac4;
                                      } in 
                                        GHC.Base.++ GHC.IO.Handle.Types.$fShowBufferMode3 sat_s8ac5;
                            } in  sat_s8ac6;
                        1# ->
                            let {
                              sat_s8acb [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                              [LclId] =
                                  [g_s8ac2] \r [x1_s8ac7]
                                      let {
                                        sat_s8aca [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            [g_s8ac2 x1_s8ac7] \u []
                                                let {
                                                  sat_s8ac9 [Occ=Once, Dmd=<L,1*U>]
                                                    :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [g_s8ac2 x1_s8ac7] \s []
                                                          let {
                                                            sat_s8ac8 [Occ=Once] :: GHC.Base.String
                                                            [LclId] =
                                                                CCCS :! [GHC.Show.$fShow(,)2
                                                                         x1_s8ac7];
                                                          } in  g_s8ac2 sat_s8ac8;
                                                } in 
                                                  GHC.Base.++
                                                      GHC.IO.Handle.Types.$fShowBufferMode3
                                                      sat_s8ac9;
                                      } in  : [GHC.Show.$fShow(,)4 sat_s8aca];
                            } in  sat_s8acb;
                      };
              };
        };

GHC.IO.Handle.Types.$fShowBufferMode7 :: [GHC.Types.Char]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.$fShow(,)2 GHC.Types.[]];

GHC.IO.Handle.Types.$fShowBufferMode_$cshow
  :: GHC.IO.Handle.Types.BufferMode -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s8acc]
        case x_s8acc of {
          GHC.IO.Handle.Types.NoBuffering ->
              GHC.IO.Handle.Types.$fReadBufferMode12;
          GHC.IO.Handle.Types.LineBuffering ->
              GHC.IO.Handle.Types.$fReadBufferMode8;
          GHC.IO.Handle.Types.BlockBuffering b1_s8ace [Occ=Once!] ->
              let {
                sat_s8aco [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                [LclId] =
                    [b1_s8ace] \s []
                        case b1_s8ace of {
                          GHC.Base.Nothing -> GHC.Show.$fShowMaybe4;
                          GHC.Base.Just b2_s8acg [Occ=Once!] ->
                              let {
                                sat_s8acn [Occ=Once] :: [GHC.Types.Char]
                                [LclId] =
                                    [b2_s8acg] \u []
                                        let {
                                          sat_s8acm [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                          [LclId] =
                                              [b2_s8acg] \s []
                                                  case b2_s8acg of {
                                                    GHC.Types.I# ww3_s8aci [Occ=Once] ->
                                                        case
                                                            GHC.Show.$wshowSignedInt
                                                                11#
                                                                ww3_s8aci
                                                                GHC.IO.Handle.Types.$fShowBufferMode7
                                                        of
                                                        { (#,#) ww5_s8ack [Occ=Once]
                                                                ww6_s8acl [Occ=Once] ->
                                                              : [ww5_s8ack ww6_s8acl];
                                                        };
                                                  };
                                        } in  GHC.Base.++ GHC.Show.$fShowMaybe1 sat_s8acm;
                              } in  : [GHC.Show.$fShow(,)4 sat_s8acn];
                        };
              } in  GHC.Base.++ GHC.IO.Handle.Types.$fShowBufferMode3 sat_s8aco;
        };

GHC.IO.Handle.Types.$fShowBufferMode1
  :: GHC.IO.Handle.Types.BufferMode -> GHC.Show.ShowS
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.IO.Handle.Types.$fShowBufferMode_$cshowsPrec
            GHC.IO.Handle.Types.$fShowBufferMode2 eta_B1;

GHC.IO.Handle.Types.$fShowBufferMode_$cshowList
  :: [GHC.IO.Handle.Types.BufferMode] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s8acp s_s8acq]
        GHC.Show.showList__
            GHC.IO.Handle.Types.$fShowBufferMode1 ls_s8acp s_s8acq;

GHC.IO.Handle.Types.$fShowBufferMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Handle.Types.BufferMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Handle.Types.$fShowBufferMode_$cshowsPrec
                                    GHC.IO.Handle.Types.$fShowBufferMode_$cshow
                                    GHC.IO.Handle.Types.$fShowBufferMode_$cshowList];

GHC.IO.Handle.Types.$fReadBufferMode11
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Handle.Types.BufferMode
         -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s8acr k_s8acs] k_s8acs GHC.IO.Handle.Types.NoBuffering;

GHC.IO.Handle.Types.$fReadBufferMode10
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.IO.Handle.Types.BufferMode)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.Handle.Types.$fReadBufferMode12
                        GHC.IO.Handle.Types.$fReadBufferMode11];

GHC.IO.Handle.Types.$fReadBufferMode7
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Handle.Types.BufferMode
         -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s8act k_s8acu] k_s8acu GHC.IO.Handle.Types.LineBuffering;

GHC.IO.Handle.Types.$fReadBufferMode6
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.IO.Handle.Types.BufferMode)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.Handle.Types.$fReadBufferMode8
                        GHC.IO.Handle.Types.$fReadBufferMode7];

GHC.IO.Handle.Types.$fReadBufferMode5
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec
         GHC.IO.Handle.Types.BufferMode)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Handle.Types.$fReadBufferMode6
                      GHC.Types.[]];

GHC.IO.Handle.Types.$fReadBufferMode_sps
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec
         GHC.IO.Handle.Types.BufferMode)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Handle.Types.$fReadBufferMode10
                      GHC.IO.Handle.Types.$fReadBufferMode5];

GHC.IO.Handle.Types.$fReadBufferMode4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BlockBuffering"#;

GHC.IO.Handle.Types.$fReadBufferMode3 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadBufferMode4;

GHC.IO.Handle.Types.$fReadBufferMode_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Ident! [GHC.IO.Handle.Types.$fReadBufferMode3];

GHC.IO.Handle.Types.$fReadBufferMode2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP
          GHC.IO.Handle.Types.BufferMode
[GblId, Arity=1, Str=<L,U(U)>, Unf=OtherCon []] =
    [] \r [n_s8acv]
        let {
          ds2_s8acw [Occ=OnceL, Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadP
                 GHC.IO.Handle.Types.BufferMode
          [LclId] =
              [n_s8acv] \u []
                  GHC.Read.choose2
                      GHC.IO.Handle.Types.$fReadBufferMode_sps n_s8acv; } in
        let {
          sat_s8acK [Occ=Once]
            :: forall b.
               (GHC.IO.Handle.Types.BufferMode
                -> Text.ParserCombinators.ReadP.P b)
               -> Text.ParserCombinators.ReadP.P b
          [LclId] =
              [n_s8acv ds2_s8acw] \r [k_s8acx]
                  let {
                    sat_s8acJ [Occ=Once] :: Text.ParserCombinators.ReadP.P b_i88Yk
                    [LclId] =
                        [n_s8acv k_s8acx] \u []
                            case n_s8acv of {
                              GHC.Types.I# x_s8acA [Occ=Once] ->
                                  case <=# [x_s8acA 10#] of {
                                    __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                    1# ->
                                        let {
                                          sat_s8acG [Occ=Once]
                                            :: () -> Text.ParserCombinators.ReadP.P b_i88Yk
                                          [LclId] =
                                              [k_s8acx] \r [a1_s8acC]
                                                  let {
                                                    sat_s8acF [Occ=Once]
                                                      :: GHC.Base.Maybe GHC.Types.Int
                                                         -> Text.ParserCombinators.ReadP.P b_i88Yk
                                                    [LclId] =
                                                        [k_s8acx] \r [a2_s8acD]
                                                            let {
                                                              sat_s8acE [Occ=Once]
                                                                :: GHC.IO.Handle.Types.BufferMode
                                                              [LclId] =
                                                                  CCCS GHC.IO.Handle.Types.BlockBuffering! [a2_s8acD];
                                                            } in  k_s8acx sat_s8acE;
                                                  } in 
                                                    GHC.Read.$fReadMaybe1
                                                        GHC.Read.$fReadInt
                                                        GHC.IO.Handle.Types.$fReadBufferMode_n
                                                        sat_s8acF;
                                        } in 
                                          case
                                              Text.Read.Lex.$wexpect
                                                  GHC.IO.Handle.Types.$fReadBufferMode_lexeme
                                                  sat_s8acG
                                          of
                                          { Unit# ww1_s8acI [Occ=Once] ->
                                                Text.ParserCombinators.ReadP.Look [ww1_s8acI];
                                          };
                                  };
                            };
                  } in 
                    case ds2_s8acw k_s8acx of sat_s8acy {
                      __DEFAULT ->
                          Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                              sat_s8acy sat_s8acJ;
                    };
        } in  sat_s8acK;

GHC.IO.Handle.Types.$fReadBufferMode1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Handle.Types.BufferMode
         -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.IO.Handle.Types.$fReadBufferMode2 eta_B2 eta_B1;

GHC.IO.Handle.Types.$fReadBufferMode_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS
          GHC.IO.Handle.Types.BufferMode
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s8acL]
        let {
          sat_s8acM [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.IO.Handle.Types.BufferMode
          [LclId] =
              [n_s8acL] \u []
                  GHC.Read.list3
                      GHC.IO.Handle.Types.$fReadBufferMode2
                      n_s8acL
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s8acM;

GHC.IO.Handle.Types.$fReadBufferMode_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec
       [GHC.IO.Handle.Types.BufferMode]
[GblId] =
    [] \u [] GHC.Read.list GHC.IO.Handle.Types.$fReadBufferMode1;

GHC.IO.Handle.Types.$fReadBufferMode14
  :: Text.ParserCombinators.ReadP.P [GHC.IO.Handle.Types.BufferMode]
[GblId] =
    [] \u []
        GHC.IO.Handle.Types.$fReadBufferMode_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.IO.Handle.Types.$fReadBufferMode_$creadList
  :: Text.ParserCombinators.ReadP.ReadS
       [GHC.IO.Handle.Types.BufferMode]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run
            GHC.IO.Handle.Types.$fReadBufferMode14 eta_B1;

GHC.IO.Handle.Types.$fReadBufferMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.IO.Handle.Types.BufferMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.IO.Handle.Types.$fReadBufferMode_$creadsPrec
                                    GHC.IO.Handle.Types.$fReadBufferMode_$creadList
                                    GHC.IO.Handle.Types.$fReadBufferMode1
                                    GHC.IO.Handle.Types.$fReadBufferMode_$creadListPrec];

GHC.IO.Handle.Types.$fOrdBufferMode_$c<
  :: GHC.IO.Handle.Types.BufferMode
     -> GHC.IO.Handle.Types.BufferMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8acN b_s8acO]
        case a_s8acN of {
          GHC.IO.Handle.Types.NoBuffering ->
              case b_s8acO of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Handle.Types.NoBuffering -> GHC.Types.False [];
              };
          GHC.IO.Handle.Types.LineBuffering ->
              case b_s8acO of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Handle.Types.BlockBuffering _ [Occ=Dead] ->
                    GHC.Types.True [];
              };
          GHC.IO.Handle.Types.BlockBuffering a1_s8acT [Occ=Once!] ->
              case b_s8acO of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Handle.Types.BlockBuffering b1_s8acV [Occ=Once*!] ->
                    case a1_s8acT of {
                      GHC.Base.Nothing ->
                          case b1_s8acV of {
                            GHC.Base.Nothing -> GHC.Types.False [];
                            GHC.Base.Just _ [Occ=Dead] -> GHC.Types.True [];
                          };
                      GHC.Base.Just a2_s8acZ [Occ=Once] ->
                          case b1_s8acV of {
                            GHC.Base.Nothing -> GHC.Types.False [];
                            GHC.Base.Just b2_s8ad1 [Occ=Once] ->
                                GHC.Classes.ltInt a2_s8acZ b2_s8ad1;
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fOrdBufferMode_$ccompare
  :: GHC.IO.Handle.Types.BufferMode
     -> GHC.IO.Handle.Types.BufferMode -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8ad2 b_s8ad3]
        case a_s8ad2 of {
          GHC.IO.Handle.Types.NoBuffering ->
              case b_s8ad3 of {
                __DEFAULT -> GHC.Types.LT [];
                GHC.IO.Handle.Types.NoBuffering -> GHC.Types.EQ [];
              };
          GHC.IO.Handle.Types.LineBuffering ->
              case b_s8ad3 of {
                GHC.IO.Handle.Types.NoBuffering -> GHC.Types.GT [];
                GHC.IO.Handle.Types.LineBuffering -> GHC.Types.EQ [];
                GHC.IO.Handle.Types.BlockBuffering _ [Occ=Dead] -> GHC.Types.LT [];
              };
          GHC.IO.Handle.Types.BlockBuffering a1_s8ad8 [Occ=Once!] ->
              case b_s8ad3 of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.IO.Handle.Types.BlockBuffering b1_s8ada [Occ=Once*!] ->
                    case a1_s8ad8 of {
                      GHC.Base.Nothing ->
                          case b1_s8ada of {
                            GHC.Base.Nothing -> GHC.Types.EQ [];
                            GHC.Base.Just _ [Occ=Dead] -> GHC.Types.LT [];
                          };
                      GHC.Base.Just a2_s8ade [Occ=Once] ->
                          case b1_s8ada of {
                            GHC.Base.Nothing -> GHC.Types.GT [];
                            GHC.Base.Just b2_s8adg [Occ=Once] ->
                                GHC.Classes.compareInt a2_s8ade b2_s8adg;
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fEqBufferMode_$c==
  :: GHC.IO.Handle.Types.BufferMode
     -> GHC.IO.Handle.Types.BufferMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s8adh ds1_s8adi]
        case ds_s8adh of {
          GHC.IO.Handle.Types.NoBuffering ->
              case ds1_s8adi of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Handle.Types.NoBuffering -> GHC.Types.True [];
              };
          GHC.IO.Handle.Types.LineBuffering ->
              case ds1_s8adi of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Handle.Types.LineBuffering -> GHC.Types.True [];
              };
          GHC.IO.Handle.Types.BlockBuffering a1_s8adm [Occ=Once!] ->
              case ds1_s8adi of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Handle.Types.BlockBuffering b1_s8ado [Occ=Once*!] ->
                    case a1_s8adm of {
                      GHC.Base.Nothing ->
                          case b1_s8ado of {
                            GHC.Base.Nothing -> GHC.Types.True [];
                            GHC.Base.Just _ [Occ=Dead] -> GHC.Types.False [];
                          };
                      GHC.Base.Just a2_s8ads [Occ=Once] ->
                          case b1_s8ado of {
                            GHC.Base.Nothing -> GHC.Types.False [];
                            GHC.Base.Just b2_s8adu [Occ=Once] ->
                                GHC.Classes.eqInt a2_s8ads b2_s8adu;
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fEqBufferMode_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.IO.Handle.Types.BufferMode
     -> GHC.IO.Handle.Types.BufferMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s8adv eta1_s8adw]
        case eta_s8adv of {
          GHC.IO.Handle.Types.NoBuffering ->
              case eta1_s8adw of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Handle.Types.NoBuffering -> GHC.Types.False [];
              };
          GHC.IO.Handle.Types.LineBuffering ->
              case eta1_s8adw of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Handle.Types.LineBuffering -> GHC.Types.False [];
              };
          GHC.IO.Handle.Types.BlockBuffering a1_s8adA [Occ=Once!] ->
              case eta1_s8adw of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Handle.Types.BlockBuffering b1_s8adC [Occ=Once*!] ->
                    case a1_s8adA of {
                      GHC.Base.Nothing ->
                          case b1_s8adC of {
                            GHC.Base.Nothing -> GHC.Types.False [];
                            GHC.Base.Just _ [Occ=Dead] -> GHC.Types.True [];
                          };
                      GHC.Base.Just a2_s8adG [Occ=Once!] ->
                          case b1_s8adC of {
                            GHC.Base.Nothing -> GHC.Types.True [];
                            GHC.Base.Just b2_s8adI [Occ=Once!] ->
                                case a2_s8adG of {
                                  GHC.Types.I# x_s8adK [Occ=Once] ->
                                      case b2_s8adI of {
                                        GHC.Types.I# y_s8adM [Occ=Once] ->
                                            case ==# [x_s8adK y_s8adM] of {
                                              __DEFAULT -> GHC.Types.True [];
                                              1# -> GHC.Types.False [];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fEqBufferMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.IO.Handle.Types.BufferMode
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.IO.Handle.Types.$fEqBufferMode_$c==
                                     GHC.IO.Handle.Types.$fEqBufferMode_$c/=];

GHC.IO.Handle.Types.$fOrdBufferMode_$c<=
  :: GHC.IO.Handle.Types.BufferMode
     -> GHC.IO.Handle.Types.BufferMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8adO b_s8adP]
        case b_s8adP of {
          GHC.IO.Handle.Types.NoBuffering ->
              case a_s8adO of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Handle.Types.NoBuffering -> GHC.Types.True [];
              };
          GHC.IO.Handle.Types.LineBuffering ->
              case a_s8adO of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Handle.Types.BlockBuffering _ [Occ=Dead] ->
                    GHC.Types.False [];
              };
          GHC.IO.Handle.Types.BlockBuffering a1_s8adU [Occ=Once!] ->
              case a_s8adO of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Handle.Types.BlockBuffering b1_s8adW [Occ=Once*!] ->
                    case a1_s8adU of {
                      GHC.Base.Nothing ->
                          case b1_s8adW of {
                            GHC.Base.Nothing -> GHC.Types.True [];
                            GHC.Base.Just _ [Occ=Dead] -> GHC.Types.False [];
                          };
                      GHC.Base.Just a2_s8ae0 [Occ=Once!] ->
                          case b1_s8adW of {
                            GHC.Base.Nothing -> GHC.Types.True [];
                            GHC.Base.Just b2_s8ae2 [Occ=Once!] ->
                                case a2_s8ae0 of {
                                  GHC.Types.I# x_s8ae4 [Occ=Once] ->
                                      case b2_s8ae2 of {
                                        GHC.Types.I# y_s8ae6 [Occ=Once] ->
                                            case <# [x_s8ae4 y_s8ae6] of {
                                              __DEFAULT -> GHC.Types.True [];
                                              1# -> GHC.Types.False [];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fOrdBufferMode_$cmax
  :: GHC.IO.Handle.Types.BufferMode
     -> GHC.IO.Handle.Types.BufferMode -> GHC.IO.Handle.Types.BufferMode
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s8ae8 y_s8ae9]
        case y_s8ae9 of wild_s8aea {
          GHC.IO.Handle.Types.NoBuffering -> x_s8ae8;
          GHC.IO.Handle.Types.LineBuffering ->
              case x_s8ae8 of wild1_s8aeb {
                __DEFAULT -> GHC.IO.Handle.Types.LineBuffering [];
                GHC.IO.Handle.Types.BlockBuffering _ [Occ=Dead] -> wild1_s8aeb;
              };
          GHC.IO.Handle.Types.BlockBuffering a1_s8aed [Occ=Once!] ->
              case x_s8ae8 of wild1_s8aee {
                __DEFAULT -> wild_s8aea;
                GHC.IO.Handle.Types.BlockBuffering b1_s8aef [Occ=Once*!] ->
                    case a1_s8aed of {
                      GHC.Base.Nothing ->
                          case b1_s8aef of {
                            GHC.Base.Nothing -> wild_s8aea;
                            GHC.Base.Just _ [Occ=Dead] -> wild1_s8aee;
                          };
                      GHC.Base.Just a2_s8aej [Occ=Once!] ->
                          case b1_s8aef of {
                            GHC.Base.Nothing -> wild_s8aea;
                            GHC.Base.Just b2_s8ael [Occ=Once!] ->
                                case a2_s8aej of {
                                  GHC.Types.I# x1_s8aen [Occ=Once] ->
                                      case b2_s8ael of {
                                        GHC.Types.I# y1_s8aep [Occ=Once] ->
                                            case <# [x1_s8aen y1_s8aep] of {
                                              __DEFAULT -> wild_s8aea;
                                              1# -> wild1_s8aee;
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fOrdBufferMode_$c>=
  :: GHC.IO.Handle.Types.BufferMode
     -> GHC.IO.Handle.Types.BufferMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8aer b_s8aes]
        case a_s8aer of {
          GHC.IO.Handle.Types.NoBuffering ->
              case b_s8aes of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Handle.Types.NoBuffering -> GHC.Types.True [];
              };
          GHC.IO.Handle.Types.LineBuffering ->
              case b_s8aes of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Handle.Types.BlockBuffering _ [Occ=Dead] ->
                    GHC.Types.False [];
              };
          GHC.IO.Handle.Types.BlockBuffering a1_s8aex [Occ=Once!] ->
              case b_s8aes of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Handle.Types.BlockBuffering b1_s8aez [Occ=Once*!] ->
                    case a1_s8aex of {
                      GHC.Base.Nothing ->
                          case b1_s8aez of {
                            GHC.Base.Nothing -> GHC.Types.True [];
                            GHC.Base.Just _ [Occ=Dead] -> GHC.Types.False [];
                          };
                      GHC.Base.Just a2_s8aeD [Occ=Once!] ->
                          case b1_s8aez of {
                            GHC.Base.Nothing -> GHC.Types.True [];
                            GHC.Base.Just b2_s8aeF [Occ=Once!] ->
                                case a2_s8aeD of {
                                  GHC.Types.I# x_s8aeH [Occ=Once] ->
                                      case b2_s8aeF of {
                                        GHC.Types.I# y_s8aeJ [Occ=Once] ->
                                            case <# [x_s8aeH y_s8aeJ] of {
                                              __DEFAULT -> GHC.Types.True [];
                                              1# -> GHC.Types.False [];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fOrdBufferMode_$c>
  :: GHC.IO.Handle.Types.BufferMode
     -> GHC.IO.Handle.Types.BufferMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8aeL b_s8aeM]
        GHC.IO.Handle.Types.$fOrdBufferMode_$c< b_s8aeM a_s8aeL;

GHC.IO.Handle.Types.$fOrdBufferMode_$cmin
  :: GHC.IO.Handle.Types.BufferMode
     -> GHC.IO.Handle.Types.BufferMode -> GHC.IO.Handle.Types.BufferMode
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s8aeN y_s8aeO]
        case y_s8aeO of wild_s8aeP {
          GHC.IO.Handle.Types.NoBuffering ->
              case x_s8aeN of {
                __DEFAULT -> GHC.IO.Handle.Types.NoBuffering [];
              };
          GHC.IO.Handle.Types.LineBuffering ->
              case x_s8aeN of wild1_s8aeR {
                __DEFAULT -> wild1_s8aeR;
                GHC.IO.Handle.Types.BlockBuffering _ [Occ=Dead] ->
                    GHC.IO.Handle.Types.LineBuffering [];
              };
          GHC.IO.Handle.Types.BlockBuffering a1_s8aeT [Occ=Once!] ->
              case x_s8aeN of wild1_s8aeU {
                __DEFAULT -> wild1_s8aeU;
                GHC.IO.Handle.Types.BlockBuffering b1_s8aeV [Occ=Once*!] ->
                    case a1_s8aeT of {
                      GHC.Base.Nothing ->
                          case b1_s8aeV of {
                            GHC.Base.Nothing -> wild1_s8aeU;
                            GHC.Base.Just _ [Occ=Dead] -> wild_s8aeP;
                          };
                      GHC.Base.Just a2_s8aeZ [Occ=Once!] ->
                          case b1_s8aeV of {
                            GHC.Base.Nothing -> wild1_s8aeU;
                            GHC.Base.Just b2_s8af1 [Occ=Once!] ->
                                case a2_s8aeZ of {
                                  GHC.Types.I# x1_s8af3 [Occ=Once] ->
                                      case b2_s8af1 of {
                                        GHC.Types.I# y1_s8af5 [Occ=Once] ->
                                            case <# [x1_s8af3 y1_s8af5] of {
                                              __DEFAULT -> wild1_s8aeU;
                                              1# -> wild_s8aeP;
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fOrdBufferMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.IO.Handle.Types.BufferMode
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.IO.Handle.Types.$fEqBufferMode
                                      GHC.IO.Handle.Types.$fOrdBufferMode_$ccompare
                                      GHC.IO.Handle.Types.$fOrdBufferMode_$c<
                                      GHC.IO.Handle.Types.$fOrdBufferMode_$c<=
                                      GHC.IO.Handle.Types.$fOrdBufferMode_$c>
                                      GHC.IO.Handle.Types.$fOrdBufferMode_$c>=
                                      GHC.IO.Handle.Types.$fOrdBufferMode_$cmax
                                      GHC.IO.Handle.Types.$fOrdBufferMode_$cmin];

GHC.IO.Handle.Types.haOtherSide
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s8af7]
        case ds_s8af7 of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds9_s8afo [Occ=Once] ->
              ds9_s8afo;
        };

GHC.IO.Handle.Types.haOutputNL
  :: GHC.IO.Handle.Types.Handle__ -> GHC.IO.Handle.Types.Newline
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s8afp]
        case ds_s8afp of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds8_s8afF [Occ=Once]
                                       _ [Occ=Dead] ->
              ds8_s8afF;
        };

GHC.IO.Handle.Types.haInputNL
  :: GHC.IO.Handle.Types.Handle__ -> GHC.IO.Handle.Types.Newline
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s8afH]
        case ds_s8afH of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds7_s8afW [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              ds7_s8afW;
        };

GHC.IO.Handle.Types.haCodec
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s8afZ]
        case ds_s8afZ of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds6_s8agd [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              ds6_s8agd;
        };

GHC.IO.Handle.Types.haDecoder :: ()
[GblId[[RecSel(naughty)]], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE ()! [];

GHC.IO.Handle.Types.haEncoder :: ()
[GblId[[RecSel(naughty)]], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE ()! [];

GHC.IO.Handle.Types.haBuffers
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IORef.IORef
          (GHC.IO.Handle.Types.BufferList GHC.IO.Buffer.CharBufElem)
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>m,
 Unf=OtherCon []] =
    [] \r [ds_s8agh]
        case ds_s8agh of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       dt3_s8ags [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              GHC.STRef.STRef [dt3_s8ags];
        };

GHC.IO.Handle.Types.haCharBuffer
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IORef.IORef (GHC.IO.Buffer.Buffer GHC.IO.Buffer.CharBufElem)
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>m,
 Unf=OtherCon []] =
    [] \r [ds_s8agz]
        case ds_s8agz of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       dt2_s8agJ [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              GHC.STRef.STRef [dt2_s8agJ];
        };

GHC.IO.Handle.Types.haLastDecode :: ()
[GblId[[RecSel(naughty)]], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE ()! [];

GHC.IO.Handle.Types.haBufferMode
  :: GHC.IO.Handle.Types.Handle__ -> GHC.IO.Handle.Types.BufferMode
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s8agR]
        case ds_s8agR of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds3_s8agZ [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              ds3_s8agZ;
        };

GHC.IO.Handle.Types.haByteBuffer
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IORef.IORef (GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>m,
 Unf=OtherCon []] =
    [] \r [ds_s8ah9]
        case ds_s8ah9 of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       dt_s8ahg [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              GHC.STRef.STRef [dt_s8ahg];
        };

GHC.IO.Handle.Types.haType
  :: GHC.IO.Handle.Types.Handle__ -> GHC.IO.Handle.Types.HandleType
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s8ahr]
        case ds_s8ahr of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds2_s8ahx [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              ds2_s8ahx;
        };

GHC.IO.Handle.Types.haDevice :: ()
[GblId[[RecSel(naughty)]], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE ()! [];

GHC.IO.Handle.Types.outputNL
  :: GHC.IO.Handle.Types.NewlineMode -> GHC.IO.Handle.Types.Newline
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LS),1*U(A,1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_s8ahJ]
        case ds_s8ahJ of {
          GHC.IO.Handle.Types.NewlineMode _ [Occ=Dead]
                                          ds2_s8ahM [Occ=Once] ->
              ds2_s8ahM;
        };

GHC.IO.Handle.Types.inputNL
  :: GHC.IO.Handle.Types.NewlineMode -> GHC.IO.Handle.Types.Newline
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,A)>,
 Unf=OtherCon []] =
    [] \r [ds_s8ahN]
        case ds_s8ahN of {
          GHC.IO.Handle.Types.NewlineMode ds1_s8ahP [Occ=Once]
                                          _ [Occ=Dead] ->
              ds1_s8ahP;
        };

GHC.IO.Handle.Types.isReadableHandleType
  :: GHC.IO.Handle.Types.HandleType -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s8ahR]
        case ds_s8ahR of {
          __DEFAULT -> GHC.Types.False [];
          GHC.IO.Handle.Types.ReadHandle -> GHC.Types.True [];
          GHC.IO.Handle.Types.ReadWriteHandle -> GHC.Types.True [];
        };

GHC.IO.Handle.Types.isWritableHandleType
  :: GHC.IO.Handle.Types.HandleType -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s8ahT]
        case ds_s8ahT of {
          __DEFAULT -> GHC.Types.False [];
          GHC.IO.Handle.Types.WriteHandle -> GHC.Types.True [];
          GHC.IO.Handle.Types.AppendHandle -> GHC.Types.True [];
          GHC.IO.Handle.Types.ReadWriteHandle -> GHC.Types.True [];
        };

GHC.IO.Handle.Types.isReadWriteHandleType
  :: GHC.IO.Handle.Types.HandleType -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s8ahV]
        case ds_s8ahV of {
          __DEFAULT -> GHC.Types.False [];
          GHC.IO.Handle.Types.ReadWriteHandle -> GHC.Types.True [];
        };

GHC.IO.Handle.Types.nativeNewline :: GHC.IO.Handle.Types.Newline
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.LF! [];

GHC.IO.Handle.Types.universalNewlineMode
  :: GHC.IO.Handle.Types.NewlineMode
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.NewlineMode! [GHC.IO.Handle.Types.CRLF
                                                    GHC.IO.Handle.Types.LF];

GHC.IO.Handle.Types.nativeNewlineMode
  :: GHC.IO.Handle.Types.NewlineMode
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.NewlineMode! [GHC.IO.Handle.Types.LF
                                                    GHC.IO.Handle.Types.LF];

GHC.IO.Handle.Types.noNewlineTranslation
  :: GHC.IO.Handle.Types.NewlineMode
[GblId, Str=m, Unf=OtherCon []] =
    [] \u [] GHC.IO.Handle.Types.nativeNewlineMode;

GHC.IO.Handle.Types.showHandle1 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "{handle: "#;

GHC.IO.Handle.Types.showHandle
  :: GHC.IO.FilePath -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [file_s8ahX eta_s8ahY]
        let {
          sat_s8ai0 [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [file_s8ahX eta_s8ahY] \u []
                  let {
                    sat_s8ahZ [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                    [LclId] =
                        [eta_s8ahY] \s []
                            GHC.CString.unpackAppendCString#
                                GHC.IO.Handle.Types.$fReadNewlineMode5 eta_s8ahY;
                  } in  GHC.Base.++ file_s8ahX sat_s8ahZ;
        } in 
          GHC.CString.unpackAppendCString#
              GHC.IO.Handle.Types.showHandle1 sat_s8ai0;

GHC.IO.Handle.Types.$fShowHandle_$cshowsPrec
  :: GHC.Types.Int -> GHC.IO.Handle.Types.Handle -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_s8ai1 ds1_s8ai2 eta_s8ai3]
        case ds1_s8ai2 of {
          GHC.IO.Handle.Types.FileHandle file_s8ai5 [Occ=Once]
                                         _ [Occ=Dead] ->
              GHC.IO.Handle.Types.showHandle file_s8ai5 eta_s8ai3;
          GHC.IO.Handle.Types.DuplexHandle file_s8ai7 [Occ=Once]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              GHC.IO.Handle.Types.showHandle file_s8ai7 eta_s8ai3;
        };

GHC.IO.Handle.Types.$fShowHandle_$cshow
  :: GHC.IO.Handle.Types.Handle -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s8aia]
        case x_s8aia of {
          GHC.IO.Handle.Types.FileHandle file_s8aic [Occ=Once]
                                         _ [Occ=Dead] ->
              let {
                sat_s8aie [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [file_s8aic] \u []
                        GHC.Base.++ file_s8aic GHC.IO.Handle.Types.$fReadNewlineMode4;
              } in 
                GHC.CString.unpackAppendCString#
                    GHC.IO.Handle.Types.showHandle1 sat_s8aie;
          GHC.IO.Handle.Types.DuplexHandle file_s8aif [Occ=Once]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              let {
                sat_s8aii [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [file_s8aif] \u []
                        GHC.Base.++ file_s8aif GHC.IO.Handle.Types.$fReadNewlineMode4;
              } in 
                GHC.CString.unpackAppendCString#
                    GHC.IO.Handle.Types.showHandle1 sat_s8aii;
        };

GHC.IO.Handle.Types.$fShowHandle1
  :: GHC.IO.Handle.Types.Handle -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_s8aij eta_s8aik]
        case ds_s8aij of {
          GHC.IO.Handle.Types.FileHandle file_s8aim [Occ=Once]
                                         _ [Occ=Dead] ->
              GHC.IO.Handle.Types.showHandle file_s8aim eta_s8aik;
          GHC.IO.Handle.Types.DuplexHandle file_s8aio [Occ=Once]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              GHC.IO.Handle.Types.showHandle file_s8aio eta_s8aik;
        };

GHC.IO.Handle.Types.$fShowHandle_$cshowList
  :: [GHC.IO.Handle.Types.Handle] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s8air s_s8ais]
        GHC.Show.showList__
            GHC.IO.Handle.Types.$fShowHandle1 ls_s8air s_s8ais;

GHC.IO.Handle.Types.$fShowHandle [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Handle.Types.Handle
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Handle.Types.$fShowHandle_$cshowsPrec
                                    GHC.IO.Handle.Types.$fShowHandle_$cshow
                                    GHC.IO.Handle.Types.$fShowHandle_$cshowList];

GHC.IO.Handle.Types.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.Handle.Types.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$trModule4];

GHC.IO.Handle.Types.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Handle.Types"#;

GHC.IO.Handle.Types.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$trModule2];

GHC.IO.Handle.Types.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Handle.Types.$trModule3
                                     GHC.IO.Handle.Types.$trModule1];

$krep_r8a59 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep1_r8a5a :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Encoding.Types.$tcTextEncoding
                                              GHC.Types.[]];

$krep2_r8a5b :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Word.$tcWord8
                                              GHC.Types.[]];

$krep3_r8a5c :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep4_r8a5d :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r8a59 GHC.Types.[]];

$krep5_r8a5e :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep4_r8a5d];

$krep6_r8a5f :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r8a5a GHC.Types.[]];

$krep7_r8a5g :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep6_r8a5f];

$krep8_r8a5h :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_r8a5c GHC.Types.[]];

$krep9_r8a5i :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Buffer.$tcBuffer
                                              $krep8_r8a5h];

$krep10_r8a5j :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep9_r8a5i GHC.Types.[]];

$krep11_r8a5k :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IORef.$tcIORef
                                              $krep10_r8a5j];

$krep12_r8a5l :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r8a5b GHC.Types.[]];

$krep13_r8a5m :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Buffer.$tcBuffer
                                              $krep12_r8a5l];

$krep14_r8a5n :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep13_r8a5m GHC.Types.[]];

$krep15_r8a5o :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IORef.$tcIORef
                                              $krep14_r8a5n];

$krep16_r8a5p :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep8_r8a5h];

$krep17_r8a5q :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [2#];

$krep18_r8a5r :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep17_r8a5q GHC.Types.[]];

$krep19_r8a5s :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_r8a5c $krep18_r8a5r];

$krep20_r8a5t :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r8a5b $krep19_r8a5s];

$krep21_r8a5u :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Encoding.Types.$tcBufferCodec
                                              $krep20_r8a5t];

$krep22_r8a5v :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep21_r8a5u GHC.Types.[]];

$krep23_r8a5w :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep22_r8a5v];

$krep24_r8a5x :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep17_r8a5q $krep14_r8a5n];

$krep25_r8a5y :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,)
                                              $krep24_r8a5x];

$krep26_r8a5z :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep25_r8a5y GHC.Types.[]];

$krep27_r8a5A :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IORef.$tcIORef
                                              $krep26_r8a5z];

$krep28_r8a5B :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [1#];

$krep29_r8a5C :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep28_r8a5B GHC.Types.[]];

$krep30_r8a5D :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r8a5b $krep29_r8a5C];

$krep31_r8a5E :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_r8a5c $krep30_r8a5D];

$krep32_r8a5F :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Encoding.Types.$tcBufferCodec
                                              $krep31_r8a5E];

$krep33_r8a5G :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep32_r8a5F GHC.Types.[]];

$krep34_r8a5H :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep33_r8a5G];

$krep35_r8a5I :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep36_r8a5J :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep35_r8a5I GHC.Types.[]];

$krep37_r8a5K :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.ForeignPtr.$tcForeignPtr
                                              $krep36_r8a5J];

$krep38_r8a5L :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Types.krep$* $krep36_r8a5J];

$krep39_r8a5M :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.Typeable.Internal.$tcTypeable
                                              $krep38_r8a5L];

$krep40_r8a5N :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Device.$tcIODevice
                                              $krep36_r8a5J];

$krep41_r8a5O :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.BufferedIO.$tcBufferedIO
                                              $krep36_r8a5J];

GHC.IO.Handle.Types.$tcBufferList2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BufferList"#;

GHC.IO.Handle.Types.$tcBufferList1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tcBufferList2];

GHC.IO.Handle.Types.$tcBufferList :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16602278556585116844##
                                    18164509953320487254##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tcBufferList1
                                    0#
                                    GHC.Types.krep$*Arr*];

GHC.IO.Handle.Types.$tc'BufferListNil1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcBufferList
                                              $krep36_r8a5J];

GHC.IO.Handle.Types.$tc'BufferListNil3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BufferListNil"#;

GHC.IO.Handle.Types.$tc'BufferListNil2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'BufferListNil3];

GHC.IO.Handle.Types.$tc'BufferListNil :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1776148480580179033##
                                    13181184993065174936##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'BufferListNil2
                                    1#
                                    GHC.IO.Handle.Types.$tc'BufferListNil1];

$krep42_r8a5P :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.IO.Handle.Types.$tc'BufferListNil1
                                         GHC.IO.Handle.Types.$tc'BufferListNil1];

GHC.IO.Handle.Types.$tc'BufferListCons1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep37_r8a5K $krep42_r8a5P];

GHC.IO.Handle.Types.$tc'BufferListCons3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BufferListCons"#;

GHC.IO.Handle.Types.$tc'BufferListCons2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'BufferListCons3];

GHC.IO.Handle.Types.$tc'BufferListCons :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17252346539814354939##
                                    274626690118510806##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'BufferListCons2
                                    1#
                                    GHC.IO.Handle.Types.$tc'BufferListCons1];

$krep43_r8a5Q :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcBufferList
                                              $krep8_r8a5h];

$krep44_r8a5R :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep43_r8a5Q GHC.Types.[]];

$krep45_r8a5S :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IORef.$tcIORef
                                              $krep44_r8a5R];

GHC.IO.Handle.Types.$tcHandleType2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "HandleType"#;

GHC.IO.Handle.Types.$tcHandleType1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tcHandleType2];

GHC.IO.Handle.Types.$tcHandleType :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12652050740177317592##
                                    15012172050125063359##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tcHandleType1
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.Handle.Types.$tc'AppendHandle1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcHandleType
                                              GHC.Types.[]];

GHC.IO.Handle.Types.$tc'ClosedHandle2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ClosedHandle"#;

GHC.IO.Handle.Types.$tc'ClosedHandle1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'ClosedHandle2];

GHC.IO.Handle.Types.$tc'ClosedHandle :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3827246897052092772##
                                    908733983357893198##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'ClosedHandle1
                                    0#
                                    GHC.IO.Handle.Types.$tc'AppendHandle1];

GHC.IO.Handle.Types.$tc'SemiClosedHandle2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'SemiClosedHandle"#;

GHC.IO.Handle.Types.$tc'SemiClosedHandle1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'SemiClosedHandle2];

GHC.IO.Handle.Types.$tc'SemiClosedHandle :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9212351547956271402##
                                    6570718180183054490##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'SemiClosedHandle1
                                    0#
                                    GHC.IO.Handle.Types.$tc'AppendHandle1];

GHC.IO.Handle.Types.$tc'ReadHandle2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ReadHandle"#;

GHC.IO.Handle.Types.$tc'ReadHandle1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'ReadHandle2];

GHC.IO.Handle.Types.$tc'ReadHandle :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [269968663592081974##
                                    17473723309710900549##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'ReadHandle1
                                    0#
                                    GHC.IO.Handle.Types.$tc'AppendHandle1];

GHC.IO.Handle.Types.$tc'WriteHandle2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'WriteHandle"#;

GHC.IO.Handle.Types.$tc'WriteHandle1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'WriteHandle2];

GHC.IO.Handle.Types.$tc'WriteHandle :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [18024523813608199082##
                                    4783872735135983851##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'WriteHandle1
                                    0#
                                    GHC.IO.Handle.Types.$tc'AppendHandle1];

GHC.IO.Handle.Types.$tc'AppendHandle3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'AppendHandle"#;

GHC.IO.Handle.Types.$tc'AppendHandle2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'AppendHandle3];

GHC.IO.Handle.Types.$tc'AppendHandle :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [18423480119042393547##
                                    8911069045719960050##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'AppendHandle2
                                    0#
                                    GHC.IO.Handle.Types.$tc'AppendHandle1];

GHC.IO.Handle.Types.$tc'ReadWriteHandle2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ReadWriteHandle"#;

GHC.IO.Handle.Types.$tc'ReadWriteHandle1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'ReadWriteHandle2];

GHC.IO.Handle.Types.$tc'ReadWriteHandle :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6962298179673541916##
                                    7858738479804269456##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'ReadWriteHandle1
                                    0#
                                    GHC.IO.Handle.Types.$tc'AppendHandle1];

GHC.IO.Handle.Types.$tcBufferMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BufferMode"#;

GHC.IO.Handle.Types.$tcBufferMode1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tcBufferMode2];

GHC.IO.Handle.Types.$tcBufferMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2181253694666364469##
                                    18094997560331273583##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tcBufferMode1
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.Handle.Types.$tc'LineBuffering1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcBufferMode
                                              GHC.Types.[]];

GHC.IO.Handle.Types.$tc'NoBuffering2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'NoBuffering"#;

GHC.IO.Handle.Types.$tc'NoBuffering1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'NoBuffering2];

GHC.IO.Handle.Types.$tc'NoBuffering :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1829914617507863771##
                                    11519122601481432262##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'NoBuffering1
                                    0#
                                    GHC.IO.Handle.Types.$tc'LineBuffering1];

GHC.IO.Handle.Types.$tc'LineBuffering3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'LineBuffering"#;

GHC.IO.Handle.Types.$tc'LineBuffering2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'LineBuffering3];

GHC.IO.Handle.Types.$tc'LineBuffering :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6417231512954421547##
                                    14761155862500981941##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'LineBuffering2
                                    0#
                                    GHC.IO.Handle.Types.$tc'LineBuffering1];

GHC.IO.Handle.Types.$tc'BlockBuffering1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep5_r8a5e
                                         GHC.IO.Handle.Types.$tc'LineBuffering1];

GHC.IO.Handle.Types.$tc'BlockBuffering3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BlockBuffering"#;

GHC.IO.Handle.Types.$tc'BlockBuffering2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'BlockBuffering3];

GHC.IO.Handle.Types.$tc'BlockBuffering :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [704611490471072872##
                                    15656058643765081689##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'BlockBuffering2
                                    0#
                                    GHC.IO.Handle.Types.$tc'BlockBuffering1];

GHC.IO.Handle.Types.$tcNewline2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Newline"#;

GHC.IO.Handle.Types.$tcNewline1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tcNewline2];

GHC.IO.Handle.Types.$tcNewline :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4144517894815066994##
                                    10872055347860317487##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tcNewline1
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.Handle.Types.$tc'CRLF1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcNewline
                                              GHC.Types.[]];

GHC.IO.Handle.Types.$tc'LF2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'LF"#;

GHC.IO.Handle.Types.$tc'LF1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'LF2];

GHC.IO.Handle.Types.$tc'LF :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [8352565500432618804##
                                    14951155965269318914##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'LF1
                                    0#
                                    GHC.IO.Handle.Types.$tc'CRLF1];

GHC.IO.Handle.Types.$tc'CRLF3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'CRLF"#;

GHC.IO.Handle.Types.$tc'CRLF2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'CRLF3];

GHC.IO.Handle.Types.$tc'CRLF :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12041259567283068515##
                                    3210182148185771829##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'CRLF2
                                    0#
                                    GHC.IO.Handle.Types.$tc'CRLF1];

GHC.IO.Handle.Types.$tcHandle__2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Handle__"#;

GHC.IO.Handle.Types.$tcHandle__1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tcHandle__2];

GHC.IO.Handle.Types.$tcHandle__ :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [10675922960094776064##
                                    10563785792974977547##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tcHandle__1
                                    0#
                                    GHC.Types.krep$*];

$krep46_r8a5T :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcHandle__
                                              GHC.Types.[]];

$krep47_r8a5U :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep46_r8a5T GHC.Types.[]];

$krep48_r8a5V :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.MVar.$tcMVar
                                              $krep47_r8a5U];

$krep49_r8a5W :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep48_r8a5V GHC.Types.[]];

$krep50_r8a5X :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep49_r8a5W];

$krep51_r8a5Y :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep50_r8a5X $krep46_r8a5T];

$krep52_r8a5Z :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.IO.Handle.Types.$tc'CRLF1
                                         $krep51_r8a5Y];

$krep53_r8a60 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.IO.Handle.Types.$tc'CRLF1
                                         $krep52_r8a5Z];

$krep54_r8a61 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep7_r8a5g $krep53_r8a60];

$krep55_r8a62 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep23_r8a5w $krep54_r8a61];

$krep56_r8a63 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep34_r8a5H $krep55_r8a62];

$krep57_r8a64 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep45_r8a5S $krep56_r8a63];

$krep58_r8a65 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep11_r8a5k $krep57_r8a64];

$krep59_r8a66 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep27_r8a5A $krep58_r8a65];

$krep60_r8a67 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.IO.Handle.Types.$tc'LineBuffering1
                                         $krep59_r8a66];

$krep61_r8a68 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep15_r8a5o $krep60_r8a67];

$krep62_r8a69 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.IO.Handle.Types.$tc'AppendHandle1
                                         $krep61_r8a68];

$krep63_r8a6a :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep35_r8a5I $krep62_r8a69];

$krep64_r8a6b :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep39_r8a5M $krep63_r8a6a];

$krep65_r8a6c :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep41_r8a5O $krep64_r8a6b];

GHC.IO.Handle.Types.$tc'Handle__1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep40_r8a5N $krep65_r8a6c];

GHC.IO.Handle.Types.$tc'Handle__3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Handle__"#;

GHC.IO.Handle.Types.$tc'Handle__2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'Handle__3];

GHC.IO.Handle.Types.$tc'Handle__ :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15400920814375205416##
                                    14458810719499819570##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'Handle__2
                                    3#
                                    GHC.IO.Handle.Types.$tc'Handle__1];

GHC.IO.Handle.Types.$tcHandle2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Handle"#;

GHC.IO.Handle.Types.$tcHandle1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tcHandle2];

GHC.IO.Handle.Types.$tcHandle :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6808292778723485333##
                                    9239299165073943659##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tcHandle1
                                    0#
                                    GHC.Types.krep$*];

$krep66_r8a6d :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcHandle
                                              GHC.Types.[]];

$krep67_r8a6e :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep48_r8a5V $krep66_r8a6d];

$krep68_r8a6f :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep48_r8a5V $krep67_r8a6e];

GHC.IO.Handle.Types.$tc'DuplexHandle1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep16_r8a5p $krep68_r8a6f];

GHC.IO.Handle.Types.$tc'DuplexHandle3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'DuplexHandle"#;

GHC.IO.Handle.Types.$tc'DuplexHandle2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'DuplexHandle3];

GHC.IO.Handle.Types.$tc'DuplexHandle :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [477065760828861081##
                                    4557316572761143129##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'DuplexHandle2
                                    0#
                                    GHC.IO.Handle.Types.$tc'DuplexHandle1];

GHC.IO.Handle.Types.$tc'FileHandle1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep16_r8a5p $krep67_r8a6e];

GHC.IO.Handle.Types.$tc'FileHandle3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'FileHandle"#;

GHC.IO.Handle.Types.$tc'FileHandle2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'FileHandle3];

GHC.IO.Handle.Types.$tc'FileHandle :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [5544613225695748436##
                                    8829945929965735507##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'FileHandle2
                                    0#
                                    GHC.IO.Handle.Types.$tc'FileHandle1];

GHC.IO.Handle.Types.$tcNewlineMode1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$fReadNewlineMode17];

GHC.IO.Handle.Types.$tcNewlineMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17953040817059389032##
                                    12498949339099960838##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tcNewlineMode1
                                    0#
                                    GHC.Types.krep$*];

$krep69_r8a6g :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcNewlineMode
                                              GHC.Types.[]];

$krep70_r8a6h :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.IO.Handle.Types.$tc'CRLF1
                                         $krep69_r8a6g];

GHC.IO.Handle.Types.$tc'NewlineMode1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.IO.Handle.Types.$tc'CRLF1
                                         $krep70_r8a6h];

GHC.IO.Handle.Types.$tc'NewlineMode3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'NewlineMode"#;

GHC.IO.Handle.Types.$tc'NewlineMode2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'NewlineMode3];

GHC.IO.Handle.Types.$tc'NewlineMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4266278501114659446##
                                    17947462423734457010##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'NewlineMode2
                                    0#
                                    GHC.IO.Handle.Types.$tc'NewlineMode1];

GHC.IO.Handle.Types.checkHandleInvariants1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><S,U>, Unf=OtherCon []] =
    [] \r [ds_s8ait s_s8aiu] (#,#) [s_s8aiu GHC.Tuple.()];

GHC.IO.Handle.Types.checkHandleInvariants
  :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.IO.Handle.Types.checkHandleInvariants1 eta_B2 eta_B1;

GHC.IO.Handle.Types.NewlineMode
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.IO.Handle.Types.NewlineMode
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.IO.Handle.Types.NewlineMode [eta_B2 eta_B1];

GHC.IO.Handle.Types.LF :: GHC.IO.Handle.Types.Newline
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.LF! [];

GHC.IO.Handle.Types.CRLF :: GHC.IO.Handle.Types.Newline
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.CRLF! [];

GHC.IO.Handle.Types.NoBuffering :: GHC.IO.Handle.Types.BufferMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.NoBuffering! [];

GHC.IO.Handle.Types.LineBuffering :: GHC.IO.Handle.Types.BufferMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.LineBuffering! [];

GHC.IO.Handle.Types.BlockBuffering
  :: GHC.Base.Maybe GHC.Types.Int -> GHC.IO.Handle.Types.BufferMode
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m3,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.IO.Handle.Types.BlockBuffering [eta_B1];

GHC.IO.Handle.Types.ClosedHandle :: GHC.IO.Handle.Types.HandleType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.ClosedHandle! [];

GHC.IO.Handle.Types.SemiClosedHandle
  :: GHC.IO.Handle.Types.HandleType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.SemiClosedHandle! [];

GHC.IO.Handle.Types.ReadHandle :: GHC.IO.Handle.Types.HandleType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.ReadHandle! [];

GHC.IO.Handle.Types.WriteHandle :: GHC.IO.Handle.Types.HandleType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.WriteHandle! [];

GHC.IO.Handle.Types.AppendHandle :: GHC.IO.Handle.Types.HandleType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.AppendHandle! [];

GHC.IO.Handle.Types.ReadWriteHandle
  :: GHC.IO.Handle.Types.HandleType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.ReadWriteHandle! [];

GHC.IO.Handle.Types.BufferListNil
  :: forall e. GHC.IO.Handle.Types.BufferList e
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.BufferListNil! [];

GHC.IO.Handle.Types.BufferListCons
  :: forall e.
     GHC.IO.Buffer.RawBuffer e
     -> GHC.IO.Handle.Types.BufferList e
     -> GHC.IO.Handle.Types.BufferList e
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.IO.Handle.Types.BufferListCons [eta_B2 eta_B1];

GHC.IO.Handle.Types.Handle__
  :: forall dev enc_state dec_state.
     (GHC.IO.Device.IODevice dev, GHC.IO.BufferedIO.BufferedIO dev,
      Data.Typeable.Internal.Typeable dev) =>
     dev
     -> GHC.IO.Handle.Types.HandleType
     -> GHC.Prim.MutVar#
          GHC.Prim.RealWorld (GHC.IO.Buffer.Buffer GHC.Word.Word8)
     -> GHC.IO.Handle.Types.BufferMode
     -> GHC.Prim.MutVar#
          GHC.Prim.RealWorld (dec_state, GHC.IO.Buffer.Buffer GHC.Word.Word8)
     -> GHC.Prim.MutVar#
          GHC.Prim.RealWorld (GHC.IO.Buffer.Buffer GHC.IO.Buffer.CharBufElem)
     -> GHC.Prim.MutVar#
          GHC.Prim.RealWorld
          (GHC.IO.Handle.Types.BufferList GHC.IO.Buffer.CharBufElem)
     -> GHC.Base.Maybe (GHC.IO.Encoding.Types.TextEncoder enc_state)
     -> GHC.Base.Maybe (GHC.IO.Encoding.Types.TextDecoder dec_state)
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
     -> GHC.IO.Handle.Types.Handle__
[GblId[DataCon],
 Arity=16,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_Bg
           eta_Bf
           eta_Be
           eta_Bd
           eta_Bc
           eta_Bb
           eta_Ba
           eta_B9
           eta_B8
           eta_B7
           eta_B6
           eta_B5
           eta_B4
           eta_B3
           eta_B2
           eta_B1]
        GHC.IO.Handle.Types.Handle__ [eta_Bg
                                      eta_Bf
                                      eta_Be
                                      eta_Bd
                                      eta_Bc
                                      eta_Bb
                                      eta_Ba
                                      eta_B9
                                      eta_B8
                                      eta_B7
                                      eta_B6
                                      eta_B5
                                      eta_B4
                                      eta_B3
                                      eta_B2
                                      eta_B1];

GHC.IO.Handle.Types.FileHandle
  :: GHC.IO.FilePath
     -> GHC.Prim.MVar# GHC.Prim.RealWorld GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Handle.Types.Handle
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m1,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.IO.Handle.Types.FileHandle [eta_B2 eta_B1];

GHC.IO.Handle.Types.DuplexHandle
  :: GHC.IO.FilePath
     -> GHC.Prim.MVar# GHC.Prim.RealWorld GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.MVar# GHC.Prim.RealWorld GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Handle.Types.Handle
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.Types.DuplexHandle [eta_B3 eta_B2 eta_B1];


==================== STG syntax: ====================
2018-03-16 16:03:16.485224214 UTC

GHC.IO.Handle.Types.$WHandle__ [InlPrag=INLINE[2]]
  :: forall dev enc_state dec_state.
     (GHC.IO.Device.IODevice dev, GHC.IO.BufferedIO.BufferedIO dev,
      Data.Typeable.Internal.Typeable dev) =>
     dev
     -> GHC.IO.Handle.Types.HandleType
     -> GHC.IORef.IORef (GHC.IO.Buffer.Buffer GHC.Word.Word8)
     -> GHC.IO.Handle.Types.BufferMode
     -> GHC.IORef.IORef (dec_state, GHC.IO.Buffer.Buffer GHC.Word.Word8)
     -> GHC.IORef.IORef (GHC.IO.Buffer.Buffer GHC.IO.Buffer.CharBufElem)
     -> GHC.IORef.IORef
          (GHC.IO.Handle.Types.BufferList GHC.IO.Buffer.CharBufElem)
     -> GHC.Base.Maybe (GHC.IO.Encoding.Types.TextEncoder enc_state)
     -> GHC.Base.Maybe (GHC.IO.Encoding.Types.TextDecoder dec_state)
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
     -> GHC.IO.Handle.Types.Handle__
[GblId[DataConWrapper],
 Arity=16,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><S,U><L,U><S,U><L,U><S,U><S,U><S,U><L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [dt_s8a6j
           dt_s8a6k
           dt_s8a6l
           dt_s8a6m
           dt_s8a6n
           dt_s8a6o
           dt_s8a6p
           dt_s8a6q
           dt_s8a6r
           dt_s8a6s
           dt_s8a6t
           dt_s8a6u
           dt_s8a6v
           dt_s8a6w
           dt_s8a6x
           dt_s8a6y]
        case dt_s8a6m of dt_s8a6z {
          __DEFAULT ->
              case dt_s8a6o of {
                GHC.STRef.STRef dt_s8a6B [Occ=Once] ->
                    case dt_s8a6q of {
                      GHC.STRef.STRef dt_s8a6D [Occ=Once] ->
                          case dt_s8a6r of {
                            GHC.STRef.STRef dt_s8a6F [Occ=Once] ->
                                case dt_s8a6s of {
                                  GHC.STRef.STRef dt_s8a6H [Occ=Once] ->
                                      GHC.IO.Handle.Types.Handle__ [dt_s8a6j
                                                                    dt_s8a6k
                                                                    dt_s8a6l
                                                                    dt_s8a6z
                                                                    dt_s8a6n
                                                                    dt_s8a6B
                                                                    dt_s8a6p
                                                                    dt_s8a6D
                                                                    dt_s8a6F
                                                                    dt_s8a6H
                                                                    dt_s8a6t
                                                                    dt_s8a6u
                                                                    dt_s8a6v
                                                                    dt_s8a6w
                                                                    dt_s8a6x
                                                                    dt_s8a6y];
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$WFileHandle [InlPrag=INLINE[2]]
  :: GHC.IO.FilePath
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Handle.Types.Handle
[GblId[DataConWrapper],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S,U>m1,
 Unf=OtherCon []] =
    [] \r [dt_s8a6I dt_s8a6J]
        case dt_s8a6J of {
          GHC.MVar.MVar dt_s8a6L [Occ=Once] ->
              GHC.IO.Handle.Types.FileHandle [dt_s8a6I dt_s8a6L];
        };

GHC.IO.Handle.Types.$WDuplexHandle [InlPrag=INLINE[2]]
  :: GHC.IO.FilePath
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Handle.Types.Handle
[GblId[DataConWrapper],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><S,U><S,U>m2,
 Unf=OtherCon []] =
    [] \r [dt_s8a6M dt_s8a6N dt_s8a6O]
        case dt_s8a6N of {
          GHC.MVar.MVar dt_s8a6Q [Occ=Once] ->
              case dt_s8a6O of {
                GHC.MVar.MVar dt_s8a6S [Occ=Once] ->
                    GHC.IO.Handle.Types.DuplexHandle [dt_s8a6M dt_s8a6Q dt_s8a6S];
              };
        };

GHC.IO.Handle.Types.$fShowHandleType12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "closed"#;

GHC.IO.Handle.Types.$fShowHandleType11 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fShowHandleType12;

GHC.IO.Handle.Types.$fShowHandleType10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "semi-closed"#;

GHC.IO.Handle.Types.$fShowHandleType9 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fShowHandleType10;

GHC.IO.Handle.Types.$fShowHandleType8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "readable"#;

GHC.IO.Handle.Types.$fShowHandleType7 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fShowHandleType8;

GHC.IO.Handle.Types.$fShowHandleType6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "writable"#;

GHC.IO.Handle.Types.$fShowHandleType5 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fShowHandleType6;

GHC.IO.Handle.Types.$fShowHandleType4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "writable (append)"#;

GHC.IO.Handle.Types.$fShowHandleType3 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fShowHandleType4;

GHC.IO.Handle.Types.$fShowHandleType2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "read-writable"#;

GHC.IO.Handle.Types.$fShowHandleType1 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fShowHandleType2;

GHC.IO.Handle.Types.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.HandleType
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s8a6T w1_s8a6U]
        case w_s8a6T of {
          GHC.IO.Handle.Types.ClosedHandle ->
              GHC.Base.++ GHC.IO.Handle.Types.$fShowHandleType11 w1_s8a6U;
          GHC.IO.Handle.Types.SemiClosedHandle ->
              GHC.Base.++ GHC.IO.Handle.Types.$fShowHandleType9 w1_s8a6U;
          GHC.IO.Handle.Types.ReadHandle ->
              GHC.Base.++ GHC.IO.Handle.Types.$fShowHandleType7 w1_s8a6U;
          GHC.IO.Handle.Types.WriteHandle ->
              GHC.Base.++ GHC.IO.Handle.Types.$fShowHandleType5 w1_s8a6U;
          GHC.IO.Handle.Types.AppendHandle ->
              GHC.Base.++ GHC.IO.Handle.Types.$fShowHandleType3 w1_s8a6U;
          GHC.IO.Handle.Types.ReadWriteHandle ->
              GHC.Base.++ GHC.IO.Handle.Types.$fShowHandleType1 w1_s8a6U;
        };

GHC.IO.Handle.Types.$fShowHandleType_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int
     -> GHC.IO.Handle.Types.HandleType -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s8a6W w1_s8a6X w2_s8a6Y]
        GHC.IO.Handle.Types.$w$cshowsPrec w1_s8a6X w2_s8a6Y;

GHC.IO.Handle.Types.$fShowHandleType_$cshow
  :: GHC.IO.Handle.Types.HandleType -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s8a6Z]
        case x_s8a6Z of {
          GHC.IO.Handle.Types.ClosedHandle ->
              GHC.IO.Handle.Types.$fShowHandleType11;
          GHC.IO.Handle.Types.SemiClosedHandle ->
              GHC.IO.Handle.Types.$fShowHandleType9;
          GHC.IO.Handle.Types.ReadHandle ->
              GHC.IO.Handle.Types.$fShowHandleType7;
          GHC.IO.Handle.Types.WriteHandle ->
              GHC.IO.Handle.Types.$fShowHandleType5;
          GHC.IO.Handle.Types.AppendHandle ->
              GHC.IO.Handle.Types.$fShowHandleType3;
          GHC.IO.Handle.Types.ReadWriteHandle ->
              GHC.IO.Handle.Types.$fShowHandleType1;
        };

GHC.IO.Handle.Types.$fShowHandleType_$cshowList
  :: [GHC.IO.Handle.Types.HandleType] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s8a71 s_s8a72]
        GHC.Show.showList__
            GHC.IO.Handle.Types.$w$cshowsPrec ls_s8a71 s_s8a72;

GHC.IO.Handle.Types.$fShowHandleType [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Handle.Types.HandleType
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Handle.Types.$fShowHandleType_$cshowsPrec
                                    GHC.IO.Handle.Types.$fShowHandleType_$cshow
                                    GHC.IO.Handle.Types.$fShowHandleType_$cshowList];

GHC.IO.Handle.Types.$fEqHandle_$c==
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Types.Handle -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s8a73 ds1_s8a74]
        case ds_s8a73 of {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_s8a77 [Occ=Once] ->
              case ds1_s8a74 of {
                GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt1_s8a7a [Occ=Once] ->
                    case sameMVar# [dt_s8a77 dt1_s8a7a] of sat_s8a7b {
                      __DEFAULT -> tagToEnum# [sat_s8a7b];
                    };
                GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead] ->
                    GHC.Types.False [];
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_s8a7g [Occ=Once]
                                           _ [Occ=Dead] ->
              case ds1_s8a74 of {
                GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] _ [Occ=Dead] ->
                    GHC.Types.False [];
                GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                 dt2_s8a7m [Occ=Once]
                                                 _ [Occ=Dead] ->
                    case sameMVar# [dt_s8a7g dt2_s8a7m] of sat_s8a7o {
                      __DEFAULT -> tagToEnum# [sat_s8a7o];
                    };
              };
        };

GHC.IO.Handle.Types.$fEqHandle_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Types.Handle -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s8a7p eta1_s8a7q]
        case eta_s8a7p of {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_s8a7t [Occ=Once] ->
              case eta1_s8a7q of {
                GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt1_s8a7w [Occ=Once] ->
                    case sameMVar# [dt_s8a7t dt1_s8a7w] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
                GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead] ->
                    GHC.Types.True [];
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_s8a7C [Occ=Once]
                                           _ [Occ=Dead] ->
              case eta1_s8a7q of {
                GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] _ [Occ=Dead] ->
                    GHC.Types.True [];
                GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                 dt2_s8a7I [Occ=Once]
                                                 _ [Occ=Dead] ->
                    case sameMVar# [dt_s8a7C dt2_s8a7I] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.IO.Handle.Types.$fEqHandle [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.IO.Handle.Types.Handle
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.IO.Handle.Types.$fEqHandle_$c==
                                     GHC.IO.Handle.Types.$fEqHandle_$c/=];

GHC.IO.Handle.Types.$fReadNewline11 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LF"#;

GHC.IO.Handle.Types.$fReadNewline10 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadNewline11;

GHC.IO.Handle.Types.$fReadNewline7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "CRLF"#;

GHC.IO.Handle.Types.$fReadNewline6 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadNewline7;

GHC.IO.Handle.Types.$fShowNewline_$cshowsPrec
  :: GHC.Types.Int -> GHC.IO.Handle.Types.Newline -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_s8a7L ds1_s8a7M eta_s8a7N]
        case ds1_s8a7M of {
          GHC.IO.Handle.Types.LF ->
              GHC.Base.++ GHC.IO.Handle.Types.$fReadNewline10 eta_s8a7N;
          GHC.IO.Handle.Types.CRLF ->
              GHC.Base.++ GHC.IO.Handle.Types.$fReadNewline6 eta_s8a7N;
        };

GHC.IO.Handle.Types.$fShowNewline_$cshow
  :: GHC.IO.Handle.Types.Newline -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s8a7P]
        case x_s8a7P of {
          GHC.IO.Handle.Types.LF -> GHC.IO.Handle.Types.$fReadNewline10;
          GHC.IO.Handle.Types.CRLF -> GHC.IO.Handle.Types.$fReadNewline6;
        };

GHC.IO.Handle.Types.$fShowNewline1
  :: GHC.IO.Handle.Types.Newline -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_s8a7R eta_s8a7S]
        case ds_s8a7R of {
          GHC.IO.Handle.Types.LF ->
              GHC.Base.++ GHC.IO.Handle.Types.$fReadNewline10 eta_s8a7S;
          GHC.IO.Handle.Types.CRLF ->
              GHC.Base.++ GHC.IO.Handle.Types.$fReadNewline6 eta_s8a7S;
        };

GHC.IO.Handle.Types.$fShowNewline_$cshowList
  :: [GHC.IO.Handle.Types.Newline] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s8a7U s_s8a7V]
        GHC.Show.showList__
            GHC.IO.Handle.Types.$fShowNewline1 ls_s8a7U s_s8a7V;

GHC.IO.Handle.Types.$fShowNewline [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Handle.Types.Newline
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Handle.Types.$fShowNewline_$cshowsPrec
                                    GHC.IO.Handle.Types.$fShowNewline_$cshow
                                    GHC.IO.Handle.Types.$fShowNewline_$cshowList];

GHC.IO.Handle.Types.$fShowNewlineMode4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NewlineMode {"#;

GHC.IO.Handle.Types.$fShowNewlineMode3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "inputNL = "#;

GHC.IO.Handle.Types.$fShowNewlineMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "outputNL = "#;

GHC.IO.Handle.Types.$fReadNewlineMode5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "}"#;

GHC.IO.Handle.Types.$w$cshowsPrec1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.Base.String
     -> GHC.Base.String
[GblId, Arity=4, Str=<S,U><L,1*U><L,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ww_s8a7W ww1_s8a7X ww2_s8a7Y w_s8a7Z]
        let {
          p_s8a80 [Occ=Once*!, Dmd=<L,1*C1(U)>] :: GHC.Show.ShowS
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              sat-only [ww1_s8a7X ww2_s8a7Y] \r [x_s8a81]
                  let {
                    sat_s8a8a [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [ww1_s8a7X ww2_s8a7Y x_s8a81] \u []
                            let {
                              sat_s8a89 [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [ww1_s8a7X ww2_s8a7Y x_s8a81] \u []
                                      let {
                                        karg_s8a82 [Occ=Once*, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                        [LclId] =
                                            [ww2_s8a7Y x_s8a81] \s []
                                                let {
                                                  sat_s8a87 [Occ=Once, Dmd=<L,1*U>]
                                                    :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [ww2_s8a7Y x_s8a81] \s []
                                                          let {
                                                            sat_s8a86 [Occ=Once] :: [GHC.Types.Char]
                                                            [LclId] =
                                                                [ww2_s8a7Y x_s8a81] \u []
                                                                    case ww2_s8a7Y of {
                                                                      GHC.IO.Handle.Types.LF ->
                                                                          let {
                                                                            sat_s8a84 [Occ=Once,
                                                                                       Dmd=<L,1*U>]
                                                                              :: [GHC.Types.Char]
                                                                            [LclId] =
                                                                                [x_s8a81] \s []
                                                                                    GHC.CString.unpackAppendCString#
                                                                                        GHC.IO.Handle.Types.$fReadNewlineMode5
                                                                                        x_s8a81;
                                                                          } in 
                                                                            GHC.Base.++
                                                                                GHC.IO.Handle.Types.$fReadNewline10
                                                                                sat_s8a84;
                                                                      GHC.IO.Handle.Types.CRLF ->
                                                                          let {
                                                                            sat_s8a85 [Occ=Once,
                                                                                       Dmd=<L,1*U>]
                                                                              :: [GHC.Types.Char]
                                                                            [LclId] =
                                                                                [x_s8a81] \s []
                                                                                    GHC.CString.unpackAppendCString#
                                                                                        GHC.IO.Handle.Types.$fReadNewlineMode5
                                                                                        x_s8a81;
                                                                          } in 
                                                                            GHC.Base.++
                                                                                GHC.IO.Handle.Types.$fReadNewline6
                                                                                sat_s8a85;
                                                                    };
                                                          } in 
                                                            GHC.CString.unpackAppendCString#
                                                                GHC.IO.Handle.Types.$fShowNewlineMode2
                                                                sat_s8a86;
                                                } in 
                                                  GHC.Base.++ GHC.Show.showCommaSpace1 sat_s8a87;
                                      } in 
                                        case ww1_s8a7X of {
                                          GHC.IO.Handle.Types.LF ->
                                              GHC.Base.++
                                                  GHC.IO.Handle.Types.$fReadNewline10 karg_s8a82;
                                          GHC.IO.Handle.Types.CRLF ->
                                              GHC.Base.++
                                                  GHC.IO.Handle.Types.$fReadNewline6 karg_s8a82;
                                        };
                            } in 
                              GHC.CString.unpackAppendCString#
                                  GHC.IO.Handle.Types.$fShowNewlineMode3 sat_s8a89;
                  } in 
                    GHC.CString.unpackAppendCString#
                        GHC.IO.Handle.Types.$fShowNewlineMode4 sat_s8a8a;
        } in 
          case >=# [ww_s8a7W 11#] of {
            __DEFAULT -> p_s8a80 w_s8a7Z;
            1# ->
                let {
                  sat_s8a8d [Occ=Once] :: [GHC.Types.Char]
                  [LclId] =
                      [w_s8a7Z p_s8a80] \u []
                          let {
                            sat_s8a8c [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                CCCS :! [GHC.Show.$fShow(,)2 w_s8a7Z];
                          } in  p_s8a80 sat_s8a8c;
                } in  : [GHC.Show.$fShow(,)4 sat_s8a8d];
          };

GHC.IO.Handle.Types.$fShowNewlineMode_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int
     -> GHC.IO.Handle.Types.NewlineMode -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S,1*U(1*U,1*U)><L,U>,
 Unf=OtherCon []] =
    [] \r [w_s8a8e w1_s8a8f w2_s8a8g]
        case w_s8a8e of {
          GHC.Types.I# ww1_s8a8i [Occ=Once] ->
              case w1_s8a8f of {
                GHC.IO.Handle.Types.NewlineMode ww3_s8a8k [Occ=Once]
                                                ww4_s8a8l [Occ=Once] ->
                    GHC.IO.Handle.Types.$w$cshowsPrec1
                        ww1_s8a8i ww3_s8a8k ww4_s8a8l w2_s8a8g;
              };
        };

GHC.IO.Handle.Types.$fShowBufferMode2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.IO.Handle.Types.$fShowNewlineMode_$cshow
  :: GHC.IO.Handle.Types.NewlineMode -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U(1*U,1*U)>, Unf=OtherCon []] =
    [] \r [x_s8a8m]
        case x_s8a8m of {
          GHC.IO.Handle.Types.NewlineMode ww1_s8a8o [Occ=Once]
                                          ww2_s8a8p [Occ=Once] ->
              GHC.IO.Handle.Types.$w$cshowsPrec1
                  0# ww1_s8a8o ww2_s8a8p GHC.Types.[];
        };

GHC.IO.Handle.Types.$fShowNewlineMode1
  :: GHC.IO.Handle.Types.NewlineMode -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U(1*U,1*U)><L,U>, Unf=OtherCon []] =
    [] \r [w_s8a8q w1_s8a8r]
        case w_s8a8q of {
          GHC.IO.Handle.Types.NewlineMode ww1_s8a8t [Occ=Once]
                                          ww2_s8a8u [Occ=Once] ->
              GHC.IO.Handle.Types.$w$cshowsPrec1 0# ww1_s8a8t ww2_s8a8u w1_s8a8r;
        };

GHC.IO.Handle.Types.$fShowNewlineMode_$cshowList
  :: [GHC.IO.Handle.Types.NewlineMode] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s8a8v s_s8a8w]
        GHC.Show.showList__
            GHC.IO.Handle.Types.$fShowNewlineMode1 ls_s8a8v s_s8a8w;

GHC.IO.Handle.Types.$fShowNewlineMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Handle.Types.NewlineMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Handle.Types.$fShowNewlineMode_$cshowsPrec
                                    GHC.IO.Handle.Types.$fShowNewlineMode_$cshow
                                    GHC.IO.Handle.Types.$fShowNewlineMode_$cshowList];

GHC.IO.Handle.Types.$fReadNewline9
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Handle.Types.Newline -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s8a8x k_s8a8y] k_s8a8y GHC.IO.Handle.Types.LF;

GHC.IO.Handle.Types.$fReadNewline8
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.IO.Handle.Types.Newline)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.Handle.Types.$fReadNewline10
                        GHC.IO.Handle.Types.$fReadNewline9];

GHC.IO.Handle.Types.$fReadNewline5
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Handle.Types.Newline -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s8a8z k_s8a8A] k_s8a8A GHC.IO.Handle.Types.CRLF;

GHC.IO.Handle.Types.$fReadNewline4
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.IO.Handle.Types.Newline)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.Handle.Types.$fReadNewline6
                        GHC.IO.Handle.Types.$fReadNewline5];

GHC.IO.Handle.Types.$fReadNewline3
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec
         GHC.IO.Handle.Types.Newline)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Handle.Types.$fReadNewline4 GHC.Types.[]];

GHC.IO.Handle.Types.$fReadNewline_sps
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec
         GHC.IO.Handle.Types.Newline)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Handle.Types.$fReadNewline8
                      GHC.IO.Handle.Types.$fReadNewline3];

GHC.IO.Handle.Types.$fReadNewline2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.IO.Handle.Types.Newline
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_s8a8B]
        GHC.Read.choose2 GHC.IO.Handle.Types.$fReadNewline_sps eta_s8a8B;

GHC.IO.Handle.Types.$fReadNewline1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Handle.Types.Newline -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.IO.Handle.Types.$fReadNewline2 eta_B2 eta_B1;

GHC.IO.Handle.Types.$fReadNewline_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.IO.Handle.Types.Newline
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s8a8C]
        let {
          sat_s8a8D [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.IO.Handle.Types.Newline
          [LclId] =
              [n_s8a8C] \u []
                  GHC.Read.list3
                      GHC.IO.Handle.Types.$fReadNewline2
                      n_s8a8C
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s8a8D;

GHC.IO.Handle.Types.$fReadNewline_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec
       [GHC.IO.Handle.Types.Newline]
[GblId] =
    [] \u [] GHC.Read.list GHC.IO.Handle.Types.$fReadNewline1;

GHC.IO.Handle.Types.$fReadNewline12
  :: Text.ParserCombinators.ReadP.P [GHC.IO.Handle.Types.Newline]
[GblId] =
    [] \u []
        GHC.IO.Handle.Types.$fReadNewline_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.IO.Handle.Types.$fReadNewline_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.IO.Handle.Types.Newline]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run
            GHC.IO.Handle.Types.$fReadNewline12 eta_B1;

GHC.IO.Handle.Types.$fReadNewline [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.IO.Handle.Types.Newline
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.IO.Handle.Types.$fReadNewline_$creadsPrec
                                    GHC.IO.Handle.Types.$fReadNewline_$creadList
                                    GHC.IO.Handle.Types.$fReadNewline1
                                    GHC.IO.Handle.Types.$fReadNewline_$creadListPrec];

GHC.IO.Handle.Types.$fReadNewlineMode17 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NewlineMode"#;

GHC.IO.Handle.Types.$fReadNewlineMode16 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadNewlineMode17;

GHC.IO.Handle.Types.$fReadNewlineMode_lexeme1
  :: Text.Read.Lex.Lexeme
[GblId, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Ident! [GHC.IO.Handle.Types.$fReadNewlineMode16];

GHC.IO.Handle.Types.$fReadNewlineMode15 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "{"#;

GHC.IO.Handle.Types.$fReadNewlineMode14 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadNewlineMode15;

GHC.IO.Handle.Types.$fReadNewlineMode_lexeme
  :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [GHC.IO.Handle.Types.$fReadNewlineMode14];

GHC.IO.Handle.Types.$fReadNewlineMode13 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "inputNL"#;

GHC.IO.Handle.Types.$fReadNewlineMode12 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadNewlineMode13;

GHC.IO.Handle.Types.$fReadNewlineMode11
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Handle.Types.Newline -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,U>, Unf=OtherCon []] =
    [] \r [ds1_s8a8E eta_s8a8F]
        GHC.Read.list3
            GHC.IO.Handle.Types.$fReadNewline2
            Text.ParserCombinators.ReadPrec.minPrec
            eta_s8a8F;

GHC.IO.Handle.Types.$fReadBufferMode_n
  :: Text.ParserCombinators.ReadPrec.Prec
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [11#];

GHC.IO.Handle.Types.$fReadNewlineMode10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ","#;

GHC.IO.Handle.Types.$fReadNewlineMode9 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadNewlineMode10;

GHC.IO.Handle.Types.$fReadNewlineMode8 :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [GHC.IO.Handle.Types.$fReadNewlineMode9];

GHC.IO.Handle.Types.$fReadNewlineMode7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "outputNL"#;

GHC.IO.Handle.Types.$fReadNewlineMode6 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadNewlineMode7;

GHC.IO.Handle.Types.$fReadNewlineMode4 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadNewlineMode5;

GHC.IO.Handle.Types.$fReadNewlineMode3 :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [GHC.IO.Handle.Types.$fReadNewlineMode4];

GHC.IO.Handle.Types.$w$creadPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> forall b.
        (GHC.IO.Handle.Types.NewlineMode
         -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<S,U><L,C(U)>, Unf=OtherCon []] =
    [] \r [ww_s8a8G w_s8a8H]
        case <=# [ww_s8a8G 11#] of {
          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
          1# ->
              let {
                sat_s8a91 [Occ=Once]
                  :: () -> Text.ParserCombinators.ReadP.P b_s89BH
                [LclId] =
                    [w_s8a8H] \r [a1_s8a8J]
                        let {
                          sat_s8a8Y [Occ=Once]
                            :: () -> Text.ParserCombinators.ReadP.P b_s89BH
                          [LclId] =
                              [w_s8a8H] \r [a2_s8a8K]
                                  let {
                                    sat_s8a8X [Occ=Once]
                                      :: GHC.IO.Handle.Types.Newline
                                         -> Text.ParserCombinators.ReadP.P b_s89BH
                                    [LclId] =
                                        [w_s8a8H] \r [a3_s8a8L]
                                            let {
                                              sat_s8a8U [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b_s89BH
                                              [LclId] =
                                                  [w_s8a8H a3_s8a8L] \r [a4_s8a8M]
                                                      let {
                                                        sat_s8a8T [Occ=Once]
                                                          :: GHC.IO.Handle.Types.Newline
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b_s89BH
                                                        [LclId] =
                                                            [w_s8a8H a3_s8a8L] \r [a5_s8a8N]
                                                                let {
                                                                  sat_s8a8Q [Occ=Once]
                                                                    :: ()
                                                                       -> Text.ParserCombinators.ReadP.P
                                                                            b_s89BH
                                                                  [LclId] =
                                                                      [w_s8a8H
                                                                       a3_s8a8L
                                                                       a5_s8a8N] \r [a6_s8a8O]
                                                                          let {
                                                                            sat_s8a8P [Occ=Once]
                                                                              :: GHC.IO.Handle.Types.NewlineMode
                                                                            [LclId] =
                                                                                CCCS GHC.IO.Handle.Types.NewlineMode! [a3_s8a8L
                                                                                                                       a5_s8a8N];
                                                                          } in  w_s8a8H sat_s8a8P;
                                                                } in 
                                                                  case
                                                                      Text.Read.Lex.$wexpect
                                                                          GHC.IO.Handle.Types.$fReadNewlineMode3
                                                                          sat_s8a8Q
                                                                  of
                                                                  { Unit# ww2_s8a8S [Occ=Once] ->
                                                                        Text.ParserCombinators.ReadP.Look [ww2_s8a8S];
                                                                  };
                                                      } in 
                                                        GHC.Read.readField
                                                            GHC.IO.Handle.Types.$fReadNewlineMode6
                                                            GHC.IO.Handle.Types.$fReadNewlineMode11
                                                            GHC.IO.Handle.Types.$fReadBufferMode_n
                                                            sat_s8a8T;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.IO.Handle.Types.$fReadNewlineMode8
                                                      sat_s8a8U
                                              of
                                              { Unit# ww2_s8a8W [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww2_s8a8W];
                                              };
                                  } in 
                                    GHC.Read.readField
                                        GHC.IO.Handle.Types.$fReadNewlineMode12
                                        GHC.IO.Handle.Types.$fReadNewlineMode11
                                        GHC.IO.Handle.Types.$fReadBufferMode_n
                                        sat_s8a8X;
                        } in 
                          case
                              Text.Read.Lex.$wexpect
                                  GHC.IO.Handle.Types.$fReadNewlineMode_lexeme sat_s8a8Y
                          of
                          { Unit# ww2_s8a90 [Occ=Once] ->
                                Text.ParserCombinators.ReadP.Look [ww2_s8a90];
                          };
              } in 
                case
                    Text.Read.Lex.$wexpect
                        GHC.IO.Handle.Types.$fReadNewlineMode_lexeme1 sat_s8a91
                of
                { Unit# ww2_s8a93 [Occ=Once] ->
                      Text.ParserCombinators.ReadP.Look [ww2_s8a93];
                };
        };

GHC.IO.Handle.Types.$fReadNewlineMode2 [InlPrag=NOUSERINLINE[0]]
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Handle.Types.NewlineMode
         -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<S(S),1*U(U)><L,C(U)>, Unf=OtherCon []] =
    [] \r [w_s8a94 w1_s8a95]
        case w_s8a94 of {
          GHC.Types.I# ww1_s8a97 [Occ=Once] ->
              GHC.IO.Handle.Types.$w$creadPrec ww1_s8a97 w1_s8a95;
        };

GHC.IO.Handle.Types.$fReadNewlineMode1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Handle.Types.NewlineMode
         -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3
            GHC.IO.Handle.Types.$fReadNewlineMode2 eta_B2 eta_B1;

GHC.IO.Handle.Types.$fReadNewlineMode_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS
          GHC.IO.Handle.Types.NewlineMode
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s8a98]
        let {
          sat_s8a99 [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.IO.Handle.Types.NewlineMode
          [LclId] =
              [n_s8a98] \u []
                  GHC.Read.list3
                      GHC.IO.Handle.Types.$fReadNewlineMode2
                      n_s8a98
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s8a99;

GHC.IO.Handle.Types.$fReadNewlineMode_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec
       [GHC.IO.Handle.Types.NewlineMode]
[GblId] =
    [] \u [] GHC.Read.list GHC.IO.Handle.Types.$fReadNewlineMode1;

GHC.IO.Handle.Types.$fReadNewlineMode18
  :: Text.ParserCombinators.ReadP.P [GHC.IO.Handle.Types.NewlineMode]
[GblId] =
    [] \u []
        GHC.IO.Handle.Types.$fReadNewlineMode_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.IO.Handle.Types.$fReadNewlineMode_$creadList
  :: Text.ParserCombinators.ReadP.ReadS
       [GHC.IO.Handle.Types.NewlineMode]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run
            GHC.IO.Handle.Types.$fReadNewlineMode18 eta_B1;

GHC.IO.Handle.Types.$fReadNewlineMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.IO.Handle.Types.NewlineMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.IO.Handle.Types.$fReadNewlineMode_$creadsPrec
                                    GHC.IO.Handle.Types.$fReadNewlineMode_$creadList
                                    GHC.IO.Handle.Types.$fReadNewlineMode1
                                    GHC.IO.Handle.Types.$fReadNewlineMode_$creadListPrec];

GHC.IO.Handle.Types.$fOrdNewline_$c<
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8a9a b_s8a9b]
        case a_s8a9a of {
          GHC.IO.Handle.Types.LF ->
              case b_s8a9b of {
                GHC.IO.Handle.Types.LF -> GHC.Types.False [];
                GHC.IO.Handle.Types.CRLF -> GHC.Types.True [];
              };
          GHC.IO.Handle.Types.CRLF ->
              case b_s8a9b of { __DEFAULT -> GHC.Types.False []; };
        };

GHC.IO.Handle.Types.$fOrdNewline_$ccompare
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8a9f b_s8a9g]
        case a_s8a9f of {
          GHC.IO.Handle.Types.LF ->
              case b_s8a9g of {
                GHC.IO.Handle.Types.LF -> GHC.Types.EQ [];
                GHC.IO.Handle.Types.CRLF -> GHC.Types.LT [];
              };
          GHC.IO.Handle.Types.CRLF ->
              case b_s8a9g of {
                GHC.IO.Handle.Types.LF -> GHC.Types.GT [];
                GHC.IO.Handle.Types.CRLF -> GHC.Types.EQ [];
              };
        };

GHC.IO.Handle.Types.$fEqNewline_$c==
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s8a9k ds1_s8a9l]
        case ds_s8a9k of {
          GHC.IO.Handle.Types.LF ->
              case ds1_s8a9l of {
                GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
              };
          GHC.IO.Handle.Types.CRLF ->
              case ds1_s8a9l of {
                GHC.IO.Handle.Types.LF -> GHC.Types.False [];
                GHC.IO.Handle.Types.CRLF -> GHC.Types.True [];
              };
        };

GHC.IO.Handle.Types.$fEqNewline_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s8a9p eta1_s8a9q]
        case eta_s8a9p of {
          GHC.IO.Handle.Types.LF ->
              case eta1_s8a9q of {
                GHC.IO.Handle.Types.LF -> GHC.Types.False [];
                GHC.IO.Handle.Types.CRLF -> GHC.Types.True [];
              };
          GHC.IO.Handle.Types.CRLF ->
              case eta1_s8a9q of {
                GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
              };
        };

GHC.IO.Handle.Types.$fEqNewline [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.IO.Handle.Types.Newline
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.IO.Handle.Types.$fEqNewline_$c==
                                     GHC.IO.Handle.Types.$fEqNewline_$c/=];

GHC.IO.Handle.Types.$fOrdNewline_$c<=
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8a9u b_s8a9v]
        case b_s8a9v of {
          GHC.IO.Handle.Types.LF ->
              case a_s8a9u of {
                GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
              };
          GHC.IO.Handle.Types.CRLF ->
              case a_s8a9u of { __DEFAULT -> GHC.Types.True []; };
        };

GHC.IO.Handle.Types.$fOrdNewline_$cmax
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.IO.Handle.Types.Newline
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s8a9z y_s8a9A]
        case y_s8a9A of {
          GHC.IO.Handle.Types.LF -> x_s8a9z;
          GHC.IO.Handle.Types.CRLF ->
              case x_s8a9z of { __DEFAULT -> GHC.IO.Handle.Types.CRLF []; };
        };

GHC.IO.Handle.Types.$fOrdNewline_$c>=
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8a9D b_s8a9E]
        case a_s8a9D of {
          GHC.IO.Handle.Types.LF ->
              case b_s8a9E of {
                GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
              };
          GHC.IO.Handle.Types.CRLF ->
              case b_s8a9E of { __DEFAULT -> GHC.Types.True []; };
        };

GHC.IO.Handle.Types.$fOrdNewline_$c>
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8a9I b_s8a9J]
        GHC.IO.Handle.Types.$fOrdNewline_$c< b_s8a9J a_s8a9I;

GHC.IO.Handle.Types.$fOrdNewline_$cmin
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.IO.Handle.Types.Newline
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s8a9K y_s8a9L]
        case y_s8a9L of {
          GHC.IO.Handle.Types.LF ->
              case x_s8a9K of { __DEFAULT -> GHC.IO.Handle.Types.LF []; };
          GHC.IO.Handle.Types.CRLF -> x_s8a9K;
        };

GHC.IO.Handle.Types.$fOrdNewline [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.IO.Handle.Types.Newline
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.IO.Handle.Types.$fEqNewline
                                      GHC.IO.Handle.Types.$fOrdNewline_$ccompare
                                      GHC.IO.Handle.Types.$fOrdNewline_$c<
                                      GHC.IO.Handle.Types.$fOrdNewline_$c<=
                                      GHC.IO.Handle.Types.$fOrdNewline_$c>
                                      GHC.IO.Handle.Types.$fOrdNewline_$c>=
                                      GHC.IO.Handle.Types.$fOrdNewline_$cmax
                                      GHC.IO.Handle.Types.$fOrdNewline_$cmin];

GHC.IO.Handle.Types.$w$ccompare [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.Types.Ordering
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s8a9O ww1_s8a9P ww2_s8a9Q ww3_s8a9R]
        case ww_s8a9O of {
          GHC.IO.Handle.Types.LF ->
              case ww2_s8a9Q of {
                GHC.IO.Handle.Types.LF ->
                    GHC.IO.Handle.Types.$fOrdNewline_$ccompare ww1_s8a9P ww3_s8a9R;
                GHC.IO.Handle.Types.CRLF -> GHC.Types.LT [];
              };
          GHC.IO.Handle.Types.CRLF ->
              case ww2_s8a9Q of {
                GHC.IO.Handle.Types.LF -> GHC.Types.GT [];
                GHC.IO.Handle.Types.CRLF ->
                    GHC.IO.Handle.Types.$fOrdNewline_$ccompare ww1_s8a9P ww3_s8a9R;
              };
        };

GHC.IO.Handle.Types.$fOrdNewlineMode_$ccompare [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [w_s8a9V w1_s8a9W]
        case w_s8a9V of {
          GHC.IO.Handle.Types.NewlineMode ww1_s8a9Y [Occ=Once]
                                          ww2_s8a9Z [Occ=Once] ->
              case w1_s8a9W of {
                GHC.IO.Handle.Types.NewlineMode ww4_s8aa1 [Occ=Once]
                                                ww5_s8aa2 [Occ=Once] ->
                    GHC.IO.Handle.Types.$w$ccompare
                        ww1_s8a9Y ww2_s8a9Z ww4_s8aa1 ww5_s8aa2;
              };
        };

GHC.IO.Handle.Types.$w$c< [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.Types.Bool
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s8aa3 ww1_s8aa4 ww2_s8aa5 ww3_s8aa6]
        case ww_s8aa3 of {
          GHC.IO.Handle.Types.LF ->
              case ww2_s8aa5 of {
                GHC.IO.Handle.Types.LF ->
                    GHC.IO.Handle.Types.$fOrdNewline_$c< ww1_s8aa4 ww3_s8aa6;
                GHC.IO.Handle.Types.CRLF -> GHC.Types.True [];
              };
          GHC.IO.Handle.Types.CRLF ->
              case ww2_s8aa5 of {
                GHC.IO.Handle.Types.LF -> GHC.Types.False [];
                GHC.IO.Handle.Types.CRLF ->
                    GHC.IO.Handle.Types.$fOrdNewline_$c< ww1_s8aa4 ww3_s8aa6;
              };
        };

GHC.IO.Handle.Types.$fOrdNewlineMode_$c< [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [w_s8aaa w1_s8aab]
        case w_s8aaa of {
          GHC.IO.Handle.Types.NewlineMode ww1_s8aad [Occ=Once]
                                          ww2_s8aae [Occ=Once] ->
              case w1_s8aab of {
                GHC.IO.Handle.Types.NewlineMode ww4_s8aag [Occ=Once]
                                                ww5_s8aah [Occ=Once] ->
                    GHC.IO.Handle.Types.$w$c< ww1_s8aad ww2_s8aae ww4_s8aag ww5_s8aah;
              };
        };

GHC.IO.Handle.Types.$w$c== [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.Types.Bool
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s8aai ww1_s8aaj ww2_s8aak ww3_s8aal]
        case ww_s8aai of {
          GHC.IO.Handle.Types.LF ->
              case ww2_s8aak of {
                GHC.IO.Handle.Types.LF ->
                    GHC.IO.Handle.Types.$fEqNewline_$c== ww1_s8aaj ww3_s8aal;
                GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
              };
          GHC.IO.Handle.Types.CRLF ->
              case ww2_s8aak of {
                GHC.IO.Handle.Types.LF -> GHC.Types.False [];
                GHC.IO.Handle.Types.CRLF ->
                    GHC.IO.Handle.Types.$fEqNewline_$c== ww1_s8aaj ww3_s8aal;
              };
        };

GHC.IO.Handle.Types.$fEqNewlineMode_$c== [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [w_s8aap w1_s8aaq]
        case w_s8aap of {
          GHC.IO.Handle.Types.NewlineMode ww1_s8aas [Occ=Once]
                                          ww2_s8aat [Occ=Once] ->
              case w1_s8aaq of {
                GHC.IO.Handle.Types.NewlineMode ww4_s8aav [Occ=Once]
                                                ww5_s8aaw [Occ=Once] ->
                    GHC.IO.Handle.Types.$w$c== ww1_s8aas ww2_s8aat ww4_s8aav ww5_s8aaw;
              };
        };

GHC.IO.Handle.Types.$fEqNewlineMode_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [eta_s8aax eta1_s8aay]
        case eta_s8aax of {
          GHC.IO.Handle.Types.NewlineMode ww1_s8aaA [Occ=Once!]
                                          ww2_s8aaB [Occ=Once*!] ->
              case eta1_s8aay of {
                GHC.IO.Handle.Types.NewlineMode ww4_s8aaD [Occ=Once*!]
                                                ww5_s8aaE [Occ=Once*!] ->
                    case ww1_s8aaA of {
                      GHC.IO.Handle.Types.LF ->
                          case ww4_s8aaD of {
                            GHC.IO.Handle.Types.LF ->
                                case ww2_s8aaB of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8aaE of {
                                        GHC.IO.Handle.Types.LF -> GHC.Types.False [];
                                        GHC.IO.Handle.Types.CRLF -> GHC.Types.True [];
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8aaE of {
                                        GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                                        GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
                                      };
                                };
                            GHC.IO.Handle.Types.CRLF -> GHC.Types.True [];
                          };
                      GHC.IO.Handle.Types.CRLF ->
                          case ww4_s8aaD of {
                            GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                            GHC.IO.Handle.Types.CRLF ->
                                case ww2_s8aaB of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8aaE of {
                                        GHC.IO.Handle.Types.LF -> GHC.Types.False [];
                                        GHC.IO.Handle.Types.CRLF -> GHC.Types.True [];
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8aaE of {
                                        GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                                        GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fEqNewlineMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.IO.Handle.Types.NewlineMode
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.IO.Handle.Types.$fEqNewlineMode_$c==
                                     GHC.IO.Handle.Types.$fEqNewlineMode_$c/=];

GHC.IO.Handle.Types.$fOrdNewlineMode_$c<=
  :: GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [a_s8aaO b_s8aaP]
        case b_s8aaP of {
          GHC.IO.Handle.Types.NewlineMode ww1_s8aaR [Occ=Once!]
                                          ww2_s8aaS [Occ=Once*!] ->
              case a_s8aaO of {
                GHC.IO.Handle.Types.NewlineMode ww4_s8aaU [Occ=Once*!]
                                                ww5_s8aaV [Occ=Once*] ->
                    case ww1_s8aaR of {
                      GHC.IO.Handle.Types.LF ->
                          case ww4_s8aaU of {
                            GHC.IO.Handle.Types.LF ->
                                case ww2_s8aaS of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8aaV of {
                                        GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                                        GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8aaV of { __DEFAULT -> GHC.Types.True []; };
                                };
                            GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
                          };
                      GHC.IO.Handle.Types.CRLF ->
                          case ww4_s8aaU of {
                            GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                            GHC.IO.Handle.Types.CRLF ->
                                case ww2_s8aaS of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8aaV of {
                                        GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                                        GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8aaV of { __DEFAULT -> GHC.Types.True []; };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fOrdNewlineMode_$cmax
  :: GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [x_s8ab5 y_s8ab6]
        case y_s8ab6 of ww_s8ab7 {
          GHC.IO.Handle.Types.NewlineMode ww1_s8ab8 [Occ=Once!]
                                          ww2_s8ab9 [Occ=Once*!] ->
              case x_s8ab5 of ww3_s8aba {
                GHC.IO.Handle.Types.NewlineMode ww4_s8abb [Occ=Once*!]
                                                ww5_s8abc [Occ=Once*] ->
                    case ww1_s8ab8 of {
                      GHC.IO.Handle.Types.LF ->
                          case ww4_s8abb of {
                            GHC.IO.Handle.Types.LF ->
                                case ww2_s8ab9 of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8abc of {
                                        GHC.IO.Handle.Types.LF -> ww_s8ab7;
                                        GHC.IO.Handle.Types.CRLF -> ww3_s8aba;
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8abc of { __DEFAULT -> ww_s8ab7; };
                                };
                            GHC.IO.Handle.Types.CRLF -> ww3_s8aba;
                          };
                      GHC.IO.Handle.Types.CRLF ->
                          case ww4_s8abb of {
                            GHC.IO.Handle.Types.LF -> ww_s8ab7;
                            GHC.IO.Handle.Types.CRLF ->
                                case ww2_s8ab9 of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8abc of {
                                        GHC.IO.Handle.Types.LF -> ww_s8ab7;
                                        GHC.IO.Handle.Types.CRLF -> ww3_s8aba;
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8abc of { __DEFAULT -> ww_s8ab7; };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fOrdNewlineMode_$c>=
  :: GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [a_s8abm b_s8abn]
        case a_s8abm of {
          GHC.IO.Handle.Types.NewlineMode ww1_s8abp [Occ=Once!]
                                          ww2_s8abq [Occ=Once*!] ->
              case b_s8abn of {
                GHC.IO.Handle.Types.NewlineMode ww4_s8abs [Occ=Once*!]
                                                ww5_s8abt [Occ=Once*] ->
                    case ww1_s8abp of {
                      GHC.IO.Handle.Types.LF ->
                          case ww4_s8abs of {
                            GHC.IO.Handle.Types.LF ->
                                case ww2_s8abq of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8abt of {
                                        GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                                        GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8abt of { __DEFAULT -> GHC.Types.True []; };
                                };
                            GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
                          };
                      GHC.IO.Handle.Types.CRLF ->
                          case ww4_s8abs of {
                            GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                            GHC.IO.Handle.Types.CRLF ->
                                case ww2_s8abq of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8abt of {
                                        GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                                        GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8abt of { __DEFAULT -> GHC.Types.True []; };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fOrdNewlineMode_$c>
  :: GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [a_s8abD b_s8abE]
        GHC.IO.Handle.Types.$fOrdNewlineMode_$c< b_s8abE a_s8abD;

GHC.IO.Handle.Types.$fOrdNewlineMode_$cmin
  :: GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [x_s8abF y_s8abG]
        case y_s8abG of ww_s8abH {
          GHC.IO.Handle.Types.NewlineMode ww1_s8abI [Occ=Once!]
                                          ww2_s8abJ [Occ=Once*!] ->
              case x_s8abF of ww3_s8abK {
                GHC.IO.Handle.Types.NewlineMode ww4_s8abL [Occ=Once*!]
                                                ww5_s8abM [Occ=Once*] ->
                    case ww1_s8abI of {
                      GHC.IO.Handle.Types.LF ->
                          case ww4_s8abL of {
                            GHC.IO.Handle.Types.LF ->
                                case ww2_s8abJ of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8abM of {
                                        GHC.IO.Handle.Types.LF -> ww3_s8abK;
                                        GHC.IO.Handle.Types.CRLF -> ww_s8abH;
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8abM of { __DEFAULT -> ww3_s8abK; };
                                };
                            GHC.IO.Handle.Types.CRLF -> ww_s8abH;
                          };
                      GHC.IO.Handle.Types.CRLF ->
                          case ww4_s8abL of {
                            GHC.IO.Handle.Types.LF -> ww3_s8abK;
                            GHC.IO.Handle.Types.CRLF ->
                                case ww2_s8abJ of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8abM of {
                                        GHC.IO.Handle.Types.LF -> ww3_s8abK;
                                        GHC.IO.Handle.Types.CRLF -> ww_s8abH;
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8abM of { __DEFAULT -> ww3_s8abK; };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fOrdNewlineMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.IO.Handle.Types.NewlineMode
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.IO.Handle.Types.$fEqNewlineMode
                                      GHC.IO.Handle.Types.$fOrdNewlineMode_$ccompare
                                      GHC.IO.Handle.Types.$fOrdNewlineMode_$c<
                                      GHC.IO.Handle.Types.$fOrdNewlineMode_$c<=
                                      GHC.IO.Handle.Types.$fOrdNewlineMode_$c>
                                      GHC.IO.Handle.Types.$fOrdNewlineMode_$c>=
                                      GHC.IO.Handle.Types.$fOrdNewlineMode_$cmax
                                      GHC.IO.Handle.Types.$fOrdNewlineMode_$cmin];

GHC.IO.Handle.Types.$fReadBufferMode13 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NoBuffering"#;

GHC.IO.Handle.Types.$fReadBufferMode12 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadBufferMode13;

GHC.IO.Handle.Types.$fShowBufferMode6
  :: [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Base.++ GHC.IO.Handle.Types.$fReadBufferMode12 eta_B1;

GHC.IO.Handle.Types.$fReadBufferMode9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LineBuffering"#;

GHC.IO.Handle.Types.$fReadBufferMode8 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadBufferMode9;

GHC.IO.Handle.Types.$fShowBufferMode5
  :: [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Base.++ GHC.IO.Handle.Types.$fReadBufferMode8 eta_B1;

GHC.IO.Handle.Types.$fShowBufferMode4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BlockBuffering "#;

GHC.IO.Handle.Types.$fShowBufferMode3 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fShowBufferMode4;

GHC.IO.Handle.Types.$fShowBufferMode_$cshowsPrec
  :: GHC.Types.Int
     -> GHC.IO.Handle.Types.BufferMode -> GHC.Show.ShowS
[GblId, Arity=2, Str=<L,1*U(U)><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s8abW ds1_s8abX]
        case ds1_s8abX of {
          GHC.IO.Handle.Types.NoBuffering ->
              GHC.IO.Handle.Types.$fShowBufferMode6;
          GHC.IO.Handle.Types.LineBuffering ->
              GHC.IO.Handle.Types.$fShowBufferMode5;
          GHC.IO.Handle.Types.BlockBuffering b1_s8abZ [Occ=Once] ->
              case ds_s8abW of {
                GHC.Types.I# x_s8ac1 [Occ=Once] ->
                    let {
                      g_s8ac2 [Occ=OnceL*!, Dmd=<L,C(U)>]
                        :: GHC.Base.String -> GHC.Base.String
                      [LclId] =
                          [b1_s8abZ] \u []
                              GHC.Show.$fShowMaybe_$cshowsPrec
                                  GHC.Show.$fShowInt
                                  GHC.IO.Handle.Types.$fReadBufferMode_n
                                  b1_s8abZ;
                    } in 
                      case >=# [x_s8ac1 11#] of {
                        __DEFAULT ->
                            let {
                              sat_s8ac6 [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                              [LclId] =
                                  [g_s8ac2] \r [x1_s8ac4]
                                      let {
                                        sat_s8ac5 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                        [LclId] =
                                            [g_s8ac2 x1_s8ac4] \s [] g_s8ac2 x1_s8ac4;
                                      } in 
                                        GHC.Base.++ GHC.IO.Handle.Types.$fShowBufferMode3 sat_s8ac5;
                            } in  sat_s8ac6;
                        1# ->
                            let {
                              sat_s8acb [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                              [LclId] =
                                  [g_s8ac2] \r [x1_s8ac7]
                                      let {
                                        sat_s8aca [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            [g_s8ac2 x1_s8ac7] \u []
                                                let {
                                                  sat_s8ac9 [Occ=Once, Dmd=<L,1*U>]
                                                    :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [g_s8ac2 x1_s8ac7] \s []
                                                          let {
                                                            sat_s8ac8 [Occ=Once] :: GHC.Base.String
                                                            [LclId] =
                                                                CCCS :! [GHC.Show.$fShow(,)2
                                                                         x1_s8ac7];
                                                          } in  g_s8ac2 sat_s8ac8;
                                                } in 
                                                  GHC.Base.++
                                                      GHC.IO.Handle.Types.$fShowBufferMode3
                                                      sat_s8ac9;
                                      } in  : [GHC.Show.$fShow(,)4 sat_s8aca];
                            } in  sat_s8acb;
                      };
              };
        };

GHC.IO.Handle.Types.$fShowBufferMode7 :: [GHC.Types.Char]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.$fShow(,)2 GHC.Types.[]];

GHC.IO.Handle.Types.$fShowBufferMode_$cshow
  :: GHC.IO.Handle.Types.BufferMode -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s8acc]
        case x_s8acc of {
          GHC.IO.Handle.Types.NoBuffering ->
              GHC.IO.Handle.Types.$fReadBufferMode12;
          GHC.IO.Handle.Types.LineBuffering ->
              GHC.IO.Handle.Types.$fReadBufferMode8;
          GHC.IO.Handle.Types.BlockBuffering b1_s8ace [Occ=Once!] ->
              let {
                sat_s8aco [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                [LclId] =
                    [b1_s8ace] \s []
                        case b1_s8ace of {
                          GHC.Base.Nothing -> GHC.Show.$fShowMaybe4;
                          GHC.Base.Just b2_s8acg [Occ=Once!] ->
                              let {
                                sat_s8acn [Occ=Once] :: [GHC.Types.Char]
                                [LclId] =
                                    [b2_s8acg] \u []
                                        let {
                                          sat_s8acm [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                          [LclId] =
                                              [b2_s8acg] \s []
                                                  case b2_s8acg of {
                                                    GHC.Types.I# ww3_s8aci [Occ=Once] ->
                                                        case
                                                            GHC.Show.$wshowSignedInt
                                                                11#
                                                                ww3_s8aci
                                                                GHC.IO.Handle.Types.$fShowBufferMode7
                                                        of
                                                        { (#,#) ww5_s8ack [Occ=Once]
                                                                ww6_s8acl [Occ=Once] ->
                                                              : [ww5_s8ack ww6_s8acl];
                                                        };
                                                  };
                                        } in  GHC.Base.++ GHC.Show.$fShowMaybe1 sat_s8acm;
                              } in  : [GHC.Show.$fShow(,)4 sat_s8acn];
                        };
              } in  GHC.Base.++ GHC.IO.Handle.Types.$fShowBufferMode3 sat_s8aco;
        };

GHC.IO.Handle.Types.$fShowBufferMode1
  :: GHC.IO.Handle.Types.BufferMode -> GHC.Show.ShowS
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.IO.Handle.Types.$fShowBufferMode_$cshowsPrec
            GHC.IO.Handle.Types.$fShowBufferMode2 eta_B1;

GHC.IO.Handle.Types.$fShowBufferMode_$cshowList
  :: [GHC.IO.Handle.Types.BufferMode] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s8acp s_s8acq]
        GHC.Show.showList__
            GHC.IO.Handle.Types.$fShowBufferMode1 ls_s8acp s_s8acq;

GHC.IO.Handle.Types.$fShowBufferMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Handle.Types.BufferMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Handle.Types.$fShowBufferMode_$cshowsPrec
                                    GHC.IO.Handle.Types.$fShowBufferMode_$cshow
                                    GHC.IO.Handle.Types.$fShowBufferMode_$cshowList];

GHC.IO.Handle.Types.$fReadBufferMode11
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Handle.Types.BufferMode
         -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s8acr k_s8acs] k_s8acs GHC.IO.Handle.Types.NoBuffering;

GHC.IO.Handle.Types.$fReadBufferMode10
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.IO.Handle.Types.BufferMode)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.Handle.Types.$fReadBufferMode12
                        GHC.IO.Handle.Types.$fReadBufferMode11];

GHC.IO.Handle.Types.$fReadBufferMode7
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Handle.Types.BufferMode
         -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s8act k_s8acu] k_s8acu GHC.IO.Handle.Types.LineBuffering;

GHC.IO.Handle.Types.$fReadBufferMode6
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.IO.Handle.Types.BufferMode)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.Handle.Types.$fReadBufferMode8
                        GHC.IO.Handle.Types.$fReadBufferMode7];

GHC.IO.Handle.Types.$fReadBufferMode5
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec
         GHC.IO.Handle.Types.BufferMode)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Handle.Types.$fReadBufferMode6
                      GHC.Types.[]];

GHC.IO.Handle.Types.$fReadBufferMode_sps
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec
         GHC.IO.Handle.Types.BufferMode)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Handle.Types.$fReadBufferMode10
                      GHC.IO.Handle.Types.$fReadBufferMode5];

GHC.IO.Handle.Types.$fReadBufferMode4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BlockBuffering"#;

GHC.IO.Handle.Types.$fReadBufferMode3 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadBufferMode4;

GHC.IO.Handle.Types.$fReadBufferMode_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Ident! [GHC.IO.Handle.Types.$fReadBufferMode3];

GHC.IO.Handle.Types.$fReadBufferMode2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP
          GHC.IO.Handle.Types.BufferMode
[GblId, Arity=1, Str=<L,U(U)>, Unf=OtherCon []] =
    [] \r [n_s8acv]
        let {
          ds2_s8acw [Occ=OnceL, Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadP
                 GHC.IO.Handle.Types.BufferMode
          [LclId] =
              [n_s8acv] \u []
                  GHC.Read.choose2
                      GHC.IO.Handle.Types.$fReadBufferMode_sps n_s8acv; } in
        let {
          sat_s8acK [Occ=Once]
            :: forall b.
               (GHC.IO.Handle.Types.BufferMode
                -> Text.ParserCombinators.ReadP.P b)
               -> Text.ParserCombinators.ReadP.P b
          [LclId] =
              [n_s8acv ds2_s8acw] \r [k_s8acx]
                  let {
                    sat_s8acJ [Occ=Once] :: Text.ParserCombinators.ReadP.P b_i88Yk
                    [LclId] =
                        [n_s8acv k_s8acx] \u []
                            case n_s8acv of {
                              GHC.Types.I# x_s8acA [Occ=Once] ->
                                  case <=# [x_s8acA 10#] of {
                                    __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                    1# ->
                                        let {
                                          sat_s8acG [Occ=Once]
                                            :: () -> Text.ParserCombinators.ReadP.P b_i88Yk
                                          [LclId] =
                                              [k_s8acx] \r [a1_s8acC]
                                                  let {
                                                    sat_s8acF [Occ=Once]
                                                      :: GHC.Base.Maybe GHC.Types.Int
                                                         -> Text.ParserCombinators.ReadP.P b_i88Yk
                                                    [LclId] =
                                                        [k_s8acx] \r [a2_s8acD]
                                                            let {
                                                              sat_s8acE [Occ=Once]
                                                                :: GHC.IO.Handle.Types.BufferMode
                                                              [LclId] =
                                                                  CCCS GHC.IO.Handle.Types.BlockBuffering! [a2_s8acD];
                                                            } in  k_s8acx sat_s8acE;
                                                  } in 
                                                    GHC.Read.$fReadMaybe1
                                                        GHC.Read.$fReadInt
                                                        GHC.IO.Handle.Types.$fReadBufferMode_n
                                                        sat_s8acF;
                                        } in 
                                          case
                                              Text.Read.Lex.$wexpect
                                                  GHC.IO.Handle.Types.$fReadBufferMode_lexeme
                                                  sat_s8acG
                                          of
                                          { Unit# ww1_s8acI [Occ=Once] ->
                                                Text.ParserCombinators.ReadP.Look [ww1_s8acI];
                                          };
                                  };
                            };
                  } in 
                    case ds2_s8acw k_s8acx of sat_s8acy {
                      __DEFAULT ->
                          Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                              sat_s8acy sat_s8acJ;
                    };
        } in  sat_s8acK;

GHC.IO.Handle.Types.$fReadBufferMode1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Handle.Types.BufferMode
         -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.IO.Handle.Types.$fReadBufferMode2 eta_B2 eta_B1;

GHC.IO.Handle.Types.$fReadBufferMode_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS
          GHC.IO.Handle.Types.BufferMode
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s8acL]
        let {
          sat_s8acM [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.IO.Handle.Types.BufferMode
          [LclId] =
              [n_s8acL] \u []
                  GHC.Read.list3
                      GHC.IO.Handle.Types.$fReadBufferMode2
                      n_s8acL
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s8acM;

GHC.IO.Handle.Types.$fReadBufferMode_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec
       [GHC.IO.Handle.Types.BufferMode]
[GblId] =
    [] \u [] GHC.Read.list GHC.IO.Handle.Types.$fReadBufferMode1;

GHC.IO.Handle.Types.$fReadBufferMode14
  :: Text.ParserCombinators.ReadP.P [GHC.IO.Handle.Types.BufferMode]
[GblId] =
    [] \u []
        GHC.IO.Handle.Types.$fReadBufferMode_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.IO.Handle.Types.$fReadBufferMode_$creadList
  :: Text.ParserCombinators.ReadP.ReadS
       [GHC.IO.Handle.Types.BufferMode]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run
            GHC.IO.Handle.Types.$fReadBufferMode14 eta_B1;

GHC.IO.Handle.Types.$fReadBufferMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.IO.Handle.Types.BufferMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.IO.Handle.Types.$fReadBufferMode_$creadsPrec
                                    GHC.IO.Handle.Types.$fReadBufferMode_$creadList
                                    GHC.IO.Handle.Types.$fReadBufferMode1
                                    GHC.IO.Handle.Types.$fReadBufferMode_$creadListPrec];

GHC.IO.Handle.Types.$fOrdBufferMode_$c<
  :: GHC.IO.Handle.Types.BufferMode
     -> GHC.IO.Handle.Types.BufferMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8acN b_s8acO]
        case a_s8acN of {
          GHC.IO.Handle.Types.NoBuffering ->
              case b_s8acO of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Handle.Types.NoBuffering -> GHC.Types.False [];
              };
          GHC.IO.Handle.Types.LineBuffering ->
              case b_s8acO of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Handle.Types.BlockBuffering _ [Occ=Dead] ->
                    GHC.Types.True [];
              };
          GHC.IO.Handle.Types.BlockBuffering a1_s8acT [Occ=Once!] ->
              case b_s8acO of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Handle.Types.BlockBuffering b1_s8acV [Occ=Once*!] ->
                    case a1_s8acT of {
                      GHC.Base.Nothing ->
                          case b1_s8acV of {
                            GHC.Base.Nothing -> GHC.Types.False [];
                            GHC.Base.Just _ [Occ=Dead] -> GHC.Types.True [];
                          };
                      GHC.Base.Just a2_s8acZ [Occ=Once] ->
                          case b1_s8acV of {
                            GHC.Base.Nothing -> GHC.Types.False [];
                            GHC.Base.Just b2_s8ad1 [Occ=Once] ->
                                GHC.Classes.ltInt a2_s8acZ b2_s8ad1;
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fOrdBufferMode_$ccompare
  :: GHC.IO.Handle.Types.BufferMode
     -> GHC.IO.Handle.Types.BufferMode -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8ad2 b_s8ad3]
        case a_s8ad2 of {
          GHC.IO.Handle.Types.NoBuffering ->
              case b_s8ad3 of {
                __DEFAULT -> GHC.Types.LT [];
                GHC.IO.Handle.Types.NoBuffering -> GHC.Types.EQ [];
              };
          GHC.IO.Handle.Types.LineBuffering ->
              case b_s8ad3 of {
                GHC.IO.Handle.Types.NoBuffering -> GHC.Types.GT [];
                GHC.IO.Handle.Types.LineBuffering -> GHC.Types.EQ [];
                GHC.IO.Handle.Types.BlockBuffering _ [Occ=Dead] -> GHC.Types.LT [];
              };
          GHC.IO.Handle.Types.BlockBuffering a1_s8ad8 [Occ=Once!] ->
              case b_s8ad3 of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.IO.Handle.Types.BlockBuffering b1_s8ada [Occ=Once*!] ->
                    case a1_s8ad8 of {
                      GHC.Base.Nothing ->
                          case b1_s8ada of {
                            GHC.Base.Nothing -> GHC.Types.EQ [];
                            GHC.Base.Just _ [Occ=Dead] -> GHC.Types.LT [];
                          };
                      GHC.Base.Just a2_s8ade [Occ=Once] ->
                          case b1_s8ada of {
                            GHC.Base.Nothing -> GHC.Types.GT [];
                            GHC.Base.Just b2_s8adg [Occ=Once] ->
                                GHC.Classes.compareInt a2_s8ade b2_s8adg;
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fEqBufferMode_$c==
  :: GHC.IO.Handle.Types.BufferMode
     -> GHC.IO.Handle.Types.BufferMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s8adh ds1_s8adi]
        case ds_s8adh of {
          GHC.IO.Handle.Types.NoBuffering ->
              case ds1_s8adi of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Handle.Types.NoBuffering -> GHC.Types.True [];
              };
          GHC.IO.Handle.Types.LineBuffering ->
              case ds1_s8adi of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Handle.Types.LineBuffering -> GHC.Types.True [];
              };
          GHC.IO.Handle.Types.BlockBuffering a1_s8adm [Occ=Once!] ->
              case ds1_s8adi of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Handle.Types.BlockBuffering b1_s8ado [Occ=Once*!] ->
                    case a1_s8adm of {
                      GHC.Base.Nothing ->
                          case b1_s8ado of {
                            GHC.Base.Nothing -> GHC.Types.True [];
                            GHC.Base.Just _ [Occ=Dead] -> GHC.Types.False [];
                          };
                      GHC.Base.Just a2_s8ads [Occ=Once] ->
                          case b1_s8ado of {
                            GHC.Base.Nothing -> GHC.Types.False [];
                            GHC.Base.Just b2_s8adu [Occ=Once] ->
                                GHC.Classes.eqInt a2_s8ads b2_s8adu;
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fEqBufferMode_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.IO.Handle.Types.BufferMode
     -> GHC.IO.Handle.Types.BufferMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s8adv eta1_s8adw]
        case eta_s8adv of {
          GHC.IO.Handle.Types.NoBuffering ->
              case eta1_s8adw of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Handle.Types.NoBuffering -> GHC.Types.False [];
              };
          GHC.IO.Handle.Types.LineBuffering ->
              case eta1_s8adw of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Handle.Types.LineBuffering -> GHC.Types.False [];
              };
          GHC.IO.Handle.Types.BlockBuffering a1_s8adA [Occ=Once!] ->
              case eta1_s8adw of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Handle.Types.BlockBuffering b1_s8adC [Occ=Once*!] ->
                    case a1_s8adA of {
                      GHC.Base.Nothing ->
                          case b1_s8adC of {
                            GHC.Base.Nothing -> GHC.Types.False [];
                            GHC.Base.Just _ [Occ=Dead] -> GHC.Types.True [];
                          };
                      GHC.Base.Just a2_s8adG [Occ=Once!] ->
                          case b1_s8adC of {
                            GHC.Base.Nothing -> GHC.Types.True [];
                            GHC.Base.Just b2_s8adI [Occ=Once!] ->
                                case a2_s8adG of {
                                  GHC.Types.I# x_s8adK [Occ=Once] ->
                                      case b2_s8adI of {
                                        GHC.Types.I# y_s8adM [Occ=Once] ->
                                            case ==# [x_s8adK y_s8adM] of {
                                              __DEFAULT -> GHC.Types.True [];
                                              1# -> GHC.Types.False [];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fEqBufferMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.IO.Handle.Types.BufferMode
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.IO.Handle.Types.$fEqBufferMode_$c==
                                     GHC.IO.Handle.Types.$fEqBufferMode_$c/=];

GHC.IO.Handle.Types.$fOrdBufferMode_$c<=
  :: GHC.IO.Handle.Types.BufferMode
     -> GHC.IO.Handle.Types.BufferMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8adO b_s8adP]
        case b_s8adP of {
          GHC.IO.Handle.Types.NoBuffering ->
              case a_s8adO of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Handle.Types.NoBuffering -> GHC.Types.True [];
              };
          GHC.IO.Handle.Types.LineBuffering ->
              case a_s8adO of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Handle.Types.BlockBuffering _ [Occ=Dead] ->
                    GHC.Types.False [];
              };
          GHC.IO.Handle.Types.BlockBuffering a1_s8adU [Occ=Once!] ->
              case a_s8adO of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Handle.Types.BlockBuffering b1_s8adW [Occ=Once*!] ->
                    case a1_s8adU of {
                      GHC.Base.Nothing ->
                          case b1_s8adW of {
                            GHC.Base.Nothing -> GHC.Types.True [];
                            GHC.Base.Just _ [Occ=Dead] -> GHC.Types.False [];
                          };
                      GHC.Base.Just a2_s8ae0 [Occ=Once!] ->
                          case b1_s8adW of {
                            GHC.Base.Nothing -> GHC.Types.True [];
                            GHC.Base.Just b2_s8ae2 [Occ=Once!] ->
                                case a2_s8ae0 of {
                                  GHC.Types.I# x_s8ae4 [Occ=Once] ->
                                      case b2_s8ae2 of {
                                        GHC.Types.I# y_s8ae6 [Occ=Once] ->
                                            case <# [x_s8ae4 y_s8ae6] of {
                                              __DEFAULT -> GHC.Types.True [];
                                              1# -> GHC.Types.False [];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fOrdBufferMode_$cmax
  :: GHC.IO.Handle.Types.BufferMode
     -> GHC.IO.Handle.Types.BufferMode -> GHC.IO.Handle.Types.BufferMode
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s8ae8 y_s8ae9]
        case y_s8ae9 of wild_s8aea {
          GHC.IO.Handle.Types.NoBuffering -> x_s8ae8;
          GHC.IO.Handle.Types.LineBuffering ->
              case x_s8ae8 of wild1_s8aeb {
                __DEFAULT -> GHC.IO.Handle.Types.LineBuffering [];
                GHC.IO.Handle.Types.BlockBuffering _ [Occ=Dead] -> wild1_s8aeb;
              };
          GHC.IO.Handle.Types.BlockBuffering a1_s8aed [Occ=Once!] ->
              case x_s8ae8 of wild1_s8aee {
                __DEFAULT -> wild_s8aea;
                GHC.IO.Handle.Types.BlockBuffering b1_s8aef [Occ=Once*!] ->
                    case a1_s8aed of {
                      GHC.Base.Nothing ->
                          case b1_s8aef of {
                            GHC.Base.Nothing -> wild_s8aea;
                            GHC.Base.Just _ [Occ=Dead] -> wild1_s8aee;
                          };
                      GHC.Base.Just a2_s8aej [Occ=Once!] ->
                          case b1_s8aef of {
                            GHC.Base.Nothing -> wild_s8aea;
                            GHC.Base.Just b2_s8ael [Occ=Once!] ->
                                case a2_s8aej of {
                                  GHC.Types.I# x1_s8aen [Occ=Once] ->
                                      case b2_s8ael of {
                                        GHC.Types.I# y1_s8aep [Occ=Once] ->
                                            case <# [x1_s8aen y1_s8aep] of {
                                              __DEFAULT -> wild_s8aea;
                                              1# -> wild1_s8aee;
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fOrdBufferMode_$c>=
  :: GHC.IO.Handle.Types.BufferMode
     -> GHC.IO.Handle.Types.BufferMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8aer b_s8aes]
        case a_s8aer of {
          GHC.IO.Handle.Types.NoBuffering ->
              case b_s8aes of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Handle.Types.NoBuffering -> GHC.Types.True [];
              };
          GHC.IO.Handle.Types.LineBuffering ->
              case b_s8aes of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Handle.Types.BlockBuffering _ [Occ=Dead] ->
                    GHC.Types.False [];
              };
          GHC.IO.Handle.Types.BlockBuffering a1_s8aex [Occ=Once!] ->
              case b_s8aes of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Handle.Types.BlockBuffering b1_s8aez [Occ=Once*!] ->
                    case a1_s8aex of {
                      GHC.Base.Nothing ->
                          case b1_s8aez of {
                            GHC.Base.Nothing -> GHC.Types.True [];
                            GHC.Base.Just _ [Occ=Dead] -> GHC.Types.False [];
                          };
                      GHC.Base.Just a2_s8aeD [Occ=Once!] ->
                          case b1_s8aez of {
                            GHC.Base.Nothing -> GHC.Types.True [];
                            GHC.Base.Just b2_s8aeF [Occ=Once!] ->
                                case a2_s8aeD of {
                                  GHC.Types.I# x_s8aeH [Occ=Once] ->
                                      case b2_s8aeF of {
                                        GHC.Types.I# y_s8aeJ [Occ=Once] ->
                                            case <# [x_s8aeH y_s8aeJ] of {
                                              __DEFAULT -> GHC.Types.True [];
                                              1# -> GHC.Types.False [];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fOrdBufferMode_$c>
  :: GHC.IO.Handle.Types.BufferMode
     -> GHC.IO.Handle.Types.BufferMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8aeL b_s8aeM]
        GHC.IO.Handle.Types.$fOrdBufferMode_$c< b_s8aeM a_s8aeL;

GHC.IO.Handle.Types.$fOrdBufferMode_$cmin
  :: GHC.IO.Handle.Types.BufferMode
     -> GHC.IO.Handle.Types.BufferMode -> GHC.IO.Handle.Types.BufferMode
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s8aeN y_s8aeO]
        case y_s8aeO of wild_s8aeP {
          GHC.IO.Handle.Types.NoBuffering ->
              case x_s8aeN of {
                __DEFAULT -> GHC.IO.Handle.Types.NoBuffering [];
              };
          GHC.IO.Handle.Types.LineBuffering ->
              case x_s8aeN of wild1_s8aeR {
                __DEFAULT -> wild1_s8aeR;
                GHC.IO.Handle.Types.BlockBuffering _ [Occ=Dead] ->
                    GHC.IO.Handle.Types.LineBuffering [];
              };
          GHC.IO.Handle.Types.BlockBuffering a1_s8aeT [Occ=Once!] ->
              case x_s8aeN of wild1_s8aeU {
                __DEFAULT -> wild1_s8aeU;
                GHC.IO.Handle.Types.BlockBuffering b1_s8aeV [Occ=Once*!] ->
                    case a1_s8aeT of {
                      GHC.Base.Nothing ->
                          case b1_s8aeV of {
                            GHC.Base.Nothing -> wild1_s8aeU;
                            GHC.Base.Just _ [Occ=Dead] -> wild_s8aeP;
                          };
                      GHC.Base.Just a2_s8aeZ [Occ=Once!] ->
                          case b1_s8aeV of {
                            GHC.Base.Nothing -> wild1_s8aeU;
                            GHC.Base.Just b2_s8af1 [Occ=Once!] ->
                                case a2_s8aeZ of {
                                  GHC.Types.I# x1_s8af3 [Occ=Once] ->
                                      case b2_s8af1 of {
                                        GHC.Types.I# y1_s8af5 [Occ=Once] ->
                                            case <# [x1_s8af3 y1_s8af5] of {
                                              __DEFAULT -> wild1_s8aeU;
                                              1# -> wild_s8aeP;
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fOrdBufferMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.IO.Handle.Types.BufferMode
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.IO.Handle.Types.$fEqBufferMode
                                      GHC.IO.Handle.Types.$fOrdBufferMode_$ccompare
                                      GHC.IO.Handle.Types.$fOrdBufferMode_$c<
                                      GHC.IO.Handle.Types.$fOrdBufferMode_$c<=
                                      GHC.IO.Handle.Types.$fOrdBufferMode_$c>
                                      GHC.IO.Handle.Types.$fOrdBufferMode_$c>=
                                      GHC.IO.Handle.Types.$fOrdBufferMode_$cmax
                                      GHC.IO.Handle.Types.$fOrdBufferMode_$cmin];

GHC.IO.Handle.Types.haOtherSide
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s8af7]
        case ds_s8af7 of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds9_s8afo [Occ=Once] ->
              ds9_s8afo;
        };

GHC.IO.Handle.Types.haOutputNL
  :: GHC.IO.Handle.Types.Handle__ -> GHC.IO.Handle.Types.Newline
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s8afp]
        case ds_s8afp of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds8_s8afF [Occ=Once]
                                       _ [Occ=Dead] ->
              ds8_s8afF;
        };

GHC.IO.Handle.Types.haInputNL
  :: GHC.IO.Handle.Types.Handle__ -> GHC.IO.Handle.Types.Newline
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s8afH]
        case ds_s8afH of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds7_s8afW [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              ds7_s8afW;
        };

GHC.IO.Handle.Types.haCodec
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s8afZ]
        case ds_s8afZ of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds6_s8agd [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              ds6_s8agd;
        };

GHC.IO.Handle.Types.haDecoder :: ()
[GblId[[RecSel(naughty)]], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE ()! [];

GHC.IO.Handle.Types.haEncoder :: ()
[GblId[[RecSel(naughty)]], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE ()! [];

GHC.IO.Handle.Types.haBuffers
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IORef.IORef
          (GHC.IO.Handle.Types.BufferList GHC.IO.Buffer.CharBufElem)
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>m,
 Unf=OtherCon []] =
    [] \r [ds_s8agh]
        case ds_s8agh of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       dt3_s8ags [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              GHC.STRef.STRef [dt3_s8ags];
        };

GHC.IO.Handle.Types.haCharBuffer
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IORef.IORef (GHC.IO.Buffer.Buffer GHC.IO.Buffer.CharBufElem)
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>m,
 Unf=OtherCon []] =
    [] \r [ds_s8agz]
        case ds_s8agz of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       dt2_s8agJ [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              GHC.STRef.STRef [dt2_s8agJ];
        };

GHC.IO.Handle.Types.haLastDecode :: ()
[GblId[[RecSel(naughty)]], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE ()! [];

GHC.IO.Handle.Types.haBufferMode
  :: GHC.IO.Handle.Types.Handle__ -> GHC.IO.Handle.Types.BufferMode
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s8agR]
        case ds_s8agR of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds3_s8agZ [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              ds3_s8agZ;
        };

GHC.IO.Handle.Types.haByteBuffer
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IORef.IORef (GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>m,
 Unf=OtherCon []] =
    [] \r [ds_s8ah9]
        case ds_s8ah9 of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       dt_s8ahg [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              GHC.STRef.STRef [dt_s8ahg];
        };

GHC.IO.Handle.Types.haType
  :: GHC.IO.Handle.Types.Handle__ -> GHC.IO.Handle.Types.HandleType
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s8ahr]
        case ds_s8ahr of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds2_s8ahx [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              ds2_s8ahx;
        };

GHC.IO.Handle.Types.haDevice :: ()
[GblId[[RecSel(naughty)]], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE ()! [];

GHC.IO.Handle.Types.outputNL
  :: GHC.IO.Handle.Types.NewlineMode -> GHC.IO.Handle.Types.Newline
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LS),1*U(A,1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_s8ahJ]
        case ds_s8ahJ of {
          GHC.IO.Handle.Types.NewlineMode _ [Occ=Dead]
                                          ds2_s8ahM [Occ=Once] ->
              ds2_s8ahM;
        };

GHC.IO.Handle.Types.inputNL
  :: GHC.IO.Handle.Types.NewlineMode -> GHC.IO.Handle.Types.Newline
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,A)>,
 Unf=OtherCon []] =
    [] \r [ds_s8ahN]
        case ds_s8ahN of {
          GHC.IO.Handle.Types.NewlineMode ds1_s8ahP [Occ=Once]
                                          _ [Occ=Dead] ->
              ds1_s8ahP;
        };

GHC.IO.Handle.Types.isReadableHandleType
  :: GHC.IO.Handle.Types.HandleType -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s8ahR]
        case ds_s8ahR of {
          __DEFAULT -> GHC.Types.False [];
          GHC.IO.Handle.Types.ReadHandle -> GHC.Types.True [];
          GHC.IO.Handle.Types.ReadWriteHandle -> GHC.Types.True [];
        };

GHC.IO.Handle.Types.isWritableHandleType
  :: GHC.IO.Handle.Types.HandleType -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s8ahT]
        case ds_s8ahT of {
          __DEFAULT -> GHC.Types.False [];
          GHC.IO.Handle.Types.WriteHandle -> GHC.Types.True [];
          GHC.IO.Handle.Types.AppendHandle -> GHC.Types.True [];
          GHC.IO.Handle.Types.ReadWriteHandle -> GHC.Types.True [];
        };

GHC.IO.Handle.Types.isReadWriteHandleType
  :: GHC.IO.Handle.Types.HandleType -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s8ahV]
        case ds_s8ahV of {
          __DEFAULT -> GHC.Types.False [];
          GHC.IO.Handle.Types.ReadWriteHandle -> GHC.Types.True [];
        };

GHC.IO.Handle.Types.nativeNewline :: GHC.IO.Handle.Types.Newline
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.LF! [];

GHC.IO.Handle.Types.universalNewlineMode
  :: GHC.IO.Handle.Types.NewlineMode
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.NewlineMode! [GHC.IO.Handle.Types.CRLF
                                                    GHC.IO.Handle.Types.LF];

GHC.IO.Handle.Types.nativeNewlineMode
  :: GHC.IO.Handle.Types.NewlineMode
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.NewlineMode! [GHC.IO.Handle.Types.LF
                                                    GHC.IO.Handle.Types.LF];

GHC.IO.Handle.Types.noNewlineTranslation
  :: GHC.IO.Handle.Types.NewlineMode
[GblId, Str=m, Unf=OtherCon []] =
    [] \u [] GHC.IO.Handle.Types.nativeNewlineMode;

GHC.IO.Handle.Types.showHandle1 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "{handle: "#;

GHC.IO.Handle.Types.showHandle
  :: GHC.IO.FilePath -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [file_s8ahX eta_s8ahY]
        let {
          sat_s8ai0 [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [file_s8ahX eta_s8ahY] \u []
                  let {
                    sat_s8ahZ [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                    [LclId] =
                        [eta_s8ahY] \s []
                            GHC.CString.unpackAppendCString#
                                GHC.IO.Handle.Types.$fReadNewlineMode5 eta_s8ahY;
                  } in  GHC.Base.++ file_s8ahX sat_s8ahZ;
        } in 
          GHC.CString.unpackAppendCString#
              GHC.IO.Handle.Types.showHandle1 sat_s8ai0;

GHC.IO.Handle.Types.$fShowHandle_$cshowsPrec
  :: GHC.Types.Int -> GHC.IO.Handle.Types.Handle -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_s8ai1 ds1_s8ai2 eta_s8ai3]
        case ds1_s8ai2 of {
          GHC.IO.Handle.Types.FileHandle file_s8ai5 [Occ=Once]
                                         _ [Occ=Dead] ->
              GHC.IO.Handle.Types.showHandle file_s8ai5 eta_s8ai3;
          GHC.IO.Handle.Types.DuplexHandle file_s8ai7 [Occ=Once]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              GHC.IO.Handle.Types.showHandle file_s8ai7 eta_s8ai3;
        };

GHC.IO.Handle.Types.$fShowHandle_$cshow
  :: GHC.IO.Handle.Types.Handle -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s8aia]
        case x_s8aia of {
          GHC.IO.Handle.Types.FileHandle file_s8aic [Occ=Once]
                                         _ [Occ=Dead] ->
              let {
                sat_s8aie [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [file_s8aic] \u []
                        GHC.Base.++ file_s8aic GHC.IO.Handle.Types.$fReadNewlineMode4;
              } in 
                GHC.CString.unpackAppendCString#
                    GHC.IO.Handle.Types.showHandle1 sat_s8aie;
          GHC.IO.Handle.Types.DuplexHandle file_s8aif [Occ=Once]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              let {
                sat_s8aii [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [file_s8aif] \u []
                        GHC.Base.++ file_s8aif GHC.IO.Handle.Types.$fReadNewlineMode4;
              } in 
                GHC.CString.unpackAppendCString#
                    GHC.IO.Handle.Types.showHandle1 sat_s8aii;
        };

GHC.IO.Handle.Types.$fShowHandle1
  :: GHC.IO.Handle.Types.Handle -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_s8aij eta_s8aik]
        case ds_s8aij of {
          GHC.IO.Handle.Types.FileHandle file_s8aim [Occ=Once]
                                         _ [Occ=Dead] ->
              GHC.IO.Handle.Types.showHandle file_s8aim eta_s8aik;
          GHC.IO.Handle.Types.DuplexHandle file_s8aio [Occ=Once]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              GHC.IO.Handle.Types.showHandle file_s8aio eta_s8aik;
        };

GHC.IO.Handle.Types.$fShowHandle_$cshowList
  :: [GHC.IO.Handle.Types.Handle] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s8air s_s8ais]
        GHC.Show.showList__
            GHC.IO.Handle.Types.$fShowHandle1 ls_s8air s_s8ais;

GHC.IO.Handle.Types.$fShowHandle [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Handle.Types.Handle
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Handle.Types.$fShowHandle_$cshowsPrec
                                    GHC.IO.Handle.Types.$fShowHandle_$cshow
                                    GHC.IO.Handle.Types.$fShowHandle_$cshowList];

GHC.IO.Handle.Types.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.Handle.Types.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$trModule4];

GHC.IO.Handle.Types.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Handle.Types"#;

GHC.IO.Handle.Types.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$trModule2];

GHC.IO.Handle.Types.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Handle.Types.$trModule3
                                     GHC.IO.Handle.Types.$trModule1];

$krep_r8a59 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep1_r8a5a :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Encoding.Types.$tcTextEncoding
                                              GHC.Types.[]];

$krep2_r8a5b :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Word.$tcWord8
                                              GHC.Types.[]];

$krep3_r8a5c :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep4_r8a5d :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r8a59 GHC.Types.[]];

$krep5_r8a5e :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep4_r8a5d];

$krep6_r8a5f :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r8a5a GHC.Types.[]];

$krep7_r8a5g :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep6_r8a5f];

$krep8_r8a5h :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_r8a5c GHC.Types.[]];

$krep9_r8a5i :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Buffer.$tcBuffer
                                              $krep8_r8a5h];

$krep10_r8a5j :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep9_r8a5i GHC.Types.[]];

$krep11_r8a5k :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IORef.$tcIORef
                                              $krep10_r8a5j];

$krep12_r8a5l :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r8a5b GHC.Types.[]];

$krep13_r8a5m :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Buffer.$tcBuffer
                                              $krep12_r8a5l];

$krep14_r8a5n :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep13_r8a5m GHC.Types.[]];

$krep15_r8a5o :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IORef.$tcIORef
                                              $krep14_r8a5n];

$krep16_r8a5p :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep8_r8a5h];

$krep17_r8a5q :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [2#];

$krep18_r8a5r :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep17_r8a5q GHC.Types.[]];

$krep19_r8a5s :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_r8a5c $krep18_r8a5r];

$krep20_r8a5t :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r8a5b $krep19_r8a5s];

$krep21_r8a5u :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Encoding.Types.$tcBufferCodec
                                              $krep20_r8a5t];

$krep22_r8a5v :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep21_r8a5u GHC.Types.[]];

$krep23_r8a5w :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep22_r8a5v];

$krep24_r8a5x :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep17_r8a5q $krep14_r8a5n];

$krep25_r8a5y :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,)
                                              $krep24_r8a5x];

$krep26_r8a5z :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep25_r8a5y GHC.Types.[]];

$krep27_r8a5A :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IORef.$tcIORef
                                              $krep26_r8a5z];

$krep28_r8a5B :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [1#];

$krep29_r8a5C :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep28_r8a5B GHC.Types.[]];

$krep30_r8a5D :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r8a5b $krep29_r8a5C];

$krep31_r8a5E :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_r8a5c $krep30_r8a5D];

$krep32_r8a5F :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Encoding.Types.$tcBufferCodec
                                              $krep31_r8a5E];

$krep33_r8a5G :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep32_r8a5F GHC.Types.[]];

$krep34_r8a5H :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep33_r8a5G];

$krep35_r8a5I :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep36_r8a5J :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep35_r8a5I GHC.Types.[]];

$krep37_r8a5K :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.ForeignPtr.$tcForeignPtr
                                              $krep36_r8a5J];

$krep38_r8a5L :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Types.krep$* $krep36_r8a5J];

$krep39_r8a5M :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.Typeable.Internal.$tcTypeable
                                              $krep38_r8a5L];

$krep40_r8a5N :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Device.$tcIODevice
                                              $krep36_r8a5J];

$krep41_r8a5O :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.BufferedIO.$tcBufferedIO
                                              $krep36_r8a5J];

GHC.IO.Handle.Types.$tcBufferList2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BufferList"#;

GHC.IO.Handle.Types.$tcBufferList1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tcBufferList2];

GHC.IO.Handle.Types.$tcBufferList :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16602278556585116844##
                                    18164509953320487254##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tcBufferList1
                                    0#
                                    GHC.Types.krep$*Arr*];

GHC.IO.Handle.Types.$tc'BufferListNil1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcBufferList
                                              $krep36_r8a5J];

GHC.IO.Handle.Types.$tc'BufferListNil3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BufferListNil"#;

GHC.IO.Handle.Types.$tc'BufferListNil2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'BufferListNil3];

GHC.IO.Handle.Types.$tc'BufferListNil :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1776148480580179033##
                                    13181184993065174936##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'BufferListNil2
                                    1#
                                    GHC.IO.Handle.Types.$tc'BufferListNil1];

$krep42_r8a5P :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.IO.Handle.Types.$tc'BufferListNil1
                                         GHC.IO.Handle.Types.$tc'BufferListNil1];

GHC.IO.Handle.Types.$tc'BufferListCons1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep37_r8a5K $krep42_r8a5P];

GHC.IO.Handle.Types.$tc'BufferListCons3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BufferListCons"#;

GHC.IO.Handle.Types.$tc'BufferListCons2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'BufferListCons3];

GHC.IO.Handle.Types.$tc'BufferListCons :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17252346539814354939##
                                    274626690118510806##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'BufferListCons2
                                    1#
                                    GHC.IO.Handle.Types.$tc'BufferListCons1];

$krep43_r8a5Q :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcBufferList
                                              $krep8_r8a5h];

$krep44_r8a5R :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep43_r8a5Q GHC.Types.[]];

$krep45_r8a5S :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IORef.$tcIORef
                                              $krep44_r8a5R];

GHC.IO.Handle.Types.$tcHandleType2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "HandleType"#;

GHC.IO.Handle.Types.$tcHandleType1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tcHandleType2];

GHC.IO.Handle.Types.$tcHandleType :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12652050740177317592##
                                    15012172050125063359##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tcHandleType1
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.Handle.Types.$tc'AppendHandle1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcHandleType
                                              GHC.Types.[]];

GHC.IO.Handle.Types.$tc'ClosedHandle2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ClosedHandle"#;

GHC.IO.Handle.Types.$tc'ClosedHandle1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'ClosedHandle2];

GHC.IO.Handle.Types.$tc'ClosedHandle :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3827246897052092772##
                                    908733983357893198##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'ClosedHandle1
                                    0#
                                    GHC.IO.Handle.Types.$tc'AppendHandle1];

GHC.IO.Handle.Types.$tc'SemiClosedHandle2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'SemiClosedHandle"#;

GHC.IO.Handle.Types.$tc'SemiClosedHandle1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'SemiClosedHandle2];

GHC.IO.Handle.Types.$tc'SemiClosedHandle :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9212351547956271402##
                                    6570718180183054490##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'SemiClosedHandle1
                                    0#
                                    GHC.IO.Handle.Types.$tc'AppendHandle1];

GHC.IO.Handle.Types.$tc'ReadHandle2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ReadHandle"#;

GHC.IO.Handle.Types.$tc'ReadHandle1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'ReadHandle2];

GHC.IO.Handle.Types.$tc'ReadHandle :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [269968663592081974##
                                    17473723309710900549##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'ReadHandle1
                                    0#
                                    GHC.IO.Handle.Types.$tc'AppendHandle1];

GHC.IO.Handle.Types.$tc'WriteHandle2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'WriteHandle"#;

GHC.IO.Handle.Types.$tc'WriteHandle1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'WriteHandle2];

GHC.IO.Handle.Types.$tc'WriteHandle :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [18024523813608199082##
                                    4783872735135983851##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'WriteHandle1
                                    0#
                                    GHC.IO.Handle.Types.$tc'AppendHandle1];

GHC.IO.Handle.Types.$tc'AppendHandle3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'AppendHandle"#;

GHC.IO.Handle.Types.$tc'AppendHandle2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'AppendHandle3];

GHC.IO.Handle.Types.$tc'AppendHandle :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [18423480119042393547##
                                    8911069045719960050##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'AppendHandle2
                                    0#
                                    GHC.IO.Handle.Types.$tc'AppendHandle1];

GHC.IO.Handle.Types.$tc'ReadWriteHandle2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ReadWriteHandle"#;

GHC.IO.Handle.Types.$tc'ReadWriteHandle1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'ReadWriteHandle2];

GHC.IO.Handle.Types.$tc'ReadWriteHandle :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6962298179673541916##
                                    7858738479804269456##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'ReadWriteHandle1
                                    0#
                                    GHC.IO.Handle.Types.$tc'AppendHandle1];

GHC.IO.Handle.Types.$tcBufferMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BufferMode"#;

GHC.IO.Handle.Types.$tcBufferMode1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tcBufferMode2];

GHC.IO.Handle.Types.$tcBufferMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2181253694666364469##
                                    18094997560331273583##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tcBufferMode1
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.Handle.Types.$tc'LineBuffering1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcBufferMode
                                              GHC.Types.[]];

GHC.IO.Handle.Types.$tc'NoBuffering2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'NoBuffering"#;

GHC.IO.Handle.Types.$tc'NoBuffering1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'NoBuffering2];

GHC.IO.Handle.Types.$tc'NoBuffering :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1829914617507863771##
                                    11519122601481432262##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'NoBuffering1
                                    0#
                                    GHC.IO.Handle.Types.$tc'LineBuffering1];

GHC.IO.Handle.Types.$tc'LineBuffering3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'LineBuffering"#;

GHC.IO.Handle.Types.$tc'LineBuffering2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'LineBuffering3];

GHC.IO.Handle.Types.$tc'LineBuffering :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6417231512954421547##
                                    14761155862500981941##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'LineBuffering2
                                    0#
                                    GHC.IO.Handle.Types.$tc'LineBuffering1];

GHC.IO.Handle.Types.$tc'BlockBuffering1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep5_r8a5e
                                         GHC.IO.Handle.Types.$tc'LineBuffering1];

GHC.IO.Handle.Types.$tc'BlockBuffering3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BlockBuffering"#;

GHC.IO.Handle.Types.$tc'BlockBuffering2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'BlockBuffering3];

GHC.IO.Handle.Types.$tc'BlockBuffering :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [704611490471072872##
                                    15656058643765081689##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'BlockBuffering2
                                    0#
                                    GHC.IO.Handle.Types.$tc'BlockBuffering1];

GHC.IO.Handle.Types.$tcNewline2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Newline"#;

GHC.IO.Handle.Types.$tcNewline1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tcNewline2];

GHC.IO.Handle.Types.$tcNewline :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4144517894815066994##
                                    10872055347860317487##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tcNewline1
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.Handle.Types.$tc'CRLF1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcNewline
                                              GHC.Types.[]];

GHC.IO.Handle.Types.$tc'LF2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'LF"#;

GHC.IO.Handle.Types.$tc'LF1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'LF2];

GHC.IO.Handle.Types.$tc'LF :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [8352565500432618804##
                                    14951155965269318914##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'LF1
                                    0#
                                    GHC.IO.Handle.Types.$tc'CRLF1];

GHC.IO.Handle.Types.$tc'CRLF3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'CRLF"#;

GHC.IO.Handle.Types.$tc'CRLF2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'CRLF3];

GHC.IO.Handle.Types.$tc'CRLF :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12041259567283068515##
                                    3210182148185771829##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'CRLF2
                                    0#
                                    GHC.IO.Handle.Types.$tc'CRLF1];

GHC.IO.Handle.Types.$tcHandle__2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Handle__"#;

GHC.IO.Handle.Types.$tcHandle__1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tcHandle__2];

GHC.IO.Handle.Types.$tcHandle__ :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [10675922960094776064##
                                    10563785792974977547##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tcHandle__1
                                    0#
                                    GHC.Types.krep$*];

$krep46_r8a5T :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcHandle__
                                              GHC.Types.[]];

$krep47_r8a5U :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep46_r8a5T GHC.Types.[]];

$krep48_r8a5V :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.MVar.$tcMVar
                                              $krep47_r8a5U];

$krep49_r8a5W :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep48_r8a5V GHC.Types.[]];

$krep50_r8a5X :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep49_r8a5W];

$krep51_r8a5Y :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep50_r8a5X $krep46_r8a5T];

$krep52_r8a5Z :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.IO.Handle.Types.$tc'CRLF1
                                         $krep51_r8a5Y];

$krep53_r8a60 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.IO.Handle.Types.$tc'CRLF1
                                         $krep52_r8a5Z];

$krep54_r8a61 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep7_r8a5g $krep53_r8a60];

$krep55_r8a62 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep23_r8a5w $krep54_r8a61];

$krep56_r8a63 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep34_r8a5H $krep55_r8a62];

$krep57_r8a64 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep45_r8a5S $krep56_r8a63];

$krep58_r8a65 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep11_r8a5k $krep57_r8a64];

$krep59_r8a66 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep27_r8a5A $krep58_r8a65];

$krep60_r8a67 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.IO.Handle.Types.$tc'LineBuffering1
                                         $krep59_r8a66];

$krep61_r8a68 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep15_r8a5o $krep60_r8a67];

$krep62_r8a69 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.IO.Handle.Types.$tc'AppendHandle1
                                         $krep61_r8a68];

$krep63_r8a6a :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep35_r8a5I $krep62_r8a69];

$krep64_r8a6b :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep39_r8a5M $krep63_r8a6a];

$krep65_r8a6c :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep41_r8a5O $krep64_r8a6b];

GHC.IO.Handle.Types.$tc'Handle__1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep40_r8a5N $krep65_r8a6c];

GHC.IO.Handle.Types.$tc'Handle__3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Handle__"#;

GHC.IO.Handle.Types.$tc'Handle__2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'Handle__3];

GHC.IO.Handle.Types.$tc'Handle__ :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15400920814375205416##
                                    14458810719499819570##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'Handle__2
                                    3#
                                    GHC.IO.Handle.Types.$tc'Handle__1];

GHC.IO.Handle.Types.$tcHandle2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Handle"#;

GHC.IO.Handle.Types.$tcHandle1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tcHandle2];

GHC.IO.Handle.Types.$tcHandle :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6808292778723485333##
                                    9239299165073943659##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tcHandle1
                                    0#
                                    GHC.Types.krep$*];

$krep66_r8a6d :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcHandle
                                              GHC.Types.[]];

$krep67_r8a6e :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep48_r8a5V $krep66_r8a6d];

$krep68_r8a6f :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep48_r8a5V $krep67_r8a6e];

GHC.IO.Handle.Types.$tc'DuplexHandle1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep16_r8a5p $krep68_r8a6f];

GHC.IO.Handle.Types.$tc'DuplexHandle3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'DuplexHandle"#;

GHC.IO.Handle.Types.$tc'DuplexHandle2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'DuplexHandle3];

GHC.IO.Handle.Types.$tc'DuplexHandle :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [477065760828861081##
                                    4557316572761143129##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'DuplexHandle2
                                    0#
                                    GHC.IO.Handle.Types.$tc'DuplexHandle1];

GHC.IO.Handle.Types.$tc'FileHandle1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep16_r8a5p $krep67_r8a6e];

GHC.IO.Handle.Types.$tc'FileHandle3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'FileHandle"#;

GHC.IO.Handle.Types.$tc'FileHandle2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'FileHandle3];

GHC.IO.Handle.Types.$tc'FileHandle :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [5544613225695748436##
                                    8829945929965735507##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'FileHandle2
                                    0#
                                    GHC.IO.Handle.Types.$tc'FileHandle1];

GHC.IO.Handle.Types.$tcNewlineMode1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$fReadNewlineMode17];

GHC.IO.Handle.Types.$tcNewlineMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17953040817059389032##
                                    12498949339099960838##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tcNewlineMode1
                                    0#
                                    GHC.Types.krep$*];

$krep69_r8a6g :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcNewlineMode
                                              GHC.Types.[]];

$krep70_r8a6h :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.IO.Handle.Types.$tc'CRLF1
                                         $krep69_r8a6g];

GHC.IO.Handle.Types.$tc'NewlineMode1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.IO.Handle.Types.$tc'CRLF1
                                         $krep70_r8a6h];

GHC.IO.Handle.Types.$tc'NewlineMode3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'NewlineMode"#;

GHC.IO.Handle.Types.$tc'NewlineMode2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'NewlineMode3];

GHC.IO.Handle.Types.$tc'NewlineMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4266278501114659446##
                                    17947462423734457010##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'NewlineMode2
                                    0#
                                    GHC.IO.Handle.Types.$tc'NewlineMode1];

GHC.IO.Handle.Types.checkHandleInvariants1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><S,U>, Unf=OtherCon []] =
    [] \r [ds_s8ait void_0E] Unit# [GHC.Tuple.()];

GHC.IO.Handle.Types.checkHandleInvariants
  :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.Types.checkHandleInvariants1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Types.NewlineMode
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.IO.Handle.Types.NewlineMode
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.IO.Handle.Types.NewlineMode [eta_B2 eta_B1];

GHC.IO.Handle.Types.LF :: GHC.IO.Handle.Types.Newline
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.LF! [];

GHC.IO.Handle.Types.CRLF :: GHC.IO.Handle.Types.Newline
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.CRLF! [];

GHC.IO.Handle.Types.NoBuffering :: GHC.IO.Handle.Types.BufferMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.NoBuffering! [];

GHC.IO.Handle.Types.LineBuffering :: GHC.IO.Handle.Types.BufferMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.LineBuffering! [];

GHC.IO.Handle.Types.BlockBuffering
  :: GHC.Base.Maybe GHC.Types.Int -> GHC.IO.Handle.Types.BufferMode
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m3,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.IO.Handle.Types.BlockBuffering [eta_B1];

GHC.IO.Handle.Types.ClosedHandle :: GHC.IO.Handle.Types.HandleType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.ClosedHandle! [];

GHC.IO.Handle.Types.SemiClosedHandle
  :: GHC.IO.Handle.Types.HandleType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.SemiClosedHandle! [];

GHC.IO.Handle.Types.ReadHandle :: GHC.IO.Handle.Types.HandleType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.ReadHandle! [];

GHC.IO.Handle.Types.WriteHandle :: GHC.IO.Handle.Types.HandleType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.WriteHandle! [];

GHC.IO.Handle.Types.AppendHandle :: GHC.IO.Handle.Types.HandleType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.AppendHandle! [];

GHC.IO.Handle.Types.ReadWriteHandle
  :: GHC.IO.Handle.Types.HandleType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.ReadWriteHandle! [];

GHC.IO.Handle.Types.BufferListNil
  :: forall e. GHC.IO.Handle.Types.BufferList e
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.BufferListNil! [];

GHC.IO.Handle.Types.BufferListCons
  :: forall e.
     GHC.IO.Buffer.RawBuffer e
     -> GHC.IO.Handle.Types.BufferList e
     -> GHC.IO.Handle.Types.BufferList e
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.IO.Handle.Types.BufferListCons [eta_B2 eta_B1];

GHC.IO.Handle.Types.Handle__
  :: forall dev enc_state dec_state.
     (GHC.IO.Device.IODevice dev, GHC.IO.BufferedIO.BufferedIO dev,
      Data.Typeable.Internal.Typeable dev) =>
     dev
     -> GHC.IO.Handle.Types.HandleType
     -> GHC.Prim.MutVar#
          GHC.Prim.RealWorld (GHC.IO.Buffer.Buffer GHC.Word.Word8)
     -> GHC.IO.Handle.Types.BufferMode
     -> GHC.Prim.MutVar#
          GHC.Prim.RealWorld (dec_state, GHC.IO.Buffer.Buffer GHC.Word.Word8)
     -> GHC.Prim.MutVar#
          GHC.Prim.RealWorld (GHC.IO.Buffer.Buffer GHC.IO.Buffer.CharBufElem)
     -> GHC.Prim.MutVar#
          GHC.Prim.RealWorld
          (GHC.IO.Handle.Types.BufferList GHC.IO.Buffer.CharBufElem)
     -> GHC.Base.Maybe (GHC.IO.Encoding.Types.TextEncoder enc_state)
     -> GHC.Base.Maybe (GHC.IO.Encoding.Types.TextDecoder dec_state)
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
     -> GHC.IO.Handle.Types.Handle__
[GblId[DataCon],
 Arity=16,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_Bg
           eta_Bf
           eta_Be
           eta_Bd
           eta_Bc
           eta_Bb
           eta_Ba
           eta_B9
           eta_B8
           eta_B7
           eta_B6
           eta_B5
           eta_B4
           eta_B3
           eta_B2
           eta_B1]
        GHC.IO.Handle.Types.Handle__ [eta_Bg
                                      eta_Bf
                                      eta_Be
                                      eta_Bd
                                      eta_Bc
                                      eta_Bb
                                      eta_Ba
                                      eta_B9
                                      eta_B8
                                      eta_B7
                                      eta_B6
                                      eta_B5
                                      eta_B4
                                      eta_B3
                                      eta_B2
                                      eta_B1];

GHC.IO.Handle.Types.FileHandle
  :: GHC.IO.FilePath
     -> GHC.Prim.MVar# GHC.Prim.RealWorld GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Handle.Types.Handle
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m1,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.IO.Handle.Types.FileHandle [eta_B2 eta_B1];

GHC.IO.Handle.Types.DuplexHandle
  :: GHC.IO.FilePath
     -> GHC.Prim.MVar# GHC.Prim.RealWorld GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.MVar# GHC.Prim.RealWorld GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Handle.Types.Handle
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.Types.DuplexHandle [eta_B3 eta_B2 eta_B1];


==================== Pre unarise: ====================
2018-03-16 16:03:21.854589242 UTC

GHC.IO.Handle.Types.$WHandle__ [InlPrag=INLINE[2]]
  :: forall dev enc_state dec_state.
     (GHC.IO.Device.IODevice dev, GHC.IO.BufferedIO.BufferedIO dev,
      Data.Typeable.Internal.Typeable dev) =>
     dev
     -> GHC.IO.Handle.Types.HandleType
     -> GHC.IORef.IORef (GHC.IO.Buffer.Buffer GHC.Word.Word8)
     -> GHC.IO.Handle.Types.BufferMode
     -> GHC.IORef.IORef (dec_state, GHC.IO.Buffer.Buffer GHC.Word.Word8)
     -> GHC.IORef.IORef (GHC.IO.Buffer.Buffer GHC.IO.Buffer.CharBufElem)
     -> GHC.IORef.IORef
          (GHC.IO.Handle.Types.BufferList GHC.IO.Buffer.CharBufElem)
     -> GHC.Base.Maybe (GHC.IO.Encoding.Types.TextEncoder enc_state)
     -> GHC.Base.Maybe (GHC.IO.Encoding.Types.TextDecoder dec_state)
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
     -> GHC.IO.Handle.Types.Handle__
[GblId[DataConWrapper],
 Arity=16,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><S,U><L,U><S,U><L,U><S,U><S,U><S,U><L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [dt_s8ee6
           dt_s8ee7
           dt_s8ee8
           dt_s8ee9
           dt_s8eea
           dt_s8eeb
           dt_s8eec
           dt_s8eed
           dt_s8eee
           dt_s8eef
           dt_s8eeg
           dt_s8eeh
           dt_s8eei
           dt_s8eej
           dt_s8eek
           dt_s8eel]
        case dt_s8ee9 of dt_s8eem {
          __DEFAULT ->
              case dt_s8eeb of {
                GHC.STRef.STRef dt_s8eeo [Occ=Once] ->
                    case dt_s8eed of {
                      GHC.STRef.STRef dt_s8eeq [Occ=Once] ->
                          case dt_s8eee of {
                            GHC.STRef.STRef dt_s8ees [Occ=Once] ->
                                case dt_s8eef of {
                                  GHC.STRef.STRef dt_s8eeu [Occ=Once] ->
                                      GHC.IO.Handle.Types.Handle__ [dt_s8ee6
                                                                    dt_s8ee7
                                                                    dt_s8ee8
                                                                    dt_s8eem
                                                                    dt_s8eea
                                                                    dt_s8eeo
                                                                    dt_s8eec
                                                                    dt_s8eeq
                                                                    dt_s8ees
                                                                    dt_s8eeu
                                                                    dt_s8eeg
                                                                    dt_s8eeh
                                                                    dt_s8eei
                                                                    dt_s8eej
                                                                    dt_s8eek
                                                                    dt_s8eel];
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$WFileHandle [InlPrag=INLINE[2]]
  :: GHC.IO.FilePath
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Handle.Types.Handle
[GblId[DataConWrapper],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S,U>m1,
 Unf=OtherCon []] =
    [] \r [dt_s8eev dt_s8eew]
        case dt_s8eew of {
          GHC.MVar.MVar dt_s8eey [Occ=Once] ->
              GHC.IO.Handle.Types.FileHandle [dt_s8eev dt_s8eey];
        };

GHC.IO.Handle.Types.$WDuplexHandle [InlPrag=INLINE[2]]
  :: GHC.IO.FilePath
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Handle.Types.Handle
[GblId[DataConWrapper],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><S,U><S,U>m2,
 Unf=OtherCon []] =
    [] \r [dt_s8eez dt_s8eeA dt_s8eeB]
        case dt_s8eeA of {
          GHC.MVar.MVar dt_s8eeD [Occ=Once] ->
              case dt_s8eeB of {
                GHC.MVar.MVar dt_s8eeF [Occ=Once] ->
                    GHC.IO.Handle.Types.DuplexHandle [dt_s8eez dt_s8eeD dt_s8eeF];
              };
        };

GHC.IO.Handle.Types.$fShowHandleType12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "closed"#;

GHC.IO.Handle.Types.$fShowHandleType11 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fShowHandleType12;

GHC.IO.Handle.Types.$fShowHandleType10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "semi-closed"#;

GHC.IO.Handle.Types.$fShowHandleType9 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fShowHandleType10;

GHC.IO.Handle.Types.$fShowHandleType8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "readable"#;

GHC.IO.Handle.Types.$fShowHandleType7 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fShowHandleType8;

GHC.IO.Handle.Types.$fShowHandleType6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "writable"#;

GHC.IO.Handle.Types.$fShowHandleType5 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fShowHandleType6;

GHC.IO.Handle.Types.$fShowHandleType4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "writable (append)"#;

GHC.IO.Handle.Types.$fShowHandleType3 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fShowHandleType4;

GHC.IO.Handle.Types.$fShowHandleType2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "read-writable"#;

GHC.IO.Handle.Types.$fShowHandleType1 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fShowHandleType2;

GHC.IO.Handle.Types.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.HandleType
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s8eeG w1_s8eeH]
        case w_s8eeG of {
          GHC.IO.Handle.Types.ClosedHandle ->
              GHC.Base.++ GHC.IO.Handle.Types.$fShowHandleType11 w1_s8eeH;
          GHC.IO.Handle.Types.SemiClosedHandle ->
              GHC.Base.++ GHC.IO.Handle.Types.$fShowHandleType9 w1_s8eeH;
          GHC.IO.Handle.Types.ReadHandle ->
              GHC.Base.++ GHC.IO.Handle.Types.$fShowHandleType7 w1_s8eeH;
          GHC.IO.Handle.Types.WriteHandle ->
              GHC.Base.++ GHC.IO.Handle.Types.$fShowHandleType5 w1_s8eeH;
          GHC.IO.Handle.Types.AppendHandle ->
              GHC.Base.++ GHC.IO.Handle.Types.$fShowHandleType3 w1_s8eeH;
          GHC.IO.Handle.Types.ReadWriteHandle ->
              GHC.Base.++ GHC.IO.Handle.Types.$fShowHandleType1 w1_s8eeH;
        };

GHC.IO.Handle.Types.$fShowHandleType_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int
     -> GHC.IO.Handle.Types.HandleType -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s8eeJ w1_s8eeK w2_s8eeL]
        GHC.IO.Handle.Types.$w$cshowsPrec w1_s8eeK w2_s8eeL;

GHC.IO.Handle.Types.$fShowHandleType_$cshow
  :: GHC.IO.Handle.Types.HandleType -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s8eeM]
        case x_s8eeM of {
          GHC.IO.Handle.Types.ClosedHandle ->
              GHC.IO.Handle.Types.$fShowHandleType11;
          GHC.IO.Handle.Types.SemiClosedHandle ->
              GHC.IO.Handle.Types.$fShowHandleType9;
          GHC.IO.Handle.Types.ReadHandle ->
              GHC.IO.Handle.Types.$fShowHandleType7;
          GHC.IO.Handle.Types.WriteHandle ->
              GHC.IO.Handle.Types.$fShowHandleType5;
          GHC.IO.Handle.Types.AppendHandle ->
              GHC.IO.Handle.Types.$fShowHandleType3;
          GHC.IO.Handle.Types.ReadWriteHandle ->
              GHC.IO.Handle.Types.$fShowHandleType1;
        };

GHC.IO.Handle.Types.$fShowHandleType_$cshowList
  :: [GHC.IO.Handle.Types.HandleType] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s8eeO s_s8eeP]
        GHC.Show.showList__
            GHC.IO.Handle.Types.$w$cshowsPrec ls_s8eeO s_s8eeP;

GHC.IO.Handle.Types.$fShowHandleType [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Handle.Types.HandleType
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Handle.Types.$fShowHandleType_$cshowsPrec
                                    GHC.IO.Handle.Types.$fShowHandleType_$cshow
                                    GHC.IO.Handle.Types.$fShowHandleType_$cshowList];

GHC.IO.Handle.Types.$fEqHandle_$c==
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Types.Handle -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s8eeQ ds1_s8eeR]
        case ds_s8eeQ of {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_s8eeU [Occ=Once] ->
              case ds1_s8eeR of {
                GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt1_s8eeX [Occ=Once] ->
                    case sameMVar# [dt_s8eeU dt1_s8eeX] of sat_s8eeY {
                      __DEFAULT -> tagToEnum# [sat_s8eeY];
                    };
                GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead] ->
                    GHC.Types.False [];
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_s8ef3 [Occ=Once]
                                           _ [Occ=Dead] ->
              case ds1_s8eeR of {
                GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] _ [Occ=Dead] ->
                    GHC.Types.False [];
                GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                 dt2_s8ef9 [Occ=Once]
                                                 _ [Occ=Dead] ->
                    case sameMVar# [dt_s8ef3 dt2_s8ef9] of sat_s8efb {
                      __DEFAULT -> tagToEnum# [sat_s8efb];
                    };
              };
        };

GHC.IO.Handle.Types.$fEqHandle_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Types.Handle -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s8efc eta1_s8efd]
        case eta_s8efc of {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_s8efg [Occ=Once] ->
              case eta1_s8efd of {
                GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt1_s8efj [Occ=Once] ->
                    case sameMVar# [dt_s8efg dt1_s8efj] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
                GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead] ->
                    GHC.Types.True [];
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_s8efp [Occ=Once]
                                           _ [Occ=Dead] ->
              case eta1_s8efd of {
                GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] _ [Occ=Dead] ->
                    GHC.Types.True [];
                GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                 dt2_s8efv [Occ=Once]
                                                 _ [Occ=Dead] ->
                    case sameMVar# [dt_s8efp dt2_s8efv] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.IO.Handle.Types.$fEqHandle [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.IO.Handle.Types.Handle
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.IO.Handle.Types.$fEqHandle_$c==
                                     GHC.IO.Handle.Types.$fEqHandle_$c/=];

GHC.IO.Handle.Types.$fReadNewline11 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LF"#;

GHC.IO.Handle.Types.$fReadNewline10 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadNewline11;

GHC.IO.Handle.Types.$fReadNewline7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "CRLF"#;

GHC.IO.Handle.Types.$fReadNewline6 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadNewline7;

GHC.IO.Handle.Types.$fShowNewline_$cshowsPrec
  :: GHC.Types.Int -> GHC.IO.Handle.Types.Newline -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_s8efy ds1_s8efz eta_s8efA]
        case ds1_s8efz of {
          GHC.IO.Handle.Types.LF ->
              GHC.Base.++ GHC.IO.Handle.Types.$fReadNewline10 eta_s8efA;
          GHC.IO.Handle.Types.CRLF ->
              GHC.Base.++ GHC.IO.Handle.Types.$fReadNewline6 eta_s8efA;
        };

GHC.IO.Handle.Types.$fShowNewline_$cshow
  :: GHC.IO.Handle.Types.Newline -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s8efC]
        case x_s8efC of {
          GHC.IO.Handle.Types.LF -> GHC.IO.Handle.Types.$fReadNewline10;
          GHC.IO.Handle.Types.CRLF -> GHC.IO.Handle.Types.$fReadNewline6;
        };

GHC.IO.Handle.Types.$fShowNewline1
  :: GHC.IO.Handle.Types.Newline -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_s8efE eta_s8efF]
        case ds_s8efE of {
          GHC.IO.Handle.Types.LF ->
              GHC.Base.++ GHC.IO.Handle.Types.$fReadNewline10 eta_s8efF;
          GHC.IO.Handle.Types.CRLF ->
              GHC.Base.++ GHC.IO.Handle.Types.$fReadNewline6 eta_s8efF;
        };

GHC.IO.Handle.Types.$fShowNewline_$cshowList
  :: [GHC.IO.Handle.Types.Newline] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s8efH s_s8efI]
        GHC.Show.showList__
            GHC.IO.Handle.Types.$fShowNewline1 ls_s8efH s_s8efI;

GHC.IO.Handle.Types.$fShowNewline [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Handle.Types.Newline
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Handle.Types.$fShowNewline_$cshowsPrec
                                    GHC.IO.Handle.Types.$fShowNewline_$cshow
                                    GHC.IO.Handle.Types.$fShowNewline_$cshowList];

GHC.IO.Handle.Types.$fShowNewlineMode4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NewlineMode {"#;

GHC.IO.Handle.Types.$fShowNewlineMode3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "inputNL = "#;

GHC.IO.Handle.Types.$fShowNewlineMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "outputNL = "#;

GHC.IO.Handle.Types.$fReadNewlineMode5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "}"#;

GHC.IO.Handle.Types.$w$cshowsPrec1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.Base.String
     -> GHC.Base.String
[GblId, Arity=4, Str=<S,U><L,1*U><L,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ww_s8efJ ww1_s8efK ww2_s8efL w_s8efM]
        let {
          p_s8efN [Occ=Once*!, Dmd=<L,1*C1(U)>] :: GHC.Show.ShowS
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              sat-only [ww1_s8efK ww2_s8efL] \r [x_s8efO]
                  let {
                    sat_s8efX [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [ww1_s8efK ww2_s8efL x_s8efO] \u []
                            let {
                              sat_s8efW [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [ww1_s8efK ww2_s8efL x_s8efO] \u []
                                      let {
                                        karg_s8efP [Occ=Once*, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                        [LclId] =
                                            [ww2_s8efL x_s8efO] \s []
                                                let {
                                                  sat_s8efU [Occ=Once, Dmd=<L,1*U>]
                                                    :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [ww2_s8efL x_s8efO] \s []
                                                          let {
                                                            sat_s8efT [Occ=Once] :: [GHC.Types.Char]
                                                            [LclId] =
                                                                [ww2_s8efL x_s8efO] \u []
                                                                    case ww2_s8efL of {
                                                                      GHC.IO.Handle.Types.LF ->
                                                                          let {
                                                                            sat_s8efR [Occ=Once,
                                                                                       Dmd=<L,1*U>]
                                                                              :: [GHC.Types.Char]
                                                                            [LclId] =
                                                                                [x_s8efO] \s []
                                                                                    GHC.CString.unpackAppendCString#
                                                                                        GHC.IO.Handle.Types.$fReadNewlineMode5
                                                                                        x_s8efO;
                                                                          } in 
                                                                            GHC.Base.++
                                                                                GHC.IO.Handle.Types.$fReadNewline10
                                                                                sat_s8efR;
                                                                      GHC.IO.Handle.Types.CRLF ->
                                                                          let {
                                                                            sat_s8efS [Occ=Once,
                                                                                       Dmd=<L,1*U>]
                                                                              :: [GHC.Types.Char]
                                                                            [LclId] =
                                                                                [x_s8efO] \s []
                                                                                    GHC.CString.unpackAppendCString#
                                                                                        GHC.IO.Handle.Types.$fReadNewlineMode5
                                                                                        x_s8efO;
                                                                          } in 
                                                                            GHC.Base.++
                                                                                GHC.IO.Handle.Types.$fReadNewline6
                                                                                sat_s8efS;
                                                                    };
                                                          } in 
                                                            GHC.CString.unpackAppendCString#
                                                                GHC.IO.Handle.Types.$fShowNewlineMode2
                                                                sat_s8efT;
                                                } in 
                                                  GHC.Base.++ GHC.Show.showCommaSpace1 sat_s8efU;
                                      } in 
                                        case ww1_s8efK of {
                                          GHC.IO.Handle.Types.LF ->
                                              GHC.Base.++
                                                  GHC.IO.Handle.Types.$fReadNewline10 karg_s8efP;
                                          GHC.IO.Handle.Types.CRLF ->
                                              GHC.Base.++
                                                  GHC.IO.Handle.Types.$fReadNewline6 karg_s8efP;
                                        };
                            } in 
                              GHC.CString.unpackAppendCString#
                                  GHC.IO.Handle.Types.$fShowNewlineMode3 sat_s8efW;
                  } in 
                    GHC.CString.unpackAppendCString#
                        GHC.IO.Handle.Types.$fShowNewlineMode4 sat_s8efX;
        } in 
          case >=# [ww_s8efJ 11#] of {
            __DEFAULT -> p_s8efN w_s8efM;
            1# ->
                let {
                  sat_s8eg0 [Occ=Once] :: [GHC.Types.Char]
                  [LclId] =
                      [w_s8efM p_s8efN] \u []
                          let {
                            sat_s8efZ [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                CCCS :! [GHC.Show.$fShow(,)2 w_s8efM];
                          } in  p_s8efN sat_s8efZ;
                } in  : [GHC.Show.$fShow(,)4 sat_s8eg0];
          };

GHC.IO.Handle.Types.$fShowNewlineMode_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int
     -> GHC.IO.Handle.Types.NewlineMode -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S,1*U(1*U,1*U)><L,U>,
 Unf=OtherCon []] =
    [] \r [w_s8eg1 w1_s8eg2 w2_s8eg3]
        case w_s8eg1 of {
          GHC.Types.I# ww1_s8eg5 [Occ=Once] ->
              case w1_s8eg2 of {
                GHC.IO.Handle.Types.NewlineMode ww3_s8eg7 [Occ=Once]
                                                ww4_s8eg8 [Occ=Once] ->
                    GHC.IO.Handle.Types.$w$cshowsPrec1
                        ww1_s8eg5 ww3_s8eg7 ww4_s8eg8 w2_s8eg3;
              };
        };

GHC.IO.Handle.Types.$fShowBufferMode2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.IO.Handle.Types.$fShowNewlineMode_$cshow
  :: GHC.IO.Handle.Types.NewlineMode -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U(1*U,1*U)>, Unf=OtherCon []] =
    [] \r [x_s8eg9]
        case x_s8eg9 of {
          GHC.IO.Handle.Types.NewlineMode ww1_s8egb [Occ=Once]
                                          ww2_s8egc [Occ=Once] ->
              GHC.IO.Handle.Types.$w$cshowsPrec1
                  0# ww1_s8egb ww2_s8egc GHC.Types.[];
        };

GHC.IO.Handle.Types.$fShowNewlineMode1
  :: GHC.IO.Handle.Types.NewlineMode -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U(1*U,1*U)><L,U>, Unf=OtherCon []] =
    [] \r [w_s8egd w1_s8ege]
        case w_s8egd of {
          GHC.IO.Handle.Types.NewlineMode ww1_s8egg [Occ=Once]
                                          ww2_s8egh [Occ=Once] ->
              GHC.IO.Handle.Types.$w$cshowsPrec1 0# ww1_s8egg ww2_s8egh w1_s8ege;
        };

GHC.IO.Handle.Types.$fShowNewlineMode_$cshowList
  :: [GHC.IO.Handle.Types.NewlineMode] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s8egi s_s8egj]
        GHC.Show.showList__
            GHC.IO.Handle.Types.$fShowNewlineMode1 ls_s8egi s_s8egj;

GHC.IO.Handle.Types.$fShowNewlineMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Handle.Types.NewlineMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Handle.Types.$fShowNewlineMode_$cshowsPrec
                                    GHC.IO.Handle.Types.$fShowNewlineMode_$cshow
                                    GHC.IO.Handle.Types.$fShowNewlineMode_$cshowList];

GHC.IO.Handle.Types.$fReadNewline9
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Handle.Types.Newline -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s8egk k_s8egl] k_s8egl GHC.IO.Handle.Types.LF;

GHC.IO.Handle.Types.$fReadNewline8
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.IO.Handle.Types.Newline)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.Handle.Types.$fReadNewline10
                        GHC.IO.Handle.Types.$fReadNewline9];

GHC.IO.Handle.Types.$fReadNewline5
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Handle.Types.Newline -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s8egm k_s8egn] k_s8egn GHC.IO.Handle.Types.CRLF;

GHC.IO.Handle.Types.$fReadNewline4
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.IO.Handle.Types.Newline)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.Handle.Types.$fReadNewline6
                        GHC.IO.Handle.Types.$fReadNewline5];

GHC.IO.Handle.Types.$fReadNewline3
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec
         GHC.IO.Handle.Types.Newline)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Handle.Types.$fReadNewline4 GHC.Types.[]];

GHC.IO.Handle.Types.$fReadNewline_sps
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec
         GHC.IO.Handle.Types.Newline)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Handle.Types.$fReadNewline8
                      GHC.IO.Handle.Types.$fReadNewline3];

GHC.IO.Handle.Types.$fReadNewline2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.IO.Handle.Types.Newline
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_s8ego]
        GHC.Read.choose2 GHC.IO.Handle.Types.$fReadNewline_sps eta_s8ego;

GHC.IO.Handle.Types.$fReadNewline1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Handle.Types.Newline -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.IO.Handle.Types.$fReadNewline2 eta_B2 eta_B1;

GHC.IO.Handle.Types.$fReadNewline_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.IO.Handle.Types.Newline
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s8egp]
        let {
          sat_s8egq [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.IO.Handle.Types.Newline
          [LclId] =
              [n_s8egp] \u []
                  GHC.Read.list3
                      GHC.IO.Handle.Types.$fReadNewline2
                      n_s8egp
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s8egq;

GHC.IO.Handle.Types.$fReadNewline_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec
       [GHC.IO.Handle.Types.Newline]
[GblId] =
    [] \u [] GHC.Read.list GHC.IO.Handle.Types.$fReadNewline1;

GHC.IO.Handle.Types.$fReadNewline12
  :: Text.ParserCombinators.ReadP.P [GHC.IO.Handle.Types.Newline]
[GblId] =
    [] \u []
        GHC.IO.Handle.Types.$fReadNewline_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.IO.Handle.Types.$fReadNewline_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.IO.Handle.Types.Newline]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run
            GHC.IO.Handle.Types.$fReadNewline12 eta_B1;

GHC.IO.Handle.Types.$fReadNewline [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.IO.Handle.Types.Newline
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.IO.Handle.Types.$fReadNewline_$creadsPrec
                                    GHC.IO.Handle.Types.$fReadNewline_$creadList
                                    GHC.IO.Handle.Types.$fReadNewline1
                                    GHC.IO.Handle.Types.$fReadNewline_$creadListPrec];

GHC.IO.Handle.Types.$fReadNewlineMode17 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NewlineMode"#;

GHC.IO.Handle.Types.$fReadNewlineMode16 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadNewlineMode17;

GHC.IO.Handle.Types.$fReadNewlineMode_lexeme1
  :: Text.Read.Lex.Lexeme
[GblId, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Ident! [GHC.IO.Handle.Types.$fReadNewlineMode16];

GHC.IO.Handle.Types.$fReadNewlineMode15 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "{"#;

GHC.IO.Handle.Types.$fReadNewlineMode14 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadNewlineMode15;

GHC.IO.Handle.Types.$fReadNewlineMode_lexeme
  :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [GHC.IO.Handle.Types.$fReadNewlineMode14];

GHC.IO.Handle.Types.$fReadNewlineMode13 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "inputNL"#;

GHC.IO.Handle.Types.$fReadNewlineMode12 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadNewlineMode13;

GHC.IO.Handle.Types.$fReadNewlineMode11
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Handle.Types.Newline -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,U>, Unf=OtherCon []] =
    [] \r [ds1_s8egr eta_s8egs]
        GHC.Read.list3
            GHC.IO.Handle.Types.$fReadNewline2
            Text.ParserCombinators.ReadPrec.minPrec
            eta_s8egs;

GHC.IO.Handle.Types.$fReadBufferMode_n
  :: Text.ParserCombinators.ReadPrec.Prec
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [11#];

GHC.IO.Handle.Types.$fReadNewlineMode10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ","#;

GHC.IO.Handle.Types.$fReadNewlineMode9 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadNewlineMode10;

GHC.IO.Handle.Types.$fReadNewlineMode8 :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [GHC.IO.Handle.Types.$fReadNewlineMode9];

GHC.IO.Handle.Types.$fReadNewlineMode7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "outputNL"#;

GHC.IO.Handle.Types.$fReadNewlineMode6 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadNewlineMode7;

GHC.IO.Handle.Types.$fReadNewlineMode4 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadNewlineMode5;

GHC.IO.Handle.Types.$fReadNewlineMode3 :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [GHC.IO.Handle.Types.$fReadNewlineMode4];

GHC.IO.Handle.Types.$w$creadPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> forall b.
        (GHC.IO.Handle.Types.NewlineMode
         -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<S,U><L,C(U)>, Unf=OtherCon []] =
    [] \r [ww_s8egt w_s8egu]
        case <=# [ww_s8egt 11#] of {
          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
          1# ->
              let {
                sat_s8egO [Occ=Once]
                  :: () -> Text.ParserCombinators.ReadP.P b_s89BH
                [LclId] =
                    [w_s8egu] \r [a1_s8egw]
                        let {
                          sat_s8egL [Occ=Once]
                            :: () -> Text.ParserCombinators.ReadP.P b_s89BH
                          [LclId] =
                              [w_s8egu] \r [a2_s8egx]
                                  let {
                                    sat_s8egK [Occ=Once]
                                      :: GHC.IO.Handle.Types.Newline
                                         -> Text.ParserCombinators.ReadP.P b_s89BH
                                    [LclId] =
                                        [w_s8egu] \r [a3_s8egy]
                                            let {
                                              sat_s8egH [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b_s89BH
                                              [LclId] =
                                                  [w_s8egu a3_s8egy] \r [a4_s8egz]
                                                      let {
                                                        sat_s8egG [Occ=Once]
                                                          :: GHC.IO.Handle.Types.Newline
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b_s89BH
                                                        [LclId] =
                                                            [w_s8egu a3_s8egy] \r [a5_s8egA]
                                                                let {
                                                                  sat_s8egD [Occ=Once]
                                                                    :: ()
                                                                       -> Text.ParserCombinators.ReadP.P
                                                                            b_s89BH
                                                                  [LclId] =
                                                                      [w_s8egu
                                                                       a3_s8egy
                                                                       a5_s8egA] \r [a6_s8egB]
                                                                          let {
                                                                            sat_s8egC [Occ=Once]
                                                                              :: GHC.IO.Handle.Types.NewlineMode
                                                                            [LclId] =
                                                                                CCCS GHC.IO.Handle.Types.NewlineMode! [a3_s8egy
                                                                                                                       a5_s8egA];
                                                                          } in  w_s8egu sat_s8egC;
                                                                } in 
                                                                  case
                                                                      Text.Read.Lex.$wexpect
                                                                          GHC.IO.Handle.Types.$fReadNewlineMode3
                                                                          sat_s8egD
                                                                  of
                                                                  { Unit# ww2_s8egF [Occ=Once] ->
                                                                        Text.ParserCombinators.ReadP.Look [ww2_s8egF];
                                                                  };
                                                      } in 
                                                        GHC.Read.readField
                                                            GHC.IO.Handle.Types.$fReadNewlineMode6
                                                            GHC.IO.Handle.Types.$fReadNewlineMode11
                                                            GHC.IO.Handle.Types.$fReadBufferMode_n
                                                            sat_s8egG;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.IO.Handle.Types.$fReadNewlineMode8
                                                      sat_s8egH
                                              of
                                              { Unit# ww2_s8egJ [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww2_s8egJ];
                                              };
                                  } in 
                                    GHC.Read.readField
                                        GHC.IO.Handle.Types.$fReadNewlineMode12
                                        GHC.IO.Handle.Types.$fReadNewlineMode11
                                        GHC.IO.Handle.Types.$fReadBufferMode_n
                                        sat_s8egK;
                        } in 
                          case
                              Text.Read.Lex.$wexpect
                                  GHC.IO.Handle.Types.$fReadNewlineMode_lexeme sat_s8egL
                          of
                          { Unit# ww2_s8egN [Occ=Once] ->
                                Text.ParserCombinators.ReadP.Look [ww2_s8egN];
                          };
              } in 
                case
                    Text.Read.Lex.$wexpect
                        GHC.IO.Handle.Types.$fReadNewlineMode_lexeme1 sat_s8egO
                of
                { Unit# ww2_s8egQ [Occ=Once] ->
                      Text.ParserCombinators.ReadP.Look [ww2_s8egQ];
                };
        };

GHC.IO.Handle.Types.$fReadNewlineMode2 [InlPrag=NOUSERINLINE[0]]
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Handle.Types.NewlineMode
         -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<S(S),1*U(U)><L,C(U)>, Unf=OtherCon []] =
    [] \r [w_s8egR w1_s8egS]
        case w_s8egR of {
          GHC.Types.I# ww1_s8egU [Occ=Once] ->
              GHC.IO.Handle.Types.$w$creadPrec ww1_s8egU w1_s8egS;
        };

GHC.IO.Handle.Types.$fReadNewlineMode1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Handle.Types.NewlineMode
         -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3
            GHC.IO.Handle.Types.$fReadNewlineMode2 eta_B2 eta_B1;

GHC.IO.Handle.Types.$fReadNewlineMode_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS
          GHC.IO.Handle.Types.NewlineMode
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s8egV]
        let {
          sat_s8egW [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.IO.Handle.Types.NewlineMode
          [LclId] =
              [n_s8egV] \u []
                  GHC.Read.list3
                      GHC.IO.Handle.Types.$fReadNewlineMode2
                      n_s8egV
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s8egW;

GHC.IO.Handle.Types.$fReadNewlineMode_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec
       [GHC.IO.Handle.Types.NewlineMode]
[GblId] =
    [] \u [] GHC.Read.list GHC.IO.Handle.Types.$fReadNewlineMode1;

GHC.IO.Handle.Types.$fReadNewlineMode18
  :: Text.ParserCombinators.ReadP.P [GHC.IO.Handle.Types.NewlineMode]
[GblId] =
    [] \u []
        GHC.IO.Handle.Types.$fReadNewlineMode_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.IO.Handle.Types.$fReadNewlineMode_$creadList
  :: Text.ParserCombinators.ReadP.ReadS
       [GHC.IO.Handle.Types.NewlineMode]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run
            GHC.IO.Handle.Types.$fReadNewlineMode18 eta_B1;

GHC.IO.Handle.Types.$fReadNewlineMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.IO.Handle.Types.NewlineMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.IO.Handle.Types.$fReadNewlineMode_$creadsPrec
                                    GHC.IO.Handle.Types.$fReadNewlineMode_$creadList
                                    GHC.IO.Handle.Types.$fReadNewlineMode1
                                    GHC.IO.Handle.Types.$fReadNewlineMode_$creadListPrec];

GHC.IO.Handle.Types.$fOrdNewline_$c<
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8egX b_s8egY]
        case a_s8egX of {
          GHC.IO.Handle.Types.LF ->
              case b_s8egY of {
                GHC.IO.Handle.Types.LF -> GHC.Types.False [];
                GHC.IO.Handle.Types.CRLF -> GHC.Types.True [];
              };
          GHC.IO.Handle.Types.CRLF ->
              case b_s8egY of { __DEFAULT -> GHC.Types.False []; };
        };

GHC.IO.Handle.Types.$fOrdNewline_$ccompare
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8eh2 b_s8eh3]
        case a_s8eh2 of {
          GHC.IO.Handle.Types.LF ->
              case b_s8eh3 of {
                GHC.IO.Handle.Types.LF -> GHC.Types.EQ [];
                GHC.IO.Handle.Types.CRLF -> GHC.Types.LT [];
              };
          GHC.IO.Handle.Types.CRLF ->
              case b_s8eh3 of {
                GHC.IO.Handle.Types.LF -> GHC.Types.GT [];
                GHC.IO.Handle.Types.CRLF -> GHC.Types.EQ [];
              };
        };

GHC.IO.Handle.Types.$fEqNewline_$c==
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s8eh7 ds1_s8eh8]
        case ds_s8eh7 of {
          GHC.IO.Handle.Types.LF ->
              case ds1_s8eh8 of {
                GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
              };
          GHC.IO.Handle.Types.CRLF ->
              case ds1_s8eh8 of {
                GHC.IO.Handle.Types.LF -> GHC.Types.False [];
                GHC.IO.Handle.Types.CRLF -> GHC.Types.True [];
              };
        };

GHC.IO.Handle.Types.$fEqNewline_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s8ehc eta1_s8ehd]
        case eta_s8ehc of {
          GHC.IO.Handle.Types.LF ->
              case eta1_s8ehd of {
                GHC.IO.Handle.Types.LF -> GHC.Types.False [];
                GHC.IO.Handle.Types.CRLF -> GHC.Types.True [];
              };
          GHC.IO.Handle.Types.CRLF ->
              case eta1_s8ehd of {
                GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
              };
        };

GHC.IO.Handle.Types.$fEqNewline [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.IO.Handle.Types.Newline
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.IO.Handle.Types.$fEqNewline_$c==
                                     GHC.IO.Handle.Types.$fEqNewline_$c/=];

GHC.IO.Handle.Types.$fOrdNewline_$c<=
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8ehh b_s8ehi]
        case b_s8ehi of {
          GHC.IO.Handle.Types.LF ->
              case a_s8ehh of {
                GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
              };
          GHC.IO.Handle.Types.CRLF ->
              case a_s8ehh of { __DEFAULT -> GHC.Types.True []; };
        };

GHC.IO.Handle.Types.$fOrdNewline_$cmax
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.IO.Handle.Types.Newline
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s8ehm y_s8ehn]
        case y_s8ehn of {
          GHC.IO.Handle.Types.LF -> x_s8ehm;
          GHC.IO.Handle.Types.CRLF ->
              case x_s8ehm of { __DEFAULT -> GHC.IO.Handle.Types.CRLF []; };
        };

GHC.IO.Handle.Types.$fOrdNewline_$c>=
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8ehq b_s8ehr]
        case a_s8ehq of {
          GHC.IO.Handle.Types.LF ->
              case b_s8ehr of {
                GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
              };
          GHC.IO.Handle.Types.CRLF ->
              case b_s8ehr of { __DEFAULT -> GHC.Types.True []; };
        };

GHC.IO.Handle.Types.$fOrdNewline_$c>
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8ehv b_s8ehw]
        GHC.IO.Handle.Types.$fOrdNewline_$c< b_s8ehw a_s8ehv;

GHC.IO.Handle.Types.$fOrdNewline_$cmin
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.IO.Handle.Types.Newline
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s8ehx y_s8ehy]
        case y_s8ehy of {
          GHC.IO.Handle.Types.LF ->
              case x_s8ehx of { __DEFAULT -> GHC.IO.Handle.Types.LF []; };
          GHC.IO.Handle.Types.CRLF -> x_s8ehx;
        };

GHC.IO.Handle.Types.$fOrdNewline [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.IO.Handle.Types.Newline
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.IO.Handle.Types.$fEqNewline
                                      GHC.IO.Handle.Types.$fOrdNewline_$ccompare
                                      GHC.IO.Handle.Types.$fOrdNewline_$c<
                                      GHC.IO.Handle.Types.$fOrdNewline_$c<=
                                      GHC.IO.Handle.Types.$fOrdNewline_$c>
                                      GHC.IO.Handle.Types.$fOrdNewline_$c>=
                                      GHC.IO.Handle.Types.$fOrdNewline_$cmax
                                      GHC.IO.Handle.Types.$fOrdNewline_$cmin];

GHC.IO.Handle.Types.$w$ccompare [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.Types.Ordering
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s8ehB ww1_s8ehC ww2_s8ehD ww3_s8ehE]
        case ww_s8ehB of {
          GHC.IO.Handle.Types.LF ->
              case ww2_s8ehD of {
                GHC.IO.Handle.Types.LF ->
                    GHC.IO.Handle.Types.$fOrdNewline_$ccompare ww1_s8ehC ww3_s8ehE;
                GHC.IO.Handle.Types.CRLF -> GHC.Types.LT [];
              };
          GHC.IO.Handle.Types.CRLF ->
              case ww2_s8ehD of {
                GHC.IO.Handle.Types.LF -> GHC.Types.GT [];
                GHC.IO.Handle.Types.CRLF ->
                    GHC.IO.Handle.Types.$fOrdNewline_$ccompare ww1_s8ehC ww3_s8ehE;
              };
        };

GHC.IO.Handle.Types.$fOrdNewlineMode_$ccompare [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [w_s8ehI w1_s8ehJ]
        case w_s8ehI of {
          GHC.IO.Handle.Types.NewlineMode ww1_s8ehL [Occ=Once]
                                          ww2_s8ehM [Occ=Once] ->
              case w1_s8ehJ of {
                GHC.IO.Handle.Types.NewlineMode ww4_s8ehO [Occ=Once]
                                                ww5_s8ehP [Occ=Once] ->
                    GHC.IO.Handle.Types.$w$ccompare
                        ww1_s8ehL ww2_s8ehM ww4_s8ehO ww5_s8ehP;
              };
        };

GHC.IO.Handle.Types.$w$c< [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.Types.Bool
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s8ehQ ww1_s8ehR ww2_s8ehS ww3_s8ehT]
        case ww_s8ehQ of {
          GHC.IO.Handle.Types.LF ->
              case ww2_s8ehS of {
                GHC.IO.Handle.Types.LF ->
                    GHC.IO.Handle.Types.$fOrdNewline_$c< ww1_s8ehR ww3_s8ehT;
                GHC.IO.Handle.Types.CRLF -> GHC.Types.True [];
              };
          GHC.IO.Handle.Types.CRLF ->
              case ww2_s8ehS of {
                GHC.IO.Handle.Types.LF -> GHC.Types.False [];
                GHC.IO.Handle.Types.CRLF ->
                    GHC.IO.Handle.Types.$fOrdNewline_$c< ww1_s8ehR ww3_s8ehT;
              };
        };

GHC.IO.Handle.Types.$fOrdNewlineMode_$c< [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [w_s8ehX w1_s8ehY]
        case w_s8ehX of {
          GHC.IO.Handle.Types.NewlineMode ww1_s8ei0 [Occ=Once]
                                          ww2_s8ei1 [Occ=Once] ->
              case w1_s8ehY of {
                GHC.IO.Handle.Types.NewlineMode ww4_s8ei3 [Occ=Once]
                                                ww5_s8ei4 [Occ=Once] ->
                    GHC.IO.Handle.Types.$w$c< ww1_s8ei0 ww2_s8ei1 ww4_s8ei3 ww5_s8ei4;
              };
        };

GHC.IO.Handle.Types.$w$c== [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.Types.Bool
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s8ei5 ww1_s8ei6 ww2_s8ei7 ww3_s8ei8]
        case ww_s8ei5 of {
          GHC.IO.Handle.Types.LF ->
              case ww2_s8ei7 of {
                GHC.IO.Handle.Types.LF ->
                    GHC.IO.Handle.Types.$fEqNewline_$c== ww1_s8ei6 ww3_s8ei8;
                GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
              };
          GHC.IO.Handle.Types.CRLF ->
              case ww2_s8ei7 of {
                GHC.IO.Handle.Types.LF -> GHC.Types.False [];
                GHC.IO.Handle.Types.CRLF ->
                    GHC.IO.Handle.Types.$fEqNewline_$c== ww1_s8ei6 ww3_s8ei8;
              };
        };

GHC.IO.Handle.Types.$fEqNewlineMode_$c== [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [w_s8eic w1_s8eid]
        case w_s8eic of {
          GHC.IO.Handle.Types.NewlineMode ww1_s8eif [Occ=Once]
                                          ww2_s8eig [Occ=Once] ->
              case w1_s8eid of {
                GHC.IO.Handle.Types.NewlineMode ww4_s8eii [Occ=Once]
                                                ww5_s8eij [Occ=Once] ->
                    GHC.IO.Handle.Types.$w$c== ww1_s8eif ww2_s8eig ww4_s8eii ww5_s8eij;
              };
        };

GHC.IO.Handle.Types.$fEqNewlineMode_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [eta_s8eik eta1_s8eil]
        case eta_s8eik of {
          GHC.IO.Handle.Types.NewlineMode ww1_s8ein [Occ=Once!]
                                          ww2_s8eio [Occ=Once*!] ->
              case eta1_s8eil of {
                GHC.IO.Handle.Types.NewlineMode ww4_s8eiq [Occ=Once*!]
                                                ww5_s8eir [Occ=Once*!] ->
                    case ww1_s8ein of {
                      GHC.IO.Handle.Types.LF ->
                          case ww4_s8eiq of {
                            GHC.IO.Handle.Types.LF ->
                                case ww2_s8eio of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8eir of {
                                        GHC.IO.Handle.Types.LF -> GHC.Types.False [];
                                        GHC.IO.Handle.Types.CRLF -> GHC.Types.True [];
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8eir of {
                                        GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                                        GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
                                      };
                                };
                            GHC.IO.Handle.Types.CRLF -> GHC.Types.True [];
                          };
                      GHC.IO.Handle.Types.CRLF ->
                          case ww4_s8eiq of {
                            GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                            GHC.IO.Handle.Types.CRLF ->
                                case ww2_s8eio of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8eir of {
                                        GHC.IO.Handle.Types.LF -> GHC.Types.False [];
                                        GHC.IO.Handle.Types.CRLF -> GHC.Types.True [];
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8eir of {
                                        GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                                        GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fEqNewlineMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.IO.Handle.Types.NewlineMode
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.IO.Handle.Types.$fEqNewlineMode_$c==
                                     GHC.IO.Handle.Types.$fEqNewlineMode_$c/=];

GHC.IO.Handle.Types.$fOrdNewlineMode_$c<=
  :: GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [a_s8eiB b_s8eiC]
        case b_s8eiC of {
          GHC.IO.Handle.Types.NewlineMode ww1_s8eiE [Occ=Once!]
                                          ww2_s8eiF [Occ=Once*!] ->
              case a_s8eiB of {
                GHC.IO.Handle.Types.NewlineMode ww4_s8eiH [Occ=Once*!]
                                                ww5_s8eiI [Occ=Once*] ->
                    case ww1_s8eiE of {
                      GHC.IO.Handle.Types.LF ->
                          case ww4_s8eiH of {
                            GHC.IO.Handle.Types.LF ->
                                case ww2_s8eiF of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8eiI of {
                                        GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                                        GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8eiI of { __DEFAULT -> GHC.Types.True []; };
                                };
                            GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
                          };
                      GHC.IO.Handle.Types.CRLF ->
                          case ww4_s8eiH of {
                            GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                            GHC.IO.Handle.Types.CRLF ->
                                case ww2_s8eiF of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8eiI of {
                                        GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                                        GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8eiI of { __DEFAULT -> GHC.Types.True []; };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fOrdNewlineMode_$cmax
  :: GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [x_s8eiS y_s8eiT]
        case y_s8eiT of ww_s8eiU {
          GHC.IO.Handle.Types.NewlineMode ww1_s8eiV [Occ=Once!]
                                          ww2_s8eiW [Occ=Once*!] ->
              case x_s8eiS of ww3_s8eiX {
                GHC.IO.Handle.Types.NewlineMode ww4_s8eiY [Occ=Once*!]
                                                ww5_s8eiZ [Occ=Once*] ->
                    case ww1_s8eiV of {
                      GHC.IO.Handle.Types.LF ->
                          case ww4_s8eiY of {
                            GHC.IO.Handle.Types.LF ->
                                case ww2_s8eiW of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8eiZ of {
                                        GHC.IO.Handle.Types.LF -> ww_s8eiU;
                                        GHC.IO.Handle.Types.CRLF -> ww3_s8eiX;
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8eiZ of { __DEFAULT -> ww_s8eiU; };
                                };
                            GHC.IO.Handle.Types.CRLF -> ww3_s8eiX;
                          };
                      GHC.IO.Handle.Types.CRLF ->
                          case ww4_s8eiY of {
                            GHC.IO.Handle.Types.LF -> ww_s8eiU;
                            GHC.IO.Handle.Types.CRLF ->
                                case ww2_s8eiW of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8eiZ of {
                                        GHC.IO.Handle.Types.LF -> ww_s8eiU;
                                        GHC.IO.Handle.Types.CRLF -> ww3_s8eiX;
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8eiZ of { __DEFAULT -> ww_s8eiU; };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fOrdNewlineMode_$c>=
  :: GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [a_s8ej9 b_s8eja]
        case a_s8ej9 of {
          GHC.IO.Handle.Types.NewlineMode ww1_s8ejc [Occ=Once!]
                                          ww2_s8ejd [Occ=Once*!] ->
              case b_s8eja of {
                GHC.IO.Handle.Types.NewlineMode ww4_s8ejf [Occ=Once*!]
                                                ww5_s8ejg [Occ=Once*] ->
                    case ww1_s8ejc of {
                      GHC.IO.Handle.Types.LF ->
                          case ww4_s8ejf of {
                            GHC.IO.Handle.Types.LF ->
                                case ww2_s8ejd of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8ejg of {
                                        GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                                        GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8ejg of { __DEFAULT -> GHC.Types.True []; };
                                };
                            GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
                          };
                      GHC.IO.Handle.Types.CRLF ->
                          case ww4_s8ejf of {
                            GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                            GHC.IO.Handle.Types.CRLF ->
                                case ww2_s8ejd of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8ejg of {
                                        GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                                        GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8ejg of { __DEFAULT -> GHC.Types.True []; };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fOrdNewlineMode_$c>
  :: GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [a_s8ejq b_s8ejr]
        GHC.IO.Handle.Types.$fOrdNewlineMode_$c< b_s8ejr a_s8ejq;

GHC.IO.Handle.Types.$fOrdNewlineMode_$cmin
  :: GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [x_s8ejs y_s8ejt]
        case y_s8ejt of ww_s8eju {
          GHC.IO.Handle.Types.NewlineMode ww1_s8ejv [Occ=Once!]
                                          ww2_s8ejw [Occ=Once*!] ->
              case x_s8ejs of ww3_s8ejx {
                GHC.IO.Handle.Types.NewlineMode ww4_s8ejy [Occ=Once*!]
                                                ww5_s8ejz [Occ=Once*] ->
                    case ww1_s8ejv of {
                      GHC.IO.Handle.Types.LF ->
                          case ww4_s8ejy of {
                            GHC.IO.Handle.Types.LF ->
                                case ww2_s8ejw of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8ejz of {
                                        GHC.IO.Handle.Types.LF -> ww3_s8ejx;
                                        GHC.IO.Handle.Types.CRLF -> ww_s8eju;
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8ejz of { __DEFAULT -> ww3_s8ejx; };
                                };
                            GHC.IO.Handle.Types.CRLF -> ww_s8eju;
                          };
                      GHC.IO.Handle.Types.CRLF ->
                          case ww4_s8ejy of {
                            GHC.IO.Handle.Types.LF -> ww3_s8ejx;
                            GHC.IO.Handle.Types.CRLF ->
                                case ww2_s8ejw of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8ejz of {
                                        GHC.IO.Handle.Types.LF -> ww3_s8ejx;
                                        GHC.IO.Handle.Types.CRLF -> ww_s8eju;
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8ejz of { __DEFAULT -> ww3_s8ejx; };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fOrdNewlineMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.IO.Handle.Types.NewlineMode
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.IO.Handle.Types.$fEqNewlineMode
                                      GHC.IO.Handle.Types.$fOrdNewlineMode_$ccompare
                                      GHC.IO.Handle.Types.$fOrdNewlineMode_$c<
                                      GHC.IO.Handle.Types.$fOrdNewlineMode_$c<=
                                      GHC.IO.Handle.Types.$fOrdNewlineMode_$c>
                                      GHC.IO.Handle.Types.$fOrdNewlineMode_$c>=
                                      GHC.IO.Handle.Types.$fOrdNewlineMode_$cmax
                                      GHC.IO.Handle.Types.$fOrdNewlineMode_$cmin];

GHC.IO.Handle.Types.$fReadBufferMode13 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NoBuffering"#;

GHC.IO.Handle.Types.$fReadBufferMode12 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadBufferMode13;

GHC.IO.Handle.Types.$fShowBufferMode6
  :: [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Base.++ GHC.IO.Handle.Types.$fReadBufferMode12 eta_B1;

GHC.IO.Handle.Types.$fReadBufferMode9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LineBuffering"#;

GHC.IO.Handle.Types.$fReadBufferMode8 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadBufferMode9;

GHC.IO.Handle.Types.$fShowBufferMode5
  :: [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Base.++ GHC.IO.Handle.Types.$fReadBufferMode8 eta_B1;

GHC.IO.Handle.Types.$fShowBufferMode4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BlockBuffering "#;

GHC.IO.Handle.Types.$fShowBufferMode3 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fShowBufferMode4;

GHC.IO.Handle.Types.$fShowBufferMode_$cshowsPrec
  :: GHC.Types.Int
     -> GHC.IO.Handle.Types.BufferMode -> GHC.Show.ShowS
[GblId, Arity=2, Str=<L,1*U(U)><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s8ejJ ds1_s8ejK]
        case ds1_s8ejK of {
          GHC.IO.Handle.Types.NoBuffering ->
              GHC.IO.Handle.Types.$fShowBufferMode6;
          GHC.IO.Handle.Types.LineBuffering ->
              GHC.IO.Handle.Types.$fShowBufferMode5;
          GHC.IO.Handle.Types.BlockBuffering b1_s8ejM [Occ=Once] ->
              case ds_s8ejJ of {
                GHC.Types.I# x_s8ejO [Occ=Once] ->
                    let {
                      g_s8ejP [Occ=OnceL*!, Dmd=<L,C(U)>]
                        :: GHC.Base.String -> GHC.Base.String
                      [LclId] =
                          [b1_s8ejM] \u []
                              GHC.Show.$fShowMaybe_$cshowsPrec
                                  GHC.Show.$fShowInt
                                  GHC.IO.Handle.Types.$fReadBufferMode_n
                                  b1_s8ejM;
                    } in 
                      case >=# [x_s8ejO 11#] of {
                        __DEFAULT ->
                            let {
                              sat_s8ejT [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                              [LclId] =
                                  [g_s8ejP] \r [x1_s8ejR]
                                      let {
                                        sat_s8ejS [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                        [LclId] =
                                            [g_s8ejP x1_s8ejR] \s [] g_s8ejP x1_s8ejR;
                                      } in 
                                        GHC.Base.++ GHC.IO.Handle.Types.$fShowBufferMode3 sat_s8ejS;
                            } in  sat_s8ejT;
                        1# ->
                            let {
                              sat_s8ejY [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                              [LclId] =
                                  [g_s8ejP] \r [x1_s8ejU]
                                      let {
                                        sat_s8ejX [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            [g_s8ejP x1_s8ejU] \u []
                                                let {
                                                  sat_s8ejW [Occ=Once, Dmd=<L,1*U>]
                                                    :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [g_s8ejP x1_s8ejU] \s []
                                                          let {
                                                            sat_s8ejV [Occ=Once] :: GHC.Base.String
                                                            [LclId] =
                                                                CCCS :! [GHC.Show.$fShow(,)2
                                                                         x1_s8ejU];
                                                          } in  g_s8ejP sat_s8ejV;
                                                } in 
                                                  GHC.Base.++
                                                      GHC.IO.Handle.Types.$fShowBufferMode3
                                                      sat_s8ejW;
                                      } in  : [GHC.Show.$fShow(,)4 sat_s8ejX];
                            } in  sat_s8ejY;
                      };
              };
        };

GHC.IO.Handle.Types.$fShowBufferMode7 :: [GHC.Types.Char]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.$fShow(,)2 GHC.Types.[]];

GHC.IO.Handle.Types.$fShowBufferMode_$cshow
  :: GHC.IO.Handle.Types.BufferMode -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s8ejZ]
        case x_s8ejZ of {
          GHC.IO.Handle.Types.NoBuffering ->
              GHC.IO.Handle.Types.$fReadBufferMode12;
          GHC.IO.Handle.Types.LineBuffering ->
              GHC.IO.Handle.Types.$fReadBufferMode8;
          GHC.IO.Handle.Types.BlockBuffering b1_s8ek1 [Occ=Once!] ->
              let {
                sat_s8ekb [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                [LclId] =
                    [b1_s8ek1] \s []
                        case b1_s8ek1 of {
                          GHC.Base.Nothing -> GHC.Show.$fShowMaybe4;
                          GHC.Base.Just b2_s8ek3 [Occ=Once!] ->
                              let {
                                sat_s8eka [Occ=Once] :: [GHC.Types.Char]
                                [LclId] =
                                    [b2_s8ek3] \u []
                                        let {
                                          sat_s8ek9 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                          [LclId] =
                                              [b2_s8ek3] \s []
                                                  case b2_s8ek3 of {
                                                    GHC.Types.I# ww3_s8ek5 [Occ=Once] ->
                                                        case
                                                            GHC.Show.$wshowSignedInt
                                                                11#
                                                                ww3_s8ek5
                                                                GHC.IO.Handle.Types.$fShowBufferMode7
                                                        of
                                                        { (#,#) ww5_s8ek7 [Occ=Once]
                                                                ww6_s8ek8 [Occ=Once] ->
                                                              : [ww5_s8ek7 ww6_s8ek8];
                                                        };
                                                  };
                                        } in  GHC.Base.++ GHC.Show.$fShowMaybe1 sat_s8ek9;
                              } in  : [GHC.Show.$fShow(,)4 sat_s8eka];
                        };
              } in  GHC.Base.++ GHC.IO.Handle.Types.$fShowBufferMode3 sat_s8ekb;
        };

GHC.IO.Handle.Types.$fShowBufferMode1
  :: GHC.IO.Handle.Types.BufferMode -> GHC.Show.ShowS
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.IO.Handle.Types.$fShowBufferMode_$cshowsPrec
            GHC.IO.Handle.Types.$fShowBufferMode2 eta_B1;

GHC.IO.Handle.Types.$fShowBufferMode_$cshowList
  :: [GHC.IO.Handle.Types.BufferMode] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s8ekc s_s8ekd]
        GHC.Show.showList__
            GHC.IO.Handle.Types.$fShowBufferMode1 ls_s8ekc s_s8ekd;

GHC.IO.Handle.Types.$fShowBufferMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Handle.Types.BufferMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Handle.Types.$fShowBufferMode_$cshowsPrec
                                    GHC.IO.Handle.Types.$fShowBufferMode_$cshow
                                    GHC.IO.Handle.Types.$fShowBufferMode_$cshowList];

GHC.IO.Handle.Types.$fReadBufferMode11
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Handle.Types.BufferMode
         -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s8eke k_s8ekf] k_s8ekf GHC.IO.Handle.Types.NoBuffering;

GHC.IO.Handle.Types.$fReadBufferMode10
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.IO.Handle.Types.BufferMode)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.Handle.Types.$fReadBufferMode12
                        GHC.IO.Handle.Types.$fReadBufferMode11];

GHC.IO.Handle.Types.$fReadBufferMode7
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Handle.Types.BufferMode
         -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s8ekg k_s8ekh] k_s8ekh GHC.IO.Handle.Types.LineBuffering;

GHC.IO.Handle.Types.$fReadBufferMode6
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.IO.Handle.Types.BufferMode)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.Handle.Types.$fReadBufferMode8
                        GHC.IO.Handle.Types.$fReadBufferMode7];

GHC.IO.Handle.Types.$fReadBufferMode5
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec
         GHC.IO.Handle.Types.BufferMode)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Handle.Types.$fReadBufferMode6
                      GHC.Types.[]];

GHC.IO.Handle.Types.$fReadBufferMode_sps
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec
         GHC.IO.Handle.Types.BufferMode)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Handle.Types.$fReadBufferMode10
                      GHC.IO.Handle.Types.$fReadBufferMode5];

GHC.IO.Handle.Types.$fReadBufferMode4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BlockBuffering"#;

GHC.IO.Handle.Types.$fReadBufferMode3 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadBufferMode4;

GHC.IO.Handle.Types.$fReadBufferMode_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Ident! [GHC.IO.Handle.Types.$fReadBufferMode3];

GHC.IO.Handle.Types.$fReadBufferMode2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP
          GHC.IO.Handle.Types.BufferMode
[GblId, Arity=1, Str=<L,U(U)>, Unf=OtherCon []] =
    [] \r [n_s8eki]
        let {
          ds2_s8ekj [Occ=OnceL, Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadP
                 GHC.IO.Handle.Types.BufferMode
          [LclId] =
              [n_s8eki] \u []
                  GHC.Read.choose2
                      GHC.IO.Handle.Types.$fReadBufferMode_sps n_s8eki; } in
        let {
          sat_s8ekx [Occ=Once]
            :: forall b.
               (GHC.IO.Handle.Types.BufferMode
                -> Text.ParserCombinators.ReadP.P b)
               -> Text.ParserCombinators.ReadP.P b
          [LclId] =
              [n_s8eki ds2_s8ekj] \r [k_s8ekk]
                  let {
                    sat_s8ekw [Occ=Once] :: Text.ParserCombinators.ReadP.P b_i88Yk
                    [LclId] =
                        [n_s8eki k_s8ekk] \u []
                            case n_s8eki of {
                              GHC.Types.I# x_s8ekn [Occ=Once] ->
                                  case <=# [x_s8ekn 10#] of {
                                    __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                    1# ->
                                        let {
                                          sat_s8ekt [Occ=Once]
                                            :: () -> Text.ParserCombinators.ReadP.P b_i88Yk
                                          [LclId] =
                                              [k_s8ekk] \r [a1_s8ekp]
                                                  let {
                                                    sat_s8eks [Occ=Once]
                                                      :: GHC.Base.Maybe GHC.Types.Int
                                                         -> Text.ParserCombinators.ReadP.P b_i88Yk
                                                    [LclId] =
                                                        [k_s8ekk] \r [a2_s8ekq]
                                                            let {
                                                              sat_s8ekr [Occ=Once]
                                                                :: GHC.IO.Handle.Types.BufferMode
                                                              [LclId] =
                                                                  CCCS GHC.IO.Handle.Types.BlockBuffering! [a2_s8ekq];
                                                            } in  k_s8ekk sat_s8ekr;
                                                  } in 
                                                    GHC.Read.$fReadMaybe1
                                                        GHC.Read.$fReadInt
                                                        GHC.IO.Handle.Types.$fReadBufferMode_n
                                                        sat_s8eks;
                                        } in 
                                          case
                                              Text.Read.Lex.$wexpect
                                                  GHC.IO.Handle.Types.$fReadBufferMode_lexeme
                                                  sat_s8ekt
                                          of
                                          { Unit# ww1_s8ekv [Occ=Once] ->
                                                Text.ParserCombinators.ReadP.Look [ww1_s8ekv];
                                          };
                                  };
                            };
                  } in 
                    case ds2_s8ekj k_s8ekk of sat_s8ekl {
                      __DEFAULT ->
                          Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                              sat_s8ekl sat_s8ekw;
                    };
        } in  sat_s8ekx;

GHC.IO.Handle.Types.$fReadBufferMode1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Handle.Types.BufferMode
         -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.IO.Handle.Types.$fReadBufferMode2 eta_B2 eta_B1;

GHC.IO.Handle.Types.$fReadBufferMode_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS
          GHC.IO.Handle.Types.BufferMode
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s8eky]
        let {
          sat_s8ekz [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.IO.Handle.Types.BufferMode
          [LclId] =
              [n_s8eky] \u []
                  GHC.Read.list3
                      GHC.IO.Handle.Types.$fReadBufferMode2
                      n_s8eky
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s8ekz;

GHC.IO.Handle.Types.$fReadBufferMode_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec
       [GHC.IO.Handle.Types.BufferMode]
[GblId] =
    [] \u [] GHC.Read.list GHC.IO.Handle.Types.$fReadBufferMode1;

GHC.IO.Handle.Types.$fReadBufferMode14
  :: Text.ParserCombinators.ReadP.P [GHC.IO.Handle.Types.BufferMode]
[GblId] =
    [] \u []
        GHC.IO.Handle.Types.$fReadBufferMode_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.IO.Handle.Types.$fReadBufferMode_$creadList
  :: Text.ParserCombinators.ReadP.ReadS
       [GHC.IO.Handle.Types.BufferMode]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run
            GHC.IO.Handle.Types.$fReadBufferMode14 eta_B1;

GHC.IO.Handle.Types.$fReadBufferMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.IO.Handle.Types.BufferMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.IO.Handle.Types.$fReadBufferMode_$creadsPrec
                                    GHC.IO.Handle.Types.$fReadBufferMode_$creadList
                                    GHC.IO.Handle.Types.$fReadBufferMode1
                                    GHC.IO.Handle.Types.$fReadBufferMode_$creadListPrec];

GHC.IO.Handle.Types.$fOrdBufferMode_$c<
  :: GHC.IO.Handle.Types.BufferMode
     -> GHC.IO.Handle.Types.BufferMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8ekA b_s8ekB]
        case a_s8ekA of {
          GHC.IO.Handle.Types.NoBuffering ->
              case b_s8ekB of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Handle.Types.NoBuffering -> GHC.Types.False [];
              };
          GHC.IO.Handle.Types.LineBuffering ->
              case b_s8ekB of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Handle.Types.BlockBuffering _ [Occ=Dead] ->
                    GHC.Types.True [];
              };
          GHC.IO.Handle.Types.BlockBuffering a1_s8ekG [Occ=Once!] ->
              case b_s8ekB of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Handle.Types.BlockBuffering b1_s8ekI [Occ=Once*!] ->
                    case a1_s8ekG of {
                      GHC.Base.Nothing ->
                          case b1_s8ekI of {
                            GHC.Base.Nothing -> GHC.Types.False [];
                            GHC.Base.Just _ [Occ=Dead] -> GHC.Types.True [];
                          };
                      GHC.Base.Just a2_s8ekM [Occ=Once] ->
                          case b1_s8ekI of {
                            GHC.Base.Nothing -> GHC.Types.False [];
                            GHC.Base.Just b2_s8ekO [Occ=Once] ->
                                GHC.Classes.ltInt a2_s8ekM b2_s8ekO;
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fOrdBufferMode_$ccompare
  :: GHC.IO.Handle.Types.BufferMode
     -> GHC.IO.Handle.Types.BufferMode -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8ekP b_s8ekQ]
        case a_s8ekP of {
          GHC.IO.Handle.Types.NoBuffering ->
              case b_s8ekQ of {
                __DEFAULT -> GHC.Types.LT [];
                GHC.IO.Handle.Types.NoBuffering -> GHC.Types.EQ [];
              };
          GHC.IO.Handle.Types.LineBuffering ->
              case b_s8ekQ of {
                GHC.IO.Handle.Types.NoBuffering -> GHC.Types.GT [];
                GHC.IO.Handle.Types.LineBuffering -> GHC.Types.EQ [];
                GHC.IO.Handle.Types.BlockBuffering _ [Occ=Dead] -> GHC.Types.LT [];
              };
          GHC.IO.Handle.Types.BlockBuffering a1_s8ekV [Occ=Once!] ->
              case b_s8ekQ of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.IO.Handle.Types.BlockBuffering b1_s8ekX [Occ=Once*!] ->
                    case a1_s8ekV of {
                      GHC.Base.Nothing ->
                          case b1_s8ekX of {
                            GHC.Base.Nothing -> GHC.Types.EQ [];
                            GHC.Base.Just _ [Occ=Dead] -> GHC.Types.LT [];
                          };
                      GHC.Base.Just a2_s8el1 [Occ=Once] ->
                          case b1_s8ekX of {
                            GHC.Base.Nothing -> GHC.Types.GT [];
                            GHC.Base.Just b2_s8el3 [Occ=Once] ->
                                GHC.Classes.compareInt a2_s8el1 b2_s8el3;
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fEqBufferMode_$c==
  :: GHC.IO.Handle.Types.BufferMode
     -> GHC.IO.Handle.Types.BufferMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s8el4 ds1_s8el5]
        case ds_s8el4 of {
          GHC.IO.Handle.Types.NoBuffering ->
              case ds1_s8el5 of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Handle.Types.NoBuffering -> GHC.Types.True [];
              };
          GHC.IO.Handle.Types.LineBuffering ->
              case ds1_s8el5 of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Handle.Types.LineBuffering -> GHC.Types.True [];
              };
          GHC.IO.Handle.Types.BlockBuffering a1_s8el9 [Occ=Once!] ->
              case ds1_s8el5 of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Handle.Types.BlockBuffering b1_s8elb [Occ=Once*!] ->
                    case a1_s8el9 of {
                      GHC.Base.Nothing ->
                          case b1_s8elb of {
                            GHC.Base.Nothing -> GHC.Types.True [];
                            GHC.Base.Just _ [Occ=Dead] -> GHC.Types.False [];
                          };
                      GHC.Base.Just a2_s8elf [Occ=Once] ->
                          case b1_s8elb of {
                            GHC.Base.Nothing -> GHC.Types.False [];
                            GHC.Base.Just b2_s8elh [Occ=Once] ->
                                GHC.Classes.eqInt a2_s8elf b2_s8elh;
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fEqBufferMode_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.IO.Handle.Types.BufferMode
     -> GHC.IO.Handle.Types.BufferMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s8eli eta1_s8elj]
        case eta_s8eli of {
          GHC.IO.Handle.Types.NoBuffering ->
              case eta1_s8elj of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Handle.Types.NoBuffering -> GHC.Types.False [];
              };
          GHC.IO.Handle.Types.LineBuffering ->
              case eta1_s8elj of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Handle.Types.LineBuffering -> GHC.Types.False [];
              };
          GHC.IO.Handle.Types.BlockBuffering a1_s8eln [Occ=Once!] ->
              case eta1_s8elj of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Handle.Types.BlockBuffering b1_s8elp [Occ=Once*!] ->
                    case a1_s8eln of {
                      GHC.Base.Nothing ->
                          case b1_s8elp of {
                            GHC.Base.Nothing -> GHC.Types.False [];
                            GHC.Base.Just _ [Occ=Dead] -> GHC.Types.True [];
                          };
                      GHC.Base.Just a2_s8elt [Occ=Once!] ->
                          case b1_s8elp of {
                            GHC.Base.Nothing -> GHC.Types.True [];
                            GHC.Base.Just b2_s8elv [Occ=Once!] ->
                                case a2_s8elt of {
                                  GHC.Types.I# x_s8elx [Occ=Once] ->
                                      case b2_s8elv of {
                                        GHC.Types.I# y_s8elz [Occ=Once] ->
                                            case ==# [x_s8elx y_s8elz] of {
                                              __DEFAULT -> GHC.Types.True [];
                                              1# -> GHC.Types.False [];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fEqBufferMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.IO.Handle.Types.BufferMode
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.IO.Handle.Types.$fEqBufferMode_$c==
                                     GHC.IO.Handle.Types.$fEqBufferMode_$c/=];

GHC.IO.Handle.Types.$fOrdBufferMode_$c<=
  :: GHC.IO.Handle.Types.BufferMode
     -> GHC.IO.Handle.Types.BufferMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8elB b_s8elC]
        case b_s8elC of {
          GHC.IO.Handle.Types.NoBuffering ->
              case a_s8elB of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Handle.Types.NoBuffering -> GHC.Types.True [];
              };
          GHC.IO.Handle.Types.LineBuffering ->
              case a_s8elB of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Handle.Types.BlockBuffering _ [Occ=Dead] ->
                    GHC.Types.False [];
              };
          GHC.IO.Handle.Types.BlockBuffering a1_s8elH [Occ=Once!] ->
              case a_s8elB of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Handle.Types.BlockBuffering b1_s8elJ [Occ=Once*!] ->
                    case a1_s8elH of {
                      GHC.Base.Nothing ->
                          case b1_s8elJ of {
                            GHC.Base.Nothing -> GHC.Types.True [];
                            GHC.Base.Just _ [Occ=Dead] -> GHC.Types.False [];
                          };
                      GHC.Base.Just a2_s8elN [Occ=Once!] ->
                          case b1_s8elJ of {
                            GHC.Base.Nothing -> GHC.Types.True [];
                            GHC.Base.Just b2_s8elP [Occ=Once!] ->
                                case a2_s8elN of {
                                  GHC.Types.I# x_s8elR [Occ=Once] ->
                                      case b2_s8elP of {
                                        GHC.Types.I# y_s8elT [Occ=Once] ->
                                            case <# [x_s8elR y_s8elT] of {
                                              __DEFAULT -> GHC.Types.True [];
                                              1# -> GHC.Types.False [];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fOrdBufferMode_$cmax
  :: GHC.IO.Handle.Types.BufferMode
     -> GHC.IO.Handle.Types.BufferMode -> GHC.IO.Handle.Types.BufferMode
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s8elV y_s8elW]
        case y_s8elW of wild_s8elX {
          GHC.IO.Handle.Types.NoBuffering -> x_s8elV;
          GHC.IO.Handle.Types.LineBuffering ->
              case x_s8elV of wild1_s8elY {
                __DEFAULT -> GHC.IO.Handle.Types.LineBuffering [];
                GHC.IO.Handle.Types.BlockBuffering _ [Occ=Dead] -> wild1_s8elY;
              };
          GHC.IO.Handle.Types.BlockBuffering a1_s8em0 [Occ=Once!] ->
              case x_s8elV of wild1_s8em1 {
                __DEFAULT -> wild_s8elX;
                GHC.IO.Handle.Types.BlockBuffering b1_s8em2 [Occ=Once*!] ->
                    case a1_s8em0 of {
                      GHC.Base.Nothing ->
                          case b1_s8em2 of {
                            GHC.Base.Nothing -> wild_s8elX;
                            GHC.Base.Just _ [Occ=Dead] -> wild1_s8em1;
                          };
                      GHC.Base.Just a2_s8em6 [Occ=Once!] ->
                          case b1_s8em2 of {
                            GHC.Base.Nothing -> wild_s8elX;
                            GHC.Base.Just b2_s8em8 [Occ=Once!] ->
                                case a2_s8em6 of {
                                  GHC.Types.I# x1_s8ema [Occ=Once] ->
                                      case b2_s8em8 of {
                                        GHC.Types.I# y1_s8emc [Occ=Once] ->
                                            case <# [x1_s8ema y1_s8emc] of {
                                              __DEFAULT -> wild_s8elX;
                                              1# -> wild1_s8em1;
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fOrdBufferMode_$c>=
  :: GHC.IO.Handle.Types.BufferMode
     -> GHC.IO.Handle.Types.BufferMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8eme b_s8emf]
        case a_s8eme of {
          GHC.IO.Handle.Types.NoBuffering ->
              case b_s8emf of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Handle.Types.NoBuffering -> GHC.Types.True [];
              };
          GHC.IO.Handle.Types.LineBuffering ->
              case b_s8emf of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Handle.Types.BlockBuffering _ [Occ=Dead] ->
                    GHC.Types.False [];
              };
          GHC.IO.Handle.Types.BlockBuffering a1_s8emk [Occ=Once!] ->
              case b_s8emf of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Handle.Types.BlockBuffering b1_s8emm [Occ=Once*!] ->
                    case a1_s8emk of {
                      GHC.Base.Nothing ->
                          case b1_s8emm of {
                            GHC.Base.Nothing -> GHC.Types.True [];
                            GHC.Base.Just _ [Occ=Dead] -> GHC.Types.False [];
                          };
                      GHC.Base.Just a2_s8emq [Occ=Once!] ->
                          case b1_s8emm of {
                            GHC.Base.Nothing -> GHC.Types.True [];
                            GHC.Base.Just b2_s8ems [Occ=Once!] ->
                                case a2_s8emq of {
                                  GHC.Types.I# x_s8emu [Occ=Once] ->
                                      case b2_s8ems of {
                                        GHC.Types.I# y_s8emw [Occ=Once] ->
                                            case <# [x_s8emu y_s8emw] of {
                                              __DEFAULT -> GHC.Types.True [];
                                              1# -> GHC.Types.False [];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fOrdBufferMode_$c>
  :: GHC.IO.Handle.Types.BufferMode
     -> GHC.IO.Handle.Types.BufferMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8emy b_s8emz]
        GHC.IO.Handle.Types.$fOrdBufferMode_$c< b_s8emz a_s8emy;

GHC.IO.Handle.Types.$fOrdBufferMode_$cmin
  :: GHC.IO.Handle.Types.BufferMode
     -> GHC.IO.Handle.Types.BufferMode -> GHC.IO.Handle.Types.BufferMode
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s8emA y_s8emB]
        case y_s8emB of wild_s8emC {
          GHC.IO.Handle.Types.NoBuffering ->
              case x_s8emA of {
                __DEFAULT -> GHC.IO.Handle.Types.NoBuffering [];
              };
          GHC.IO.Handle.Types.LineBuffering ->
              case x_s8emA of wild1_s8emE {
                __DEFAULT -> wild1_s8emE;
                GHC.IO.Handle.Types.BlockBuffering _ [Occ=Dead] ->
                    GHC.IO.Handle.Types.LineBuffering [];
              };
          GHC.IO.Handle.Types.BlockBuffering a1_s8emG [Occ=Once!] ->
              case x_s8emA of wild1_s8emH {
                __DEFAULT -> wild1_s8emH;
                GHC.IO.Handle.Types.BlockBuffering b1_s8emI [Occ=Once*!] ->
                    case a1_s8emG of {
                      GHC.Base.Nothing ->
                          case b1_s8emI of {
                            GHC.Base.Nothing -> wild1_s8emH;
                            GHC.Base.Just _ [Occ=Dead] -> wild_s8emC;
                          };
                      GHC.Base.Just a2_s8emM [Occ=Once!] ->
                          case b1_s8emI of {
                            GHC.Base.Nothing -> wild1_s8emH;
                            GHC.Base.Just b2_s8emO [Occ=Once!] ->
                                case a2_s8emM of {
                                  GHC.Types.I# x1_s8emQ [Occ=Once] ->
                                      case b2_s8emO of {
                                        GHC.Types.I# y1_s8emS [Occ=Once] ->
                                            case <# [x1_s8emQ y1_s8emS] of {
                                              __DEFAULT -> wild1_s8emH;
                                              1# -> wild_s8emC;
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fOrdBufferMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.IO.Handle.Types.BufferMode
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.IO.Handle.Types.$fEqBufferMode
                                      GHC.IO.Handle.Types.$fOrdBufferMode_$ccompare
                                      GHC.IO.Handle.Types.$fOrdBufferMode_$c<
                                      GHC.IO.Handle.Types.$fOrdBufferMode_$c<=
                                      GHC.IO.Handle.Types.$fOrdBufferMode_$c>
                                      GHC.IO.Handle.Types.$fOrdBufferMode_$c>=
                                      GHC.IO.Handle.Types.$fOrdBufferMode_$cmax
                                      GHC.IO.Handle.Types.$fOrdBufferMode_$cmin];

GHC.IO.Handle.Types.haOtherSide
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s8emU]
        case ds_s8emU of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds9_s8enb [Occ=Once] ->
              ds9_s8enb;
        };

GHC.IO.Handle.Types.haOutputNL
  :: GHC.IO.Handle.Types.Handle__ -> GHC.IO.Handle.Types.Newline
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s8enc]
        case ds_s8enc of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds8_s8ens [Occ=Once]
                                       _ [Occ=Dead] ->
              ds8_s8ens;
        };

GHC.IO.Handle.Types.haInputNL
  :: GHC.IO.Handle.Types.Handle__ -> GHC.IO.Handle.Types.Newline
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s8enu]
        case ds_s8enu of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds7_s8enJ [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              ds7_s8enJ;
        };

GHC.IO.Handle.Types.haCodec
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s8enM]
        case ds_s8enM of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds6_s8eo0 [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              ds6_s8eo0;
        };

GHC.IO.Handle.Types.haDecoder :: ()
[GblId[[RecSel(naughty)]], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE ()! [];

GHC.IO.Handle.Types.haEncoder :: ()
[GblId[[RecSel(naughty)]], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE ()! [];

GHC.IO.Handle.Types.haBuffers
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IORef.IORef
          (GHC.IO.Handle.Types.BufferList GHC.IO.Buffer.CharBufElem)
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>m,
 Unf=OtherCon []] =
    [] \r [ds_s8eo4]
        case ds_s8eo4 of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       dt3_s8eof [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              GHC.STRef.STRef [dt3_s8eof];
        };

GHC.IO.Handle.Types.haCharBuffer
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IORef.IORef (GHC.IO.Buffer.Buffer GHC.IO.Buffer.CharBufElem)
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>m,
 Unf=OtherCon []] =
    [] \r [ds_s8eom]
        case ds_s8eom of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       dt2_s8eow [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              GHC.STRef.STRef [dt2_s8eow];
        };

GHC.IO.Handle.Types.haLastDecode :: ()
[GblId[[RecSel(naughty)]], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE ()! [];

GHC.IO.Handle.Types.haBufferMode
  :: GHC.IO.Handle.Types.Handle__ -> GHC.IO.Handle.Types.BufferMode
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s8eoE]
        case ds_s8eoE of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds3_s8eoM [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              ds3_s8eoM;
        };

GHC.IO.Handle.Types.haByteBuffer
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IORef.IORef (GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>m,
 Unf=OtherCon []] =
    [] \r [ds_s8eoW]
        case ds_s8eoW of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       dt_s8ep3 [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              GHC.STRef.STRef [dt_s8ep3];
        };

GHC.IO.Handle.Types.haType
  :: GHC.IO.Handle.Types.Handle__ -> GHC.IO.Handle.Types.HandleType
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s8epe]
        case ds_s8epe of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds2_s8epk [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              ds2_s8epk;
        };

GHC.IO.Handle.Types.haDevice :: ()
[GblId[[RecSel(naughty)]], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE ()! [];

GHC.IO.Handle.Types.outputNL
  :: GHC.IO.Handle.Types.NewlineMode -> GHC.IO.Handle.Types.Newline
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LS),1*U(A,1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_s8epw]
        case ds_s8epw of {
          GHC.IO.Handle.Types.NewlineMode _ [Occ=Dead]
                                          ds2_s8epz [Occ=Once] ->
              ds2_s8epz;
        };

GHC.IO.Handle.Types.inputNL
  :: GHC.IO.Handle.Types.NewlineMode -> GHC.IO.Handle.Types.Newline
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,A)>,
 Unf=OtherCon []] =
    [] \r [ds_s8epA]
        case ds_s8epA of {
          GHC.IO.Handle.Types.NewlineMode ds1_s8epC [Occ=Once]
                                          _ [Occ=Dead] ->
              ds1_s8epC;
        };

GHC.IO.Handle.Types.isReadableHandleType
  :: GHC.IO.Handle.Types.HandleType -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s8epE]
        case ds_s8epE of {
          __DEFAULT -> GHC.Types.False [];
          GHC.IO.Handle.Types.ReadHandle -> GHC.Types.True [];
          GHC.IO.Handle.Types.ReadWriteHandle -> GHC.Types.True [];
        };

GHC.IO.Handle.Types.isWritableHandleType
  :: GHC.IO.Handle.Types.HandleType -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s8epG]
        case ds_s8epG of {
          __DEFAULT -> GHC.Types.False [];
          GHC.IO.Handle.Types.WriteHandle -> GHC.Types.True [];
          GHC.IO.Handle.Types.AppendHandle -> GHC.Types.True [];
          GHC.IO.Handle.Types.ReadWriteHandle -> GHC.Types.True [];
        };

GHC.IO.Handle.Types.isReadWriteHandleType
  :: GHC.IO.Handle.Types.HandleType -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s8epI]
        case ds_s8epI of {
          __DEFAULT -> GHC.Types.False [];
          GHC.IO.Handle.Types.ReadWriteHandle -> GHC.Types.True [];
        };

GHC.IO.Handle.Types.nativeNewline :: GHC.IO.Handle.Types.Newline
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.LF! [];

GHC.IO.Handle.Types.universalNewlineMode
  :: GHC.IO.Handle.Types.NewlineMode
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.NewlineMode! [GHC.IO.Handle.Types.CRLF
                                                    GHC.IO.Handle.Types.LF];

GHC.IO.Handle.Types.nativeNewlineMode
  :: GHC.IO.Handle.Types.NewlineMode
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.NewlineMode! [GHC.IO.Handle.Types.LF
                                                    GHC.IO.Handle.Types.LF];

GHC.IO.Handle.Types.noNewlineTranslation
  :: GHC.IO.Handle.Types.NewlineMode
[GblId, Str=m, Unf=OtherCon []] =
    [] \u [] GHC.IO.Handle.Types.nativeNewlineMode;

GHC.IO.Handle.Types.showHandle1 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "{handle: "#;

GHC.IO.Handle.Types.showHandle
  :: GHC.IO.FilePath -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [file_s8epK eta_s8epL]
        let {
          sat_s8epN [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [file_s8epK eta_s8epL] \u []
                  let {
                    sat_s8epM [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                    [LclId] =
                        [eta_s8epL] \s []
                            GHC.CString.unpackAppendCString#
                                GHC.IO.Handle.Types.$fReadNewlineMode5 eta_s8epL;
                  } in  GHC.Base.++ file_s8epK sat_s8epM;
        } in 
          GHC.CString.unpackAppendCString#
              GHC.IO.Handle.Types.showHandle1 sat_s8epN;

GHC.IO.Handle.Types.$fShowHandle_$cshowsPrec
  :: GHC.Types.Int -> GHC.IO.Handle.Types.Handle -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_s8epO ds1_s8epP eta_s8epQ]
        case ds1_s8epP of {
          GHC.IO.Handle.Types.FileHandle file_s8epS [Occ=Once]
                                         _ [Occ=Dead] ->
              GHC.IO.Handle.Types.showHandle file_s8epS eta_s8epQ;
          GHC.IO.Handle.Types.DuplexHandle file_s8epU [Occ=Once]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              GHC.IO.Handle.Types.showHandle file_s8epU eta_s8epQ;
        };

GHC.IO.Handle.Types.$fShowHandle_$cshow
  :: GHC.IO.Handle.Types.Handle -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s8epX]
        case x_s8epX of {
          GHC.IO.Handle.Types.FileHandle file_s8epZ [Occ=Once]
                                         _ [Occ=Dead] ->
              let {
                sat_s8eq1 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [file_s8epZ] \u []
                        GHC.Base.++ file_s8epZ GHC.IO.Handle.Types.$fReadNewlineMode4;
              } in 
                GHC.CString.unpackAppendCString#
                    GHC.IO.Handle.Types.showHandle1 sat_s8eq1;
          GHC.IO.Handle.Types.DuplexHandle file_s8eq2 [Occ=Once]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              let {
                sat_s8eq5 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [file_s8eq2] \u []
                        GHC.Base.++ file_s8eq2 GHC.IO.Handle.Types.$fReadNewlineMode4;
              } in 
                GHC.CString.unpackAppendCString#
                    GHC.IO.Handle.Types.showHandle1 sat_s8eq5;
        };

GHC.IO.Handle.Types.$fShowHandle1
  :: GHC.IO.Handle.Types.Handle -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_s8eq6 eta_s8eq7]
        case ds_s8eq6 of {
          GHC.IO.Handle.Types.FileHandle file_s8eq9 [Occ=Once]
                                         _ [Occ=Dead] ->
              GHC.IO.Handle.Types.showHandle file_s8eq9 eta_s8eq7;
          GHC.IO.Handle.Types.DuplexHandle file_s8eqb [Occ=Once]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              GHC.IO.Handle.Types.showHandle file_s8eqb eta_s8eq7;
        };

GHC.IO.Handle.Types.$fShowHandle_$cshowList
  :: [GHC.IO.Handle.Types.Handle] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s8eqe s_s8eqf]
        GHC.Show.showList__
            GHC.IO.Handle.Types.$fShowHandle1 ls_s8eqe s_s8eqf;

GHC.IO.Handle.Types.$fShowHandle [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Handle.Types.Handle
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Handle.Types.$fShowHandle_$cshowsPrec
                                    GHC.IO.Handle.Types.$fShowHandle_$cshow
                                    GHC.IO.Handle.Types.$fShowHandle_$cshowList];

GHC.IO.Handle.Types.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.Handle.Types.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$trModule4];

GHC.IO.Handle.Types.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Handle.Types"#;

GHC.IO.Handle.Types.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$trModule2];

GHC.IO.Handle.Types.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Handle.Types.$trModule3
                                     GHC.IO.Handle.Types.$trModule1];

$krep_r8a59 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep1_r8a5a :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Encoding.Types.$tcTextEncoding
                                              GHC.Types.[]];

$krep2_r8a5b :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Word.$tcWord8
                                              GHC.Types.[]];

$krep3_r8a5c :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep4_r8a5d :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r8a59 GHC.Types.[]];

$krep5_r8a5e :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep4_r8a5d];

$krep6_r8a5f :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r8a5a GHC.Types.[]];

$krep7_r8a5g :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep6_r8a5f];

$krep8_r8a5h :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_r8a5c GHC.Types.[]];

$krep9_r8a5i :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Buffer.$tcBuffer
                                              $krep8_r8a5h];

$krep10_r8a5j :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep9_r8a5i GHC.Types.[]];

$krep11_r8a5k :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IORef.$tcIORef
                                              $krep10_r8a5j];

$krep12_r8a5l :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r8a5b GHC.Types.[]];

$krep13_r8a5m :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Buffer.$tcBuffer
                                              $krep12_r8a5l];

$krep14_r8a5n :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep13_r8a5m GHC.Types.[]];

$krep15_r8a5o :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IORef.$tcIORef
                                              $krep14_r8a5n];

$krep16_r8a5p :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep8_r8a5h];

$krep17_r8a5q :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [2#];

$krep18_r8a5r :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep17_r8a5q GHC.Types.[]];

$krep19_r8a5s :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_r8a5c $krep18_r8a5r];

$krep20_r8a5t :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r8a5b $krep19_r8a5s];

$krep21_r8a5u :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Encoding.Types.$tcBufferCodec
                                              $krep20_r8a5t];

$krep22_r8a5v :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep21_r8a5u GHC.Types.[]];

$krep23_r8a5w :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep22_r8a5v];

$krep24_r8a5x :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep17_r8a5q $krep14_r8a5n];

$krep25_r8a5y :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,)
                                              $krep24_r8a5x];

$krep26_r8a5z :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep25_r8a5y GHC.Types.[]];

$krep27_r8a5A :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IORef.$tcIORef
                                              $krep26_r8a5z];

$krep28_r8a5B :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [1#];

$krep29_r8a5C :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep28_r8a5B GHC.Types.[]];

$krep30_r8a5D :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r8a5b $krep29_r8a5C];

$krep31_r8a5E :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_r8a5c $krep30_r8a5D];

$krep32_r8a5F :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Encoding.Types.$tcBufferCodec
                                              $krep31_r8a5E];

$krep33_r8a5G :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep32_r8a5F GHC.Types.[]];

$krep34_r8a5H :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep33_r8a5G];

$krep35_r8a5I :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep36_r8a5J :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep35_r8a5I GHC.Types.[]];

$krep37_r8a5K :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.ForeignPtr.$tcForeignPtr
                                              $krep36_r8a5J];

$krep38_r8a5L :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Types.krep$* $krep36_r8a5J];

$krep39_r8a5M :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.Typeable.Internal.$tcTypeable
                                              $krep38_r8a5L];

$krep40_r8a5N :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Device.$tcIODevice
                                              $krep36_r8a5J];

$krep41_r8a5O :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.BufferedIO.$tcBufferedIO
                                              $krep36_r8a5J];

GHC.IO.Handle.Types.$tcBufferList2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BufferList"#;

GHC.IO.Handle.Types.$tcBufferList1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tcBufferList2];

GHC.IO.Handle.Types.$tcBufferList :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16602278556585116844##
                                    18164509953320487254##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tcBufferList1
                                    0#
                                    GHC.Types.krep$*Arr*];

GHC.IO.Handle.Types.$tc'BufferListNil1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcBufferList
                                              $krep36_r8a5J];

GHC.IO.Handle.Types.$tc'BufferListNil3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BufferListNil"#;

GHC.IO.Handle.Types.$tc'BufferListNil2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'BufferListNil3];

GHC.IO.Handle.Types.$tc'BufferListNil :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1776148480580179033##
                                    13181184993065174936##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'BufferListNil2
                                    1#
                                    GHC.IO.Handle.Types.$tc'BufferListNil1];

$krep42_r8a5P :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.IO.Handle.Types.$tc'BufferListNil1
                                         GHC.IO.Handle.Types.$tc'BufferListNil1];

GHC.IO.Handle.Types.$tc'BufferListCons1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep37_r8a5K $krep42_r8a5P];

GHC.IO.Handle.Types.$tc'BufferListCons3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BufferListCons"#;

GHC.IO.Handle.Types.$tc'BufferListCons2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'BufferListCons3];

GHC.IO.Handle.Types.$tc'BufferListCons :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17252346539814354939##
                                    274626690118510806##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'BufferListCons2
                                    1#
                                    GHC.IO.Handle.Types.$tc'BufferListCons1];

$krep43_r8a5Q :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcBufferList
                                              $krep8_r8a5h];

$krep44_r8a5R :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep43_r8a5Q GHC.Types.[]];

$krep45_r8a5S :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IORef.$tcIORef
                                              $krep44_r8a5R];

GHC.IO.Handle.Types.$tcHandleType2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "HandleType"#;

GHC.IO.Handle.Types.$tcHandleType1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tcHandleType2];

GHC.IO.Handle.Types.$tcHandleType :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12652050740177317592##
                                    15012172050125063359##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tcHandleType1
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.Handle.Types.$tc'AppendHandle1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcHandleType
                                              GHC.Types.[]];

GHC.IO.Handle.Types.$tc'ClosedHandle2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ClosedHandle"#;

GHC.IO.Handle.Types.$tc'ClosedHandle1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'ClosedHandle2];

GHC.IO.Handle.Types.$tc'ClosedHandle :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3827246897052092772##
                                    908733983357893198##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'ClosedHandle1
                                    0#
                                    GHC.IO.Handle.Types.$tc'AppendHandle1];

GHC.IO.Handle.Types.$tc'SemiClosedHandle2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'SemiClosedHandle"#;

GHC.IO.Handle.Types.$tc'SemiClosedHandle1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'SemiClosedHandle2];

GHC.IO.Handle.Types.$tc'SemiClosedHandle :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9212351547956271402##
                                    6570718180183054490##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'SemiClosedHandle1
                                    0#
                                    GHC.IO.Handle.Types.$tc'AppendHandle1];

GHC.IO.Handle.Types.$tc'ReadHandle2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ReadHandle"#;

GHC.IO.Handle.Types.$tc'ReadHandle1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'ReadHandle2];

GHC.IO.Handle.Types.$tc'ReadHandle :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [269968663592081974##
                                    17473723309710900549##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'ReadHandle1
                                    0#
                                    GHC.IO.Handle.Types.$tc'AppendHandle1];

GHC.IO.Handle.Types.$tc'WriteHandle2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'WriteHandle"#;

GHC.IO.Handle.Types.$tc'WriteHandle1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'WriteHandle2];

GHC.IO.Handle.Types.$tc'WriteHandle :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [18024523813608199082##
                                    4783872735135983851##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'WriteHandle1
                                    0#
                                    GHC.IO.Handle.Types.$tc'AppendHandle1];

GHC.IO.Handle.Types.$tc'AppendHandle3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'AppendHandle"#;

GHC.IO.Handle.Types.$tc'AppendHandle2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'AppendHandle3];

GHC.IO.Handle.Types.$tc'AppendHandle :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [18423480119042393547##
                                    8911069045719960050##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'AppendHandle2
                                    0#
                                    GHC.IO.Handle.Types.$tc'AppendHandle1];

GHC.IO.Handle.Types.$tc'ReadWriteHandle2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ReadWriteHandle"#;

GHC.IO.Handle.Types.$tc'ReadWriteHandle1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'ReadWriteHandle2];

GHC.IO.Handle.Types.$tc'ReadWriteHandle :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6962298179673541916##
                                    7858738479804269456##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'ReadWriteHandle1
                                    0#
                                    GHC.IO.Handle.Types.$tc'AppendHandle1];

GHC.IO.Handle.Types.$tcBufferMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BufferMode"#;

GHC.IO.Handle.Types.$tcBufferMode1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tcBufferMode2];

GHC.IO.Handle.Types.$tcBufferMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2181253694666364469##
                                    18094997560331273583##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tcBufferMode1
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.Handle.Types.$tc'LineBuffering1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcBufferMode
                                              GHC.Types.[]];

GHC.IO.Handle.Types.$tc'NoBuffering2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'NoBuffering"#;

GHC.IO.Handle.Types.$tc'NoBuffering1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'NoBuffering2];

GHC.IO.Handle.Types.$tc'NoBuffering :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1829914617507863771##
                                    11519122601481432262##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'NoBuffering1
                                    0#
                                    GHC.IO.Handle.Types.$tc'LineBuffering1];

GHC.IO.Handle.Types.$tc'LineBuffering3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'LineBuffering"#;

GHC.IO.Handle.Types.$tc'LineBuffering2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'LineBuffering3];

GHC.IO.Handle.Types.$tc'LineBuffering :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6417231512954421547##
                                    14761155862500981941##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'LineBuffering2
                                    0#
                                    GHC.IO.Handle.Types.$tc'LineBuffering1];

GHC.IO.Handle.Types.$tc'BlockBuffering1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep5_r8a5e
                                         GHC.IO.Handle.Types.$tc'LineBuffering1];

GHC.IO.Handle.Types.$tc'BlockBuffering3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BlockBuffering"#;

GHC.IO.Handle.Types.$tc'BlockBuffering2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'BlockBuffering3];

GHC.IO.Handle.Types.$tc'BlockBuffering :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [704611490471072872##
                                    15656058643765081689##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'BlockBuffering2
                                    0#
                                    GHC.IO.Handle.Types.$tc'BlockBuffering1];

GHC.IO.Handle.Types.$tcNewline2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Newline"#;

GHC.IO.Handle.Types.$tcNewline1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tcNewline2];

GHC.IO.Handle.Types.$tcNewline :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4144517894815066994##
                                    10872055347860317487##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tcNewline1
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.Handle.Types.$tc'CRLF1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcNewline
                                              GHC.Types.[]];

GHC.IO.Handle.Types.$tc'LF2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'LF"#;

GHC.IO.Handle.Types.$tc'LF1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'LF2];

GHC.IO.Handle.Types.$tc'LF :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [8352565500432618804##
                                    14951155965269318914##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'LF1
                                    0#
                                    GHC.IO.Handle.Types.$tc'CRLF1];

GHC.IO.Handle.Types.$tc'CRLF3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'CRLF"#;

GHC.IO.Handle.Types.$tc'CRLF2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'CRLF3];

GHC.IO.Handle.Types.$tc'CRLF :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12041259567283068515##
                                    3210182148185771829##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'CRLF2
                                    0#
                                    GHC.IO.Handle.Types.$tc'CRLF1];

GHC.IO.Handle.Types.$tcHandle__2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Handle__"#;

GHC.IO.Handle.Types.$tcHandle__1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tcHandle__2];

GHC.IO.Handle.Types.$tcHandle__ :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [10675922960094776064##
                                    10563785792974977547##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tcHandle__1
                                    0#
                                    GHC.Types.krep$*];

$krep46_r8a5T :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcHandle__
                                              GHC.Types.[]];

$krep47_r8a5U :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep46_r8a5T GHC.Types.[]];

$krep48_r8a5V :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.MVar.$tcMVar
                                              $krep47_r8a5U];

$krep49_r8a5W :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep48_r8a5V GHC.Types.[]];

$krep50_r8a5X :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep49_r8a5W];

$krep51_r8a5Y :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep50_r8a5X $krep46_r8a5T];

$krep52_r8a5Z :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.IO.Handle.Types.$tc'CRLF1
                                         $krep51_r8a5Y];

$krep53_r8a60 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.IO.Handle.Types.$tc'CRLF1
                                         $krep52_r8a5Z];

$krep54_r8a61 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep7_r8a5g $krep53_r8a60];

$krep55_r8a62 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep23_r8a5w $krep54_r8a61];

$krep56_r8a63 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep34_r8a5H $krep55_r8a62];

$krep57_r8a64 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep45_r8a5S $krep56_r8a63];

$krep58_r8a65 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep11_r8a5k $krep57_r8a64];

$krep59_r8a66 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep27_r8a5A $krep58_r8a65];

$krep60_r8a67 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.IO.Handle.Types.$tc'LineBuffering1
                                         $krep59_r8a66];

$krep61_r8a68 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep15_r8a5o $krep60_r8a67];

$krep62_r8a69 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.IO.Handle.Types.$tc'AppendHandle1
                                         $krep61_r8a68];

$krep63_r8a6a :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep35_r8a5I $krep62_r8a69];

$krep64_r8a6b :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep39_r8a5M $krep63_r8a6a];

$krep65_r8a6c :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep41_r8a5O $krep64_r8a6b];

GHC.IO.Handle.Types.$tc'Handle__1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep40_r8a5N $krep65_r8a6c];

GHC.IO.Handle.Types.$tc'Handle__3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Handle__"#;

GHC.IO.Handle.Types.$tc'Handle__2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'Handle__3];

GHC.IO.Handle.Types.$tc'Handle__ :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15400920814375205416##
                                    14458810719499819570##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'Handle__2
                                    3#
                                    GHC.IO.Handle.Types.$tc'Handle__1];

GHC.IO.Handle.Types.$tcHandle2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Handle"#;

GHC.IO.Handle.Types.$tcHandle1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tcHandle2];

GHC.IO.Handle.Types.$tcHandle :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6808292778723485333##
                                    9239299165073943659##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tcHandle1
                                    0#
                                    GHC.Types.krep$*];

$krep66_r8a6d :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcHandle
                                              GHC.Types.[]];

$krep67_r8a6e :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep48_r8a5V $krep66_r8a6d];

$krep68_r8a6f :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep48_r8a5V $krep67_r8a6e];

GHC.IO.Handle.Types.$tc'DuplexHandle1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep16_r8a5p $krep68_r8a6f];

GHC.IO.Handle.Types.$tc'DuplexHandle3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'DuplexHandle"#;

GHC.IO.Handle.Types.$tc'DuplexHandle2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'DuplexHandle3];

GHC.IO.Handle.Types.$tc'DuplexHandle :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [477065760828861081##
                                    4557316572761143129##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'DuplexHandle2
                                    0#
                                    GHC.IO.Handle.Types.$tc'DuplexHandle1];

GHC.IO.Handle.Types.$tc'FileHandle1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep16_r8a5p $krep67_r8a6e];

GHC.IO.Handle.Types.$tc'FileHandle3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'FileHandle"#;

GHC.IO.Handle.Types.$tc'FileHandle2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'FileHandle3];

GHC.IO.Handle.Types.$tc'FileHandle :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [5544613225695748436##
                                    8829945929965735507##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'FileHandle2
                                    0#
                                    GHC.IO.Handle.Types.$tc'FileHandle1];

GHC.IO.Handle.Types.$tcNewlineMode1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$fReadNewlineMode17];

GHC.IO.Handle.Types.$tcNewlineMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17953040817059389032##
                                    12498949339099960838##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tcNewlineMode1
                                    0#
                                    GHC.Types.krep$*];

$krep69_r8a6g :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcNewlineMode
                                              GHC.Types.[]];

$krep70_r8a6h :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.IO.Handle.Types.$tc'CRLF1
                                         $krep69_r8a6g];

GHC.IO.Handle.Types.$tc'NewlineMode1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.IO.Handle.Types.$tc'CRLF1
                                         $krep70_r8a6h];

GHC.IO.Handle.Types.$tc'NewlineMode3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'NewlineMode"#;

GHC.IO.Handle.Types.$tc'NewlineMode2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'NewlineMode3];

GHC.IO.Handle.Types.$tc'NewlineMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4266278501114659446##
                                    17947462423734457010##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'NewlineMode2
                                    0#
                                    GHC.IO.Handle.Types.$tc'NewlineMode1];

GHC.IO.Handle.Types.checkHandleInvariants1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><S,U>, Unf=OtherCon []] =
    [] \r [ds_s8eqg s_s8eqh] (#,#) [s_s8eqh GHC.Tuple.()];

GHC.IO.Handle.Types.checkHandleInvariants
  :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.IO.Handle.Types.checkHandleInvariants1 eta_B2 eta_B1;

GHC.IO.Handle.Types.NewlineMode
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.IO.Handle.Types.NewlineMode
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.IO.Handle.Types.NewlineMode [eta_B2 eta_B1];

GHC.IO.Handle.Types.LF :: GHC.IO.Handle.Types.Newline
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.LF! [];

GHC.IO.Handle.Types.CRLF :: GHC.IO.Handle.Types.Newline
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.CRLF! [];

GHC.IO.Handle.Types.NoBuffering :: GHC.IO.Handle.Types.BufferMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.NoBuffering! [];

GHC.IO.Handle.Types.LineBuffering :: GHC.IO.Handle.Types.BufferMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.LineBuffering! [];

GHC.IO.Handle.Types.BlockBuffering
  :: GHC.Base.Maybe GHC.Types.Int -> GHC.IO.Handle.Types.BufferMode
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m3,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.IO.Handle.Types.BlockBuffering [eta_B1];

GHC.IO.Handle.Types.ClosedHandle :: GHC.IO.Handle.Types.HandleType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.ClosedHandle! [];

GHC.IO.Handle.Types.SemiClosedHandle
  :: GHC.IO.Handle.Types.HandleType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.SemiClosedHandle! [];

GHC.IO.Handle.Types.ReadHandle :: GHC.IO.Handle.Types.HandleType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.ReadHandle! [];

GHC.IO.Handle.Types.WriteHandle :: GHC.IO.Handle.Types.HandleType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.WriteHandle! [];

GHC.IO.Handle.Types.AppendHandle :: GHC.IO.Handle.Types.HandleType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.AppendHandle! [];

GHC.IO.Handle.Types.ReadWriteHandle
  :: GHC.IO.Handle.Types.HandleType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.ReadWriteHandle! [];

GHC.IO.Handle.Types.BufferListNil
  :: forall e. GHC.IO.Handle.Types.BufferList e
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.BufferListNil! [];

GHC.IO.Handle.Types.BufferListCons
  :: forall e.
     GHC.IO.Buffer.RawBuffer e
     -> GHC.IO.Handle.Types.BufferList e
     -> GHC.IO.Handle.Types.BufferList e
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.IO.Handle.Types.BufferListCons [eta_B2 eta_B1];

GHC.IO.Handle.Types.Handle__
  :: forall dev enc_state dec_state.
     (GHC.IO.Device.IODevice dev, GHC.IO.BufferedIO.BufferedIO dev,
      Data.Typeable.Internal.Typeable dev) =>
     dev
     -> GHC.IO.Handle.Types.HandleType
     -> GHC.Prim.MutVar#
          GHC.Prim.RealWorld (GHC.IO.Buffer.Buffer GHC.Word.Word8)
     -> GHC.IO.Handle.Types.BufferMode
     -> GHC.Prim.MutVar#
          GHC.Prim.RealWorld (dec_state, GHC.IO.Buffer.Buffer GHC.Word.Word8)
     -> GHC.Prim.MutVar#
          GHC.Prim.RealWorld (GHC.IO.Buffer.Buffer GHC.IO.Buffer.CharBufElem)
     -> GHC.Prim.MutVar#
          GHC.Prim.RealWorld
          (GHC.IO.Handle.Types.BufferList GHC.IO.Buffer.CharBufElem)
     -> GHC.Base.Maybe (GHC.IO.Encoding.Types.TextEncoder enc_state)
     -> GHC.Base.Maybe (GHC.IO.Encoding.Types.TextDecoder dec_state)
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
     -> GHC.IO.Handle.Types.Handle__
[GblId[DataCon],
 Arity=16,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_Bg
           eta_Bf
           eta_Be
           eta_Bd
           eta_Bc
           eta_Bb
           eta_Ba
           eta_B9
           eta_B8
           eta_B7
           eta_B6
           eta_B5
           eta_B4
           eta_B3
           eta_B2
           eta_B1]
        GHC.IO.Handle.Types.Handle__ [eta_Bg
                                      eta_Bf
                                      eta_Be
                                      eta_Bd
                                      eta_Bc
                                      eta_Bb
                                      eta_Ba
                                      eta_B9
                                      eta_B8
                                      eta_B7
                                      eta_B6
                                      eta_B5
                                      eta_B4
                                      eta_B3
                                      eta_B2
                                      eta_B1];

GHC.IO.Handle.Types.FileHandle
  :: GHC.IO.FilePath
     -> GHC.Prim.MVar# GHC.Prim.RealWorld GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Handle.Types.Handle
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m1,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.IO.Handle.Types.FileHandle [eta_B2 eta_B1];

GHC.IO.Handle.Types.DuplexHandle
  :: GHC.IO.FilePath
     -> GHC.Prim.MVar# GHC.Prim.RealWorld GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.MVar# GHC.Prim.RealWorld GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Handle.Types.Handle
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.Types.DuplexHandle [eta_B3 eta_B2 eta_B1];


==================== STG syntax: ====================
2018-03-16 16:03:21.912815383 UTC

GHC.IO.Handle.Types.$WHandle__ [InlPrag=INLINE[2]]
  :: forall dev enc_state dec_state.
     (GHC.IO.Device.IODevice dev, GHC.IO.BufferedIO.BufferedIO dev,
      Data.Typeable.Internal.Typeable dev) =>
     dev
     -> GHC.IO.Handle.Types.HandleType
     -> GHC.IORef.IORef (GHC.IO.Buffer.Buffer GHC.Word.Word8)
     -> GHC.IO.Handle.Types.BufferMode
     -> GHC.IORef.IORef (dec_state, GHC.IO.Buffer.Buffer GHC.Word.Word8)
     -> GHC.IORef.IORef (GHC.IO.Buffer.Buffer GHC.IO.Buffer.CharBufElem)
     -> GHC.IORef.IORef
          (GHC.IO.Handle.Types.BufferList GHC.IO.Buffer.CharBufElem)
     -> GHC.Base.Maybe (GHC.IO.Encoding.Types.TextEncoder enc_state)
     -> GHC.Base.Maybe (GHC.IO.Encoding.Types.TextDecoder dec_state)
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
     -> GHC.IO.Handle.Types.Handle__
[GblId[DataConWrapper],
 Arity=16,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><S,U><L,U><S,U><L,U><S,U><S,U><S,U><L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [dt_s8ee6
           dt_s8ee7
           dt_s8ee8
           dt_s8ee9
           dt_s8eea
           dt_s8eeb
           dt_s8eec
           dt_s8eed
           dt_s8eee
           dt_s8eef
           dt_s8eeg
           dt_s8eeh
           dt_s8eei
           dt_s8eej
           dt_s8eek
           dt_s8eel]
        case dt_s8ee9 of dt_s8eem {
          __DEFAULT ->
              case dt_s8eeb of {
                GHC.STRef.STRef dt_s8eeo [Occ=Once] ->
                    case dt_s8eed of {
                      GHC.STRef.STRef dt_s8eeq [Occ=Once] ->
                          case dt_s8eee of {
                            GHC.STRef.STRef dt_s8ees [Occ=Once] ->
                                case dt_s8eef of {
                                  GHC.STRef.STRef dt_s8eeu [Occ=Once] ->
                                      GHC.IO.Handle.Types.Handle__ [dt_s8ee6
                                                                    dt_s8ee7
                                                                    dt_s8ee8
                                                                    dt_s8eem
                                                                    dt_s8eea
                                                                    dt_s8eeo
                                                                    dt_s8eec
                                                                    dt_s8eeq
                                                                    dt_s8ees
                                                                    dt_s8eeu
                                                                    dt_s8eeg
                                                                    dt_s8eeh
                                                                    dt_s8eei
                                                                    dt_s8eej
                                                                    dt_s8eek
                                                                    dt_s8eel];
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$WFileHandle [InlPrag=INLINE[2]]
  :: GHC.IO.FilePath
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Handle.Types.Handle
[GblId[DataConWrapper],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S,U>m1,
 Unf=OtherCon []] =
    [] \r [dt_s8eev dt_s8eew]
        case dt_s8eew of {
          GHC.MVar.MVar dt_s8eey [Occ=Once] ->
              GHC.IO.Handle.Types.FileHandle [dt_s8eev dt_s8eey];
        };

GHC.IO.Handle.Types.$WDuplexHandle [InlPrag=INLINE[2]]
  :: GHC.IO.FilePath
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Handle.Types.Handle
[GblId[DataConWrapper],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><S,U><S,U>m2,
 Unf=OtherCon []] =
    [] \r [dt_s8eez dt_s8eeA dt_s8eeB]
        case dt_s8eeA of {
          GHC.MVar.MVar dt_s8eeD [Occ=Once] ->
              case dt_s8eeB of {
                GHC.MVar.MVar dt_s8eeF [Occ=Once] ->
                    GHC.IO.Handle.Types.DuplexHandle [dt_s8eez dt_s8eeD dt_s8eeF];
              };
        };

GHC.IO.Handle.Types.$fShowHandleType12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "closed"#;

GHC.IO.Handle.Types.$fShowHandleType11 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fShowHandleType12;

GHC.IO.Handle.Types.$fShowHandleType10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "semi-closed"#;

GHC.IO.Handle.Types.$fShowHandleType9 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fShowHandleType10;

GHC.IO.Handle.Types.$fShowHandleType8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "readable"#;

GHC.IO.Handle.Types.$fShowHandleType7 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fShowHandleType8;

GHC.IO.Handle.Types.$fShowHandleType6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "writable"#;

GHC.IO.Handle.Types.$fShowHandleType5 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fShowHandleType6;

GHC.IO.Handle.Types.$fShowHandleType4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "writable (append)"#;

GHC.IO.Handle.Types.$fShowHandleType3 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fShowHandleType4;

GHC.IO.Handle.Types.$fShowHandleType2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "read-writable"#;

GHC.IO.Handle.Types.$fShowHandleType1 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fShowHandleType2;

GHC.IO.Handle.Types.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.HandleType
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s8eeG w1_s8eeH]
        case w_s8eeG of {
          GHC.IO.Handle.Types.ClosedHandle ->
              GHC.Base.++ GHC.IO.Handle.Types.$fShowHandleType11 w1_s8eeH;
          GHC.IO.Handle.Types.SemiClosedHandle ->
              GHC.Base.++ GHC.IO.Handle.Types.$fShowHandleType9 w1_s8eeH;
          GHC.IO.Handle.Types.ReadHandle ->
              GHC.Base.++ GHC.IO.Handle.Types.$fShowHandleType7 w1_s8eeH;
          GHC.IO.Handle.Types.WriteHandle ->
              GHC.Base.++ GHC.IO.Handle.Types.$fShowHandleType5 w1_s8eeH;
          GHC.IO.Handle.Types.AppendHandle ->
              GHC.Base.++ GHC.IO.Handle.Types.$fShowHandleType3 w1_s8eeH;
          GHC.IO.Handle.Types.ReadWriteHandle ->
              GHC.Base.++ GHC.IO.Handle.Types.$fShowHandleType1 w1_s8eeH;
        };

GHC.IO.Handle.Types.$fShowHandleType_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int
     -> GHC.IO.Handle.Types.HandleType -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s8eeJ w1_s8eeK w2_s8eeL]
        GHC.IO.Handle.Types.$w$cshowsPrec w1_s8eeK w2_s8eeL;

GHC.IO.Handle.Types.$fShowHandleType_$cshow
  :: GHC.IO.Handle.Types.HandleType -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s8eeM]
        case x_s8eeM of {
          GHC.IO.Handle.Types.ClosedHandle ->
              GHC.IO.Handle.Types.$fShowHandleType11;
          GHC.IO.Handle.Types.SemiClosedHandle ->
              GHC.IO.Handle.Types.$fShowHandleType9;
          GHC.IO.Handle.Types.ReadHandle ->
              GHC.IO.Handle.Types.$fShowHandleType7;
          GHC.IO.Handle.Types.WriteHandle ->
              GHC.IO.Handle.Types.$fShowHandleType5;
          GHC.IO.Handle.Types.AppendHandle ->
              GHC.IO.Handle.Types.$fShowHandleType3;
          GHC.IO.Handle.Types.ReadWriteHandle ->
              GHC.IO.Handle.Types.$fShowHandleType1;
        };

GHC.IO.Handle.Types.$fShowHandleType_$cshowList
  :: [GHC.IO.Handle.Types.HandleType] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s8eeO s_s8eeP]
        GHC.Show.showList__
            GHC.IO.Handle.Types.$w$cshowsPrec ls_s8eeO s_s8eeP;

GHC.IO.Handle.Types.$fShowHandleType [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Handle.Types.HandleType
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Handle.Types.$fShowHandleType_$cshowsPrec
                                    GHC.IO.Handle.Types.$fShowHandleType_$cshow
                                    GHC.IO.Handle.Types.$fShowHandleType_$cshowList];

GHC.IO.Handle.Types.$fEqHandle_$c==
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Types.Handle -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s8eeQ ds1_s8eeR]
        case ds_s8eeQ of {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_s8eeU [Occ=Once] ->
              case ds1_s8eeR of {
                GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt1_s8eeX [Occ=Once] ->
                    case sameMVar# [dt_s8eeU dt1_s8eeX] of sat_s8eeY {
                      __DEFAULT -> tagToEnum# [sat_s8eeY];
                    };
                GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead] ->
                    GHC.Types.False [];
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_s8ef3 [Occ=Once]
                                           _ [Occ=Dead] ->
              case ds1_s8eeR of {
                GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] _ [Occ=Dead] ->
                    GHC.Types.False [];
                GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                 dt2_s8ef9 [Occ=Once]
                                                 _ [Occ=Dead] ->
                    case sameMVar# [dt_s8ef3 dt2_s8ef9] of sat_s8efb {
                      __DEFAULT -> tagToEnum# [sat_s8efb];
                    };
              };
        };

GHC.IO.Handle.Types.$fEqHandle_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Types.Handle -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s8efc eta1_s8efd]
        case eta_s8efc of {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_s8efg [Occ=Once] ->
              case eta1_s8efd of {
                GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt1_s8efj [Occ=Once] ->
                    case sameMVar# [dt_s8efg dt1_s8efj] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
                GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead] ->
                    GHC.Types.True [];
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_s8efp [Occ=Once]
                                           _ [Occ=Dead] ->
              case eta1_s8efd of {
                GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] _ [Occ=Dead] ->
                    GHC.Types.True [];
                GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                 dt2_s8efv [Occ=Once]
                                                 _ [Occ=Dead] ->
                    case sameMVar# [dt_s8efp dt2_s8efv] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.IO.Handle.Types.$fEqHandle [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.IO.Handle.Types.Handle
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.IO.Handle.Types.$fEqHandle_$c==
                                     GHC.IO.Handle.Types.$fEqHandle_$c/=];

GHC.IO.Handle.Types.$fReadNewline11 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LF"#;

GHC.IO.Handle.Types.$fReadNewline10 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadNewline11;

GHC.IO.Handle.Types.$fReadNewline7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "CRLF"#;

GHC.IO.Handle.Types.$fReadNewline6 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadNewline7;

GHC.IO.Handle.Types.$fShowNewline_$cshowsPrec
  :: GHC.Types.Int -> GHC.IO.Handle.Types.Newline -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_s8efy ds1_s8efz eta_s8efA]
        case ds1_s8efz of {
          GHC.IO.Handle.Types.LF ->
              GHC.Base.++ GHC.IO.Handle.Types.$fReadNewline10 eta_s8efA;
          GHC.IO.Handle.Types.CRLF ->
              GHC.Base.++ GHC.IO.Handle.Types.$fReadNewline6 eta_s8efA;
        };

GHC.IO.Handle.Types.$fShowNewline_$cshow
  :: GHC.IO.Handle.Types.Newline -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s8efC]
        case x_s8efC of {
          GHC.IO.Handle.Types.LF -> GHC.IO.Handle.Types.$fReadNewline10;
          GHC.IO.Handle.Types.CRLF -> GHC.IO.Handle.Types.$fReadNewline6;
        };

GHC.IO.Handle.Types.$fShowNewline1
  :: GHC.IO.Handle.Types.Newline -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_s8efE eta_s8efF]
        case ds_s8efE of {
          GHC.IO.Handle.Types.LF ->
              GHC.Base.++ GHC.IO.Handle.Types.$fReadNewline10 eta_s8efF;
          GHC.IO.Handle.Types.CRLF ->
              GHC.Base.++ GHC.IO.Handle.Types.$fReadNewline6 eta_s8efF;
        };

GHC.IO.Handle.Types.$fShowNewline_$cshowList
  :: [GHC.IO.Handle.Types.Newline] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s8efH s_s8efI]
        GHC.Show.showList__
            GHC.IO.Handle.Types.$fShowNewline1 ls_s8efH s_s8efI;

GHC.IO.Handle.Types.$fShowNewline [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Handle.Types.Newline
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Handle.Types.$fShowNewline_$cshowsPrec
                                    GHC.IO.Handle.Types.$fShowNewline_$cshow
                                    GHC.IO.Handle.Types.$fShowNewline_$cshowList];

GHC.IO.Handle.Types.$fShowNewlineMode4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NewlineMode {"#;

GHC.IO.Handle.Types.$fShowNewlineMode3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "inputNL = "#;

GHC.IO.Handle.Types.$fShowNewlineMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "outputNL = "#;

GHC.IO.Handle.Types.$fReadNewlineMode5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "}"#;

GHC.IO.Handle.Types.$w$cshowsPrec1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.Base.String
     -> GHC.Base.String
[GblId, Arity=4, Str=<S,U><L,1*U><L,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ww_s8efJ ww1_s8efK ww2_s8efL w_s8efM]
        let {
          p_s8efN [Occ=Once*!, Dmd=<L,1*C1(U)>] :: GHC.Show.ShowS
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              sat-only [ww1_s8efK ww2_s8efL] \r [x_s8efO]
                  let {
                    sat_s8efX [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [ww1_s8efK ww2_s8efL x_s8efO] \u []
                            let {
                              sat_s8efW [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [ww1_s8efK ww2_s8efL x_s8efO] \u []
                                      let {
                                        karg_s8efP [Occ=Once*, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                        [LclId] =
                                            [ww2_s8efL x_s8efO] \s []
                                                let {
                                                  sat_s8efU [Occ=Once, Dmd=<L,1*U>]
                                                    :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [ww2_s8efL x_s8efO] \s []
                                                          let {
                                                            sat_s8efT [Occ=Once] :: [GHC.Types.Char]
                                                            [LclId] =
                                                                [ww2_s8efL x_s8efO] \u []
                                                                    case ww2_s8efL of {
                                                                      GHC.IO.Handle.Types.LF ->
                                                                          let {
                                                                            sat_s8efR [Occ=Once,
                                                                                       Dmd=<L,1*U>]
                                                                              :: [GHC.Types.Char]
                                                                            [LclId] =
                                                                                [x_s8efO] \s []
                                                                                    GHC.CString.unpackAppendCString#
                                                                                        GHC.IO.Handle.Types.$fReadNewlineMode5
                                                                                        x_s8efO;
                                                                          } in 
                                                                            GHC.Base.++
                                                                                GHC.IO.Handle.Types.$fReadNewline10
                                                                                sat_s8efR;
                                                                      GHC.IO.Handle.Types.CRLF ->
                                                                          let {
                                                                            sat_s8efS [Occ=Once,
                                                                                       Dmd=<L,1*U>]
                                                                              :: [GHC.Types.Char]
                                                                            [LclId] =
                                                                                [x_s8efO] \s []
                                                                                    GHC.CString.unpackAppendCString#
                                                                                        GHC.IO.Handle.Types.$fReadNewlineMode5
                                                                                        x_s8efO;
                                                                          } in 
                                                                            GHC.Base.++
                                                                                GHC.IO.Handle.Types.$fReadNewline6
                                                                                sat_s8efS;
                                                                    };
                                                          } in 
                                                            GHC.CString.unpackAppendCString#
                                                                GHC.IO.Handle.Types.$fShowNewlineMode2
                                                                sat_s8efT;
                                                } in 
                                                  GHC.Base.++ GHC.Show.showCommaSpace1 sat_s8efU;
                                      } in 
                                        case ww1_s8efK of {
                                          GHC.IO.Handle.Types.LF ->
                                              GHC.Base.++
                                                  GHC.IO.Handle.Types.$fReadNewline10 karg_s8efP;
                                          GHC.IO.Handle.Types.CRLF ->
                                              GHC.Base.++
                                                  GHC.IO.Handle.Types.$fReadNewline6 karg_s8efP;
                                        };
                            } in 
                              GHC.CString.unpackAppendCString#
                                  GHC.IO.Handle.Types.$fShowNewlineMode3 sat_s8efW;
                  } in 
                    GHC.CString.unpackAppendCString#
                        GHC.IO.Handle.Types.$fShowNewlineMode4 sat_s8efX;
        } in 
          case >=# [ww_s8efJ 11#] of {
            __DEFAULT -> p_s8efN w_s8efM;
            1# ->
                let {
                  sat_s8eg0 [Occ=Once] :: [GHC.Types.Char]
                  [LclId] =
                      [w_s8efM p_s8efN] \u []
                          let {
                            sat_s8efZ [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                CCCS :! [GHC.Show.$fShow(,)2 w_s8efM];
                          } in  p_s8efN sat_s8efZ;
                } in  : [GHC.Show.$fShow(,)4 sat_s8eg0];
          };

GHC.IO.Handle.Types.$fShowNewlineMode_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int
     -> GHC.IO.Handle.Types.NewlineMode -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S,1*U(1*U,1*U)><L,U>,
 Unf=OtherCon []] =
    [] \r [w_s8eg1 w1_s8eg2 w2_s8eg3]
        case w_s8eg1 of {
          GHC.Types.I# ww1_s8eg5 [Occ=Once] ->
              case w1_s8eg2 of {
                GHC.IO.Handle.Types.NewlineMode ww3_s8eg7 [Occ=Once]
                                                ww4_s8eg8 [Occ=Once] ->
                    GHC.IO.Handle.Types.$w$cshowsPrec1
                        ww1_s8eg5 ww3_s8eg7 ww4_s8eg8 w2_s8eg3;
              };
        };

GHC.IO.Handle.Types.$fShowBufferMode2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.IO.Handle.Types.$fShowNewlineMode_$cshow
  :: GHC.IO.Handle.Types.NewlineMode -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U(1*U,1*U)>, Unf=OtherCon []] =
    [] \r [x_s8eg9]
        case x_s8eg9 of {
          GHC.IO.Handle.Types.NewlineMode ww1_s8egb [Occ=Once]
                                          ww2_s8egc [Occ=Once] ->
              GHC.IO.Handle.Types.$w$cshowsPrec1
                  0# ww1_s8egb ww2_s8egc GHC.Types.[];
        };

GHC.IO.Handle.Types.$fShowNewlineMode1
  :: GHC.IO.Handle.Types.NewlineMode -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U(1*U,1*U)><L,U>, Unf=OtherCon []] =
    [] \r [w_s8egd w1_s8ege]
        case w_s8egd of {
          GHC.IO.Handle.Types.NewlineMode ww1_s8egg [Occ=Once]
                                          ww2_s8egh [Occ=Once] ->
              GHC.IO.Handle.Types.$w$cshowsPrec1 0# ww1_s8egg ww2_s8egh w1_s8ege;
        };

GHC.IO.Handle.Types.$fShowNewlineMode_$cshowList
  :: [GHC.IO.Handle.Types.NewlineMode] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s8egi s_s8egj]
        GHC.Show.showList__
            GHC.IO.Handle.Types.$fShowNewlineMode1 ls_s8egi s_s8egj;

GHC.IO.Handle.Types.$fShowNewlineMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Handle.Types.NewlineMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Handle.Types.$fShowNewlineMode_$cshowsPrec
                                    GHC.IO.Handle.Types.$fShowNewlineMode_$cshow
                                    GHC.IO.Handle.Types.$fShowNewlineMode_$cshowList];

GHC.IO.Handle.Types.$fReadNewline9
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Handle.Types.Newline -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s8egk k_s8egl] k_s8egl GHC.IO.Handle.Types.LF;

GHC.IO.Handle.Types.$fReadNewline8
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.IO.Handle.Types.Newline)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.Handle.Types.$fReadNewline10
                        GHC.IO.Handle.Types.$fReadNewline9];

GHC.IO.Handle.Types.$fReadNewline5
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Handle.Types.Newline -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s8egm k_s8egn] k_s8egn GHC.IO.Handle.Types.CRLF;

GHC.IO.Handle.Types.$fReadNewline4
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.IO.Handle.Types.Newline)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.Handle.Types.$fReadNewline6
                        GHC.IO.Handle.Types.$fReadNewline5];

GHC.IO.Handle.Types.$fReadNewline3
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec
         GHC.IO.Handle.Types.Newline)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Handle.Types.$fReadNewline4 GHC.Types.[]];

GHC.IO.Handle.Types.$fReadNewline_sps
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec
         GHC.IO.Handle.Types.Newline)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Handle.Types.$fReadNewline8
                      GHC.IO.Handle.Types.$fReadNewline3];

GHC.IO.Handle.Types.$fReadNewline2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.IO.Handle.Types.Newline
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_s8ego]
        GHC.Read.choose2 GHC.IO.Handle.Types.$fReadNewline_sps eta_s8ego;

GHC.IO.Handle.Types.$fReadNewline1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Handle.Types.Newline -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.IO.Handle.Types.$fReadNewline2 eta_B2 eta_B1;

GHC.IO.Handle.Types.$fReadNewline_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.IO.Handle.Types.Newline
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s8egp]
        let {
          sat_s8egq [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.IO.Handle.Types.Newline
          [LclId] =
              [n_s8egp] \u []
                  GHC.Read.list3
                      GHC.IO.Handle.Types.$fReadNewline2
                      n_s8egp
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s8egq;

GHC.IO.Handle.Types.$fReadNewline_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec
       [GHC.IO.Handle.Types.Newline]
[GblId] =
    [] \u [] GHC.Read.list GHC.IO.Handle.Types.$fReadNewline1;

GHC.IO.Handle.Types.$fReadNewline12
  :: Text.ParserCombinators.ReadP.P [GHC.IO.Handle.Types.Newline]
[GblId] =
    [] \u []
        GHC.IO.Handle.Types.$fReadNewline_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.IO.Handle.Types.$fReadNewline_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.IO.Handle.Types.Newline]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run
            GHC.IO.Handle.Types.$fReadNewline12 eta_B1;

GHC.IO.Handle.Types.$fReadNewline [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.IO.Handle.Types.Newline
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.IO.Handle.Types.$fReadNewline_$creadsPrec
                                    GHC.IO.Handle.Types.$fReadNewline_$creadList
                                    GHC.IO.Handle.Types.$fReadNewline1
                                    GHC.IO.Handle.Types.$fReadNewline_$creadListPrec];

GHC.IO.Handle.Types.$fReadNewlineMode17 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NewlineMode"#;

GHC.IO.Handle.Types.$fReadNewlineMode16 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadNewlineMode17;

GHC.IO.Handle.Types.$fReadNewlineMode_lexeme1
  :: Text.Read.Lex.Lexeme
[GblId, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Ident! [GHC.IO.Handle.Types.$fReadNewlineMode16];

GHC.IO.Handle.Types.$fReadNewlineMode15 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "{"#;

GHC.IO.Handle.Types.$fReadNewlineMode14 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadNewlineMode15;

GHC.IO.Handle.Types.$fReadNewlineMode_lexeme
  :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [GHC.IO.Handle.Types.$fReadNewlineMode14];

GHC.IO.Handle.Types.$fReadNewlineMode13 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "inputNL"#;

GHC.IO.Handle.Types.$fReadNewlineMode12 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadNewlineMode13;

GHC.IO.Handle.Types.$fReadNewlineMode11
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Handle.Types.Newline -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,U>, Unf=OtherCon []] =
    [] \r [ds1_s8egr eta_s8egs]
        GHC.Read.list3
            GHC.IO.Handle.Types.$fReadNewline2
            Text.ParserCombinators.ReadPrec.minPrec
            eta_s8egs;

GHC.IO.Handle.Types.$fReadBufferMode_n
  :: Text.ParserCombinators.ReadPrec.Prec
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [11#];

GHC.IO.Handle.Types.$fReadNewlineMode10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ","#;

GHC.IO.Handle.Types.$fReadNewlineMode9 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadNewlineMode10;

GHC.IO.Handle.Types.$fReadNewlineMode8 :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [GHC.IO.Handle.Types.$fReadNewlineMode9];

GHC.IO.Handle.Types.$fReadNewlineMode7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "outputNL"#;

GHC.IO.Handle.Types.$fReadNewlineMode6 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadNewlineMode7;

GHC.IO.Handle.Types.$fReadNewlineMode4 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadNewlineMode5;

GHC.IO.Handle.Types.$fReadNewlineMode3 :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [GHC.IO.Handle.Types.$fReadNewlineMode4];

GHC.IO.Handle.Types.$w$creadPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> forall b.
        (GHC.IO.Handle.Types.NewlineMode
         -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<S,U><L,C(U)>, Unf=OtherCon []] =
    [] \r [ww_s8egt w_s8egu]
        case <=# [ww_s8egt 11#] of {
          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
          1# ->
              let {
                sat_s8egO [Occ=Once]
                  :: () -> Text.ParserCombinators.ReadP.P b_s89BH
                [LclId] =
                    [w_s8egu] \r [a1_s8egw]
                        let {
                          sat_s8egL [Occ=Once]
                            :: () -> Text.ParserCombinators.ReadP.P b_s89BH
                          [LclId] =
                              [w_s8egu] \r [a2_s8egx]
                                  let {
                                    sat_s8egK [Occ=Once]
                                      :: GHC.IO.Handle.Types.Newline
                                         -> Text.ParserCombinators.ReadP.P b_s89BH
                                    [LclId] =
                                        [w_s8egu] \r [a3_s8egy]
                                            let {
                                              sat_s8egH [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b_s89BH
                                              [LclId] =
                                                  [w_s8egu a3_s8egy] \r [a4_s8egz]
                                                      let {
                                                        sat_s8egG [Occ=Once]
                                                          :: GHC.IO.Handle.Types.Newline
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b_s89BH
                                                        [LclId] =
                                                            [w_s8egu a3_s8egy] \r [a5_s8egA]
                                                                let {
                                                                  sat_s8egD [Occ=Once]
                                                                    :: ()
                                                                       -> Text.ParserCombinators.ReadP.P
                                                                            b_s89BH
                                                                  [LclId] =
                                                                      [w_s8egu
                                                                       a3_s8egy
                                                                       a5_s8egA] \r [a6_s8egB]
                                                                          let {
                                                                            sat_s8egC [Occ=Once]
                                                                              :: GHC.IO.Handle.Types.NewlineMode
                                                                            [LclId] =
                                                                                CCCS GHC.IO.Handle.Types.NewlineMode! [a3_s8egy
                                                                                                                       a5_s8egA];
                                                                          } in  w_s8egu sat_s8egC;
                                                                } in 
                                                                  case
                                                                      Text.Read.Lex.$wexpect
                                                                          GHC.IO.Handle.Types.$fReadNewlineMode3
                                                                          sat_s8egD
                                                                  of
                                                                  { Unit# ww2_s8egF [Occ=Once] ->
                                                                        Text.ParserCombinators.ReadP.Look [ww2_s8egF];
                                                                  };
                                                      } in 
                                                        GHC.Read.readField
                                                            GHC.IO.Handle.Types.$fReadNewlineMode6
                                                            GHC.IO.Handle.Types.$fReadNewlineMode11
                                                            GHC.IO.Handle.Types.$fReadBufferMode_n
                                                            sat_s8egG;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.IO.Handle.Types.$fReadNewlineMode8
                                                      sat_s8egH
                                              of
                                              { Unit# ww2_s8egJ [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww2_s8egJ];
                                              };
                                  } in 
                                    GHC.Read.readField
                                        GHC.IO.Handle.Types.$fReadNewlineMode12
                                        GHC.IO.Handle.Types.$fReadNewlineMode11
                                        GHC.IO.Handle.Types.$fReadBufferMode_n
                                        sat_s8egK;
                        } in 
                          case
                              Text.Read.Lex.$wexpect
                                  GHC.IO.Handle.Types.$fReadNewlineMode_lexeme sat_s8egL
                          of
                          { Unit# ww2_s8egN [Occ=Once] ->
                                Text.ParserCombinators.ReadP.Look [ww2_s8egN];
                          };
              } in 
                case
                    Text.Read.Lex.$wexpect
                        GHC.IO.Handle.Types.$fReadNewlineMode_lexeme1 sat_s8egO
                of
                { Unit# ww2_s8egQ [Occ=Once] ->
                      Text.ParserCombinators.ReadP.Look [ww2_s8egQ];
                };
        };

GHC.IO.Handle.Types.$fReadNewlineMode2 [InlPrag=NOUSERINLINE[0]]
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Handle.Types.NewlineMode
         -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<S(S),1*U(U)><L,C(U)>, Unf=OtherCon []] =
    [] \r [w_s8egR w1_s8egS]
        case w_s8egR of {
          GHC.Types.I# ww1_s8egU [Occ=Once] ->
              GHC.IO.Handle.Types.$w$creadPrec ww1_s8egU w1_s8egS;
        };

GHC.IO.Handle.Types.$fReadNewlineMode1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Handle.Types.NewlineMode
         -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3
            GHC.IO.Handle.Types.$fReadNewlineMode2 eta_B2 eta_B1;

GHC.IO.Handle.Types.$fReadNewlineMode_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS
          GHC.IO.Handle.Types.NewlineMode
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s8egV]
        let {
          sat_s8egW [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.IO.Handle.Types.NewlineMode
          [LclId] =
              [n_s8egV] \u []
                  GHC.Read.list3
                      GHC.IO.Handle.Types.$fReadNewlineMode2
                      n_s8egV
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s8egW;

GHC.IO.Handle.Types.$fReadNewlineMode_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec
       [GHC.IO.Handle.Types.NewlineMode]
[GblId] =
    [] \u [] GHC.Read.list GHC.IO.Handle.Types.$fReadNewlineMode1;

GHC.IO.Handle.Types.$fReadNewlineMode18
  :: Text.ParserCombinators.ReadP.P [GHC.IO.Handle.Types.NewlineMode]
[GblId] =
    [] \u []
        GHC.IO.Handle.Types.$fReadNewlineMode_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.IO.Handle.Types.$fReadNewlineMode_$creadList
  :: Text.ParserCombinators.ReadP.ReadS
       [GHC.IO.Handle.Types.NewlineMode]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run
            GHC.IO.Handle.Types.$fReadNewlineMode18 eta_B1;

GHC.IO.Handle.Types.$fReadNewlineMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.IO.Handle.Types.NewlineMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.IO.Handle.Types.$fReadNewlineMode_$creadsPrec
                                    GHC.IO.Handle.Types.$fReadNewlineMode_$creadList
                                    GHC.IO.Handle.Types.$fReadNewlineMode1
                                    GHC.IO.Handle.Types.$fReadNewlineMode_$creadListPrec];

GHC.IO.Handle.Types.$fOrdNewline_$c<
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8egX b_s8egY]
        case a_s8egX of {
          GHC.IO.Handle.Types.LF ->
              case b_s8egY of {
                GHC.IO.Handle.Types.LF -> GHC.Types.False [];
                GHC.IO.Handle.Types.CRLF -> GHC.Types.True [];
              };
          GHC.IO.Handle.Types.CRLF ->
              case b_s8egY of { __DEFAULT -> GHC.Types.False []; };
        };

GHC.IO.Handle.Types.$fOrdNewline_$ccompare
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8eh2 b_s8eh3]
        case a_s8eh2 of {
          GHC.IO.Handle.Types.LF ->
              case b_s8eh3 of {
                GHC.IO.Handle.Types.LF -> GHC.Types.EQ [];
                GHC.IO.Handle.Types.CRLF -> GHC.Types.LT [];
              };
          GHC.IO.Handle.Types.CRLF ->
              case b_s8eh3 of {
                GHC.IO.Handle.Types.LF -> GHC.Types.GT [];
                GHC.IO.Handle.Types.CRLF -> GHC.Types.EQ [];
              };
        };

GHC.IO.Handle.Types.$fEqNewline_$c==
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s8eh7 ds1_s8eh8]
        case ds_s8eh7 of {
          GHC.IO.Handle.Types.LF ->
              case ds1_s8eh8 of {
                GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
              };
          GHC.IO.Handle.Types.CRLF ->
              case ds1_s8eh8 of {
                GHC.IO.Handle.Types.LF -> GHC.Types.False [];
                GHC.IO.Handle.Types.CRLF -> GHC.Types.True [];
              };
        };

GHC.IO.Handle.Types.$fEqNewline_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s8ehc eta1_s8ehd]
        case eta_s8ehc of {
          GHC.IO.Handle.Types.LF ->
              case eta1_s8ehd of {
                GHC.IO.Handle.Types.LF -> GHC.Types.False [];
                GHC.IO.Handle.Types.CRLF -> GHC.Types.True [];
              };
          GHC.IO.Handle.Types.CRLF ->
              case eta1_s8ehd of {
                GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
              };
        };

GHC.IO.Handle.Types.$fEqNewline [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.IO.Handle.Types.Newline
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.IO.Handle.Types.$fEqNewline_$c==
                                     GHC.IO.Handle.Types.$fEqNewline_$c/=];

GHC.IO.Handle.Types.$fOrdNewline_$c<=
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8ehh b_s8ehi]
        case b_s8ehi of {
          GHC.IO.Handle.Types.LF ->
              case a_s8ehh of {
                GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
              };
          GHC.IO.Handle.Types.CRLF ->
              case a_s8ehh of { __DEFAULT -> GHC.Types.True []; };
        };

GHC.IO.Handle.Types.$fOrdNewline_$cmax
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.IO.Handle.Types.Newline
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s8ehm y_s8ehn]
        case y_s8ehn of {
          GHC.IO.Handle.Types.LF -> x_s8ehm;
          GHC.IO.Handle.Types.CRLF ->
              case x_s8ehm of { __DEFAULT -> GHC.IO.Handle.Types.CRLF []; };
        };

GHC.IO.Handle.Types.$fOrdNewline_$c>=
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8ehq b_s8ehr]
        case a_s8ehq of {
          GHC.IO.Handle.Types.LF ->
              case b_s8ehr of {
                GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
              };
          GHC.IO.Handle.Types.CRLF ->
              case b_s8ehr of { __DEFAULT -> GHC.Types.True []; };
        };

GHC.IO.Handle.Types.$fOrdNewline_$c>
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8ehv b_s8ehw]
        GHC.IO.Handle.Types.$fOrdNewline_$c< b_s8ehw a_s8ehv;

GHC.IO.Handle.Types.$fOrdNewline_$cmin
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.IO.Handle.Types.Newline
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s8ehx y_s8ehy]
        case y_s8ehy of {
          GHC.IO.Handle.Types.LF ->
              case x_s8ehx of { __DEFAULT -> GHC.IO.Handle.Types.LF []; };
          GHC.IO.Handle.Types.CRLF -> x_s8ehx;
        };

GHC.IO.Handle.Types.$fOrdNewline [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.IO.Handle.Types.Newline
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.IO.Handle.Types.$fEqNewline
                                      GHC.IO.Handle.Types.$fOrdNewline_$ccompare
                                      GHC.IO.Handle.Types.$fOrdNewline_$c<
                                      GHC.IO.Handle.Types.$fOrdNewline_$c<=
                                      GHC.IO.Handle.Types.$fOrdNewline_$c>
                                      GHC.IO.Handle.Types.$fOrdNewline_$c>=
                                      GHC.IO.Handle.Types.$fOrdNewline_$cmax
                                      GHC.IO.Handle.Types.$fOrdNewline_$cmin];

GHC.IO.Handle.Types.$w$ccompare [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.Types.Ordering
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s8ehB ww1_s8ehC ww2_s8ehD ww3_s8ehE]
        case ww_s8ehB of {
          GHC.IO.Handle.Types.LF ->
              case ww2_s8ehD of {
                GHC.IO.Handle.Types.LF ->
                    GHC.IO.Handle.Types.$fOrdNewline_$ccompare ww1_s8ehC ww3_s8ehE;
                GHC.IO.Handle.Types.CRLF -> GHC.Types.LT [];
              };
          GHC.IO.Handle.Types.CRLF ->
              case ww2_s8ehD of {
                GHC.IO.Handle.Types.LF -> GHC.Types.GT [];
                GHC.IO.Handle.Types.CRLF ->
                    GHC.IO.Handle.Types.$fOrdNewline_$ccompare ww1_s8ehC ww3_s8ehE;
              };
        };

GHC.IO.Handle.Types.$fOrdNewlineMode_$ccompare [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [w_s8ehI w1_s8ehJ]
        case w_s8ehI of {
          GHC.IO.Handle.Types.NewlineMode ww1_s8ehL [Occ=Once]
                                          ww2_s8ehM [Occ=Once] ->
              case w1_s8ehJ of {
                GHC.IO.Handle.Types.NewlineMode ww4_s8ehO [Occ=Once]
                                                ww5_s8ehP [Occ=Once] ->
                    GHC.IO.Handle.Types.$w$ccompare
                        ww1_s8ehL ww2_s8ehM ww4_s8ehO ww5_s8ehP;
              };
        };

GHC.IO.Handle.Types.$w$c< [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.Types.Bool
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s8ehQ ww1_s8ehR ww2_s8ehS ww3_s8ehT]
        case ww_s8ehQ of {
          GHC.IO.Handle.Types.LF ->
              case ww2_s8ehS of {
                GHC.IO.Handle.Types.LF ->
                    GHC.IO.Handle.Types.$fOrdNewline_$c< ww1_s8ehR ww3_s8ehT;
                GHC.IO.Handle.Types.CRLF -> GHC.Types.True [];
              };
          GHC.IO.Handle.Types.CRLF ->
              case ww2_s8ehS of {
                GHC.IO.Handle.Types.LF -> GHC.Types.False [];
                GHC.IO.Handle.Types.CRLF ->
                    GHC.IO.Handle.Types.$fOrdNewline_$c< ww1_s8ehR ww3_s8ehT;
              };
        };

GHC.IO.Handle.Types.$fOrdNewlineMode_$c< [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [w_s8ehX w1_s8ehY]
        case w_s8ehX of {
          GHC.IO.Handle.Types.NewlineMode ww1_s8ei0 [Occ=Once]
                                          ww2_s8ei1 [Occ=Once] ->
              case w1_s8ehY of {
                GHC.IO.Handle.Types.NewlineMode ww4_s8ei3 [Occ=Once]
                                                ww5_s8ei4 [Occ=Once] ->
                    GHC.IO.Handle.Types.$w$c< ww1_s8ei0 ww2_s8ei1 ww4_s8ei3 ww5_s8ei4;
              };
        };

GHC.IO.Handle.Types.$w$c== [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.Types.Bool
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s8ei5 ww1_s8ei6 ww2_s8ei7 ww3_s8ei8]
        case ww_s8ei5 of {
          GHC.IO.Handle.Types.LF ->
              case ww2_s8ei7 of {
                GHC.IO.Handle.Types.LF ->
                    GHC.IO.Handle.Types.$fEqNewline_$c== ww1_s8ei6 ww3_s8ei8;
                GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
              };
          GHC.IO.Handle.Types.CRLF ->
              case ww2_s8ei7 of {
                GHC.IO.Handle.Types.LF -> GHC.Types.False [];
                GHC.IO.Handle.Types.CRLF ->
                    GHC.IO.Handle.Types.$fEqNewline_$c== ww1_s8ei6 ww3_s8ei8;
              };
        };

GHC.IO.Handle.Types.$fEqNewlineMode_$c== [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [w_s8eic w1_s8eid]
        case w_s8eic of {
          GHC.IO.Handle.Types.NewlineMode ww1_s8eif [Occ=Once]
                                          ww2_s8eig [Occ=Once] ->
              case w1_s8eid of {
                GHC.IO.Handle.Types.NewlineMode ww4_s8eii [Occ=Once]
                                                ww5_s8eij [Occ=Once] ->
                    GHC.IO.Handle.Types.$w$c== ww1_s8eif ww2_s8eig ww4_s8eii ww5_s8eij;
              };
        };

GHC.IO.Handle.Types.$fEqNewlineMode_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [eta_s8eik eta1_s8eil]
        case eta_s8eik of {
          GHC.IO.Handle.Types.NewlineMode ww1_s8ein [Occ=Once!]
                                          ww2_s8eio [Occ=Once*!] ->
              case eta1_s8eil of {
                GHC.IO.Handle.Types.NewlineMode ww4_s8eiq [Occ=Once*!]
                                                ww5_s8eir [Occ=Once*!] ->
                    case ww1_s8ein of {
                      GHC.IO.Handle.Types.LF ->
                          case ww4_s8eiq of {
                            GHC.IO.Handle.Types.LF ->
                                case ww2_s8eio of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8eir of {
                                        GHC.IO.Handle.Types.LF -> GHC.Types.False [];
                                        GHC.IO.Handle.Types.CRLF -> GHC.Types.True [];
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8eir of {
                                        GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                                        GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
                                      };
                                };
                            GHC.IO.Handle.Types.CRLF -> GHC.Types.True [];
                          };
                      GHC.IO.Handle.Types.CRLF ->
                          case ww4_s8eiq of {
                            GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                            GHC.IO.Handle.Types.CRLF ->
                                case ww2_s8eio of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8eir of {
                                        GHC.IO.Handle.Types.LF -> GHC.Types.False [];
                                        GHC.IO.Handle.Types.CRLF -> GHC.Types.True [];
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8eir of {
                                        GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                                        GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fEqNewlineMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.IO.Handle.Types.NewlineMode
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.IO.Handle.Types.$fEqNewlineMode_$c==
                                     GHC.IO.Handle.Types.$fEqNewlineMode_$c/=];

GHC.IO.Handle.Types.$fOrdNewlineMode_$c<=
  :: GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [a_s8eiB b_s8eiC]
        case b_s8eiC of {
          GHC.IO.Handle.Types.NewlineMode ww1_s8eiE [Occ=Once!]
                                          ww2_s8eiF [Occ=Once*!] ->
              case a_s8eiB of {
                GHC.IO.Handle.Types.NewlineMode ww4_s8eiH [Occ=Once*!]
                                                ww5_s8eiI [Occ=Once*] ->
                    case ww1_s8eiE of {
                      GHC.IO.Handle.Types.LF ->
                          case ww4_s8eiH of {
                            GHC.IO.Handle.Types.LF ->
                                case ww2_s8eiF of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8eiI of {
                                        GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                                        GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8eiI of { __DEFAULT -> GHC.Types.True []; };
                                };
                            GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
                          };
                      GHC.IO.Handle.Types.CRLF ->
                          case ww4_s8eiH of {
                            GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                            GHC.IO.Handle.Types.CRLF ->
                                case ww2_s8eiF of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8eiI of {
                                        GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                                        GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8eiI of { __DEFAULT -> GHC.Types.True []; };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fOrdNewlineMode_$cmax
  :: GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [x_s8eiS y_s8eiT]
        case y_s8eiT of ww_s8eiU {
          GHC.IO.Handle.Types.NewlineMode ww1_s8eiV [Occ=Once!]
                                          ww2_s8eiW [Occ=Once*!] ->
              case x_s8eiS of ww3_s8eiX {
                GHC.IO.Handle.Types.NewlineMode ww4_s8eiY [Occ=Once*!]
                                                ww5_s8eiZ [Occ=Once*] ->
                    case ww1_s8eiV of {
                      GHC.IO.Handle.Types.LF ->
                          case ww4_s8eiY of {
                            GHC.IO.Handle.Types.LF ->
                                case ww2_s8eiW of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8eiZ of {
                                        GHC.IO.Handle.Types.LF -> ww_s8eiU;
                                        GHC.IO.Handle.Types.CRLF -> ww3_s8eiX;
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8eiZ of { __DEFAULT -> ww_s8eiU; };
                                };
                            GHC.IO.Handle.Types.CRLF -> ww3_s8eiX;
                          };
                      GHC.IO.Handle.Types.CRLF ->
                          case ww4_s8eiY of {
                            GHC.IO.Handle.Types.LF -> ww_s8eiU;
                            GHC.IO.Handle.Types.CRLF ->
                                case ww2_s8eiW of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8eiZ of {
                                        GHC.IO.Handle.Types.LF -> ww_s8eiU;
                                        GHC.IO.Handle.Types.CRLF -> ww3_s8eiX;
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8eiZ of { __DEFAULT -> ww_s8eiU; };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fOrdNewlineMode_$c>=
  :: GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [a_s8ej9 b_s8eja]
        case a_s8ej9 of {
          GHC.IO.Handle.Types.NewlineMode ww1_s8ejc [Occ=Once!]
                                          ww2_s8ejd [Occ=Once*!] ->
              case b_s8eja of {
                GHC.IO.Handle.Types.NewlineMode ww4_s8ejf [Occ=Once*!]
                                                ww5_s8ejg [Occ=Once*] ->
                    case ww1_s8ejc of {
                      GHC.IO.Handle.Types.LF ->
                          case ww4_s8ejf of {
                            GHC.IO.Handle.Types.LF ->
                                case ww2_s8ejd of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8ejg of {
                                        GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                                        GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8ejg of { __DEFAULT -> GHC.Types.True []; };
                                };
                            GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
                          };
                      GHC.IO.Handle.Types.CRLF ->
                          case ww4_s8ejf of {
                            GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                            GHC.IO.Handle.Types.CRLF ->
                                case ww2_s8ejd of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8ejg of {
                                        GHC.IO.Handle.Types.LF -> GHC.Types.True [];
                                        GHC.IO.Handle.Types.CRLF -> GHC.Types.False [];
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8ejg of { __DEFAULT -> GHC.Types.True []; };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fOrdNewlineMode_$c>
  :: GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [a_s8ejq b_s8ejr]
        GHC.IO.Handle.Types.$fOrdNewlineMode_$c< b_s8ejr a_s8ejq;

GHC.IO.Handle.Types.$fOrdNewlineMode_$cmin
  :: GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode
     -> GHC.IO.Handle.Types.NewlineMode
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [x_s8ejs y_s8ejt]
        case y_s8ejt of ww_s8eju {
          GHC.IO.Handle.Types.NewlineMode ww1_s8ejv [Occ=Once!]
                                          ww2_s8ejw [Occ=Once*!] ->
              case x_s8ejs of ww3_s8ejx {
                GHC.IO.Handle.Types.NewlineMode ww4_s8ejy [Occ=Once*!]
                                                ww5_s8ejz [Occ=Once*] ->
                    case ww1_s8ejv of {
                      GHC.IO.Handle.Types.LF ->
                          case ww4_s8ejy of {
                            GHC.IO.Handle.Types.LF ->
                                case ww2_s8ejw of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8ejz of {
                                        GHC.IO.Handle.Types.LF -> ww3_s8ejx;
                                        GHC.IO.Handle.Types.CRLF -> ww_s8eju;
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8ejz of { __DEFAULT -> ww3_s8ejx; };
                                };
                            GHC.IO.Handle.Types.CRLF -> ww_s8eju;
                          };
                      GHC.IO.Handle.Types.CRLF ->
                          case ww4_s8ejy of {
                            GHC.IO.Handle.Types.LF -> ww3_s8ejx;
                            GHC.IO.Handle.Types.CRLF ->
                                case ww2_s8ejw of {
                                  GHC.IO.Handle.Types.LF ->
                                      case ww5_s8ejz of {
                                        GHC.IO.Handle.Types.LF -> ww3_s8ejx;
                                        GHC.IO.Handle.Types.CRLF -> ww_s8eju;
                                      };
                                  GHC.IO.Handle.Types.CRLF ->
                                      case ww5_s8ejz of { __DEFAULT -> ww3_s8ejx; };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fOrdNewlineMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.IO.Handle.Types.NewlineMode
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.IO.Handle.Types.$fEqNewlineMode
                                      GHC.IO.Handle.Types.$fOrdNewlineMode_$ccompare
                                      GHC.IO.Handle.Types.$fOrdNewlineMode_$c<
                                      GHC.IO.Handle.Types.$fOrdNewlineMode_$c<=
                                      GHC.IO.Handle.Types.$fOrdNewlineMode_$c>
                                      GHC.IO.Handle.Types.$fOrdNewlineMode_$c>=
                                      GHC.IO.Handle.Types.$fOrdNewlineMode_$cmax
                                      GHC.IO.Handle.Types.$fOrdNewlineMode_$cmin];

GHC.IO.Handle.Types.$fReadBufferMode13 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NoBuffering"#;

GHC.IO.Handle.Types.$fReadBufferMode12 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadBufferMode13;

GHC.IO.Handle.Types.$fShowBufferMode6
  :: [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Base.++ GHC.IO.Handle.Types.$fReadBufferMode12 eta_B1;

GHC.IO.Handle.Types.$fReadBufferMode9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LineBuffering"#;

GHC.IO.Handle.Types.$fReadBufferMode8 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadBufferMode9;

GHC.IO.Handle.Types.$fShowBufferMode5
  :: [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Base.++ GHC.IO.Handle.Types.$fReadBufferMode8 eta_B1;

GHC.IO.Handle.Types.$fShowBufferMode4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BlockBuffering "#;

GHC.IO.Handle.Types.$fShowBufferMode3 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fShowBufferMode4;

GHC.IO.Handle.Types.$fShowBufferMode_$cshowsPrec
  :: GHC.Types.Int
     -> GHC.IO.Handle.Types.BufferMode -> GHC.Show.ShowS
[GblId, Arity=2, Str=<L,1*U(U)><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s8ejJ ds1_s8ejK]
        case ds1_s8ejK of {
          GHC.IO.Handle.Types.NoBuffering ->
              GHC.IO.Handle.Types.$fShowBufferMode6;
          GHC.IO.Handle.Types.LineBuffering ->
              GHC.IO.Handle.Types.$fShowBufferMode5;
          GHC.IO.Handle.Types.BlockBuffering b1_s8ejM [Occ=Once] ->
              case ds_s8ejJ of {
                GHC.Types.I# x_s8ejO [Occ=Once] ->
                    let {
                      g_s8ejP [Occ=OnceL*!, Dmd=<L,C(U)>]
                        :: GHC.Base.String -> GHC.Base.String
                      [LclId] =
                          [b1_s8ejM] \u []
                              GHC.Show.$fShowMaybe_$cshowsPrec
                                  GHC.Show.$fShowInt
                                  GHC.IO.Handle.Types.$fReadBufferMode_n
                                  b1_s8ejM;
                    } in 
                      case >=# [x_s8ejO 11#] of {
                        __DEFAULT ->
                            let {
                              sat_s8ejT [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                              [LclId] =
                                  [g_s8ejP] \r [x1_s8ejR]
                                      let {
                                        sat_s8ejS [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                        [LclId] =
                                            [g_s8ejP x1_s8ejR] \s [] g_s8ejP x1_s8ejR;
                                      } in 
                                        GHC.Base.++ GHC.IO.Handle.Types.$fShowBufferMode3 sat_s8ejS;
                            } in  sat_s8ejT;
                        1# ->
                            let {
                              sat_s8ejY [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                              [LclId] =
                                  [g_s8ejP] \r [x1_s8ejU]
                                      let {
                                        sat_s8ejX [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            [g_s8ejP x1_s8ejU] \u []
                                                let {
                                                  sat_s8ejW [Occ=Once, Dmd=<L,1*U>]
                                                    :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [g_s8ejP x1_s8ejU] \s []
                                                          let {
                                                            sat_s8ejV [Occ=Once] :: GHC.Base.String
                                                            [LclId] =
                                                                CCCS :! [GHC.Show.$fShow(,)2
                                                                         x1_s8ejU];
                                                          } in  g_s8ejP sat_s8ejV;
                                                } in 
                                                  GHC.Base.++
                                                      GHC.IO.Handle.Types.$fShowBufferMode3
                                                      sat_s8ejW;
                                      } in  : [GHC.Show.$fShow(,)4 sat_s8ejX];
                            } in  sat_s8ejY;
                      };
              };
        };

GHC.IO.Handle.Types.$fShowBufferMode7 :: [GHC.Types.Char]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.$fShow(,)2 GHC.Types.[]];

GHC.IO.Handle.Types.$fShowBufferMode_$cshow
  :: GHC.IO.Handle.Types.BufferMode -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s8ejZ]
        case x_s8ejZ of {
          GHC.IO.Handle.Types.NoBuffering ->
              GHC.IO.Handle.Types.$fReadBufferMode12;
          GHC.IO.Handle.Types.LineBuffering ->
              GHC.IO.Handle.Types.$fReadBufferMode8;
          GHC.IO.Handle.Types.BlockBuffering b1_s8ek1 [Occ=Once!] ->
              let {
                sat_s8ekb [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                [LclId] =
                    [b1_s8ek1] \s []
                        case b1_s8ek1 of {
                          GHC.Base.Nothing -> GHC.Show.$fShowMaybe4;
                          GHC.Base.Just b2_s8ek3 [Occ=Once!] ->
                              let {
                                sat_s8eka [Occ=Once] :: [GHC.Types.Char]
                                [LclId] =
                                    [b2_s8ek3] \u []
                                        let {
                                          sat_s8ek9 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                          [LclId] =
                                              [b2_s8ek3] \s []
                                                  case b2_s8ek3 of {
                                                    GHC.Types.I# ww3_s8ek5 [Occ=Once] ->
                                                        case
                                                            GHC.Show.$wshowSignedInt
                                                                11#
                                                                ww3_s8ek5
                                                                GHC.IO.Handle.Types.$fShowBufferMode7
                                                        of
                                                        { (#,#) ww5_s8ek7 [Occ=Once]
                                                                ww6_s8ek8 [Occ=Once] ->
                                                              : [ww5_s8ek7 ww6_s8ek8];
                                                        };
                                                  };
                                        } in  GHC.Base.++ GHC.Show.$fShowMaybe1 sat_s8ek9;
                              } in  : [GHC.Show.$fShow(,)4 sat_s8eka];
                        };
              } in  GHC.Base.++ GHC.IO.Handle.Types.$fShowBufferMode3 sat_s8ekb;
        };

GHC.IO.Handle.Types.$fShowBufferMode1
  :: GHC.IO.Handle.Types.BufferMode -> GHC.Show.ShowS
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.IO.Handle.Types.$fShowBufferMode_$cshowsPrec
            GHC.IO.Handle.Types.$fShowBufferMode2 eta_B1;

GHC.IO.Handle.Types.$fShowBufferMode_$cshowList
  :: [GHC.IO.Handle.Types.BufferMode] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s8ekc s_s8ekd]
        GHC.Show.showList__
            GHC.IO.Handle.Types.$fShowBufferMode1 ls_s8ekc s_s8ekd;

GHC.IO.Handle.Types.$fShowBufferMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Handle.Types.BufferMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Handle.Types.$fShowBufferMode_$cshowsPrec
                                    GHC.IO.Handle.Types.$fShowBufferMode_$cshow
                                    GHC.IO.Handle.Types.$fShowBufferMode_$cshowList];

GHC.IO.Handle.Types.$fReadBufferMode11
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Handle.Types.BufferMode
         -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s8eke k_s8ekf] k_s8ekf GHC.IO.Handle.Types.NoBuffering;

GHC.IO.Handle.Types.$fReadBufferMode10
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.IO.Handle.Types.BufferMode)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.Handle.Types.$fReadBufferMode12
                        GHC.IO.Handle.Types.$fReadBufferMode11];

GHC.IO.Handle.Types.$fReadBufferMode7
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Handle.Types.BufferMode
         -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s8ekg k_s8ekh] k_s8ekh GHC.IO.Handle.Types.LineBuffering;

GHC.IO.Handle.Types.$fReadBufferMode6
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.IO.Handle.Types.BufferMode)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.Handle.Types.$fReadBufferMode8
                        GHC.IO.Handle.Types.$fReadBufferMode7];

GHC.IO.Handle.Types.$fReadBufferMode5
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec
         GHC.IO.Handle.Types.BufferMode)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Handle.Types.$fReadBufferMode6
                      GHC.Types.[]];

GHC.IO.Handle.Types.$fReadBufferMode_sps
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec
         GHC.IO.Handle.Types.BufferMode)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Handle.Types.$fReadBufferMode10
                      GHC.IO.Handle.Types.$fReadBufferMode5];

GHC.IO.Handle.Types.$fReadBufferMode4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BlockBuffering"#;

GHC.IO.Handle.Types.$fReadBufferMode3 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Types.$fReadBufferMode4;

GHC.IO.Handle.Types.$fReadBufferMode_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Ident! [GHC.IO.Handle.Types.$fReadBufferMode3];

GHC.IO.Handle.Types.$fReadBufferMode2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP
          GHC.IO.Handle.Types.BufferMode
[GblId, Arity=1, Str=<L,U(U)>, Unf=OtherCon []] =
    [] \r [n_s8eki]
        let {
          ds2_s8ekj [Occ=OnceL, Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadP
                 GHC.IO.Handle.Types.BufferMode
          [LclId] =
              [n_s8eki] \u []
                  GHC.Read.choose2
                      GHC.IO.Handle.Types.$fReadBufferMode_sps n_s8eki; } in
        let {
          sat_s8ekx [Occ=Once]
            :: forall b.
               (GHC.IO.Handle.Types.BufferMode
                -> Text.ParserCombinators.ReadP.P b)
               -> Text.ParserCombinators.ReadP.P b
          [LclId] =
              [n_s8eki ds2_s8ekj] \r [k_s8ekk]
                  let {
                    sat_s8ekw [Occ=Once] :: Text.ParserCombinators.ReadP.P b_i88Yk
                    [LclId] =
                        [n_s8eki k_s8ekk] \u []
                            case n_s8eki of {
                              GHC.Types.I# x_s8ekn [Occ=Once] ->
                                  case <=# [x_s8ekn 10#] of {
                                    __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                    1# ->
                                        let {
                                          sat_s8ekt [Occ=Once]
                                            :: () -> Text.ParserCombinators.ReadP.P b_i88Yk
                                          [LclId] =
                                              [k_s8ekk] \r [a1_s8ekp]
                                                  let {
                                                    sat_s8eks [Occ=Once]
                                                      :: GHC.Base.Maybe GHC.Types.Int
                                                         -> Text.ParserCombinators.ReadP.P b_i88Yk
                                                    [LclId] =
                                                        [k_s8ekk] \r [a2_s8ekq]
                                                            let {
                                                              sat_s8ekr [Occ=Once]
                                                                :: GHC.IO.Handle.Types.BufferMode
                                                              [LclId] =
                                                                  CCCS GHC.IO.Handle.Types.BlockBuffering! [a2_s8ekq];
                                                            } in  k_s8ekk sat_s8ekr;
                                                  } in 
                                                    GHC.Read.$fReadMaybe1
                                                        GHC.Read.$fReadInt
                                                        GHC.IO.Handle.Types.$fReadBufferMode_n
                                                        sat_s8eks;
                                        } in 
                                          case
                                              Text.Read.Lex.$wexpect
                                                  GHC.IO.Handle.Types.$fReadBufferMode_lexeme
                                                  sat_s8ekt
                                          of
                                          { Unit# ww1_s8ekv [Occ=Once] ->
                                                Text.ParserCombinators.ReadP.Look [ww1_s8ekv];
                                          };
                                  };
                            };
                  } in 
                    case ds2_s8ekj k_s8ekk of sat_s8ekl {
                      __DEFAULT ->
                          Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                              sat_s8ekl sat_s8ekw;
                    };
        } in  sat_s8ekx;

GHC.IO.Handle.Types.$fReadBufferMode1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Handle.Types.BufferMode
         -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.IO.Handle.Types.$fReadBufferMode2 eta_B2 eta_B1;

GHC.IO.Handle.Types.$fReadBufferMode_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS
          GHC.IO.Handle.Types.BufferMode
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s8eky]
        let {
          sat_s8ekz [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.IO.Handle.Types.BufferMode
          [LclId] =
              [n_s8eky] \u []
                  GHC.Read.list3
                      GHC.IO.Handle.Types.$fReadBufferMode2
                      n_s8eky
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s8ekz;

GHC.IO.Handle.Types.$fReadBufferMode_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec
       [GHC.IO.Handle.Types.BufferMode]
[GblId] =
    [] \u [] GHC.Read.list GHC.IO.Handle.Types.$fReadBufferMode1;

GHC.IO.Handle.Types.$fReadBufferMode14
  :: Text.ParserCombinators.ReadP.P [GHC.IO.Handle.Types.BufferMode]
[GblId] =
    [] \u []
        GHC.IO.Handle.Types.$fReadBufferMode_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.IO.Handle.Types.$fReadBufferMode_$creadList
  :: Text.ParserCombinators.ReadP.ReadS
       [GHC.IO.Handle.Types.BufferMode]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run
            GHC.IO.Handle.Types.$fReadBufferMode14 eta_B1;

GHC.IO.Handle.Types.$fReadBufferMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.IO.Handle.Types.BufferMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.IO.Handle.Types.$fReadBufferMode_$creadsPrec
                                    GHC.IO.Handle.Types.$fReadBufferMode_$creadList
                                    GHC.IO.Handle.Types.$fReadBufferMode1
                                    GHC.IO.Handle.Types.$fReadBufferMode_$creadListPrec];

GHC.IO.Handle.Types.$fOrdBufferMode_$c<
  :: GHC.IO.Handle.Types.BufferMode
     -> GHC.IO.Handle.Types.BufferMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8ekA b_s8ekB]
        case a_s8ekA of {
          GHC.IO.Handle.Types.NoBuffering ->
              case b_s8ekB of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Handle.Types.NoBuffering -> GHC.Types.False [];
              };
          GHC.IO.Handle.Types.LineBuffering ->
              case b_s8ekB of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Handle.Types.BlockBuffering _ [Occ=Dead] ->
                    GHC.Types.True [];
              };
          GHC.IO.Handle.Types.BlockBuffering a1_s8ekG [Occ=Once!] ->
              case b_s8ekB of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Handle.Types.BlockBuffering b1_s8ekI [Occ=Once*!] ->
                    case a1_s8ekG of {
                      GHC.Base.Nothing ->
                          case b1_s8ekI of {
                            GHC.Base.Nothing -> GHC.Types.False [];
                            GHC.Base.Just _ [Occ=Dead] -> GHC.Types.True [];
                          };
                      GHC.Base.Just a2_s8ekM [Occ=Once] ->
                          case b1_s8ekI of {
                            GHC.Base.Nothing -> GHC.Types.False [];
                            GHC.Base.Just b2_s8ekO [Occ=Once] ->
                                GHC.Classes.ltInt a2_s8ekM b2_s8ekO;
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fOrdBufferMode_$ccompare
  :: GHC.IO.Handle.Types.BufferMode
     -> GHC.IO.Handle.Types.BufferMode -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8ekP b_s8ekQ]
        case a_s8ekP of {
          GHC.IO.Handle.Types.NoBuffering ->
              case b_s8ekQ of {
                __DEFAULT -> GHC.Types.LT [];
                GHC.IO.Handle.Types.NoBuffering -> GHC.Types.EQ [];
              };
          GHC.IO.Handle.Types.LineBuffering ->
              case b_s8ekQ of {
                GHC.IO.Handle.Types.NoBuffering -> GHC.Types.GT [];
                GHC.IO.Handle.Types.LineBuffering -> GHC.Types.EQ [];
                GHC.IO.Handle.Types.BlockBuffering _ [Occ=Dead] -> GHC.Types.LT [];
              };
          GHC.IO.Handle.Types.BlockBuffering a1_s8ekV [Occ=Once!] ->
              case b_s8ekQ of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.IO.Handle.Types.BlockBuffering b1_s8ekX [Occ=Once*!] ->
                    case a1_s8ekV of {
                      GHC.Base.Nothing ->
                          case b1_s8ekX of {
                            GHC.Base.Nothing -> GHC.Types.EQ [];
                            GHC.Base.Just _ [Occ=Dead] -> GHC.Types.LT [];
                          };
                      GHC.Base.Just a2_s8el1 [Occ=Once] ->
                          case b1_s8ekX of {
                            GHC.Base.Nothing -> GHC.Types.GT [];
                            GHC.Base.Just b2_s8el3 [Occ=Once] ->
                                GHC.Classes.compareInt a2_s8el1 b2_s8el3;
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fEqBufferMode_$c==
  :: GHC.IO.Handle.Types.BufferMode
     -> GHC.IO.Handle.Types.BufferMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s8el4 ds1_s8el5]
        case ds_s8el4 of {
          GHC.IO.Handle.Types.NoBuffering ->
              case ds1_s8el5 of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Handle.Types.NoBuffering -> GHC.Types.True [];
              };
          GHC.IO.Handle.Types.LineBuffering ->
              case ds1_s8el5 of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Handle.Types.LineBuffering -> GHC.Types.True [];
              };
          GHC.IO.Handle.Types.BlockBuffering a1_s8el9 [Occ=Once!] ->
              case ds1_s8el5 of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Handle.Types.BlockBuffering b1_s8elb [Occ=Once*!] ->
                    case a1_s8el9 of {
                      GHC.Base.Nothing ->
                          case b1_s8elb of {
                            GHC.Base.Nothing -> GHC.Types.True [];
                            GHC.Base.Just _ [Occ=Dead] -> GHC.Types.False [];
                          };
                      GHC.Base.Just a2_s8elf [Occ=Once] ->
                          case b1_s8elb of {
                            GHC.Base.Nothing -> GHC.Types.False [];
                            GHC.Base.Just b2_s8elh [Occ=Once] ->
                                GHC.Classes.eqInt a2_s8elf b2_s8elh;
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fEqBufferMode_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.IO.Handle.Types.BufferMode
     -> GHC.IO.Handle.Types.BufferMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s8eli eta1_s8elj]
        case eta_s8eli of {
          GHC.IO.Handle.Types.NoBuffering ->
              case eta1_s8elj of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Handle.Types.NoBuffering -> GHC.Types.False [];
              };
          GHC.IO.Handle.Types.LineBuffering ->
              case eta1_s8elj of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Handle.Types.LineBuffering -> GHC.Types.False [];
              };
          GHC.IO.Handle.Types.BlockBuffering a1_s8eln [Occ=Once!] ->
              case eta1_s8elj of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Handle.Types.BlockBuffering b1_s8elp [Occ=Once*!] ->
                    case a1_s8eln of {
                      GHC.Base.Nothing ->
                          case b1_s8elp of {
                            GHC.Base.Nothing -> GHC.Types.False [];
                            GHC.Base.Just _ [Occ=Dead] -> GHC.Types.True [];
                          };
                      GHC.Base.Just a2_s8elt [Occ=Once!] ->
                          case b1_s8elp of {
                            GHC.Base.Nothing -> GHC.Types.True [];
                            GHC.Base.Just b2_s8elv [Occ=Once!] ->
                                case a2_s8elt of {
                                  GHC.Types.I# x_s8elx [Occ=Once] ->
                                      case b2_s8elv of {
                                        GHC.Types.I# y_s8elz [Occ=Once] ->
                                            case ==# [x_s8elx y_s8elz] of {
                                              __DEFAULT -> GHC.Types.True [];
                                              1# -> GHC.Types.False [];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fEqBufferMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.IO.Handle.Types.BufferMode
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.IO.Handle.Types.$fEqBufferMode_$c==
                                     GHC.IO.Handle.Types.$fEqBufferMode_$c/=];

GHC.IO.Handle.Types.$fOrdBufferMode_$c<=
  :: GHC.IO.Handle.Types.BufferMode
     -> GHC.IO.Handle.Types.BufferMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8elB b_s8elC]
        case b_s8elC of {
          GHC.IO.Handle.Types.NoBuffering ->
              case a_s8elB of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Handle.Types.NoBuffering -> GHC.Types.True [];
              };
          GHC.IO.Handle.Types.LineBuffering ->
              case a_s8elB of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Handle.Types.BlockBuffering _ [Occ=Dead] ->
                    GHC.Types.False [];
              };
          GHC.IO.Handle.Types.BlockBuffering a1_s8elH [Occ=Once!] ->
              case a_s8elB of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Handle.Types.BlockBuffering b1_s8elJ [Occ=Once*!] ->
                    case a1_s8elH of {
                      GHC.Base.Nothing ->
                          case b1_s8elJ of {
                            GHC.Base.Nothing -> GHC.Types.True [];
                            GHC.Base.Just _ [Occ=Dead] -> GHC.Types.False [];
                          };
                      GHC.Base.Just a2_s8elN [Occ=Once!] ->
                          case b1_s8elJ of {
                            GHC.Base.Nothing -> GHC.Types.True [];
                            GHC.Base.Just b2_s8elP [Occ=Once!] ->
                                case a2_s8elN of {
                                  GHC.Types.I# x_s8elR [Occ=Once] ->
                                      case b2_s8elP of {
                                        GHC.Types.I# y_s8elT [Occ=Once] ->
                                            case <# [x_s8elR y_s8elT] of {
                                              __DEFAULT -> GHC.Types.True [];
                                              1# -> GHC.Types.False [];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fOrdBufferMode_$cmax
  :: GHC.IO.Handle.Types.BufferMode
     -> GHC.IO.Handle.Types.BufferMode -> GHC.IO.Handle.Types.BufferMode
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s8elV y_s8elW]
        case y_s8elW of wild_s8elX {
          GHC.IO.Handle.Types.NoBuffering -> x_s8elV;
          GHC.IO.Handle.Types.LineBuffering ->
              case x_s8elV of wild1_s8elY {
                __DEFAULT -> GHC.IO.Handle.Types.LineBuffering [];
                GHC.IO.Handle.Types.BlockBuffering _ [Occ=Dead] -> wild1_s8elY;
              };
          GHC.IO.Handle.Types.BlockBuffering a1_s8em0 [Occ=Once!] ->
              case x_s8elV of wild1_s8em1 {
                __DEFAULT -> wild_s8elX;
                GHC.IO.Handle.Types.BlockBuffering b1_s8em2 [Occ=Once*!] ->
                    case a1_s8em0 of {
                      GHC.Base.Nothing ->
                          case b1_s8em2 of {
                            GHC.Base.Nothing -> wild_s8elX;
                            GHC.Base.Just _ [Occ=Dead] -> wild1_s8em1;
                          };
                      GHC.Base.Just a2_s8em6 [Occ=Once!] ->
                          case b1_s8em2 of {
                            GHC.Base.Nothing -> wild_s8elX;
                            GHC.Base.Just b2_s8em8 [Occ=Once!] ->
                                case a2_s8em6 of {
                                  GHC.Types.I# x1_s8ema [Occ=Once] ->
                                      case b2_s8em8 of {
                                        GHC.Types.I# y1_s8emc [Occ=Once] ->
                                            case <# [x1_s8ema y1_s8emc] of {
                                              __DEFAULT -> wild_s8elX;
                                              1# -> wild1_s8em1;
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fOrdBufferMode_$c>=
  :: GHC.IO.Handle.Types.BufferMode
     -> GHC.IO.Handle.Types.BufferMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8eme b_s8emf]
        case a_s8eme of {
          GHC.IO.Handle.Types.NoBuffering ->
              case b_s8emf of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Handle.Types.NoBuffering -> GHC.Types.True [];
              };
          GHC.IO.Handle.Types.LineBuffering ->
              case b_s8emf of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Handle.Types.BlockBuffering _ [Occ=Dead] ->
                    GHC.Types.False [];
              };
          GHC.IO.Handle.Types.BlockBuffering a1_s8emk [Occ=Once!] ->
              case b_s8emf of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Handle.Types.BlockBuffering b1_s8emm [Occ=Once*!] ->
                    case a1_s8emk of {
                      GHC.Base.Nothing ->
                          case b1_s8emm of {
                            GHC.Base.Nothing -> GHC.Types.True [];
                            GHC.Base.Just _ [Occ=Dead] -> GHC.Types.False [];
                          };
                      GHC.Base.Just a2_s8emq [Occ=Once!] ->
                          case b1_s8emm of {
                            GHC.Base.Nothing -> GHC.Types.True [];
                            GHC.Base.Just b2_s8ems [Occ=Once!] ->
                                case a2_s8emq of {
                                  GHC.Types.I# x_s8emu [Occ=Once] ->
                                      case b2_s8ems of {
                                        GHC.Types.I# y_s8emw [Occ=Once] ->
                                            case <# [x_s8emu y_s8emw] of {
                                              __DEFAULT -> GHC.Types.True [];
                                              1# -> GHC.Types.False [];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fOrdBufferMode_$c>
  :: GHC.IO.Handle.Types.BufferMode
     -> GHC.IO.Handle.Types.BufferMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s8emy b_s8emz]
        GHC.IO.Handle.Types.$fOrdBufferMode_$c< b_s8emz a_s8emy;

GHC.IO.Handle.Types.$fOrdBufferMode_$cmin
  :: GHC.IO.Handle.Types.BufferMode
     -> GHC.IO.Handle.Types.BufferMode -> GHC.IO.Handle.Types.BufferMode
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s8emA y_s8emB]
        case y_s8emB of wild_s8emC {
          GHC.IO.Handle.Types.NoBuffering ->
              case x_s8emA of {
                __DEFAULT -> GHC.IO.Handle.Types.NoBuffering [];
              };
          GHC.IO.Handle.Types.LineBuffering ->
              case x_s8emA of wild1_s8emE {
                __DEFAULT -> wild1_s8emE;
                GHC.IO.Handle.Types.BlockBuffering _ [Occ=Dead] ->
                    GHC.IO.Handle.Types.LineBuffering [];
              };
          GHC.IO.Handle.Types.BlockBuffering a1_s8emG [Occ=Once!] ->
              case x_s8emA of wild1_s8emH {
                __DEFAULT -> wild1_s8emH;
                GHC.IO.Handle.Types.BlockBuffering b1_s8emI [Occ=Once*!] ->
                    case a1_s8emG of {
                      GHC.Base.Nothing ->
                          case b1_s8emI of {
                            GHC.Base.Nothing -> wild1_s8emH;
                            GHC.Base.Just _ [Occ=Dead] -> wild_s8emC;
                          };
                      GHC.Base.Just a2_s8emM [Occ=Once!] ->
                          case b1_s8emI of {
                            GHC.Base.Nothing -> wild1_s8emH;
                            GHC.Base.Just b2_s8emO [Occ=Once!] ->
                                case a2_s8emM of {
                                  GHC.Types.I# x1_s8emQ [Occ=Once] ->
                                      case b2_s8emO of {
                                        GHC.Types.I# y1_s8emS [Occ=Once] ->
                                            case <# [x1_s8emQ y1_s8emS] of {
                                              __DEFAULT -> wild1_s8emH;
                                              1# -> wild_s8emC;
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Types.$fOrdBufferMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.IO.Handle.Types.BufferMode
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.IO.Handle.Types.$fEqBufferMode
                                      GHC.IO.Handle.Types.$fOrdBufferMode_$ccompare
                                      GHC.IO.Handle.Types.$fOrdBufferMode_$c<
                                      GHC.IO.Handle.Types.$fOrdBufferMode_$c<=
                                      GHC.IO.Handle.Types.$fOrdBufferMode_$c>
                                      GHC.IO.Handle.Types.$fOrdBufferMode_$c>=
                                      GHC.IO.Handle.Types.$fOrdBufferMode_$cmax
                                      GHC.IO.Handle.Types.$fOrdBufferMode_$cmin];

GHC.IO.Handle.Types.haOtherSide
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s8emU]
        case ds_s8emU of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds9_s8enb [Occ=Once] ->
              ds9_s8enb;
        };

GHC.IO.Handle.Types.haOutputNL
  :: GHC.IO.Handle.Types.Handle__ -> GHC.IO.Handle.Types.Newline
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s8enc]
        case ds_s8enc of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds8_s8ens [Occ=Once]
                                       _ [Occ=Dead] ->
              ds8_s8ens;
        };

GHC.IO.Handle.Types.haInputNL
  :: GHC.IO.Handle.Types.Handle__ -> GHC.IO.Handle.Types.Newline
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s8enu]
        case ds_s8enu of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds7_s8enJ [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              ds7_s8enJ;
        };

GHC.IO.Handle.Types.haCodec
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s8enM]
        case ds_s8enM of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds6_s8eo0 [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              ds6_s8eo0;
        };

GHC.IO.Handle.Types.haDecoder :: ()
[GblId[[RecSel(naughty)]], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE ()! [];

GHC.IO.Handle.Types.haEncoder :: ()
[GblId[[RecSel(naughty)]], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE ()! [];

GHC.IO.Handle.Types.haBuffers
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IORef.IORef
          (GHC.IO.Handle.Types.BufferList GHC.IO.Buffer.CharBufElem)
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>m,
 Unf=OtherCon []] =
    [] \r [ds_s8eo4]
        case ds_s8eo4 of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       dt3_s8eof [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              GHC.STRef.STRef [dt3_s8eof];
        };

GHC.IO.Handle.Types.haCharBuffer
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IORef.IORef (GHC.IO.Buffer.Buffer GHC.IO.Buffer.CharBufElem)
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>m,
 Unf=OtherCon []] =
    [] \r [ds_s8eom]
        case ds_s8eom of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       dt2_s8eow [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              GHC.STRef.STRef [dt2_s8eow];
        };

GHC.IO.Handle.Types.haLastDecode :: ()
[GblId[[RecSel(naughty)]], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE ()! [];

GHC.IO.Handle.Types.haBufferMode
  :: GHC.IO.Handle.Types.Handle__ -> GHC.IO.Handle.Types.BufferMode
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s8eoE]
        case ds_s8eoE of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds3_s8eoM [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              ds3_s8eoM;
        };

GHC.IO.Handle.Types.haByteBuffer
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IORef.IORef (GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>m,
 Unf=OtherCon []] =
    [] \r [ds_s8eoW]
        case ds_s8eoW of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       dt_s8ep3 [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              GHC.STRef.STRef [dt_s8ep3];
        };

GHC.IO.Handle.Types.haType
  :: GHC.IO.Handle.Types.Handle__ -> GHC.IO.Handle.Types.HandleType
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s8epe]
        case ds_s8epe of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds2_s8epk [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              ds2_s8epk;
        };

GHC.IO.Handle.Types.haDevice :: ()
[GblId[[RecSel(naughty)]], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE ()! [];

GHC.IO.Handle.Types.outputNL
  :: GHC.IO.Handle.Types.NewlineMode -> GHC.IO.Handle.Types.Newline
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LS),1*U(A,1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_s8epw]
        case ds_s8epw of {
          GHC.IO.Handle.Types.NewlineMode _ [Occ=Dead]
                                          ds2_s8epz [Occ=Once] ->
              ds2_s8epz;
        };

GHC.IO.Handle.Types.inputNL
  :: GHC.IO.Handle.Types.NewlineMode -> GHC.IO.Handle.Types.Newline
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,A)>,
 Unf=OtherCon []] =
    [] \r [ds_s8epA]
        case ds_s8epA of {
          GHC.IO.Handle.Types.NewlineMode ds1_s8epC [Occ=Once]
                                          _ [Occ=Dead] ->
              ds1_s8epC;
        };

GHC.IO.Handle.Types.isReadableHandleType
  :: GHC.IO.Handle.Types.HandleType -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s8epE]
        case ds_s8epE of {
          __DEFAULT -> GHC.Types.False [];
          GHC.IO.Handle.Types.ReadHandle -> GHC.Types.True [];
          GHC.IO.Handle.Types.ReadWriteHandle -> GHC.Types.True [];
        };

GHC.IO.Handle.Types.isWritableHandleType
  :: GHC.IO.Handle.Types.HandleType -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s8epG]
        case ds_s8epG of {
          __DEFAULT -> GHC.Types.False [];
          GHC.IO.Handle.Types.WriteHandle -> GHC.Types.True [];
          GHC.IO.Handle.Types.AppendHandle -> GHC.Types.True [];
          GHC.IO.Handle.Types.ReadWriteHandle -> GHC.Types.True [];
        };

GHC.IO.Handle.Types.isReadWriteHandleType
  :: GHC.IO.Handle.Types.HandleType -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s8epI]
        case ds_s8epI of {
          __DEFAULT -> GHC.Types.False [];
          GHC.IO.Handle.Types.ReadWriteHandle -> GHC.Types.True [];
        };

GHC.IO.Handle.Types.nativeNewline :: GHC.IO.Handle.Types.Newline
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.LF! [];

GHC.IO.Handle.Types.universalNewlineMode
  :: GHC.IO.Handle.Types.NewlineMode
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.NewlineMode! [GHC.IO.Handle.Types.CRLF
                                                    GHC.IO.Handle.Types.LF];

GHC.IO.Handle.Types.nativeNewlineMode
  :: GHC.IO.Handle.Types.NewlineMode
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.NewlineMode! [GHC.IO.Handle.Types.LF
                                                    GHC.IO.Handle.Types.LF];

GHC.IO.Handle.Types.noNewlineTranslation
  :: GHC.IO.Handle.Types.NewlineMode
[GblId, Str=m, Unf=OtherCon []] =
    [] \u [] GHC.IO.Handle.Types.nativeNewlineMode;

GHC.IO.Handle.Types.showHandle1 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "{handle: "#;

GHC.IO.Handle.Types.showHandle
  :: GHC.IO.FilePath -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [file_s8epK eta_s8epL]
        let {
          sat_s8epN [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [file_s8epK eta_s8epL] \u []
                  let {
                    sat_s8epM [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                    [LclId] =
                        [eta_s8epL] \s []
                            GHC.CString.unpackAppendCString#
                                GHC.IO.Handle.Types.$fReadNewlineMode5 eta_s8epL;
                  } in  GHC.Base.++ file_s8epK sat_s8epM;
        } in 
          GHC.CString.unpackAppendCString#
              GHC.IO.Handle.Types.showHandle1 sat_s8epN;

GHC.IO.Handle.Types.$fShowHandle_$cshowsPrec
  :: GHC.Types.Int -> GHC.IO.Handle.Types.Handle -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_s8epO ds1_s8epP eta_s8epQ]
        case ds1_s8epP of {
          GHC.IO.Handle.Types.FileHandle file_s8epS [Occ=Once]
                                         _ [Occ=Dead] ->
              GHC.IO.Handle.Types.showHandle file_s8epS eta_s8epQ;
          GHC.IO.Handle.Types.DuplexHandle file_s8epU [Occ=Once]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              GHC.IO.Handle.Types.showHandle file_s8epU eta_s8epQ;
        };

GHC.IO.Handle.Types.$fShowHandle_$cshow
  :: GHC.IO.Handle.Types.Handle -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s8epX]
        case x_s8epX of {
          GHC.IO.Handle.Types.FileHandle file_s8epZ [Occ=Once]
                                         _ [Occ=Dead] ->
              let {
                sat_s8eq1 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [file_s8epZ] \u []
                        GHC.Base.++ file_s8epZ GHC.IO.Handle.Types.$fReadNewlineMode4;
              } in 
                GHC.CString.unpackAppendCString#
                    GHC.IO.Handle.Types.showHandle1 sat_s8eq1;
          GHC.IO.Handle.Types.DuplexHandle file_s8eq2 [Occ=Once]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              let {
                sat_s8eq5 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [file_s8eq2] \u []
                        GHC.Base.++ file_s8eq2 GHC.IO.Handle.Types.$fReadNewlineMode4;
              } in 
                GHC.CString.unpackAppendCString#
                    GHC.IO.Handle.Types.showHandle1 sat_s8eq5;
        };

GHC.IO.Handle.Types.$fShowHandle1
  :: GHC.IO.Handle.Types.Handle -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_s8eq6 eta_s8eq7]
        case ds_s8eq6 of {
          GHC.IO.Handle.Types.FileHandle file_s8eq9 [Occ=Once]
                                         _ [Occ=Dead] ->
              GHC.IO.Handle.Types.showHandle file_s8eq9 eta_s8eq7;
          GHC.IO.Handle.Types.DuplexHandle file_s8eqb [Occ=Once]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              GHC.IO.Handle.Types.showHandle file_s8eqb eta_s8eq7;
        };

GHC.IO.Handle.Types.$fShowHandle_$cshowList
  :: [GHC.IO.Handle.Types.Handle] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s8eqe s_s8eqf]
        GHC.Show.showList__
            GHC.IO.Handle.Types.$fShowHandle1 ls_s8eqe s_s8eqf;

GHC.IO.Handle.Types.$fShowHandle [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Handle.Types.Handle
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Handle.Types.$fShowHandle_$cshowsPrec
                                    GHC.IO.Handle.Types.$fShowHandle_$cshow
                                    GHC.IO.Handle.Types.$fShowHandle_$cshowList];

GHC.IO.Handle.Types.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.Handle.Types.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$trModule4];

GHC.IO.Handle.Types.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Handle.Types"#;

GHC.IO.Handle.Types.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$trModule2];

GHC.IO.Handle.Types.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Handle.Types.$trModule3
                                     GHC.IO.Handle.Types.$trModule1];

$krep_r8a59 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep1_r8a5a :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Encoding.Types.$tcTextEncoding
                                              GHC.Types.[]];

$krep2_r8a5b :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Word.$tcWord8
                                              GHC.Types.[]];

$krep3_r8a5c :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep4_r8a5d :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r8a59 GHC.Types.[]];

$krep5_r8a5e :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep4_r8a5d];

$krep6_r8a5f :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r8a5a GHC.Types.[]];

$krep7_r8a5g :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep6_r8a5f];

$krep8_r8a5h :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_r8a5c GHC.Types.[]];

$krep9_r8a5i :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Buffer.$tcBuffer
                                              $krep8_r8a5h];

$krep10_r8a5j :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep9_r8a5i GHC.Types.[]];

$krep11_r8a5k :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IORef.$tcIORef
                                              $krep10_r8a5j];

$krep12_r8a5l :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r8a5b GHC.Types.[]];

$krep13_r8a5m :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Buffer.$tcBuffer
                                              $krep12_r8a5l];

$krep14_r8a5n :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep13_r8a5m GHC.Types.[]];

$krep15_r8a5o :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IORef.$tcIORef
                                              $krep14_r8a5n];

$krep16_r8a5p :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep8_r8a5h];

$krep17_r8a5q :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [2#];

$krep18_r8a5r :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep17_r8a5q GHC.Types.[]];

$krep19_r8a5s :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_r8a5c $krep18_r8a5r];

$krep20_r8a5t :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r8a5b $krep19_r8a5s];

$krep21_r8a5u :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Encoding.Types.$tcBufferCodec
                                              $krep20_r8a5t];

$krep22_r8a5v :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep21_r8a5u GHC.Types.[]];

$krep23_r8a5w :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep22_r8a5v];

$krep24_r8a5x :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep17_r8a5q $krep14_r8a5n];

$krep25_r8a5y :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,)
                                              $krep24_r8a5x];

$krep26_r8a5z :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep25_r8a5y GHC.Types.[]];

$krep27_r8a5A :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IORef.$tcIORef
                                              $krep26_r8a5z];

$krep28_r8a5B :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [1#];

$krep29_r8a5C :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep28_r8a5B GHC.Types.[]];

$krep30_r8a5D :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r8a5b $krep29_r8a5C];

$krep31_r8a5E :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_r8a5c $krep30_r8a5D];

$krep32_r8a5F :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Encoding.Types.$tcBufferCodec
                                              $krep31_r8a5E];

$krep33_r8a5G :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep32_r8a5F GHC.Types.[]];

$krep34_r8a5H :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep33_r8a5G];

$krep35_r8a5I :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep36_r8a5J :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep35_r8a5I GHC.Types.[]];

$krep37_r8a5K :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.ForeignPtr.$tcForeignPtr
                                              $krep36_r8a5J];

$krep38_r8a5L :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Types.krep$* $krep36_r8a5J];

$krep39_r8a5M :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.Typeable.Internal.$tcTypeable
                                              $krep38_r8a5L];

$krep40_r8a5N :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Device.$tcIODevice
                                              $krep36_r8a5J];

$krep41_r8a5O :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.BufferedIO.$tcBufferedIO
                                              $krep36_r8a5J];

GHC.IO.Handle.Types.$tcBufferList2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BufferList"#;

GHC.IO.Handle.Types.$tcBufferList1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tcBufferList2];

GHC.IO.Handle.Types.$tcBufferList :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16602278556585116844##
                                    18164509953320487254##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tcBufferList1
                                    0#
                                    GHC.Types.krep$*Arr*];

GHC.IO.Handle.Types.$tc'BufferListNil1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcBufferList
                                              $krep36_r8a5J];

GHC.IO.Handle.Types.$tc'BufferListNil3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BufferListNil"#;

GHC.IO.Handle.Types.$tc'BufferListNil2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'BufferListNil3];

GHC.IO.Handle.Types.$tc'BufferListNil :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1776148480580179033##
                                    13181184993065174936##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'BufferListNil2
                                    1#
                                    GHC.IO.Handle.Types.$tc'BufferListNil1];

$krep42_r8a5P :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.IO.Handle.Types.$tc'BufferListNil1
                                         GHC.IO.Handle.Types.$tc'BufferListNil1];

GHC.IO.Handle.Types.$tc'BufferListCons1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep37_r8a5K $krep42_r8a5P];

GHC.IO.Handle.Types.$tc'BufferListCons3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BufferListCons"#;

GHC.IO.Handle.Types.$tc'BufferListCons2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'BufferListCons3];

GHC.IO.Handle.Types.$tc'BufferListCons :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17252346539814354939##
                                    274626690118510806##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'BufferListCons2
                                    1#
                                    GHC.IO.Handle.Types.$tc'BufferListCons1];

$krep43_r8a5Q :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcBufferList
                                              $krep8_r8a5h];

$krep44_r8a5R :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep43_r8a5Q GHC.Types.[]];

$krep45_r8a5S :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IORef.$tcIORef
                                              $krep44_r8a5R];

GHC.IO.Handle.Types.$tcHandleType2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "HandleType"#;

GHC.IO.Handle.Types.$tcHandleType1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tcHandleType2];

GHC.IO.Handle.Types.$tcHandleType :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12652050740177317592##
                                    15012172050125063359##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tcHandleType1
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.Handle.Types.$tc'AppendHandle1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcHandleType
                                              GHC.Types.[]];

GHC.IO.Handle.Types.$tc'ClosedHandle2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ClosedHandle"#;

GHC.IO.Handle.Types.$tc'ClosedHandle1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'ClosedHandle2];

GHC.IO.Handle.Types.$tc'ClosedHandle :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3827246897052092772##
                                    908733983357893198##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'ClosedHandle1
                                    0#
                                    GHC.IO.Handle.Types.$tc'AppendHandle1];

GHC.IO.Handle.Types.$tc'SemiClosedHandle2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'SemiClosedHandle"#;

GHC.IO.Handle.Types.$tc'SemiClosedHandle1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'SemiClosedHandle2];

GHC.IO.Handle.Types.$tc'SemiClosedHandle :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9212351547956271402##
                                    6570718180183054490##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'SemiClosedHandle1
                                    0#
                                    GHC.IO.Handle.Types.$tc'AppendHandle1];

GHC.IO.Handle.Types.$tc'ReadHandle2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ReadHandle"#;

GHC.IO.Handle.Types.$tc'ReadHandle1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'ReadHandle2];

GHC.IO.Handle.Types.$tc'ReadHandle :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [269968663592081974##
                                    17473723309710900549##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'ReadHandle1
                                    0#
                                    GHC.IO.Handle.Types.$tc'AppendHandle1];

GHC.IO.Handle.Types.$tc'WriteHandle2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'WriteHandle"#;

GHC.IO.Handle.Types.$tc'WriteHandle1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'WriteHandle2];

GHC.IO.Handle.Types.$tc'WriteHandle :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [18024523813608199082##
                                    4783872735135983851##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'WriteHandle1
                                    0#
                                    GHC.IO.Handle.Types.$tc'AppendHandle1];

GHC.IO.Handle.Types.$tc'AppendHandle3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'AppendHandle"#;

GHC.IO.Handle.Types.$tc'AppendHandle2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'AppendHandle3];

GHC.IO.Handle.Types.$tc'AppendHandle :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [18423480119042393547##
                                    8911069045719960050##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'AppendHandle2
                                    0#
                                    GHC.IO.Handle.Types.$tc'AppendHandle1];

GHC.IO.Handle.Types.$tc'ReadWriteHandle2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ReadWriteHandle"#;

GHC.IO.Handle.Types.$tc'ReadWriteHandle1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'ReadWriteHandle2];

GHC.IO.Handle.Types.$tc'ReadWriteHandle :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6962298179673541916##
                                    7858738479804269456##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'ReadWriteHandle1
                                    0#
                                    GHC.IO.Handle.Types.$tc'AppendHandle1];

GHC.IO.Handle.Types.$tcBufferMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BufferMode"#;

GHC.IO.Handle.Types.$tcBufferMode1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tcBufferMode2];

GHC.IO.Handle.Types.$tcBufferMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2181253694666364469##
                                    18094997560331273583##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tcBufferMode1
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.Handle.Types.$tc'LineBuffering1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcBufferMode
                                              GHC.Types.[]];

GHC.IO.Handle.Types.$tc'NoBuffering2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'NoBuffering"#;

GHC.IO.Handle.Types.$tc'NoBuffering1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'NoBuffering2];

GHC.IO.Handle.Types.$tc'NoBuffering :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1829914617507863771##
                                    11519122601481432262##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'NoBuffering1
                                    0#
                                    GHC.IO.Handle.Types.$tc'LineBuffering1];

GHC.IO.Handle.Types.$tc'LineBuffering3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'LineBuffering"#;

GHC.IO.Handle.Types.$tc'LineBuffering2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'LineBuffering3];

GHC.IO.Handle.Types.$tc'LineBuffering :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6417231512954421547##
                                    14761155862500981941##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'LineBuffering2
                                    0#
                                    GHC.IO.Handle.Types.$tc'LineBuffering1];

GHC.IO.Handle.Types.$tc'BlockBuffering1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep5_r8a5e
                                         GHC.IO.Handle.Types.$tc'LineBuffering1];

GHC.IO.Handle.Types.$tc'BlockBuffering3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BlockBuffering"#;

GHC.IO.Handle.Types.$tc'BlockBuffering2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'BlockBuffering3];

GHC.IO.Handle.Types.$tc'BlockBuffering :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [704611490471072872##
                                    15656058643765081689##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'BlockBuffering2
                                    0#
                                    GHC.IO.Handle.Types.$tc'BlockBuffering1];

GHC.IO.Handle.Types.$tcNewline2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Newline"#;

GHC.IO.Handle.Types.$tcNewline1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tcNewline2];

GHC.IO.Handle.Types.$tcNewline :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4144517894815066994##
                                    10872055347860317487##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tcNewline1
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.Handle.Types.$tc'CRLF1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcNewline
                                              GHC.Types.[]];

GHC.IO.Handle.Types.$tc'LF2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'LF"#;

GHC.IO.Handle.Types.$tc'LF1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'LF2];

GHC.IO.Handle.Types.$tc'LF :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [8352565500432618804##
                                    14951155965269318914##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'LF1
                                    0#
                                    GHC.IO.Handle.Types.$tc'CRLF1];

GHC.IO.Handle.Types.$tc'CRLF3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'CRLF"#;

GHC.IO.Handle.Types.$tc'CRLF2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'CRLF3];

GHC.IO.Handle.Types.$tc'CRLF :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12041259567283068515##
                                    3210182148185771829##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'CRLF2
                                    0#
                                    GHC.IO.Handle.Types.$tc'CRLF1];

GHC.IO.Handle.Types.$tcHandle__2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Handle__"#;

GHC.IO.Handle.Types.$tcHandle__1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tcHandle__2];

GHC.IO.Handle.Types.$tcHandle__ :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [10675922960094776064##
                                    10563785792974977547##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tcHandle__1
                                    0#
                                    GHC.Types.krep$*];

$krep46_r8a5T :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcHandle__
                                              GHC.Types.[]];

$krep47_r8a5U :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep46_r8a5T GHC.Types.[]];

$krep48_r8a5V :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.MVar.$tcMVar
                                              $krep47_r8a5U];

$krep49_r8a5W :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep48_r8a5V GHC.Types.[]];

$krep50_r8a5X :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep49_r8a5W];

$krep51_r8a5Y :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep50_r8a5X $krep46_r8a5T];

$krep52_r8a5Z :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.IO.Handle.Types.$tc'CRLF1
                                         $krep51_r8a5Y];

$krep53_r8a60 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.IO.Handle.Types.$tc'CRLF1
                                         $krep52_r8a5Z];

$krep54_r8a61 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep7_r8a5g $krep53_r8a60];

$krep55_r8a62 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep23_r8a5w $krep54_r8a61];

$krep56_r8a63 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep34_r8a5H $krep55_r8a62];

$krep57_r8a64 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep45_r8a5S $krep56_r8a63];

$krep58_r8a65 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep11_r8a5k $krep57_r8a64];

$krep59_r8a66 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep27_r8a5A $krep58_r8a65];

$krep60_r8a67 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.IO.Handle.Types.$tc'LineBuffering1
                                         $krep59_r8a66];

$krep61_r8a68 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep15_r8a5o $krep60_r8a67];

$krep62_r8a69 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.IO.Handle.Types.$tc'AppendHandle1
                                         $krep61_r8a68];

$krep63_r8a6a :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep35_r8a5I $krep62_r8a69];

$krep64_r8a6b :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep39_r8a5M $krep63_r8a6a];

$krep65_r8a6c :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep41_r8a5O $krep64_r8a6b];

GHC.IO.Handle.Types.$tc'Handle__1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep40_r8a5N $krep65_r8a6c];

GHC.IO.Handle.Types.$tc'Handle__3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Handle__"#;

GHC.IO.Handle.Types.$tc'Handle__2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'Handle__3];

GHC.IO.Handle.Types.$tc'Handle__ :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15400920814375205416##
                                    14458810719499819570##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'Handle__2
                                    3#
                                    GHC.IO.Handle.Types.$tc'Handle__1];

GHC.IO.Handle.Types.$tcHandle2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Handle"#;

GHC.IO.Handle.Types.$tcHandle1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tcHandle2];

GHC.IO.Handle.Types.$tcHandle :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6808292778723485333##
                                    9239299165073943659##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tcHandle1
                                    0#
                                    GHC.Types.krep$*];

$krep66_r8a6d :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcHandle
                                              GHC.Types.[]];

$krep67_r8a6e :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep48_r8a5V $krep66_r8a6d];

$krep68_r8a6f :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep48_r8a5V $krep67_r8a6e];

GHC.IO.Handle.Types.$tc'DuplexHandle1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep16_r8a5p $krep68_r8a6f];

GHC.IO.Handle.Types.$tc'DuplexHandle3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'DuplexHandle"#;

GHC.IO.Handle.Types.$tc'DuplexHandle2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'DuplexHandle3];

GHC.IO.Handle.Types.$tc'DuplexHandle :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [477065760828861081##
                                    4557316572761143129##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'DuplexHandle2
                                    0#
                                    GHC.IO.Handle.Types.$tc'DuplexHandle1];

GHC.IO.Handle.Types.$tc'FileHandle1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep16_r8a5p $krep67_r8a6e];

GHC.IO.Handle.Types.$tc'FileHandle3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'FileHandle"#;

GHC.IO.Handle.Types.$tc'FileHandle2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'FileHandle3];

GHC.IO.Handle.Types.$tc'FileHandle :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [5544613225695748436##
                                    8829945929965735507##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'FileHandle2
                                    0#
                                    GHC.IO.Handle.Types.$tc'FileHandle1];

GHC.IO.Handle.Types.$tcNewlineMode1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$fReadNewlineMode17];

GHC.IO.Handle.Types.$tcNewlineMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17953040817059389032##
                                    12498949339099960838##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tcNewlineMode1
                                    0#
                                    GHC.Types.krep$*];

$krep69_r8a6g :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcNewlineMode
                                              GHC.Types.[]];

$krep70_r8a6h :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.IO.Handle.Types.$tc'CRLF1
                                         $krep69_r8a6g];

GHC.IO.Handle.Types.$tc'NewlineMode1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.IO.Handle.Types.$tc'CRLF1
                                         $krep70_r8a6h];

GHC.IO.Handle.Types.$tc'NewlineMode3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'NewlineMode"#;

GHC.IO.Handle.Types.$tc'NewlineMode2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Types.$tc'NewlineMode3];

GHC.IO.Handle.Types.$tc'NewlineMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4266278501114659446##
                                    17947462423734457010##
                                    GHC.IO.Handle.Types.$trModule
                                    GHC.IO.Handle.Types.$tc'NewlineMode2
                                    0#
                                    GHC.IO.Handle.Types.$tc'NewlineMode1];

GHC.IO.Handle.Types.checkHandleInvariants1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><S,U>, Unf=OtherCon []] =
    [] \r [ds_s8eqg void_0E] Unit# [GHC.Tuple.()];

GHC.IO.Handle.Types.checkHandleInvariants
  :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.Types.checkHandleInvariants1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Types.NewlineMode
  :: GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline -> GHC.IO.Handle.Types.NewlineMode
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.IO.Handle.Types.NewlineMode [eta_B2 eta_B1];

GHC.IO.Handle.Types.LF :: GHC.IO.Handle.Types.Newline
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.LF! [];

GHC.IO.Handle.Types.CRLF :: GHC.IO.Handle.Types.Newline
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.CRLF! [];

GHC.IO.Handle.Types.NoBuffering :: GHC.IO.Handle.Types.BufferMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.NoBuffering! [];

GHC.IO.Handle.Types.LineBuffering :: GHC.IO.Handle.Types.BufferMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.LineBuffering! [];

GHC.IO.Handle.Types.BlockBuffering
  :: GHC.Base.Maybe GHC.Types.Int -> GHC.IO.Handle.Types.BufferMode
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m3,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.IO.Handle.Types.BlockBuffering [eta_B1];

GHC.IO.Handle.Types.ClosedHandle :: GHC.IO.Handle.Types.HandleType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.ClosedHandle! [];

GHC.IO.Handle.Types.SemiClosedHandle
  :: GHC.IO.Handle.Types.HandleType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.SemiClosedHandle! [];

GHC.IO.Handle.Types.ReadHandle :: GHC.IO.Handle.Types.HandleType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.ReadHandle! [];

GHC.IO.Handle.Types.WriteHandle :: GHC.IO.Handle.Types.HandleType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.WriteHandle! [];

GHC.IO.Handle.Types.AppendHandle :: GHC.IO.Handle.Types.HandleType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.AppendHandle! [];

GHC.IO.Handle.Types.ReadWriteHandle
  :: GHC.IO.Handle.Types.HandleType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.ReadWriteHandle! [];

GHC.IO.Handle.Types.BufferListNil
  :: forall e. GHC.IO.Handle.Types.BufferList e
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.BufferListNil! [];

GHC.IO.Handle.Types.BufferListCons
  :: forall e.
     GHC.IO.Buffer.RawBuffer e
     -> GHC.IO.Handle.Types.BufferList e
     -> GHC.IO.Handle.Types.BufferList e
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.IO.Handle.Types.BufferListCons [eta_B2 eta_B1];

GHC.IO.Handle.Types.Handle__
  :: forall dev enc_state dec_state.
     (GHC.IO.Device.IODevice dev, GHC.IO.BufferedIO.BufferedIO dev,
      Data.Typeable.Internal.Typeable dev) =>
     dev
     -> GHC.IO.Handle.Types.HandleType
     -> GHC.Prim.MutVar#
          GHC.Prim.RealWorld (GHC.IO.Buffer.Buffer GHC.Word.Word8)
     -> GHC.IO.Handle.Types.BufferMode
     -> GHC.Prim.MutVar#
          GHC.Prim.RealWorld (dec_state, GHC.IO.Buffer.Buffer GHC.Word.Word8)
     -> GHC.Prim.MutVar#
          GHC.Prim.RealWorld (GHC.IO.Buffer.Buffer GHC.IO.Buffer.CharBufElem)
     -> GHC.Prim.MutVar#
          GHC.Prim.RealWorld
          (GHC.IO.Handle.Types.BufferList GHC.IO.Buffer.CharBufElem)
     -> GHC.Base.Maybe (GHC.IO.Encoding.Types.TextEncoder enc_state)
     -> GHC.Base.Maybe (GHC.IO.Encoding.Types.TextDecoder dec_state)
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.Newline
     -> GHC.IO.Handle.Types.Newline
     -> GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
     -> GHC.IO.Handle.Types.Handle__
[GblId[DataCon],
 Arity=16,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_Bg
           eta_Bf
           eta_Be
           eta_Bd
           eta_Bc
           eta_Bb
           eta_Ba
           eta_B9
           eta_B8
           eta_B7
           eta_B6
           eta_B5
           eta_B4
           eta_B3
           eta_B2
           eta_B1]
        GHC.IO.Handle.Types.Handle__ [eta_Bg
                                      eta_Bf
                                      eta_Be
                                      eta_Bd
                                      eta_Bc
                                      eta_Bb
                                      eta_Ba
                                      eta_B9
                                      eta_B8
                                      eta_B7
                                      eta_B6
                                      eta_B5
                                      eta_B4
                                      eta_B3
                                      eta_B2
                                      eta_B1];

GHC.IO.Handle.Types.FileHandle
  :: GHC.IO.FilePath
     -> GHC.Prim.MVar# GHC.Prim.RealWorld GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Handle.Types.Handle
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m1,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.IO.Handle.Types.FileHandle [eta_B2 eta_B1];

GHC.IO.Handle.Types.DuplexHandle
  :: GHC.IO.FilePath
     -> GHC.Prim.MVar# GHC.Prim.RealWorld GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.MVar# GHC.Prim.RealWorld GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Handle.Types.Handle
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.Types.DuplexHandle [eta_B3 eta_B2 eta_B1];

