
==================== Tidy Core ====================
2018-03-16 16:06:11.875249397 UTC

Result size of Tidy Core
  = {terms: 900, types: 1,482, coercions: 158, joins: 5/7}

-- RHS size: {terms: 16, types: 33, coercions: 0, joins: 0/0}
GHC.IO.Handle.FD.fdToHandle12
  :: Data.Typeable.Internal.TypeRep FD.FD
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 100 60}]
GHC.IO.Handle.FD.fdToHandle12
  = case Data.Typeable.Internal.$wmkTrCon
           @ *
           @ FD.FD
           10838815552519039062##
           15546290101957756376##
           GHC.IO.FD.$trModule
           GHC.IO.FD.$tcFD1
           0#
           GHC.Types.krep$*
           (GHC.Types.[] @ Data.Typeable.Internal.SomeTypeRep)
    of
    { (# ww8_i8htw, ww9_i8htx, ww10_i8hty, ww11_i8htz, ww12_i8htA #) ->
    Data.Typeable.Internal.TrTyCon
      @ * @ FD.FD ww8_i8htw ww9_i8htx ww10_i8hty ww11_i8htz ww12_i8htA
    }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.FD.$trModule4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.FD.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.FD.$trModule3 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.FD.$trModule3
  = GHC.Types.TrNameS GHC.IO.Handle.FD.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.FD.$trModule2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Handle.FD.$trModule2 = "GHC.IO.Handle.FD"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.FD.$trModule1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.FD.$trModule1
  = GHC.Types.TrNameS GHC.IO.Handle.FD.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.FD.$trModule :: Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Handle.FD.$trModule
  = GHC.Types.Module
      GHC.IO.Handle.FD.$trModule3 GHC.IO.Handle.FD.$trModule1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_rbfCu :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl_rbfCu = "handleToFd"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl1_rbfCv :: [Char]
[GblId]
lvl1_rbfCv = unpackCString# lvl_rbfCu

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl2_rbfCw :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl2_rbfCw = "not a file descriptor"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl3_rbfCx :: [Char]
[GblId]
lvl3_rbfCx = unpackCString# lvl2_rbfCw

-- RHS size: {terms: 13, types: 8, coercions: 0, joins: 0/0}
GHC.IO.Handle.FD.handleToFd3
  :: Handle -> State# RealWorld -> (# State# RealWorld, FD.FD #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []]
GHC.IO.Handle.FD.handleToFd3
  = \ (h_abeSq :: Handle) (eta_ia4WI :: State# RealWorld) ->
      raiseIO#
        @ GHC.Exception.SomeException
        @ FD.FD
        (GHC.IO.Exception.$fExceptionIOException_$ctoException
           (GHC.IO.Exception.IOError
              (GHC.Base.Just @ Handle h_abeSq)
              GHC.IO.Exception.InappropriateType
              lvl1_rbfCv
              lvl3_rbfCx
              (GHC.Base.Nothing @ CInt)
              (GHC.Base.Nothing @ FilePath)))
        eta_ia4WI

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl4_rbfCy :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl4_rbfCy = "not a file handle"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl5_rbfCz :: [Char]
[GblId]
lvl5_rbfCz = unpackCString# lvl4_rbfCy

-- RHS size: {terms: 13, types: 8, coercions: 0, joins: 0/0}
GHC.IO.Handle.FD.handleToFd2
  :: Handle -> State# RealWorld -> (# State# RealWorld, FD.FD #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []]
GHC.IO.Handle.FD.handleToFd2
  = \ (h_abeSq :: Handle) (eta_B1 :: State# RealWorld) ->
      raiseIO#
        @ GHC.Exception.SomeException
        @ FD.FD
        (GHC.IO.Exception.$fExceptionIOException_$ctoException
           (GHC.IO.Exception.IOError
              (GHC.Base.Just @ Handle h_abeSq)
              GHC.IO.Exception.InappropriateType
              lvl1_rbfCv
              lvl5_rbfCz
              (GHC.Base.Nothing @ CInt)
              (GHC.Base.Nothing @ FilePath)))
        eta_B1

-- RHS size: {terms: 29, types: 91, coercions: 8, joins: 0/0}
GHC.IO.Handle.FD.handleToFd1
  :: Handle -> State# RealWorld -> (# State# RealWorld, FD.FD #)
[GblId,
 Arity=2,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [50 0] 133 30}]
GHC.IO.Handle.FD.handleToFd1
  = \ (h_abeSq :: Handle) (eta_B1 :: State# RealWorld) ->
      case h_abeSq of wild_Xu {
        FileHandle ds_dbf0J dt_dbf2W ->
          case readMVar# @ RealWorld @ Handle__ dt_dbf2W eta_B1 of
          { (# ipv_i7IAy, ipv1_i7IAz #) ->
          case ipv1_i7IAz of
          { Handle__ @ dev_abeVd @ enc_state_abeVe @ dec_state_abeVf
                     $dIODevice_abeVg $dBufferedIO_abeVh $dTypeable_abeVi ds2_dbf0g
                     ds3_dbf0h dt1_dbf2X ds4_dbf0j dt2_dbf2Y dt3_dbf2Z dt4_dbf30
                     ds5_dbf0n ds6_dbf0o ds7_dbf0p ds8_dbf0q ds9_dbf0r ds10_dbf0s ->
          case Data.Typeable.Internal.sameTypeRep
                 @ *
                 @ *
                 @ dev_abeVd
                 @ FD.FD
                 ($dTypeable_abeVi
                  `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <dev_abeVd>_N
                          :: (Typeable dev_abeVd :: Constraint)
                             ~R# (Data.Typeable.Internal.TypeRep dev_abeVd :: *)))
                 GHC.IO.Handle.FD.fdToHandle12
          of {
            False -> GHC.IO.Handle.FD.handleToFd3 wild_Xu ipv_i7IAy;
            True ->
              (# ipv_i7IAy,
                 ds2_dbf0g
                 `cast` (UnsafeCo representational dev_abeVd FD.FD
                         :: (dev_abeVd :: *) ~R# (FD.FD :: *)) #)
          }
          }
          };
        DuplexHandle ds_dbf0K dt_dbf31 dt1_dbf32 ->
          GHC.IO.Handle.FD.handleToFd2 wild_Xu eta_B1
      }

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
handleToFd :: Handle -> IO FD.FD
[GblId,
 Arity=2,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.FD.handleToFd1
               `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <FD.FD>_R)
                       :: (Handle
                           -> State# RealWorld -> (# State# RealWorld, FD.FD #) :: *)
                          ~R# (Handle -> IO FD.FD :: *))}]
handleToFd
  = GHC.IO.Handle.FD.handleToFd1
    `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <FD.FD>_R)
            :: (Handle
                -> State# RealWorld -> (# State# RealWorld, FD.FD #) :: *)
               ~R# (Handle -> IO FD.FD :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.FD.fdToHandle11 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Handle.FD.fdToHandle11 = "openFile"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.FD.fdToHandle10 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.FD.fdToHandle10
  = unpackCString# GHC.IO.Handle.FD.fdToHandle11

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.FD.fdToHandle9 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Handle.FD.fdToHandle9 = "is a directory"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.FD.fdToHandle8 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.FD.fdToHandle8
  = unpackCString# GHC.IO.Handle.FD.fdToHandle9

-- RHS size: {terms: 7, types: 3, coercions: 0, joins: 0/0}
GHC.IO.Handle.FD.fdToHandle7 :: IOException
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Handle.FD.fdToHandle7
  = GHC.IO.Exception.IOError
      (GHC.Base.Nothing @ Handle)
      GHC.IO.Exception.InappropriateType
      GHC.IO.Handle.FD.fdToHandle10
      GHC.IO.Handle.FD.fdToHandle8
      (GHC.Base.Nothing @ CInt)
      (GHC.Base.Nothing @ FilePath)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.FD.fdToHandle6 :: GHC.Exception.SomeException
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.FD.fdToHandle6
  = GHC.IO.Exception.$fExceptionIOException_$ctoException
      GHC.IO.Handle.FD.fdToHandle7

-- RHS size: {terms: 140, types: 129, coercions: 14, joins: 2/4}
GHC.IO.Handle.FD.fdToHandle5
  :: FD.FD
     -> IODeviceType
     -> FilePath
     -> IOMode
     -> Bool
     -> Maybe TextEncoding
     -> State# RealWorld
     -> (# State# RealWorld, Handle #)
[GblId,
 Arity=7,
 Str=<L,U(U,U)><L,1*U><L,U><L,U><S,1*U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [20 47 0 84 34 20 0] 579 0}]
GHC.IO.Handle.FD.fdToHandle5
  = \ (fd0_abeS1 :: FD.FD)
      (fd_type_abeS2 :: IODeviceType)
      (filepath_abeS3 :: FilePath)
      (iomode_abeS4 :: IOMode)
      (set_non_blocking_abeS5 :: Bool)
      (mb_codec_abeS6 :: Maybe TextEncoding)
      (s_i7IAv :: State# RealWorld) ->
      join {
        $j_sbfd0 [Dmd=<L,1*C1(C1(U(U,U)))>]
          :: State# RealWorld -> FD.FD -> (# State# RealWorld, Handle #)
        [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []]
        $j_sbfd0 (ipv_i7IAy [OS=OneShot] :: State# RealWorld)
                 (ipv1_i7IAz [OS=OneShot] :: FD.FD)
          = let {
              nl_sbfbR [Dmd=<L,U(U,U)>] :: NewlineMode
              [LclId]
              nl_sbfbR
                = case mb_codec_abeS6 of { __DEFAULT -> nativeNewlineMode } } in
            join {
              fail_sbfbQ [Dmd=<L,1*C1(U(U,U))>]
                :: Void# -> (# State# RealWorld, Handle #)
              [LclId[JoinId(1)], Arity=1, Str=<L,A>, Unf=OtherCon []]
              fail_sbfbQ _ [Occ=Dead, OS=OneShot]
                = GHC.IO.Handle.Internals.mkDuplexHandle5
                    @ FD.FD
                    GHC.IO.FD.$fIODeviceFD
                    GHC.IO.FD.$fBufferedIOFD
                    (GHC.IO.Handle.FD.fdToHandle12
                     `cast` (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <FD.FD>_N
                             :: (Data.Typeable.Internal.TypeRep FD.FD :: *)
                                ~R# (Typeable FD.FD :: Constraint)))
                    ipv1_i7IAz
                    filepath_abeS3
                    (case iomode_abeS4 of {
                       ReadMode -> GHC.IO.Handle.Types.ReadHandle;
                       WriteMode -> GHC.IO.Handle.Types.WriteHandle;
                       AppendMode -> GHC.IO.Handle.Types.AppendHandle;
                       ReadWriteMode -> GHC.IO.Handle.Types.ReadWriteHandle
                     })
                    GHC.Types.True
                    mb_codec_abeS6
                    nl_sbfbR
                    GHC.IO.Handle.Internals.mkDuplexHandle4
                    (GHC.Base.Nothing @ (MVar Handle__))
                    ipv_i7IAy } in
            case fd_type_abeS2 of {
              __DEFAULT -> jump fail_sbfbQ void#;
              Directory ->
                raiseIO#
                  @ GHC.Exception.SomeException
                  @ Handle
                  GHC.IO.Handle.FD.fdToHandle6
                  ipv_i7IAy;
              Stream ->
                case iomode_abeS4 of {
                  __DEFAULT -> jump fail_sbfbQ void#;
                  ReadWriteMode ->
                    GHC.IO.Handle.Internals.mkDuplexHandle1
                      @ FD.FD
                      GHC.IO.FD.$fIODeviceFD
                      GHC.IO.FD.$fBufferedIOFD
                      (GHC.IO.Handle.FD.fdToHandle12
                       `cast` (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <FD.FD>_N
                               :: (Data.Typeable.Internal.TypeRep FD.FD :: *)
                                  ~R# (Typeable FD.FD :: Constraint)))
                      ipv1_i7IAz
                      filepath_abeS3
                      mb_codec_abeS6
                      nl_sbfbR
                      ipv_i7IAy
                }
            } } in
      case set_non_blocking_abeS5 of {
        False -> jump $j_sbfd0 s_i7IAv fd0_abeS1;
        True ->
          case fd0_abeS1 of { FD.FD dt_ibf3w dt1_ibf3x ->
          case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_iaoBA
                 realWorld#
          of
          { (# ds_iaoBI, ds1_iaoBJ #) ->
          case Foreign.C.Error.throwErrnoIfMinus1Retry2
                 @ CInt
                 System.Posix.Internals.fdFileSize_pred
                 System.Posix.Internals.setNonBlockingFD3
                 ((\ (ds2_iaoBG :: State# RealWorld) ->
                     case {__pkg_ccall base-4.11.0.0 Int#
                           -> Int# -> State# RealWorld -> (# State# RealWorld, Int# #)}_iaoBH
                            dt_ibf3w (narrow32Int# ds1_iaoBJ) ds2_iaoBG
                     of
                     { (# ds3_iaoBN, ds4_iaoBO #) ->
                     (# ds3_iaoBN, GHC.Int.I32# (narrow32Int# ds4_iaoBO) #)
                     })
                  `cast` (Sym (GHC.Types.N:IO[0] (Foreign.C.Types.N:CInt[0]))
                          :: (State# RealWorld -> (# State# RealWorld, GHC.Int.Int32 #) :: *)
                             ~R# (IO CInt :: *)))
                 s_i7IAv
          of
          { (# ipv_iaoBS, ipv1_iaoBT #) ->
          case ipv1_iaoBT
               `cast` (Foreign.C.Types.N:CInt[0]
                       :: (CInt :: *) ~R# (GHC.Int.Int32 :: *))
          of
          { GHC.Int.I32# x_iaoBX ->
          case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_iaoCm
                 realWorld#
          of
          { (# ds3_iaoCr, ds4_iaoCs #) ->
          let {
            y_iaoCp [Dmd=<S,U>] :: Int#
            [LclId]
            y_iaoCp
              = word2Int#
                  (or# (int2Word# x_iaoBX) (int2Word# (narrow32Int# ds4_iaoCs))) } in
          case /=# x_iaoBX y_iaoCp of {
            __DEFAULT -> jump $j_sbfd0 ipv_iaoBS (GHC.IO.FD.FD dt_ibf3w 1#);
            1# ->
              case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_iaoCv
                     realWorld#
              of
              { (# ds5_iaoCz, ds6_iaoCA #) ->
              case {__pkg_ccall base-4.11.0.0 Int#
                           -> Int#
                           -> Int#
                           -> State# RealWorld
                           -> (# State# RealWorld, Int# #)}_iaoCy
                     dt_ibf3w (narrow32Int# ds6_iaoCA) y_iaoCp ipv_iaoBS
              of
              { (# ds7_iaoCE, ds8_iaoCF #) ->
              jump $j_sbfd0 ds7_iaoCE (GHC.IO.FD.FD dt_ibf3w 1#)
              }
              }
          }
          }
          }
          }
          }
          }
      }

-- RHS size: {terms: 1, types: 0, coercions: 16, joins: 0/0}
mkHandleFromFD
  :: FD.FD
     -> IODeviceType
     -> FilePath
     -> IOMode
     -> Bool
     -> Maybe TextEncoding
     -> IO Handle
[GblId,
 Arity=7,
 Str=<L,U(U,U)><L,1*U><L,U><L,U><S,1*U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.FD.fdToHandle5
               `cast` (<FD.FD>_R
                       ->_R <IODeviceType>_R
                       ->_R <FilePath>_R
                       ->_R <IOMode>_R
                       ->_R <Bool>_R
                       ->_R <Maybe TextEncoding>_R
                       ->_R Sym (GHC.Types.N:IO[0] <Handle>_R)
                       :: (FD.FD
                           -> IODeviceType
                           -> FilePath
                           -> IOMode
                           -> Bool
                           -> Maybe TextEncoding
                           -> State# RealWorld
                           -> (# State# RealWorld, Handle #) :: *)
                          ~R# (FD.FD
                               -> IODeviceType
                               -> FilePath
                               -> IOMode
                               -> Bool
                               -> Maybe TextEncoding
                               -> IO Handle :: *))}]
mkHandleFromFD
  = GHC.IO.Handle.FD.fdToHandle5
    `cast` (<FD.FD>_R
            ->_R <IODeviceType>_R
            ->_R <FilePath>_R
            ->_R <IOMode>_R
            ->_R <Bool>_R
            ->_R <Maybe TextEncoding>_R
            ->_R Sym (GHC.Types.N:IO[0] <Handle>_R)
            :: (FD.FD
                -> IODeviceType
                -> FilePath
                -> IOMode
                -> Bool
                -> Maybe TextEncoding
                -> State# RealWorld
                -> (# State# RealWorld, Handle #) :: *)
               ~R# (FD.FD
                    -> IODeviceType
                    -> FilePath
                    -> IOMode
                    -> Bool
                    -> Maybe TextEncoding
                    -> IO Handle :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.FD.fdToHandle'2 :: GHC.Word.Word64
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.FD.fdToHandle'2 = GHC.Word.W64# 0##

-- RHS size: {terms: 96, types: 129, coercions: 6, joins: 1/1}
GHC.IO.Handle.FD.fdToHandle'1
  :: CInt
     -> Maybe IODeviceType
     -> Bool
     -> FilePath
     -> IOMode
     -> Bool
     -> State# RealWorld
     -> (# State# RealWorld, Handle #)
[GblId,
 Arity=7,
 Str=<L,U(U)><S,1*U><L,U><L,U><L,U><L,1*U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 106 0 0 0 100 0] 488 0}]
GHC.IO.Handle.FD.fdToHandle'1
  = \ (fdint_abeSa :: CInt)
      (mb_type_abeSb :: Maybe IODeviceType)
      (is_socket_abeSc :: Bool)
      (filepath_abeSd :: FilePath)
      (iomode_abeSe :: IOMode)
      (binary_abeSf :: Bool)
      (s_i7IAv :: State# RealWorld) ->
      join {
        $w$j_sbfso [InlPrag=NOUSERINLINE[0], Dmd=<L,1*C1(C1(C1(U(U,U))))>]
          :: State# RealWorld
             -> FD.FD -> IODeviceType -> (# State# RealWorld, Handle #)
        [LclId[JoinId(3)],
         Arity=3,
         Str=<S,U><L,U(U,U)><L,1*U>,
         Unf=OtherCon []]
        $w$j_sbfso (w_sbfsh [OS=OneShot] :: State# RealWorld)
                   (ww_sbfsl [OS=OneShot] :: FD.FD)
                   (ww1_sbfsm [OS=OneShot] :: IODeviceType)
          = case binary_abeSf of {
              False ->
                case GHC.IO.Encoding.getLocaleEncoding1 of
                { (getLocaleEncoding3_ibf1o, setLocaleEncoding1_ibf1p) ->
                case (getLocaleEncoding3_ibf1o
                      `cast` (GHC.Types.N:IO[0] <TextEncoding>_R
                              :: (IO TextEncoding :: *)
                                 ~R# (State# RealWorld
                                      -> (# State# RealWorld, TextEncoding #) :: *)))
                       w_sbfsh
                of
                { (# ipv_i7Vb3, ipv1_i7Vb4 #) ->
                GHC.IO.Handle.FD.fdToHandle5
                  ww_sbfsl
                  ww1_sbfsm
                  filepath_abeSd
                  iomode_abeSe
                  is_socket_abeSc
                  (GHC.Base.Just @ TextEncoding ipv1_i7Vb4)
                  ipv_i7Vb3
                }
                };
              True ->
                GHC.IO.Handle.FD.fdToHandle5
                  ww_sbfsl
                  ww1_sbfsm
                  filepath_abeSd
                  iomode_abeSe
                  is_socket_abeSc
                  (GHC.Base.Nothing @ TextEncoding)
                  w_sbfsh
            } } in
      case mb_type_abeSb of {
        Nothing ->
          case GHC.IO.FD.$wmkFD
                 fdint_abeSa
                 iomode_abeSe
                 (GHC.Base.Nothing
                    @ (IODeviceType, System.Posix.Types.CDev, System.Posix.Types.CIno))
                 is_socket_abeSc
                 s_i7IAv
          of
          { (# ipv_i7IAy, ipv1_i7IAz #) ->
          case ipv1_i7IAz of { (ww1_sbfsl, ww2_sbfsm) ->
          jump $w$j_sbfso ipv_i7IAy ww1_sbfsl ww2_sbfsm
          }
          };
        Just ds_dbf1H ->
          case ds_dbf1H of wild1_Xe {
            __DEFAULT ->
              case GHC.IO.FD.$wmkFD
                     fdint_abeSa
                     iomode_abeSe
                     (GHC.Base.Just
                        @ (IODeviceType, System.Posix.Types.CDev, System.Posix.Types.CIno)
                        (wild1_Xe,
                         GHC.IO.Handle.FD.fdToHandle'2
                         `cast` (Sym (System.Posix.Types.N:CDev[0])
                                 :: (GHC.Word.Word64 :: *) ~R# (System.Posix.Types.CDev :: *)),
                         GHC.IO.Handle.FD.fdToHandle'2
                         `cast` (Sym (System.Posix.Types.N:CIno[0])
                                 :: (GHC.Word.Word64 :: *) ~R# (System.Posix.Types.CIno :: *))))
                     is_socket_abeSc
                     s_i7IAv
              of
              { (# ipv_i7IAy, ipv1_i7IAz #) ->
              case ipv1_i7IAz of { (ww1_sbfsl, ww2_sbfsm) ->
              jump $w$j_sbfso ipv_i7IAy ww1_sbfsl ww2_sbfsm
              }
              };
            RegularFile ->
              case GHC.IO.FD.$wmkFD
                     fdint_abeSa
                     iomode_abeSe
                     (GHC.Base.Nothing
                        @ (IODeviceType, System.Posix.Types.CDev, System.Posix.Types.CIno))
                     is_socket_abeSc
                     s_i7IAv
              of
              { (# ipv_i7IAy, ipv1_i7IAz #) ->
              case ipv1_i7IAz of { (ww1_sbfsl, ww2_sbfsm) ->
              jump $w$j_sbfso ipv_i7IAy ww1_sbfsl ww2_sbfsm
              }
              }
          }
      }

-- RHS size: {terms: 1, types: 0, coercions: 16, joins: 0/0}
fdToHandle'
  :: CInt
     -> Maybe IODeviceType
     -> Bool
     -> FilePath
     -> IOMode
     -> Bool
     -> IO Handle
[GblId,
 Arity=7,
 Str=<L,U(U)><S,1*U><L,U><L,U><L,U><L,1*U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.FD.fdToHandle'1
               `cast` (<CInt>_R
                       ->_R <Maybe IODeviceType>_R
                       ->_R <Bool>_R
                       ->_R <FilePath>_R
                       ->_R <IOMode>_R
                       ->_R <Bool>_R
                       ->_R Sym (GHC.Types.N:IO[0] <Handle>_R)
                       :: (CInt
                           -> Maybe IODeviceType
                           -> Bool
                           -> FilePath
                           -> IOMode
                           -> Bool
                           -> State# RealWorld
                           -> (# State# RealWorld, Handle #) :: *)
                          ~R# (CInt
                               -> Maybe IODeviceType
                               -> Bool
                               -> FilePath
                               -> IOMode
                               -> Bool
                               -> IO Handle :: *))}]
fdToHandle'
  = GHC.IO.Handle.FD.fdToHandle'1
    `cast` (<CInt>_R
            ->_R <Maybe IODeviceType>_R
            ->_R <Bool>_R
            ->_R <FilePath>_R
            ->_R <IOMode>_R
            ->_R <Bool>_R
            ->_R Sym (GHC.Types.N:IO[0] <Handle>_R)
            :: (CInt
                -> Maybe IODeviceType
                -> Bool
                -> FilePath
                -> IOMode
                -> Bool
                -> State# RealWorld
                -> (# State# RealWorld, Handle #) :: *)
               ~R# (CInt
                    -> Maybe IODeviceType
                    -> Bool
                    -> FilePath
                    -> IOMode
                    -> Bool
                    -> IO Handle :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.FD.fdToHandle4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
GHC.IO.Handle.FD.fdToHandle4 = "<file descriptor: "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.FD.fdToHandle3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.FD.fdToHandle3 = ">"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.FD.fdToHandle2 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.FD.fdToHandle2
  = unpackCString# GHC.IO.Handle.FD.fdToHandle3

-- RHS size: {terms: 42, types: 54, coercions: 2, joins: 0/0}
GHC.IO.Handle.FD.$wfdToHandle [InlPrag=NOUSERINLINE[0]]
  :: Int# -> State# RealWorld -> (# State# RealWorld, Handle #)
[GblId,
 Arity=2,
 Str=<S,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 310 0}]
GHC.IO.Handle.FD.$wfdToHandle
  = \ (ww_sbfsA :: Int#) (w_sbfsx :: State# RealWorld) ->
      case System.Posix.Internals.$wfdGetMode ww_sbfsA w_sbfsx of
      { (# ipv_i7IAy, ipv1_i7IAz #) ->
      case GHC.IO.FD.$wmkFD
             ((GHC.Int.I32# ww_sbfsA)
              `cast` (Sym (Foreign.C.Types.N:CInt[0])
                      :: (GHC.Int.Int32 :: *) ~R# (CInt :: *)))
             ipv1_i7IAz
             (GHC.Base.Nothing
                @ (IODeviceType, System.Posix.Types.CDev, System.Posix.Types.CIno))
             GHC.Types.False
             ipv_i7IAy
      of
      { (# ipv2_X7IBo, ipv3_X7IBq #) ->
      case ipv3_X7IBq of { (fd_abeSn, fd_type_abeSo) ->
      GHC.IO.Handle.FD.fdToHandle5
        fd_abeSn
        fd_type_abeSo
        (unpackAppendCString#
           GHC.IO.Handle.FD.fdToHandle4
           (case fd_abeSn of { FD.FD dt_ibf5L dt1_ibf5M ->
            case GHC.Show.$wshowSignedInt 0# dt_ibf5L (GHC.Types.[] @ Char) of
            { (# ww5_ibf5Q, ww6_ibf5R #) ->
            ++
              @ Char
              (GHC.Types.: @ Char ww5_ibf5Q ww6_ibf5R)
              GHC.IO.Handle.FD.fdToHandle2
            }
            }))
        ipv1_i7IAz
        GHC.Types.False
        (GHC.Base.Nothing @ TextEncoding)
        ipv2_X7IBo
      }
      }
      }

-- RHS size: {terms: 8, types: 5, coercions: 1, joins: 0/0}
GHC.IO.Handle.FD.fdToHandle1 [InlPrag=NOUSERINLINE[0]]
  :: Posix.FD -> State# RealWorld -> (# State# RealWorld, Handle #)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_sbfsw [Occ=Once] :: Posix.FD)
                 (w1_sbfsx [Occ=Once] :: State# RealWorld) ->
                 case w_sbfsw
                      `cast` (Foreign.C.Types.N:CInt[0]
                              :: (CInt :: *) ~R# (GHC.Int.Int32 :: *))
                 of
                 { GHC.Int.I32# ww1_sbfsA [Occ=Once] ->
                 GHC.IO.Handle.FD.$wfdToHandle ww1_sbfsA w1_sbfsx
                 }}]
GHC.IO.Handle.FD.fdToHandle1
  = \ (w_sbfsw :: Posix.FD) (w1_sbfsx :: State# RealWorld) ->
      case w_sbfsw
           `cast` (Foreign.C.Types.N:CInt[0]
                   :: (CInt :: *) ~R# (GHC.Int.Int32 :: *))
      of
      { GHC.Int.I32# ww1_sbfsA ->
      GHC.IO.Handle.FD.$wfdToHandle ww1_sbfsA w1_sbfsx
      }

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
fdToHandle :: Posix.FD -> IO Handle
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.FD.fdToHandle1
               `cast` (<Posix.FD>_R ->_R Sym (GHC.Types.N:IO[0] <Handle>_R)
                       :: (Posix.FD
                           -> State# RealWorld -> (# State# RealWorld, Handle #) :: *)
                          ~R# (Posix.FD -> IO Handle :: *))}]
fdToHandle
  = GHC.IO.Handle.FD.fdToHandle1
    `cast` (<Posix.FD>_R ->_R Sym (GHC.Types.N:IO[0] <Handle>_R)
            :: (Posix.FD
                -> State# RealWorld -> (# State# RealWorld, Handle #) :: *)
               ~R# (Posix.FD -> IO Handle :: *))

-- RHS size: {terms: 58, types: 88, coercions: 2, joins: 1/1}
GHC.IO.Handle.FD.openBinaryFile5
  :: String
     -> IOMode
     -> Bool
     -> Bool
     -> State# RealWorld
     -> (# State# RealWorld, Handle #)
[GblId,
 Arity=5,
 Str=<L,U><L,U><L,1*U><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 34 0 0] 255 0}]
GHC.IO.Handle.FD.openBinaryFile5
  = \ (filepath_abeRU :: String)
      (iomode_abeRV :: IOMode)
      (binary_abeRW :: Bool)
      (non_blocking_abeRX :: Bool)
      (s_i7IAv :: State# RealWorld) ->
      case GHC.IO.FD.openFile1
             filepath_abeRU iomode_abeRV non_blocking_abeRX s_i7IAv
      of
      { (# ipv_i7IAy, ipv1_i7IAz #) ->
      case ipv1_i7IAz of { (fd_abeRY, fd_type_abeRZ) ->
      join {
        $j_sbfdq [Dmd=<L,1*C1(C1(U(U,U)))>]
          :: State# RealWorld
             -> Maybe TextEncoding -> (# State# RealWorld, Handle #)
        [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []]
        $j_sbfdq (ipv2_X7IBA [OS=OneShot] :: State# RealWorld)
                 (ipv3_X7IBC [OS=OneShot] :: Maybe TextEncoding)
          = catch#
              @ Handle
              @ GHC.Exception.SomeException
              (GHC.IO.Handle.FD.fdToHandle5
                 fd_abeRY
                 fd_type_abeRZ
                 filepath_abeRU
                 iomode_abeRV
                 GHC.Types.False
                 ipv3_X7IBC)
              (\ (e_iaIzD [OS=OneShot] :: GHC.Exception.SomeException)
                 (s1_iaIzE [OS=OneShot] :: State# RealWorld) ->
                 case fd_abeRY of { FD.FD ww1_ibf6f ww2_ibf6g ->
                 case GHC.IO.FD.$w$cclose ww1_ibf6f s1_iaIzE of
                 { (# ipv4_iaIzH, ipv5_iaIzI #) ->
                 raiseIO# @ GHC.Exception.SomeException @ Handle e_iaIzD ipv4_iaIzH
                 }
                 })
              ipv2_X7IBA } in
      case binary_abeRW of {
        False ->
          case GHC.IO.Encoding.getLocaleEncoding1 of
          { (getLocaleEncoding3_ibf1o, setLocaleEncoding1_ibf1p) ->
          case (getLocaleEncoding3_ibf1o
                `cast` (GHC.Types.N:IO[0] <TextEncoding>_R
                        :: (IO TextEncoding :: *)
                           ~R# (State# RealWorld
                                -> (# State# RealWorld, TextEncoding #) :: *)))
                 ipv_i7IAy
          of
          { (# ipv2_i7Vb3, ipv3_i7Vb4 #) ->
          jump $j_sbfdq ipv2_i7Vb3 (GHC.Base.Just @ TextEncoding ipv3_i7Vb4)
          }
          };
        True -> jump $j_sbfdq ipv_i7IAy (GHC.Base.Nothing @ TextEncoding)
      }
      }
      }

-- RHS size: {terms: 17, types: 17, coercions: 0, joins: 0/0}
GHC.IO.Handle.FD.openFile2 [InlPrag=NOUSERINLINE[0]]
  :: FilePath
     -> IOException
     -> State# RealWorld
     -> (# State# RealWorld, Handle #)
[GblId,
 Arity=3,
 Str=<B,U><B,1*U(U,U,A,U,U,A)><B,U>x,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_sbfsK [Occ=Once] :: FilePath)
                 (w1_sbfsL [Occ=Once!] :: IOException)
                 (w2_sbfsM [Occ=Once] :: State# RealWorld) ->
                 case w1_sbfsL of
                 { IOError ww1_sbfsP [Occ=Once] ww2_sbfsQ [Occ=Once] _ [Occ=Dead]
                           ww4_sbfsS [Occ=Once] ww5_sbfsT [Occ=Once] _ [Occ=Dead] ->
                 raiseIO#
                   @ GHC.Exception.SomeException
                   @ Handle
                   (GHC.IO.Exception.$fExceptionIOException_$ctoException
                      (GHC.IO.Exception.IOError
                         ww1_sbfsP
                         ww2_sbfsQ
                         GHC.IO.Handle.FD.fdToHandle10
                         ww4_sbfsS
                         ww5_sbfsT
                         (GHC.Base.Just @ FilePath w_sbfsK)))
                   w2_sbfsM
                 }}]
GHC.IO.Handle.FD.openFile2
  = \ (w_sbfsK :: FilePath)
      (w1_sbfsL :: IOException)
      (w2_sbfsM :: State# RealWorld) ->
      case w1_sbfsL of
      { IOError ww1_sbfsP ww2_sbfsQ ww3_sbfsR ww4_sbfsS ww5_sbfsT
                ww6_sbfsU ->
      raiseIO#
        @ GHC.Exception.SomeException
        @ Handle
        (GHC.IO.Exception.$fExceptionIOException_$ctoException
           (GHC.IO.Exception.IOError
              ww1_sbfsP
              ww2_sbfsQ
              GHC.IO.Handle.FD.fdToHandle10
              ww4_sbfsS
              ww5_sbfsT
              (GHC.Base.Just @ FilePath w_sbfsK)))
        w2_sbfsM
      }

-- RHS size: {terms: 28, types: 25, coercions: 8, joins: 0/0}
GHC.IO.Handle.FD.openFile1
  :: FilePath
     -> IOMode -> State# RealWorld -> (# State# RealWorld, Handle #)
[GblId,
 Arity=3,
 Str=<L,U><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 176 0}]
GHC.IO.Handle.FD.openFile1
  = \ (fp_abeRL :: FilePath)
      (im_abeRM :: IOMode)
      (eta_ia54X :: State# RealWorld) ->
      catch#
        @ Handle
        @ GHC.Exception.SomeException
        (GHC.IO.Handle.FD.openBinaryFile5
           fp_abeRL im_abeRM GHC.Types.False GHC.Types.True)
        (\ (e1_ia54Z [OS=OneShot] :: GHC.Exception.SomeException) ->
           case e1_ia54Z of wild_ia562
           { GHC.Exception.SomeException @ e2_ia565 $dException1_ia566
                                         e3_ia567 ->
           case Data.Typeable.Internal.sameTypeRep
                  @ *
                  @ *
                  @ e2_ia565
                  @ IOException
                  ((GHC.Exception.$p1Exception @ e2_ia565 $dException1_ia566)
                   `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2_ia565>_N
                           :: (Typeable e2_ia565 :: Constraint)
                              ~R# (Data.Typeable.Internal.TypeRep e2_ia565 :: *)))
                  GHC.IO.Exception.$fExceptionIOException4
           of {
             False ->
               raiseIO# @ GHC.Exception.SomeException @ Handle wild_ia562;
             True ->
               \ (eta1_ia4WI [OS=OneShot] :: State# RealWorld) ->
                 GHC.IO.Handle.FD.openFile2
                   fp_abeRL
                   (e3_ia567
                    `cast` (UnsafeCo representational e2_ia565 IOException
                            :: (e2_ia565 :: *) ~R# (IOException :: *)))
                   eta1_ia4WI
           }
           })
        eta_ia54X

-- RHS size: {terms: 1, types: 0, coercions: 7, joins: 0/0}
openFile :: FilePath -> IOMode -> IO Handle
[GblId,
 Arity=3,
 Str=<L,U><L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.FD.openFile1
               `cast` (<FilePath>_R
                       ->_R <IOMode>_R
                       ->_R Sym (GHC.Types.N:IO[0] <Handle>_R)
                       :: (FilePath
                           -> IOMode
                           -> State# RealWorld
                           -> (# State# RealWorld, Handle #) :: *)
                          ~R# (FilePath -> IOMode -> IO Handle :: *))}]
openFile
  = GHC.IO.Handle.FD.openFile1
    `cast` (<FilePath>_R
            ->_R <IOMode>_R
            ->_R Sym (GHC.Types.N:IO[0] <Handle>_R)
            :: (FilePath
                -> IOMode
                -> State# RealWorld
                -> (# State# RealWorld, Handle #) :: *)
               ~R# (FilePath -> IOMode -> IO Handle :: *))

-- RHS size: {terms: 28, types: 25, coercions: 8, joins: 0/0}
GHC.IO.Handle.FD.openFileBlocking1
  :: FilePath
     -> IOMode -> State# RealWorld -> (# State# RealWorld, Handle #)
[GblId,
 Arity=3,
 Str=<L,U><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 176 0}]
GHC.IO.Handle.FD.openFileBlocking1
  = \ (fp_abeRO :: FilePath)
      (im_abeRP :: IOMode)
      (eta_ia54X :: State# RealWorld) ->
      catch#
        @ Handle
        @ GHC.Exception.SomeException
        (GHC.IO.Handle.FD.openBinaryFile5
           fp_abeRO im_abeRP GHC.Types.False GHC.Types.False)
        (\ (e1_ia54Z [OS=OneShot] :: GHC.Exception.SomeException) ->
           case e1_ia54Z of wild_ia562
           { GHC.Exception.SomeException @ e2_ia565 $dException1_ia566
                                         e3_ia567 ->
           case Data.Typeable.Internal.sameTypeRep
                  @ *
                  @ *
                  @ e2_ia565
                  @ IOException
                  ((GHC.Exception.$p1Exception @ e2_ia565 $dException1_ia566)
                   `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2_ia565>_N
                           :: (Typeable e2_ia565 :: Constraint)
                              ~R# (Data.Typeable.Internal.TypeRep e2_ia565 :: *)))
                  GHC.IO.Exception.$fExceptionIOException4
           of {
             False ->
               raiseIO# @ GHC.Exception.SomeException @ Handle wild_ia562;
             True ->
               \ (eta1_ia4WI [OS=OneShot] :: State# RealWorld) ->
                 GHC.IO.Handle.FD.openFile2
                   fp_abeRO
                   (e3_ia567
                    `cast` (UnsafeCo representational e2_ia565 IOException
                            :: (e2_ia565 :: *) ~R# (IOException :: *)))
                   eta1_ia4WI
           }
           })
        eta_ia54X

-- RHS size: {terms: 1, types: 0, coercions: 7, joins: 0/0}
openFileBlocking :: FilePath -> IOMode -> IO Handle
[GblId,
 Arity=3,
 Str=<L,U><L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.FD.openFileBlocking1
               `cast` (<FilePath>_R
                       ->_R <IOMode>_R
                       ->_R Sym (GHC.Types.N:IO[0] <Handle>_R)
                       :: (FilePath
                           -> IOMode
                           -> State# RealWorld
                           -> (# State# RealWorld, Handle #) :: *)
                          ~R# (FilePath -> IOMode -> IO Handle :: *))}]
openFileBlocking
  = GHC.IO.Handle.FD.openFileBlocking1
    `cast` (<FilePath>_R
            ->_R <IOMode>_R
            ->_R Sym (GHC.Types.N:IO[0] <Handle>_R)
            :: (FilePath
                -> IOMode
                -> State# RealWorld
                -> (# State# RealWorld, Handle #) :: *)
               ~R# (FilePath -> IOMode -> IO Handle :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.FD.openBinaryFile4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Handle.FD.openBinaryFile4 = "openBinaryFile"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.FD.openBinaryFile3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.FD.openBinaryFile3
  = unpackCString# GHC.IO.Handle.FD.openBinaryFile4

-- RHS size: {terms: 17, types: 17, coercions: 0, joins: 0/0}
GHC.IO.Handle.FD.openBinaryFile2 [InlPrag=NOUSERINLINE[0]]
  :: FilePath
     -> IOException
     -> State# RealWorld
     -> (# State# RealWorld, Handle #)
[GblId,
 Arity=3,
 Str=<B,U><B,1*U(U,U,A,U,U,A)><B,U>x,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_sbftg [Occ=Once] :: FilePath)
                 (w1_sbfth [Occ=Once!] :: IOException)
                 (w2_sbfti [Occ=Once] :: State# RealWorld) ->
                 case w1_sbfth of
                 { IOError ww1_sbftl [Occ=Once] ww2_sbftm [Occ=Once] _ [Occ=Dead]
                           ww4_sbfto [Occ=Once] ww5_sbftp [Occ=Once] _ [Occ=Dead] ->
                 raiseIO#
                   @ GHC.Exception.SomeException
                   @ Handle
                   (GHC.IO.Exception.$fExceptionIOException_$ctoException
                      (GHC.IO.Exception.IOError
                         ww1_sbftl
                         ww2_sbftm
                         GHC.IO.Handle.FD.openBinaryFile3
                         ww4_sbfto
                         ww5_sbftp
                         (GHC.Base.Just @ FilePath w_sbftg)))
                   w2_sbfti
                 }}]
GHC.IO.Handle.FD.openBinaryFile2
  = \ (w_sbftg :: FilePath)
      (w1_sbfth :: IOException)
      (w2_sbfti :: State# RealWorld) ->
      case w1_sbfth of
      { IOError ww1_sbftl ww2_sbftm ww3_sbftn ww4_sbfto ww5_sbftp
                ww6_sbftq ->
      raiseIO#
        @ GHC.Exception.SomeException
        @ Handle
        (GHC.IO.Exception.$fExceptionIOException_$ctoException
           (GHC.IO.Exception.IOError
              ww1_sbftl
              ww2_sbftm
              GHC.IO.Handle.FD.openBinaryFile3
              ww4_sbfto
              ww5_sbftp
              (GHC.Base.Just @ FilePath w_sbftg)))
        w2_sbfti
      }

-- RHS size: {terms: 28, types: 25, coercions: 8, joins: 0/0}
GHC.IO.Handle.FD.openBinaryFile1
  :: FilePath
     -> IOMode -> State# RealWorld -> (# State# RealWorld, Handle #)
[GblId,
 Arity=3,
 Str=<L,U><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 176 0}]
GHC.IO.Handle.FD.openBinaryFile1
  = \ (fp_abeRR :: FilePath)
      (m_abeRS :: IOMode)
      (eta_ia54X :: State# RealWorld) ->
      catch#
        @ Handle
        @ GHC.Exception.SomeException
        (GHC.IO.Handle.FD.openBinaryFile5
           fp_abeRR m_abeRS GHC.Types.True GHC.Types.True)
        (\ (e1_ia54Z [OS=OneShot] :: GHC.Exception.SomeException) ->
           case e1_ia54Z of wild_ia562
           { GHC.Exception.SomeException @ e2_ia565 $dException1_ia566
                                         e3_ia567 ->
           case Data.Typeable.Internal.sameTypeRep
                  @ *
                  @ *
                  @ e2_ia565
                  @ IOException
                  ((GHC.Exception.$p1Exception @ e2_ia565 $dException1_ia566)
                   `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2_ia565>_N
                           :: (Typeable e2_ia565 :: Constraint)
                              ~R# (Data.Typeable.Internal.TypeRep e2_ia565 :: *)))
                  GHC.IO.Exception.$fExceptionIOException4
           of {
             False ->
               raiseIO# @ GHC.Exception.SomeException @ Handle wild_ia562;
             True ->
               \ (eta1_ia4WI [OS=OneShot] :: State# RealWorld) ->
                 GHC.IO.Handle.FD.openBinaryFile2
                   fp_abeRR
                   (e3_ia567
                    `cast` (UnsafeCo representational e2_ia565 IOException
                            :: (e2_ia565 :: *) ~R# (IOException :: *)))
                   eta1_ia4WI
           }
           })
        eta_ia54X

-- RHS size: {terms: 1, types: 0, coercions: 7, joins: 0/0}
openBinaryFile :: FilePath -> IOMode -> IO Handle
[GblId,
 Arity=3,
 Str=<L,U><L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.FD.openBinaryFile1
               `cast` (<FilePath>_R
                       ->_R <IOMode>_R
                       ->_R Sym (GHC.Types.N:IO[0] <Handle>_R)
                       :: (FilePath
                           -> IOMode
                           -> State# RealWorld
                           -> (# State# RealWorld, Handle #) :: *)
                          ~R# (FilePath -> IOMode -> IO Handle :: *))}]
openBinaryFile
  = GHC.IO.Handle.FD.openBinaryFile1
    `cast` (<FilePath>_R
            ->_R <IOMode>_R
            ->_R Sym (GHC.Types.N:IO[0] <Handle>_R)
            :: (FilePath
                -> IOMode
                -> State# RealWorld
                -> (# State# RealWorld, Handle #) :: *)
               ~R# (FilePath -> IOMode -> IO Handle :: *))

-- RHS size: {terms: 145, types: 319, coercions: 9, joins: 1/1}
$wstdHandleFinalizer_rbfCA
  :: FilePath
     -> MVar# RealWorld Handle__
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId, Arity=3, Str=<L,U><S,U><S,U>, Unf=OtherCon []]
$wstdHandleFinalizer_rbfCA
  = \ (w_sbftz :: FilePath)
      (ww_sbftE :: MVar# RealWorld Handle__)
      (w1_sbftB :: State# RealWorld) ->
      case takeMVar# @ RealWorld @ Handle__ ww_sbftE w1_sbftB of
      { (# ipv_i7IAy, ipv1_i7IAz #) ->
      case ipv1_i7IAz of
      { Handle__ @ dev_ibf6z @ enc_state_ibf6A @ dec_state_ibf6B
                 $dIODevice_ibf6C $dBufferedIO_ibf6D $dTypeable_ibf6E ds_ibf6F
                 ds2_ibf6G dt_ibf6H ds3_ibf6I dt1_ibf6J dt2_ibf6K dt3_ibf6L
                 ds4_ibf6M ds5_ibf6N ds6_ibf6O ds7_ibf6P ds8_ibf6Q ds9_ibf6R ->
      case readMutVar#
             @ RealWorld
             @ (GHC.IO.Buffer.Buffer GHC.Word.Word8)
             dt_ibf6H
             ipv_i7IAy
      of
      { (# ipv2_ibf6V, ipv3_ibf6W #) ->
      case ipv3_ibf6W of
      { GHC.IO.Buffer.Buffer dt4_ibf70 dt5_ibf71 ds11_ibf72 dt6_ibf73
                             dt7_ibf74 dt8_ibf75 ->
      join {
        $w$j_sbfty [InlPrag=NOUSERINLINE[0], Dmd=<L,1*C1(U(U,U))>]
          :: State# RealWorld -> (# State# RealWorld, () #)
        [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
        $w$j_sbfty (w2_sbftw [OS=OneShot] :: State# RealWorld)
          = case ds2_ibf6G of {
              __DEFAULT ->
                case ds5_ibf6N of {
                  Nothing ->
                    case ds4_ibf6M of {
                      Nothing ->
                        case putMVar#
                               @ RealWorld
                               @ Handle__
                               ww_sbftE
                               (ioe_finalizedHandle w_sbftz)
                               w2_sbftw
                        of s2#_i9DsB
                        { __DEFAULT ->
                        (# s2#_i9DsB, GHC.Tuple.() #)
                        };
                      Just d_ibf84 ->
                        case d_ibf84 of
                        { BufferCodec ds12_ibf88 ds13_ibf89 ds14_ibf8a ds15_ibf8b
                                      ds16_ibf8c ->
                        case (ds14_ibf8a
                              `cast` (GHC.Types.N:IO[0] <()>_R
                                      :: (IO () :: *)
                                         ~R# (State# RealWorld -> (# State# RealWorld, () #) :: *)))
                               w2_sbftw
                        of
                        { (# ipv4_X7Jk4, ipv5_X7Jk6 #) ->
                        case putMVar#
                               @ RealWorld
                               @ Handle__
                               ww_sbftE
                               (ioe_finalizedHandle w_sbftz)
                               ipv4_X7Jk4
                        of s2#_i9DsB
                        { __DEFAULT ->
                        (# s2#_i9DsB, GHC.Tuple.() #)
                        }
                        }
                        }
                    };
                  Just d_ibf8f ->
                    case d_ibf8f of
                    { BufferCodec ds12_ibf8j ds13_ibf8k ds14_ibf8l ds15_ibf8m
                                  ds16_ibf8n ->
                    case (ds14_ibf8l
                          `cast` (GHC.Types.N:IO[0] <()>_R
                                  :: (IO () :: *)
                                     ~R# (State# RealWorld -> (# State# RealWorld, () #) :: *)))
                           w2_sbftw
                    of
                    { (# ipv4_ibf8r, ipv5_ibf8s #) ->
                    case ds4_ibf6M of {
                      Nothing ->
                        case putMVar#
                               @ RealWorld
                               @ Handle__
                               ww_sbftE
                               (ioe_finalizedHandle w_sbftz)
                               ipv4_ibf8r
                        of s2#_i9DsB
                        { __DEFAULT ->
                        (# s2#_i9DsB, GHC.Tuple.() #)
                        };
                      Just d1_ibf8y ->
                        case d1_ibf8y of
                        { BufferCodec ds18_ibf8C ds19_ibf8D ds20_ibf8E ds21_ibf8F
                                      ds22_ibf8G ->
                        case (ds20_ibf8E
                              `cast` (GHC.Types.N:IO[0] <()>_R
                                      :: (IO () :: *)
                                         ~R# (State# RealWorld -> (# State# RealWorld, () #) :: *)))
                               ipv4_ibf8r
                        of
                        { (# ipv6_X7Jk4, ipv7_X7Jk6 #) ->
                        case putMVar#
                               @ RealWorld
                               @ Handle__
                               ww_sbftE
                               (ioe_finalizedHandle w_sbftz)
                               ipv6_X7Jk4
                        of s2#_i9DsB
                        { __DEFAULT ->
                        (# s2#_i9DsB, GHC.Tuple.() #)
                        }
                        }
                        }
                    }
                    }
                    }
                };
              ClosedHandle ->
                case putMVar#
                       @ RealWorld
                       @ Handle__
                       ww_sbftE
                       (ioe_finalizedHandle w_sbftz)
                       w2_sbftw
                of s2#_i9DsB
                { __DEFAULT ->
                (# s2#_i9DsB, GHC.Tuple.() #)
                }
            } } in
      case ds11_ibf72 of {
        GHC.IO.Buffer.ReadBuffer -> jump $w$j_sbfty ipv2_ibf6V;
        GHC.IO.Buffer.WriteBuffer ->
          case readMutVar#
                 @ RealWorld
                 @ (GHC.IO.Buffer.Buffer GHC.Word.Word8)
                 dt_ibf6H
                 ipv2_ibf6V
          of
          { (# ipv4_ibf7e, ipv5_ibf7f #) ->
          case ipv5_ibf7f of wild3_ibf7h
          { GHC.IO.Buffer.Buffer dt9_ibf7j dt10_ibf7k ds13_ibf7l dt11_ibf7m
                                 dt12_ibf7n dt13_ibf7o ->
          case ==# dt12_ibf7n dt13_ibf7o of {
            __DEFAULT ->
              case ((GHC.IO.BufferedIO.flushWriteBuffer
                       @ dev_ibf6z $dBufferedIO_ibf6D ds_ibf6F wild3_ibf7h)
                    `cast` (GHC.Types.N:IO[0] <GHC.IO.Buffer.Buffer GHC.Word.Word8>_R
                            :: (IO (GHC.IO.Buffer.Buffer GHC.Word.Word8) :: *)
                               ~R# (State# RealWorld
                                    -> (# State# RealWorld,
                                          GHC.IO.Buffer.Buffer GHC.Word.Word8 #) :: *)))
                     ipv4_ibf7e
              of
              { (# ipv6_ibf7t, ipv7_ibf7u #) ->
              case writeMutVar#
                     @ RealWorld
                     @ (GHC.IO.Buffer.Buffer GHC.Word.Word8)
                     dt_ibf6H
                     ipv7_ibf7u
                     ipv6_ibf7t
              of s2#_ibf7w
              { __DEFAULT ->
              jump $w$j_sbfty s2#_ibf7w
              }
              };
            1# -> jump $w$j_sbfty ipv4_ibf7e
          }
          }
          }
      }
      }
      }
      }
      }

-- RHS size: {terms: 10, types: 10, coercions: 0, joins: 0/0}
stdHandleFinalizer_rbfCB
  :: FilePath
     -> MVar Handle__ -> State# RealWorld -> (# State# RealWorld, () #)
[GblId, Arity=3, Str=<L,U><S(S),1*U(U)><S,U>, Unf=OtherCon []]
stdHandleFinalizer_rbfCB
  = \ (w_sbftz :: FilePath)
      (w1_sbftA :: MVar Handle__)
      (w2_sbftB :: State# RealWorld) ->
      case w1_sbftA of { MVar ww1_sbftE ->
      $wstdHandleFinalizer_rbfCA w_sbftz ww1_sbftE w2_sbftB
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl6_rbfCC :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl6_rbfCC = "<stderr>"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl7_rbfCD :: [Char]
[GblId]
lvl7_rbfCD = unpackCString# lvl6_rbfCC

-- RHS size: {terms: 2, types: 5, coercions: 8, joins: 0/0}
lvl8_rbfCE :: Maybe (FilePath -> MVar Handle__ -> IO ())
[GblId, Str=m2, Unf=OtherCon []]
lvl8_rbfCE
  = GHC.Base.Just
      @ (FilePath -> MVar Handle__ -> IO ())
      (stdHandleFinalizer_rbfCB
       `cast` (<FilePath>_R
               ->_R <MVar Handle__>_R
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (FilePath
                   -> MVar Handle__
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (FilePath -> MVar Handle__ -> IO () :: *)))

-- RHS size: {terms: 26, types: 31, coercions: 7, joins: 0/0}
lvl9_rbfCF :: State# RealWorld -> (# State# RealWorld, Handle #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []]
lvl9_rbfCF
  = \ (s_i91ZD [OS=OneShot] :: State# RealWorld) ->
      case noDuplicate# @ RealWorld s_i91ZD of s'_i91ZE { __DEFAULT ->
      case GHC.IO.Encoding.getLocaleEncoding1 of
      { (getLocaleEncoding3_ibf1o, setLocaleEncoding1_ibf1p) ->
      case (getLocaleEncoding3_ibf1o
            `cast` (GHC.Types.N:IO[0] <TextEncoding>_R
                    :: (IO TextEncoding :: *)
                       ~R# (State# RealWorld
                            -> (# State# RealWorld, TextEncoding #) :: *)))
             s'_i91ZE
      of
      { (# ipv_i7IAy, ipv1_i7IAz #) ->
      GHC.IO.Handle.Internals.mkDuplexHandle5
        @ FD.FD
        GHC.IO.FD.$fIODeviceFD
        GHC.IO.FD.$fBufferedIOFD
        (GHC.IO.Handle.FD.fdToHandle12
         `cast` (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <FD.FD>_N
                 :: (Data.Typeable.Internal.TypeRep FD.FD :: *)
                    ~R# (Typeable FD.FD :: Constraint)))
        FD.stderr
        lvl7_rbfCD
        GHC.IO.Handle.Types.WriteHandle
        GHC.Types.False
        (GHC.Base.Just @ TextEncoding ipv1_i7IAz)
        nativeNewlineMode
        lvl8_rbfCE
        (GHC.Base.Nothing @ (MVar Handle__))
        ipv_i7IAy
      }
      }
      }

-- RHS size: {terms: 5, types: 30, coercions: 0, joins: 0/0}
stderr [InlPrag=NOINLINE] :: Handle
[GblId]
stderr
  = case runRW#
           @ ('TupleRep '['TupleRep '[], 'LiftedRep])
           @ (# State# RealWorld, Handle #)
           lvl9_rbfCF
    of
    { (# ipv_i91ZH, ipv1_i91ZI #) ->
    ipv1_i91ZI
    }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl10_rbfCG :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl10_rbfCG = "<stdout>"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl11_rbfCH :: [Char]
[GblId]
lvl11_rbfCH = unpackCString# lvl10_rbfCG

-- RHS size: {terms: 26, types: 31, coercions: 7, joins: 0/0}
lvl12_rbfCI :: State# RealWorld -> (# State# RealWorld, Handle #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []]
lvl12_rbfCI
  = \ (s_i91ZD [OS=OneShot] :: State# RealWorld) ->
      case noDuplicate# @ RealWorld s_i91ZD of s'_i91ZE { __DEFAULT ->
      case GHC.IO.Encoding.getLocaleEncoding1 of
      { (getLocaleEncoding3_ibf1o, setLocaleEncoding1_ibf1p) ->
      case (getLocaleEncoding3_ibf1o
            `cast` (GHC.Types.N:IO[0] <TextEncoding>_R
                    :: (IO TextEncoding :: *)
                       ~R# (State# RealWorld
                            -> (# State# RealWorld, TextEncoding #) :: *)))
             s'_i91ZE
      of
      { (# ipv_i7IAy, ipv1_i7IAz #) ->
      GHC.IO.Handle.Internals.mkDuplexHandle5
        @ FD.FD
        GHC.IO.FD.$fIODeviceFD
        GHC.IO.FD.$fBufferedIOFD
        (GHC.IO.Handle.FD.fdToHandle12
         `cast` (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <FD.FD>_N
                 :: (Data.Typeable.Internal.TypeRep FD.FD :: *)
                    ~R# (Typeable FD.FD :: Constraint)))
        FD.stdout
        lvl11_rbfCH
        GHC.IO.Handle.Types.WriteHandle
        GHC.Types.True
        (GHC.Base.Just @ TextEncoding ipv1_i7IAz)
        nativeNewlineMode
        lvl8_rbfCE
        (GHC.Base.Nothing @ (MVar Handle__))
        ipv_i7IAy
      }
      }
      }

-- RHS size: {terms: 5, types: 30, coercions: 0, joins: 0/0}
stdout [InlPrag=NOINLINE] :: Handle
[GblId]
stdout
  = case runRW#
           @ ('TupleRep '['TupleRep '[], 'LiftedRep])
           @ (# State# RealWorld, Handle #)
           lvl12_rbfCI
    of
    { (# ipv_i91ZH, ipv1_i91ZI #) ->
    ipv1_i91ZI
    }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl13_rbfCJ :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl13_rbfCJ = "<stdin>"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl14_rbfCK :: [Char]
[GblId]
lvl14_rbfCK = unpackCString# lvl13_rbfCJ

-- RHS size: {terms: 26, types: 31, coercions: 7, joins: 0/0}
lvl15_rbfCL :: State# RealWorld -> (# State# RealWorld, Handle #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []]
lvl15_rbfCL
  = \ (s_i91ZD [OS=OneShot] :: State# RealWorld) ->
      case noDuplicate# @ RealWorld s_i91ZD of s'_i91ZE { __DEFAULT ->
      case GHC.IO.Encoding.getLocaleEncoding1 of
      { (getLocaleEncoding3_ibf1o, setLocaleEncoding1_ibf1p) ->
      case (getLocaleEncoding3_ibf1o
            `cast` (GHC.Types.N:IO[0] <TextEncoding>_R
                    :: (IO TextEncoding :: *)
                       ~R# (State# RealWorld
                            -> (# State# RealWorld, TextEncoding #) :: *)))
             s'_i91ZE
      of
      { (# ipv_i7IAy, ipv1_i7IAz #) ->
      GHC.IO.Handle.Internals.mkDuplexHandle5
        @ FD.FD
        GHC.IO.FD.$fIODeviceFD
        GHC.IO.FD.$fBufferedIOFD
        (GHC.IO.Handle.FD.fdToHandle12
         `cast` (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <FD.FD>_N
                 :: (Data.Typeable.Internal.TypeRep FD.FD :: *)
                    ~R# (Typeable FD.FD :: Constraint)))
        FD.stdin
        lvl14_rbfCK
        GHC.IO.Handle.Types.ReadHandle
        GHC.Types.True
        (GHC.Base.Just @ TextEncoding ipv1_i7IAz)
        nativeNewlineMode
        lvl8_rbfCE
        (GHC.Base.Nothing @ (MVar Handle__))
        ipv_i7IAy
      }
      }
      }

-- RHS size: {terms: 5, types: 30, coercions: 0, joins: 0/0}
stdin [InlPrag=NOINLINE] :: Handle
[GblId]
stdin
  = case runRW#
           @ ('TupleRep '['TupleRep '[], 'LiftedRep])
           @ (# State# RealWorld, Handle #)
           lvl15_rbfCL
    of
    { (# ipv_i91ZH, ipv1_i91ZI #) ->
    ipv1_i91ZI
    }


