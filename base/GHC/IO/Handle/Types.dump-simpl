
==================== Tidy Core ====================
2018-03-16 16:03:16.351143384 UTC

Result size of Tidy Core
  = {terms: 2,608, types: 2,204, coercions: 203, joins: 0/4}

-- RHS size: {terms: 51, types: 84, coercions: 14, joins: 0/0}
GHC.IO.Handle.Types.$WHandle__ [InlPrag=INLINE[2]]
  :: forall dev enc_state dec_state.
     (IODevice dev, BufferedIO dev, Typeable dev) =>
     dev
     -> HandleType
     -> IORef (Buffer Word8)
     -> BufferMode
     -> IORef (dec_state, Buffer Word8)
     -> IORef (Buffer CharBufElem)
     -> IORef (BufferList CharBufElem)
     -> Maybe (TextEncoder enc_state)
     -> Maybe (TextDecoder dec_state)
     -> Maybe TextEncoding
     -> Newline
     -> Newline
     -> Maybe (MVar Handle__)
     -> Handle__
[GblId[DataConWrapper],
 Arity=16,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><S,U><L,U><S,U><L,U><S,U><S,U><S,U><L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=16,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ dev_a88tY)
                 (@ enc_state_a88tZ)
                 (@ dec_state_a88u0)
                 (dt_a88xI [Occ=Once] :: IODevice dev_a88tY)
                 (dt_a88xJ [Occ=Once] :: BufferedIO dev_a88tY)
                 (dt_a88xK [Occ=Once] :: Typeable dev_a88tY)
                 (dt_a88xL [Occ=Once] :: dev_a88tY)
                 (dt_a88xM [Occ=Once] :: HandleType)
                 (dt_a88xN [Occ=Once] :: IORef (Buffer Word8))
                 (dt_a88xO [Occ=Once] :: BufferMode)
                 (dt_a88xP [Occ=Once] :: IORef (dec_state_a88u0, Buffer Word8))
                 (dt_a88xQ [Occ=Once] :: IORef (Buffer CharBufElem))
                 (dt_a88xR [Occ=Once] :: IORef (BufferList CharBufElem))
                 (dt_a88xS [Occ=Once] :: Maybe (TextEncoder enc_state_a88tZ))
                 (dt_a88xT [Occ=Once] :: Maybe (TextDecoder dec_state_a88u0))
                 (dt_a88xU [Occ=Once] :: Maybe TextEncoding)
                 (dt_a88xV [Occ=Once] :: Newline)
                 (dt_a88xW [Occ=Once] :: Newline)
                 (dt_a88xX [Occ=Once] :: Maybe (MVar Handle__)) ->
                 case dt_a88xL of dt_X88y5 { __DEFAULT ->
                 case dt_a88xN
                      `cast` (GHC.IORef.N:IORef[0] <Buffer Word8>_N
                              :: (IORef (Buffer Word8) :: *)
                                 ~R# (GHC.STRef.STRef RealWorld (Buffer Word8) :: *))
                 of
                 { GHC.STRef.STRef dt_a88xZ [Occ=Once] ->
                 case dt_a88xP
                      `cast` (GHC.IORef.N:IORef[0] <(dec_state_a88u0, Buffer Word8)>_N
                              :: (IORef (dec_state_a88u0, Buffer Word8) :: *)
                                 ~R# (GHC.STRef.STRef
                                        RealWorld (dec_state_a88u0, Buffer Word8) :: *))
                 of
                 { GHC.STRef.STRef dt_a88y1 [Occ=Once] ->
                 case dt_a88xQ
                      `cast` (GHC.IORef.N:IORef[0] <Buffer CharBufElem>_N
                              :: (IORef (Buffer CharBufElem) :: *)
                                 ~R# (GHC.STRef.STRef RealWorld (Buffer CharBufElem) :: *))
                 of
                 { GHC.STRef.STRef dt_a88y3 [Occ=Once] ->
                 case dt_a88xR
                      `cast` (GHC.IORef.N:IORef[0] <BufferList CharBufElem>_N
                              :: (IORef (BufferList CharBufElem) :: *)
                                 ~R# (GHC.STRef.STRef RealWorld (BufferList CharBufElem) :: *))
                 of
                 { GHC.STRef.STRef dt_a88y5 [Occ=Once] ->
                 GHC.IO.Handle.Types.Handle__
                   @ dev_a88tY
                   @ enc_state_a88tZ
                   @ dec_state_a88u0
                   dt_a88xI
                   dt_a88xJ
                   dt_a88xK
                   dt_X88y5
                   dt_a88xM
                   dt_a88xZ
                   dt_a88xO
                   dt_a88y1
                   dt_a88y3
                   dt_a88y5
                   dt_a88xS
                   dt_a88xT
                   dt_a88xU
                   dt_a88xV
                   dt_a88xW
                   dt_a88xX
                 }
                 }
                 }
                 }
                 }}]
GHC.IO.Handle.Types.$WHandle__
  = \ (@ dev_a88tY)
      (@ enc_state_a88tZ)
      (@ dec_state_a88u0)
      (dt_a88xI [Occ=Once] :: IODevice dev_a88tY)
      (dt_a88xJ [Occ=Once] :: BufferedIO dev_a88tY)
      (dt_a88xK [Occ=Once] :: Typeable dev_a88tY)
      (dt_a88xL [Occ=Once] :: dev_a88tY)
      (dt_a88xM [Occ=Once] :: HandleType)
      (dt_a88xN [Occ=Once] :: IORef (Buffer Word8))
      (dt_a88xO [Occ=Once] :: BufferMode)
      (dt_a88xP [Occ=Once] :: IORef (dec_state_a88u0, Buffer Word8))
      (dt_a88xQ [Occ=Once] :: IORef (Buffer CharBufElem))
      (dt_a88xR [Occ=Once] :: IORef (BufferList CharBufElem))
      (dt_a88xS [Occ=Once] :: Maybe (TextEncoder enc_state_a88tZ))
      (dt_a88xT [Occ=Once] :: Maybe (TextDecoder dec_state_a88u0))
      (dt_a88xU [Occ=Once] :: Maybe TextEncoding)
      (dt_a88xV [Occ=Once] :: Newline)
      (dt_a88xW [Occ=Once] :: Newline)
      (dt_a88xX [Occ=Once] :: Maybe (MVar Handle__)) ->
      case dt_a88xL of dt_X88y5 { __DEFAULT ->
      case dt_a88xN
           `cast` (GHC.IORef.N:IORef[0] <Buffer Word8>_N
                   :: (IORef (Buffer Word8) :: *)
                      ~R# (GHC.STRef.STRef RealWorld (Buffer Word8) :: *))
      of
      { GHC.STRef.STRef dt_a88xZ [Occ=Once] ->
      case dt_a88xP
           `cast` (GHC.IORef.N:IORef[0] <(dec_state_a88u0, Buffer Word8)>_N
                   :: (IORef (dec_state_a88u0, Buffer Word8) :: *)
                      ~R# (GHC.STRef.STRef
                             RealWorld (dec_state_a88u0, Buffer Word8) :: *))
      of
      { GHC.STRef.STRef dt_a88y1 [Occ=Once] ->
      case dt_a88xQ
           `cast` (GHC.IORef.N:IORef[0] <Buffer CharBufElem>_N
                   :: (IORef (Buffer CharBufElem) :: *)
                      ~R# (GHC.STRef.STRef RealWorld (Buffer CharBufElem) :: *))
      of
      { GHC.STRef.STRef dt_a88y3 [Occ=Once] ->
      case dt_a88xR
           `cast` (GHC.IORef.N:IORef[0] <BufferList CharBufElem>_N
                   :: (IORef (BufferList CharBufElem) :: *)
                      ~R# (GHC.STRef.STRef RealWorld (BufferList CharBufElem) :: *))
      of
      { GHC.STRef.STRef dt_a88y5 [Occ=Once] ->
      GHC.IO.Handle.Types.Handle__
        @ dev_a88tY
        @ enc_state_a88tZ
        @ dec_state_a88u0
        dt_a88xI
        dt_a88xJ
        dt_a88xK
        dt_X88y5
        dt_a88xM
        dt_a88xZ
        dt_a88xO
        dt_a88y1
        dt_a88y3
        dt_a88y5
        dt_a88xS
        dt_a88xT
        dt_a88xU
        dt_a88xV
        dt_a88xW
        dt_a88xX
      }
      }
      }
      }
      }

-- RHS size: {terms: 8, types: 8, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$WFileHandle [InlPrag=INLINE[2]]
  :: FilePath -> MVar Handle__ -> Handle
[GblId[DataConWrapper],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S,U>m1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (dt_a88zS [Occ=Once] :: FilePath)
                 (dt_a88zT [Occ=Once!] :: MVar Handle__) ->
                 case dt_a88zT of { MVar dt_a88zU [Occ=Once] ->
                 GHC.IO.Handle.Types.FileHandle dt_a88zS dt_a88zU
                 }}]
GHC.IO.Handle.Types.$WFileHandle
  = \ (dt_a88zS [Occ=Once] :: FilePath)
      (dt_a88zT [Occ=Once!] :: MVar Handle__) ->
      case dt_a88zT of { MVar dt_a88zU [Occ=Once] ->
      GHC.IO.Handle.Types.FileHandle dt_a88zS dt_a88zU
      }

-- RHS size: {terms: 13, types: 15, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$WDuplexHandle [InlPrag=INLINE[2]]
  :: FilePath -> MVar Handle__ -> MVar Handle__ -> Handle
[GblId[DataConWrapper],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><S,U><S,U>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (dt_a88zX [Occ=Once] :: FilePath)
                 (dt_a88zY [Occ=Once!] :: MVar Handle__)
                 (dt_a88zZ [Occ=Once!] :: MVar Handle__) ->
                 case dt_a88zY of { MVar dt_a88A0 [Occ=Once] ->
                 case dt_a88zZ of { MVar dt_a88A1 [Occ=Once] ->
                 GHC.IO.Handle.Types.DuplexHandle dt_a88zX dt_a88A0 dt_a88A1
                 }
                 }}]
GHC.IO.Handle.Types.$WDuplexHandle
  = \ (dt_a88zX [Occ=Once] :: FilePath)
      (dt_a88zY [Occ=Once!] :: MVar Handle__)
      (dt_a88zZ [Occ=Once!] :: MVar Handle__) ->
      case dt_a88zY of { MVar dt_a88A0 [Occ=Once] ->
      case dt_a88zZ of { MVar dt_a88A1 [Occ=Once] ->
      GHC.IO.Handle.Types.DuplexHandle dt_a88zX dt_a88A0 dt_a88A1
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowHandleType12 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Handle.Types.$fShowHandleType12 = "closed"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowHandleType11 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.Types.$fShowHandleType11
  = unpackCString# GHC.IO.Handle.Types.$fShowHandleType12

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowHandleType10 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Handle.Types.$fShowHandleType10 = "semi-closed"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowHandleType9 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.Types.$fShowHandleType9
  = unpackCString# GHC.IO.Handle.Types.$fShowHandleType10

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowHandleType8 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Handle.Types.$fShowHandleType8 = "readable"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowHandleType7 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.Types.$fShowHandleType7
  = unpackCString# GHC.IO.Handle.Types.$fShowHandleType8

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowHandleType6 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Handle.Types.$fShowHandleType6 = "writable"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowHandleType5 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.Types.$fShowHandleType5
  = unpackCString# GHC.IO.Handle.Types.$fShowHandleType6

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowHandleType4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
GHC.IO.Handle.Types.$fShowHandleType4 = "writable (append)"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowHandleType3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.Types.$fShowHandleType3
  = unpackCString# GHC.IO.Handle.Types.$fShowHandleType4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowHandleType2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Handle.Types.$fShowHandleType2 = "read-writable"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowHandleType1 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.Types.$fShowHandleType1
  = unpackCString# GHC.IO.Handle.Types.$fShowHandleType2

-- RHS size: {terms: 28, types: 9, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: HandleType -> String -> String
[GblId,
 Arity=2,
 Str=<S,1*U><L,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [220 0] 240 0}]
GHC.IO.Handle.Types.$w$cshowsPrec
  = \ (w_s89Bp :: HandleType) (w1_s89Bq :: String) ->
      case w_s89Bp of {
        ClosedHandle ->
          ++ @ Char GHC.IO.Handle.Types.$fShowHandleType11 w1_s89Bq;
        SemiClosedHandle ->
          ++ @ Char GHC.IO.Handle.Types.$fShowHandleType9 w1_s89Bq;
        ReadHandle ->
          ++ @ Char GHC.IO.Handle.Types.$fShowHandleType7 w1_s89Bq;
        WriteHandle ->
          ++ @ Char GHC.IO.Handle.Types.$fShowHandleType5 w1_s89Bq;
        AppendHandle ->
          ++ @ Char GHC.IO.Handle.Types.$fShowHandleType3 w1_s89Bq;
        ReadWriteHandle ->
          ++ @ Char GHC.IO.Handle.Types.$fShowHandleType1 w1_s89Bq
      }

-- RHS size: {terms: 6, types: 3, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowHandleType_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int -> HandleType -> ShowS
[GblId,
 Arity=3,
 Str=<L,A><S,1*U><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (w1_s89Bp [Occ=Once] :: HandleType)
                 (w2_s89Bq [Occ=Once] :: String) ->
                 GHC.IO.Handle.Types.$w$cshowsPrec w1_s89Bp w2_s89Bq}]
GHC.IO.Handle.Types.$fShowHandleType_$cshowsPrec
  = \ _ [Occ=Dead] (w1_s89Bp :: HandleType) (w2_s89Bq :: String) ->
      GHC.IO.Handle.Types.$w$cshowsPrec w1_s89Bp w2_s89Bq

-- RHS size: {terms: 15, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowHandleType_$cshow :: HandleType -> String
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_i7Jay [Occ=Once!] :: HandleType) ->
                 case x_i7Jay of {
                   ClosedHandle -> GHC.IO.Handle.Types.$fShowHandleType11;
                   SemiClosedHandle -> GHC.IO.Handle.Types.$fShowHandleType9;
                   ReadHandle -> GHC.IO.Handle.Types.$fShowHandleType7;
                   WriteHandle -> GHC.IO.Handle.Types.$fShowHandleType5;
                   AppendHandle -> GHC.IO.Handle.Types.$fShowHandleType3;
                   ReadWriteHandle -> GHC.IO.Handle.Types.$fShowHandleType1
                 }}]
GHC.IO.Handle.Types.$fShowHandleType_$cshow
  = \ (x_i7Jay :: HandleType) ->
      case x_i7Jay of {
        ClosedHandle -> GHC.IO.Handle.Types.$fShowHandleType11;
        SemiClosedHandle -> GHC.IO.Handle.Types.$fShowHandleType9;
        ReadHandle -> GHC.IO.Handle.Types.$fShowHandleType7;
        WriteHandle -> GHC.IO.Handle.Types.$fShowHandleType5;
        AppendHandle -> GHC.IO.Handle.Types.$fShowHandleType3;
        ReadWriteHandle -> GHC.IO.Handle.Types.$fShowHandleType1
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowHandleType_$cshowList
  :: [HandleType] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7JaB [Occ=Once] :: [HandleType])
                 (s_i7JaC [Occ=Once] :: String) ->
                 showList__
                   @ HandleType GHC.IO.Handle.Types.$w$cshowsPrec ls_i7JaB s_i7JaC}]
GHC.IO.Handle.Types.$fShowHandleType_$cshowList
  = \ (ls_i7JaB :: [HandleType]) (s_i7JaC :: String) ->
      showList__
        @ HandleType GHC.IO.Handle.Types.$w$cshowsPrec ls_i7JaB s_i7JaC

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowHandleType [InlPrag=NOUSERINLINE CONLIKE]
  :: Show HandleType
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: HandleType
                       GHC.IO.Handle.Types.$fShowHandleType_$cshowsPrec
                       GHC.IO.Handle.Types.$fShowHandleType_$cshow
                       GHC.IO.Handle.Types.$fShowHandleType_$cshowList]
GHC.IO.Handle.Types.$fShowHandleType
  = GHC.Show.C:Show
      @ HandleType
      GHC.IO.Handle.Types.$fShowHandleType_$cshowsPrec
      GHC.IO.Handle.Types.$fShowHandleType_$cshow
      GHC.IO.Handle.Types.$fShowHandleType_$cshowList

-- RHS size: {terms: 24, types: 44, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fEqHandle_$c== :: Handle -> Handle -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d88SY [Occ=Once!] :: Handle)
                 (ds1_d88SZ [Occ=Once*!] :: Handle) ->
                 case ds_d88SY of {
                   FileHandle _ [Occ=Dead] dt_d88Uu [Occ=Once] ->
                     case ds1_d88SZ of {
                       FileHandle _ [Occ=Dead] dt1_d88Uv [Occ=Once] ->
                         tagToEnum#
                           @ Bool (sameMVar# @ RealWorld @ Handle__ dt_d88Uu dt1_d88Uv);
                       DuplexHandle _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                         GHC.Types.False
                     };
                   DuplexHandle _ [Occ=Dead] dt_d88Uw [Occ=Once] _ [Occ=Dead] ->
                     case ds1_d88SZ of {
                       FileHandle _ [Occ=Dead] _ [Occ=Dead] -> GHC.Types.False;
                       DuplexHandle _ [Occ=Dead] dt2_d88Uy [Occ=Once] _ [Occ=Dead] ->
                         tagToEnum#
                           @ Bool (sameMVar# @ RealWorld @ Handle__ dt_d88Uw dt2_d88Uy)
                     }
                 }}]
GHC.IO.Handle.Types.$fEqHandle_$c==
  = \ (ds_d88SY :: Handle) (ds1_d88SZ :: Handle) ->
      case ds_d88SY of {
        FileHandle ds2_d88Tu dt_d88Uu ->
          case ds1_d88SZ of {
            FileHandle ds3_d88Tv dt1_d88Uv ->
              tagToEnum#
                @ Bool (sameMVar# @ RealWorld @ Handle__ dt_d88Uu dt1_d88Uv);
            DuplexHandle ipv_s88Vu ipv1_s88Vv ipv2_s88Vw -> GHC.Types.False
          };
        DuplexHandle ds2_d88Tw dt_d88Uw dt1_d88Ux ->
          case ds1_d88SZ of {
            FileHandle ipv_s88Vz ipv1_s88VA -> GHC.Types.False;
            DuplexHandle ds3_d88Ty dt2_d88Uy dt3_d88Uz ->
              tagToEnum#
                @ Bool (sameMVar# @ RealWorld @ Handle__ dt_d88Uw dt2_d88Uy)
          }
      }

-- RHS size: {terms: 32, types: 44, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fEqHandle_$c/= [InlPrag=INLINE (sat-args=2)]
  :: Handle -> Handle -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=False)
         Tmpl= \ (x_a22b [Occ=Once!] :: Handle)
                 (y_a22c [Occ=Once*!] :: Handle) ->
                 case x_a22b of {
                   FileHandle _ [Occ=Dead] dt_d88Uu [Occ=Once] ->
                     case y_a22c of {
                       FileHandle _ [Occ=Dead] dt1_d88Uv [Occ=Once] ->
                         case sameMVar# @ RealWorld @ Handle__ dt_d88Uu dt1_d88Uv of {
                           __DEFAULT -> GHC.Types.True;
                           1# -> GHC.Types.False
                         };
                       DuplexHandle _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                         GHC.Types.True
                     };
                   DuplexHandle _ [Occ=Dead] dt_d88Uw [Occ=Once] _ [Occ=Dead] ->
                     case y_a22c of {
                       FileHandle _ [Occ=Dead] _ [Occ=Dead] -> GHC.Types.True;
                       DuplexHandle _ [Occ=Dead] dt2_d88Uy [Occ=Once] _ [Occ=Dead] ->
                         case sameMVar# @ RealWorld @ Handle__ dt_d88Uw dt2_d88Uy of {
                           __DEFAULT -> GHC.Types.True;
                           1# -> GHC.Types.False
                         }
                     }
                 }}]
GHC.IO.Handle.Types.$fEqHandle_$c/=
  = \ (eta_B2 :: Handle) (eta1_B1 :: Handle) ->
      case eta_B2 of {
        FileHandle ds_d88Tu dt_d88Uu ->
          case eta1_B1 of {
            FileHandle ds1_d88Tv dt1_d88Uv ->
              case sameMVar# @ RealWorld @ Handle__ dt_d88Uu dt1_d88Uv of {
                __DEFAULT -> GHC.Types.True;
                1# -> GHC.Types.False
              };
            DuplexHandle ipv_s88Vu ipv1_s88Vv ipv2_s88Vw -> GHC.Types.True
          };
        DuplexHandle ds_d88Tw dt_d88Uw dt1_d88Ux ->
          case eta1_B1 of {
            FileHandle ipv_s88Vz ipv1_s88VA -> GHC.Types.True;
            DuplexHandle ds1_d88Ty dt2_d88Uy dt3_d88Uz ->
              case sameMVar# @ RealWorld @ Handle__ dt_d88Uw dt2_d88Uy of {
                __DEFAULT -> GHC.Types.True;
                1# -> GHC.Types.False
              }
          }
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fEqHandle [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq Handle
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: Handle
                        GHC.IO.Handle.Types.$fEqHandle_$c==
                        GHC.IO.Handle.Types.$fEqHandle_$c/=]
GHC.IO.Handle.Types.$fEqHandle
  = GHC.Classes.C:Eq
      @ Handle
      GHC.IO.Handle.Types.$fEqHandle_$c==
      GHC.IO.Handle.Types.$fEqHandle_$c/=

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewline11 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.Types.$fReadNewline11 = "LF"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewline10 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.Types.$fReadNewline10
  = unpackCString# GHC.IO.Handle.Types.$fReadNewline11

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewline7 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.Types.$fReadNewline7 = "CRLF"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewline6 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.Types.$fReadNewline6
  = unpackCString# GHC.IO.Handle.Types.$fReadNewline7

-- RHS size: {terms: 13, types: 6, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowNewline_$cshowsPrec
  :: Int -> Newline -> ShowS
[GblId,
 Arity=3,
 Str=<L,A><S,1*U><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ _ [Occ=Dead]
                 (ds1_d88Sk [Occ=Once!] :: Newline)
                 (eta_B1 [Occ=Once*] :: String) ->
                 case ds1_d88Sk of {
                   LF ->
                     augment
                       @ Char
                       (\ (@ b_i7JbU)
                          (c_i7JbV [Occ=Once, OS=OneShot] :: Char -> b_i7JbU -> b_i7JbU)
                          (n_i7JbW [Occ=Once, OS=OneShot] :: b_i7JbU) ->
                          foldr
                            @ Char
                            @ b_i7JbU
                            c_i7JbV
                            n_i7JbW
                            GHC.IO.Handle.Types.$fReadNewline10)
                       eta_B1;
                   CRLF ->
                     augment
                       @ Char
                       (\ (@ b_i7JbU)
                          (c_i7JbV [Occ=Once, OS=OneShot] :: Char -> b_i7JbU -> b_i7JbU)
                          (n_i7JbW [Occ=Once, OS=OneShot] :: b_i7JbU) ->
                          foldr
                            @ Char
                            @ b_i7JbU
                            c_i7JbV
                            n_i7JbW
                            GHC.IO.Handle.Types.$fReadNewline6)
                       eta_B1
                 }}]
GHC.IO.Handle.Types.$fShowNewline_$cshowsPrec
  = \ _ [Occ=Dead] (ds1_d88Sk :: Newline) (eta_B1 :: String) ->
      case ds1_d88Sk of {
        LF -> ++ @ Char GHC.IO.Handle.Types.$fReadNewline10 eta_B1;
        CRLF -> ++ @ Char GHC.IO.Handle.Types.$fReadNewline6 eta_B1
      }

-- RHS size: {terms: 7, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowNewline_$cshow :: Newline -> String
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_i7Jay [Occ=Once!] :: Newline) ->
                 case x_i7Jay of {
                   LF -> GHC.IO.Handle.Types.$fReadNewline10;
                   CRLF -> GHC.IO.Handle.Types.$fReadNewline6
                 }}]
GHC.IO.Handle.Types.$fShowNewline_$cshow
  = \ (x_i7Jay :: Newline) ->
      case x_i7Jay of {
        LF -> GHC.IO.Handle.Types.$fReadNewline10;
        CRLF -> GHC.IO.Handle.Types.$fReadNewline6
      }

-- RHS size: {terms: 12, types: 5, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowNewline1 :: Newline -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d88Sk [Occ=Once!] :: Newline)
                 (eta_B1 [Occ=Once*] :: String) ->
                 case ds_d88Sk of {
                   LF ->
                     augment
                       @ Char
                       (\ (@ b_i7JbU)
                          (c_i7JbV [Occ=Once, OS=OneShot] :: Char -> b_i7JbU -> b_i7JbU)
                          (n_i7JbW [Occ=Once, OS=OneShot] :: b_i7JbU) ->
                          foldr
                            @ Char
                            @ b_i7JbU
                            c_i7JbV
                            n_i7JbW
                            GHC.IO.Handle.Types.$fReadNewline10)
                       eta_B1;
                   CRLF ->
                     augment
                       @ Char
                       (\ (@ b_i7JbU)
                          (c_i7JbV [Occ=Once, OS=OneShot] :: Char -> b_i7JbU -> b_i7JbU)
                          (n_i7JbW [Occ=Once, OS=OneShot] :: b_i7JbU) ->
                          foldr
                            @ Char
                            @ b_i7JbU
                            c_i7JbV
                            n_i7JbW
                            GHC.IO.Handle.Types.$fReadNewline6)
                       eta_B1
                 }}]
GHC.IO.Handle.Types.$fShowNewline1
  = \ (ds_d88Sk :: Newline) (eta_B1 :: String) ->
      case ds_d88Sk of {
        LF -> ++ @ Char GHC.IO.Handle.Types.$fReadNewline10 eta_B1;
        CRLF -> ++ @ Char GHC.IO.Handle.Types.$fReadNewline6 eta_B1
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowNewline_$cshowList :: [Newline] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7JaB [Occ=Once] :: [Newline])
                 (s_i7JaC [Occ=Once] :: String) ->
                 showList__
                   @ Newline GHC.IO.Handle.Types.$fShowNewline1 ls_i7JaB s_i7JaC}]
GHC.IO.Handle.Types.$fShowNewline_$cshowList
  = \ (ls_i7JaB :: [Newline]) (s_i7JaC :: String) ->
      showList__
        @ Newline GHC.IO.Handle.Types.$fShowNewline1 ls_i7JaB s_i7JaC

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowNewline [InlPrag=NOUSERINLINE CONLIKE]
  :: Show Newline
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: Newline
                       GHC.IO.Handle.Types.$fShowNewline_$cshowsPrec
                       GHC.IO.Handle.Types.$fShowNewline_$cshow
                       GHC.IO.Handle.Types.$fShowNewline_$cshowList]
GHC.IO.Handle.Types.$fShowNewline
  = GHC.Show.C:Show
      @ Newline
      GHC.IO.Handle.Types.$fShowNewline_$cshowsPrec
      GHC.IO.Handle.Types.$fShowNewline_$cshow
      GHC.IO.Handle.Types.$fShowNewline_$cshowList

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowNewlineMode4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Handle.Types.$fShowNewlineMode4 = "NewlineMode {"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowNewlineMode3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Handle.Types.$fShowNewlineMode3 = "inputNL = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowNewlineMode2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Handle.Types.$fShowNewlineMode2 = "outputNL = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewlineMode5 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.Types.$fReadNewlineMode5 = "}"#

-- RHS size: {terms: 53, types: 18, coercions: 0, joins: 0/2}
GHC.IO.Handle.Types.$w$cshowsPrec1 [InlPrag=NOUSERINLINE[0]]
  :: Int# -> Newline -> Newline -> String -> String
[GblId,
 Arity=4,
 Str=<S,U><L,1*U><L,1*U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 60 90 0] 451 30}]
GHC.IO.Handle.Types.$w$cshowsPrec1
  = \ (ww_s89By :: Int#)
      (ww1_s89BC :: Newline)
      (ww2_s89BD :: Newline)
      (w_s89Bv :: String) ->
      let {
        p_s897o [Dmd=<L,1*C1(U)>] :: ShowS
        [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []]
        p_s897o
          = \ (x_X7RAY [OS=OneShot] :: String) ->
              unpackAppendCString#
                GHC.IO.Handle.Types.$fShowNewlineMode4
                (unpackAppendCString#
                   GHC.IO.Handle.Types.$fShowNewlineMode3
                   (let {
                      karg_s89b8 [Dmd=<L,1*U>] :: [Char]
                      [LclId]
                      karg_s89b8
                        = ++
                            @ Char
                            GHC.Show.showCommaSpace1
                            (unpackAppendCString#
                               GHC.IO.Handle.Types.$fShowNewlineMode2
                               (case ww2_s89BD of {
                                  LF ->
                                    ++
                                      @ Char
                                      GHC.IO.Handle.Types.$fReadNewline10
                                      (unpackAppendCString#
                                         GHC.IO.Handle.Types.$fReadNewlineMode5 x_X7RAY);
                                  CRLF ->
                                    ++
                                      @ Char
                                      GHC.IO.Handle.Types.$fReadNewline6
                                      (unpackAppendCString#
                                         GHC.IO.Handle.Types.$fReadNewlineMode5 x_X7RAY)
                                })) } in
                    case ww1_s89BC of {
                      LF -> ++ @ Char GHC.IO.Handle.Types.$fReadNewline10 karg_s89b8;
                      CRLF -> ++ @ Char GHC.IO.Handle.Types.$fReadNewline6 karg_s89b8
                    })) } in
      case >=# ww_s89By 11# of {
        __DEFAULT -> p_s897o w_s89Bv;
        1# ->
          GHC.Types.:
            @ Char
            GHC.Show.$fShow(,)4
            (p_s897o (GHC.Types.: @ Char GHC.Show.$fShow(,)2 w_s89Bv))
      }

-- RHS size: {terms: 14, types: 8, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowNewlineMode_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int -> NewlineMode -> ShowS
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S,1*U(1*U,1*U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s89Bt [Occ=Once!] :: Int)
                 (w1_s89Bu [Occ=Once!] :: NewlineMode)
                 (w2_s89Bv [Occ=Once] :: String) ->
                 case w_s89Bt of { I# ww1_s89By [Occ=Once] ->
                 case w1_s89Bu of
                 { NewlineMode ww3_s89BC [Occ=Once] ww4_s89BD [Occ=Once] ->
                 GHC.IO.Handle.Types.$w$cshowsPrec1
                   ww1_s89By ww3_s89BC ww4_s89BD w2_s89Bv
                 }
                 }}]
GHC.IO.Handle.Types.$fShowNewlineMode_$cshowsPrec
  = \ (w_s89Bt :: Int)
      (w1_s89Bu :: NewlineMode)
      (w2_s89Bv :: String) ->
      case w_s89Bt of { I# ww1_s89By ->
      case w1_s89Bu of { NewlineMode ww3_s89BC ww4_s89BD ->
      GHC.IO.Handle.Types.$w$cshowsPrec1
        ww1_s89By ww3_s89BC ww4_s89BD w2_s89Bv
      }
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowBufferMode2 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Types.$fShowBufferMode2 = GHC.Types.I# 0#

-- RHS size: {terms: 9, types: 5, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowNewlineMode_$cshow
  :: NewlineMode -> String
[GblId,
 Arity=1,
 Str=<S,1*U(1*U,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_i7Jay [Occ=Once] :: NewlineMode) ->
                 GHC.IO.Handle.Types.$fShowNewlineMode_$cshowsPrec
                   GHC.IO.Handle.Types.$fShowBufferMode2
                   x_i7Jay
                   (GHC.Types.[] @ Char)}]
GHC.IO.Handle.Types.$fShowNewlineMode_$cshow
  = \ (x_i7Jay :: NewlineMode) ->
      case x_i7Jay of { NewlineMode ww1_s89BC ww2_s89BD ->
      GHC.IO.Handle.Types.$w$cshowsPrec1
        0# ww1_s89BC ww2_s89BD (GHC.Types.[] @ Char)
      }

-- RHS size: {terms: 10, types: 5, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowNewlineMode1 :: NewlineMode -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U(1*U,1*U)><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 0] 60 0}]
GHC.IO.Handle.Types.$fShowNewlineMode1
  = \ (w_s89Bu :: NewlineMode) (w1_s89Bv :: String) ->
      case w_s89Bu of { NewlineMode ww1_s89BC ww2_s89BD ->
      GHC.IO.Handle.Types.$w$cshowsPrec1 0# ww1_s89BC ww2_s89BD w1_s89Bv
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowNewlineMode_$cshowList
  :: [NewlineMode] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7JaB [Occ=Once] :: [NewlineMode])
                 (s_i7JaC [Occ=Once] :: String) ->
                 showList__
                   @ NewlineMode
                   GHC.IO.Handle.Types.$fShowNewlineMode1
                   ls_i7JaB
                   s_i7JaC}]
GHC.IO.Handle.Types.$fShowNewlineMode_$cshowList
  = \ (ls_i7JaB :: [NewlineMode]) (s_i7JaC :: String) ->
      showList__
        @ NewlineMode
        GHC.IO.Handle.Types.$fShowNewlineMode1
        ls_i7JaB
        s_i7JaC

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowNewlineMode [InlPrag=NOUSERINLINE CONLIKE]
  :: Show NewlineMode
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: NewlineMode
                       GHC.IO.Handle.Types.$fShowNewlineMode_$cshowsPrec
                       GHC.IO.Handle.Types.$fShowNewlineMode_$cshow
                       GHC.IO.Handle.Types.$fShowNewlineMode_$cshowList]
GHC.IO.Handle.Types.$fShowNewlineMode
  = GHC.Show.C:Show
      @ NewlineMode
      GHC.IO.Handle.Types.$fShowNewlineMode_$cshowsPrec
      GHC.IO.Handle.Types.$fShowNewlineMode_$cshow
      GHC.IO.Handle.Types.$fShowNewlineMode_$cshowList

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewline9
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (Newline -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_i816N)
                 (k_i816O [Occ=Once!]
                    :: Newline -> Text.ParserCombinators.ReadP.P b_i816N) ->
                 k_i816O GHC.IO.Handle.Types.LF}]
GHC.IO.Handle.Types.$fReadNewline9
  = \ _ [Occ=Dead]
      (@ b_i816N)
      (k_i816O :: Newline -> Text.ParserCombinators.ReadP.P b_i816N) ->
      k_i816O GHC.IO.Handle.Types.LF

-- RHS size: {terms: 3, types: 4, coercions: 9, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewline8
  :: ([Char], Text.ParserCombinators.ReadPrec.ReadPrec Newline)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Handle.Types.$fReadNewline8
  = (GHC.IO.Handle.Types.$fReadNewline10,
     GHC.IO.Handle.Types.$fReadNewline9
     `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                            <Newline>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                     <Newline>_R)
             :: (Text.ParserCombinators.ReadPrec.Prec
                 -> forall b.
                    (Newline -> Text.ParserCombinators.ReadP.P b)
                    -> Text.ParserCombinators.ReadP.P b :: *)
                ~R# (Text.ParserCombinators.ReadPrec.ReadPrec Newline :: *)))

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewline5
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (Newline -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_i816N)
                 (k_i816O [Occ=Once!]
                    :: Newline -> Text.ParserCombinators.ReadP.P b_i816N) ->
                 k_i816O GHC.IO.Handle.Types.CRLF}]
GHC.IO.Handle.Types.$fReadNewline5
  = \ _ [Occ=Dead]
      (@ b_i816N)
      (k_i816O :: Newline -> Text.ParserCombinators.ReadP.P b_i816N) ->
      k_i816O GHC.IO.Handle.Types.CRLF

-- RHS size: {terms: 3, types: 4, coercions: 9, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewline4
  :: ([Char], Text.ParserCombinators.ReadPrec.ReadPrec Newline)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Handle.Types.$fReadNewline4
  = (GHC.IO.Handle.Types.$fReadNewline6,
     GHC.IO.Handle.Types.$fReadNewline5
     `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                            <Newline>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                     <Newline>_R)
             :: (Text.ParserCombinators.ReadPrec.Prec
                 -> forall b.
                    (Newline -> Text.ParserCombinators.ReadP.P b)
                    -> Text.ParserCombinators.ReadP.P b :: *)
                ~R# (Text.ParserCombinators.ReadPrec.ReadPrec Newline :: *)))

-- RHS size: {terms: 3, types: 8, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewline3
  :: [(String, Text.ParserCombinators.ReadPrec.ReadPrec Newline)]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Handle.Types.$fReadNewline3
  = GHC.Types.:
      @ (String, Text.ParserCombinators.ReadPrec.ReadPrec Newline)
      GHC.IO.Handle.Types.$fReadNewline4
      (GHC.Types.[]
         @ (String, Text.ParserCombinators.ReadPrec.ReadPrec Newline))

-- RHS size: {terms: 3, types: 4, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewline_sps
  :: [(String, Text.ParserCombinators.ReadPrec.ReadPrec Newline)]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Handle.Types.$fReadNewline_sps
  = GHC.Types.:
      @ (String, Text.ParserCombinators.ReadPrec.ReadPrec Newline)
      GHC.IO.Handle.Types.$fReadNewline8
      GHC.IO.Handle.Types.$fReadNewline3

-- RHS size: {terms: 4, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewline2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP Newline
[GblId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (eta_i816r [Occ=Once]
                    :: Text.ParserCombinators.ReadPrec.Prec) ->
                 GHC.Read.choose2
                   @ Newline GHC.IO.Handle.Types.$fReadNewline_sps eta_i816r}]
GHC.IO.Handle.Types.$fReadNewline2
  = \ (eta_i816r :: Text.ParserCombinators.ReadPrec.Prec) ->
      GHC.Read.choose2
        @ Newline GHC.IO.Handle.Types.$fReadNewline_sps eta_i816r

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewline1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (Newline -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.IO.Handle.Types.$fReadNewline1
  = GHC.Read.list3
      @ Newline
      (GHC.IO.Handle.Types.$fReadNewline2
       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <Newline>_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> Text.ParserCombinators.ReadP.ReadP Newline :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec Newline :: *)))

-- RHS size: {terms: 6, types: 5, coercions: 3, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewline_$creadsPrec
  :: Int -> ReadS Newline
[GblId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_i8156 [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Newline
                   (GHC.Read.list3
                      @ Newline
                      (GHC.IO.Handle.Types.$fReadNewline2
                       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                        <Newline>_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> Text.ParserCombinators.ReadP.ReadP Newline :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec Newline :: *)))
                      n_i8156
                      @ Newline
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ Newline))}]
GHC.IO.Handle.Types.$fReadNewline_$creadsPrec
  = \ (n_i8156 :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ Newline
        (GHC.Read.list3
           @ Newline
           (GHC.IO.Handle.Types.$fReadNewline2
            `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Newline>_R)
                    :: (Text.ParserCombinators.ReadPrec.Prec
                        -> Text.ParserCombinators.ReadP.ReadP Newline :: *)
                       ~R# (Text.ParserCombinators.ReadPrec.ReadPrec Newline :: *)))
           n_i8156
           @ Newline
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ Newline))

-- RHS size: {terms: 2, types: 1, coercions: 9, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewline_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [Newline]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.Types.$fReadNewline_$creadListPrec
  = list
      @ Newline
      (GHC.IO.Handle.Types.$fReadNewline1
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Newline>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                       <Newline>_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      (Newline -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec Newline :: *)))

-- RHS size: {terms: 3, types: 4, coercions: 6, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewline12
  :: Text.ParserCombinators.ReadP.P [Newline]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Handle.Types.$fReadNewline12
  = (((GHC.IO.Handle.Types.$fReadNewline_$creadListPrec
       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <[Newline]>_R
               :: (Text.ParserCombinators.ReadPrec.ReadPrec [Newline] :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.Prec
                       -> Text.ParserCombinators.ReadP.ReadP [Newline] :: *)))
        GHC.Read.$fRead()7)
     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[Newline]>_R
             :: (Text.ParserCombinators.ReadP.ReadP [Newline] :: *)
                ~R# (forall b.
                     ([Newline] -> Text.ParserCombinators.ReadP.P b)
                     -> Text.ParserCombinators.ReadP.P b :: *)))
      @ [Newline]
      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ [Newline])

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewline_$creadList :: ReadS [Newline]
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.IO.Handle.Types.$fReadNewline_$creadList
  = Text.ParserCombinators.ReadP.run
      @ [Newline] GHC.IO.Handle.Types.$fReadNewline12

-- RHS size: {terms: 5, types: 1, coercions: 9, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewline [InlPrag=NOUSERINLINE CONLIKE]
  :: Read Newline
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: Newline
                       GHC.IO.Handle.Types.$fReadNewline_$creadsPrec
                       GHC.IO.Handle.Types.$fReadNewline_$creadList
                       GHC.IO.Handle.Types.$fReadNewline1
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Newline>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                       <Newline>_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      (Newline -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec Newline :: *))
                       GHC.IO.Handle.Types.$fReadNewline_$creadListPrec]
GHC.IO.Handle.Types.$fReadNewline
  = GHC.Read.C:Read
      @ Newline
      GHC.IO.Handle.Types.$fReadNewline_$creadsPrec
      GHC.IO.Handle.Types.$fReadNewline_$creadList
      (GHC.IO.Handle.Types.$fReadNewline1
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Newline>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                       <Newline>_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      (Newline -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec Newline :: *)))
      GHC.IO.Handle.Types.$fReadNewline_$creadListPrec

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewlineMode17 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Handle.Types.$fReadNewlineMode17 = "NewlineMode"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewlineMode16 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.Types.$fReadNewlineMode16
  = unpackCString# GHC.IO.Handle.Types.$fReadNewlineMode17

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewlineMode_lexeme1
  :: Text.Read.Lex.Lexeme
[GblId,
 Str=m4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Types.$fReadNewlineMode_lexeme1
  = Text.Read.Lex.Ident GHC.IO.Handle.Types.$fReadNewlineMode16

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewlineMode15 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.Types.$fReadNewlineMode15 = "{"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewlineMode14 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.Types.$fReadNewlineMode14
  = unpackCString# GHC.IO.Handle.Types.$fReadNewlineMode15

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewlineMode_lexeme
  :: Text.Read.Lex.Lexeme
[GblId,
 Str=m3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Types.$fReadNewlineMode_lexeme
  = Text.Read.Lex.Punc GHC.IO.Handle.Types.$fReadNewlineMode14

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewlineMode13 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Handle.Types.$fReadNewlineMode13 = "inputNL"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewlineMode12 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.Types.$fReadNewlineMode12
  = unpackCString# GHC.IO.Handle.Types.$fReadNewlineMode13

-- RHS size: {terms: 7, types: 8, coercions: 3, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewlineMode11
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (Newline -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<L,A><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_i815e)
                 (eta_B1 [Occ=Once]
                    :: Newline -> Text.ParserCombinators.ReadP.P b_i815e) ->
                 GHC.Read.list3
                   @ Newline
                   (GHC.IO.Handle.Types.$fReadNewline2
                    `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                     <Newline>_R)
                            :: (Text.ParserCombinators.ReadPrec.Prec
                                -> Text.ParserCombinators.ReadP.ReadP Newline :: *)
                               ~R# (Text.ParserCombinators.ReadPrec.ReadPrec Newline :: *)))
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ b_i815e
                   eta_B1}]
GHC.IO.Handle.Types.$fReadNewlineMode11
  = \ _ [Occ=Dead]
      (@ b_i815e)
      (eta_B1 :: Newline -> Text.ParserCombinators.ReadP.P b_i815e) ->
      GHC.Read.list3
        @ Newline
        (GHC.IO.Handle.Types.$fReadNewline2
         `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Newline>_R)
                 :: (Text.ParserCombinators.ReadPrec.Prec
                     -> Text.ParserCombinators.ReadP.ReadP Newline :: *)
                    ~R# (Text.ParserCombinators.ReadPrec.ReadPrec Newline :: *)))
        Text.ParserCombinators.ReadPrec.minPrec
        @ b_i815e
        eta_B1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadBufferMode_n
  :: Text.ParserCombinators.ReadPrec.Prec
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Types.$fReadBufferMode_n = GHC.Types.I# 11#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewlineMode10 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.Types.$fReadNewlineMode10 = ","#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewlineMode9 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.Types.$fReadNewlineMode9
  = unpackCString# GHC.IO.Handle.Types.$fReadNewlineMode10

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewlineMode8 :: Text.Read.Lex.Lexeme
[GblId,
 Str=m3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Types.$fReadNewlineMode8
  = Text.Read.Lex.Punc GHC.IO.Handle.Types.$fReadNewlineMode9

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewlineMode7 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Handle.Types.$fReadNewlineMode7 = "outputNL"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewlineMode6 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.Types.$fReadNewlineMode6
  = unpackCString# GHC.IO.Handle.Types.$fReadNewlineMode7

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewlineMode4 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.Types.$fReadNewlineMode4
  = unpackCString# GHC.IO.Handle.Types.$fReadNewlineMode5

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewlineMode3 :: Text.Read.Lex.Lexeme
[GblId,
 Str=m3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Types.$fReadNewlineMode3
  = Text.Read.Lex.Punc GHC.IO.Handle.Types.$fReadNewlineMode4

-- RHS size: {terms: 52, types: 58, coercions: 26, joins: 0/0}
GHC.IO.Handle.Types.$w$creadPrec [InlPrag=NOUSERINLINE[0]]
  :: Int#
     -> forall b.
        (NewlineMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<S,U><L,C(U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 60] 411 30}]
GHC.IO.Handle.Types.$w$creadPrec
  = \ (ww_s89BL :: Int#)
      (@ b_s89BH)
      (w_s89BI
         :: NewlineMode -> Text.ParserCombinators.ReadP.P b_s89BH) ->
      case <=# ww_s89BL 11# of {
        __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b_s89BH;
        1# ->
          case Text.Read.Lex.$wexpect
                 GHC.IO.Handle.Types.$fReadNewlineMode_lexeme1
                 @ b_s89BH
                 (\ _ [Occ=Dead, OS=OneShot] ->
                    case Text.Read.Lex.$wexpect
                           GHC.IO.Handle.Types.$fReadNewlineMode_lexeme
                           @ b_s89BH
                           (\ _ [Occ=Dead, OS=OneShot] ->
                              ((((readField
                                    @ Newline
                                    GHC.IO.Handle.Types.$fReadNewlineMode12
                                    (GHC.IO.Handle.Types.$fReadNewlineMode11
                                     `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                            <Newline>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                     <Newline>_R)
                                             :: (Text.ParserCombinators.ReadPrec.Prec
                                                 -> forall b.
                                                    (Newline -> Text.ParserCombinators.ReadP.P b)
                                                    -> Text.ParserCombinators.ReadP.P b :: *)
                                                ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                                                       Newline :: *))))
                                 `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <Newline>_R
                                         :: (Text.ParserCombinators.ReadPrec.ReadPrec Newline :: *)
                                            ~R# (Text.ParserCombinators.ReadPrec.Prec
                                                 -> Text.ParserCombinators.ReadP.ReadP
                                                      Newline :: *)))
                                  GHC.IO.Handle.Types.$fReadBufferMode_n)
                               `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <Newline>_R
                                       :: (Text.ParserCombinators.ReadP.ReadP Newline :: *)
                                          ~R# (forall b.
                                               (Newline -> Text.ParserCombinators.ReadP.P b)
                                               -> Text.ParserCombinators.ReadP.P b :: *)))
                                @ b_s89BH
                                (\ (a3_i88WJ :: Newline) ->
                                   case Text.Read.Lex.$wexpect
                                          GHC.IO.Handle.Types.$fReadNewlineMode8
                                          @ b_s89BH
                                          (\ _ [Occ=Dead, OS=OneShot] ->
                                             ((((readField
                                                   @ Newline
                                                   GHC.IO.Handle.Types.$fReadNewlineMode6
                                                   (GHC.IO.Handle.Types.$fReadNewlineMode11
                                                    `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                           <Newline>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                                    <Newline>_R)
                                                            :: (Text.ParserCombinators.ReadPrec.Prec
                                                                -> forall b.
                                                                   (Newline
                                                                    -> Text.ParserCombinators.ReadP.P
                                                                         b)
                                                                   -> Text.ParserCombinators.ReadP.P
                                                                        b :: *)
                                                               ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                                                                      Newline :: *))))
                                                `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                            <Newline>_R
                                                        :: (Text.ParserCombinators.ReadPrec.ReadPrec
                                                              Newline :: *)
                                                           ~R# (Text.ParserCombinators.ReadPrec.Prec
                                                                -> Text.ParserCombinators.ReadP.ReadP
                                                                     Newline :: *)))
                                                 GHC.IO.Handle.Types.$fReadBufferMode_n)
                                              `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                          <Newline>_R
                                                      :: (Text.ParserCombinators.ReadP.ReadP
                                                            Newline :: *)
                                                         ~R# (forall b.
                                                              (Newline
                                                               -> Text.ParserCombinators.ReadP.P b)
                                                              -> Text.ParserCombinators.ReadP.P
                                                                   b :: *)))
                                               @ b_s89BH
                                               (\ (a5_X890O :: Newline) ->
                                                  case Text.Read.Lex.$wexpect
                                                         GHC.IO.Handle.Types.$fReadNewlineMode3
                                                         @ b_s89BH
                                                         (\ _ [Occ=Dead, OS=OneShot] ->
                                                            w_s89BI
                                                              (GHC.IO.Handle.Types.NewlineMode
                                                                 a3_i88WJ a5_X890O))
                                                  of
                                                  { (# ww2_i88Ww #) ->
                                                  Text.ParserCombinators.ReadP.Look
                                                    @ b_s89BH ww2_i88Ww
                                                  }))
                                   of
                                   { (# ww2_i88Ww #) ->
                                   Text.ParserCombinators.ReadP.Look @ b_s89BH ww2_i88Ww
                                   }))
                    of
                    { (# ww2_i88Ww #) ->
                    Text.ParserCombinators.ReadP.Look @ b_s89BH ww2_i88Ww
                    })
          of
          { (# ww2_i88Ww #) ->
          Text.ParserCombinators.ReadP.Look @ b_s89BH ww2_i88Ww
          }
      }

-- RHS size: {terms: 9, types: 9, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewlineMode2 [InlPrag=NOUSERINLINE[0]]
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (NewlineMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><L,C(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s89BG [Occ=Once!]
                    :: Text.ParserCombinators.ReadPrec.Prec)
                 (@ b_s89BH)
                 (w1_s89BI [Occ=Once]
                    :: NewlineMode -> Text.ParserCombinators.ReadP.P b_s89BH) ->
                 case w_s89BG of { I# ww1_s89BL [Occ=Once] ->
                 GHC.IO.Handle.Types.$w$creadPrec ww1_s89BL @ b_s89BH w1_s89BI
                 }}]
GHC.IO.Handle.Types.$fReadNewlineMode2
  = \ (w_s89BG :: Text.ParserCombinators.ReadPrec.Prec)
      (@ b_s89BH)
      (w1_s89BI
         :: NewlineMode -> Text.ParserCombinators.ReadP.P b_s89BH) ->
      case w_s89BG of { I# ww1_s89BL ->
      GHC.IO.Handle.Types.$w$creadPrec ww1_s89BL @ b_s89BH w1_s89BI
      }

-- RHS size: {terms: 2, types: 1, coercions: 9, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewlineMode1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (NewlineMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.IO.Handle.Types.$fReadNewlineMode1
  = GHC.Read.list3
      @ NewlineMode
      (GHC.IO.Handle.Types.$fReadNewlineMode2
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <NewlineMode>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <NewlineMode>_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      (NewlineMode -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec NewlineMode :: *)))

-- RHS size: {terms: 6, types: 5, coercions: 9, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewlineMode_$creadsPrec
  :: Int -> ReadS NewlineMode
[GblId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_i8156 [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ NewlineMode
                   (GHC.Read.list3
                      @ NewlineMode
                      (GHC.IO.Handle.Types.$fReadNewlineMode2
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <NewlineMode>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                           <NewlineMode>_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      (NewlineMode -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec NewlineMode :: *)))
                      n_i8156
                      @ NewlineMode
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ NewlineMode))}]
GHC.IO.Handle.Types.$fReadNewlineMode_$creadsPrec
  = \ (n_i8156 :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ NewlineMode
        (GHC.Read.list3
           @ NewlineMode
           (GHC.IO.Handle.Types.$fReadNewlineMode2
            `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <NewlineMode>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                <NewlineMode>_R)
                    :: (Text.ParserCombinators.ReadPrec.Prec
                        -> forall b.
                           (NewlineMode -> Text.ParserCombinators.ReadP.P b)
                           -> Text.ParserCombinators.ReadP.P b :: *)
                       ~R# (Text.ParserCombinators.ReadPrec.ReadPrec NewlineMode :: *)))
           n_i8156
           @ NewlineMode
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ NewlineMode))

-- RHS size: {terms: 2, types: 1, coercions: 9, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewlineMode_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [NewlineMode]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.Types.$fReadNewlineMode_$creadListPrec
  = list
      @ NewlineMode
      (GHC.IO.Handle.Types.$fReadNewlineMode1
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <NewlineMode>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <NewlineMode>_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      (NewlineMode -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec NewlineMode :: *)))

-- RHS size: {terms: 3, types: 4, coercions: 6, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewlineMode18
  :: Text.ParserCombinators.ReadP.P [NewlineMode]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Handle.Types.$fReadNewlineMode18
  = (((GHC.IO.Handle.Types.$fReadNewlineMode_$creadListPrec
       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                   <[NewlineMode]>_R
               :: (Text.ParserCombinators.ReadPrec.ReadPrec [NewlineMode] :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.Prec
                       -> Text.ParserCombinators.ReadP.ReadP [NewlineMode] :: *)))
        GHC.Read.$fRead()7)
     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[NewlineMode]>_R
             :: (Text.ParserCombinators.ReadP.ReadP [NewlineMode] :: *)
                ~R# (forall b.
                     ([NewlineMode] -> Text.ParserCombinators.ReadP.P b)
                     -> Text.ParserCombinators.ReadP.P b :: *)))
      @ [NewlineMode]
      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
         @ [NewlineMode])

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewlineMode_$creadList
  :: ReadS [NewlineMode]
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.IO.Handle.Types.$fReadNewlineMode_$creadList
  = Text.ParserCombinators.ReadP.run
      @ [NewlineMode] GHC.IO.Handle.Types.$fReadNewlineMode18

-- RHS size: {terms: 5, types: 1, coercions: 9, joins: 0/0}
GHC.IO.Handle.Types.$fReadNewlineMode [InlPrag=NOUSERINLINE CONLIKE]
  :: Read NewlineMode
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: NewlineMode
                       GHC.IO.Handle.Types.$fReadNewlineMode_$creadsPrec
                       GHC.IO.Handle.Types.$fReadNewlineMode_$creadList
                       GHC.IO.Handle.Types.$fReadNewlineMode1
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <NewlineMode>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                           <NewlineMode>_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      (NewlineMode -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec NewlineMode :: *))
                       GHC.IO.Handle.Types.$fReadNewlineMode_$creadListPrec]
GHC.IO.Handle.Types.$fReadNewlineMode
  = GHC.Read.C:Read
      @ NewlineMode
      GHC.IO.Handle.Types.$fReadNewlineMode_$creadsPrec
      GHC.IO.Handle.Types.$fReadNewlineMode_$creadList
      (GHC.IO.Handle.Types.$fReadNewlineMode1
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <NewlineMode>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <NewlineMode>_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      (NewlineMode -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec NewlineMode :: *)))
      GHC.IO.Handle.Types.$fReadNewlineMode_$creadListPrec

-- RHS size: {terms: 16, types: 5, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fOrdNewline_$c< :: Newline -> Newline -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (a_a88CN [Occ=Once!] :: Newline)
                 (b_a88CO [Occ=Once*] :: Newline) ->
                 case a_a88CN of {
                   LF ->
                     case b_a88CO of {
                       LF -> GHC.Types.False;
                       CRLF -> GHC.Types.True
                     };
                   CRLF -> case b_a88CO of { __DEFAULT -> GHC.Types.False }
                 }}]
GHC.IO.Handle.Types.$fOrdNewline_$c<
  = \ (a_a88CN :: Newline) (b_a88CO :: Newline) ->
      case a_a88CN of {
        LF ->
          case b_a88CO of {
            LF -> GHC.Types.False;
            CRLF -> GHC.Types.True
          };
        CRLF -> case b_a88CO of { __DEFAULT -> GHC.Types.False }
      }

-- RHS size: {terms: 18, types: 5, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fOrdNewline_$ccompare
  :: Newline -> Newline -> Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (a_a88CL [Occ=Once!] :: Newline)
                 (b_a88CM [Occ=Once*!] :: Newline) ->
                 case a_a88CL of {
                   LF ->
                     case b_a88CM of {
                       LF -> GHC.Types.EQ;
                       CRLF -> GHC.Types.LT
                     };
                   CRLF ->
                     case b_a88CM of {
                       LF -> GHC.Types.GT;
                       CRLF -> GHC.Types.EQ
                     }
                 }}]
GHC.IO.Handle.Types.$fOrdNewline_$ccompare
  = \ (a_a88CL :: Newline) (b_a88CM :: Newline) ->
      case a_a88CL of {
        LF ->
          case b_a88CM of {
            LF -> GHC.Types.EQ;
            CRLF -> GHC.Types.LT
          };
        CRLF ->
          case b_a88CM of {
            LF -> GHC.Types.GT;
            CRLF -> GHC.Types.EQ
          }
      }

-- RHS size: {terms: 18, types: 5, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fEqNewline_$c== :: Newline -> Newline -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d88RT [Occ=Once!] :: Newline)
                 (ds1_d88RU [Occ=Once*!] :: Newline) ->
                 case ds_d88RT of {
                   LF ->
                     case ds1_d88RU of {
                       LF -> GHC.Types.True;
                       CRLF -> GHC.Types.False
                     };
                   CRLF ->
                     case ds1_d88RU of {
                       LF -> GHC.Types.False;
                       CRLF -> GHC.Types.True
                     }
                 }}]
GHC.IO.Handle.Types.$fEqNewline_$c==
  = \ (ds_d88RT :: Newline) (ds1_d88RU :: Newline) ->
      case ds_d88RT of {
        LF ->
          case ds1_d88RU of {
            LF -> GHC.Types.True;
            CRLF -> GHC.Types.False
          };
        CRLF ->
          case ds1_d88RU of {
            LF -> GHC.Types.False;
            CRLF -> GHC.Types.True
          }
      }

-- RHS size: {terms: 18, types: 5, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fEqNewline_$c/= [InlPrag=INLINE (sat-args=2)]
  :: Newline -> Newline -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=False)
         Tmpl= \ (x_a22b [Occ=Once!] :: Newline)
                 (y_a22c [Occ=Once*!] :: Newline) ->
                 case x_a22b of {
                   LF ->
                     case y_a22c of {
                       LF -> GHC.Types.False;
                       CRLF -> GHC.Types.True
                     };
                   CRLF ->
                     case y_a22c of {
                       LF -> GHC.Types.True;
                       CRLF -> GHC.Types.False
                     }
                 }}]
GHC.IO.Handle.Types.$fEqNewline_$c/=
  = \ (eta_B2 :: Newline) (eta1_B1 :: Newline) ->
      case eta_B2 of {
        LF ->
          case eta1_B1 of {
            LF -> GHC.Types.False;
            CRLF -> GHC.Types.True
          };
        CRLF ->
          case eta1_B1 of {
            LF -> GHC.Types.True;
            CRLF -> GHC.Types.False
          }
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fEqNewline [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq Newline
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: Newline
                        GHC.IO.Handle.Types.$fEqNewline_$c==
                        GHC.IO.Handle.Types.$fEqNewline_$c/=]
GHC.IO.Handle.Types.$fEqNewline
  = GHC.Classes.C:Eq
      @ Newline
      GHC.IO.Handle.Types.$fEqNewline_$c==
      GHC.IO.Handle.Types.$fEqNewline_$c/=

-- RHS size: {terms: 16, types: 5, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fOrdNewline_$c<= :: Newline -> Newline -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (a_a88CP [Occ=Once*] :: Newline)
                 (b_a88CQ [Occ=Once!] :: Newline) ->
                 case b_a88CQ of {
                   LF ->
                     case a_a88CP of {
                       LF -> GHC.Types.True;
                       CRLF -> GHC.Types.False
                     };
                   CRLF -> case a_a88CP of { __DEFAULT -> GHC.Types.True }
                 }}]
GHC.IO.Handle.Types.$fOrdNewline_$c<=
  = \ (a_a88CP :: Newline) (b_a88CQ :: Newline) ->
      case b_a88CQ of {
        LF ->
          case a_a88CP of {
            LF -> GHC.Types.True;
            CRLF -> GHC.Types.False
          };
        CRLF -> case a_a88CP of { __DEFAULT -> GHC.Types.True }
      }

-- RHS size: {terms: 11, types: 4, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fOrdNewline_$cmax
  :: Newline -> Newline -> Newline
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_a55d [Occ=Once*] :: Newline)
                 (y_a55e [Occ=Once!] :: Newline) ->
                 case y_a55e of {
                   LF -> x_a55d;
                   CRLF -> case x_a55d of { __DEFAULT -> GHC.IO.Handle.Types.CRLF }
                 }}]
GHC.IO.Handle.Types.$fOrdNewline_$cmax
  = \ (x_a55d :: Newline) (y_a55e :: Newline) ->
      case y_a55e of {
        LF -> x_a55d;
        CRLF -> case x_a55d of { __DEFAULT -> GHC.IO.Handle.Types.CRLF }
      }

-- RHS size: {terms: 16, types: 5, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fOrdNewline_$c>= :: Newline -> Newline -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (a_a88CT [Occ=Once!] :: Newline)
                 (b_a88CU [Occ=Once*] :: Newline) ->
                 case a_a88CT of {
                   LF ->
                     case b_a88CU of {
                       LF -> GHC.Types.True;
                       CRLF -> GHC.Types.False
                     };
                   CRLF -> case b_a88CU of { __DEFAULT -> GHC.Types.True }
                 }}]
GHC.IO.Handle.Types.$fOrdNewline_$c>=
  = \ (a_a88CT :: Newline) (b_a88CU :: Newline) ->
      case a_a88CT of {
        LF ->
          case b_a88CU of {
            LF -> GHC.Types.True;
            CRLF -> GHC.Types.False
          };
        CRLF -> case b_a88CU of { __DEFAULT -> GHC.Types.True }
      }

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fOrdNewline_$c> :: Newline -> Newline -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (a_a88CR [Occ=Once] :: Newline)
                 (b_a88CS [Occ=Once] :: Newline) ->
                 GHC.IO.Handle.Types.$fOrdNewline_$c< b_a88CS a_a88CR}]
GHC.IO.Handle.Types.$fOrdNewline_$c>
  = \ (a_a88CR :: Newline) (b_a88CS :: Newline) ->
      GHC.IO.Handle.Types.$fOrdNewline_$c< b_a88CS a_a88CR

-- RHS size: {terms: 11, types: 4, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fOrdNewline_$cmin
  :: Newline -> Newline -> Newline
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_a55m [Occ=Once*] :: Newline)
                 (y_a55n [Occ=Once!] :: Newline) ->
                 case y_a55n of {
                   LF -> case x_a55m of { __DEFAULT -> GHC.IO.Handle.Types.LF };
                   CRLF -> x_a55m
                 }}]
GHC.IO.Handle.Types.$fOrdNewline_$cmin
  = \ (x_a55m :: Newline) (y_a55n :: Newline) ->
      case y_a55n of {
        LF -> case x_a55m of { __DEFAULT -> GHC.IO.Handle.Types.LF };
        CRLF -> x_a55m
      }

-- RHS size: {terms: 9, types: 1, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fOrdNewline [InlPrag=NOUSERINLINE CONLIKE]
  :: Ord Newline
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Ord TYPE: Newline
                         GHC.IO.Handle.Types.$fEqNewline
                         GHC.IO.Handle.Types.$fOrdNewline_$ccompare
                         GHC.IO.Handle.Types.$fOrdNewline_$c<
                         GHC.IO.Handle.Types.$fOrdNewline_$c<=
                         GHC.IO.Handle.Types.$fOrdNewline_$c>
                         GHC.IO.Handle.Types.$fOrdNewline_$c>=
                         GHC.IO.Handle.Types.$fOrdNewline_$cmax
                         GHC.IO.Handle.Types.$fOrdNewline_$cmin]
GHC.IO.Handle.Types.$fOrdNewline
  = GHC.Classes.C:Ord
      @ Newline
      GHC.IO.Handle.Types.$fEqNewline
      GHC.IO.Handle.Types.$fOrdNewline_$ccompare
      GHC.IO.Handle.Types.$fOrdNewline_$c<
      GHC.IO.Handle.Types.$fOrdNewline_$c<=
      GHC.IO.Handle.Types.$fOrdNewline_$c>
      GHC.IO.Handle.Types.$fOrdNewline_$c>=
      GHC.IO.Handle.Types.$fOrdNewline_$cmax
      GHC.IO.Handle.Types.$fOrdNewline_$cmin

-- RHS size: {terms: 24, types: 7, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$w$ccompare [InlPrag=NOUSERINLINE[0]]
  :: Newline -> Newline -> Newline -> Newline -> Ordering
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U><S,1*U><L,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [80 0 60 0] 120 20}]
GHC.IO.Handle.Types.$w$ccompare
  = \ (ww_s89BS :: Newline)
      (ww1_s89BT :: Newline)
      (ww2_s89BX :: Newline)
      (ww3_s89BY :: Newline) ->
      case ww_s89BS of {
        LF ->
          case ww2_s89BX of {
            LF ->
              GHC.IO.Handle.Types.$fOrdNewline_$ccompare ww1_s89BT ww3_s89BY;
            CRLF -> GHC.Types.LT
          };
        CRLF ->
          case ww2_s89BX of {
            LF -> GHC.Types.GT;
            CRLF ->
              GHC.IO.Handle.Types.$fOrdNewline_$ccompare ww1_s89BT ww3_s89BY
          }
      }

-- RHS size: {terms: 13, types: 8, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fOrdNewlineMode_$ccompare [InlPrag=NOUSERINLINE[0]]
  :: NewlineMode -> NewlineMode -> Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s89BO [Occ=Once!] :: NewlineMode)
                 (w1_s89BP [Occ=Once!] :: NewlineMode) ->
                 case w_s89BO of
                 { NewlineMode ww1_s89BS [Occ=Once] ww2_s89BT [Occ=Once] ->
                 case w1_s89BP of
                 { NewlineMode ww4_s89BX [Occ=Once] ww5_s89BY [Occ=Once] ->
                 GHC.IO.Handle.Types.$w$ccompare
                   ww1_s89BS ww2_s89BT ww4_s89BX ww5_s89BY
                 }
                 }}]
GHC.IO.Handle.Types.$fOrdNewlineMode_$ccompare
  = \ (w_s89BO :: NewlineMode) (w1_s89BP :: NewlineMode) ->
      case w_s89BO of { NewlineMode ww1_s89BS ww2_s89BT ->
      case w1_s89BP of { NewlineMode ww4_s89BX ww5_s89BY ->
      GHC.IO.Handle.Types.$w$ccompare
        ww1_s89BS ww2_s89BT ww4_s89BX ww5_s89BY
      }
      }

-- RHS size: {terms: 24, types: 7, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$w$c< [InlPrag=NOUSERINLINE[0]]
  :: Newline -> Newline -> Newline -> Newline -> Bool
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U><S,1*U><L,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [80 0 60 0] 120 20}]
GHC.IO.Handle.Types.$w$c<
  = \ (ww_s89C5 :: Newline)
      (ww1_s89C6 :: Newline)
      (ww2_s89Ca :: Newline)
      (ww3_s89Cb :: Newline) ->
      case ww_s89C5 of {
        LF ->
          case ww2_s89Ca of {
            LF -> GHC.IO.Handle.Types.$fOrdNewline_$c< ww1_s89C6 ww3_s89Cb;
            CRLF -> GHC.Types.True
          };
        CRLF ->
          case ww2_s89Ca of {
            LF -> GHC.Types.False;
            CRLF -> GHC.IO.Handle.Types.$fOrdNewline_$c< ww1_s89C6 ww3_s89Cb
          }
      }

-- RHS size: {terms: 13, types: 8, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fOrdNewlineMode_$c< [InlPrag=NOUSERINLINE[0]]
  :: NewlineMode -> NewlineMode -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s89C1 [Occ=Once!] :: NewlineMode)
                 (w1_s89C2 [Occ=Once!] :: NewlineMode) ->
                 case w_s89C1 of
                 { NewlineMode ww1_s89C5 [Occ=Once] ww2_s89C6 [Occ=Once] ->
                 case w1_s89C2 of
                 { NewlineMode ww4_s89Ca [Occ=Once] ww5_s89Cb [Occ=Once] ->
                 GHC.IO.Handle.Types.$w$c< ww1_s89C5 ww2_s89C6 ww4_s89Ca ww5_s89Cb
                 }
                 }}]
GHC.IO.Handle.Types.$fOrdNewlineMode_$c<
  = \ (w_s89C1 :: NewlineMode) (w1_s89C2 :: NewlineMode) ->
      case w_s89C1 of { NewlineMode ww1_s89C5 ww2_s89C6 ->
      case w1_s89C2 of { NewlineMode ww4_s89Ca ww5_s89Cb ->
      GHC.IO.Handle.Types.$w$c< ww1_s89C5 ww2_s89C6 ww4_s89Ca ww5_s89Cb
      }
      }

-- RHS size: {terms: 24, types: 7, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$w$c== [InlPrag=NOUSERINLINE[0]]
  :: Newline -> Newline -> Newline -> Newline -> Bool
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U><S,1*U><L,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [80 0 60 0] 120 20}]
GHC.IO.Handle.Types.$w$c==
  = \ (ww_s89Ci :: Newline)
      (ww1_s89Cj :: Newline)
      (ww2_s89Cn :: Newline)
      (ww3_s89Co :: Newline) ->
      case ww_s89Ci of {
        LF ->
          case ww2_s89Cn of {
            LF -> GHC.IO.Handle.Types.$fEqNewline_$c== ww1_s89Cj ww3_s89Co;
            CRLF -> GHC.Types.False
          };
        CRLF ->
          case ww2_s89Cn of {
            LF -> GHC.Types.False;
            CRLF -> GHC.IO.Handle.Types.$fEqNewline_$c== ww1_s89Cj ww3_s89Co
          }
      }

-- RHS size: {terms: 13, types: 8, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fEqNewlineMode_$c== [InlPrag=NOUSERINLINE[0]]
  :: NewlineMode -> NewlineMode -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s89Ce [Occ=Once!] :: NewlineMode)
                 (w1_s89Cf [Occ=Once!] :: NewlineMode) ->
                 case w_s89Ce of
                 { NewlineMode ww1_s89Ci [Occ=Once] ww2_s89Cj [Occ=Once] ->
                 case w1_s89Cf of
                 { NewlineMode ww4_s89Cn [Occ=Once] ww5_s89Co [Occ=Once] ->
                 GHC.IO.Handle.Types.$w$c== ww1_s89Ci ww2_s89Cj ww4_s89Cn ww5_s89Co
                 }
                 }}]
GHC.IO.Handle.Types.$fEqNewlineMode_$c==
  = \ (w_s89Ce :: NewlineMode) (w1_s89Cf :: NewlineMode) ->
      case w_s89Ce of { NewlineMode ww1_s89Ci ww2_s89Cj ->
      case w1_s89Cf of { NewlineMode ww4_s89Cn ww5_s89Co ->
      GHC.IO.Handle.Types.$w$c== ww1_s89Ci ww2_s89Cj ww4_s89Cn ww5_s89Co
      }
      }

-- RHS size: {terms: 54, types: 17, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fEqNewlineMode_$c/= [InlPrag=INLINE (sat-args=2)]
  :: NewlineMode -> NewlineMode -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=False)
         Tmpl= \ (x_a22b [Occ=Once] :: NewlineMode)
                 (y_a22c [Occ=Once] :: NewlineMode) ->
                 case GHC.IO.Handle.Types.$fEqNewlineMode_$c== x_a22b y_a22c of {
                   False -> GHC.Types.True;
                   True -> GHC.Types.False
                 }}]
GHC.IO.Handle.Types.$fEqNewlineMode_$c/=
  = \ (eta_B2 :: NewlineMode) (eta1_B1 :: NewlineMode) ->
      case eta_B2 of { NewlineMode ww1_s89Ci ww2_s89Cj ->
      case eta1_B1 of { NewlineMode ww4_s89Cn ww5_s89Co ->
      case ww1_s89Ci of {
        LF ->
          case ww4_s89Cn of {
            LF ->
              case ww2_s89Cj of {
                LF ->
                  case ww5_s89Co of {
                    LF -> GHC.Types.False;
                    CRLF -> GHC.Types.True
                  };
                CRLF ->
                  case ww5_s89Co of {
                    LF -> GHC.Types.True;
                    CRLF -> GHC.Types.False
                  }
              };
            CRLF -> GHC.Types.True
          };
        CRLF ->
          case ww4_s89Cn of {
            LF -> GHC.Types.True;
            CRLF ->
              case ww2_s89Cj of {
                LF ->
                  case ww5_s89Co of {
                    LF -> GHC.Types.False;
                    CRLF -> GHC.Types.True
                  };
                CRLF ->
                  case ww5_s89Co of {
                    LF -> GHC.Types.True;
                    CRLF -> GHC.Types.False
                  }
              }
          }
      }
      }
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fEqNewlineMode [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq NewlineMode
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: NewlineMode
                        GHC.IO.Handle.Types.$fEqNewlineMode_$c==
                        GHC.IO.Handle.Types.$fEqNewlineMode_$c/=]
GHC.IO.Handle.Types.$fEqNewlineMode
  = GHC.Classes.C:Eq
      @ NewlineMode
      GHC.IO.Handle.Types.$fEqNewlineMode_$c==
      GHC.IO.Handle.Types.$fEqNewlineMode_$c/=

-- RHS size: {terms: 50, types: 17, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fOrdNewlineMode_$c<=
  :: NewlineMode -> NewlineMode -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (a_a88Db [Occ=Once] :: NewlineMode)
                 (b_a88Dc [Occ=Once] :: NewlineMode) ->
                 case GHC.IO.Handle.Types.$fOrdNewlineMode_$c< b_a88Dc a_a88Db of {
                   False -> GHC.Types.True;
                   True -> GHC.Types.False
                 }}]
GHC.IO.Handle.Types.$fOrdNewlineMode_$c<=
  = \ (a_a88Db :: NewlineMode) (b_a88Dc :: NewlineMode) ->
      case b_a88Dc of { NewlineMode ww1_s89C5 ww2_s89C6 ->
      case a_a88Db of { NewlineMode ww4_s89Ca ww5_s89Cb ->
      case ww1_s89C5 of {
        LF ->
          case ww4_s89Ca of {
            LF ->
              case ww2_s89C6 of {
                LF ->
                  case ww5_s89Cb of {
                    LF -> GHC.Types.True;
                    CRLF -> GHC.Types.False
                  };
                CRLF -> case ww5_s89Cb of { __DEFAULT -> GHC.Types.True }
              };
            CRLF -> GHC.Types.False
          };
        CRLF ->
          case ww4_s89Ca of {
            LF -> GHC.Types.True;
            CRLF ->
              case ww2_s89C6 of {
                LF ->
                  case ww5_s89Cb of {
                    LF -> GHC.Types.True;
                    CRLF -> GHC.Types.False
                  };
                CRLF -> case ww5_s89Cb of { __DEFAULT -> GHC.Types.True }
              }
          }
      }
      }
      }

-- RHS size: {terms: 50, types: 17, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fOrdNewlineMode_$cmax
  :: NewlineMode -> NewlineMode -> NewlineMode
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_a55d :: NewlineMode) (y_a55e :: NewlineMode) ->
                 case GHC.IO.Handle.Types.$fOrdNewlineMode_$c< y_a55e x_a55d of {
                   False -> y_a55e;
                   True -> x_a55d
                 }}]
GHC.IO.Handle.Types.$fOrdNewlineMode_$cmax
  = \ (x_a55d :: NewlineMode) (y_a55e :: NewlineMode) ->
      case y_a55e of ww_s89C4 { NewlineMode ww1_s89C5 ww2_s89C6 ->
      case x_a55d of ww3_s89C9 { NewlineMode ww4_s89Ca ww5_s89Cb ->
      case ww1_s89C5 of {
        LF ->
          case ww4_s89Ca of {
            LF ->
              case ww2_s89C6 of {
                LF ->
                  case ww5_s89Cb of {
                    LF -> ww_s89C4;
                    CRLF -> ww3_s89C9
                  };
                CRLF -> case ww5_s89Cb of { __DEFAULT -> ww_s89C4 }
              };
            CRLF -> ww3_s89C9
          };
        CRLF ->
          case ww4_s89Ca of {
            LF -> ww_s89C4;
            CRLF ->
              case ww2_s89C6 of {
                LF ->
                  case ww5_s89Cb of {
                    LF -> ww_s89C4;
                    CRLF -> ww3_s89C9
                  };
                CRLF -> case ww5_s89Cb of { __DEFAULT -> ww_s89C4 }
              }
          }
      }
      }
      }

-- RHS size: {terms: 50, types: 17, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fOrdNewlineMode_$c>=
  :: NewlineMode -> NewlineMode -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (a_a88Df [Occ=Once] :: NewlineMode)
                 (b_a88Dg [Occ=Once] :: NewlineMode) ->
                 case GHC.IO.Handle.Types.$fOrdNewlineMode_$c< a_a88Df b_a88Dg of {
                   False -> GHC.Types.True;
                   True -> GHC.Types.False
                 }}]
GHC.IO.Handle.Types.$fOrdNewlineMode_$c>=
  = \ (a_a88Df :: NewlineMode) (b_a88Dg :: NewlineMode) ->
      case a_a88Df of { NewlineMode ww1_s89C5 ww2_s89C6 ->
      case b_a88Dg of { NewlineMode ww4_s89Ca ww5_s89Cb ->
      case ww1_s89C5 of {
        LF ->
          case ww4_s89Ca of {
            LF ->
              case ww2_s89C6 of {
                LF ->
                  case ww5_s89Cb of {
                    LF -> GHC.Types.True;
                    CRLF -> GHC.Types.False
                  };
                CRLF -> case ww5_s89Cb of { __DEFAULT -> GHC.Types.True }
              };
            CRLF -> GHC.Types.False
          };
        CRLF ->
          case ww4_s89Ca of {
            LF -> GHC.Types.True;
            CRLF ->
              case ww2_s89C6 of {
                LF ->
                  case ww5_s89Cb of {
                    LF -> GHC.Types.True;
                    CRLF -> GHC.Types.False
                  };
                CRLF -> case ww5_s89Cb of { __DEFAULT -> GHC.Types.True }
              }
          }
      }
      }
      }

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fOrdNewlineMode_$c>
  :: NewlineMode -> NewlineMode -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (a_a88Dd [Occ=Once] :: NewlineMode)
                 (b_a88De [Occ=Once] :: NewlineMode) ->
                 GHC.IO.Handle.Types.$fOrdNewlineMode_$c< b_a88De a_a88Dd}]
GHC.IO.Handle.Types.$fOrdNewlineMode_$c>
  = \ (a_a88Dd :: NewlineMode) (b_a88De :: NewlineMode) ->
      GHC.IO.Handle.Types.$fOrdNewlineMode_$c< b_a88De a_a88Dd

-- RHS size: {terms: 50, types: 17, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fOrdNewlineMode_$cmin
  :: NewlineMode -> NewlineMode -> NewlineMode
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_a55m :: NewlineMode) (y_a55n :: NewlineMode) ->
                 case GHC.IO.Handle.Types.$fOrdNewlineMode_$c< y_a55n x_a55m of {
                   False -> x_a55m;
                   True -> y_a55n
                 }}]
GHC.IO.Handle.Types.$fOrdNewlineMode_$cmin
  = \ (x_a55m :: NewlineMode) (y_a55n :: NewlineMode) ->
      case y_a55n of ww_s89C4 { NewlineMode ww1_s89C5 ww2_s89C6 ->
      case x_a55m of ww3_s89C9 { NewlineMode ww4_s89Ca ww5_s89Cb ->
      case ww1_s89C5 of {
        LF ->
          case ww4_s89Ca of {
            LF ->
              case ww2_s89C6 of {
                LF ->
                  case ww5_s89Cb of {
                    LF -> ww3_s89C9;
                    CRLF -> ww_s89C4
                  };
                CRLF -> case ww5_s89Cb of { __DEFAULT -> ww3_s89C9 }
              };
            CRLF -> ww_s89C4
          };
        CRLF ->
          case ww4_s89Ca of {
            LF -> ww3_s89C9;
            CRLF ->
              case ww2_s89C6 of {
                LF ->
                  case ww5_s89Cb of {
                    LF -> ww3_s89C9;
                    CRLF -> ww_s89C4
                  };
                CRLF -> case ww5_s89Cb of { __DEFAULT -> ww3_s89C9 }
              }
          }
      }
      }
      }

-- RHS size: {terms: 9, types: 1, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fOrdNewlineMode [InlPrag=NOUSERINLINE CONLIKE]
  :: Ord NewlineMode
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Ord TYPE: NewlineMode
                         GHC.IO.Handle.Types.$fEqNewlineMode
                         GHC.IO.Handle.Types.$fOrdNewlineMode_$ccompare
                         GHC.IO.Handle.Types.$fOrdNewlineMode_$c<
                         GHC.IO.Handle.Types.$fOrdNewlineMode_$c<=
                         GHC.IO.Handle.Types.$fOrdNewlineMode_$c>
                         GHC.IO.Handle.Types.$fOrdNewlineMode_$c>=
                         GHC.IO.Handle.Types.$fOrdNewlineMode_$cmax
                         GHC.IO.Handle.Types.$fOrdNewlineMode_$cmin]
GHC.IO.Handle.Types.$fOrdNewlineMode
  = GHC.Classes.C:Ord
      @ NewlineMode
      GHC.IO.Handle.Types.$fEqNewlineMode
      GHC.IO.Handle.Types.$fOrdNewlineMode_$ccompare
      GHC.IO.Handle.Types.$fOrdNewlineMode_$c<
      GHC.IO.Handle.Types.$fOrdNewlineMode_$c<=
      GHC.IO.Handle.Types.$fOrdNewlineMode_$c>
      GHC.IO.Handle.Types.$fOrdNewlineMode_$c>=
      GHC.IO.Handle.Types.$fOrdNewlineMode_$cmax
      GHC.IO.Handle.Types.$fOrdNewlineMode_$cmin

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadBufferMode13 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Handle.Types.$fReadBufferMode13 = "NoBuffering"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadBufferMode12 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.Types.$fReadBufferMode12
  = unpackCString# GHC.IO.Handle.Types.$fReadBufferMode13

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowBufferMode6 :: [Char] -> [Char]
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.IO.Handle.Types.$fShowBufferMode6
  = ++ @ Char GHC.IO.Handle.Types.$fReadBufferMode12

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadBufferMode9 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Handle.Types.$fReadBufferMode9 = "LineBuffering"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadBufferMode8 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.Types.$fReadBufferMode8
  = unpackCString# GHC.IO.Handle.Types.$fReadBufferMode9

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowBufferMode5 :: [Char] -> [Char]
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.IO.Handle.Types.$fShowBufferMode5
  = ++ @ Char GHC.IO.Handle.Types.$fReadBufferMode8

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowBufferMode4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Handle.Types.$fShowBufferMode4 = "BlockBuffering "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowBufferMode3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.Types.$fShowBufferMode3
  = unpackCString# GHC.IO.Handle.Types.$fShowBufferMode4

-- RHS size: {terms: 37, types: 17, coercions: 0, joins: 0/1}
GHC.IO.Handle.Types.$fShowBufferMode_$cshowsPrec
  :: Int -> BufferMode -> ShowS
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 40] 251 240}]
GHC.IO.Handle.Types.$fShowBufferMode_$cshowsPrec
  = \ (ds_d88RJ :: Int) (ds1_d88RK :: BufferMode) ->
      case ds1_d88RK of {
        NoBuffering -> GHC.IO.Handle.Types.$fShowBufferMode6;
        LineBuffering -> GHC.IO.Handle.Types.$fShowBufferMode5;
        BlockBuffering b1_a88CK ->
          case ds_d88RJ of { I# x_alMY ->
          let {
            g_s897d [Dmd=<L,C(U)>] :: String -> String
            [LclId]
            g_s897d
              = GHC.Show.$fShowMaybe_$cshowsPrec
                  @ Int
                  GHC.Show.$fShowInt
                  GHC.IO.Handle.Types.$fReadBufferMode_n
                  b1_a88CK } in
          case >=# x_alMY 11# of {
            __DEFAULT ->
              \ (x1_i7Rxi :: String) ->
                ++ @ Char GHC.IO.Handle.Types.$fShowBufferMode3 (g_s897d x1_i7Rxi);
            1# ->
              \ (x1_i88RR :: String) ->
                GHC.Types.:
                  @ Char
                  GHC.Show.$fShow(,)4
                  (++
                     @ Char
                     GHC.IO.Handle.Types.$fShowBufferMode3
                     (g_s897d (GHC.Types.: @ Char GHC.Show.$fShow(,)2 x1_i88RR)))
          }
          }
      }

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowBufferMode7 :: [Char]
[GblId,
 Caf=NoCafRefs,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Handle.Types.$fShowBufferMode7
  = GHC.Types.: @ Char GHC.Show.$fShow(,)2 (GHC.Types.[] @ Char)

-- RHS size: {terms: 31, types: 22, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowBufferMode_$cshow :: BufferMode -> String
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [40] 190 0}]
GHC.IO.Handle.Types.$fShowBufferMode_$cshow
  = \ (x_i7Jay :: BufferMode) ->
      case x_i7Jay of {
        NoBuffering -> GHC.IO.Handle.Types.$fReadBufferMode12;
        LineBuffering -> GHC.IO.Handle.Types.$fReadBufferMode8;
        BlockBuffering b1_a88CK ->
          ++
            @ Char
            GHC.IO.Handle.Types.$fShowBufferMode3
            (case b1_a88CK of {
               Nothing -> GHC.Show.$fShowMaybe4;
               Just b2_i88XW ->
                 GHC.Types.:
                   @ Char
                   GHC.Show.$fShow(,)4
                   (++
                      @ Char
                      GHC.Show.$fShowMaybe1
                      (case b2_i88XW of { I# ww3_i7NVa ->
                       case GHC.Show.$wshowSignedInt
                              11# ww3_i7NVa GHC.IO.Handle.Types.$fShowBufferMode7
                       of
                       { (# ww5_i7NVe, ww6_i7NVf #) ->
                       GHC.Types.: @ Char ww5_i7NVe ww6_i7NVf
                       }
                       }))
             })
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowBufferMode1 :: BufferMode -> ShowS
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.IO.Handle.Types.$fShowBufferMode1
  = GHC.IO.Handle.Types.$fShowBufferMode_$cshowsPrec
      GHC.IO.Handle.Types.$fShowBufferMode2

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowBufferMode_$cshowList
  :: [BufferMode] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7JaB [Occ=Once] :: [BufferMode])
                 (s_i7JaC [Occ=Once] :: String) ->
                 showList__
                   @ BufferMode
                   GHC.IO.Handle.Types.$fShowBufferMode1
                   ls_i7JaB
                   s_i7JaC}]
GHC.IO.Handle.Types.$fShowBufferMode_$cshowList
  = \ (ls_i7JaB :: [BufferMode]) (s_i7JaC :: String) ->
      showList__
        @ BufferMode GHC.IO.Handle.Types.$fShowBufferMode1 ls_i7JaB s_i7JaC

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowBufferMode [InlPrag=NOUSERINLINE CONLIKE]
  :: Show BufferMode
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: BufferMode
                       GHC.IO.Handle.Types.$fShowBufferMode_$cshowsPrec
                       GHC.IO.Handle.Types.$fShowBufferMode_$cshow
                       GHC.IO.Handle.Types.$fShowBufferMode_$cshowList]
GHC.IO.Handle.Types.$fShowBufferMode
  = GHC.Show.C:Show
      @ BufferMode
      GHC.IO.Handle.Types.$fShowBufferMode_$cshowsPrec
      GHC.IO.Handle.Types.$fShowBufferMode_$cshow
      GHC.IO.Handle.Types.$fShowBufferMode_$cshowList

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadBufferMode11
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (BufferMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_i816N)
                 (k_i816O [Occ=Once!]
                    :: BufferMode -> Text.ParserCombinators.ReadP.P b_i816N) ->
                 k_i816O GHC.IO.Handle.Types.NoBuffering}]
GHC.IO.Handle.Types.$fReadBufferMode11
  = \ _ [Occ=Dead]
      (@ b_i816N)
      (k_i816O
         :: BufferMode -> Text.ParserCombinators.ReadP.P b_i816N) ->
      k_i816O GHC.IO.Handle.Types.NoBuffering

-- RHS size: {terms: 3, types: 4, coercions: 9, joins: 0/0}
GHC.IO.Handle.Types.$fReadBufferMode10
  :: ([Char], Text.ParserCombinators.ReadPrec.ReadPrec BufferMode)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Handle.Types.$fReadBufferMode10
  = (GHC.IO.Handle.Types.$fReadBufferMode12,
     GHC.IO.Handle.Types.$fReadBufferMode11
     `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                            <BufferMode>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                        <BufferMode>_R)
             :: (Text.ParserCombinators.ReadPrec.Prec
                 -> forall b.
                    (BufferMode -> Text.ParserCombinators.ReadP.P b)
                    -> Text.ParserCombinators.ReadP.P b :: *)
                ~R# (Text.ParserCombinators.ReadPrec.ReadPrec BufferMode :: *)))

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadBufferMode7
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (BufferMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_i816N)
                 (k_i816O [Occ=Once!]
                    :: BufferMode -> Text.ParserCombinators.ReadP.P b_i816N) ->
                 k_i816O GHC.IO.Handle.Types.LineBuffering}]
GHC.IO.Handle.Types.$fReadBufferMode7
  = \ _ [Occ=Dead]
      (@ b_i816N)
      (k_i816O
         :: BufferMode -> Text.ParserCombinators.ReadP.P b_i816N) ->
      k_i816O GHC.IO.Handle.Types.LineBuffering

-- RHS size: {terms: 3, types: 4, coercions: 9, joins: 0/0}
GHC.IO.Handle.Types.$fReadBufferMode6
  :: ([Char], Text.ParserCombinators.ReadPrec.ReadPrec BufferMode)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Handle.Types.$fReadBufferMode6
  = (GHC.IO.Handle.Types.$fReadBufferMode8,
     GHC.IO.Handle.Types.$fReadBufferMode7
     `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                            <BufferMode>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                        <BufferMode>_R)
             :: (Text.ParserCombinators.ReadPrec.Prec
                 -> forall b.
                    (BufferMode -> Text.ParserCombinators.ReadP.P b)
                    -> Text.ParserCombinators.ReadP.P b :: *)
                ~R# (Text.ParserCombinators.ReadPrec.ReadPrec BufferMode :: *)))

-- RHS size: {terms: 3, types: 8, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadBufferMode5
  :: [(String, Text.ParserCombinators.ReadPrec.ReadPrec BufferMode)]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Handle.Types.$fReadBufferMode5
  = GHC.Types.:
      @ (String, Text.ParserCombinators.ReadPrec.ReadPrec BufferMode)
      GHC.IO.Handle.Types.$fReadBufferMode6
      (GHC.Types.[]
         @ (String, Text.ParserCombinators.ReadPrec.ReadPrec BufferMode))

-- RHS size: {terms: 3, types: 4, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadBufferMode_sps
  :: [(String, Text.ParserCombinators.ReadPrec.ReadPrec BufferMode)]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Handle.Types.$fReadBufferMode_sps
  = GHC.Types.:
      @ (String, Text.ParserCombinators.ReadPrec.ReadPrec BufferMode)
      GHC.IO.Handle.Types.$fReadBufferMode10
      GHC.IO.Handle.Types.$fReadBufferMode5

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadBufferMode4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Handle.Types.$fReadBufferMode4 = "BlockBuffering"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadBufferMode3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.Types.$fReadBufferMode3
  = unpackCString# GHC.IO.Handle.Types.$fReadBufferMode4

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadBufferMode_lexeme :: Text.Read.Lex.Lexeme
[GblId,
 Str=m4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Types.$fReadBufferMode_lexeme
  = Text.Read.Lex.Ident GHC.IO.Handle.Types.$fReadBufferMode3

-- RHS size: {terms: 34, types: 30, coercions: 5, joins: 0/1}
GHC.IO.Handle.Types.$fReadBufferMode2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP BufferMode
[GblId,
 Arity=1,
 Str=<L,U(U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 271 60}]
GHC.IO.Handle.Types.$fReadBufferMode2
  = \ (n_i88Yh :: Text.ParserCombinators.ReadPrec.Prec) ->
      let {
        ds2_s897a [Dmd=<L,C(U)>]
          :: Text.ParserCombinators.ReadP.ReadP BufferMode
        [LclId]
        ds2_s897a
          = GHC.Read.choose2
              @ BufferMode GHC.IO.Handle.Types.$fReadBufferMode_sps n_i88Yh } in
      (\ (@ b_i88Yk)
         (k_i88Yl
            :: BufferMode -> Text.ParserCombinators.ReadP.P b_i88Yk) ->
         Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
           @ b_i88Yk
           ((ds2_s897a
             `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <BufferMode>_R
                     :: (Text.ParserCombinators.ReadP.ReadP BufferMode :: *)
                        ~R# (forall b.
                             (BufferMode -> Text.ParserCombinators.ReadP.P b)
                             -> Text.ParserCombinators.ReadP.P b :: *)))
              @ b_i88Yk k_i88Yl)
           (case n_i88Yh of { I# x_i88VZ ->
            case <=# x_i88VZ 10# of {
              __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b_i88Yk;
              1# ->
                case Text.Read.Lex.$wexpect
                       GHC.IO.Handle.Types.$fReadBufferMode_lexeme
                       @ b_i88Yk
                       (\ _ [Occ=Dead, OS=OneShot] ->
                          GHC.Read.$fReadMaybe1
                            @ Int
                            GHC.Read.$fReadInt
                            GHC.IO.Handle.Types.$fReadBufferMode_n
                            @ b_i88Yk
                            (\ (a2_i88WJ :: Maybe Int) ->
                               k_i88Yl (GHC.IO.Handle.Types.BlockBuffering a2_i88WJ)))
                of
                { (# ww1_i88Ww #) ->
                Text.ParserCombinators.ReadP.Look @ b_i88Yk ww1_i88Ww
                }
            }
            }))
      `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                       <BufferMode>_R)
              :: (forall b.
                  (BufferMode -> Text.ParserCombinators.ReadP.P b)
                  -> Text.ParserCombinators.ReadP.P b :: *)
                 ~R# (Text.ParserCombinators.ReadP.ReadP BufferMode :: *))

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
GHC.IO.Handle.Types.$fReadBufferMode1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (BufferMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.IO.Handle.Types.$fReadBufferMode1
  = GHC.Read.list3
      @ BufferMode
      (GHC.IO.Handle.Types.$fReadBufferMode2
       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <BufferMode>_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> Text.ParserCombinators.ReadP.ReadP BufferMode :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec BufferMode :: *)))

-- RHS size: {terms: 6, types: 5, coercions: 3, joins: 0/0}
GHC.IO.Handle.Types.$fReadBufferMode_$creadsPrec
  :: Int -> ReadS BufferMode
[GblId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_i8156 [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ BufferMode
                   (GHC.Read.list3
                      @ BufferMode
                      (GHC.IO.Handle.Types.$fReadBufferMode2
                       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                        <BufferMode>_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> Text.ParserCombinators.ReadP.ReadP BufferMode :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec BufferMode :: *)))
                      n_i8156
                      @ BufferMode
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ BufferMode))}]
GHC.IO.Handle.Types.$fReadBufferMode_$creadsPrec
  = \ (n_i8156 :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ BufferMode
        (GHC.Read.list3
           @ BufferMode
           (GHC.IO.Handle.Types.$fReadBufferMode2
            `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <BufferMode>_R)
                    :: (Text.ParserCombinators.ReadPrec.Prec
                        -> Text.ParserCombinators.ReadP.ReadP BufferMode :: *)
                       ~R# (Text.ParserCombinators.ReadPrec.ReadPrec BufferMode :: *)))
           n_i8156
           @ BufferMode
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ BufferMode))

-- RHS size: {terms: 2, types: 1, coercions: 9, joins: 0/0}
GHC.IO.Handle.Types.$fReadBufferMode_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [BufferMode]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.Types.$fReadBufferMode_$creadListPrec
  = list
      @ BufferMode
      (GHC.IO.Handle.Types.$fReadBufferMode1
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <BufferMode>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                          <BufferMode>_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      (BufferMode -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec BufferMode :: *)))

-- RHS size: {terms: 3, types: 4, coercions: 6, joins: 0/0}
GHC.IO.Handle.Types.$fReadBufferMode14
  :: Text.ParserCombinators.ReadP.P [BufferMode]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Handle.Types.$fReadBufferMode14
  = (((GHC.IO.Handle.Types.$fReadBufferMode_$creadListPrec
       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                   <[BufferMode]>_R
               :: (Text.ParserCombinators.ReadPrec.ReadPrec [BufferMode] :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.Prec
                       -> Text.ParserCombinators.ReadP.ReadP [BufferMode] :: *)))
        GHC.Read.$fRead()7)
     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[BufferMode]>_R
             :: (Text.ParserCombinators.ReadP.ReadP [BufferMode] :: *)
                ~R# (forall b.
                     ([BufferMode] -> Text.ParserCombinators.ReadP.P b)
                     -> Text.ParserCombinators.ReadP.P b :: *)))
      @ [BufferMode]
      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ [BufferMode])

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fReadBufferMode_$creadList
  :: ReadS [BufferMode]
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.IO.Handle.Types.$fReadBufferMode_$creadList
  = Text.ParserCombinators.ReadP.run
      @ [BufferMode] GHC.IO.Handle.Types.$fReadBufferMode14

-- RHS size: {terms: 5, types: 1, coercions: 9, joins: 0/0}
GHC.IO.Handle.Types.$fReadBufferMode [InlPrag=NOUSERINLINE CONLIKE]
  :: Read BufferMode
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: BufferMode
                       GHC.IO.Handle.Types.$fReadBufferMode_$creadsPrec
                       GHC.IO.Handle.Types.$fReadBufferMode_$creadList
                       GHC.IO.Handle.Types.$fReadBufferMode1
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <BufferMode>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                          <BufferMode>_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      (BufferMode -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec BufferMode :: *))
                       GHC.IO.Handle.Types.$fReadBufferMode_$creadListPrec]
GHC.IO.Handle.Types.$fReadBufferMode
  = GHC.Read.C:Read
      @ BufferMode
      GHC.IO.Handle.Types.$fReadBufferMode_$creadsPrec
      GHC.IO.Handle.Types.$fReadBufferMode_$creadList
      (GHC.IO.Handle.Types.$fReadBufferMode1
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <BufferMode>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                          <BufferMode>_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      (BufferMode -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec BufferMode :: *)))
      GHC.IO.Handle.Types.$fReadBufferMode_$creadListPrec

-- RHS size: {terms: 42, types: 21, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fOrdBufferMode_$c<
  :: BufferMode -> BufferMode -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [80 90] 180 80}]
GHC.IO.Handle.Types.$fOrdBufferMode_$c<
  = \ (a_a88Cy :: BufferMode) (b_a88Cz :: BufferMode) ->
      case a_a88Cy of {
        NoBuffering ->
          case b_a88Cz of {
            __DEFAULT -> GHC.Types.True;
            NoBuffering -> GHC.Types.False
          };
        LineBuffering ->
          case b_a88Cz of {
            __DEFAULT -> GHC.Types.False;
            BlockBuffering ipv_s88Zh -> GHC.Types.True
          };
        BlockBuffering a1_a88CA ->
          case b_a88Cz of {
            __DEFAULT -> GHC.Types.False;
            BlockBuffering b1_a88CB ->
              case a1_a88CA of {
                Nothing ->
                  case b1_a88CB of {
                    Nothing -> GHC.Types.False;
                    Just ipv_i88ZD -> GHC.Types.True
                  };
                Just a2_i88Zv ->
                  case b1_a88CB of {
                    Nothing -> GHC.Types.False;
                    Just b2_i88ZA -> ltInt a2_i88Zv b2_i88ZA
                  }
              }
          }
      }

-- RHS size: {terms: 44, types: 21, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fOrdBufferMode_$ccompare
  :: BufferMode -> BufferMode -> Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [90 100] 190 90}]
GHC.IO.Handle.Types.$fOrdBufferMode_$ccompare
  = \ (a_a88Cu :: BufferMode) (b_a88Cv :: BufferMode) ->
      case a_a88Cu of {
        NoBuffering ->
          case b_a88Cv of {
            __DEFAULT -> GHC.Types.LT;
            NoBuffering -> GHC.Types.EQ
          };
        LineBuffering ->
          case b_a88Cv of {
            NoBuffering -> GHC.Types.GT;
            LineBuffering -> GHC.Types.EQ;
            BlockBuffering ipv_s88ZM -> GHC.Types.LT
          };
        BlockBuffering a1_a88Cw ->
          case b_a88Cv of {
            __DEFAULT -> GHC.Types.GT;
            BlockBuffering b1_a88Cx ->
              case a1_a88Cw of {
                Nothing ->
                  case b1_a88Cx of {
                    Nothing -> GHC.Types.EQ;
                    Just ipv_i8908 -> GHC.Types.LT
                  };
                Just a2_i8900 ->
                  case b1_a88Cx of {
                    Nothing -> GHC.Types.GT;
                    Just b2_i8905 -> compareInt a2_i8900 b2_i8905
                  }
              }
          }
      }

-- RHS size: {terms: 42, types: 19, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fEqBufferMode_$c==
  :: BufferMode -> BufferMode -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [80 90] 180 80}]
GHC.IO.Handle.Types.$fEqBufferMode_$c==
  = \ (ds_d88QZ :: BufferMode) (ds1_d88R0 :: BufferMode) ->
      case ds_d88QZ of {
        NoBuffering ->
          case ds1_d88R0 of {
            __DEFAULT -> GHC.Types.False;
            NoBuffering -> GHC.Types.True
          };
        LineBuffering ->
          case ds1_d88R0 of {
            __DEFAULT -> GHC.Types.False;
            LineBuffering -> GHC.Types.True
          };
        BlockBuffering a1_a88Cs ->
          case ds1_d88R0 of {
            __DEFAULT -> GHC.Types.False;
            BlockBuffering b1_a88Ct ->
              case a1_a88Cs of {
                Nothing ->
                  case b1_a88Ct of {
                    Nothing -> GHC.Types.True;
                    Just ipv_i890B -> GHC.Types.False
                  };
                Just a2_i890t ->
                  case b1_a88Ct of {
                    Nothing -> GHC.Types.False;
                    Just b2_i890y -> eqInt a2_i890t b2_i890y
                  }
              }
          }
      }

-- RHS size: {terms: 53, types: 24, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fEqBufferMode_$c/= [InlPrag=INLINE (sat-args=2)]
  :: BufferMode -> BufferMode -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=False)
         Tmpl= \ (x_a22b [Occ=Once!] :: BufferMode)
                 (y_a22c [Occ=Once*!] :: BufferMode) ->
                 case x_a22b of {
                   NoBuffering ->
                     case y_a22c of {
                       __DEFAULT -> GHC.Types.True;
                       NoBuffering -> GHC.Types.False
                     };
                   LineBuffering ->
                     case y_a22c of {
                       __DEFAULT -> GHC.Types.True;
                       LineBuffering -> GHC.Types.False
                     };
                   BlockBuffering a1_a88Cs [Occ=Once!] ->
                     case y_a22c of {
                       __DEFAULT -> GHC.Types.True;
                       BlockBuffering b1_a88Ct [Occ=Once*!] ->
                         case a1_a88Cs of {
                           Nothing ->
                             case b1_a88Ct of {
                               Nothing -> GHC.Types.False;
                               Just _ [Occ=Dead] -> GHC.Types.True
                             };
                           Just a2_i890t [Occ=Once] ->
                             case b1_a88Ct of {
                               Nothing -> GHC.Types.True;
                               Just b2_i890y [Occ=Once] ->
                                 case eqInt a2_i890t b2_i890y of {
                                   False -> GHC.Types.True;
                                   True -> GHC.Types.False
                                 }
                             }
                         }
                     }
                 }}]
GHC.IO.Handle.Types.$fEqBufferMode_$c/=
  = \ (eta_B2 :: BufferMode) (eta1_B1 :: BufferMode) ->
      case eta_B2 of {
        NoBuffering ->
          case eta1_B1 of {
            __DEFAULT -> GHC.Types.True;
            NoBuffering -> GHC.Types.False
          };
        LineBuffering ->
          case eta1_B1 of {
            __DEFAULT -> GHC.Types.True;
            LineBuffering -> GHC.Types.False
          };
        BlockBuffering a1_a88Cs ->
          case eta1_B1 of {
            __DEFAULT -> GHC.Types.True;
            BlockBuffering b1_a88Ct ->
              case a1_a88Cs of {
                Nothing ->
                  case b1_a88Ct of {
                    Nothing -> GHC.Types.False;
                    Just ipv_i890B -> GHC.Types.True
                  };
                Just a2_i890t ->
                  case b1_a88Ct of {
                    Nothing -> GHC.Types.True;
                    Just b2_i890y ->
                      case a2_i890t of { I# x_a22G ->
                      case b2_i890y of { I# y_a22K ->
                      case ==# x_a22G y_a22K of {
                        __DEFAULT -> GHC.Types.True;
                        1# -> GHC.Types.False
                      }
                      }
                      }
                  }
              }
          }
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fEqBufferMode [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq BufferMode
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: BufferMode
                        GHC.IO.Handle.Types.$fEqBufferMode_$c==
                        GHC.IO.Handle.Types.$fEqBufferMode_$c/=]
GHC.IO.Handle.Types.$fEqBufferMode
  = GHC.Classes.C:Eq
      @ BufferMode
      GHC.IO.Handle.Types.$fEqBufferMode_$c==
      GHC.IO.Handle.Types.$fEqBufferMode_$c/=

-- RHS size: {terms: 53, types: 26, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fOrdBufferMode_$c<=
  :: BufferMode -> BufferMode -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [90 80] 191 100}]
GHC.IO.Handle.Types.$fOrdBufferMode_$c<=
  = \ (a_a88CC :: BufferMode) (b_a88CD :: BufferMode) ->
      case b_a88CD of {
        NoBuffering ->
          case a_a88CC of {
            __DEFAULT -> GHC.Types.False;
            NoBuffering -> GHC.Types.True
          };
        LineBuffering ->
          case a_a88CC of {
            __DEFAULT -> GHC.Types.True;
            BlockBuffering ipv_s88Zh -> GHC.Types.False
          };
        BlockBuffering a1_a88CA ->
          case a_a88CC of {
            __DEFAULT -> GHC.Types.True;
            BlockBuffering b1_a88CB ->
              case a1_a88CA of {
                Nothing ->
                  case b1_a88CB of {
                    Nothing -> GHC.Types.True;
                    Just ipv_i88ZD -> GHC.Types.False
                  };
                Just a2_i88Zv ->
                  case b1_a88CB of {
                    Nothing -> GHC.Types.True;
                    Just b2_i88ZA ->
                      case a2_i88Zv of { I# x_alN9 ->
                      case b2_i88ZA of { I# y_alNd ->
                      case <# x_alN9 y_alNd of {
                        __DEFAULT -> GHC.Types.True;
                        1# -> GHC.Types.False
                      }
                      }
                      }
                  }
              }
          }
      }

-- RHS size: {terms: 48, types: 25, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fOrdBufferMode_$cmax
  :: BufferMode -> BufferMode -> BufferMode
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 60] 171 10}]
GHC.IO.Handle.Types.$fOrdBufferMode_$cmax
  = \ (x_a55d :: BufferMode) (y_a55e :: BufferMode) ->
      case y_a55e of wild_X48 {
        NoBuffering -> x_a55d;
        LineBuffering ->
          case x_a55d of wild1_XZ {
            __DEFAULT -> GHC.IO.Handle.Types.LineBuffering;
            BlockBuffering ipv_s88Zh -> wild1_XZ
          };
        BlockBuffering a1_a88CA ->
          case x_a55d of wild1_X10 {
            __DEFAULT -> wild_X48;
            BlockBuffering b1_a88CB ->
              case a1_a88CA of {
                Nothing ->
                  case b1_a88CB of {
                    Nothing -> wild_X48;
                    Just ipv_i88ZD -> wild1_X10
                  };
                Just a2_i88Zv ->
                  case b1_a88CB of {
                    Nothing -> wild_X48;
                    Just b2_i88ZA ->
                      case a2_i88Zv of { I# x1_alN9 ->
                      case b2_i88ZA of { I# y1_alNd ->
                      case <# x1_alN9 y1_alNd of {
                        __DEFAULT -> wild_X48;
                        1# -> wild1_X10
                      }
                      }
                      }
                  }
              }
          }
      }

-- RHS size: {terms: 53, types: 26, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fOrdBufferMode_$c>=
  :: BufferMode -> BufferMode -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [80 90] 191 100}]
GHC.IO.Handle.Types.$fOrdBufferMode_$c>=
  = \ (a_a88CG :: BufferMode) (b_a88CH :: BufferMode) ->
      case a_a88CG of {
        NoBuffering ->
          case b_a88CH of {
            __DEFAULT -> GHC.Types.False;
            NoBuffering -> GHC.Types.True
          };
        LineBuffering ->
          case b_a88CH of {
            __DEFAULT -> GHC.Types.True;
            BlockBuffering ipv_s88Zh -> GHC.Types.False
          };
        BlockBuffering a1_a88CA ->
          case b_a88CH of {
            __DEFAULT -> GHC.Types.True;
            BlockBuffering b1_a88CB ->
              case a1_a88CA of {
                Nothing ->
                  case b1_a88CB of {
                    Nothing -> GHC.Types.True;
                    Just ipv_i88ZD -> GHC.Types.False
                  };
                Just a2_i88Zv ->
                  case b1_a88CB of {
                    Nothing -> GHC.Types.True;
                    Just b2_i88ZA ->
                      case a2_i88Zv of { I# x_alN9 ->
                      case b2_i88ZA of { I# y_alNd ->
                      case <# x_alN9 y_alNd of {
                        __DEFAULT -> GHC.Types.True;
                        1# -> GHC.Types.False
                      }
                      }
                      }
                  }
              }
          }
      }

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fOrdBufferMode_$c>
  :: BufferMode -> BufferMode -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (a_a88CE [Occ=Once] :: BufferMode)
                 (b_a88CF [Occ=Once] :: BufferMode) ->
                 GHC.IO.Handle.Types.$fOrdBufferMode_$c< b_a88CF a_a88CE}]
GHC.IO.Handle.Types.$fOrdBufferMode_$c>
  = \ (a_a88CE :: BufferMode) (b_a88CF :: BufferMode) ->
      GHC.IO.Handle.Types.$fOrdBufferMode_$c< b_a88CF a_a88CE

-- RHS size: {terms: 51, types: 26, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fOrdBufferMode_$cmin
  :: BufferMode -> BufferMode -> BufferMode
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [80 70] 181 20}]
GHC.IO.Handle.Types.$fOrdBufferMode_$cmin
  = \ (x_a55m :: BufferMode) (y_a55n :: BufferMode) ->
      case y_a55n of wild_X48 {
        NoBuffering ->
          case x_a55m of { __DEFAULT -> GHC.IO.Handle.Types.NoBuffering };
        LineBuffering ->
          case x_a55m of wild1_XZ {
            __DEFAULT -> wild1_XZ;
            BlockBuffering ipv_s88Zh -> GHC.IO.Handle.Types.LineBuffering
          };
        BlockBuffering a1_a88CA ->
          case x_a55m of wild1_X10 {
            __DEFAULT -> wild1_X10;
            BlockBuffering b1_a88CB ->
              case a1_a88CA of {
                Nothing ->
                  case b1_a88CB of {
                    Nothing -> wild1_X10;
                    Just ipv_i88ZD -> wild_X48
                  };
                Just a2_i88Zv ->
                  case b1_a88CB of {
                    Nothing -> wild1_X10;
                    Just b2_i88ZA ->
                      case a2_i88Zv of { I# x1_alN9 ->
                      case b2_i88ZA of { I# y1_alNd ->
                      case <# x1_alN9 y1_alNd of {
                        __DEFAULT -> wild1_X10;
                        1# -> wild_X48
                      }
                      }
                      }
                  }
              }
          }
      }

-- RHS size: {terms: 9, types: 1, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fOrdBufferMode [InlPrag=NOUSERINLINE CONLIKE]
  :: Ord BufferMode
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Ord TYPE: BufferMode
                         GHC.IO.Handle.Types.$fEqBufferMode
                         GHC.IO.Handle.Types.$fOrdBufferMode_$ccompare
                         GHC.IO.Handle.Types.$fOrdBufferMode_$c<
                         GHC.IO.Handle.Types.$fOrdBufferMode_$c<=
                         GHC.IO.Handle.Types.$fOrdBufferMode_$c>
                         GHC.IO.Handle.Types.$fOrdBufferMode_$c>=
                         GHC.IO.Handle.Types.$fOrdBufferMode_$cmax
                         GHC.IO.Handle.Types.$fOrdBufferMode_$cmin]
GHC.IO.Handle.Types.$fOrdBufferMode
  = GHC.Classes.C:Ord
      @ BufferMode
      GHC.IO.Handle.Types.$fEqBufferMode
      GHC.IO.Handle.Types.$fOrdBufferMode_$ccompare
      GHC.IO.Handle.Types.$fOrdBufferMode_$c<
      GHC.IO.Handle.Types.$fOrdBufferMode_$c<=
      GHC.IO.Handle.Types.$fOrdBufferMode_$c>
      GHC.IO.Handle.Types.$fOrdBufferMode_$c>=
      GHC.IO.Handle.Types.$fOrdBufferMode_$cmax
      GHC.IO.Handle.Types.$fOrdBufferMode_$cmin

-- RHS size: {terms: 5, types: 50, coercions: 0, joins: 0/0}
haOtherSide :: Handle__ -> Maybe (MVar Handle__)
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d88QK [Occ=Once!] :: Handle__) ->
                 case ds_d88QK of
                 { Handle__ @ dev_a88zd @ enc_state_a88ze @ dec_state_a88zf
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            ds9_d88QX [Occ=Once] ->
                 ds9_d88QX
                 }}]
haOtherSide
  = \ (ds_d88QK :: Handle__) ->
      case ds_d88QK of
      { Handle__ @ dev_a88zd @ enc_state_a88ze @ dec_state_a88zf
                 $dIODevice_a88zg $dBufferedIO_a88zh $dTypeable_a88zi ds1_d88QL
                 ds2_d88QM dt_d88Un ds3_d88QO dt1_d88Uo dt2_d88Up dt3_d88Uq
                 ds4_d88QS ds5_d88QT ds6_d88QU ds7_d88QV ds8_d88QW ds9_d88QX ->
      ds9_d88QX
      }

-- RHS size: {terms: 5, types: 50, coercions: 0, joins: 0/0}
haOutputNL :: Handle__ -> Newline
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d88Qv [Occ=Once!] :: Handle__) ->
                 case ds_d88Qv of
                 { Handle__ @ dev_a88z5 @ enc_state_a88z6 @ dec_state_a88z7
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            ds8_d88QH [Occ=Once] _ [Occ=Dead] ->
                 ds8_d88QH
                 }}]
haOutputNL
  = \ (ds_d88Qv :: Handle__) ->
      case ds_d88Qv of
      { Handle__ @ dev_a88z5 @ enc_state_a88z6 @ dec_state_a88z7
                 $dIODevice_a88z8 $dBufferedIO_a88z9 $dTypeable_a88za ds1_d88Qw
                 ds2_d88Qx dt_d88Uj ds3_d88Qz dt1_d88Uk dt2_d88Ul dt3_d88Um
                 ds4_d88QD ds5_d88QE ds6_d88QF ds7_d88QG ds8_d88QH ds9_d88QI ->
      ds8_d88QH
      }

-- RHS size: {terms: 5, types: 50, coercions: 0, joins: 0/0}
haInputNL :: Handle__ -> Newline
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d88Qg [Occ=Once!] :: Handle__) ->
                 case ds_d88Qg of
                 { Handle__ @ dev_a88yX @ enc_state_a88yY @ dec_state_a88yZ
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ds7_d88Qr [Occ=Once]
                            _ [Occ=Dead] _ [Occ=Dead] ->
                 ds7_d88Qr
                 }}]
haInputNL
  = \ (ds_d88Qg :: Handle__) ->
      case ds_d88Qg of
      { Handle__ @ dev_a88yX @ enc_state_a88yY @ dec_state_a88yZ
                 $dIODevice_a88z0 $dBufferedIO_a88z1 $dTypeable_a88z2 ds1_d88Qh
                 ds2_d88Qi dt_d88Uf ds3_d88Qk dt1_d88Ug dt2_d88Uh dt3_d88Ui
                 ds4_d88Qo ds5_d88Qp ds6_d88Qq ds7_d88Qr ds8_d88Qs ds9_d88Qt ->
      ds7_d88Qr
      }

-- RHS size: {terms: 5, types: 50, coercions: 0, joins: 0/0}
haCodec :: Handle__ -> Maybe TextEncoding
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d88Q1 [Occ=Once!] :: Handle__) ->
                 case ds_d88Q1 of
                 { Handle__ @ dev_a88yP @ enc_state_a88yQ @ dec_state_a88yR
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] ds6_d88Qb [Occ=Once] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] ->
                 ds6_d88Qb
                 }}]
haCodec
  = \ (ds_d88Q1 :: Handle__) ->
      case ds_d88Q1 of
      { Handle__ @ dev_a88yP @ enc_state_a88yQ @ dec_state_a88yR
                 $dIODevice_a88yS $dBufferedIO_a88yT $dTypeable_a88yU ds1_d88Q2
                 ds2_d88Q3 dt_d88Ub ds3_d88Q5 dt1_d88Uc dt2_d88Ud dt3_d88Ue
                 ds4_d88Q9 ds5_d88Qa ds6_d88Qb ds7_d88Qc ds8_d88Qd ds9_d88Qe ->
      ds6_d88Qb
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
haDecoder :: ()
[GblId[[RecSel(naughty)]],
 Caf=NoCafRefs,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Tuple.()}]
haDecoder = GHC.Tuple.()

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
haEncoder :: ()
[GblId[[RecSel(naughty)]],
 Caf=NoCafRefs,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Tuple.()}]
haEncoder = GHC.Tuple.()

-- RHS size: {terms: 6, types: 53, coercions: 4, joins: 0/0}
haBuffers :: Handle__ -> IORef (BufferList CharBufElem)
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d88PM [Occ=Once!] :: Handle__) ->
                 case ds_d88PM of
                 { Handle__ @ dev_a88yF @ enc_state_a88yG @ dec_state_a88yH
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            dt3_d88Ua [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 (GHC.STRef.STRef @ RealWorld @ (BufferList CharBufElem) dt3_d88Ua)
                 `cast` (Sym (GHC.IORef.N:IORef[0]) <BufferList CharBufElem>_N
                         :: (GHC.STRef.STRef RealWorld (BufferList CharBufElem) :: *)
                            ~R# (IORef (BufferList CharBufElem) :: *))
                 }}]
haBuffers
  = \ (ds_d88PM :: Handle__) ->
      case ds_d88PM of
      { Handle__ @ dev_a88yF @ enc_state_a88yG @ dec_state_a88yH
                 $dIODevice_a88yI $dBufferedIO_a88yJ $dTypeable_a88yK ds1_d88PN
                 ds2_d88PO dt_d88U7 ds3_d88PQ dt1_d88U8 dt2_d88U9 dt3_d88Ua
                 ds4_d88PU ds5_d88PV ds6_d88PW ds7_d88PX ds8_d88PY ds9_d88PZ ->
      (GHC.STRef.STRef @ RealWorld @ (BufferList CharBufElem) dt3_d88Ua)
      `cast` (Sym (GHC.IORef.N:IORef[0]) <BufferList CharBufElem>_N
              :: (GHC.STRef.STRef RealWorld (BufferList CharBufElem) :: *)
                 ~R# (IORef (BufferList CharBufElem) :: *))
      }

-- RHS size: {terms: 6, types: 53, coercions: 4, joins: 0/0}
haCharBuffer :: Handle__ -> IORef (Buffer CharBufElem)
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d88Px [Occ=Once!] :: Handle__) ->
                 case ds_d88Px of
                 { Handle__ @ dev_a88yx @ enc_state_a88yy @ dec_state_a88yz
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] dt2_d88U5 [Occ=Once]
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] ->
                 (GHC.STRef.STRef @ RealWorld @ (Buffer CharBufElem) dt2_d88U5)
                 `cast` (Sym (GHC.IORef.N:IORef[0]) <Buffer CharBufElem>_N
                         :: (GHC.STRef.STRef RealWorld (Buffer CharBufElem) :: *)
                            ~R# (IORef (Buffer CharBufElem) :: *))
                 }}]
haCharBuffer
  = \ (ds_d88Px :: Handle__) ->
      case ds_d88Px of
      { Handle__ @ dev_a88yx @ enc_state_a88yy @ dec_state_a88yz
                 $dIODevice_a88yA $dBufferedIO_a88yB $dTypeable_a88yC ds1_d88Py
                 ds2_d88Pz dt_d88U3 ds3_d88PB dt1_d88U4 dt2_d88U5 dt3_d88U6
                 ds4_d88PF ds5_d88PG ds6_d88PH ds7_d88PI ds8_d88PJ ds9_d88PK ->
      (GHC.STRef.STRef @ RealWorld @ (Buffer CharBufElem) dt2_d88U5)
      `cast` (Sym (GHC.IORef.N:IORef[0]) <Buffer CharBufElem>_N
              :: (GHC.STRef.STRef RealWorld (Buffer CharBufElem) :: *)
                 ~R# (IORef (Buffer CharBufElem) :: *))
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
haLastDecode :: ()
[GblId[[RecSel(naughty)]],
 Caf=NoCafRefs,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Tuple.()}]
haLastDecode = GHC.Tuple.()

-- RHS size: {terms: 5, types: 50, coercions: 0, joins: 0/0}
haBufferMode :: Handle__ -> BufferMode
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d88Pi [Occ=Once!] :: Handle__) ->
                 case ds_d88Pi of
                 { Handle__ @ dev_a88yo @ enc_state_a88yp @ dec_state_a88yq
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] ds3_d88Pm [Occ=Once] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] ->
                 ds3_d88Pm
                 }}]
haBufferMode
  = \ (ds_d88Pi :: Handle__) ->
      case ds_d88Pi of
      { Handle__ @ dev_a88yo @ enc_state_a88yp @ dec_state_a88yq
                 $dIODevice_a88yr $dBufferedIO_a88ys $dTypeable_a88yt ds1_d88Pj
                 ds2_d88Pk dt_d88TZ ds3_d88Pm dt1_d88U0 dt2_d88U1 dt3_d88U2
                 ds4_d88Pq ds5_d88Pr ds6_d88Ps ds7_d88Pt ds8_d88Pu ds9_d88Pv ->
      ds3_d88Pm
      }

-- RHS size: {terms: 6, types: 53, coercions: 4, joins: 0/0}
haByteBuffer :: Handle__ -> IORef (Buffer Word8)
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d88P3 [Occ=Once!] :: Handle__) ->
                 case ds_d88P3 of
                 { Handle__ @ dev_a88yg @ enc_state_a88yh @ dec_state_a88yi
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            dt_d88TV [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] ->
                 (GHC.STRef.STRef @ RealWorld @ (Buffer Word8) dt_d88TV)
                 `cast` (Sym (GHC.IORef.N:IORef[0]) <Buffer Word8>_N
                         :: (GHC.STRef.STRef RealWorld (Buffer Word8) :: *)
                            ~R# (IORef (Buffer Word8) :: *))
                 }}]
haByteBuffer
  = \ (ds_d88P3 :: Handle__) ->
      case ds_d88P3 of
      { Handle__ @ dev_a88yg @ enc_state_a88yh @ dec_state_a88yi
                 $dIODevice_a88yj $dBufferedIO_a88yk $dTypeable_a88yl ds1_d88P4
                 ds2_d88P5 dt_d88TV ds3_d88P7 dt1_d88TW dt2_d88TX dt3_d88TY
                 ds4_d88Pb ds5_d88Pc ds6_d88Pd ds7_d88Pe ds8_d88Pf ds9_d88Pg ->
      (GHC.STRef.STRef @ RealWorld @ (Buffer Word8) dt_d88TV)
      `cast` (Sym (GHC.IORef.N:IORef[0]) <Buffer Word8>_N
              :: (GHC.STRef.STRef RealWorld (Buffer Word8) :: *)
                 ~R# (IORef (Buffer Word8) :: *))
      }

-- RHS size: {terms: 5, types: 50, coercions: 0, joins: 0/0}
haType :: Handle__ -> HandleType
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d88OO [Occ=Once!] :: Handle__) ->
                 case ds_d88OO of
                 { Handle__ @ dev_a88y8 @ enc_state_a88y9 @ dec_state_a88ya
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            ds2_d88OQ [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds2_d88OQ
                 }}]
haType
  = \ (ds_d88OO :: Handle__) ->
      case ds_d88OO of
      { Handle__ @ dev_a88y8 @ enc_state_a88y9 @ dec_state_a88ya
                 $dIODevice_a88yb $dBufferedIO_a88yc $dTypeable_a88yd ds1_d88OP
                 ds2_d88OQ dt_d88TR ds3_d88OS dt1_d88TS dt2_d88TT dt3_d88TU
                 ds4_d88OW ds5_d88OX ds6_d88OY ds7_d88OZ ds8_d88P0 ds9_d88P1 ->
      ds2_d88OQ
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
haDevice :: ()
[GblId[[RecSel(naughty)]],
 Caf=NoCafRefs,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Tuple.()}]
haDevice = GHC.Tuple.()

-- RHS size: {terms: 5, types: 4, coercions: 0, joins: 0/0}
outputNL :: NewlineMode -> Newline
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LS),1*U(A,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d88OL [Occ=Once!] :: NewlineMode) ->
                 case ds_d88OL of { NewlineMode _ [Occ=Dead] ds2_d88ON [Occ=Once] ->
                 ds2_d88ON
                 }}]
outputNL
  = \ (ds_d88OL :: NewlineMode) ->
      case ds_d88OL of { NewlineMode ds1_d88OM ds2_d88ON -> ds2_d88ON }

-- RHS size: {terms: 5, types: 4, coercions: 0, joins: 0/0}
inputNL :: NewlineMode -> Newline
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d88OI [Occ=Once!] :: NewlineMode) ->
                 case ds_d88OI of { NewlineMode ds1_d88OJ [Occ=Once] _ [Occ=Dead] ->
                 ds1_d88OJ
                 }}]
inputNL
  = \ (ds_d88OI :: NewlineMode) ->
      case ds_d88OI of { NewlineMode ds1_d88OJ ds2_d88OK -> ds1_d88OJ }

-- RHS size: {terms: 9, types: 2, coercions: 0, joins: 0/0}
isReadableHandleType :: HandleType -> Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d88Ox [Occ=Once!] :: HandleType) ->
                 case ds_d88Ox of {
                   __DEFAULT -> GHC.Types.False;
                   ReadHandle -> GHC.Types.True;
                   ReadWriteHandle -> GHC.Types.True
                 }}]
isReadableHandleType
  = \ (ds_d88Ox :: HandleType) ->
      case ds_d88Ox of {
        __DEFAULT -> GHC.Types.False;
        ReadHandle -> GHC.Types.True;
        ReadWriteHandle -> GHC.Types.True
      }

-- RHS size: {terms: 11, types: 2, coercions: 0, joins: 0/0}
isWritableHandleType :: HandleType -> Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d88Om [Occ=Once!] :: HandleType) ->
                 case ds_d88Om of {
                   __DEFAULT -> GHC.Types.False;
                   WriteHandle -> GHC.Types.True;
                   AppendHandle -> GHC.Types.True;
                   ReadWriteHandle -> GHC.Types.True
                 }}]
isWritableHandleType
  = \ (ds_d88Om :: HandleType) ->
      case ds_d88Om of {
        __DEFAULT -> GHC.Types.False;
        WriteHandle -> GHC.Types.True;
        AppendHandle -> GHC.Types.True;
        ReadWriteHandle -> GHC.Types.True
      }

-- RHS size: {terms: 7, types: 2, coercions: 0, joins: 0/0}
isReadWriteHandleType :: HandleType -> Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d88Ob [Occ=Once!] :: HandleType) ->
                 case ds_d88Ob of {
                   __DEFAULT -> GHC.Types.False;
                   ReadWriteHandle -> GHC.Types.True
                 }}]
isReadWriteHandleType
  = \ (ds_d88Ob :: HandleType) ->
      case ds_d88Ob of {
        __DEFAULT -> GHC.Types.False;
        ReadWriteHandle -> GHC.Types.True
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
nativeNewline :: Newline
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.Types.LF}]
nativeNewline = GHC.IO.Handle.Types.LF

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
universalNewlineMode :: NewlineMode
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
universalNewlineMode
  = GHC.IO.Handle.Types.NewlineMode
      GHC.IO.Handle.Types.CRLF GHC.IO.Handle.Types.LF

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
nativeNewlineMode :: NewlineMode
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
nativeNewlineMode
  = GHC.IO.Handle.Types.NewlineMode
      GHC.IO.Handle.Types.LF GHC.IO.Handle.Types.LF

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
noNewlineTranslation :: NewlineMode
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
noNewlineTranslation = nativeNewlineMode

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.showHandle1 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Handle.Types.showHandle1 = "{handle: "#

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
showHandle :: FilePath -> String -> String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 90 0}]
showHandle
  = \ (file_a88u8 :: FilePath) (eta_B1 :: String) ->
      unpackAppendCString#
        GHC.IO.Handle.Types.showHandle1
        (++
           @ Char
           file_a88u8
           (unpackAppendCString#
              GHC.IO.Handle.Types.$fReadNewlineMode5 eta_B1))

-- RHS size: {terms: 13, types: 15, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowHandle_$cshowsPrec
  :: Int -> Handle -> ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ _ [Occ=Dead]
                 (ds1_d88SF [Occ=Once!] :: Handle)
                 (eta_B1 [Occ=Once*] :: String) ->
                 case ds1_d88SF of {
                   FileHandle file_a88u1 [Occ=Once] _ [Occ=Dead] ->
                     showHandle file_a88u1 eta_B1;
                   DuplexHandle file_a88u2 [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] ->
                     showHandle file_a88u2 eta_B1
                 }}]
GHC.IO.Handle.Types.$fShowHandle_$cshowsPrec
  = \ _ [Occ=Dead] (ds1_d88SF :: Handle) (eta_B1 :: String) ->
      case ds1_d88SF of {
        FileHandle file_a88u1 dt_d88Ur -> showHandle file_a88u1 eta_B1;
        DuplexHandle file_a88u2 dt_d88Us dt1_d88Ut ->
          showHandle file_a88u2 eta_B1
      }

-- RHS size: {terms: 15, types: 15, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowHandle_$cshow :: Handle -> String
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [90] 140 0}]
GHC.IO.Handle.Types.$fShowHandle_$cshow
  = \ (x_i7Jay :: Handle) ->
      case x_i7Jay of {
        FileHandle file_a88u1 dt_d88Ur ->
          unpackAppendCString#
            GHC.IO.Handle.Types.showHandle1
            (++ @ Char file_a88u1 GHC.IO.Handle.Types.$fReadNewlineMode4);
        DuplexHandle file_a88u2 dt_d88Us dt1_d88Ut ->
          unpackAppendCString#
            GHC.IO.Handle.Types.showHandle1
            (++ @ Char file_a88u2 GHC.IO.Handle.Types.$fReadNewlineMode4)
      }

-- RHS size: {terms: 12, types: 14, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowHandle1 :: Handle -> ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d88SF [Occ=Once!] :: Handle)
                 (eta_B1 [Occ=Once*] :: String) ->
                 case ds_d88SF of {
                   FileHandle file_a88u1 [Occ=Once] _ [Occ=Dead] ->
                     showHandle file_a88u1 eta_B1;
                   DuplexHandle file_a88u2 [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] ->
                     showHandle file_a88u2 eta_B1
                 }}]
GHC.IO.Handle.Types.$fShowHandle1
  = \ (ds_d88SF :: Handle) (eta_B1 :: String) ->
      case ds_d88SF of {
        FileHandle file_a88u1 dt_d88Ur -> showHandle file_a88u1 eta_B1;
        DuplexHandle file_a88u2 dt_d88Us dt1_d88Ut ->
          showHandle file_a88u2 eta_B1
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowHandle_$cshowList :: [Handle] -> ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7JaB [Occ=Once] :: [Handle])
                 (s_i7JaC [Occ=Once] :: String) ->
                 showList__
                   @ Handle GHC.IO.Handle.Types.$fShowHandle1 ls_i7JaB s_i7JaC}]
GHC.IO.Handle.Types.$fShowHandle_$cshowList
  = \ (ls_i7JaB :: [Handle]) (s_i7JaC :: String) ->
      showList__
        @ Handle GHC.IO.Handle.Types.$fShowHandle1 ls_i7JaB s_i7JaC

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$fShowHandle [InlPrag=NOUSERINLINE CONLIKE]
  :: Show Handle
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: Handle
                       GHC.IO.Handle.Types.$fShowHandle_$cshowsPrec
                       GHC.IO.Handle.Types.$fShowHandle_$cshow
                       GHC.IO.Handle.Types.$fShowHandle_$cshowList]
GHC.IO.Handle.Types.$fShowHandle
  = GHC.Show.C:Show
      @ Handle
      GHC.IO.Handle.Types.$fShowHandle_$cshowsPrec
      GHC.IO.Handle.Types.$fShowHandle_$cshow
      GHC.IO.Handle.Types.$fShowHandle_$cshowList

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$trModule4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.Types.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$trModule3 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Types.$trModule3
  = GHC.Types.TrNameS GHC.IO.Handle.Types.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$trModule2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
GHC.IO.Handle.Types.$trModule2 = "GHC.IO.Handle.Types"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$trModule1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Types.$trModule1
  = GHC.Types.TrNameS GHC.IO.Handle.Types.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$trModule :: Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Handle.Types.$trModule
  = GHC.Types.Module
      GHC.IO.Handle.Types.$trModule3 GHC.IO.Handle.Types.$trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_r8a59 :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep_r8a59
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcInt (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1_r8a5a :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep1_r8a5a
  = GHC.Types.KindRepTyConApp
      GHC.IO.Encoding.Types.$tcTextEncoding (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep2_r8a5b :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep2_r8a5b
  = GHC.Types.KindRepTyConApp
      GHC.Word.$tcWord8 (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep3_r8a5c :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep3_r8a5c
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcChar (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep4_r8a5d :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep4_r8a5d
  = GHC.Types.: @ KindRep $krep_r8a59 (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep5_r8a5e :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep5_r8a5e
  = GHC.Types.KindRepTyConApp GHC.Base.$tcMaybe $krep4_r8a5d

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep6_r8a5f :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep6_r8a5f
  = GHC.Types.: @ KindRep $krep1_r8a5a (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep7_r8a5g :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep7_r8a5g
  = GHC.Types.KindRepTyConApp GHC.Base.$tcMaybe $krep6_r8a5f

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep8_r8a5h :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep8_r8a5h
  = GHC.Types.: @ KindRep $krep3_r8a5c (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep9_r8a5i :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep9_r8a5i
  = GHC.Types.KindRepTyConApp GHC.IO.Buffer.$tcBuffer $krep8_r8a5h

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep10_r8a5j :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep10_r8a5j
  = GHC.Types.: @ KindRep $krep9_r8a5i (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep11_r8a5k :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep11_r8a5k
  = GHC.Types.KindRepTyConApp GHC.IORef.$tcIORef $krep10_r8a5j

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep12_r8a5l :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep12_r8a5l
  = GHC.Types.: @ KindRep $krep2_r8a5b (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep13_r8a5m :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep13_r8a5m
  = GHC.Types.KindRepTyConApp GHC.IO.Buffer.$tcBuffer $krep12_r8a5l

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep14_r8a5n :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep14_r8a5n
  = GHC.Types.: @ KindRep $krep13_r8a5m (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep15_r8a5o :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep15_r8a5o
  = GHC.Types.KindRepTyConApp GHC.IORef.$tcIORef $krep14_r8a5n

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep16_r8a5p :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep16_r8a5p
  = GHC.Types.KindRepTyConApp GHC.Types.$tc[] $krep8_r8a5h

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep17_r8a5q :: KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep17_r8a5q = GHC.Types.KindRepVar 2#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep18_r8a5r :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep18_r8a5r
  = GHC.Types.: @ KindRep $krep17_r8a5q (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep19_r8a5s :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep19_r8a5s = GHC.Types.: @ KindRep $krep3_r8a5c $krep18_r8a5r

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep20_r8a5t :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep20_r8a5t = GHC.Types.: @ KindRep $krep2_r8a5b $krep19_r8a5s

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep21_r8a5u :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep21_r8a5u
  = GHC.Types.KindRepTyConApp
      GHC.IO.Encoding.Types.$tcBufferCodec $krep20_r8a5t

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep22_r8a5v :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep22_r8a5v
  = GHC.Types.: @ KindRep $krep21_r8a5u (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep23_r8a5w :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep23_r8a5w
  = GHC.Types.KindRepTyConApp GHC.Base.$tcMaybe $krep22_r8a5v

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep24_r8a5x :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep24_r8a5x = GHC.Types.: @ KindRep $krep17_r8a5q $krep14_r8a5n

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep25_r8a5y :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep25_r8a5y
  = GHC.Types.KindRepTyConApp GHC.Tuple.$tc(,) $krep24_r8a5x

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep26_r8a5z :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep26_r8a5z
  = GHC.Types.: @ KindRep $krep25_r8a5y (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep27_r8a5A :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep27_r8a5A
  = GHC.Types.KindRepTyConApp GHC.IORef.$tcIORef $krep26_r8a5z

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep28_r8a5B :: KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep28_r8a5B = GHC.Types.KindRepVar 1#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep29_r8a5C :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep29_r8a5C
  = GHC.Types.: @ KindRep $krep28_r8a5B (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep30_r8a5D :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep30_r8a5D = GHC.Types.: @ KindRep $krep2_r8a5b $krep29_r8a5C

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep31_r8a5E :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep31_r8a5E = GHC.Types.: @ KindRep $krep3_r8a5c $krep30_r8a5D

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep32_r8a5F :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep32_r8a5F
  = GHC.Types.KindRepTyConApp
      GHC.IO.Encoding.Types.$tcBufferCodec $krep31_r8a5E

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep33_r8a5G :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep33_r8a5G
  = GHC.Types.: @ KindRep $krep32_r8a5F (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep34_r8a5H :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep34_r8a5H
  = GHC.Types.KindRepTyConApp GHC.Base.$tcMaybe $krep33_r8a5G

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep35_r8a5I :: KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep35_r8a5I = GHC.Types.KindRepVar 0#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep36_r8a5J :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep36_r8a5J
  = GHC.Types.: @ KindRep $krep35_r8a5I (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep37_r8a5K :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep37_r8a5K
  = GHC.Types.KindRepTyConApp
      GHC.ForeignPtr.$tcForeignPtr $krep36_r8a5J

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep38_r8a5L :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep38_r8a5L
  = GHC.Types.: @ KindRep GHC.Types.krep$* $krep36_r8a5J

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep39_r8a5M :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep39_r8a5M
  = GHC.Types.KindRepTyConApp
      Data.Typeable.Internal.$tcTypeable $krep38_r8a5L

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep40_r8a5N :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep40_r8a5N
  = GHC.Types.KindRepTyConApp GHC.IO.Device.$tcIODevice $krep36_r8a5J

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep41_r8a5O :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep41_r8a5O
  = GHC.Types.KindRepTyConApp
      GHC.IO.BufferedIO.$tcBufferedIO $krep36_r8a5J

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tcBufferList2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Handle.Types.$tcBufferList2 = "BufferList"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tcBufferList1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Types.$tcBufferList1
  = GHC.Types.TrNameS GHC.IO.Handle.Types.$tcBufferList2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tcBufferList :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Handle.Types.$tcBufferList
  = GHC.Types.TyCon
      16602278556585116844##
      18164509953320487254##
      GHC.IO.Handle.Types.$trModule
      GHC.IO.Handle.Types.$tcBufferList1
      0#
      GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'BufferListNil1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
GHC.IO.Handle.Types.$tc'BufferListNil1
  = GHC.Types.KindRepTyConApp
      GHC.IO.Handle.Types.$tcBufferList $krep36_r8a5J

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'BufferListNil3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Handle.Types.$tc'BufferListNil3 = "'BufferListNil"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'BufferListNil2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Types.$tc'BufferListNil2
  = GHC.Types.TrNameS GHC.IO.Handle.Types.$tc'BufferListNil3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'BufferListNil :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Handle.Types.$tc'BufferListNil
  = GHC.Types.TyCon
      1776148480580179033##
      13181184993065174936##
      GHC.IO.Handle.Types.$trModule
      GHC.IO.Handle.Types.$tc'BufferListNil2
      1#
      GHC.IO.Handle.Types.$tc'BufferListNil1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep42_r8a5P :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep42_r8a5P
  = GHC.Types.KindRepFun
      GHC.IO.Handle.Types.$tc'BufferListNil1
      GHC.IO.Handle.Types.$tc'BufferListNil1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'BufferListCons1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.IO.Handle.Types.$tc'BufferListCons1
  = GHC.Types.KindRepFun $krep37_r8a5K $krep42_r8a5P

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'BufferListCons3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Handle.Types.$tc'BufferListCons3 = "'BufferListCons"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'BufferListCons2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Types.$tc'BufferListCons2
  = GHC.Types.TrNameS GHC.IO.Handle.Types.$tc'BufferListCons3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'BufferListCons :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Handle.Types.$tc'BufferListCons
  = GHC.Types.TyCon
      17252346539814354939##
      274626690118510806##
      GHC.IO.Handle.Types.$trModule
      GHC.IO.Handle.Types.$tc'BufferListCons2
      1#
      GHC.IO.Handle.Types.$tc'BufferListCons1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep43_r8a5Q :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep43_r8a5Q
  = GHC.Types.KindRepTyConApp
      GHC.IO.Handle.Types.$tcBufferList $krep8_r8a5h

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep44_r8a5R :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep44_r8a5R
  = GHC.Types.: @ KindRep $krep43_r8a5Q (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep45_r8a5S :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep45_r8a5S
  = GHC.Types.KindRepTyConApp GHC.IORef.$tcIORef $krep44_r8a5R

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tcHandleType2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Handle.Types.$tcHandleType2 = "HandleType"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tcHandleType1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Types.$tcHandleType1
  = GHC.Types.TrNameS GHC.IO.Handle.Types.$tcHandleType2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tcHandleType :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Handle.Types.$tcHandleType
  = GHC.Types.TyCon
      12652050740177317592##
      15012172050125063359##
      GHC.IO.Handle.Types.$trModule
      GHC.IO.Handle.Types.$tcHandleType1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'AppendHandle1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
GHC.IO.Handle.Types.$tc'AppendHandle1
  = GHC.Types.KindRepTyConApp
      GHC.IO.Handle.Types.$tcHandleType (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'ClosedHandle2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Handle.Types.$tc'ClosedHandle2 = "'ClosedHandle"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'ClosedHandle1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Types.$tc'ClosedHandle1
  = GHC.Types.TrNameS GHC.IO.Handle.Types.$tc'ClosedHandle2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'ClosedHandle :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Handle.Types.$tc'ClosedHandle
  = GHC.Types.TyCon
      3827246897052092772##
      908733983357893198##
      GHC.IO.Handle.Types.$trModule
      GHC.IO.Handle.Types.$tc'ClosedHandle1
      0#
      GHC.IO.Handle.Types.$tc'AppendHandle1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'SemiClosedHandle2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
GHC.IO.Handle.Types.$tc'SemiClosedHandle2 = "'SemiClosedHandle"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'SemiClosedHandle1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Types.$tc'SemiClosedHandle1
  = GHC.Types.TrNameS GHC.IO.Handle.Types.$tc'SemiClosedHandle2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'SemiClosedHandle :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Handle.Types.$tc'SemiClosedHandle
  = GHC.Types.TyCon
      9212351547956271402##
      6570718180183054490##
      GHC.IO.Handle.Types.$trModule
      GHC.IO.Handle.Types.$tc'SemiClosedHandle1
      0#
      GHC.IO.Handle.Types.$tc'AppendHandle1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'ReadHandle2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Handle.Types.$tc'ReadHandle2 = "'ReadHandle"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'ReadHandle1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Types.$tc'ReadHandle1
  = GHC.Types.TrNameS GHC.IO.Handle.Types.$tc'ReadHandle2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'ReadHandle :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Handle.Types.$tc'ReadHandle
  = GHC.Types.TyCon
      269968663592081974##
      17473723309710900549##
      GHC.IO.Handle.Types.$trModule
      GHC.IO.Handle.Types.$tc'ReadHandle1
      0#
      GHC.IO.Handle.Types.$tc'AppendHandle1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'WriteHandle2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Handle.Types.$tc'WriteHandle2 = "'WriteHandle"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'WriteHandle1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Types.$tc'WriteHandle1
  = GHC.Types.TrNameS GHC.IO.Handle.Types.$tc'WriteHandle2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'WriteHandle :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Handle.Types.$tc'WriteHandle
  = GHC.Types.TyCon
      18024523813608199082##
      4783872735135983851##
      GHC.IO.Handle.Types.$trModule
      GHC.IO.Handle.Types.$tc'WriteHandle1
      0#
      GHC.IO.Handle.Types.$tc'AppendHandle1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'AppendHandle3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Handle.Types.$tc'AppendHandle3 = "'AppendHandle"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'AppendHandle2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Types.$tc'AppendHandle2
  = GHC.Types.TrNameS GHC.IO.Handle.Types.$tc'AppendHandle3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'AppendHandle :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Handle.Types.$tc'AppendHandle
  = GHC.Types.TyCon
      18423480119042393547##
      8911069045719960050##
      GHC.IO.Handle.Types.$trModule
      GHC.IO.Handle.Types.$tc'AppendHandle2
      0#
      GHC.IO.Handle.Types.$tc'AppendHandle1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'ReadWriteHandle2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Handle.Types.$tc'ReadWriteHandle2 = "'ReadWriteHandle"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'ReadWriteHandle1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Types.$tc'ReadWriteHandle1
  = GHC.Types.TrNameS GHC.IO.Handle.Types.$tc'ReadWriteHandle2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'ReadWriteHandle :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Handle.Types.$tc'ReadWriteHandle
  = GHC.Types.TyCon
      6962298179673541916##
      7858738479804269456##
      GHC.IO.Handle.Types.$trModule
      GHC.IO.Handle.Types.$tc'ReadWriteHandle1
      0#
      GHC.IO.Handle.Types.$tc'AppendHandle1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tcBufferMode2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Handle.Types.$tcBufferMode2 = "BufferMode"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tcBufferMode1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Types.$tcBufferMode1
  = GHC.Types.TrNameS GHC.IO.Handle.Types.$tcBufferMode2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tcBufferMode :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Handle.Types.$tcBufferMode
  = GHC.Types.TyCon
      2181253694666364469##
      18094997560331273583##
      GHC.IO.Handle.Types.$trModule
      GHC.IO.Handle.Types.$tcBufferMode1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'LineBuffering1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
GHC.IO.Handle.Types.$tc'LineBuffering1
  = GHC.Types.KindRepTyConApp
      GHC.IO.Handle.Types.$tcBufferMode (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'NoBuffering2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Handle.Types.$tc'NoBuffering2 = "'NoBuffering"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'NoBuffering1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Types.$tc'NoBuffering1
  = GHC.Types.TrNameS GHC.IO.Handle.Types.$tc'NoBuffering2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'NoBuffering :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Handle.Types.$tc'NoBuffering
  = GHC.Types.TyCon
      1829914617507863771##
      11519122601481432262##
      GHC.IO.Handle.Types.$trModule
      GHC.IO.Handle.Types.$tc'NoBuffering1
      0#
      GHC.IO.Handle.Types.$tc'LineBuffering1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'LineBuffering3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Handle.Types.$tc'LineBuffering3 = "'LineBuffering"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'LineBuffering2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Types.$tc'LineBuffering2
  = GHC.Types.TrNameS GHC.IO.Handle.Types.$tc'LineBuffering3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'LineBuffering :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Handle.Types.$tc'LineBuffering
  = GHC.Types.TyCon
      6417231512954421547##
      14761155862500981941##
      GHC.IO.Handle.Types.$trModule
      GHC.IO.Handle.Types.$tc'LineBuffering2
      0#
      GHC.IO.Handle.Types.$tc'LineBuffering1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'BlockBuffering1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.IO.Handle.Types.$tc'BlockBuffering1
  = GHC.Types.KindRepFun
      $krep5_r8a5e GHC.IO.Handle.Types.$tc'LineBuffering1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'BlockBuffering3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Handle.Types.$tc'BlockBuffering3 = "'BlockBuffering"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'BlockBuffering2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Types.$tc'BlockBuffering2
  = GHC.Types.TrNameS GHC.IO.Handle.Types.$tc'BlockBuffering3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'BlockBuffering :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Handle.Types.$tc'BlockBuffering
  = GHC.Types.TyCon
      704611490471072872##
      15656058643765081689##
      GHC.IO.Handle.Types.$trModule
      GHC.IO.Handle.Types.$tc'BlockBuffering2
      0#
      GHC.IO.Handle.Types.$tc'BlockBuffering1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tcNewline2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Handle.Types.$tcNewline2 = "Newline"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tcNewline1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Types.$tcNewline1
  = GHC.Types.TrNameS GHC.IO.Handle.Types.$tcNewline2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tcNewline :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Handle.Types.$tcNewline
  = GHC.Types.TyCon
      4144517894815066994##
      10872055347860317487##
      GHC.IO.Handle.Types.$trModule
      GHC.IO.Handle.Types.$tcNewline1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'CRLF1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
GHC.IO.Handle.Types.$tc'CRLF1
  = GHC.Types.KindRepTyConApp
      GHC.IO.Handle.Types.$tcNewline (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'LF2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.Types.$tc'LF2 = "'LF"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'LF1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Types.$tc'LF1
  = GHC.Types.TrNameS GHC.IO.Handle.Types.$tc'LF2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'LF :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Handle.Types.$tc'LF
  = GHC.Types.TyCon
      8352565500432618804##
      14951155965269318914##
      GHC.IO.Handle.Types.$trModule
      GHC.IO.Handle.Types.$tc'LF1
      0#
      GHC.IO.Handle.Types.$tc'CRLF1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'CRLF3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Handle.Types.$tc'CRLF3 = "'CRLF"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'CRLF2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Types.$tc'CRLF2
  = GHC.Types.TrNameS GHC.IO.Handle.Types.$tc'CRLF3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'CRLF :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Handle.Types.$tc'CRLF
  = GHC.Types.TyCon
      12041259567283068515##
      3210182148185771829##
      GHC.IO.Handle.Types.$trModule
      GHC.IO.Handle.Types.$tc'CRLF2
      0#
      GHC.IO.Handle.Types.$tc'CRLF1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tcHandle__2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Handle.Types.$tcHandle__2 = "Handle__"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tcHandle__1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Types.$tcHandle__1
  = GHC.Types.TrNameS GHC.IO.Handle.Types.$tcHandle__2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tcHandle__ :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Handle.Types.$tcHandle__
  = GHC.Types.TyCon
      10675922960094776064##
      10563785792974977547##
      GHC.IO.Handle.Types.$trModule
      GHC.IO.Handle.Types.$tcHandle__1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep46_r8a5T :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep46_r8a5T
  = GHC.Types.KindRepTyConApp
      GHC.IO.Handle.Types.$tcHandle__ (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep47_r8a5U :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep47_r8a5U
  = GHC.Types.: @ KindRep $krep46_r8a5T (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep48_r8a5V :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep48_r8a5V
  = GHC.Types.KindRepTyConApp GHC.MVar.$tcMVar $krep47_r8a5U

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep49_r8a5W :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep49_r8a5W
  = GHC.Types.: @ KindRep $krep48_r8a5V (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep50_r8a5X :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep50_r8a5X
  = GHC.Types.KindRepTyConApp GHC.Base.$tcMaybe $krep49_r8a5W

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep51_r8a5Y :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep51_r8a5Y = GHC.Types.KindRepFun $krep50_r8a5X $krep46_r8a5T

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep52_r8a5Z :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep52_r8a5Z
  = GHC.Types.KindRepFun GHC.IO.Handle.Types.$tc'CRLF1 $krep51_r8a5Y

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep53_r8a60 :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep53_r8a60
  = GHC.Types.KindRepFun GHC.IO.Handle.Types.$tc'CRLF1 $krep52_r8a5Z

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep54_r8a61 :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep54_r8a61 = GHC.Types.KindRepFun $krep7_r8a5g $krep53_r8a60

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep55_r8a62 :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep55_r8a62 = GHC.Types.KindRepFun $krep23_r8a5w $krep54_r8a61

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep56_r8a63 :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep56_r8a63 = GHC.Types.KindRepFun $krep34_r8a5H $krep55_r8a62

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep57_r8a64 :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep57_r8a64 = GHC.Types.KindRepFun $krep45_r8a5S $krep56_r8a63

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep58_r8a65 :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep58_r8a65 = GHC.Types.KindRepFun $krep11_r8a5k $krep57_r8a64

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep59_r8a66 :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep59_r8a66 = GHC.Types.KindRepFun $krep27_r8a5A $krep58_r8a65

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep60_r8a67 :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep60_r8a67
  = GHC.Types.KindRepFun
      GHC.IO.Handle.Types.$tc'LineBuffering1 $krep59_r8a66

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep61_r8a68 :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep61_r8a68 = GHC.Types.KindRepFun $krep15_r8a5o $krep60_r8a67

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep62_r8a69 :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep62_r8a69
  = GHC.Types.KindRepFun
      GHC.IO.Handle.Types.$tc'AppendHandle1 $krep61_r8a68

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep63_r8a6a :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep63_r8a6a = GHC.Types.KindRepFun $krep35_r8a5I $krep62_r8a69

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep64_r8a6b :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep64_r8a6b = GHC.Types.KindRepFun $krep39_r8a5M $krep63_r8a6a

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep65_r8a6c :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep65_r8a6c = GHC.Types.KindRepFun $krep41_r8a5O $krep64_r8a6b

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'Handle__1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.IO.Handle.Types.$tc'Handle__1
  = GHC.Types.KindRepFun $krep40_r8a5N $krep65_r8a6c

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'Handle__3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Handle.Types.$tc'Handle__3 = "'Handle__"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'Handle__2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Types.$tc'Handle__2
  = GHC.Types.TrNameS GHC.IO.Handle.Types.$tc'Handle__3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'Handle__ :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Handle.Types.$tc'Handle__
  = GHC.Types.TyCon
      15400920814375205416##
      14458810719499819570##
      GHC.IO.Handle.Types.$trModule
      GHC.IO.Handle.Types.$tc'Handle__2
      3#
      GHC.IO.Handle.Types.$tc'Handle__1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tcHandle2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Handle.Types.$tcHandle2 = "Handle"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tcHandle1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Types.$tcHandle1
  = GHC.Types.TrNameS GHC.IO.Handle.Types.$tcHandle2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tcHandle :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Handle.Types.$tcHandle
  = GHC.Types.TyCon
      6808292778723485333##
      9239299165073943659##
      GHC.IO.Handle.Types.$trModule
      GHC.IO.Handle.Types.$tcHandle1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep66_r8a6d :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep66_r8a6d
  = GHC.Types.KindRepTyConApp
      GHC.IO.Handle.Types.$tcHandle (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep67_r8a6e :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep67_r8a6e = GHC.Types.KindRepFun $krep48_r8a5V $krep66_r8a6d

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep68_r8a6f :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep68_r8a6f = GHC.Types.KindRepFun $krep48_r8a5V $krep67_r8a6e

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'DuplexHandle1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.IO.Handle.Types.$tc'DuplexHandle1
  = GHC.Types.KindRepFun $krep16_r8a5p $krep68_r8a6f

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'DuplexHandle3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Handle.Types.$tc'DuplexHandle3 = "'DuplexHandle"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'DuplexHandle2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Types.$tc'DuplexHandle2
  = GHC.Types.TrNameS GHC.IO.Handle.Types.$tc'DuplexHandle3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'DuplexHandle :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Handle.Types.$tc'DuplexHandle
  = GHC.Types.TyCon
      477065760828861081##
      4557316572761143129##
      GHC.IO.Handle.Types.$trModule
      GHC.IO.Handle.Types.$tc'DuplexHandle2
      0#
      GHC.IO.Handle.Types.$tc'DuplexHandle1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'FileHandle1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.IO.Handle.Types.$tc'FileHandle1
  = GHC.Types.KindRepFun $krep16_r8a5p $krep67_r8a6e

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'FileHandle3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Handle.Types.$tc'FileHandle3 = "'FileHandle"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'FileHandle2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Types.$tc'FileHandle2
  = GHC.Types.TrNameS GHC.IO.Handle.Types.$tc'FileHandle3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'FileHandle :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Handle.Types.$tc'FileHandle
  = GHC.Types.TyCon
      5544613225695748436##
      8829945929965735507##
      GHC.IO.Handle.Types.$trModule
      GHC.IO.Handle.Types.$tc'FileHandle2
      0#
      GHC.IO.Handle.Types.$tc'FileHandle1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tcNewlineMode1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Types.$tcNewlineMode1
  = GHC.Types.TrNameS GHC.IO.Handle.Types.$fReadNewlineMode17

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tcNewlineMode :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Handle.Types.$tcNewlineMode
  = GHC.Types.TyCon
      17953040817059389032##
      12498949339099960838##
      GHC.IO.Handle.Types.$trModule
      GHC.IO.Handle.Types.$tcNewlineMode1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep69_r8a6g :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep69_r8a6g
  = GHC.Types.KindRepTyConApp
      GHC.IO.Handle.Types.$tcNewlineMode (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep70_r8a6h :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep70_r8a6h
  = GHC.Types.KindRepFun GHC.IO.Handle.Types.$tc'CRLF1 $krep69_r8a6g

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'NewlineMode1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.IO.Handle.Types.$tc'NewlineMode1
  = GHC.Types.KindRepFun GHC.IO.Handle.Types.$tc'CRLF1 $krep70_r8a6h

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'NewlineMode3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Handle.Types.$tc'NewlineMode3 = "'NewlineMode"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'NewlineMode2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Types.$tc'NewlineMode2
  = GHC.Types.TrNameS GHC.IO.Handle.Types.$tc'NewlineMode3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.$tc'NewlineMode :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Handle.Types.$tc'NewlineMode
  = GHC.Types.TyCon
      4266278501114659446##
      17947462423734457010##
      GHC.IO.Handle.Types.$trModule
      GHC.IO.Handle.Types.$tc'NewlineMode2
      0#
      GHC.IO.Handle.Types.$tc'NewlineMode1

-- RHS size: {terms: 5, types: 10, coercions: 0, joins: 0/0}
GHC.IO.Handle.Types.checkHandleInvariants1
  :: Handle__ -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead] (s_i7IAV [Occ=Once] :: State# RealWorld) ->
                 (# s_i7IAV, GHC.Tuple.() #)}]
GHC.IO.Handle.Types.checkHandleInvariants1
  = \ _ [Occ=Dead] (s_i7IAV :: State# RealWorld) ->
      (# s_i7IAV, GHC.Tuple.() #)

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
checkHandleInvariants :: Handle__ -> IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.Types.checkHandleInvariants1
               `cast` (<Handle__>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (Handle__
                           -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (Handle__ -> IO () :: *))}]
checkHandleInvariants
  = GHC.IO.Handle.Types.checkHandleInvariants1
    `cast` (<Handle__>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (Handle__
                -> State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# (Handle__ -> IO () :: *))


