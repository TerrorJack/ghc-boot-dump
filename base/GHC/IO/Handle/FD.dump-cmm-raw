
==================== Raw Cmm ====================
2018-03-16 16:06:12.138914322 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:06:12.141562108 UTC

[section ""data" . GHC.IO.Handle.FD.fdToHandle12_closure" {
     GHC.IO.Handle.FD.fdToHandle12_closure:
         const GHC.IO.Handle.FD.fdToHandle12_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.FD.fdToHandle12_entry() //  [R1]
         { []
         }
     {offset
       cbgp3: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cbgp4; else goto cbgp5;
       cbgp4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbgp5: // global
           (_cbgoV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbgoV::I64 == 0) goto cbgoX; else goto cbgoW;
       cbgoX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbgoW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbgoV::I64;
           I64[Sp - 24] = block_cbgoY_info;
           R6 = 0;
           R5 = GHC.IO.FD.$tcFD1_closure;
           R4 = GHC.IO.FD.$trModule_closure;
           R3 = 15546290101957756376;
           R2 = 10838815552519039062;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.fdToHandle12_info" {
     GHC.IO.Handle.FD.fdToHandle12_info:
         const GHC.IO.Handle.FD.fdToHandle12_entry;
         const 0;
         const 4294967317;
         const SbfJE_srt;
 },
 _cbgoY() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cbgoY: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _cbgoZ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbgoY_info" {
     block_cbgoY_info:
         const _cbgoY;
         const 0;
         const 30;
 },
 _cbgoZ() //  []
         { []
         }
     {offset
       cbgoZ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbgp8; else goto cbgp7;
       cbgp8: // global
           HpAlloc = 48;
           I64[Sp] = block_cbgoZ_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       cbgp7: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbgoZ_info" {
     block_cbgoZ_info:
         const _cbgoZ;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.14835003 UTC

[section ""cstring" . GHC.IO.Handle.FD.$trModule4_bytes" {
     GHC.IO.Handle.FD.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.14999432 UTC

[section ""data" . GHC.IO.Handle.FD.$trModule3_closure" {
     GHC.IO.Handle.FD.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.FD.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.151628778 UTC

[section ""cstring" . GHC.IO.Handle.FD.$trModule2_bytes" {
     GHC.IO.Handle.FD.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,46,72,97,110,100,108,101,46,70,68]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.15323138 UTC

[section ""data" . GHC.IO.Handle.FD.$trModule1_closure" {
     GHC.IO.Handle.FD.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.FD.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.155167441 UTC

[section ""data" . GHC.IO.Handle.FD.$trModule_closure" {
     GHC.IO.Handle.FD.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.Handle.FD.$trModule3_closure+1;
         const GHC.IO.Handle.FD.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.156866768 UTC

[section ""cstring" . lvl_rbfCu_bytes" {
     lvl_rbfCu_bytes:
         I8[] [104,97,110,100,108,101,84,111,70,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.159166342 UTC

[section ""data" . lvl1_rbfCv_closure" {
     lvl1_rbfCv_closure:
         const lvl1_rbfCv_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_rbfCv_entry() //  [R1]
         { []
         }
     {offset
       cbgpG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbgpH; else goto cbgpI;
       cbgpH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbgpI: // global
           (_cbgpD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbgpD::I64 == 0) goto cbgpF; else goto cbgpE;
       cbgpF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbgpE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbgpD::I64;
           R2 = lvl_rbfCu_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_rbfCv_info" {
     lvl1_rbfCv_info:
         const lvl1_rbfCv_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.162632393 UTC

[section ""cstring" . lvl2_rbfCw_bytes" {
     lvl2_rbfCw_bytes:
         I8[] [110,111,116,32,97,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.164788168 UTC

[section ""data" . lvl3_rbfCx_closure" {
     lvl3_rbfCx_closure:
         const lvl3_rbfCx_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_rbfCx_entry() //  [R1]
         { []
         }
     {offset
       cbgpX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbgpY; else goto cbgpZ;
       cbgpY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbgpZ: // global
           (_cbgpU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbgpU::I64 == 0) goto cbgpW; else goto cbgpV;
       cbgpW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbgpV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbgpU::I64;
           R2 = lvl2_rbfCw_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_rbfCx_info" {
     lvl3_rbfCx_info:
         const lvl3_rbfCx_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.170914846 UTC

[section ""data" . GHC.IO.Handle.FD.handleToFd3_closure" {
     GHC.IO.Handle.FD.handleToFd3_closure:
         const GHC.IO.Handle.FD.handleToFd3_info;
         const 0;
 },
 sat_sbfCX_entry() //  [R1]
         { []
         }
     {offset
       cbgqh: // global
           _sbfCX::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbgqi; else goto cbgqj;
       cbgqj: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cbgql; else goto cbgqk;
       cbgql: // global
           HpAlloc = 72;
           goto cbgqi;
       cbgqi: // global
           R1 = _sbfCX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbgqk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbfCX::P64;
           _sbfCT::P64 = P64[_sbfCX::P64 + 16];
           I64[Hp - 64] = GHC.Base.Just_con_info;
           P64[Hp - 56] = _sbfCT::P64;
           I64[Hp - 48] = GHC.IO.Exception.IOError_con_info;
           P64[Hp - 40] = Hp - 62;
           P64[Hp - 32] = GHC.IO.Exception.InappropriateType_closure+1;
           P64[Hp - 24] = lvl1_rbfCv_closure;
           P64[Hp - 16] = lvl3_rbfCx_closure;
           P64[Hp - 8] = GHC.Base.Nothing_closure+1;
           P64[Hp] = GHC.Base.Nothing_closure+1;
           R2 = Hp - 47;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbfCX_info" {
     sat_sbfCX_info:
         const sat_sbfCX_entry;
         const 1;
         const 30064771088;
         const SbfJE_srt+8;
 },
 GHC.IO.Handle.FD.handleToFd3_entry() //  [R2]
         { []
         }
     {offset
       cbgqm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbgqq; else goto cbgqp;
       cbgqq: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Handle.FD.handleToFd3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbgqp: // global
           I64[Hp - 16] = sat_sbfCX_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.handleToFd3_info" {
     GHC.IO.Handle.FD.handleToFd3_info:
         const GHC.IO.Handle.FD.handleToFd3_entry;
         const 0;
         const 64424509454;
         const 8589934597;
         const SbfJE_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.176035783 UTC

[section ""cstring" . lvl4_rbfCy_bytes" {
     lvl4_rbfCy_bytes:
         I8[] [110,111,116,32,97,32,102,105,108,101,32,104,97,110,100,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.178655993 UTC

[section ""data" . lvl5_rbfCz_closure" {
     lvl5_rbfCz_closure:
         const lvl5_rbfCz_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_rbfCz_entry() //  [R1]
         { []
         }
     {offset
       cbgqH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbgqI; else goto cbgqJ;
       cbgqI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbgqJ: // global
           (_cbgqE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbgqE::I64 == 0) goto cbgqG; else goto cbgqF;
       cbgqG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbgqF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbgqE::I64;
           R2 = lvl4_rbfCy_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl5_rbfCz_info" {
     lvl5_rbfCz_info:
         const lvl5_rbfCz_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.183064922 UTC

[section ""data" . GHC.IO.Handle.FD.handleToFd2_closure" {
     GHC.IO.Handle.FD.handleToFd2_closure:
         const GHC.IO.Handle.FD.handleToFd2_info;
         const 0;
 },
 sat_sbfD2_entry() //  [R1]
         { []
         }
     {offset
       cbgr1: // global
           _sbfD2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbgr2; else goto cbgr3;
       cbgr3: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cbgr5; else goto cbgr4;
       cbgr5: // global
           HpAlloc = 72;
           goto cbgr2;
       cbgr2: // global
           R1 = _sbfD2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbgr4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbfD2::P64;
           _sbfCY::P64 = P64[_sbfD2::P64 + 16];
           I64[Hp - 64] = GHC.Base.Just_con_info;
           P64[Hp - 56] = _sbfCY::P64;
           I64[Hp - 48] = GHC.IO.Exception.IOError_con_info;
           P64[Hp - 40] = Hp - 62;
           P64[Hp - 32] = GHC.IO.Exception.InappropriateType_closure+1;
           P64[Hp - 24] = lvl1_rbfCv_closure;
           P64[Hp - 16] = lvl5_rbfCz_closure;
           P64[Hp - 8] = GHC.Base.Nothing_closure+1;
           P64[Hp] = GHC.Base.Nothing_closure+1;
           R2 = Hp - 47;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbfD2_info" {
     sat_sbfD2_info:
         const sat_sbfD2_entry;
         const 1;
         const 81604378640;
         const SbfJE_srt+8;
 },
 GHC.IO.Handle.FD.handleToFd2_entry() //  [R2]
         { []
         }
     {offset
       cbgr6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbgra; else goto cbgr9;
       cbgra: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Handle.FD.handleToFd2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbgr9: // global
           I64[Hp - 16] = sat_sbfD2_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.handleToFd2_info" {
     GHC.IO.Handle.FD.handleToFd2_info:
         const GHC.IO.Handle.FD.handleToFd2_entry;
         const 0;
         const 219043332110;
         const 8589934597;
         const SbfJE_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.190149312 UTC

[section ""data" . GHC.IO.Handle.FD.handleToFd1_closure" {
     GHC.IO.Handle.FD.handleToFd1_closure:
         const GHC.IO.Handle.FD.handleToFd1_info;
         const 0;
 },
 GHC.IO.Handle.FD.handleToFd1_entry() //  [R2]
         { []
         }
     {offset
       cbgrv: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbgrw; else goto cbgrx;
       cbgrw: // global
           R2 = R2;
           R1 = GHC.IO.Handle.FD.handleToFd1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbgrx: // global
           I64[Sp - 8] = block_cbgro_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubgrZ; else goto cbgrp;
       ubgrZ: // global
           call _cbgro(R1) args: 0, res: 0, upd: 0;
       cbgrp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.handleToFd1_info" {
     GHC.IO.Handle.FD.handleToFd1_info:
         const GHC.IO.Handle.FD.handleToFd1_entry;
         const 0;
         const 261993005070;
         const 8589934597;
         const SbfJE_srt+32;
 },
 _cbgro() //  [R1]
         { []
         }
     {offset
       cbgro: // global
           if (R1 & 7 == 1) goto cbgrs; else goto cbgrt;
       cbgrs: // global
           I64[Sp - 8] = block_cbgrA_info;
           _sbfD5::P64 = R1;
           R1 = P64[R1 + 15];
           P64[Sp] = _sbfD5::P64;
           Sp = Sp - 8;
           call stg_readMVar#(R1) args: 8, res: 8, upd: 8;
       cbgrt: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.IO.Handle.FD.handleToFd2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgro_info" {
     block_cbgro_info:
         const _cbgro;
         const 0;
         const 124554051614;
         const SbfJE_srt+32;
 },
 _cbgrA() //  [R1]
         { []
         }
     {offset
       cbgrA: // global
           I64[Sp] = block_cbgrC_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubgs0; else goto cbgrF;
       ubgs0: // global
           call _cbgrC(R1) args: 0, res: 0, upd: 0;
       cbgrF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgrA_info" {
     block_cbgrA_info:
         const _cbgrA;
         const 1;
         const 107374182430;
         const SbfJE_srt+32;
 },
 _cbgrC() //  [R1]
         { []
         }
     {offset
       cbgrC: // global
           I64[Sp - 8] = block_cbgrJ_info;
           R3 = GHC.IO.Handle.FD.fdToHandle12_closure;
           R2 = P64[R1 + 23];
           P64[Sp] = P64[R1 + 31];
           Sp = Sp - 8;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgrC_info" {
     block_cbgrC_info:
         const _cbgrC;
         const 1;
         const 107374182430;
         const SbfJE_srt+32;
 },
 _cbgrJ() //  [R1]
         { []
         }
     {offset
       cbgrJ: // global
           if (R1 & 7 == 1) goto cbgrQ; else goto cbgrU;
       cbgrQ: // global
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.IO.Handle.FD.handleToFd3_entry(R2) args: 8, res: 0, upd: 8;
       cbgrU: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgrJ_info" {
     block_cbgrJ_info:
         const _cbgrJ;
         const 2;
         const 4294967326;
         const SbfJE_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.199632001 UTC

[section ""data" . GHC.IO.Handle.FD.handleToFd_closure" {
     GHC.IO.Handle.FD.handleToFd_closure:
         const GHC.IO.Handle.FD.handleToFd_info;
         const 0;
 },
 GHC.IO.Handle.FD.handleToFd_entry() //  [R2]
         { []
         }
     {offset
       cbgsu: // global
           R2 = R2;
           call GHC.IO.Handle.FD.handleToFd1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.handleToFd_info" {
     GHC.IO.Handle.FD.handleToFd_info:
         const GHC.IO.Handle.FD.handleToFd_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbfJE_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.202819388 UTC

[section ""cstring" . GHC.IO.Handle.FD.fdToHandle11_bytes" {
     GHC.IO.Handle.FD.fdToHandle11_bytes:
         I8[] [111,112,101,110,70,105,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.205473496 UTC

[section ""data" . GHC.IO.Handle.FD.fdToHandle10_closure" {
     GHC.IO.Handle.FD.fdToHandle10_closure:
         const GHC.IO.Handle.FD.fdToHandle10_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.FD.fdToHandle10_entry() //  [R1]
         { []
         }
     {offset
       cbgsI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbgsJ; else goto cbgsK;
       cbgsJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbgsK: // global
           (_cbgsF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbgsF::I64 == 0) goto cbgsH; else goto cbgsG;
       cbgsH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbgsG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbgsF::I64;
           R2 = GHC.IO.Handle.FD.fdToHandle11_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.fdToHandle10_info" {
     GHC.IO.Handle.FD.fdToHandle10_info:
         const GHC.IO.Handle.FD.fdToHandle10_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.208998888 UTC

[section ""cstring" . GHC.IO.Handle.FD.fdToHandle9_bytes" {
     GHC.IO.Handle.FD.fdToHandle9_bytes:
         I8[] [105,115,32,97,32,100,105,114,101,99,116,111,114,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.211177897 UTC

[section ""data" . GHC.IO.Handle.FD.fdToHandle8_closure" {
     GHC.IO.Handle.FD.fdToHandle8_closure:
         const GHC.IO.Handle.FD.fdToHandle8_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.FD.fdToHandle8_entry() //  [R1]
         { []
         }
     {offset
       cbgsZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbgt0; else goto cbgt1;
       cbgt0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbgt1: // global
           (_cbgsW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbgsW::I64 == 0) goto cbgsY; else goto cbgsX;
       cbgsY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbgsX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbgsW::I64;
           R2 = GHC.IO.Handle.FD.fdToHandle9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.fdToHandle8_info" {
     GHC.IO.Handle.FD.fdToHandle8_info:
         const GHC.IO.Handle.FD.fdToHandle8_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.215193406 UTC

[section ""data" . GHC.IO.Handle.FD.fdToHandle7_closure" {
     GHC.IO.Handle.FD.fdToHandle7_closure:
         const GHC.IO.Exception.IOError_con_info;
         const GHC.Base.Nothing_closure+1;
         const GHC.IO.Exception.InappropriateType_closure+1;
         const GHC.IO.Handle.FD.fdToHandle10_closure;
         const GHC.IO.Handle.FD.fdToHandle8_closure;
         const GHC.Base.Nothing_closure+1;
         const GHC.Base.Nothing_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.217550552 UTC

[section ""data" . GHC.IO.Handle.FD.fdToHandle6_closure" {
     GHC.IO.Handle.FD.fdToHandle6_closure:
         const GHC.IO.Handle.FD.fdToHandle6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.FD.fdToHandle6_entry() //  [R1]
         { []
         }
     {offset
       cbgtg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbgth; else goto cbgti;
       cbgth: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbgti: // global
           (_cbgtd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbgtd::I64 == 0) goto cbgtf; else goto cbgte;
       cbgtf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbgte: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbgtd::I64;
           R2 = GHC.IO.Handle.FD.fdToHandle7_closure+1;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.fdToHandle6_info" {
     GHC.IO.Handle.FD.fdToHandle6_info:
         const GHC.IO.Handle.FD.fdToHandle6_entry;
         const 0;
         const 2203318222869;
         const SbfJE_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.22800751 UTC

[section ""data" . GHC.IO.Handle.FD.fdToHandle5_closure" {
     GHC.IO.Handle.FD.fdToHandle5_closure:
         const GHC.IO.Handle.FD.fdToHandle5_info;
         const 0;
 },
 nl_sbfDG_entry() //  [R1]
         { []
         }
     {offset
       cbgtG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbgtH; else goto cbgtI;
       cbgtH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbgtI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbgtD_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubgtM; else goto cbgtE;
       ubgtM: // global
           call _cbgtD() args: 0, res: 0, upd: 0;
       cbgtE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . nl_sbfDG_info" {
     nl_sbfDG_info:
         const nl_sbfDG_entry;
         const 1;
         const 16;
 },
 _cbgtD() //  []
         { []
         }
     {offset
       cbgtD: // global
           R1 = GHC.IO.Handle.Types.nativeNewlineMode_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbgtD_info" {
     block_cbgtD_info:
         const _cbgtD;
         const 0;
         const 30;
 },
 sat_sbfDL_entry() //  [R1]
         { []
         }
     {offset
       cbgu5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbgu6; else goto cbgu7;
       cbgu6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbgu7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbgtW_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubgum; else goto cbgtX;
       ubgum: // global
           call _cbgtW(R1) args: 0, res: 0, upd: 0;
       cbgtX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbfDL_info" {
     sat_sbfDL_info:
         const sat_sbfDL_entry;
         const 1;
         const 16;
 },
 _cbgtW() //  [R1]
         { []
         }
     {offset
       cbgtW: // global
           _cbgu4::P64 = R1 & 7;
           if (_cbgu4::P64 < 3) goto ubguk; else goto ubgul;
       ubguk: // global
           if (_cbgu4::P64 < 2) goto cbgu0; else goto cbgu1;
       cbgu0: // global
           R1 = GHC.IO.Handle.Types.ReadHandle_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cbgu1: // global
           R1 = GHC.IO.Handle.Types.WriteHandle_closure+4;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ubgul: // global
           if (_cbgu4::P64 < 4) goto cbgu2; else goto cbgu3;
       cbgu2: // global
           R1 = GHC.IO.Handle.Types.AppendHandle_closure+5;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cbgu3: // global
           R1 = GHC.IO.Handle.Types.ReadWriteHandle_closure+6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbgtW_info" {
     block_cbgtW_info:
         const _cbgtW;
         const 0;
         const 30;
 },
 sat_sbfE4_entry() //  [R1]
         { []
         }
     {offset
       cbguG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbguS; else goto cbguR;
       cbguS: // global
           HpAlloc = 16;
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbguR: // global
           (_sbfE1::I64) = call "capi" arg hints:  [‘signed’,
                                                    ‘signed’]  result hints:  [‘signed’] ghczuwrapperZC17ZCbaseZCSystemziPosixziInternalsZCfcntl(I64[R1 + 7], %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[R1 + 15])));
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sbfE1::I64));
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbfE4_info" {
     sat_sbfE4_info:
         const sat_sbfE4_entry;
         const 8589934592;
         const 13;
         const 4294967299;
 },
 GHC.IO.Handle.FD.fdToHandle5_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cbguX: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbguY; else goto cbguZ;
       cbguY: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.FD.fdToHandle5_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cbguZ: // global
           I64[Sp - 40] = block_cbgun_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubgwx; else goto cbguo;
       ubgwx: // global
           call _cbgun(R1) args: 0, res: 0, upd: 0;
       cbguo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.fdToHandle5_info" {
     GHC.IO.Handle.FD.fdToHandle5_info:
         const GHC.IO.Handle.FD.fdToHandle5_entry;
         const 0;
         const 17562121273358;
         const 30064771098;
         const SbfJE_srt+64;
 },
 _cbgun() //  [R1]
         { []
         }
     {offset
       cbgun: // global
           _sbfDw::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cbguU; else goto cbguV;
       cbguU: // global
           P64[Sp + 8] = _sbfDw::P64;
           Sp = Sp + 8;
           call _cbgtx() args: 0, res: 0, upd: 0;
       cbguV: // global
           I64[Sp + 8] = block_cbgut_info;
           R1 = _sbfDw::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ubgwv; else goto cbguu;
       ubgwv: // global
           call _cbgut(R1) args: 0, res: 0, upd: 0;
       cbguu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgun_info" {
     block_cbgun_info:
         const _cbgun;
         const 5;
         const 13164074762270;
         const SbfJE_srt+64;
 },
 _cbgut() //  [R1]
         { []
         }
     {offset
       cbgut: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbgvG; else goto cbgvF;
       cbgvG: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbgvF: // global
           _sbfDQ::I64 = I64[R1 + 7];
           (_sbfDV::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_f_getfl();
           I64[Hp - 16] = sat_sbfE4_info;
           I64[Hp - 8] = _sbfDQ::I64;
           I64[Hp] = _sbfDV::I64;
           I64[Sp - 8] = block_cbgvA_info;
           R4 = Hp - 15;
           R3 = System.Posix.Internals.setNonBlockingFD3_closure;
           R2 = System.Posix.Internals.fdFileSize_pred_closure+1;
           I64[Sp] = _sbfDQ::I64;
           Sp = Sp - 8;
           call Foreign.C.Error.throwErrnoIfMinus1Retry2_entry(R4,
                                                               R3,
                                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgut_info" {
     block_cbgut_info:
         const _cbgut;
         const 4;
         const 13164074762270;
         const SbfJE_srt+64;
 },
 _cbgvA() //  [R1]
         { []
         }
     {offset
       cbgvA: // global
           I64[Sp] = block_cbgvC_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubgwB; else goto cbgvI;
       ubgwB: // global
           call _cbgvC(R1) args: 0, res: 0, upd: 0;
       cbgvI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgvA_info" {
     block_cbgvA_info:
         const _cbgvA;
         const 69;
         const 13060995547166;
         const SbfJE_srt+64;
 },
 _cbgvC() //  [R1]
         { []
         }
     {offset
       cbgvC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbgvO; else goto cbgvN;
       cbgvO: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbgvN: // global
           _sbfDQ::I64 = I64[Sp + 8];
           _sbfE9::I64 = I64[R1 + 7];
           (_sbfEd::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_o_nonblock();
           _sbfEe::I64 = _sbfE9::I64 | %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sbfEd::I64));
           if (_sbfE9::I64 == _sbfEe::I64) goto cbgw8; else goto cbgw9;
       cbgw8: // global
           I64[Hp - 16] = GHC.IO.FD.FD_con_info;
           I64[Hp - 8] = _sbfDQ::I64;
           I64[Hp] = 1;
           P64[Sp + 8] = Hp - 15;
           Sp = Sp + 8;
           goto ubgwD;
       cbgw9: // global
           (_sbfEo::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_f_setfl();
           (_sbfEt::I64) = call "capi" arg hints:  [‘signed’, ‘signed’,
                                                    ‘signed’]  result hints:  [‘signed’] ghczuwrapperZC16ZCbaseZCSystemziPosixziInternalsZCfcntl(_sbfDQ::I64, %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sbfEo::I64)), _sbfEe::I64);
           I64[Hp - 16] = GHC.IO.FD.FD_con_info;
           I64[Hp - 8] = _sbfDQ::I64;
           I64[Hp] = 1;
           P64[Sp + 8] = Hp - 15;
           Sp = Sp + 8;
           goto ubgwD;
       ubgwD: // global
           call _cbgtx() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbgvC_info" {
     block_cbgvC_info:
         const _cbgvC;
         const 69;
         const 13060995547166;
         const SbfJE_srt+64;
 },
 _cbgtx() //  []
         { []
         }
     {offset
       cbgtx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbgv3; else goto cbgv2;
       cbgv3: // global
           HpAlloc = 24;
           _sbfDF::P64 = P64[Sp];
           I64[Sp] = block_cbgtw_info;
           R1 = _sbfDF::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbgv2: // global
           I64[Hp - 16] = nl_sbfDG_info;
           P64[Hp] = P64[Sp + 32];
           I64[Sp - 8] = block_cbgv0_info;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = Hp - 16;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubgwu; else goto cbgv7;
       ubgwu: // global
           call _cbgv0(R1) args: 0, res: 0, upd: 0;
       cbgv7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbgtw() //  [R1]
         { []
         }
     {offset
       cbgtw: // global
           P64[Sp] = R1;
           call _cbgtx() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbgtw_info" {
     block_cbgtw_info:
         const _cbgtw;
         const 4;
         const 13060995547166;
         const SbfJE_srt+64;
 },
 _cbgv0() //  [R1]
         { []
         }
     {offset
       cbgv0: // global
           _cbgwm::P64 = R1 & 7;
           if (_cbgwm::P64 != 1) goto ubgwo; else goto cbgvh;
       ubgwo: // global
           if (_cbgwm::P64 != 2) goto ubgwz; else goto cbgvm;
       ubgwz: // global
           call _cbgtQ() args: 0, res: 0, upd: 0;
       cbgvm: // global
           I64[Sp] = block_cbgvk_info;
           R1 = P64[Sp + 32];
           if (R1 & 7 != 0) goto ubgwy; else goto cbgvn;
       ubgwy: // global
           call _cbgvk(R1) args: 0, res: 0, upd: 0;
       cbgvn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbgvh: // global
           R1 = GHC.IO.Handle.FD.fdToHandle6_closure;
           Sp = Sp + 48;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgv0_info" {
     block_cbgv0_info:
         const _cbgv0;
         const 5;
         const 13060995547166;
         const SbfJE_srt+64;
 },
 _cbgvk() //  [R1]
         { []
         }
     {offset
       cbgvk: // global
           if (R1 & 7 == 4) goto cbgvx; else goto ubgwA;
       cbgvx: // global
           R6 = P64[Sp + 24];
           R5 = P64[Sp + 8];
           R4 = GHC.IO.Handle.FD.fdToHandle12_closure;
           R3 = GHC.IO.FD.$fBufferedIOFD_closure;
           R2 = GHC.IO.FD.$fIODeviceFD_closure;
           P64[Sp + 32] = P64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 16];
           Sp = Sp + 32;
           call GHC.IO.Handle.Internals.mkDuplexHandle1_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 24, res: 0, upd: 8;
       ubgwA: // global
           call _cbgtQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbgvk_info" {
     block_cbgvk_info:
         const _cbgvk;
         const 5;
         const 4264902524958;
         const SbfJE_srt+64;
 },
 _cbgtQ() //  []
         { []
         }
     {offset
       cbgtQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbgv6; else goto cbgv5;
       cbgv6: // global
           HpAlloc = 24;
           I64[Sp] = block_cbgtQ_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cbgv5: // global
           I64[Hp - 16] = sat_sbfDL_info;
           P64[Hp] = P64[Sp + 32];
           R6 = P64[Sp + 24];
           R5 = P64[Sp + 8];
           R4 = GHC.IO.Handle.FD.fdToHandle12_closure;
           R3 = GHC.IO.FD.$fBufferedIOFD_closure;
           R2 = GHC.IO.FD.$fIODeviceFD_closure;
           P64[Sp] = Hp - 16;
           P64[Sp + 8] = GHC.Types.True_closure+2;
           _cbgtz::P64 = P64[Sp + 16];
           P64[Sp + 16] = P64[Sp + 40];
           P64[Sp + 24] = _cbgtz::P64;
           P64[Sp + 32] = GHC.IO.Handle.Internals.mkDuplexHandle4_closure;
           P64[Sp + 40] = GHC.Base.Nothing_closure+1;
           call GHC.IO.Handle.Internals.mkDuplexHandle5_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgtQ_info" {
     block_cbgtQ_info:
         const _cbgtQ;
         const 5;
         const 4127463571486;
         const SbfJE_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.255534493 UTC

[section ""data" . GHC.IO.Handle.FD.mkHandleFromFD_closure" {
     GHC.IO.Handle.FD.mkHandleFromFD_closure:
         const GHC.IO.Handle.FD.mkHandleFromFD_info;
         const 0;
 },
 GHC.IO.Handle.FD.mkHandleFromFD_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cbgy2: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.FD.fdToHandle5_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.mkHandleFromFD_info" {
     GHC.IO.Handle.FD.mkHandleFromFD_info:
         const GHC.IO.Handle.FD.mkHandleFromFD_entry;
         const 0;
         const 4294967310;
         const 30064771098;
         const SbfJE_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.258972375 UTC

[section ""data" . GHC.IO.Handle.FD.fdToHandle'2_closure" {
     GHC.IO.Handle.FD.fdToHandle'2_closure:
         const GHC.Word.W64#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.264986793 UTC

[section ""data" . GHC.IO.Handle.FD.fdToHandle'1_closure" {
     GHC.IO.Handle.FD.fdToHandle'1_closure:
         const GHC.IO.Handle.FD.fdToHandle'1_info;
         const 0;
 },
 GHC.IO.Handle.FD.fdToHandle'1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cbgyn: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbgyo; else goto cbgyp;
       cbgyo: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.FD.fdToHandle'1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cbgyp: // global
           I64[Sp - 40] = block_cbgyg_info;
           R1 = R3;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubgzL; else goto cbgyh;
       ubgzL: // global
           call _cbgyg(R1) args: 0, res: 0, upd: 0;
       cbgyh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.fdToHandle'1_info" {
     GHC.IO.Handle.FD.fdToHandle'1_info:
         const GHC.IO.Handle.FD.fdToHandle'1_entry;
         const 0;
         const 124554051598;
         const 30064771098;
         const SbfJE_srt+144;
 },
 _cbgyg() //  [R1]
         { []
         }
     {offset
       cbgyg: // global
           if (R1 & 7 == 1) goto cbgyk; else goto cbgyl;
       cbgyk: // global
           _sbfEv::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cbgyU_info;
           R5 = P64[Sp + 16];
           R4 = GHC.Base.Nothing_closure+1;
           R3 = P64[Sp + 32];
           R2 = _sbfEv::P64;
           Sp = Sp + 8;
           call GHC.IO.FD.$wmkFD_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 8;
       cbgyl: // global
           I64[Sp] = block_cbgz6_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubgzK; else goto cbgz8;
       ubgzK: // global
           call _cbgz6(R1) args: 0, res: 0, upd: 0;
       cbgz8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgyg_info" {
     block_cbgyg_info:
         const _cbgyg;
         const 5;
         const 55834574878;
         const SbfJE_srt+144;
 },
 _cbgyU() //  [R1]
         { []
         }
     {offset
       cbgyU: // global
           I64[Sp] = block_cbgyW_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubgzN; else goto cbgyZ;
       ubgzN: // global
           call _cbgyW(R1) args: 0, res: 0, upd: 0;
       cbgyZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgyU_info" {
     block_cbgyU_info:
         const _cbgyU;
         const 4;
         const 21474836510;
         const SbfJE_srt+144;
 },
 _cbgyW() //  [R1]
         { []
         }
     {offset
       cbgyW: // global
           P64[Sp] = P64[R1 + 7];
           P64[Sp - 8] = P64[R1 + 15];
           Sp = Sp - 8;
           call _sbfEC() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbgyW_info" {
     block_cbgyW_info:
         const _cbgyW;
         const 4;
         const 21474836510;
         const SbfJE_srt+144;
 },
 _cbgz6() //  [R1]
         { []
         }
     {offset
       cbgz6: // global
           _sbfEv::P64 = P64[Sp + 8];
           _sbfEx::P64 = P64[Sp + 16];
           _sbfEz::P64 = P64[Sp + 32];
           if (R1 & 7 == 3) goto cbgzy; else goto cbgzi;
       cbgzy: // global
           I64[Sp + 8] = block_cbgzu_info;
           R5 = _sbfEx::P64;
           R4 = GHC.Base.Nothing_closure+1;
           R3 = _sbfEz::P64;
           R2 = _sbfEv::P64;
           Sp = Sp + 8;
           call GHC.IO.FD.$wmkFD_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 8;
       cbgzi: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbgzl; else goto cbgzk;
       cbgzl: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbgzk: // global
           I64[Hp - 40] = (,,)_con_info;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = GHC.IO.Handle.FD.fdToHandle'2_closure+1;
           P64[Hp - 16] = GHC.IO.Handle.FD.fdToHandle'2_closure+1;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 39;
           I64[Sp + 8] = block_cbgze_info;
           R5 = _sbfEx::P64;
           R4 = Hp - 6;
           R3 = _sbfEz::P64;
           R2 = _sbfEv::P64;
           Sp = Sp + 8;
           call GHC.IO.FD.$wmkFD_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgz6_info" {
     block_cbgz6_info:
         const _cbgz6;
         const 5;
         const 55834574878;
         const SbfJE_srt+144;
 },
 _cbgzu() //  [R1]
         { []
         }
     {offset
       cbgzu: // global
           I64[Sp] = block_cbgzw_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubgzR; else goto cbgzA;
       ubgzR: // global
           call _cbgzw(R1) args: 0, res: 0, upd: 0;
       cbgzA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgzu_info" {
     block_cbgzu_info:
         const _cbgzu;
         const 4;
         const 21474836510;
         const SbfJE_srt+144;
 },
 _cbgzw() //  [R1]
         { []
         }
     {offset
       cbgzw: // global
           P64[Sp] = P64[R1 + 7];
           P64[Sp - 8] = P64[R1 + 15];
           Sp = Sp - 8;
           call _sbfEC() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbgzw_info" {
     block_cbgzw_info:
         const _cbgzw;
         const 4;
         const 21474836510;
         const SbfJE_srt+144;
 },
 _cbgze() //  [R1]
         { []
         }
     {offset
       cbgze: // global
           I64[Sp] = block_cbgzg_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubgzP; else goto cbgzn;
       ubgzP: // global
           call _cbgzg(R1) args: 0, res: 0, upd: 0;
       cbgzn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgze_info" {
     block_cbgze_info:
         const _cbgze;
         const 4;
         const 21474836510;
         const SbfJE_srt+144;
 },
 _cbgzg() //  [R1]
         { []
         }
     {offset
       cbgzg: // global
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = P64[R1 + 7];
           Sp = Sp - 8;
           call _sbfEC() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbgzg_info" {
     block_cbgzg_info:
         const _cbgzg;
         const 4;
         const 21474836510;
         const SbfJE_srt+144;
 },
 _sbfEC() //  []
         { []
         }
     {offset
       sbfEC: // global
           I64[Sp - 8] = block_cbgyt_info;
           R1 = P64[Sp + 40];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubgzT; else goto cbgyv;
       ubgzT: // global
           call _cbgyt(R1) args: 0, res: 0, upd: 0;
       cbgyv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbgyt() //  [R1]
         { []
         }
     {offset
       cbgyt: // global
           if (R1 & 7 == 1) goto cbgyJ; else goto cbgyR;
       cbgyJ: // global
           I64[Sp] = block_cbgyz_info;
           R1 = GHC.IO.Encoding.getLocaleEncoding1_closure;
           if (R1 & 7 != 0) goto ubgzM; else goto cbgyA;
       ubgzM: // global
           call _cbgyz(R1) args: 0, res: 0, upd: 0;
       cbgyA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbgyR: // global
           R6 = P64[Sp + 24];
           R5 = P64[Sp + 40];
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           P64[Sp + 48] = GHC.Base.Nothing_closure+1;
           Sp = Sp + 48;
           call GHC.IO.Handle.FD.fdToHandle5_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgyt_info" {
     block_cbgyt_info:
         const _cbgyt;
         const 2054;
         const 21474836510;
         const SbfJE_srt+144;
 },
 _cbgyz() //  [R1]
         { []
         }
     {offset
       cbgyz: // global
           I64[Sp] = block_cbgyE_info;
           R1 = P64[R1 + 7];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgyz_info" {
     block_cbgyz_info:
         const _cbgyz;
         const 2054;
         const 4294967326;
         const SbfJE_srt+144;
 },
 _cbgyE() //  [R1]
         { []
         }
     {offset
       cbgyE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbgyN; else goto cbgyM;
       cbgyN: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbgyM: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           R6 = P64[Sp + 24];
           R5 = P64[Sp + 40];
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           P64[Sp + 48] = Hp - 6;
           Sp = Sp + 48;
           call GHC.IO.Handle.FD.fdToHandle5_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgyE_info" {
     block_cbgyE_info:
         const _cbgyE;
         const 2054;
         const 4294967326;
         const SbfJE_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.287859108 UTC

[section ""data" . GHC.IO.Handle.FD.fdToHandle'_closure" {
     GHC.IO.Handle.FD.fdToHandle'_closure:
         const GHC.IO.Handle.FD.fdToHandle'_info;
         const 0;
 },
 GHC.IO.Handle.FD.fdToHandle'_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cbgAX: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.FD.fdToHandle'1_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.fdToHandle'_info" {
     GHC.IO.Handle.FD.fdToHandle'_info:
         const GHC.IO.Handle.FD.fdToHandle'_entry;
         const 0;
         const 4294967310;
         const 30064771098;
         const SbfJE_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.29126634 UTC

[section ""cstring" . GHC.IO.Handle.FD.fdToHandle4_bytes" {
     GHC.IO.Handle.FD.fdToHandle4_bytes:
         I8[] [60,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,58,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.292931275 UTC

[section ""cstring" . GHC.IO.Handle.FD.fdToHandle3_bytes" {
     GHC.IO.Handle.FD.fdToHandle3_bytes:
         I8[] [62]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.295117291 UTC

[section ""data" . GHC.IO.Handle.FD.fdToHandle2_closure" {
     GHC.IO.Handle.FD.fdToHandle2_closure:
         const GHC.IO.Handle.FD.fdToHandle2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.FD.fdToHandle2_entry() //  [R1]
         { []
         }
     {offset
       cbgBc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbgBd; else goto cbgBe;
       cbgBd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbgBe: // global
           (_cbgB9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbgB9::I64 == 0) goto cbgBb; else goto cbgBa;
       cbgBb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbgBa: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbgB9::I64;
           R2 = GHC.IO.Handle.FD.fdToHandle3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.fdToHandle2_info" {
     GHC.IO.Handle.FD.fdToHandle2_info:
         const GHC.IO.Handle.FD.fdToHandle2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.301984899 UTC

[section ""data" . GHC.IO.Handle.FD.$wfdToHandle_closure" {
     GHC.IO.Handle.FD.$wfdToHandle_closure:
         const GHC.IO.Handle.FD.$wfdToHandle_info;
         const 0;
 },
 sat_sbfFu_entry() //  [R1]
         { []
         }
     {offset
       cbgBL: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbgBR; else goto cbgBS;
       cbgBR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbgBS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbgBI_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubgBX; else goto cbgBJ;
       ubgBX: // global
           call _cbgBI(R1) args: 0, res: 0, upd: 0;
       cbgBJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbfFu_info" {
     sat_sbfFu_info:
         const sat_sbfFu_entry;
         const 1;
         const 4294967312;
         const SbfJE_srt+184;
 },
 _cbgBI() //  [R1]
         { []
         }
     {offset
       cbgBI: // global
           I64[Sp] = block_cbgBO_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cbgBI_info" {
     block_cbgBI_info:
         const _cbgBI;
         const 0;
         const 4294967326;
         const SbfJE_srt+184;
 },
 _cbgBO() //  [R1, R2]
         { []
         }
     {offset
       cbgBO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbgBW; else goto cbgBV;
       cbgBW: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cbgBV: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = GHC.IO.Handle.FD.fdToHandle2_closure;
           R2 = Hp - 14;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbgBO_info" {
     block_cbgBO_info:
         const _cbgBO;
         const 0;
         const 4294967326;
         const SbfJE_srt+184;
 },
 sat_sbfFv_entry() //  [R1]
         { []
         }
     {offset
       cbgBY: // global
           _sbfFv::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbgBZ; else goto cbgC0;
       cbgC0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbgC2; else goto cbgC1;
       cbgC2: // global
           HpAlloc = 24;
           goto cbgBZ;
       cbgBZ: // global
           R1 = _sbfFv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbgC1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbfFv::P64;
           _sbfFl::P64 = P64[_sbfFv::P64 + 16];
           I64[Hp - 16] = sat_sbfFu_info;
           P64[Hp] = _sbfFl::P64;
           R3 = Hp - 16;
           R2 = GHC.IO.Handle.FD.fdToHandle4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbfFv_info" {
     sat_sbfFv_info:
         const sat_sbfFv_entry;
         const 1;
         const 4294967312;
         const SbfJE_srt+184;
 },
 GHC.IO.Handle.FD.$wfdToHandle_entry() //  [R2]
         { []
         }
     {offset
       cbgC3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbgC4; else goto cbgC5;
       cbgC4: // global
           R2 = R2;
           R1 = GHC.IO.Handle.FD.$wfdToHandle_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbgC5: // global
           I64[Sp - 16] = block_cbgBq_info;
           _sbfFb::I64 = R2;
           R2 = R2;
           I64[Sp - 8] = _sbfFb::I64;
           Sp = Sp - 16;
           call System.Posix.Internals.$wfdGetMode_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.$wfdToHandle_info" {
     GHC.IO.Handle.FD.$wfdToHandle_info:
         const GHC.IO.Handle.FD.$wfdToHandle_entry;
         const 0;
         const 1000727379982;
         const 8589934596;
         const SbfJE_srt+144;
 },
 _cbgBq() //  [R1]
         { []
         }
     {offset
       cbgBq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbgC8; else goto cbgC7;
       cbgC8: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbgC7: // global
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = I64[Sp + 8];
           I64[Sp] = block_cbgBt_info;
           R5 = GHC.Types.False_closure+1;
           R4 = GHC.Base.Nothing_closure+1;
           R3 = R1;
           R2 = Hp - 7;
           P64[Sp + 8] = R1;
           call GHC.IO.FD.$wmkFD_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgBq_info" {
     block_cbgBq_info:
         const _cbgBq;
         const 65;
         const 176093659166;
         const SbfJE_srt+144;
 },
 _cbgBt() //  [R1]
         { []
         }
     {offset
       cbgBt: // global
           I64[Sp] = block_cbgBv_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubgCd; else goto cbgBw;
       ubgCd: // global
           call _cbgBv(R1) args: 0, res: 0, upd: 0;
       cbgBw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgBt_info" {
     block_cbgBt_info:
         const _cbgBt;
         const 1;
         const 141733920798;
         const SbfJE_srt+144;
 },
 _cbgBv() //  [R1]
         { []
         }
     {offset
       cbgBv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbgCc; else goto cbgCb;
       cbgCc: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbgCb: // global
           _sbfFl::P64 = P64[R1 + 7];
           _sbfFm::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_sbfFv_info;
           P64[Hp] = _sbfFl::P64;
           R6 = GHC.Types.False_closure+1;
           R5 = P64[Sp + 8];
           R4 = Hp - 16;
           R3 = _sbfFm::P64;
           R2 = _sbfFl::P64;
           P64[Sp + 8] = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call GHC.IO.Handle.FD.fdToHandle5_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgBv_info" {
     block_cbgBv_info:
         const _cbgBv;
         const 1;
         const 141733920798;
         const SbfJE_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.317514849 UTC

[section ""data" . GHC.IO.Handle.FD.fdToHandle1_closure" {
     GHC.IO.Handle.FD.fdToHandle1_closure:
         const GHC.IO.Handle.FD.fdToHandle1_info;
         const 0;
 },
 GHC.IO.Handle.FD.fdToHandle1_entry() //  [R2]
         { []
         }
     {offset
       cbgCQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbgCR; else goto cbgCS;
       cbgCR: // global
           R2 = R2;
           R1 = GHC.IO.Handle.FD.fdToHandle1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbgCS: // global
           I64[Sp - 8] = block_cbgCN_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubgCW; else goto cbgCO;
       ubgCW: // global
           call _cbgCN(R1) args: 0, res: 0, upd: 0;
       cbgCO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.fdToHandle1_info" {
     GHC.IO.Handle.FD.fdToHandle1_info:
         const GHC.IO.Handle.FD.fdToHandle1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SbfJE_srt+200;
 },
 _cbgCN() //  [R1]
         { []
         }
     {offset
       cbgCN: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.IO.Handle.FD.$wfdToHandle_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgCN_info" {
     block_cbgCN_info:
         const _cbgCN;
         const 0;
         const 4294967326;
         const SbfJE_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.323023887 UTC

[section ""data" . GHC.IO.Handle.FD.fdToHandle_closure" {
     GHC.IO.Handle.FD.fdToHandle_closure:
         const GHC.IO.Handle.FD.fdToHandle_info;
         const 0;
 },
 GHC.IO.Handle.FD.fdToHandle_entry() //  [R2]
         { []
         }
     {offset
       cbgDa: // global
           R2 = R2;
           call GHC.IO.Handle.FD.fdToHandle1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.fdToHandle_info" {
     GHC.IO.Handle.FD.fdToHandle_info:
         const GHC.IO.Handle.FD.fdToHandle_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbfJE_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.330183258 UTC

[section ""data" . GHC.IO.Handle.FD.openBinaryFile5_closure" {
     GHC.IO.Handle.FD.openBinaryFile5_closure:
         const GHC.IO.Handle.FD.openBinaryFile5_info;
         const 0;
 },
 sat_sbfFX_entry() //  [R1, R2]
         { []
         }
     {offset
       cbgDF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbgDJ; else goto cbgDK;
       cbgDJ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbgDK: // global
           I64[Sp - 16] = block_cbgDC_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubgDO; else goto cbgDD;
       ubgDO: // global
           call _cbgDC(R1) args: 0, res: 0, upd: 0;
       cbgDD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbfFX_info" {
     sat_sbfFX_info:
         const sat_sbfFX_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const SbfJE_srt+216;
 },
 _cbgDC() //  [R1]
         { []
         }
     {offset
       cbgDC: // global
           I64[Sp] = block_cbgDI_info;
           R2 = I64[R1 + 7];
           call GHC.IO.FD.$w$cclose_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgDC_info" {
     block_cbgDC_info:
         const _cbgDC;
         const 1;
         const 4294967326;
         const SbfJE_srt+216;
 },
 _cbgDI() //  []
         { []
         }
     {offset
       cbgDI: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgDI_info" {
     block_cbgDI_info:
         const _cbgDI;
         const 1;
         const 30;
 },
 sat_sbfFO_entry() //  [R1]
         { []
         }
     {offset
       cbgDU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbgDV; else goto cbgDW;
       cbgDV: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbgDW: // global
           R6 = GHC.Types.False_closure+1;
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[R1 + 31];
           R2 = P64[R1 + 23];
           P64[Sp - 8] = P64[R1 + 39];
           Sp = Sp - 8;
           call GHC.IO.Handle.FD.fdToHandle5_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbfFO_info" {
     sat_sbfFO_info:
         const sat_sbfFO_entry;
         const 5;
         const 4294967304;
         const 4294967299;
         const SbfJE_srt+144;
 },
 GHC.IO.Handle.FD.openBinaryFile5_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cbgDX: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbgDY; else goto cbgDZ;
       cbgDY: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.FD.openBinaryFile5_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbgDZ: // global
           I64[Sp - 32] = block_cbgDl_info;
           _sbfFC::P64 = R4;
           R4 = R5;
           _sbfFB::P64 = R3;
           R3 = R3;
           _sbfFA::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _sbfFA::P64;
           P64[Sp - 16] = _sbfFB::P64;
           P64[Sp - 8] = _sbfFC::P64;
           Sp = Sp - 32;
           call GHC.IO.FD.openFile1_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.openBinaryFile5_info" {
     GHC.IO.Handle.FD.openBinaryFile5_info:
         const GHC.IO.Handle.FD.openBinaryFile5_entry;
         const 0;
         const 15414637625358;
         const 21474836504;
         const SbfJE_srt+144;
 },
 _cbgDl() //  [R1]
         { []
         }
     {offset
       cbgDl: // global
           I64[Sp] = block_cbgDn_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubgEx; else goto cbgDo;
       ubgEx: // global
           call _cbgDn(R1) args: 0, res: 0, upd: 0;
       cbgDo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgDl_info" {
     block_cbgDl_info:
         const _cbgDl;
         const 3;
         const 2220498092062;
         const SbfJE_srt+144;
 },
 _cbgDn() //  [R1]
         { []
         }
     {offset
       cbgDn: // global
           I64[Sp - 8] = block_cbgE1_info;
           _sbfFJ::P64 = P64[R1 + 7];
           _sbfFK::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _sbfFK::P64;
           P64[Sp + 24] = _sbfFJ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubgEy; else goto cbgE6;
       ubgEy: // global
           call _cbgE1(R1) args: 0, res: 0, upd: 0;
       cbgE6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgDn_info" {
     block_cbgDn_info:
         const _cbgDn;
         const 3;
         const 2220498092062;
         const SbfJE_srt+144;
 },
 _cbgE1() //  [R1]
         { []
         }
     {offset
       cbgE1: // global
           if (R1 & 7 == 1) goto cbgEd; else goto cbgEr;
       cbgEd: // global
           I64[Sp] = block_cbgEa_info;
           R1 = GHC.IO.Encoding.getLocaleEncoding1_closure;
           if (R1 & 7 != 0) goto ubgEA; else goto cbgEe;
       ubgEA: // global
           call _cbgEa(R1) args: 0, res: 0, upd: 0;
       cbgEe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbgEr: // global
           P64[Sp] = GHC.Base.Nothing_closure+1;
           call _cbgDv() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbgE1_info" {
     block_cbgE1_info:
         const _cbgE1;
         const 4;
         const 2220498092062;
         const SbfJE_srt+144;
 },
 _cbgEa() //  [R1]
         { []
         }
     {offset
       cbgEa: // global
           I64[Sp] = block_cbgEi_info;
           R1 = P64[R1 + 7];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgEa_info" {
     block_cbgEa_info:
         const _cbgEa;
         const 4;
         const 2203318222878;
         const SbfJE_srt+144;
 },
 _cbgEi() //  [R1]
         { []
         }
     {offset
       cbgEi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbgEn; else goto cbgEm;
       cbgEn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbgEm: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           P64[Sp] = Hp - 6;
           call _cbgDv() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbgEi_info" {
     block_cbgEi_info:
         const _cbgEi;
         const 4;
         const 2203318222878;
         const SbfJE_srt+144;
 },
 _cbgDv() //  []
         { []
         }
     {offset
       cbgDv: // global
           Hp = Hp + 64;
           _sbfFN::P64 = P64[Sp];
           if (Hp > HpLim) (likely: False) goto cbgE5; else goto cbgE4;
       cbgE5: // global
           HpAlloc = 64;
           I64[Sp] = block_cbgDu_info;
           R1 = _sbfFN::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbgE4: // global
           I64[Hp - 56] = sat_sbfFX_info;
           _sbfFJ::P64 = P64[Sp + 32];
           P64[Hp - 48] = _sbfFJ::P64;
           I64[Hp - 40] = sat_sbfFO_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = _sbfFJ::P64;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _sbfFN::P64;
           R2 = Hp - 54;
           R1 = Hp - 39;
           Sp = Sp + 40;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _cbgDu() //  [R1]
         { []
         }
     {offset
       cbgDu: // global
           P64[Sp] = R1;
           call _cbgDv() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbgDu_info" {
     block_cbgDu_info:
         const _cbgDu;
         const 4;
         const 2203318222878;
         const SbfJE_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.351629332 UTC

[section ""data" . GHC.IO.Handle.FD.openFile2_closure" {
     GHC.IO.Handle.FD.openFile2_closure:
         const GHC.IO.Handle.FD.openFile2_info;
         const 0;
 },
 sat_sbfGi_entry() //  [R1]
         { []
         }
     {offset
       cbgFG: // global
           _sbfGi::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbgFH; else goto cbgFI;
       cbgFI: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cbgFK; else goto cbgFJ;
       cbgFK: // global
           HpAlloc = 72;
           goto cbgFH;
       cbgFH: // global
           R1 = _sbfGi::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbgFJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbfGi::P64;
           _sbfG6::P64 = P64[_sbfGi::P64 + 16];
           _sbfGa::P64 = P64[_sbfGi::P64 + 24];
           _sbfGb::P64 = P64[_sbfGi::P64 + 32];
           _sbfGd::P64 = P64[_sbfGi::P64 + 40];
           _sbfGe::P64 = P64[_sbfGi::P64 + 48];
           I64[Hp - 64] = GHC.Base.Just_con_info;
           P64[Hp - 56] = _sbfG6::P64;
           I64[Hp - 48] = GHC.IO.Exception.IOError_con_info;
           P64[Hp - 40] = _sbfGa::P64;
           P64[Hp - 32] = _sbfGb::P64;
           P64[Hp - 24] = GHC.IO.Handle.FD.fdToHandle10_closure;
           P64[Hp - 16] = _sbfGd::P64;
           P64[Hp - 8] = _sbfGe::P64;
           P64[Hp] = Hp - 62;
           R2 = Hp - 47;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbfGi_info" {
     sat_sbfGi_info:
         const sat_sbfGi_entry;
         const 5;
         const 2305843013508661263;
         const SbfJE_srt+8;
 },
 GHC.IO.Handle.FD.openFile2_entry() //  [R2, R3]
         { []
         }
     {offset
       cbgFL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbgFM; else goto cbgFN;
       cbgFM: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.FD.openFile2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbgFN: // global
           I64[Sp - 16] = block_cbgFv_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubgFR; else goto cbgFw;
       ubgFR: // global
           call _cbgFv(R1) args: 0, res: 0, upd: 0;
       cbgFw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.openFile2_info" {
     GHC.IO.Handle.FD.openFile2_info:
         const GHC.IO.Handle.FD.openFile2_entry;
         const 0;
         const 6917529031936049166;
         const 12884901903;
         const SbfJE_srt+8;
 },
 _cbgFv() //  [R1]
         { []
         }
     {offset
       cbgFv: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbgFQ; else goto cbgFP;
       cbgFQ: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbgFP: // global
           _sbfGa::P64 = P64[R1 + 7];
           _sbfGb::P64 = P64[R1 + 15];
           _sbfGd::P64 = P64[R1 + 31];
           _sbfGe::P64 = P64[R1 + 39];
           I64[Hp - 48] = sat_sbfGi_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _sbfGa::P64;
           P64[Hp - 16] = _sbfGb::P64;
           P64[Hp - 8] = _sbfGd::P64;
           P64[Hp] = _sbfGe::P64;
           R1 = Hp - 48;
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgFv_info" {
     block_cbgFv_info:
         const _cbgFv;
         const 1;
         const 2305843013508661278;
         const SbfJE_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.362275091 UTC

[section ""data" . GHC.IO.Handle.FD.openFile1_closure" {
     GHC.IO.Handle.FD.openFile1_closure:
         const GHC.IO.Handle.FD.openFile1_info;
         const 0;
 },
 sat_sbfGt_entry() //  [R1]
         { []
         }
     {offset
       cbgGy: // global
           R1 = P64[R1 + 7];
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbfGt_info" {
     sat_sbfGt_info:
         const sat_sbfGt_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_sbfGv_entry() //  [R1, R2]
         { []
         }
     {offset
       cbgGB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbgGC; else goto cbgGD;
       cbgGC: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbgGD: // global
           I64[Sp - 16] = block_cbgGg_info;
           _sbfGj::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _sbfGj::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubgGQ; else goto cbgGh;
       ubgGQ: // global
           call _cbgGg(R1) args: 0, res: 0, upd: 0;
       cbgGh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbfGv_info" {
     sat_sbfGv_info:
         const sat_sbfGv_entry;
         const 1;
         const 216172786408751113;
         const 4294967301;
         const SbfJE_srt+56;
 },
 _cbgGg() //  [R1]
         { []
         }
     {offset
       cbgGg: // global
           I64[Sp - 16] = block_cbgGl_info;
           R2 = P64[R1 + 7];
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgGg_info" {
     block_cbgGg_info:
         const _cbgGg;
         const 1;
         const 216172786408751134;
         const SbfJE_srt+56;
 },
 _cbgGl() //  [R1]
         { []
         }
     {offset
       cbgGl: // global
           I64[Sp] = block_cbgGp_info;
           R3 = GHC.IO.Exception.$fExceptionIOException4_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgGl_info" {
     block_cbgGl_info:
         const _cbgGl;
         const 3;
         const 216172786408751134;
         const SbfJE_srt+56;
 },
 _cbgGp() //  [R1]
         { []
         }
     {offset
       cbgGp: // global
           if (R1 & 7 == 1) goto cbgGH; else goto cbgGO;
       cbgGH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbgGK; else goto cbgGJ;
       cbgGK: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbgGJ: // global
           I64[Hp - 8] = sat_sbfGt_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbgGO: // global
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 24];
           R1 = GHC.IO.Handle.FD.openFile2_closure+3;
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgGp_info" {
     block_cbgGp_info:
         const _cbgGp;
         const 3;
         const 4294967326;
         const SbfJE_srt+248;
 },
 sat_sbfGm_entry() //  [R1]
         { []
         }
     {offset
       cbgGW: // global
           R5 = GHC.Types.True_closure+2;
           R4 = GHC.Types.False_closure+1;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.IO.Handle.FD.openBinaryFile5_entry(R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbfGm_info" {
     sat_sbfGm_info:
         const sat_sbfGm_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SbfJE_srt+232;
 },
 GHC.IO.Handle.FD.openFile1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbgGZ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbgH3; else goto cbgH2;
       cbgH3: // global
           HpAlloc = 40;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.FD.openFile1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbgH2: // global
           I64[Hp - 32] = sat_sbfGv_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_sbfGm_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 31;
           R1 = Hp - 15;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.openFile1_info" {
     GHC.IO.Handle.FD.openFile1_info:
         const GHC.IO.Handle.FD.openFile1_entry;
         const 0;
         const 522417561069944846;
         const 12884901903;
         const SbfJE_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.375279487 UTC

[section ""data" . GHC.IO.Handle.FD.openFile_closure" {
     GHC.IO.Handle.FD.openFile_closure:
         const GHC.IO.Handle.FD.openFile_info;
         const 0;
 },
 GHC.IO.Handle.FD.openFile_entry() //  [R2, R3]
         { []
         }
     {offset
       cbgHB: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.FD.openFile1_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.openFile_info" {
     GHC.IO.Handle.FD.openFile_info:
         const GHC.IO.Handle.FD.openFile_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SbfJE_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.380866334 UTC

[section ""data" . GHC.IO.Handle.FD.openFileBlocking1_closure" {
     GHC.IO.Handle.FD.openFileBlocking1_closure:
         const GHC.IO.Handle.FD.openFileBlocking1_info;
         const 0;
 },
 sat_sbfGG_entry() //  [R1]
         { []
         }
     {offset
       cbgI9: // global
           R1 = P64[R1 + 7];
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbfGG_info" {
     sat_sbfGG_info:
         const sat_sbfGG_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_sbfGI_entry() //  [R1, R2]
         { []
         }
     {offset
       cbgIc: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbgId; else goto cbgIe;
       cbgId: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbgIe: // global
           I64[Sp - 16] = block_cbgHR_info;
           _sbfGw::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _sbfGw::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubgIr; else goto cbgHS;
       ubgIr: // global
           call _cbgHR(R1) args: 0, res: 0, upd: 0;
       cbgHS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbfGI_info" {
     sat_sbfGI_info:
         const sat_sbfGI_entry;
         const 1;
         const 216172786408751113;
         const 4294967301;
         const SbfJE_srt+56;
 },
 _cbgHR() //  [R1]
         { []
         }
     {offset
       cbgHR: // global
           I64[Sp - 16] = block_cbgHW_info;
           R2 = P64[R1 + 7];
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgHR_info" {
     block_cbgHR_info:
         const _cbgHR;
         const 1;
         const 216172786408751134;
         const SbfJE_srt+56;
 },
 _cbgHW() //  [R1]
         { []
         }
     {offset
       cbgHW: // global
           I64[Sp] = block_cbgI0_info;
           R3 = GHC.IO.Exception.$fExceptionIOException4_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgHW_info" {
     block_cbgHW_info:
         const _cbgHW;
         const 3;
         const 216172786408751134;
         const SbfJE_srt+56;
 },
 _cbgI0() //  [R1]
         { []
         }
     {offset
       cbgI0: // global
           if (R1 & 7 == 1) goto cbgIi; else goto cbgIp;
       cbgIi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbgIl; else goto cbgIk;
       cbgIl: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbgIk: // global
           I64[Hp - 8] = sat_sbfGG_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbgIp: // global
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 24];
           R1 = GHC.IO.Handle.FD.openFile2_closure+3;
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgI0_info" {
     block_cbgI0_info:
         const _cbgI0;
         const 3;
         const 4294967326;
         const SbfJE_srt+248;
 },
 sat_sbfGz_entry() //  [R1]
         { []
         }
     {offset
       cbgIx: // global
           R5 = GHC.Types.False_closure+1;
           R4 = GHC.Types.False_closure+1;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.IO.Handle.FD.openBinaryFile5_entry(R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbfGz_info" {
     sat_sbfGz_info:
         const sat_sbfGz_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SbfJE_srt+232;
 },
 GHC.IO.Handle.FD.openFileBlocking1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbgIA: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbgIE; else goto cbgID;
       cbgIE: // global
           HpAlloc = 40;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.FD.openFileBlocking1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbgID: // global
           I64[Hp - 32] = sat_sbfGI_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_sbfGz_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 31;
           R1 = Hp - 15;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.openFileBlocking1_info" {
     GHC.IO.Handle.FD.openFileBlocking1_info:
         const GHC.IO.Handle.FD.openFileBlocking1_entry;
         const 0;
         const 810647937221656590;
         const 12884901903;
         const SbfJE_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.39651604 UTC

[section ""data" . GHC.IO.Handle.FD.openFileBlocking_closure" {
     GHC.IO.Handle.FD.openFileBlocking_closure:
         const GHC.IO.Handle.FD.openFileBlocking_info;
         const 0;
 },
 GHC.IO.Handle.FD.openFileBlocking_entry() //  [R2, R3]
         { []
         }
     {offset
       cbgJc: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.FD.openFileBlocking1_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.openFileBlocking_info" {
     GHC.IO.Handle.FD.openFileBlocking_info:
         const GHC.IO.Handle.FD.openFileBlocking_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SbfJE_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.40019951 UTC

[section ""cstring" . GHC.IO.Handle.FD.openBinaryFile4_bytes" {
     GHC.IO.Handle.FD.openBinaryFile4_bytes:
         I8[] [111,112,101,110,66,105,110,97,114,121,70,105,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.403451978 UTC

[section ""data" . GHC.IO.Handle.FD.openBinaryFile3_closure" {
     GHC.IO.Handle.FD.openBinaryFile3_closure:
         const GHC.IO.Handle.FD.openBinaryFile3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.FD.openBinaryFile3_entry() //  [R1]
         { []
         }
     {offset
       cbgJq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbgJr; else goto cbgJs;
       cbgJr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbgJs: // global
           (_cbgJn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbgJn::I64 == 0) goto cbgJp; else goto cbgJo;
       cbgJp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbgJo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbgJn::I64;
           R2 = GHC.IO.Handle.FD.openBinaryFile4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.openBinaryFile3_info" {
     GHC.IO.Handle.FD.openBinaryFile3_info:
         const GHC.IO.Handle.FD.openBinaryFile3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.40865452 UTC

[section ""data" . GHC.IO.Handle.FD.openBinaryFile2_closure" {
     GHC.IO.Handle.FD.openBinaryFile2_closure:
         const GHC.IO.Handle.FD.openBinaryFile2_info;
         const 0;
 },
 sat_sbfGV_entry() //  [R1]
         { []
         }
     {offset
       cbgJP: // global
           _sbfGV::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbgJQ; else goto cbgJR;
       cbgJR: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cbgJT; else goto cbgJS;
       cbgJT: // global
           HpAlloc = 72;
           goto cbgJQ;
       cbgJQ: // global
           R1 = _sbfGV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbgJS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbfGV::P64;
           _sbfGJ::P64 = P64[_sbfGV::P64 + 16];
           _sbfGN::P64 = P64[_sbfGV::P64 + 24];
           _sbfGO::P64 = P64[_sbfGV::P64 + 32];
           _sbfGQ::P64 = P64[_sbfGV::P64 + 40];
           _sbfGR::P64 = P64[_sbfGV::P64 + 48];
           I64[Hp - 64] = GHC.Base.Just_con_info;
           P64[Hp - 56] = _sbfGJ::P64;
           I64[Hp - 48] = GHC.IO.Exception.IOError_con_info;
           P64[Hp - 40] = _sbfGN::P64;
           P64[Hp - 32] = _sbfGO::P64;
           P64[Hp - 24] = GHC.IO.Handle.FD.openBinaryFile3_closure;
           P64[Hp - 16] = _sbfGQ::P64;
           P64[Hp - 8] = _sbfGR::P64;
           P64[Hp] = Hp - 62;
           R2 = Hp - 47;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbfGV_info" {
     sat_sbfGV_info:
         const sat_sbfGV_entry;
         const 5;
         const 12884901903;
         const SbfJE_srt+280;
 },
 GHC.IO.Handle.FD.openBinaryFile2_entry() //  [R2, R3]
         { []
         }
     {offset
       cbgJU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbgJV; else goto cbgJW;
       cbgJV: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.FD.openBinaryFile2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbgJW: // global
           I64[Sp - 16] = block_cbgJE_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubgK0; else goto cbgJF;
       ubgK0: // global
           call _cbgJE(R1) args: 0, res: 0, upd: 0;
       cbgJF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.openBinaryFile2_info" {
     GHC.IO.Handle.FD.openBinaryFile2_info:
         const GHC.IO.Handle.FD.openBinaryFile2_entry;
         const 0;
         const 30064771086;
         const 12884901903;
         const SbfJE_srt+280;
 },
 _cbgJE() //  [R1]
         { []
         }
     {offset
       cbgJE: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbgJZ; else goto cbgJY;
       cbgJZ: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbgJY: // global
           _sbfGN::P64 = P64[R1 + 7];
           _sbfGO::P64 = P64[R1 + 15];
           _sbfGQ::P64 = P64[R1 + 31];
           _sbfGR::P64 = P64[R1 + 39];
           I64[Hp - 48] = sat_sbfGV_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _sbfGN::P64;
           P64[Hp - 16] = _sbfGO::P64;
           P64[Hp - 8] = _sbfGQ::P64;
           P64[Hp] = _sbfGR::P64;
           R1 = Hp - 48;
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgJE_info" {
     block_cbgJE_info:
         const _cbgJE;
         const 1;
         const 12884901918;
         const SbfJE_srt+280;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.418810498 UTC

[section ""data" . GHC.IO.Handle.FD.openBinaryFile1_closure" {
     GHC.IO.Handle.FD.openBinaryFile1_closure:
         const GHC.IO.Handle.FD.openBinaryFile1_info;
         const 0;
 },
 sat_sbfH6_entry() //  [R1]
         { []
         }
     {offset
       cbgKH: // global
           R1 = P64[R1 + 7];
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbfH6_info" {
     sat_sbfH6_info:
         const sat_sbfH6_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_sbfH8_entry() //  [R1, R2]
         { []
         }
     {offset
       cbgKK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbgKL; else goto cbgKM;
       cbgKL: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbgKM: // global
           I64[Sp - 16] = block_cbgKp_info;
           _sbfGW::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _sbfGW::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubgKZ; else goto cbgKq;
       ubgKZ: // global
           call _cbgKp(R1) args: 0, res: 0, upd: 0;
       cbgKq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbfH8_info" {
     sat_sbfH8_info:
         const sat_sbfH8_entry;
         const 1;
         const 4755801210798211081;
         const 4294967301;
         const SbfJE_srt+56;
 },
 _cbgKp() //  [R1]
         { []
         }
     {offset
       cbgKp: // global
           I64[Sp - 16] = block_cbgKu_info;
           R2 = P64[R1 + 7];
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgKp_info" {
     block_cbgKp_info:
         const _cbgKp;
         const 1;
         const 4755801210798211102;
         const SbfJE_srt+56;
 },
 _cbgKu() //  [R1]
         { []
         }
     {offset
       cbgKu: // global
           I64[Sp] = block_cbgKy_info;
           R3 = GHC.IO.Exception.$fExceptionIOException4_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgKu_info" {
     block_cbgKu_info:
         const _cbgKu;
         const 3;
         const 4755801210798211102;
         const SbfJE_srt+56;
 },
 _cbgKy() //  [R1]
         { []
         }
     {offset
       cbgKy: // global
           if (R1 & 7 == 1) goto cbgKQ; else goto cbgKX;
       cbgKQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbgKT; else goto cbgKS;
       cbgKT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbgKS: // global
           I64[Hp - 8] = sat_sbfH6_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbgKX: // global
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 24];
           R1 = GHC.IO.Handle.FD.openBinaryFile2_closure+3;
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgKy_info" {
     block_cbgKy_info:
         const _cbgKy;
         const 3;
         const 4294967326;
         const SbfJE_srt+296;
 },
 sat_sbfGZ_entry() //  [R1]
         { []
         }
     {offset
       cbgL5: // global
           R5 = GHC.Types.True_closure+2;
           R4 = GHC.Types.True_closure+2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.IO.Handle.FD.openBinaryFile5_entry(R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbfGZ_info" {
     sat_sbfGZ_info:
         const sat_sbfGZ_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SbfJE_srt+232;
 },
 GHC.IO.Handle.FD.openBinaryFile1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbgL8: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbgLc; else goto cbgLb;
       cbgLc: // global
           HpAlloc = 40;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.FD.openBinaryFile1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbgLb: // global
           I64[Hp - 32] = sat_sbfH8_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_sbfGZ_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 31;
           R1 = Hp - 15;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.openBinaryFile1_info" {
     GHC.IO.Handle.FD.openBinaryFile1_info:
         const GHC.IO.Handle.FD.openBinaryFile1_entry;
         const 0;
         const 13997187646162468878;
         const 12884901903;
         const SbfJE_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.431815042 UTC

[section ""data" . GHC.IO.Handle.FD.openBinaryFile_closure" {
     GHC.IO.Handle.FD.openBinaryFile_closure:
         const GHC.IO.Handle.FD.openBinaryFile_info;
         const 0;
 },
 GHC.IO.Handle.FD.openBinaryFile_entry() //  [R2, R3]
         { []
         }
     {offset
       cbgLK: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.FD.openBinaryFile1_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.openBinaryFile_info" {
     GHC.IO.Handle.FD.openBinaryFile_info:
         const GHC.IO.Handle.FD.openBinaryFile_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SbfJE_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.443164804 UTC

[section ""data" . $wstdHandleFinalizer_rbfCA_closure" {
     $wstdHandleFinalizer_rbfCA_closure:
         const $wstdHandleFinalizer_rbfCA_info;
         const 0;
 },
 sat_sbfHL_entry() //  [R1]
         { []
         }
     {offset
       cbgMv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbgMw; else goto cbgMx;
       cbgMw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbgMx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.ioe_finalizedHandle_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbfHL_info" {
     sat_sbfHL_info:
         const sat_sbfHL_entry;
         const 1;
         const 4294967312;
         const SbfJE_srt+312;
 },
 sat_sbfHX_entry() //  [R1]
         { []
         }
     {offset
       cbgML: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbgMM; else goto cbgMN;
       cbgMM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbgMN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.ioe_finalizedHandle_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbfHX_info" {
     sat_sbfHX_info:
         const sat_sbfHX_entry;
         const 1;
         const 4294967312;
         const SbfJE_srt+312;
 },
 sat_sbfIa_entry() //  [R1]
         { []
         }
     {offset
       cbgN6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbgN7; else goto cbgN8;
       cbgN7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbgN8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.ioe_finalizedHandle_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbfIa_info" {
     sat_sbfIa_info:
         const sat_sbfIa_entry;
         const 1;
         const 4294967312;
         const SbfJE_srt+312;
 },
 sat_sbfIm_entry() //  [R1]
         { []
         }
     {offset
       cbgNm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbgNn; else goto cbgNo;
       cbgNn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbgNo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.ioe_finalizedHandle_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbfIm_info" {
     sat_sbfIm_info:
         const sat_sbfIm_entry;
         const 1;
         const 4294967312;
         const SbfJE_srt+312;
 },
 sat_sbfIo_entry() //  [R1]
         { []
         }
     {offset
       cbgNv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbgNw; else goto cbgNx;
       cbgNw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbgNx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.ioe_finalizedHandle_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbfIo_info" {
     sat_sbfIo_info:
         const sat_sbfIo_entry;
         const 1;
         const 4294967312;
         const SbfJE_srt+312;
 },
 $wstdHandleFinalizer_rbfCA_entry() //  [R2, R3]
         { []
         }
     {offset
       cbgNy: // global
           if ((Sp + -88) < SpLim) (likely: False) goto cbgNz; else goto cbgNA;
       cbgNz: // global
           R3 = R3;
           R2 = R2;
           R1 = $wstdHandleFinalizer_rbfCA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbgNA: // global
           I64[Sp - 24] = block_cbgLV_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wstdHandleFinalizer_rbfCA_info" {
     $wstdHandleFinalizer_rbfCA_info:
         const $wstdHandleFinalizer_rbfCA_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const SbfJE_srt+312;
 },
 _cbgLV() //  [R1]
         { []
         }
     {offset
       cbgLV: // global
           I64[Sp] = block_cbgLX_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubgP6; else goto cbgLY;
       ubgP6: // global
           call _cbgLX(R1) args: 0, res: 0, upd: 0;
       cbgLY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgLV_info" {
     block_cbgLV_info:
         const _cbgLV;
         const 2;
         const 4294967326;
         const SbfJE_srt+312;
 },
 _cbgLX() //  [R1]
         { []
         }
     {offset
       cbgLX: // global
           I64[Sp - 48] = block_cbgM2_info;
           _sbfHh::P64 = P64[R1 + 15];
           _sbfHj::P64 = P64[R1 + 31];
           _sbfHk::P64 = P64[R1 + 39];
           _sbfHl::P64 = P64[R1 + 47];
           _sbfHq::P64 = P64[R1 + 87];
           _sbfHr::P64 = P64[R1 + 95];
           R1 = P64[_sbfHl::P64 + 8];
           P64[Sp - 40] = _sbfHj::P64;
           P64[Sp - 32] = _sbfHk::P64;
           P64[Sp - 24] = _sbfHl::P64;
           P64[Sp - 16] = _sbfHq::P64;
           P64[Sp - 8] = _sbfHr::P64;
           P64[Sp] = _sbfHh::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto ubgP7; else goto cbgM3;
       ubgP7: // global
           call _cbgM2(R1) args: 0, res: 0, upd: 0;
       cbgM3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgLX_info" {
     block_cbgLX_info:
         const _cbgLX;
         const 2;
         const 4294967326;
         const SbfJE_srt+312;
 },
 _cbgM2() //  [R1]
         { []
         }
     {offset
       cbgM2: // global
           I64[Sp] = block_cbgND_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto ubgP8; else goto cbgOv;
       ubgP8: // global
           call _cbgND(R1) args: 0, res: 0, upd: 0;
       cbgOv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgM2_info" {
     block_cbgM2_info:
         const _cbgM2;
         const 8;
         const 4294967326;
         const SbfJE_srt+312;
 },
 _cbgND() //  [R1]
         { []
         }
     {offset
       cbgND: // global
           if (R1 & 7 == 1) goto ubgP3; else goto cbgOG;
       ubgP3: // global
           Sp = Sp + 16;
           call _sbfHG() args: 0, res: 0, upd: 0;
       cbgOG: // global
           _sbfIt::P64 = P64[P64[Sp + 24] + 8];
           I64[Sp] = block_cbgOE_info;
           R1 = _sbfIt::P64;
           if (R1 & 7 != 0) goto ubgPf; else goto cbgOH;
       ubgPf: // global
           call _cbgOE(R1) args: 0, res: 0, upd: 0;
       cbgOH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgND_info" {
     block_cbgND_info:
         const _cbgND;
         const 8;
         const 4294967326;
         const SbfJE_srt+312;
 },
 _cbgOE() //  [R1]
         { []
         }
     {offset
       cbgOE: // global
           if (I64[R1 + 39] == I64[R1 + 47]) goto ubgP4; else goto cbgOR;
       ubgP4: // global
           Sp = Sp + 16;
           call _sbfHG() args: 0, res: 0, upd: 0;
       cbgOR: // global
           _sbfHj::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cbgOP_info;
           R2 = P64[Sp + 48];
           I64[Sp - 16] = stg_ap_ppv_info;
           P64[Sp - 8] = _sbfHj::P64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.IO.BufferedIO.flushWriteBuffer_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgOE_info" {
     block_cbgOE_info:
         const _cbgOE;
         const 8;
         const 4294967326;
         const SbfJE_srt+312;
 },
 _cbgOP() //  [R1]
         { []
         }
     {offset
       cbgOP: // global
           _sbfHl::P64 = P64[Sp + 16];
           call MO_WriteBarrier();
           P64[_sbfHl::P64 + 8] = R1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbfHl::P64);
           Sp = Sp + 8;
           call _sbfHG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbgOP_info" {
     block_cbgOP_info:
         const _cbgOP;
         const 1031;
         const 4294967326;
         const SbfJE_srt+312;
 },
 _sbfHG() //  []
         { []
         }
     {offset
       sbfHG: // global
           I64[Sp + 8] = block_cbgMc_info;
           R1 = P64[Sp];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ubgPj; else goto cbgMd;
       ubgPj: // global
           call _cbgMc(R1) args: 0, res: 0, upd: 0;
       cbgMd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbgMc() //  [R1]
         { []
         }
     {offset
       cbgMc: // global
           if (R1 & 7 == 1) goto cbgOp; else goto cbgNI;
       cbgOp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbgOs; else goto cbgOr;
       cbgOs: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbgOr: // global
           I64[Hp - 16] = sat_sbfIo_info;
           P64[Hp] = P64[Sp + 32];
           _sbfHa::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_cbgOo_info;
           R2 = Hp - 16;
           R1 = _sbfHa::P64;
           Sp = Sp + 40;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
       cbgNI: // global
           I64[Sp] = block_cbgMh_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto ubgP9; else goto cbgMi;
       ubgP9: // global
           call _cbgMh(R1) args: 0, res: 0, upd: 0;
       cbgMi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgMc_info" {
     block_cbgMc_info:
         const _cbgMc;
         const 261;
         const 4294967326;
         const SbfJE_srt+312;
 },
 _cbgMh() //  [R1]
         { []
         }
     {offset
       cbgMh: // global
           if (R1 & 7 == 1) goto cbgNL; else goto cbgO4;
       cbgNL: // global
           I64[Sp + 24] = block_cbgMm_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto ubgPa; else goto cbgMn;
       ubgPa: // global
           call _cbgMm(R1) args: 0, res: 0, upd: 0;
       cbgMn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbgO4: // global
           I64[Sp] = block_cbgMQ_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubgPb; else goto cbgMR;
       ubgPb: // global
           call _cbgMQ(R1) args: 0, res: 0, upd: 0;
       cbgMR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgMh_info" {
     block_cbgMh_info:
         const _cbgMh;
         const 389;
         const 4294967326;
         const SbfJE_srt+312;
 },
 _cbgMm() //  [R1]
         { []
         }
     {offset
       cbgMm: // global
           if (R1 & 7 == 1) goto cbgNO; else goto cbgNW;
       cbgNO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbgNR; else goto cbgNQ;
       cbgNR: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbgNQ: // global
           I64[Hp - 16] = sat_sbfHL_info;
           P64[Hp] = P64[Sp + 8];
           _sbfHa::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cbgOo_info;
           R2 = Hp - 16;
           R1 = _sbfHa::P64;
           Sp = Sp + 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
       cbgNW: // global
           I64[Sp] = block_cbgMA_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubgPc; else goto cbgMB;
       ubgPc: // global
           call _cbgMA(R1) args: 0, res: 0, upd: 0;
       cbgMB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgMm_info" {
     block_cbgMm_info:
         const _cbgMm;
         const 2;
         const 4294967326;
         const SbfJE_srt+312;
 },
 _cbgMA() //  [R1]
         { []
         }
     {offset
       cbgMA: // global
           I64[Sp] = block_cbgMF_info;
           R1 = P64[R1 + 23];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgMA_info" {
     block_cbgMA_info:
         const _cbgMA;
         const 2;
         const 4294967326;
         const SbfJE_srt+312;
 },
 _cbgMF() //  [R1]
         { []
         }
     {offset
       cbgMF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbgO0; else goto cbgNZ;
       cbgO0: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbgNZ: // global
           I64[Hp - 16] = sat_sbfHX_info;
           P64[Hp] = P64[Sp + 8];
           _sbfHa::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cbgOo_info;
           R2 = Hp - 16;
           R1 = _sbfHa::P64;
           Sp = Sp + 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgMF_info" {
     block_cbgMF_info:
         const _cbgMF;
         const 2;
         const 4294967326;
         const SbfJE_srt+312;
 },
 _cbgMQ() //  [R1]
         { []
         }
     {offset
       cbgMQ: // global
           I64[Sp] = block_cbgMV_info;
           R1 = P64[R1 + 23];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgMQ_info" {
     block_cbgMQ_info:
         const _cbgMQ;
         const 389;
         const 4294967326;
         const SbfJE_srt+312;
 },
 _cbgMV() //  []
         { []
         }
     {offset
       cbgMV: // global
           I64[Sp + 24] = block_cbgMX_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto ubgPd; else goto cbgMY;
       ubgPd: // global
           call _cbgMX(R1) args: 0, res: 0, upd: 0;
       cbgMY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgMV_info" {
     block_cbgMV_info:
         const _cbgMV;
         const 389;
         const 4294967326;
         const SbfJE_srt+312;
 },
 _cbgMX() //  [R1]
         { []
         }
     {offset
       cbgMX: // global
           if (R1 & 7 == 1) goto cbgO9; else goto cbgOh;
       cbgO9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbgOc; else goto cbgOb;
       cbgOc: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbgOb: // global
           I64[Hp - 16] = sat_sbfIa_info;
           P64[Hp] = P64[Sp + 8];
           _sbfHa::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cbgOo_info;
           R2 = Hp - 16;
           R1 = _sbfHa::P64;
           Sp = Sp + 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
       cbgOh: // global
           I64[Sp] = block_cbgNb_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubgPe; else goto cbgNc;
       ubgPe: // global
           call _cbgNb(R1) args: 0, res: 0, upd: 0;
       cbgNc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgMX_info" {
     block_cbgMX_info:
         const _cbgMX;
         const 2;
         const 4294967326;
         const SbfJE_srt+312;
 },
 _cbgNb() //  [R1]
         { []
         }
     {offset
       cbgNb: // global
           I64[Sp] = block_cbgNg_info;
           R1 = P64[R1 + 23];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgNb_info" {
     block_cbgNb_info:
         const _cbgNb;
         const 2;
         const 4294967326;
         const SbfJE_srt+312;
 },
 _cbgNg() //  [R1]
         { []
         }
     {offset
       cbgNg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbgOl; else goto cbgOk;
       cbgOl: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbgOk: // global
           I64[Hp - 16] = sat_sbfIm_info;
           P64[Hp] = P64[Sp + 8];
           _sbfHa::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cbgOo_info;
           R2 = Hp - 16;
           R1 = _sbfHa::P64;
           Sp = Sp + 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgNg_info" {
     block_cbgNg_info:
         const _cbgNg;
         const 2;
         const 4294967326;
         const SbfJE_srt+312;
 },
 _cbgOo() //  []
         { []
         }
     {offset
       cbgOo: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgOo_info" {
     block_cbgOo_info:
         const _cbgOo;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.484229595 UTC

[section ""data" . stdHandleFinalizer_rbfCB_closure" {
     stdHandleFinalizer_rbfCB_closure:
         const stdHandleFinalizer_rbfCB_info;
         const 0;
 },
 stdHandleFinalizer_rbfCB_entry() //  [R2, R3]
         { []
         }
     {offset
       cbgRb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbgRc; else goto cbgRd;
       cbgRc: // global
           R3 = R3;
           R2 = R2;
           R1 = stdHandleFinalizer_rbfCB_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbgRd: // global
           I64[Sp - 16] = block_cbgR8_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubgRh; else goto cbgR9;
       ubgRh: // global
           call _cbgR8(R1) args: 0, res: 0, upd: 0;
       cbgR9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . stdHandleFinalizer_rbfCB_info" {
     stdHandleFinalizer_rbfCB_info:
         const stdHandleFinalizer_rbfCB_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const SbfJE_srt+320;
 },
 _cbgR8() //  [R1]
         { []
         }
     {offset
       cbgR8: // global
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wstdHandleFinalizer_rbfCA_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgR8_info" {
     block_cbgR8_info:
         const _cbgR8;
         const 1;
         const 4294967326;
         const SbfJE_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.488906587 UTC

[section ""cstring" . lvl6_rbfCC_bytes" {
     lvl6_rbfCC_bytes:
         I8[] [60,115,116,100,101,114,114,62]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.491749773 UTC

[section ""data" . lvl7_rbfCD_closure" {
     lvl7_rbfCD_closure:
         const lvl7_rbfCD_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_rbfCD_entry() //  [R1]
         { []
         }
     {offset
       cbgRy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbgRz; else goto cbgRA;
       cbgRz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbgRA: // global
           (_cbgRv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbgRv::I64 == 0) goto cbgRx; else goto cbgRw;
       cbgRx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbgRw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbgRv::I64;
           R2 = lvl6_rbfCC_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl7_rbfCD_info" {
     lvl7_rbfCD_info:
         const lvl7_rbfCD_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.495070571 UTC

[section ""data" . lvl8_rbfCE_closure" {
     lvl8_rbfCE_closure:
         const GHC.Base.Just_con_info;
         const stdHandleFinalizer_rbfCB_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.498440277 UTC

[section ""data" . lvl9_rbfCF_closure" {
     lvl9_rbfCF_closure:
         const lvl9_rbfCF_info;
         const 0;
 },
 section ""relreadonly" . ubgS6_srtd" {
     ubgS6_srtd:
         const SbfJE_srt+64;
         const 37;
         const 120259089281;
 },
 lvl9_rbfCF_entry() //  []
         { []
         }
     {offset
       cbgRS: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbgRT; else goto cbgRU;
       cbgRT: // global
           R1 = lvl9_rbfCF_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbgRU: // global
           I64[Sp - 8] = block_cbgRN_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl9_rbfCF_info" {
     lvl9_rbfCF_info:
         const lvl9_rbfCF_entry;
         const 0;
         const 18446744069414584334;
         const 4294967299;
         const ubgS6_srtd;
 },
 section ""relreadonly" . ubgS7_srtd" {
     ubgS7_srtd:
         const SbfJE_srt+64;
         const 36;
         const 51539612545;
 },
 _cbgRN() //  []
         { []
         }
     {offset
       cbgRN: // global
           I64[Sp] = block_cbgRP_info;
           R1 = GHC.IO.Encoding.getLocaleEncoding1_closure;
           if (R1 & 7 != 0) goto ubgS5; else goto cbgRQ;
       ubgS5: // global
           call _cbgRP(R1) args: 0, res: 0, upd: 0;
       cbgRQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgRN_info" {
     block_cbgRN_info:
         const _cbgRN;
         const 0;
         const 18446744069414584350;
         const ubgS7_srtd;
 },
 section ""relreadonly" . ubgS8_srtd" {
     ubgS8_srtd:
         const SbfJE_srt+64;
         const 36;
         const 51539608449;
 },
 _cbgRP() //  [R1]
         { []
         }
     {offset
       cbgRP: // global
           I64[Sp] = block_cbgRY_info;
           R1 = P64[R1 + 7];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgRP_info" {
     block_cbgRP_info:
         const _cbgRP;
         const 0;
         const 18446744069414584350;
         const ubgS8_srtd;
 },
 section ""relreadonly" . ubgS9_srtd" {
     ubgS9_srtd:
         const SbfJE_srt+64;
         const 36;
         const 51539608449;
 },
 _cbgRY() //  [R1]
         { []
         }
     {offset
       cbgRY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbgS3; else goto cbgS2;
       cbgS3: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbgS2: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           R6 = lvl7_rbfCD_closure;
           R5 = GHC.IO.FD.stderr_closure;
           R4 = GHC.IO.Handle.FD.fdToHandle12_closure;
           R3 = GHC.IO.FD.$fBufferedIOFD_closure;
           R2 = GHC.IO.FD.$fIODeviceFD_closure;
           P64[Sp - 40] = GHC.IO.Handle.Types.WriteHandle_closure+4;
           P64[Sp - 32] = GHC.Types.False_closure+1;
           P64[Sp - 24] = Hp - 6;
           P64[Sp - 16] = GHC.IO.Handle.Types.nativeNewlineMode_closure;
           P64[Sp - 8] = lvl8_rbfCE_closure+2;
           P64[Sp] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 40;
           call GHC.IO.Handle.Internals.mkDuplexHandle5_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgRY_info" {
     block_cbgRY_info:
         const _cbgRY;
         const 0;
         const 18446744069414584350;
         const ubgS9_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.509049722 UTC

[section ""data" . GHC.IO.Handle.FD.stderr_closure" {
     GHC.IO.Handle.FD.stderr_closure:
         const GHC.IO.Handle.FD.stderr_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.FD.stderr_entry() //  [R1]
         { []
         }
     {offset
       cbgSC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbgSD; else goto cbgSE;
       cbgSD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbgSE: // global
           (_cbgSx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbgSx::I64 == 0) goto cbgSz; else goto cbgSy;
       cbgSz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbgSy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbgSx::I64;
           I64[Sp - 24] = block_cbgSA_info;
           Sp = Sp - 24;
           call lvl9_rbfCF_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.stderr_info" {
     GHC.IO.Handle.FD.stderr_info:
         const GHC.IO.Handle.FD.stderr_entry;
         const 0;
         const 4294967317;
         const SbfJE_srt+352;
 },
 _cbgSA() //  [R1]
         { []
         }
     {offset
       cbgSA: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbgSA_info" {
     block_cbgSA_info:
         const _cbgSA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.514954183 UTC

[section ""cstring" . lvl10_rbfCG_bytes" {
     lvl10_rbfCG_bytes:
         I8[] [60,115,116,100,111,117,116,62]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.517181038 UTC

[section ""data" . lvl11_rbfCH_closure" {
     lvl11_rbfCH_closure:
         const lvl11_rbfCH_info;
         const 0;
         const 0;
         const 0;
 },
 lvl11_rbfCH_entry() //  [R1]
         { []
         }
     {offset
       cbgSZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbgT0; else goto cbgT1;
       cbgT0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbgT1: // global
           (_cbgSW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbgSW::I64 == 0) goto cbgSY; else goto cbgSX;
       cbgSY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbgSX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbgSW::I64;
           R2 = lvl10_rbfCG_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl11_rbfCH_info" {
     lvl11_rbfCH_info:
         const lvl11_rbfCH_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.52247282 UTC

[section ""data" . lvl12_rbfCI_closure" {
     lvl12_rbfCI_closure:
         const lvl12_rbfCI_info;
         const 0;
 },
 section ""relreadonly" . ubgTw_srtd" {
     ubgTw_srtd:
         const SbfJE_srt+64;
         const 39;
         const 446676603777;
 },
 lvl12_rbfCI_entry() //  []
         { []
         }
     {offset
       cbgTi: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbgTj; else goto cbgTk;
       cbgTj: // global
           R1 = lvl12_rbfCI_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbgTk: // global
           I64[Sp - 8] = block_cbgTd_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl12_rbfCI_info" {
     lvl12_rbfCI_info:
         const lvl12_rbfCI_entry;
         const 0;
         const 18446744069414584334;
         const 4294967299;
         const ubgTw_srtd;
 },
 section ""relreadonly" . ubgTx_srtd" {
     ubgTx_srtd:
         const SbfJE_srt+64;
         const 38;
         const 171798696833;
 },
 _cbgTd() //  []
         { []
         }
     {offset
       cbgTd: // global
           I64[Sp] = block_cbgTf_info;
           R1 = GHC.IO.Encoding.getLocaleEncoding1_closure;
           if (R1 & 7 != 0) goto ubgTv; else goto cbgTg;
       ubgTv: // global
           call _cbgTf(R1) args: 0, res: 0, upd: 0;
       cbgTg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgTd_info" {
     block_cbgTd_info:
         const _cbgTd;
         const 0;
         const 18446744069414584350;
         const ubgTx_srtd;
 },
 section ""relreadonly" . ubgTy_srtd" {
     ubgTy_srtd:
         const SbfJE_srt+64;
         const 38;
         const 171798692737;
 },
 _cbgTf() //  [R1]
         { []
         }
     {offset
       cbgTf: // global
           I64[Sp] = block_cbgTo_info;
           R1 = P64[R1 + 7];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgTf_info" {
     block_cbgTf_info:
         const _cbgTf;
         const 0;
         const 18446744069414584350;
         const ubgTy_srtd;
 },
 section ""relreadonly" . ubgTz_srtd" {
     ubgTz_srtd:
         const SbfJE_srt+64;
         const 38;
         const 171798692737;
 },
 _cbgTo() //  [R1]
         { []
         }
     {offset
       cbgTo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbgTt; else goto cbgTs;
       cbgTt: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbgTs: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           R6 = lvl11_rbfCH_closure;
           R5 = GHC.IO.FD.stdout_closure;
           R4 = GHC.IO.Handle.FD.fdToHandle12_closure;
           R3 = GHC.IO.FD.$fBufferedIOFD_closure;
           R2 = GHC.IO.FD.$fIODeviceFD_closure;
           P64[Sp - 40] = GHC.IO.Handle.Types.WriteHandle_closure+4;
           P64[Sp - 32] = GHC.Types.True_closure+2;
           P64[Sp - 24] = Hp - 6;
           P64[Sp - 16] = GHC.IO.Handle.Types.nativeNewlineMode_closure;
           P64[Sp - 8] = lvl8_rbfCE_closure+2;
           P64[Sp] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 40;
           call GHC.IO.Handle.Internals.mkDuplexHandle5_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgTo_info" {
     block_cbgTo_info:
         const _cbgTo;
         const 0;
         const 18446744069414584350;
         const ubgTz_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.533743593 UTC

[section ""data" . GHC.IO.Handle.FD.stdout_closure" {
     GHC.IO.Handle.FD.stdout_closure:
         const GHC.IO.Handle.FD.stdout_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.FD.stdout_entry() //  [R1]
         { []
         }
     {offset
       cbgU2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbgU3; else goto cbgU4;
       cbgU3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbgU4: // global
           (_cbgTX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbgTX::I64 == 0) goto cbgTZ; else goto cbgTY;
       cbgTZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbgTY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbgTX::I64;
           I64[Sp - 24] = block_cbgU0_info;
           Sp = Sp - 24;
           call lvl12_rbfCI_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.stdout_info" {
     GHC.IO.Handle.FD.stdout_info:
         const GHC.IO.Handle.FD.stdout_entry;
         const 0;
         const 4294967317;
         const SbfJE_srt+368;
 },
 _cbgU0() //  [R1]
         { []
         }
     {offset
       cbgU0: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbgU0_info" {
     block_cbgU0_info:
         const _cbgU0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.538560118 UTC

[section ""cstring" . lvl13_rbfCJ_bytes" {
     lvl13_rbfCJ_bytes:
         I8[] [60,115,116,100,105,110,62]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.540795217 UTC

[section ""data" . lvl14_rbfCK_closure" {
     lvl14_rbfCK_closure:
         const lvl14_rbfCK_info;
         const 0;
         const 0;
         const 0;
 },
 lvl14_rbfCK_entry() //  [R1]
         { []
         }
     {offset
       cbgUp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbgUq; else goto cbgUr;
       cbgUq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbgUr: // global
           (_cbgUm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbgUm::I64 == 0) goto cbgUo; else goto cbgUn;
       cbgUo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbgUn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbgUm::I64;
           R2 = lvl13_rbfCJ_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl14_rbfCK_info" {
     lvl14_rbfCK_info:
         const lvl14_rbfCK_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.546107665 UTC

[section ""data" . lvl15_rbfCL_closure" {
     lvl15_rbfCL_closure:
         const lvl15_rbfCL_info;
         const 0;
 },
 section ""relreadonly" . ubgUW_srtd" {
     ubgUW_srtd:
         const SbfJE_srt+64;
         const 41;
         const 1683627185025;
 },
 lvl15_rbfCL_entry() //  []
         { []
         }
     {offset
       cbgUI: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbgUJ; else goto cbgUK;
       cbgUJ: // global
           R1 = lvl15_rbfCL_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbgUK: // global
           I64[Sp - 8] = block_cbgUD_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl15_rbfCL_info" {
     lvl15_rbfCL_info:
         const lvl15_rbfCL_entry;
         const 0;
         const 18446744069414584334;
         const 4294967299;
         const ubgUW_srtd;
 },
 section ""relreadonly" . ubgUX_srtd" {
     ubgUX_srtd:
         const SbfJE_srt+64;
         const 40;
         const 584115557249;
 },
 _cbgUD() //  []
         { []
         }
     {offset
       cbgUD: // global
           I64[Sp] = block_cbgUF_info;
           R1 = GHC.IO.Encoding.getLocaleEncoding1_closure;
           if (R1 & 7 != 0) goto ubgUV; else goto cbgUG;
       ubgUV: // global
           call _cbgUF(R1) args: 0, res: 0, upd: 0;
       cbgUG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgUD_info" {
     block_cbgUD_info:
         const _cbgUD;
         const 0;
         const 18446744069414584350;
         const ubgUX_srtd;
 },
 section ""relreadonly" . ubgUY_srtd" {
     ubgUY_srtd:
         const SbfJE_srt+64;
         const 40;
         const 584115553153;
 },
 _cbgUF() //  [R1]
         { []
         }
     {offset
       cbgUF: // global
           I64[Sp] = block_cbgUO_info;
           R1 = P64[R1 + 7];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgUF_info" {
     block_cbgUF_info:
         const _cbgUF;
         const 0;
         const 18446744069414584350;
         const ubgUY_srtd;
 },
 section ""relreadonly" . ubgUZ_srtd" {
     ubgUZ_srtd:
         const SbfJE_srt+64;
         const 40;
         const 584115553153;
 },
 _cbgUO() //  [R1]
         { []
         }
     {offset
       cbgUO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbgUT; else goto cbgUS;
       cbgUT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbgUS: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           R6 = lvl14_rbfCK_closure;
           R5 = GHC.IO.FD.stdin_closure;
           R4 = GHC.IO.Handle.FD.fdToHandle12_closure;
           R3 = GHC.IO.FD.$fBufferedIOFD_closure;
           R2 = GHC.IO.FD.$fIODeviceFD_closure;
           P64[Sp - 40] = GHC.IO.Handle.Types.ReadHandle_closure+3;
           P64[Sp - 32] = GHC.Types.True_closure+2;
           P64[Sp - 24] = Hp - 6;
           P64[Sp - 16] = GHC.IO.Handle.Types.nativeNewlineMode_closure;
           P64[Sp - 8] = lvl8_rbfCE_closure+2;
           P64[Sp] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 40;
           call GHC.IO.Handle.Internals.mkDuplexHandle5_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbgUO_info" {
     block_cbgUO_info:
         const _cbgUO;
         const 0;
         const 18446744069414584350;
         const ubgUZ_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.558123636 UTC

[section ""data" . GHC.IO.Handle.FD.stdin_closure" {
     GHC.IO.Handle.FD.stdin_closure:
         const GHC.IO.Handle.FD.stdin_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.FD.stdin_entry() //  [R1]
         { []
         }
     {offset
       cbgVs: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbgVt; else goto cbgVu;
       cbgVt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbgVu: // global
           (_cbgVn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbgVn::I64 == 0) goto cbgVp; else goto cbgVo;
       cbgVp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbgVo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbgVn::I64;
           I64[Sp - 24] = block_cbgVq_info;
           Sp = Sp - 24;
           call lvl15_rbfCL_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.stdin_info" {
     GHC.IO.Handle.FD.stdin_info:
         const GHC.IO.Handle.FD.stdin_entry;
         const 0;
         const 4294967317;
         const SbfJE_srt+384;
 },
 _cbgVq() //  [R1]
         { []
         }
     {offset
       cbgVq: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbgVq_info" {
     block_cbgVq_info:
         const _cbgVq;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:12.563161456 UTC

[section ""relreadonly" . SbfJE_srt" {
     SbfJE_srt:
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
         const lvl1_rbfCv_closure;
         const lvl3_rbfCx_closure;
         const GHC.IO.Handle.FD.handleToFd3_closure;
         const lvl5_rbfCz_closure;
         const GHC.IO.Handle.FD.handleToFd2_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const GHC.IO.Handle.FD.fdToHandle12_closure;
         const GHC.IO.Handle.FD.handleToFd1_closure;
         const GHC.IO.Handle.FD.fdToHandle7_closure;
         const Foreign.C.Error.throwErrnoIfMinus1Retry2_closure;
         const System.Posix.Internals.setNonBlockingFD3_closure;
         const GHC.IO.Handle.Internals.mkDuplexHandle1_closure;
         const GHC.IO.Handle.Internals.mkDuplexHandle4_closure;
         const GHC.IO.Handle.Internals.mkDuplexHandle5_closure;
         const GHC.IO.FD.$fBufferedIOFD_closure;
         const GHC.IO.FD.$fIODeviceFD_closure;
         const GHC.IO.Handle.FD.fdToHandle5_closure;
         const GHC.IO.Handle.FD.fdToHandle6_closure;
         const GHC.IO.Encoding.getLocaleEncoding1_closure;
         const GHC.IO.FD.$wmkFD_closure;
         const GHC.IO.Handle.FD.fdToHandle'1_closure;
         const GHC.IO.Handle.FD.fdToHandle2_closure;
         const System.Posix.Internals.$wfdGetMode_closure;
         const GHC.IO.Handle.FD.$wfdToHandle_closure;
         const GHC.IO.Handle.FD.fdToHandle1_closure;
         const GHC.IO.FD.$w$cclose_closure;
         const GHC.IO.FD.openFile1_closure;
         const GHC.IO.Handle.FD.openBinaryFile5_closure;
         const GHC.IO.Handle.FD.fdToHandle10_closure;
         const GHC.IO.Handle.FD.openFile2_closure;
         const GHC.IO.Exception.$fExceptionIOException4_closure;
         const GHC.IO.Handle.FD.openFile1_closure;
         const GHC.IO.Handle.FD.openFileBlocking1_closure;
         const GHC.IO.Handle.FD.openBinaryFile3_closure;
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
         const GHC.IO.Handle.FD.openBinaryFile2_closure;
         const GHC.IO.Handle.FD.openBinaryFile1_closure;
         const GHC.IO.Handle.Internals.ioe_finalizedHandle_closure;
         const $wstdHandleFinalizer_rbfCA_closure;
         const stdHandleFinalizer_rbfCB_closure;
         const lvl7_rbfCD_closure;
         const lvl8_rbfCE_closure;
         const lvl9_rbfCF_closure;
         const lvl11_rbfCH_closure;
         const lvl12_rbfCI_closure;
         const lvl14_rbfCK_closure;
         const lvl15_rbfCL_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.543603271 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:06:13.546184139 UTC

[section ""data" . GHC.IO.Handle.FD.fdToHandle12_closure" {
     GHC.IO.Handle.FD.fdToHandle12_closure:
         const GHC.IO.Handle.FD.fdToHandle12_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.FD.fdToHandle12_entry() //  [R1]
         { []
         }
     {offset
       cbh2s: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cbh2t; else goto cbh2u;
       cbh2t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbh2u: // global
           (_cbh2k::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbh2k::I64 == 0) goto cbh2m; else goto cbh2l;
       cbh2m: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbh2l: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbh2k::I64;
           I64[Sp - 24] = block_cbh2n_info;
           R6 = 0;
           R5 = GHC.IO.FD.$tcFD1_closure;
           R4 = GHC.IO.FD.$trModule_closure;
           R3 = 15546290101957756376;
           R2 = 10838815552519039062;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.fdToHandle12_info" {
     GHC.IO.Handle.FD.fdToHandle12_info:
         const GHC.IO.Handle.FD.fdToHandle12_entry;
         const 0;
         const 4294967317;
         const Sbh2A_srt;
 },
 _cbh2n() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cbh2n: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _cbh2o() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbh2n_info" {
     block_cbh2n_info:
         const _cbh2n;
         const 0;
         const 30;
 },
 _cbh2o() //  []
         { []
         }
     {offset
       cbh2o: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbh2x; else goto cbh2w;
       cbh2x: // global
           HpAlloc = 48;
           I64[Sp] = block_cbh2o_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       cbh2w: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbh2o_info" {
     block_cbh2o_info:
         const _cbh2o;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.553127975 UTC

[section ""cstring" . GHC.IO.Handle.FD.$trModule4_bytes" {
     GHC.IO.Handle.FD.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.554926137 UTC

[section ""data" . GHC.IO.Handle.FD.$trModule3_closure" {
     GHC.IO.Handle.FD.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.FD.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.556614684 UTC

[section ""cstring" . GHC.IO.Handle.FD.$trModule2_bytes" {
     GHC.IO.Handle.FD.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,46,72,97,110,100,108,101,46,70,68]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.558354496 UTC

[section ""data" . GHC.IO.Handle.FD.$trModule1_closure" {
     GHC.IO.Handle.FD.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.FD.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.56005088 UTC

[section ""data" . GHC.IO.Handle.FD.$trModule_closure" {
     GHC.IO.Handle.FD.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.Handle.FD.$trModule3_closure+1;
         const GHC.IO.Handle.FD.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.561765122 UTC

[section ""cstring" . lvl_rbfCu_bytes" {
     lvl_rbfCu_bytes:
         I8[] [104,97,110,100,108,101,84,111,70,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.564101674 UTC

[section ""data" . lvl1_rbfCv_closure" {
     lvl1_rbfCv_closure:
         const lvl1_rbfCv_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_rbfCv_entry() //  [R1]
         { []
         }
     {offset
       cbh3d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbh3e; else goto cbh3f;
       cbh3e: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbh3f: // global
           (_cbh3a::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbh3a::I64 == 0) goto cbh3c; else goto cbh3b;
       cbh3c: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbh3b: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbh3a::I64;
           R2 = lvl_rbfCu_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_rbfCv_info" {
     lvl1_rbfCv_info:
         const lvl1_rbfCv_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.568214006 UTC

[section ""cstring" . lvl2_rbfCw_bytes" {
     lvl2_rbfCw_bytes:
         I8[] [110,111,116,32,97,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.570384281 UTC

[section ""data" . lvl3_rbfCx_closure" {
     lvl3_rbfCx_closure:
         const lvl3_rbfCx_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_rbfCx_entry() //  [R1]
         { []
         }
     {offset
       cbh3v: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbh3w; else goto cbh3x;
       cbh3w: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbh3x: // global
           (_cbh3s::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbh3s::I64 == 0) goto cbh3u; else goto cbh3t;
       cbh3u: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbh3t: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbh3s::I64;
           R2 = lvl2_rbfCw_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_rbfCx_info" {
     lvl3_rbfCx_info:
         const lvl3_rbfCx_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.575828628 UTC

[section ""data" . GHC.IO.Handle.FD.handleToFd3_closure" {
     GHC.IO.Handle.FD.handleToFd3_closure:
         const GHC.IO.Handle.FD.handleToFd3_info;
         const 0;
 },
 sat_sbgVT_entry() //  [R1]
         { []
         }
     {offset
       cbh3Q: // global
           _sbgVT::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbh3R; else goto cbh3S;
       cbh3S: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cbh3U; else goto cbh3T;
       cbh3U: // global
           HpAlloc = 72;
           goto cbh3R;
       cbh3R: // global
           R1 = _sbgVT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbh3T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbgVT::P64;
           _sbgVP::P64 = P64[_sbgVT::P64 + 16];
           I64[Hp - 64] = GHC.Base.Just_con_info;
           P64[Hp - 56] = _sbgVP::P64;
           I64[Hp - 48] = GHC.IO.Exception.IOError_con_info;
           P64[Hp - 40] = Hp - 62;
           P64[Hp - 32] = GHC.IO.Exception.InappropriateType_closure+1;
           P64[Hp - 24] = lvl1_rbfCv_closure;
           P64[Hp - 16] = lvl3_rbfCx_closure;
           P64[Hp - 8] = GHC.Base.Nothing_closure+1;
           P64[Hp] = GHC.Base.Nothing_closure+1;
           R2 = Hp - 47;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbgVT_info" {
     sat_sbgVT_info:
         const sat_sbgVT_entry;
         const 1;
         const 30064771088;
         const Sbh2A_srt+8;
 },
 GHC.IO.Handle.FD.handleToFd3_entry() //  [R2]
         { []
         }
     {offset
       cbh3V: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbh3Z; else goto cbh3Y;
       cbh3Z: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Handle.FD.handleToFd3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbh3Y: // global
           I64[Hp - 16] = sat_sbgVT_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.handleToFd3_info" {
     GHC.IO.Handle.FD.handleToFd3_info:
         const GHC.IO.Handle.FD.handleToFd3_entry;
         const 0;
         const 64424509454;
         const 8589934597;
         const Sbh2A_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.581782629 UTC

[section ""cstring" . lvl4_rbfCy_bytes" {
     lvl4_rbfCy_bytes:
         I8[] [110,111,116,32,97,32,102,105,108,101,32,104,97,110,100,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.584021179 UTC

[section ""data" . lvl5_rbfCz_closure" {
     lvl5_rbfCz_closure:
         const lvl5_rbfCz_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_rbfCz_entry() //  [R1]
         { []
         }
     {offset
       cbh4s: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbh4t; else goto cbh4u;
       cbh4t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbh4u: // global
           (_cbh4p::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbh4p::I64 == 0) goto cbh4r; else goto cbh4q;
       cbh4r: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbh4q: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbh4p::I64;
           R2 = lvl4_rbfCy_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl5_rbfCz_info" {
     lvl5_rbfCz_info:
         const lvl5_rbfCz_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.588643748 UTC

[section ""data" . GHC.IO.Handle.FD.handleToFd2_closure" {
     GHC.IO.Handle.FD.handleToFd2_closure:
         const GHC.IO.Handle.FD.handleToFd2_info;
         const 0;
 },
 sat_sbgVY_entry() //  [R1]
         { []
         }
     {offset
       cbh4N: // global
           _sbgVY::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbh4O; else goto cbh4P;
       cbh4P: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cbh4R; else goto cbh4Q;
       cbh4R: // global
           HpAlloc = 72;
           goto cbh4O;
       cbh4O: // global
           R1 = _sbgVY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbh4Q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbgVY::P64;
           _sbgVU::P64 = P64[_sbgVY::P64 + 16];
           I64[Hp - 64] = GHC.Base.Just_con_info;
           P64[Hp - 56] = _sbgVU::P64;
           I64[Hp - 48] = GHC.IO.Exception.IOError_con_info;
           P64[Hp - 40] = Hp - 62;
           P64[Hp - 32] = GHC.IO.Exception.InappropriateType_closure+1;
           P64[Hp - 24] = lvl1_rbfCv_closure;
           P64[Hp - 16] = lvl5_rbfCz_closure;
           P64[Hp - 8] = GHC.Base.Nothing_closure+1;
           P64[Hp] = GHC.Base.Nothing_closure+1;
           R2 = Hp - 47;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbgVY_info" {
     sat_sbgVY_info:
         const sat_sbgVY_entry;
         const 1;
         const 81604378640;
         const Sbh2A_srt+8;
 },
 GHC.IO.Handle.FD.handleToFd2_entry() //  [R2]
         { []
         }
     {offset
       cbh4S: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbh4W; else goto cbh4V;
       cbh4W: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Handle.FD.handleToFd2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbh4V: // global
           I64[Hp - 16] = sat_sbgVY_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.handleToFd2_info" {
     GHC.IO.Handle.FD.handleToFd2_info:
         const GHC.IO.Handle.FD.handleToFd2_entry;
         const 0;
         const 219043332110;
         const 8589934597;
         const Sbh2A_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.596043993 UTC

[section ""data" . GHC.IO.Handle.FD.handleToFd1_closure" {
     GHC.IO.Handle.FD.handleToFd1_closure:
         const GHC.IO.Handle.FD.handleToFd1_info;
         const 0;
 },
 GHC.IO.Handle.FD.handleToFd1_entry() //  [R2]
         { []
         }
     {offset
       cbh5t: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbh5u; else goto cbh5v;
       cbh5u: // global
           R2 = R2;
           R1 = GHC.IO.Handle.FD.handleToFd1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbh5v: // global
           I64[Sp - 8] = block_cbh5m_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubh5X; else goto cbh5n;
       ubh5X: // global
           call _cbh5m(R1) args: 0, res: 0, upd: 0;
       cbh5n: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.handleToFd1_info" {
     GHC.IO.Handle.FD.handleToFd1_info:
         const GHC.IO.Handle.FD.handleToFd1_entry;
         const 0;
         const 261993005070;
         const 8589934597;
         const Sbh2A_srt+32;
 },
 _cbh5m() //  [R1]
         { []
         }
     {offset
       cbh5m: // global
           if (R1 & 7 == 1) goto cbh5q; else goto cbh5r;
       cbh5q: // global
           I64[Sp - 8] = block_cbh5y_info;
           _sbgW1::P64 = R1;
           R1 = P64[R1 + 15];
           P64[Sp] = _sbgW1::P64;
           Sp = Sp - 8;
           call stg_readMVar#(R1) args: 8, res: 8, upd: 8;
       cbh5r: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.IO.Handle.FD.handleToFd2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbh5m_info" {
     block_cbh5m_info:
         const _cbh5m;
         const 0;
         const 124554051614;
         const Sbh2A_srt+32;
 },
 _cbh5y() //  [R1]
         { []
         }
     {offset
       cbh5y: // global
           I64[Sp] = block_cbh5A_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubh5Y; else goto cbh5D;
       ubh5Y: // global
           call _cbh5A(R1) args: 0, res: 0, upd: 0;
       cbh5D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbh5y_info" {
     block_cbh5y_info:
         const _cbh5y;
         const 1;
         const 107374182430;
         const Sbh2A_srt+32;
 },
 _cbh5A() //  [R1]
         { []
         }
     {offset
       cbh5A: // global
           I64[Sp - 8] = block_cbh5H_info;
           R3 = GHC.IO.Handle.FD.fdToHandle12_closure;
           R2 = P64[R1 + 23];
           P64[Sp] = P64[R1 + 31];
           Sp = Sp - 8;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbh5A_info" {
     block_cbh5A_info:
         const _cbh5A;
         const 1;
         const 107374182430;
         const Sbh2A_srt+32;
 },
 _cbh5H() //  [R1]
         { []
         }
     {offset
       cbh5H: // global
           if (R1 & 7 == 1) goto cbh5O; else goto cbh5S;
       cbh5O: // global
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.IO.Handle.FD.handleToFd3_entry(R2) args: 8, res: 0, upd: 8;
       cbh5S: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbh5H_info" {
     block_cbh5H_info:
         const _cbh5H;
         const 2;
         const 4294967326;
         const Sbh2A_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.606309545 UTC

[section ""data" . GHC.IO.Handle.FD.handleToFd_closure" {
     GHC.IO.Handle.FD.handleToFd_closure:
         const GHC.IO.Handle.FD.handleToFd_info;
         const 0;
 },
 GHC.IO.Handle.FD.handleToFd_entry() //  [R2]
         { []
         }
     {offset
       cbh6w: // global
           R2 = R2;
           call GHC.IO.Handle.FD.handleToFd1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.handleToFd_info" {
     GHC.IO.Handle.FD.handleToFd_info:
         const GHC.IO.Handle.FD.handleToFd_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const Sbh2A_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.609495103 UTC

[section ""cstring" . GHC.IO.Handle.FD.fdToHandle11_bytes" {
     GHC.IO.Handle.FD.fdToHandle11_bytes:
         I8[] [111,112,101,110,70,105,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.612281613 UTC

[section ""data" . GHC.IO.Handle.FD.fdToHandle10_closure" {
     GHC.IO.Handle.FD.fdToHandle10_closure:
         const GHC.IO.Handle.FD.fdToHandle10_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.FD.fdToHandle10_entry() //  [R1]
         { []
         }
     {offset
       cbh6K: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbh6L; else goto cbh6M;
       cbh6L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbh6M: // global
           (_cbh6H::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbh6H::I64 == 0) goto cbh6J; else goto cbh6I;
       cbh6J: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbh6I: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbh6H::I64;
           R2 = GHC.IO.Handle.FD.fdToHandle11_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.fdToHandle10_info" {
     GHC.IO.Handle.FD.fdToHandle10_info:
         const GHC.IO.Handle.FD.fdToHandle10_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.616261815 UTC

[section ""cstring" . GHC.IO.Handle.FD.fdToHandle9_bytes" {
     GHC.IO.Handle.FD.fdToHandle9_bytes:
         I8[] [105,115,32,97,32,100,105,114,101,99,116,111,114,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.618506991 UTC

[section ""data" . GHC.IO.Handle.FD.fdToHandle8_closure" {
     GHC.IO.Handle.FD.fdToHandle8_closure:
         const GHC.IO.Handle.FD.fdToHandle8_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.FD.fdToHandle8_entry() //  [R1]
         { []
         }
     {offset
       cbh72: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbh73; else goto cbh74;
       cbh73: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbh74: // global
           (_cbh6Z::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbh6Z::I64 == 0) goto cbh71; else goto cbh70;
       cbh71: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbh70: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbh6Z::I64;
           R2 = GHC.IO.Handle.FD.fdToHandle9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.fdToHandle8_info" {
     GHC.IO.Handle.FD.fdToHandle8_info:
         const GHC.IO.Handle.FD.fdToHandle8_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.622198629 UTC

[section ""data" . GHC.IO.Handle.FD.fdToHandle7_closure" {
     GHC.IO.Handle.FD.fdToHandle7_closure:
         const GHC.IO.Exception.IOError_con_info;
         const GHC.Base.Nothing_closure+1;
         const GHC.IO.Exception.InappropriateType_closure+1;
         const GHC.IO.Handle.FD.fdToHandle10_closure;
         const GHC.IO.Handle.FD.fdToHandle8_closure;
         const GHC.Base.Nothing_closure+1;
         const GHC.Base.Nothing_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.624565835 UTC

[section ""data" . GHC.IO.Handle.FD.fdToHandle6_closure" {
     GHC.IO.Handle.FD.fdToHandle6_closure:
         const GHC.IO.Handle.FD.fdToHandle6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.FD.fdToHandle6_entry() //  [R1]
         { []
         }
     {offset
       cbh7k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbh7l; else goto cbh7m;
       cbh7l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbh7m: // global
           (_cbh7h::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbh7h::I64 == 0) goto cbh7j; else goto cbh7i;
       cbh7j: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbh7i: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbh7h::I64;
           R2 = GHC.IO.Handle.FD.fdToHandle7_closure+1;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.fdToHandle6_info" {
     GHC.IO.Handle.FD.fdToHandle6_info:
         const GHC.IO.Handle.FD.fdToHandle6_entry;
         const 0;
         const 2203318222869;
         const Sbh2A_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.635151838 UTC

[section ""data" . GHC.IO.Handle.FD.fdToHandle5_closure" {
     GHC.IO.Handle.FD.fdToHandle5_closure:
         const GHC.IO.Handle.FD.fdToHandle5_info;
         const 0;
 },
 nl_sbgWC_entry() //  [R1]
         { []
         }
     {offset
       cbh7L: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbh7M; else goto cbh7N;
       cbh7M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbh7N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbh7I_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubh7R; else goto cbh7J;
       ubh7R: // global
           call _cbh7I() args: 0, res: 0, upd: 0;
       cbh7J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . nl_sbgWC_info" {
     nl_sbgWC_info:
         const nl_sbgWC_entry;
         const 1;
         const 16;
 },
 _cbh7I() //  []
         { []
         }
     {offset
       cbh7I: // global
           R1 = GHC.IO.Handle.Types.nativeNewlineMode_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbh7I_info" {
     block_cbh7I_info:
         const _cbh7I;
         const 0;
         const 30;
 },
 sat_sbgWH_entry() //  [R1]
         { []
         }
     {offset
       cbh8a: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbh8b; else goto cbh8c;
       cbh8b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbh8c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbh81_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubh8r; else goto cbh82;
       ubh8r: // global
           call _cbh81(R1) args: 0, res: 0, upd: 0;
       cbh82: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbgWH_info" {
     sat_sbgWH_info:
         const sat_sbgWH_entry;
         const 1;
         const 16;
 },
 _cbh81() //  [R1]
         { []
         }
     {offset
       cbh81: // global
           _cbh89::P64 = R1 & 7;
           if (_cbh89::P64 < 3) goto ubh8p; else goto ubh8q;
       ubh8p: // global
           if (_cbh89::P64 < 2) goto cbh85; else goto cbh86;
       cbh85: // global
           R1 = GHC.IO.Handle.Types.ReadHandle_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cbh86: // global
           R1 = GHC.IO.Handle.Types.WriteHandle_closure+4;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ubh8q: // global
           if (_cbh89::P64 < 4) goto cbh87; else goto cbh88;
       cbh87: // global
           R1 = GHC.IO.Handle.Types.AppendHandle_closure+5;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cbh88: // global
           R1 = GHC.IO.Handle.Types.ReadWriteHandle_closure+6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbh81_info" {
     block_cbh81_info:
         const _cbh81;
         const 0;
         const 30;
 },
 sat_sbgX0_entry() //  [R1]
         { []
         }
     {offset
       cbh8L: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbh8X; else goto cbh8W;
       cbh8X: // global
           HpAlloc = 16;
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbh8W: // global
           (_sbgWX::I64) = call "capi" arg hints:  [‘signed’,
                                                    ‘signed’]  result hints:  [‘signed’] ghczuwrapperZC17ZCbaseZCSystemziPosixziInternalsZCfcntl(I64[R1 + 7], %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[R1 + 15])));
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sbgWX::I64));
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbgX0_info" {
     sat_sbgX0_info:
         const sat_sbgX0_entry;
         const 8589934592;
         const 13;
         const 4294967299;
 },
 GHC.IO.Handle.FD.fdToHandle5_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cbh92: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbh93; else goto cbh94;
       cbh93: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.FD.fdToHandle5_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cbh94: // global
           I64[Sp - 40] = block_cbh8s_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubhaC; else goto cbh8t;
       ubhaC: // global
           call _cbh8s(R1) args: 0, res: 0, upd: 0;
       cbh8t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.fdToHandle5_info" {
     GHC.IO.Handle.FD.fdToHandle5_info:
         const GHC.IO.Handle.FD.fdToHandle5_entry;
         const 0;
         const 17562121273358;
         const 30064771098;
         const Sbh2A_srt+64;
 },
 _cbh8s() //  [R1]
         { []
         }
     {offset
       cbh8s: // global
           _sbgWs::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cbh8Z; else goto cbh90;
       cbh8Z: // global
           P64[Sp + 8] = _sbgWs::P64;
           Sp = Sp + 8;
           call _cbh7C() args: 0, res: 0, upd: 0;
       cbh90: // global
           I64[Sp + 8] = block_cbh8y_info;
           R1 = _sbgWs::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ubhaA; else goto cbh8z;
       ubhaA: // global
           call _cbh8y(R1) args: 0, res: 0, upd: 0;
       cbh8z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbh8s_info" {
     block_cbh8s_info:
         const _cbh8s;
         const 5;
         const 13164074762270;
         const Sbh2A_srt+64;
 },
 _cbh8y() //  [R1]
         { []
         }
     {offset
       cbh8y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbh9L; else goto cbh9K;
       cbh9L: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbh9K: // global
           _sbgWM::I64 = I64[R1 + 7];
           (_sbgWR::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_f_getfl();
           I64[Hp - 16] = sat_sbgX0_info;
           I64[Hp - 8] = _sbgWM::I64;
           I64[Hp] = _sbgWR::I64;
           I64[Sp - 8] = block_cbh9F_info;
           R4 = Hp - 15;
           R3 = System.Posix.Internals.setNonBlockingFD3_closure;
           R2 = System.Posix.Internals.fdFileSize_pred_closure+1;
           I64[Sp] = _sbgWM::I64;
           Sp = Sp - 8;
           call Foreign.C.Error.throwErrnoIfMinus1Retry2_entry(R4,
                                                               R3,
                                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbh8y_info" {
     block_cbh8y_info:
         const _cbh8y;
         const 4;
         const 13164074762270;
         const Sbh2A_srt+64;
 },
 _cbh9F() //  [R1]
         { []
         }
     {offset
       cbh9F: // global
           I64[Sp] = block_cbh9H_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubhaG; else goto cbh9N;
       ubhaG: // global
           call _cbh9H(R1) args: 0, res: 0, upd: 0;
       cbh9N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbh9F_info" {
     block_cbh9F_info:
         const _cbh9F;
         const 69;
         const 13060995547166;
         const Sbh2A_srt+64;
 },
 _cbh9H() //  [R1]
         { []
         }
     {offset
       cbh9H: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbh9T; else goto cbh9S;
       cbh9T: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbh9S: // global
           _sbgWM::I64 = I64[Sp + 8];
           _sbgX5::I64 = I64[R1 + 7];
           (_sbgX9::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_o_nonblock();
           _sbgXa::I64 = _sbgX5::I64 | %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sbgX9::I64));
           if (_sbgX5::I64 == _sbgXa::I64) goto cbhad; else goto cbhae;
       cbhad: // global
           I64[Hp - 16] = GHC.IO.FD.FD_con_info;
           I64[Hp - 8] = _sbgWM::I64;
           I64[Hp] = 1;
           P64[Sp + 8] = Hp - 15;
           Sp = Sp + 8;
           goto ubhaI;
       cbhae: // global
           (_sbgXk::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_f_setfl();
           (_sbgXp::I64) = call "capi" arg hints:  [‘signed’, ‘signed’,
                                                    ‘signed’]  result hints:  [‘signed’] ghczuwrapperZC16ZCbaseZCSystemziPosixziInternalsZCfcntl(_sbgWM::I64, %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sbgXk::I64)), _sbgXa::I64);
           I64[Hp - 16] = GHC.IO.FD.FD_con_info;
           I64[Hp - 8] = _sbgWM::I64;
           I64[Hp] = 1;
           P64[Sp + 8] = Hp - 15;
           Sp = Sp + 8;
           goto ubhaI;
       ubhaI: // global
           call _cbh7C() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbh9H_info" {
     block_cbh9H_info:
         const _cbh9H;
         const 69;
         const 13060995547166;
         const Sbh2A_srt+64;
 },
 _cbh7C() //  []
         { []
         }
     {offset
       cbh7C: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbh98; else goto cbh97;
       cbh98: // global
           HpAlloc = 24;
           _sbgWB::P64 = P64[Sp];
           I64[Sp] = block_cbh7B_info;
           R1 = _sbgWB::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbh97: // global
           I64[Hp - 16] = nl_sbgWC_info;
           P64[Hp] = P64[Sp + 32];
           I64[Sp - 8] = block_cbh95_info;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = Hp - 16;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubhaz; else goto cbh9c;
       ubhaz: // global
           call _cbh95(R1) args: 0, res: 0, upd: 0;
       cbh9c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbh7B() //  [R1]
         { []
         }
     {offset
       cbh7B: // global
           P64[Sp] = R1;
           call _cbh7C() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbh7B_info" {
     block_cbh7B_info:
         const _cbh7B;
         const 4;
         const 13060995547166;
         const Sbh2A_srt+64;
 },
 _cbh95() //  [R1]
         { []
         }
     {offset
       cbh95: // global
           _cbhar::P64 = R1 & 7;
           if (_cbhar::P64 != 1) goto ubhat; else goto cbh9m;
       ubhat: // global
           if (_cbhar::P64 != 2) goto ubhaE; else goto cbh9r;
       ubhaE: // global
           call _cbh7V() args: 0, res: 0, upd: 0;
       cbh9r: // global
           I64[Sp] = block_cbh9p_info;
           R1 = P64[Sp + 32];
           if (R1 & 7 != 0) goto ubhaD; else goto cbh9s;
       ubhaD: // global
           call _cbh9p(R1) args: 0, res: 0, upd: 0;
       cbh9s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbh9m: // global
           R1 = GHC.IO.Handle.FD.fdToHandle6_closure;
           Sp = Sp + 48;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbh95_info" {
     block_cbh95_info:
         const _cbh95;
         const 5;
         const 13060995547166;
         const Sbh2A_srt+64;
 },
 _cbh9p() //  [R1]
         { []
         }
     {offset
       cbh9p: // global
           if (R1 & 7 == 4) goto cbh9C; else goto ubhaF;
       cbh9C: // global
           R6 = P64[Sp + 24];
           R5 = P64[Sp + 8];
           R4 = GHC.IO.Handle.FD.fdToHandle12_closure;
           R3 = GHC.IO.FD.$fBufferedIOFD_closure;
           R2 = GHC.IO.FD.$fIODeviceFD_closure;
           P64[Sp + 32] = P64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 16];
           Sp = Sp + 32;
           call GHC.IO.Handle.Internals.mkDuplexHandle1_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 24, res: 0, upd: 8;
       ubhaF: // global
           call _cbh7V() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbh9p_info" {
     block_cbh9p_info:
         const _cbh9p;
         const 5;
         const 4264902524958;
         const Sbh2A_srt+64;
 },
 _cbh7V() //  []
         { []
         }
     {offset
       cbh7V: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbh9b; else goto cbh9a;
       cbh9b: // global
           HpAlloc = 24;
           I64[Sp] = block_cbh7V_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cbh9a: // global
           I64[Hp - 16] = sat_sbgWH_info;
           P64[Hp] = P64[Sp + 32];
           R6 = P64[Sp + 24];
           R5 = P64[Sp + 8];
           R4 = GHC.IO.Handle.FD.fdToHandle12_closure;
           R3 = GHC.IO.FD.$fBufferedIOFD_closure;
           R2 = GHC.IO.FD.$fIODeviceFD_closure;
           P64[Sp] = Hp - 16;
           P64[Sp + 8] = GHC.Types.True_closure+2;
           _cbh7E::P64 = P64[Sp + 16];
           P64[Sp + 16] = P64[Sp + 40];
           P64[Sp + 24] = _cbh7E::P64;
           P64[Sp + 32] = GHC.IO.Handle.Internals.mkDuplexHandle4_closure;
           P64[Sp + 40] = GHC.Base.Nothing_closure+1;
           call GHC.IO.Handle.Internals.mkDuplexHandle5_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbh7V_info" {
     block_cbh7V_info:
         const _cbh7V;
         const 5;
         const 4127463571486;
         const Sbh2A_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.664632092 UTC

[section ""data" . GHC.IO.Handle.FD.mkHandleFromFD_closure" {
     GHC.IO.Handle.FD.mkHandleFromFD_closure:
         const GHC.IO.Handle.FD.mkHandleFromFD_info;
         const 0;
 },
 GHC.IO.Handle.FD.mkHandleFromFD_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cbhcz: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.FD.fdToHandle5_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.mkHandleFromFD_info" {
     GHC.IO.Handle.FD.mkHandleFromFD_info:
         const GHC.IO.Handle.FD.mkHandleFromFD_entry;
         const 0;
         const 4294967310;
         const 30064771098;
         const Sbh2A_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.668067082 UTC

[section ""data" . GHC.IO.Handle.FD.fdToHandle'2_closure" {
     GHC.IO.Handle.FD.fdToHandle'2_closure:
         const GHC.Word.W64#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.674185481 UTC

[section ""data" . GHC.IO.Handle.FD.fdToHandle'1_closure" {
     GHC.IO.Handle.FD.fdToHandle'1_closure:
         const GHC.IO.Handle.FD.fdToHandle'1_info;
         const 0;
 },
 GHC.IO.Handle.FD.fdToHandle'1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cbhcU: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbhcV; else goto cbhcW;
       cbhcV: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.FD.fdToHandle'1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cbhcW: // global
           I64[Sp - 40] = block_cbhcN_info;
           R1 = R3;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubhei; else goto cbhcO;
       ubhei: // global
           call _cbhcN(R1) args: 0, res: 0, upd: 0;
       cbhcO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.fdToHandle'1_info" {
     GHC.IO.Handle.FD.fdToHandle'1_info:
         const GHC.IO.Handle.FD.fdToHandle'1_entry;
         const 0;
         const 124554051598;
         const 30064771098;
         const Sbh2A_srt+144;
 },
 _cbhcN() //  [R1]
         { []
         }
     {offset
       cbhcN: // global
           if (R1 & 7 == 1) goto cbhcR; else goto cbhcS;
       cbhcR: // global
           _sbgXr::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cbhdr_info;
           R5 = P64[Sp + 16];
           R4 = GHC.Base.Nothing_closure+1;
           R3 = P64[Sp + 32];
           R2 = _sbgXr::P64;
           Sp = Sp + 8;
           call GHC.IO.FD.$wmkFD_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 8;
       cbhcS: // global
           I64[Sp] = block_cbhdD_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubheh; else goto cbhdF;
       ubheh: // global
           call _cbhdD(R1) args: 0, res: 0, upd: 0;
       cbhdF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhcN_info" {
     block_cbhcN_info:
         const _cbhcN;
         const 5;
         const 55834574878;
         const Sbh2A_srt+144;
 },
 _cbhdr() //  [R1]
         { []
         }
     {offset
       cbhdr: // global
           I64[Sp] = block_cbhdt_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubhek; else goto cbhdw;
       ubhek: // global
           call _cbhdt(R1) args: 0, res: 0, upd: 0;
       cbhdw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhdr_info" {
     block_cbhdr_info:
         const _cbhdr;
         const 4;
         const 21474836510;
         const Sbh2A_srt+144;
 },
 _cbhdt() //  [R1]
         { []
         }
     {offset
       cbhdt: // global
           P64[Sp] = P64[R1 + 7];
           P64[Sp - 8] = P64[R1 + 15];
           Sp = Sp - 8;
           call _sbgXy() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbhdt_info" {
     block_cbhdt_info:
         const _cbhdt;
         const 4;
         const 21474836510;
         const Sbh2A_srt+144;
 },
 _cbhdD() //  [R1]
         { []
         }
     {offset
       cbhdD: // global
           _sbgXr::P64 = P64[Sp + 8];
           _sbgXt::P64 = P64[Sp + 16];
           _sbgXv::P64 = P64[Sp + 32];
           if (R1 & 7 == 3) goto cbhe5; else goto cbhdP;
       cbhe5: // global
           I64[Sp + 8] = block_cbhe1_info;
           R5 = _sbgXt::P64;
           R4 = GHC.Base.Nothing_closure+1;
           R3 = _sbgXv::P64;
           R2 = _sbgXr::P64;
           Sp = Sp + 8;
           call GHC.IO.FD.$wmkFD_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 8;
       cbhdP: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbhdS; else goto cbhdR;
       cbhdS: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbhdR: // global
           I64[Hp - 40] = (,,)_con_info;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = GHC.IO.Handle.FD.fdToHandle'2_closure+1;
           P64[Hp - 16] = GHC.IO.Handle.FD.fdToHandle'2_closure+1;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 39;
           I64[Sp + 8] = block_cbhdL_info;
           R5 = _sbgXt::P64;
           R4 = Hp - 6;
           R3 = _sbgXv::P64;
           R2 = _sbgXr::P64;
           Sp = Sp + 8;
           call GHC.IO.FD.$wmkFD_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhdD_info" {
     block_cbhdD_info:
         const _cbhdD;
         const 5;
         const 55834574878;
         const Sbh2A_srt+144;
 },
 _cbhe1() //  [R1]
         { []
         }
     {offset
       cbhe1: // global
           I64[Sp] = block_cbhe3_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubheo; else goto cbhe7;
       ubheo: // global
           call _cbhe3(R1) args: 0, res: 0, upd: 0;
       cbhe7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhe1_info" {
     block_cbhe1_info:
         const _cbhe1;
         const 4;
         const 21474836510;
         const Sbh2A_srt+144;
 },
 _cbhe3() //  [R1]
         { []
         }
     {offset
       cbhe3: // global
           P64[Sp] = P64[R1 + 7];
           P64[Sp - 8] = P64[R1 + 15];
           Sp = Sp - 8;
           call _sbgXy() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbhe3_info" {
     block_cbhe3_info:
         const _cbhe3;
         const 4;
         const 21474836510;
         const Sbh2A_srt+144;
 },
 _cbhdL() //  [R1]
         { []
         }
     {offset
       cbhdL: // global
           I64[Sp] = block_cbhdN_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubhem; else goto cbhdU;
       ubhem: // global
           call _cbhdN(R1) args: 0, res: 0, upd: 0;
       cbhdU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhdL_info" {
     block_cbhdL_info:
         const _cbhdL;
         const 4;
         const 21474836510;
         const Sbh2A_srt+144;
 },
 _cbhdN() //  [R1]
         { []
         }
     {offset
       cbhdN: // global
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = P64[R1 + 7];
           Sp = Sp - 8;
           call _sbgXy() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbhdN_info" {
     block_cbhdN_info:
         const _cbhdN;
         const 4;
         const 21474836510;
         const Sbh2A_srt+144;
 },
 _sbgXy() //  []
         { []
         }
     {offset
       sbgXy: // global
           I64[Sp - 8] = block_cbhd0_info;
           R1 = P64[Sp + 40];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubheq; else goto cbhd2;
       ubheq: // global
           call _cbhd0(R1) args: 0, res: 0, upd: 0;
       cbhd2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbhd0() //  [R1]
         { []
         }
     {offset
       cbhd0: // global
           if (R1 & 7 == 1) goto cbhdg; else goto cbhdo;
       cbhdg: // global
           I64[Sp] = block_cbhd6_info;
           R1 = GHC.IO.Encoding.getLocaleEncoding1_closure;
           if (R1 & 7 != 0) goto ubhej; else goto cbhd7;
       ubhej: // global
           call _cbhd6(R1) args: 0, res: 0, upd: 0;
       cbhd7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbhdo: // global
           R6 = P64[Sp + 24];
           R5 = P64[Sp + 40];
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           P64[Sp + 48] = GHC.Base.Nothing_closure+1;
           Sp = Sp + 48;
           call GHC.IO.Handle.FD.fdToHandle5_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhd0_info" {
     block_cbhd0_info:
         const _cbhd0;
         const 2054;
         const 21474836510;
         const Sbh2A_srt+144;
 },
 _cbhd6() //  [R1]
         { []
         }
     {offset
       cbhd6: // global
           I64[Sp] = block_cbhdb_info;
           R1 = P64[R1 + 7];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhd6_info" {
     block_cbhd6_info:
         const _cbhd6;
         const 2054;
         const 4294967326;
         const Sbh2A_srt+144;
 },
 _cbhdb() //  [R1]
         { []
         }
     {offset
       cbhdb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbhdk; else goto cbhdj;
       cbhdk: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbhdj: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           R6 = P64[Sp + 24];
           R5 = P64[Sp + 40];
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           P64[Sp + 48] = Hp - 6;
           Sp = Sp + 48;
           call GHC.IO.Handle.FD.fdToHandle5_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhdb_info" {
     block_cbhdb_info:
         const _cbhdb;
         const 2054;
         const 4294967326;
         const Sbh2A_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.698309177 UTC

[section ""data" . GHC.IO.Handle.FD.fdToHandle'_closure" {
     GHC.IO.Handle.FD.fdToHandle'_closure:
         const GHC.IO.Handle.FD.fdToHandle'_info;
         const 0;
 },
 GHC.IO.Handle.FD.fdToHandle'_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cbhfO: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.FD.fdToHandle'1_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.fdToHandle'_info" {
     GHC.IO.Handle.FD.fdToHandle'_info:
         const GHC.IO.Handle.FD.fdToHandle'_entry;
         const 0;
         const 4294967310;
         const 30064771098;
         const Sbh2A_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.701896869 UTC

[section ""cstring" . GHC.IO.Handle.FD.fdToHandle4_bytes" {
     GHC.IO.Handle.FD.fdToHandle4_bytes:
         I8[] [60,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,58,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.703639084 UTC

[section ""cstring" . GHC.IO.Handle.FD.fdToHandle3_bytes" {
     GHC.IO.Handle.FD.fdToHandle3_bytes:
         I8[] [62]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.705969102 UTC

[section ""data" . GHC.IO.Handle.FD.fdToHandle2_closure" {
     GHC.IO.Handle.FD.fdToHandle2_closure:
         const GHC.IO.Handle.FD.fdToHandle2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.FD.fdToHandle2_entry() //  [R1]
         { []
         }
     {offset
       cbhg3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbhg4; else goto cbhg5;
       cbhg4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbhg5: // global
           (_cbhg0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbhg0::I64 == 0) goto cbhg2; else goto cbhg1;
       cbhg2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbhg1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbhg0::I64;
           R2 = GHC.IO.Handle.FD.fdToHandle3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.fdToHandle2_info" {
     GHC.IO.Handle.FD.fdToHandle2_info:
         const GHC.IO.Handle.FD.fdToHandle2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.712638962 UTC

[section ""data" . GHC.IO.Handle.FD.$wfdToHandle_closure" {
     GHC.IO.Handle.FD.$wfdToHandle_closure:
         const GHC.IO.Handle.FD.$wfdToHandle_info;
         const 0;
 },
 sat_sbgYq_entry() //  [R1]
         { []
         }
     {offset
       cbhgD: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbhgJ; else goto cbhgK;
       cbhgJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbhgK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbhgA_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubhgP; else goto cbhgB;
       ubhgP: // global
           call _cbhgA(R1) args: 0, res: 0, upd: 0;
       cbhgB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbgYq_info" {
     sat_sbgYq_info:
         const sat_sbgYq_entry;
         const 1;
         const 4294967312;
         const Sbh2A_srt+184;
 },
 _cbhgA() //  [R1]
         { []
         }
     {offset
       cbhgA: // global
           I64[Sp] = block_cbhgG_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cbhgA_info" {
     block_cbhgA_info:
         const _cbhgA;
         const 0;
         const 4294967326;
         const Sbh2A_srt+184;
 },
 _cbhgG() //  [R1, R2]
         { []
         }
     {offset
       cbhgG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbhgO; else goto cbhgN;
       cbhgO: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cbhgN: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = GHC.IO.Handle.FD.fdToHandle2_closure;
           R2 = Hp - 14;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbhgG_info" {
     block_cbhgG_info:
         const _cbhgG;
         const 0;
         const 4294967326;
         const Sbh2A_srt+184;
 },
 sat_sbgYr_entry() //  [R1]
         { []
         }
     {offset
       cbhgQ: // global
           _sbgYr::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbhgR; else goto cbhgS;
       cbhgS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbhgU; else goto cbhgT;
       cbhgU: // global
           HpAlloc = 24;
           goto cbhgR;
       cbhgR: // global
           R1 = _sbgYr::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbhgT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbgYr::P64;
           _sbgYh::P64 = P64[_sbgYr::P64 + 16];
           I64[Hp - 16] = sat_sbgYq_info;
           P64[Hp] = _sbgYh::P64;
           R3 = Hp - 16;
           R2 = GHC.IO.Handle.FD.fdToHandle4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbgYr_info" {
     sat_sbgYr_info:
         const sat_sbgYr_entry;
         const 1;
         const 4294967312;
         const Sbh2A_srt+184;
 },
 GHC.IO.Handle.FD.$wfdToHandle_entry() //  [R2]
         { []
         }
     {offset
       cbhgV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbhgW; else goto cbhgX;
       cbhgW: // global
           R2 = R2;
           R1 = GHC.IO.Handle.FD.$wfdToHandle_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbhgX: // global
           I64[Sp - 16] = block_cbhgi_info;
           _sbgY7::I64 = R2;
           R2 = R2;
           I64[Sp - 8] = _sbgY7::I64;
           Sp = Sp - 16;
           call System.Posix.Internals.$wfdGetMode_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.$wfdToHandle_info" {
     GHC.IO.Handle.FD.$wfdToHandle_info:
         const GHC.IO.Handle.FD.$wfdToHandle_entry;
         const 0;
         const 1000727379982;
         const 8589934596;
         const Sbh2A_srt+144;
 },
 _cbhgi() //  [R1]
         { []
         }
     {offset
       cbhgi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbhh0; else goto cbhgZ;
       cbhh0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbhgZ: // global
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = I64[Sp + 8];
           I64[Sp] = block_cbhgl_info;
           R5 = GHC.Types.False_closure+1;
           R4 = GHC.Base.Nothing_closure+1;
           R3 = R1;
           R2 = Hp - 7;
           P64[Sp + 8] = R1;
           call GHC.IO.FD.$wmkFD_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhgi_info" {
     block_cbhgi_info:
         const _cbhgi;
         const 65;
         const 176093659166;
         const Sbh2A_srt+144;
 },
 _cbhgl() //  [R1]
         { []
         }
     {offset
       cbhgl: // global
           I64[Sp] = block_cbhgn_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubhh5; else goto cbhgo;
       ubhh5: // global
           call _cbhgn(R1) args: 0, res: 0, upd: 0;
       cbhgo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhgl_info" {
     block_cbhgl_info:
         const _cbhgl;
         const 1;
         const 141733920798;
         const Sbh2A_srt+144;
 },
 _cbhgn() //  [R1]
         { []
         }
     {offset
       cbhgn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbhh4; else goto cbhh3;
       cbhh4: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbhh3: // global
           _sbgYh::P64 = P64[R1 + 7];
           _sbgYi::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_sbgYr_info;
           P64[Hp] = _sbgYh::P64;
           R6 = GHC.Types.False_closure+1;
           R5 = P64[Sp + 8];
           R4 = Hp - 16;
           R3 = _sbgYi::P64;
           R2 = _sbgYh::P64;
           P64[Sp + 8] = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call GHC.IO.Handle.FD.fdToHandle5_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhgn_info" {
     block_cbhgn_info:
         const _cbhgn;
         const 1;
         const 141733920798;
         const Sbh2A_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.729157481 UTC

[section ""data" . GHC.IO.Handle.FD.fdToHandle1_closure" {
     GHC.IO.Handle.FD.fdToHandle1_closure:
         const GHC.IO.Handle.FD.fdToHandle1_info;
         const 0;
 },
 GHC.IO.Handle.FD.fdToHandle1_entry() //  [R2]
         { []
         }
     {offset
       cbhhZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbhi0; else goto cbhi1;
       cbhi0: // global
           R2 = R2;
           R1 = GHC.IO.Handle.FD.fdToHandle1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbhi1: // global
           I64[Sp - 8] = block_cbhhW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubhi5; else goto cbhhX;
       ubhi5: // global
           call _cbhhW(R1) args: 0, res: 0, upd: 0;
       cbhhX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.fdToHandle1_info" {
     GHC.IO.Handle.FD.fdToHandle1_info:
         const GHC.IO.Handle.FD.fdToHandle1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const Sbh2A_srt+200;
 },
 _cbhhW() //  [R1]
         { []
         }
     {offset
       cbhhW: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.IO.Handle.FD.$wfdToHandle_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhhW_info" {
     block_cbhhW_info:
         const _cbhhW;
         const 0;
         const 4294967326;
         const Sbh2A_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.735164477 UTC

[section ""data" . GHC.IO.Handle.FD.fdToHandle_closure" {
     GHC.IO.Handle.FD.fdToHandle_closure:
         const GHC.IO.Handle.FD.fdToHandle_info;
         const 0;
 },
 GHC.IO.Handle.FD.fdToHandle_entry() //  [R2]
         { []
         }
     {offset
       cbhik: // global
           R2 = R2;
           call GHC.IO.Handle.FD.fdToHandle1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.fdToHandle_info" {
     GHC.IO.Handle.FD.fdToHandle_info:
         const GHC.IO.Handle.FD.fdToHandle_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const Sbh2A_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.742554971 UTC

[section ""data" . GHC.IO.Handle.FD.openBinaryFile5_closure" {
     GHC.IO.Handle.FD.openBinaryFile5_closure:
         const GHC.IO.Handle.FD.openBinaryFile5_info;
         const 0;
 },
 sat_sbgYT_entry() //  [R1, R2]
         { []
         }
     {offset
       cbhiP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbhiT; else goto cbhiU;
       cbhiT: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbhiU: // global
           I64[Sp - 16] = block_cbhiM_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubhiY; else goto cbhiN;
       ubhiY: // global
           call _cbhiM(R1) args: 0, res: 0, upd: 0;
       cbhiN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbgYT_info" {
     sat_sbgYT_info:
         const sat_sbgYT_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const Sbh2A_srt+216;
 },
 _cbhiM() //  [R1]
         { []
         }
     {offset
       cbhiM: // global
           I64[Sp] = block_cbhiS_info;
           R2 = I64[R1 + 7];
           call GHC.IO.FD.$w$cclose_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhiM_info" {
     block_cbhiM_info:
         const _cbhiM;
         const 1;
         const 4294967326;
         const Sbh2A_srt+216;
 },
 _cbhiS() //  []
         { []
         }
     {offset
       cbhiS: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhiS_info" {
     block_cbhiS_info:
         const _cbhiS;
         const 1;
         const 30;
 },
 sat_sbgYK_entry() //  [R1]
         { []
         }
     {offset
       cbhj4: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbhj5; else goto cbhj6;
       cbhj5: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbhj6: // global
           R6 = GHC.Types.False_closure+1;
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[R1 + 31];
           R2 = P64[R1 + 23];
           P64[Sp - 8] = P64[R1 + 39];
           Sp = Sp - 8;
           call GHC.IO.Handle.FD.fdToHandle5_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbgYK_info" {
     sat_sbgYK_info:
         const sat_sbgYK_entry;
         const 5;
         const 4294967304;
         const 4294967299;
         const Sbh2A_srt+144;
 },
 GHC.IO.Handle.FD.openBinaryFile5_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cbhj7: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbhj8; else goto cbhj9;
       cbhj8: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.FD.openBinaryFile5_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbhj9: // global
           I64[Sp - 32] = block_cbhiv_info;
           _sbgYy::P64 = R4;
           R4 = R5;
           _sbgYx::P64 = R3;
           R3 = R3;
           _sbgYw::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _sbgYw::P64;
           P64[Sp - 16] = _sbgYx::P64;
           P64[Sp - 8] = _sbgYy::P64;
           Sp = Sp - 32;
           call GHC.IO.FD.openFile1_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.openBinaryFile5_info" {
     GHC.IO.Handle.FD.openBinaryFile5_info:
         const GHC.IO.Handle.FD.openBinaryFile5_entry;
         const 0;
         const 15414637625358;
         const 21474836504;
         const Sbh2A_srt+144;
 },
 _cbhiv() //  [R1]
         { []
         }
     {offset
       cbhiv: // global
           I64[Sp] = block_cbhix_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubhjH; else goto cbhiy;
       ubhjH: // global
           call _cbhix(R1) args: 0, res: 0, upd: 0;
       cbhiy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhiv_info" {
     block_cbhiv_info:
         const _cbhiv;
         const 3;
         const 2220498092062;
         const Sbh2A_srt+144;
 },
 _cbhix() //  [R1]
         { []
         }
     {offset
       cbhix: // global
           I64[Sp - 8] = block_cbhjb_info;
           _sbgYF::P64 = P64[R1 + 7];
           _sbgYG::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _sbgYG::P64;
           P64[Sp + 24] = _sbgYF::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubhjI; else goto cbhjg;
       ubhjI: // global
           call _cbhjb(R1) args: 0, res: 0, upd: 0;
       cbhjg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhix_info" {
     block_cbhix_info:
         const _cbhix;
         const 3;
         const 2220498092062;
         const Sbh2A_srt+144;
 },
 _cbhjb() //  [R1]
         { []
         }
     {offset
       cbhjb: // global
           if (R1 & 7 == 1) goto cbhjn; else goto cbhjB;
       cbhjn: // global
           I64[Sp] = block_cbhjk_info;
           R1 = GHC.IO.Encoding.getLocaleEncoding1_closure;
           if (R1 & 7 != 0) goto ubhjK; else goto cbhjo;
       ubhjK: // global
           call _cbhjk(R1) args: 0, res: 0, upd: 0;
       cbhjo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbhjB: // global
           P64[Sp] = GHC.Base.Nothing_closure+1;
           call _cbhiF() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbhjb_info" {
     block_cbhjb_info:
         const _cbhjb;
         const 4;
         const 2220498092062;
         const Sbh2A_srt+144;
 },
 _cbhjk() //  [R1]
         { []
         }
     {offset
       cbhjk: // global
           I64[Sp] = block_cbhjs_info;
           R1 = P64[R1 + 7];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhjk_info" {
     block_cbhjk_info:
         const _cbhjk;
         const 4;
         const 2203318222878;
         const Sbh2A_srt+144;
 },
 _cbhjs() //  [R1]
         { []
         }
     {offset
       cbhjs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbhjx; else goto cbhjw;
       cbhjx: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbhjw: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           P64[Sp] = Hp - 6;
           call _cbhiF() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbhjs_info" {
     block_cbhjs_info:
         const _cbhjs;
         const 4;
         const 2203318222878;
         const Sbh2A_srt+144;
 },
 _cbhiF() //  []
         { []
         }
     {offset
       cbhiF: // global
           Hp = Hp + 64;
           _sbgYJ::P64 = P64[Sp];
           if (Hp > HpLim) (likely: False) goto cbhjf; else goto cbhje;
       cbhjf: // global
           HpAlloc = 64;
           I64[Sp] = block_cbhiE_info;
           R1 = _sbgYJ::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbhje: // global
           I64[Hp - 56] = sat_sbgYT_info;
           _sbgYF::P64 = P64[Sp + 32];
           P64[Hp - 48] = _sbgYF::P64;
           I64[Hp - 40] = sat_sbgYK_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = _sbgYF::P64;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _sbgYJ::P64;
           R2 = Hp - 54;
           R1 = Hp - 39;
           Sp = Sp + 40;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _cbhiE() //  [R1]
         { []
         }
     {offset
       cbhiE: // global
           P64[Sp] = R1;
           call _cbhiF() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbhiE_info" {
     block_cbhiE_info:
         const _cbhiE;
         const 4;
         const 2203318222878;
         const Sbh2A_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.764500946 UTC

[section ""data" . GHC.IO.Handle.FD.openFile2_closure" {
     GHC.IO.Handle.FD.openFile2_closure:
         const GHC.IO.Handle.FD.openFile2_info;
         const 0;
 },
 sat_sbgZe_entry() //  [R1]
         { []
         }
     {offset
       cbhl4: // global
           _sbgZe::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbhl5; else goto cbhl6;
       cbhl6: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cbhl8; else goto cbhl7;
       cbhl8: // global
           HpAlloc = 72;
           goto cbhl5;
       cbhl5: // global
           R1 = _sbgZe::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbhl7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbgZe::P64;
           _sbgZ2::P64 = P64[_sbgZe::P64 + 16];
           _sbgZ6::P64 = P64[_sbgZe::P64 + 24];
           _sbgZ7::P64 = P64[_sbgZe::P64 + 32];
           _sbgZ9::P64 = P64[_sbgZe::P64 + 40];
           _sbgZa::P64 = P64[_sbgZe::P64 + 48];
           I64[Hp - 64] = GHC.Base.Just_con_info;
           P64[Hp - 56] = _sbgZ2::P64;
           I64[Hp - 48] = GHC.IO.Exception.IOError_con_info;
           P64[Hp - 40] = _sbgZ6::P64;
           P64[Hp - 32] = _sbgZ7::P64;
           P64[Hp - 24] = GHC.IO.Handle.FD.fdToHandle10_closure;
           P64[Hp - 16] = _sbgZ9::P64;
           P64[Hp - 8] = _sbgZa::P64;
           P64[Hp] = Hp - 62;
           R2 = Hp - 47;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbgZe_info" {
     sat_sbgZe_info:
         const sat_sbgZe_entry;
         const 5;
         const 2305843013508661263;
         const Sbh2A_srt+8;
 },
 GHC.IO.Handle.FD.openFile2_entry() //  [R2, R3]
         { []
         }
     {offset
       cbhl9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbhla; else goto cbhlb;
       cbhla: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.FD.openFile2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbhlb: // global
           I64[Sp - 16] = block_cbhkT_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubhlf; else goto cbhkU;
       ubhlf: // global
           call _cbhkT(R1) args: 0, res: 0, upd: 0;
       cbhkU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.openFile2_info" {
     GHC.IO.Handle.FD.openFile2_info:
         const GHC.IO.Handle.FD.openFile2_entry;
         const 0;
         const 6917529031936049166;
         const 12884901903;
         const Sbh2A_srt+8;
 },
 _cbhkT() //  [R1]
         { []
         }
     {offset
       cbhkT: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbhle; else goto cbhld;
       cbhle: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbhld: // global
           _sbgZ6::P64 = P64[R1 + 7];
           _sbgZ7::P64 = P64[R1 + 15];
           _sbgZ9::P64 = P64[R1 + 31];
           _sbgZa::P64 = P64[R1 + 39];
           I64[Hp - 48] = sat_sbgZe_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _sbgZ6::P64;
           P64[Hp - 16] = _sbgZ7::P64;
           P64[Hp - 8] = _sbgZ9::P64;
           P64[Hp] = _sbgZa::P64;
           R1 = Hp - 48;
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhkT_info" {
     block_cbhkT_info:
         const _cbhkT;
         const 1;
         const 2305843013508661278;
         const Sbh2A_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.775400135 UTC

[section ""data" . GHC.IO.Handle.FD.openFile1_closure" {
     GHC.IO.Handle.FD.openFile1_closure:
         const GHC.IO.Handle.FD.openFile1_info;
         const 0;
 },
 sat_sbgZp_entry() //  [R1]
         { []
         }
     {offset
       cbhm2: // global
           R1 = P64[R1 + 7];
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbgZp_info" {
     sat_sbgZp_info:
         const sat_sbgZp_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_sbgZr_entry() //  [R1, R2]
         { []
         }
     {offset
       cbhm5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbhm6; else goto cbhm7;
       cbhm6: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbhm7: // global
           I64[Sp - 16] = block_cbhlK_info;
           _sbgZf::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _sbgZf::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubhmk; else goto cbhlL;
       ubhmk: // global
           call _cbhlK(R1) args: 0, res: 0, upd: 0;
       cbhlL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbgZr_info" {
     sat_sbgZr_info:
         const sat_sbgZr_entry;
         const 1;
         const 216172786408751113;
         const 4294967301;
         const Sbh2A_srt+56;
 },
 _cbhlK() //  [R1]
         { []
         }
     {offset
       cbhlK: // global
           I64[Sp - 16] = block_cbhlP_info;
           R2 = P64[R1 + 7];
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhlK_info" {
     block_cbhlK_info:
         const _cbhlK;
         const 1;
         const 216172786408751134;
         const Sbh2A_srt+56;
 },
 _cbhlP() //  [R1]
         { []
         }
     {offset
       cbhlP: // global
           I64[Sp] = block_cbhlT_info;
           R3 = GHC.IO.Exception.$fExceptionIOException4_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhlP_info" {
     block_cbhlP_info:
         const _cbhlP;
         const 3;
         const 216172786408751134;
         const Sbh2A_srt+56;
 },
 _cbhlT() //  [R1]
         { []
         }
     {offset
       cbhlT: // global
           if (R1 & 7 == 1) goto cbhmb; else goto cbhmi;
       cbhmb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbhme; else goto cbhmd;
       cbhme: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbhmd: // global
           I64[Hp - 8] = sat_sbgZp_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbhmi: // global
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 24];
           R1 = GHC.IO.Handle.FD.openFile2_closure+3;
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhlT_info" {
     block_cbhlT_info:
         const _cbhlT;
         const 3;
         const 4294967326;
         const Sbh2A_srt+248;
 },
 sat_sbgZi_entry() //  [R1]
         { []
         }
     {offset
       cbhmq: // global
           R5 = GHC.Types.True_closure+2;
           R4 = GHC.Types.False_closure+1;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.IO.Handle.FD.openBinaryFile5_entry(R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbgZi_info" {
     sat_sbgZi_info:
         const sat_sbgZi_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const Sbh2A_srt+232;
 },
 GHC.IO.Handle.FD.openFile1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbhmt: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbhmx; else goto cbhmw;
       cbhmx: // global
           HpAlloc = 40;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.FD.openFile1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbhmw: // global
           I64[Hp - 32] = sat_sbgZr_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_sbgZi_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 31;
           R1 = Hp - 15;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.openFile1_info" {
     GHC.IO.Handle.FD.openFile1_info:
         const GHC.IO.Handle.FD.openFile1_entry;
         const 0;
         const 522417561069944846;
         const 12884901903;
         const Sbh2A_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.788787542 UTC

[section ""data" . GHC.IO.Handle.FD.openFile_closure" {
     GHC.IO.Handle.FD.openFile_closure:
         const GHC.IO.Handle.FD.openFile_info;
         const 0;
 },
 GHC.IO.Handle.FD.openFile_entry() //  [R2, R3]
         { []
         }
     {offset
       cbhnd: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.FD.openFile1_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.openFile_info" {
     GHC.IO.Handle.FD.openFile_info:
         const GHC.IO.Handle.FD.openFile_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const Sbh2A_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.794577516 UTC

[section ""data" . GHC.IO.Handle.FD.openFileBlocking1_closure" {
     GHC.IO.Handle.FD.openFileBlocking1_closure:
         const GHC.IO.Handle.FD.openFileBlocking1_info;
         const 0;
 },
 sat_sbgZC_entry() //  [R1]
         { []
         }
     {offset
       cbhnL: // global
           R1 = P64[R1 + 7];
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbgZC_info" {
     sat_sbgZC_info:
         const sat_sbgZC_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_sbgZE_entry() //  [R1, R2]
         { []
         }
     {offset
       cbhnO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbhnP; else goto cbhnQ;
       cbhnP: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbhnQ: // global
           I64[Sp - 16] = block_cbhnt_info;
           _sbgZs::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _sbgZs::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubho3; else goto cbhnu;
       ubho3: // global
           call _cbhnt(R1) args: 0, res: 0, upd: 0;
       cbhnu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbgZE_info" {
     sat_sbgZE_info:
         const sat_sbgZE_entry;
         const 1;
         const 216172786408751113;
         const 4294967301;
         const Sbh2A_srt+56;
 },
 _cbhnt() //  [R1]
         { []
         }
     {offset
       cbhnt: // global
           I64[Sp - 16] = block_cbhny_info;
           R2 = P64[R1 + 7];
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhnt_info" {
     block_cbhnt_info:
         const _cbhnt;
         const 1;
         const 216172786408751134;
         const Sbh2A_srt+56;
 },
 _cbhny() //  [R1]
         { []
         }
     {offset
       cbhny: // global
           I64[Sp] = block_cbhnC_info;
           R3 = GHC.IO.Exception.$fExceptionIOException4_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhny_info" {
     block_cbhny_info:
         const _cbhny;
         const 3;
         const 216172786408751134;
         const Sbh2A_srt+56;
 },
 _cbhnC() //  [R1]
         { []
         }
     {offset
       cbhnC: // global
           if (R1 & 7 == 1) goto cbhnU; else goto cbho1;
       cbhnU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbhnX; else goto cbhnW;
       cbhnX: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbhnW: // global
           I64[Hp - 8] = sat_sbgZC_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbho1: // global
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 24];
           R1 = GHC.IO.Handle.FD.openFile2_closure+3;
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhnC_info" {
     block_cbhnC_info:
         const _cbhnC;
         const 3;
         const 4294967326;
         const Sbh2A_srt+248;
 },
 sat_sbgZv_entry() //  [R1]
         { []
         }
     {offset
       cbho9: // global
           R5 = GHC.Types.False_closure+1;
           R4 = GHC.Types.False_closure+1;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.IO.Handle.FD.openBinaryFile5_entry(R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbgZv_info" {
     sat_sbgZv_info:
         const sat_sbgZv_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const Sbh2A_srt+232;
 },
 GHC.IO.Handle.FD.openFileBlocking1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbhoc: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbhog; else goto cbhof;
       cbhog: // global
           HpAlloc = 40;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.FD.openFileBlocking1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbhof: // global
           I64[Hp - 32] = sat_sbgZE_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_sbgZv_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 31;
           R1 = Hp - 15;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.openFileBlocking1_info" {
     GHC.IO.Handle.FD.openFileBlocking1_info:
         const GHC.IO.Handle.FD.openFileBlocking1_entry;
         const 0;
         const 810647937221656590;
         const 12884901903;
         const Sbh2A_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.808611534 UTC

[section ""data" . GHC.IO.Handle.FD.openFileBlocking_closure" {
     GHC.IO.Handle.FD.openFileBlocking_closure:
         const GHC.IO.Handle.FD.openFileBlocking_info;
         const 0;
 },
 GHC.IO.Handle.FD.openFileBlocking_entry() //  [R2, R3]
         { []
         }
     {offset
       cbhoW: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.FD.openFileBlocking1_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.openFileBlocking_info" {
     GHC.IO.Handle.FD.openFileBlocking_info:
         const GHC.IO.Handle.FD.openFileBlocking_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const Sbh2A_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.812012878 UTC

[section ""cstring" . GHC.IO.Handle.FD.openBinaryFile4_bytes" {
     GHC.IO.Handle.FD.openBinaryFile4_bytes:
         I8[] [111,112,101,110,66,105,110,97,114,121,70,105,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.814277452 UTC

[section ""data" . GHC.IO.Handle.FD.openBinaryFile3_closure" {
     GHC.IO.Handle.FD.openBinaryFile3_closure:
         const GHC.IO.Handle.FD.openBinaryFile3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.FD.openBinaryFile3_entry() //  [R1]
         { []
         }
     {offset
       cbhpa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbhpb; else goto cbhpc;
       cbhpb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbhpc: // global
           (_cbhp7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbhp7::I64 == 0) goto cbhp9; else goto cbhp8;
       cbhp9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbhp8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbhp7::I64;
           R2 = GHC.IO.Handle.FD.openBinaryFile4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.openBinaryFile3_info" {
     GHC.IO.Handle.FD.openBinaryFile3_info:
         const GHC.IO.Handle.FD.openBinaryFile3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.819466297 UTC

[section ""data" . GHC.IO.Handle.FD.openBinaryFile2_closure" {
     GHC.IO.Handle.FD.openBinaryFile2_closure:
         const GHC.IO.Handle.FD.openBinaryFile2_info;
         const 0;
 },
 sat_sbgZR_entry() //  [R1]
         { []
         }
     {offset
       cbhpA: // global
           _sbgZR::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbhpB; else goto cbhpC;
       cbhpC: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cbhpE; else goto cbhpD;
       cbhpE: // global
           HpAlloc = 72;
           goto cbhpB;
       cbhpB: // global
           R1 = _sbgZR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbhpD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbgZR::P64;
           _sbgZF::P64 = P64[_sbgZR::P64 + 16];
           _sbgZJ::P64 = P64[_sbgZR::P64 + 24];
           _sbgZK::P64 = P64[_sbgZR::P64 + 32];
           _sbgZM::P64 = P64[_sbgZR::P64 + 40];
           _sbgZN::P64 = P64[_sbgZR::P64 + 48];
           I64[Hp - 64] = GHC.Base.Just_con_info;
           P64[Hp - 56] = _sbgZF::P64;
           I64[Hp - 48] = GHC.IO.Exception.IOError_con_info;
           P64[Hp - 40] = _sbgZJ::P64;
           P64[Hp - 32] = _sbgZK::P64;
           P64[Hp - 24] = GHC.IO.Handle.FD.openBinaryFile3_closure;
           P64[Hp - 16] = _sbgZM::P64;
           P64[Hp - 8] = _sbgZN::P64;
           P64[Hp] = Hp - 62;
           R2 = Hp - 47;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbgZR_info" {
     sat_sbgZR_info:
         const sat_sbgZR_entry;
         const 5;
         const 12884901903;
         const Sbh2A_srt+280;
 },
 GHC.IO.Handle.FD.openBinaryFile2_entry() //  [R2, R3]
         { []
         }
     {offset
       cbhpF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbhpG; else goto cbhpH;
       cbhpG: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.FD.openBinaryFile2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbhpH: // global
           I64[Sp - 16] = block_cbhpp_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubhpL; else goto cbhpq;
       ubhpL: // global
           call _cbhpp(R1) args: 0, res: 0, upd: 0;
       cbhpq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.openBinaryFile2_info" {
     GHC.IO.Handle.FD.openBinaryFile2_info:
         const GHC.IO.Handle.FD.openBinaryFile2_entry;
         const 0;
         const 30064771086;
         const 12884901903;
         const Sbh2A_srt+280;
 },
 _cbhpp() //  [R1]
         { []
         }
     {offset
       cbhpp: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbhpK; else goto cbhpJ;
       cbhpK: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbhpJ: // global
           _sbgZJ::P64 = P64[R1 + 7];
           _sbgZK::P64 = P64[R1 + 15];
           _sbgZM::P64 = P64[R1 + 31];
           _sbgZN::P64 = P64[R1 + 39];
           I64[Hp - 48] = sat_sbgZR_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _sbgZJ::P64;
           P64[Hp - 16] = _sbgZK::P64;
           P64[Hp - 8] = _sbgZM::P64;
           P64[Hp] = _sbgZN::P64;
           R1 = Hp - 48;
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhpp_info" {
     block_cbhpp_info:
         const _cbhpp;
         const 1;
         const 12884901918;
         const Sbh2A_srt+280;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.829323268 UTC

[section ""data" . GHC.IO.Handle.FD.openBinaryFile1_closure" {
     GHC.IO.Handle.FD.openBinaryFile1_closure:
         const GHC.IO.Handle.FD.openBinaryFile1_info;
         const 0;
 },
 sat_sbh02_entry() //  [R1]
         { []
         }
     {offset
       cbhqy: // global
           R1 = P64[R1 + 7];
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbh02_info" {
     sat_sbh02_info:
         const sat_sbh02_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_sbh04_entry() //  [R1, R2]
         { []
         }
     {offset
       cbhqB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbhqC; else goto cbhqD;
       cbhqC: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbhqD: // global
           I64[Sp - 16] = block_cbhqg_info;
           _sbgZS::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _sbgZS::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubhqQ; else goto cbhqh;
       ubhqQ: // global
           call _cbhqg(R1) args: 0, res: 0, upd: 0;
       cbhqh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbh04_info" {
     sat_sbh04_info:
         const sat_sbh04_entry;
         const 1;
         const 4755801210798211081;
         const 4294967301;
         const Sbh2A_srt+56;
 },
 _cbhqg() //  [R1]
         { []
         }
     {offset
       cbhqg: // global
           I64[Sp - 16] = block_cbhql_info;
           R2 = P64[R1 + 7];
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhqg_info" {
     block_cbhqg_info:
         const _cbhqg;
         const 1;
         const 4755801210798211102;
         const Sbh2A_srt+56;
 },
 _cbhql() //  [R1]
         { []
         }
     {offset
       cbhql: // global
           I64[Sp] = block_cbhqp_info;
           R3 = GHC.IO.Exception.$fExceptionIOException4_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhql_info" {
     block_cbhql_info:
         const _cbhql;
         const 3;
         const 4755801210798211102;
         const Sbh2A_srt+56;
 },
 _cbhqp() //  [R1]
         { []
         }
     {offset
       cbhqp: // global
           if (R1 & 7 == 1) goto cbhqH; else goto cbhqO;
       cbhqH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbhqK; else goto cbhqJ;
       cbhqK: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbhqJ: // global
           I64[Hp - 8] = sat_sbh02_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbhqO: // global
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 24];
           R1 = GHC.IO.Handle.FD.openBinaryFile2_closure+3;
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhqp_info" {
     block_cbhqp_info:
         const _cbhqp;
         const 3;
         const 4294967326;
         const Sbh2A_srt+296;
 },
 sat_sbgZV_entry() //  [R1]
         { []
         }
     {offset
       cbhqW: // global
           R5 = GHC.Types.True_closure+2;
           R4 = GHC.Types.True_closure+2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.IO.Handle.FD.openBinaryFile5_entry(R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbgZV_info" {
     sat_sbgZV_info:
         const sat_sbgZV_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const Sbh2A_srt+232;
 },
 GHC.IO.Handle.FD.openBinaryFile1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbhqZ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbhr3; else goto cbhr2;
       cbhr3: // global
           HpAlloc = 40;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.FD.openBinaryFile1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbhr2: // global
           I64[Hp - 32] = sat_sbh04_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_sbgZV_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 31;
           R1 = Hp - 15;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.openBinaryFile1_info" {
     GHC.IO.Handle.FD.openBinaryFile1_info:
         const GHC.IO.Handle.FD.openBinaryFile1_entry;
         const 0;
         const 13997187646162468878;
         const 12884901903;
         const Sbh2A_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.842344867 UTC

[section ""data" . GHC.IO.Handle.FD.openBinaryFile_closure" {
     GHC.IO.Handle.FD.openBinaryFile_closure:
         const GHC.IO.Handle.FD.openBinaryFile_info;
         const 0;
 },
 GHC.IO.Handle.FD.openBinaryFile_entry() //  [R2, R3]
         { []
         }
     {offset
       cbhrJ: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.FD.openBinaryFile1_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.openBinaryFile_info" {
     GHC.IO.Handle.FD.openBinaryFile_info:
         const GHC.IO.Handle.FD.openBinaryFile_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const Sbh2A_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.854755287 UTC

[section ""data" . $wstdHandleFinalizer_rbfCA_closure" {
     $wstdHandleFinalizer_rbfCA_closure:
         const $wstdHandleFinalizer_rbfCA_info;
         const 0;
 },
 sat_sbh0H_entry() //  [R1]
         { []
         }
     {offset
       cbhsu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbhsv; else goto cbhsw;
       cbhsv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbhsw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.ioe_finalizedHandle_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbh0H_info" {
     sat_sbh0H_info:
         const sat_sbh0H_entry;
         const 1;
         const 4294967312;
         const Sbh2A_srt+312;
 },
 sat_sbh0T_entry() //  [R1]
         { []
         }
     {offset
       cbhsK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbhsL; else goto cbhsM;
       cbhsL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbhsM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.ioe_finalizedHandle_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbh0T_info" {
     sat_sbh0T_info:
         const sat_sbh0T_entry;
         const 1;
         const 4294967312;
         const Sbh2A_srt+312;
 },
 sat_sbh16_entry() //  [R1]
         { []
         }
     {offset
       cbht5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbht6; else goto cbht7;
       cbht6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbht7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.ioe_finalizedHandle_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbh16_info" {
     sat_sbh16_info:
         const sat_sbh16_entry;
         const 1;
         const 4294967312;
         const Sbh2A_srt+312;
 },
 sat_sbh1i_entry() //  [R1]
         { []
         }
     {offset
       cbhtl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbhtm; else goto cbhtn;
       cbhtm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbhtn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.ioe_finalizedHandle_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbh1i_info" {
     sat_sbh1i_info:
         const sat_sbh1i_entry;
         const 1;
         const 4294967312;
         const Sbh2A_srt+312;
 },
 sat_sbh1k_entry() //  [R1]
         { []
         }
     {offset
       cbhtu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbhtv; else goto cbhtw;
       cbhtv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbhtw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.ioe_finalizedHandle_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbh1k_info" {
     sat_sbh1k_info:
         const sat_sbh1k_entry;
         const 1;
         const 4294967312;
         const Sbh2A_srt+312;
 },
 $wstdHandleFinalizer_rbfCA_entry() //  [R2, R3]
         { []
         }
     {offset
       cbhtx: // global
           if ((Sp + -88) < SpLim) (likely: False) goto cbhty; else goto cbhtz;
       cbhty: // global
           R3 = R3;
           R2 = R2;
           R1 = $wstdHandleFinalizer_rbfCA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbhtz: // global
           I64[Sp - 24] = block_cbhrU_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wstdHandleFinalizer_rbfCA_info" {
     $wstdHandleFinalizer_rbfCA_info:
         const $wstdHandleFinalizer_rbfCA_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const Sbh2A_srt+312;
 },
 _cbhrU() //  [R1]
         { []
         }
     {offset
       cbhrU: // global
           I64[Sp] = block_cbhrW_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubhv5; else goto cbhrX;
       ubhv5: // global
           call _cbhrW(R1) args: 0, res: 0, upd: 0;
       cbhrX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhrU_info" {
     block_cbhrU_info:
         const _cbhrU;
         const 2;
         const 4294967326;
         const Sbh2A_srt+312;
 },
 _cbhrW() //  [R1]
         { []
         }
     {offset
       cbhrW: // global
           I64[Sp - 48] = block_cbhs1_info;
           _sbh0d::P64 = P64[R1 + 15];
           _sbh0f::P64 = P64[R1 + 31];
           _sbh0g::P64 = P64[R1 + 39];
           _sbh0h::P64 = P64[R1 + 47];
           _sbh0m::P64 = P64[R1 + 87];
           _sbh0n::P64 = P64[R1 + 95];
           R1 = P64[_sbh0h::P64 + 8];
           P64[Sp - 40] = _sbh0f::P64;
           P64[Sp - 32] = _sbh0g::P64;
           P64[Sp - 24] = _sbh0h::P64;
           P64[Sp - 16] = _sbh0m::P64;
           P64[Sp - 8] = _sbh0n::P64;
           P64[Sp] = _sbh0d::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto ubhv6; else goto cbhs2;
       ubhv6: // global
           call _cbhs1(R1) args: 0, res: 0, upd: 0;
       cbhs2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhrW_info" {
     block_cbhrW_info:
         const _cbhrW;
         const 2;
         const 4294967326;
         const Sbh2A_srt+312;
 },
 _cbhs1() //  [R1]
         { []
         }
     {offset
       cbhs1: // global
           I64[Sp] = block_cbhtC_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto ubhv7; else goto cbhuu;
       ubhv7: // global
           call _cbhtC(R1) args: 0, res: 0, upd: 0;
       cbhuu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhs1_info" {
     block_cbhs1_info:
         const _cbhs1;
         const 8;
         const 4294967326;
         const Sbh2A_srt+312;
 },
 _cbhtC() //  [R1]
         { []
         }
     {offset
       cbhtC: // global
           if (R1 & 7 == 1) goto ubhv2; else goto cbhuF;
       ubhv2: // global
           Sp = Sp + 16;
           call _sbh0C() args: 0, res: 0, upd: 0;
       cbhuF: // global
           _sbh1p::P64 = P64[P64[Sp + 24] + 8];
           I64[Sp] = block_cbhuD_info;
           R1 = _sbh1p::P64;
           if (R1 & 7 != 0) goto ubhve; else goto cbhuG;
       ubhve: // global
           call _cbhuD(R1) args: 0, res: 0, upd: 0;
       cbhuG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhtC_info" {
     block_cbhtC_info:
         const _cbhtC;
         const 8;
         const 4294967326;
         const Sbh2A_srt+312;
 },
 _cbhuD() //  [R1]
         { []
         }
     {offset
       cbhuD: // global
           if (I64[R1 + 39] == I64[R1 + 47]) goto ubhv3; else goto cbhuQ;
       ubhv3: // global
           Sp = Sp + 16;
           call _sbh0C() args: 0, res: 0, upd: 0;
       cbhuQ: // global
           _sbh0f::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cbhuO_info;
           R2 = P64[Sp + 48];
           I64[Sp - 16] = stg_ap_ppv_info;
           P64[Sp - 8] = _sbh0f::P64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.IO.BufferedIO.flushWriteBuffer_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhuD_info" {
     block_cbhuD_info:
         const _cbhuD;
         const 8;
         const 4294967326;
         const Sbh2A_srt+312;
 },
 _cbhuO() //  [R1]
         { []
         }
     {offset
       cbhuO: // global
           _sbh0h::P64 = P64[Sp + 16];
           call MO_WriteBarrier();
           P64[_sbh0h::P64 + 8] = R1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbh0h::P64);
           Sp = Sp + 8;
           call _sbh0C() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbhuO_info" {
     block_cbhuO_info:
         const _cbhuO;
         const 1031;
         const 4294967326;
         const Sbh2A_srt+312;
 },
 _sbh0C() //  []
         { []
         }
     {offset
       sbh0C: // global
           I64[Sp + 8] = block_cbhsb_info;
           R1 = P64[Sp];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ubhvi; else goto cbhsc;
       ubhvi: // global
           call _cbhsb(R1) args: 0, res: 0, upd: 0;
       cbhsc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbhsb() //  [R1]
         { []
         }
     {offset
       cbhsb: // global
           if (R1 & 7 == 1) goto cbhuo; else goto cbhtH;
       cbhuo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbhur; else goto cbhuq;
       cbhur: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbhuq: // global
           I64[Hp - 16] = sat_sbh1k_info;
           P64[Hp] = P64[Sp + 32];
           _sbh06::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_cbhun_info;
           R2 = Hp - 16;
           R1 = _sbh06::P64;
           Sp = Sp + 40;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
       cbhtH: // global
           I64[Sp] = block_cbhsg_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto ubhv8; else goto cbhsh;
       ubhv8: // global
           call _cbhsg(R1) args: 0, res: 0, upd: 0;
       cbhsh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhsb_info" {
     block_cbhsb_info:
         const _cbhsb;
         const 261;
         const 4294967326;
         const Sbh2A_srt+312;
 },
 _cbhsg() //  [R1]
         { []
         }
     {offset
       cbhsg: // global
           if (R1 & 7 == 1) goto cbhtK; else goto cbhu3;
       cbhtK: // global
           I64[Sp + 24] = block_cbhsl_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto ubhv9; else goto cbhsm;
       ubhv9: // global
           call _cbhsl(R1) args: 0, res: 0, upd: 0;
       cbhsm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbhu3: // global
           I64[Sp] = block_cbhsP_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubhva; else goto cbhsQ;
       ubhva: // global
           call _cbhsP(R1) args: 0, res: 0, upd: 0;
       cbhsQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhsg_info" {
     block_cbhsg_info:
         const _cbhsg;
         const 389;
         const 4294967326;
         const Sbh2A_srt+312;
 },
 _cbhsl() //  [R1]
         { []
         }
     {offset
       cbhsl: // global
           if (R1 & 7 == 1) goto cbhtN; else goto cbhtV;
       cbhtN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbhtQ; else goto cbhtP;
       cbhtQ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbhtP: // global
           I64[Hp - 16] = sat_sbh0H_info;
           P64[Hp] = P64[Sp + 8];
           _sbh06::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cbhun_info;
           R2 = Hp - 16;
           R1 = _sbh06::P64;
           Sp = Sp + 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
       cbhtV: // global
           I64[Sp] = block_cbhsz_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubhvb; else goto cbhsA;
       ubhvb: // global
           call _cbhsz(R1) args: 0, res: 0, upd: 0;
       cbhsA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhsl_info" {
     block_cbhsl_info:
         const _cbhsl;
         const 2;
         const 4294967326;
         const Sbh2A_srt+312;
 },
 _cbhsz() //  [R1]
         { []
         }
     {offset
       cbhsz: // global
           I64[Sp] = block_cbhsE_info;
           R1 = P64[R1 + 23];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhsz_info" {
     block_cbhsz_info:
         const _cbhsz;
         const 2;
         const 4294967326;
         const Sbh2A_srt+312;
 },
 _cbhsE() //  [R1]
         { []
         }
     {offset
       cbhsE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbhtZ; else goto cbhtY;
       cbhtZ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbhtY: // global
           I64[Hp - 16] = sat_sbh0T_info;
           P64[Hp] = P64[Sp + 8];
           _sbh06::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cbhun_info;
           R2 = Hp - 16;
           R1 = _sbh06::P64;
           Sp = Sp + 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhsE_info" {
     block_cbhsE_info:
         const _cbhsE;
         const 2;
         const 4294967326;
         const Sbh2A_srt+312;
 },
 _cbhsP() //  [R1]
         { []
         }
     {offset
       cbhsP: // global
           I64[Sp] = block_cbhsU_info;
           R1 = P64[R1 + 23];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhsP_info" {
     block_cbhsP_info:
         const _cbhsP;
         const 389;
         const 4294967326;
         const Sbh2A_srt+312;
 },
 _cbhsU() //  []
         { []
         }
     {offset
       cbhsU: // global
           I64[Sp + 24] = block_cbhsW_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto ubhvc; else goto cbhsX;
       ubhvc: // global
           call _cbhsW(R1) args: 0, res: 0, upd: 0;
       cbhsX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhsU_info" {
     block_cbhsU_info:
         const _cbhsU;
         const 389;
         const 4294967326;
         const Sbh2A_srt+312;
 },
 _cbhsW() //  [R1]
         { []
         }
     {offset
       cbhsW: // global
           if (R1 & 7 == 1) goto cbhu8; else goto cbhug;
       cbhu8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbhub; else goto cbhua;
       cbhub: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbhua: // global
           I64[Hp - 16] = sat_sbh16_info;
           P64[Hp] = P64[Sp + 8];
           _sbh06::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cbhun_info;
           R2 = Hp - 16;
           R1 = _sbh06::P64;
           Sp = Sp + 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
       cbhug: // global
           I64[Sp] = block_cbhta_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubhvd; else goto cbhtb;
       ubhvd: // global
           call _cbhta(R1) args: 0, res: 0, upd: 0;
       cbhtb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhsW_info" {
     block_cbhsW_info:
         const _cbhsW;
         const 2;
         const 4294967326;
         const Sbh2A_srt+312;
 },
 _cbhta() //  [R1]
         { []
         }
     {offset
       cbhta: // global
           I64[Sp] = block_cbhtf_info;
           R1 = P64[R1 + 23];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhta_info" {
     block_cbhta_info:
         const _cbhta;
         const 2;
         const 4294967326;
         const Sbh2A_srt+312;
 },
 _cbhtf() //  [R1]
         { []
         }
     {offset
       cbhtf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbhuk; else goto cbhuj;
       cbhuk: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbhuj: // global
           I64[Hp - 16] = sat_sbh1i_info;
           P64[Hp] = P64[Sp + 8];
           _sbh06::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cbhun_info;
           R2 = Hp - 16;
           R1 = _sbh06::P64;
           Sp = Sp + 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhtf_info" {
     block_cbhtf_info:
         const _cbhtf;
         const 2;
         const 4294967326;
         const Sbh2A_srt+312;
 },
 _cbhun() //  []
         { []
         }
     {offset
       cbhun: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhun_info" {
     block_cbhun_info:
         const _cbhun;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.896787205 UTC

[section ""data" . stdHandleFinalizer_rbfCB_closure" {
     stdHandleFinalizer_rbfCB_closure:
         const stdHandleFinalizer_rbfCB_info;
         const 0;
 },
 stdHandleFinalizer_rbfCB_entry() //  [R2, R3]
         { []
         }
     {offset
       cbhxH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbhxI; else goto cbhxJ;
       cbhxI: // global
           R3 = R3;
           R2 = R2;
           R1 = stdHandleFinalizer_rbfCB_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbhxJ: // global
           I64[Sp - 16] = block_cbhxE_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubhxN; else goto cbhxF;
       ubhxN: // global
           call _cbhxE(R1) args: 0, res: 0, upd: 0;
       cbhxF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . stdHandleFinalizer_rbfCB_info" {
     stdHandleFinalizer_rbfCB_info:
         const stdHandleFinalizer_rbfCB_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const Sbh2A_srt+320;
 },
 _cbhxE() //  [R1]
         { []
         }
     {offset
       cbhxE: // global
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wstdHandleFinalizer_rbfCA_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhxE_info" {
     block_cbhxE_info:
         const _cbhxE;
         const 1;
         const 4294967326;
         const Sbh2A_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.901896276 UTC

[section ""cstring" . lvl6_rbfCC_bytes" {
     lvl6_rbfCC_bytes:
         I8[] [60,115,116,100,101,114,114,62]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.903992352 UTC

[section ""data" . lvl7_rbfCD_closure" {
     lvl7_rbfCD_closure:
         const lvl7_rbfCD_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_rbfCD_entry() //  [R1]
         { []
         }
     {offset
       cbhy5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbhy6; else goto cbhy7;
       cbhy6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbhy7: // global
           (_cbhy2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbhy2::I64 == 0) goto cbhy4; else goto cbhy3;
       cbhy4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbhy3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbhy2::I64;
           R2 = lvl6_rbfCC_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl7_rbfCD_info" {
     lvl7_rbfCD_info:
         const lvl7_rbfCD_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.907398262 UTC

[section ""data" . lvl8_rbfCE_closure" {
     lvl8_rbfCE_closure:
         const GHC.Base.Just_con_info;
         const stdHandleFinalizer_rbfCB_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.910869739 UTC

[section ""data" . lvl9_rbfCF_closure" {
     lvl9_rbfCF_closure:
         const lvl9_rbfCF_info;
         const 0;
 },
 section ""relreadonly" . ubhyE_srtd" {
     ubhyE_srtd:
         const Sbh2A_srt+64;
         const 37;
         const 120259089281;
 },
 lvl9_rbfCF_entry() //  []
         { []
         }
     {offset
       cbhyq: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbhyr; else goto cbhys;
       cbhyr: // global
           R1 = lvl9_rbfCF_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbhys: // global
           I64[Sp - 8] = block_cbhyl_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl9_rbfCF_info" {
     lvl9_rbfCF_info:
         const lvl9_rbfCF_entry;
         const 0;
         const 18446744069414584334;
         const 4294967299;
         const ubhyE_srtd;
 },
 section ""relreadonly" . ubhyF_srtd" {
     ubhyF_srtd:
         const Sbh2A_srt+64;
         const 36;
         const 51539612545;
 },
 _cbhyl() //  []
         { []
         }
     {offset
       cbhyl: // global
           I64[Sp] = block_cbhyn_info;
           R1 = GHC.IO.Encoding.getLocaleEncoding1_closure;
           if (R1 & 7 != 0) goto ubhyD; else goto cbhyo;
       ubhyD: // global
           call _cbhyn(R1) args: 0, res: 0, upd: 0;
       cbhyo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhyl_info" {
     block_cbhyl_info:
         const _cbhyl;
         const 0;
         const 18446744069414584350;
         const ubhyF_srtd;
 },
 section ""relreadonly" . ubhyG_srtd" {
     ubhyG_srtd:
         const Sbh2A_srt+64;
         const 36;
         const 51539608449;
 },
 _cbhyn() //  [R1]
         { []
         }
     {offset
       cbhyn: // global
           I64[Sp] = block_cbhyw_info;
           R1 = P64[R1 + 7];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhyn_info" {
     block_cbhyn_info:
         const _cbhyn;
         const 0;
         const 18446744069414584350;
         const ubhyG_srtd;
 },
 section ""relreadonly" . ubhyH_srtd" {
     ubhyH_srtd:
         const Sbh2A_srt+64;
         const 36;
         const 51539608449;
 },
 _cbhyw() //  [R1]
         { []
         }
     {offset
       cbhyw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbhyB; else goto cbhyA;
       cbhyB: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbhyA: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           R6 = lvl7_rbfCD_closure;
           R5 = GHC.IO.FD.stderr_closure;
           R4 = GHC.IO.Handle.FD.fdToHandle12_closure;
           R3 = GHC.IO.FD.$fBufferedIOFD_closure;
           R2 = GHC.IO.FD.$fIODeviceFD_closure;
           P64[Sp - 40] = GHC.IO.Handle.Types.WriteHandle_closure+4;
           P64[Sp - 32] = GHC.Types.False_closure+1;
           P64[Sp - 24] = Hp - 6;
           P64[Sp - 16] = GHC.IO.Handle.Types.nativeNewlineMode_closure;
           P64[Sp - 8] = lvl8_rbfCE_closure+2;
           P64[Sp] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 40;
           call GHC.IO.Handle.Internals.mkDuplexHandle5_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhyw_info" {
     block_cbhyw_info:
         const _cbhyw;
         const 0;
         const 18446744069414584350;
         const ubhyH_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.922784911 UTC

[section ""data" . GHC.IO.Handle.FD.stderr_closure" {
     GHC.IO.Handle.FD.stderr_closure:
         const GHC.IO.Handle.FD.stderr_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.FD.stderr_entry() //  [R1]
         { []
         }
     {offset
       cbhzm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbhzn; else goto cbhzo;
       cbhzn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbhzo: // global
           (_cbhzh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbhzh::I64 == 0) goto cbhzj; else goto cbhzi;
       cbhzj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbhzi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbhzh::I64;
           I64[Sp - 24] = block_cbhzk_info;
           Sp = Sp - 24;
           call lvl9_rbfCF_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.stderr_info" {
     GHC.IO.Handle.FD.stderr_info:
         const GHC.IO.Handle.FD.stderr_entry;
         const 0;
         const 4294967317;
         const Sbh2A_srt+352;
 },
 _cbhzk() //  [R1]
         { []
         }
     {offset
       cbhzk: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbhzk_info" {
     block_cbhzk_info:
         const _cbhzk;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.928058648 UTC

[section ""cstring" . lvl10_rbfCG_bytes" {
     lvl10_rbfCG_bytes:
         I8[] [60,115,116,100,111,117,116,62]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.930223625 UTC

[section ""data" . lvl11_rbfCH_closure" {
     lvl11_rbfCH_closure:
         const lvl11_rbfCH_info;
         const 0;
         const 0;
         const 0;
 },
 lvl11_rbfCH_entry() //  [R1]
         { []
         }
     {offset
       cbhzL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbhzM; else goto cbhzN;
       cbhzM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbhzN: // global
           (_cbhzI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbhzI::I64 == 0) goto cbhzK; else goto cbhzJ;
       cbhzK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbhzJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbhzI::I64;
           R2 = lvl10_rbfCG_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl11_rbfCH_info" {
     lvl11_rbfCH_info:
         const lvl11_rbfCH_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.935332028 UTC

[section ""data" . lvl12_rbfCI_closure" {
     lvl12_rbfCI_closure:
         const lvl12_rbfCI_info;
         const 0;
 },
 section ""relreadonly" . ubhAj_srtd" {
     ubhAj_srtd:
         const Sbh2A_srt+64;
         const 39;
         const 446676603777;
 },
 lvl12_rbfCI_entry() //  []
         { []
         }
     {offset
       cbhA5: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbhA6; else goto cbhA7;
       cbhA6: // global
           R1 = lvl12_rbfCI_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbhA7: // global
           I64[Sp - 8] = block_cbhA0_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl12_rbfCI_info" {
     lvl12_rbfCI_info:
         const lvl12_rbfCI_entry;
         const 0;
         const 18446744069414584334;
         const 4294967299;
         const ubhAj_srtd;
 },
 section ""relreadonly" . ubhAk_srtd" {
     ubhAk_srtd:
         const Sbh2A_srt+64;
         const 38;
         const 171798696833;
 },
 _cbhA0() //  []
         { []
         }
     {offset
       cbhA0: // global
           I64[Sp] = block_cbhA2_info;
           R1 = GHC.IO.Encoding.getLocaleEncoding1_closure;
           if (R1 & 7 != 0) goto ubhAi; else goto cbhA3;
       ubhAi: // global
           call _cbhA2(R1) args: 0, res: 0, upd: 0;
       cbhA3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhA0_info" {
     block_cbhA0_info:
         const _cbhA0;
         const 0;
         const 18446744069414584350;
         const ubhAk_srtd;
 },
 section ""relreadonly" . ubhAl_srtd" {
     ubhAl_srtd:
         const Sbh2A_srt+64;
         const 38;
         const 171798692737;
 },
 _cbhA2() //  [R1]
         { []
         }
     {offset
       cbhA2: // global
           I64[Sp] = block_cbhAb_info;
           R1 = P64[R1 + 7];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhA2_info" {
     block_cbhA2_info:
         const _cbhA2;
         const 0;
         const 18446744069414584350;
         const ubhAl_srtd;
 },
 section ""relreadonly" . ubhAm_srtd" {
     ubhAm_srtd:
         const Sbh2A_srt+64;
         const 38;
         const 171798692737;
 },
 _cbhAb() //  [R1]
         { []
         }
     {offset
       cbhAb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbhAg; else goto cbhAf;
       cbhAg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbhAf: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           R6 = lvl11_rbfCH_closure;
           R5 = GHC.IO.FD.stdout_closure;
           R4 = GHC.IO.Handle.FD.fdToHandle12_closure;
           R3 = GHC.IO.FD.$fBufferedIOFD_closure;
           R2 = GHC.IO.FD.$fIODeviceFD_closure;
           P64[Sp - 40] = GHC.IO.Handle.Types.WriteHandle_closure+4;
           P64[Sp - 32] = GHC.Types.True_closure+2;
           P64[Sp - 24] = Hp - 6;
           P64[Sp - 16] = GHC.IO.Handle.Types.nativeNewlineMode_closure;
           P64[Sp - 8] = lvl8_rbfCE_closure+2;
           P64[Sp] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 40;
           call GHC.IO.Handle.Internals.mkDuplexHandle5_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhAb_info" {
     block_cbhAb_info:
         const _cbhAb;
         const 0;
         const 18446744069414584350;
         const ubhAm_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.946617399 UTC

[section ""data" . GHC.IO.Handle.FD.stdout_closure" {
     GHC.IO.Handle.FD.stdout_closure:
         const GHC.IO.Handle.FD.stdout_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.FD.stdout_entry() //  [R1]
         { []
         }
     {offset
       cbhB1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbhB2; else goto cbhB3;
       cbhB2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbhB3: // global
           (_cbhAW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbhAW::I64 == 0) goto cbhAY; else goto cbhAX;
       cbhAY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbhAX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbhAW::I64;
           I64[Sp - 24] = block_cbhAZ_info;
           Sp = Sp - 24;
           call lvl12_rbfCI_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.stdout_info" {
     GHC.IO.Handle.FD.stdout_info:
         const GHC.IO.Handle.FD.stdout_entry;
         const 0;
         const 4294967317;
         const Sbh2A_srt+368;
 },
 _cbhAZ() //  [R1]
         { []
         }
     {offset
       cbhAZ: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbhAZ_info" {
     block_cbhAZ_info:
         const _cbhAZ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.951470307 UTC

[section ""cstring" . lvl13_rbfCJ_bytes" {
     lvl13_rbfCJ_bytes:
         I8[] [60,115,116,100,105,110,62]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.953985669 UTC

[section ""data" . lvl14_rbfCK_closure" {
     lvl14_rbfCK_closure:
         const lvl14_rbfCK_info;
         const 0;
         const 0;
         const 0;
 },
 lvl14_rbfCK_entry() //  [R1]
         { []
         }
     {offset
       cbhBq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbhBr; else goto cbhBs;
       cbhBr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbhBs: // global
           (_cbhBn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbhBn::I64 == 0) goto cbhBp; else goto cbhBo;
       cbhBp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbhBo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbhBn::I64;
           R2 = lvl13_rbfCJ_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl14_rbfCK_info" {
     lvl14_rbfCK_info:
         const lvl14_rbfCK_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.959490043 UTC

[section ""data" . lvl15_rbfCL_closure" {
     lvl15_rbfCL_closure:
         const lvl15_rbfCL_info;
         const 0;
 },
 section ""relreadonly" . ubhBY_srtd" {
     ubhBY_srtd:
         const Sbh2A_srt+64;
         const 41;
         const 1683627185025;
 },
 lvl15_rbfCL_entry() //  []
         { []
         }
     {offset
       cbhBK: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbhBL; else goto cbhBM;
       cbhBL: // global
           R1 = lvl15_rbfCL_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbhBM: // global
           I64[Sp - 8] = block_cbhBF_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl15_rbfCL_info" {
     lvl15_rbfCL_info:
         const lvl15_rbfCL_entry;
         const 0;
         const 18446744069414584334;
         const 4294967299;
         const ubhBY_srtd;
 },
 section ""relreadonly" . ubhBZ_srtd" {
     ubhBZ_srtd:
         const Sbh2A_srt+64;
         const 40;
         const 584115557249;
 },
 _cbhBF() //  []
         { []
         }
     {offset
       cbhBF: // global
           I64[Sp] = block_cbhBH_info;
           R1 = GHC.IO.Encoding.getLocaleEncoding1_closure;
           if (R1 & 7 != 0) goto ubhBX; else goto cbhBI;
       ubhBX: // global
           call _cbhBH(R1) args: 0, res: 0, upd: 0;
       cbhBI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhBF_info" {
     block_cbhBF_info:
         const _cbhBF;
         const 0;
         const 18446744069414584350;
         const ubhBZ_srtd;
 },
 section ""relreadonly" . ubhC0_srtd" {
     ubhC0_srtd:
         const Sbh2A_srt+64;
         const 40;
         const 584115553153;
 },
 _cbhBH() //  [R1]
         { []
         }
     {offset
       cbhBH: // global
           I64[Sp] = block_cbhBQ_info;
           R1 = P64[R1 + 7];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhBH_info" {
     block_cbhBH_info:
         const _cbhBH;
         const 0;
         const 18446744069414584350;
         const ubhC0_srtd;
 },
 section ""relreadonly" . ubhC1_srtd" {
     ubhC1_srtd:
         const Sbh2A_srt+64;
         const 40;
         const 584115553153;
 },
 _cbhBQ() //  [R1]
         { []
         }
     {offset
       cbhBQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbhBV; else goto cbhBU;
       cbhBV: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbhBU: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           R6 = lvl14_rbfCK_closure;
           R5 = GHC.IO.FD.stdin_closure;
           R4 = GHC.IO.Handle.FD.fdToHandle12_closure;
           R3 = GHC.IO.FD.$fBufferedIOFD_closure;
           R2 = GHC.IO.FD.$fIODeviceFD_closure;
           P64[Sp - 40] = GHC.IO.Handle.Types.ReadHandle_closure+3;
           P64[Sp - 32] = GHC.Types.True_closure+2;
           P64[Sp - 24] = Hp - 6;
           P64[Sp - 16] = GHC.IO.Handle.Types.nativeNewlineMode_closure;
           P64[Sp - 8] = lvl8_rbfCE_closure+2;
           P64[Sp] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 40;
           call GHC.IO.Handle.Internals.mkDuplexHandle5_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbhBQ_info" {
     block_cbhBQ_info:
         const _cbhBQ;
         const 0;
         const 18446744069414584350;
         const ubhC1_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.971226939 UTC

[section ""data" . GHC.IO.Handle.FD.stdin_closure" {
     GHC.IO.Handle.FD.stdin_closure:
         const GHC.IO.Handle.FD.stdin_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.FD.stdin_entry() //  [R1]
         { []
         }
     {offset
       cbhCG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbhCH; else goto cbhCI;
       cbhCH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbhCI: // global
           (_cbhCB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbhCB::I64 == 0) goto cbhCD; else goto cbhCC;
       cbhCD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbhCC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbhCB::I64;
           I64[Sp - 24] = block_cbhCE_info;
           Sp = Sp - 24;
           call lvl15_rbfCL_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.FD.stdin_info" {
     GHC.IO.Handle.FD.stdin_info:
         const GHC.IO.Handle.FD.stdin_entry;
         const 0;
         const 4294967317;
         const Sbh2A_srt+384;
 },
 _cbhCE() //  [R1]
         { []
         }
     {offset
       cbhCE: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbhCE_info" {
     block_cbhCE_info:
         const _cbhCE;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:13.976356242 UTC

[section ""relreadonly" . Sbh2A_srt" {
     Sbh2A_srt:
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
         const lvl1_rbfCv_closure;
         const lvl3_rbfCx_closure;
         const GHC.IO.Handle.FD.handleToFd3_closure;
         const lvl5_rbfCz_closure;
         const GHC.IO.Handle.FD.handleToFd2_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const GHC.IO.Handle.FD.fdToHandle12_closure;
         const GHC.IO.Handle.FD.handleToFd1_closure;
         const GHC.IO.Handle.FD.fdToHandle7_closure;
         const Foreign.C.Error.throwErrnoIfMinus1Retry2_closure;
         const System.Posix.Internals.setNonBlockingFD3_closure;
         const GHC.IO.Handle.Internals.mkDuplexHandle1_closure;
         const GHC.IO.Handle.Internals.mkDuplexHandle4_closure;
         const GHC.IO.Handle.Internals.mkDuplexHandle5_closure;
         const GHC.IO.FD.$fBufferedIOFD_closure;
         const GHC.IO.FD.$fIODeviceFD_closure;
         const GHC.IO.Handle.FD.fdToHandle5_closure;
         const GHC.IO.Handle.FD.fdToHandle6_closure;
         const GHC.IO.Encoding.getLocaleEncoding1_closure;
         const GHC.IO.FD.$wmkFD_closure;
         const GHC.IO.Handle.FD.fdToHandle'1_closure;
         const GHC.IO.Handle.FD.fdToHandle2_closure;
         const System.Posix.Internals.$wfdGetMode_closure;
         const GHC.IO.Handle.FD.$wfdToHandle_closure;
         const GHC.IO.Handle.FD.fdToHandle1_closure;
         const GHC.IO.FD.$w$cclose_closure;
         const GHC.IO.FD.openFile1_closure;
         const GHC.IO.Handle.FD.openBinaryFile5_closure;
         const GHC.IO.Handle.FD.fdToHandle10_closure;
         const GHC.IO.Handle.FD.openFile2_closure;
         const GHC.IO.Exception.$fExceptionIOException4_closure;
         const GHC.IO.Handle.FD.openFile1_closure;
         const GHC.IO.Handle.FD.openFileBlocking1_closure;
         const GHC.IO.Handle.FD.openBinaryFile3_closure;
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
         const GHC.IO.Handle.FD.openBinaryFile2_closure;
         const GHC.IO.Handle.FD.openBinaryFile1_closure;
         const GHC.IO.Handle.Internals.ioe_finalizedHandle_closure;
         const $wstdHandleFinalizer_rbfCA_closure;
         const stdHandleFinalizer_rbfCB_closure;
         const lvl7_rbfCD_closure;
         const lvl8_rbfCE_closure;
         const lvl9_rbfCF_closure;
         const lvl11_rbfCH_closure;
         const lvl12_rbfCI_closure;
         const lvl14_rbfCK_closure;
         const lvl15_rbfCL_closure;
 }]

