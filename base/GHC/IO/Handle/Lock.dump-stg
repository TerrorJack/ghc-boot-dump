
==================== Pre unarise: ====================
2018-03-16 16:06:14.088171007 UTC

GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported2
  :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FileLockingNotSupported"#;

GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported1
  :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported2;

GHC.IO.Handle.Lock.$fShowFileLockingNotSupported_$cshowsPrec
  :: GHC.Types.Int
     -> GHC.IO.Handle.Lock.FileLockingNotSupported -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*H><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sbimI ds1_sbimJ eta_sbimK]
        case ds1_sbimJ of {
          GHC.IO.Handle.Lock.FileLockingNotSupported ->
              GHC.Base.++
                  GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported1 eta_sbimK;
        };

GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$cshow
  :: GHC.IO.Handle.Lock.FileLockingNotSupported -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*H>, Unf=OtherCon []] =
    [] \r [x_sbimM]
        case x_sbimM of {
          GHC.IO.Handle.Lock.FileLockingNotSupported ->
              GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported1;
        };

GHC.IO.Handle.Lock.$fShowFileLockingNotSupported1
  :: GHC.IO.Handle.Lock.FileLockingNotSupported -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*H><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sbimO eta_sbimP]
        case ds_sbimO of {
          GHC.IO.Handle.Lock.FileLockingNotSupported ->
              GHC.Base.++
                  GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported1 eta_sbimP;
        };

GHC.IO.Handle.Lock.$fShowFileLockingNotSupported_$cshowList
  :: [GHC.IO.Handle.Lock.FileLockingNotSupported] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sbimR s_sbimS]
        GHC.Show.showList__
            GHC.IO.Handle.Lock.$fShowFileLockingNotSupported1 ls_sbimR s_sbimS;

GHC.IO.Handle.Lock.$fShowFileLockingNotSupported [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Handle.Lock.FileLockingNotSupported
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Handle.Lock.$fShowFileLockingNotSupported_$cshowsPrec
                                    GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$cshow
                                    GHC.IO.Handle.Lock.$fShowFileLockingNotSupported_$cshowList];

GHC.IO.Handle.Lock.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.Handle.Lock.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Lock.$trModule4];

GHC.IO.Handle.Lock.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Handle.Lock"#;

GHC.IO.Handle.Lock.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Lock.$trModule2];

GHC.IO.Handle.Lock.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Handle.Lock.$trModule3
                                     GHC.IO.Handle.Lock.$trModule1];

GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported4
  :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported2];

GHC.IO.Handle.Lock.$tcFileLockingNotSupported :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2716065848555532007##
                                    12251424812302631774##
                                    GHC.IO.Handle.Lock.$trModule
                                    GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported4
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.Handle.Lock.$tc'FileLockingNotSupported1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Lock.$tcFileLockingNotSupported
                                              GHC.Types.[]];

GHC.IO.Handle.Lock.$tc'FileLockingNotSupported3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'FileLockingNotSupported"#;

GHC.IO.Handle.Lock.$tc'FileLockingNotSupported2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Lock.$tc'FileLockingNotSupported3];

GHC.IO.Handle.Lock.$tc'FileLockingNotSupported :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13975601321420314475##
                                    8398323512000399582##
                                    GHC.IO.Handle.Lock.$trModule
                                    GHC.IO.Handle.Lock.$tc'FileLockingNotSupported2
                                    0#
                                    GHC.IO.Handle.Lock.$tc'FileLockingNotSupported1];

GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported3
  :: Data.Typeable.Internal.TypeRep
       GHC.IO.Handle.Lock.FileLockingNotSupported
[GblId] =
    [] \u []
        case
            Data.Typeable.Internal.$wmkTrCon
                2716065848555532007##
                12251424812302631774##
                GHC.IO.Handle.Lock.$trModule
                GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported4
                0#
                GHC.Types.krep$*
                GHC.Types.[]
        of
        { (#,,,,#) ww8_sbimU [Occ=Once]
                   ww9_sbimV [Occ=Once]
                   ww10_sbimW [Occ=Once]
                   ww11_sbimX [Occ=Once]
                   ww12_sbimY [Occ=Once] ->
              Data.Typeable.Internal.TrTyCon [ww8_sbimU
                                              ww9_sbimV
                                              ww10_sbimW
                                              ww11_sbimX
                                              ww12_sbimY];
        };

GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$cfromException
  :: GHC.Exception.SomeException
     -> GHC.Base.Maybe GHC.IO.Handle.Lock.FileLockingNotSupported
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_sbimZ]
        case ds_sbimZ of {
          GHC.Exception.SomeException $dException1_sbin1 [Occ=Once]
                                      e2_sbin2 [Occ=Once] ->
              case GHC.Exception.$p1Exception $dException1_sbin1 of sat_sbin3 {
                __DEFAULT ->
                    case
                        Data.Typeable.Internal.sameTypeRep
                            sat_sbin3 GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported3
                    of
                    { GHC.Types.False -> GHC.Base.Nothing [];
                      GHC.Types.True -> GHC.Base.Just [e2_sbin2];
                    };
              };
        };

GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Exception.Exception
       GHC.IO.Handle.Lock.FileLockingNotSupported
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Exception.C:Exception! [GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported3
                                              GHC.IO.Handle.Lock.$fShowFileLockingNotSupported
                                              GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$ctoException
                                              GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$cfromException
                                              GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$cshow];
GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$ctoException [Occ=LoopBreaker]
  :: GHC.IO.Handle.Lock.FileLockingNotSupported
     -> GHC.Exception.SomeException
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Exception.SomeException [GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported
                                     eta_B1];

GHC.IO.Handle.Lock.$tcLockMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LockMode"#;

GHC.IO.Handle.Lock.$tcLockMode1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Lock.$tcLockMode2];

GHC.IO.Handle.Lock.$tcLockMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [18068849831825836849##
                                    1974453150269185476##
                                    GHC.IO.Handle.Lock.$trModule
                                    GHC.IO.Handle.Lock.$tcLockMode1
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.Handle.Lock.$tc'ExclusiveLock1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Lock.$tcLockMode
                                              GHC.Types.[]];

GHC.IO.Handle.Lock.$tc'SharedLock2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'SharedLock"#;

GHC.IO.Handle.Lock.$tc'SharedLock1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Lock.$tc'SharedLock2];

GHC.IO.Handle.Lock.$tc'SharedLock :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9660990538910196995##
                                    16983901031857135990##
                                    GHC.IO.Handle.Lock.$trModule
                                    GHC.IO.Handle.Lock.$tc'SharedLock1
                                    0#
                                    GHC.IO.Handle.Lock.$tc'ExclusiveLock1];

GHC.IO.Handle.Lock.$tc'ExclusiveLock3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ExclusiveLock"#;

GHC.IO.Handle.Lock.$tc'ExclusiveLock2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Lock.$tc'ExclusiveLock3];

GHC.IO.Handle.Lock.$tc'ExclusiveLock :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [8544818512469904331##
                                    16785548070058023905##
                                    GHC.IO.Handle.Lock.$trModule
                                    GHC.IO.Handle.Lock.$tc'ExclusiveLock2
                                    0#
                                    GHC.IO.Handle.Lock.$tc'ExclusiveLock1];

lvl_rbimF :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "flock"#;

lvl1_rbimG :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl_rbimF;

GHC.IO.Handle.Lock.hUnlock2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Prim.Int#
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, Foreign.C.Types.CInt #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    [] \r [ds2_sbin5 ds3_sbin6]
        case narrow32Int# [ds3_sbin6] of sat_sbin7 {
          __DEFAULT -> Foreign.C.Error.$wlvl lvl1_rbimG sat_sbin7 ds2_sbin5;
        };

GHC.IO.Handle.Lock.hUnlock1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h_sbin8 s_sbin9]
        case h_sbin8 of wild_sbina {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbinc [Occ=Once] ->
              case readMVar# [dt_sbinc s_sbin9] of {
                (#,#) ipv_sbine [Occ=Once*] ipv1_sbinf [Occ=Once!] ->
                    case ipv1_sbinf of {
                      GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   $dTypeable_sbinj [Occ=Once]
                                                   ds2_sbink [Occ=Once]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead] ->
                          case ds2_sbink of {
                            GHC.IO.FD.FD dt7_sbiny [Occ=Once] _ [Occ=Dead] ->
                                case
                                    Data.Typeable.Internal.sameTypeRep
                                        $dTypeable_sbinj GHC.IO.Handle.FD.fdToHandle12
                                of
                                { GHC.Types.False ->
                                      GHC.IO.Handle.FD.handleToFd3 wild_sbina ipv_sbine;
                                  GHC.Types.True ->
                                      case
                                          __pkg_ccall_GC base-4.11.0.0 [dt7_sbiny 8# ipv_sbine]
                                      of
                                      { (#,#) ds11_sbinE [Occ=Once*] ds12_sbinF [Occ=Once] ->
                                            case narrow32Int# [ds12_sbinF] of {
                                              __DEFAULT -> (#,#) [ds11_sbinE GHC.Tuple.()];
                                              -1# ->
                                                  case __pkg_ccall base-4.11.0.0 [ds11_sbinE] of {
                                                    (#,#) ds13_sbinJ [Occ=Once]
                                                          ds14_sbinK [Occ=Once] ->
                                                        GHC.IO.Handle.Lock.hUnlock2
                                                            ds13_sbinJ ds14_sbinK;
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              GHC.IO.Handle.FD.handleToFd2 wild_sbina s_sbin9;
        };

GHC.IO.Handle.Lock.hUnlock
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO ()
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.Lock.hUnlock1 eta_B2 eta_B1;

GHC.IO.Handle.Lock.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=4, Str=<B,U><B,U><B,U><B,U>x, Unf=OtherCon []] =
    [] \r [ww_sbinQ w_sbinR w1_sbinS w2_sbinT]
        let {
          sat_sbinW [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [ww_sbinQ w_sbinR w1_sbinS] \u []
                  let {
                    sat_sbinV [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        [ww_sbinQ w_sbinR w1_sbinS] \u []
                            let {
                              sat_sbinU [Occ=Once] :: GHC.Base.Maybe GHC.IO.Handle.Types.Handle
                              [LclId] =
                                  CCCS GHC.Base.Just! [w1_sbinS];
                            } in 
                              Foreign.C.Error.$werrnoToIOError
                                  w_sbinR ww_sbinQ sat_sbinU GHC.Base.Nothing;
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sbinV;
        } in  raiseIO# [sat_sbinW w2_sbinT];

GHC.IO.Handle.Lock.hLock4
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Base.String
     -> GHC.IO.Handle.Lock.LockMode
     -> GHC.Types.Bool
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId,
 Arity=5,
 Str=<S,1*U><L,U><S,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [h_sbinX ctx_sbinY mode_sbinZ block_sbio0 eta_sbio1]
        case h_sbinX of wild_sbio2 {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbio4 [Occ=Once] ->
              case readMVar# [dt_sbio4 eta_sbio1] of {
                (#,#) ipv_sbio6 [Occ=Once*] ipv1_sbio7 [Occ=Once!] ->
                    case ipv1_sbio7 of {
                      GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   $dTypeable_sbiob [Occ=Once]
                                                   ds2_sbioc [Occ=Once]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead] ->
                          case ds2_sbioc of {
                            GHC.IO.FD.FD dt7_sbioq [Occ=OnceL] _ [Occ=Dead] ->
                                case
                                    Data.Typeable.Internal.sameTypeRep
                                        $dTypeable_sbiob GHC.IO.Handle.FD.fdToHandle12
                                of
                                { GHC.Types.False ->
                                      GHC.IO.Handle.FD.handleToFd3 wild_sbio2 ipv_sbio6;
                                  GHC.Types.True ->
                                      let-no-escape {
                                        exit_sbiou [Occ=OnceL!T[2], Dmd=<L,C(C1(U(U,U)))>]
                                          :: GHC.Prim.State# GHC.Prim.RealWorld
                                             -> GHC.Prim.Int#
                                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                   GHC.Types.Bool #)
                                        [LclId[JoinId(2)],
                                         Arity=2,
                                         Str=<B,U><B,U>x,
                                         Unf=OtherCon []] =
                                            sat-only [ctx_sbinY wild_sbio2] \r [ds11_sbiov
                                                                                wild4_sbiow]
                                                GHC.IO.Handle.Lock.$wlvl
                                                    wild4_sbiow ctx_sbinY wild_sbio2 ds11_sbiov;
                                      } in 
                                        let-no-escape {
                                          exit1_sbiox [Occ=OnceL!T[2], Dmd=<L,C(C1(U(U,U)))>]
                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> GHC.Prim.Int#
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                     GHC.Types.Bool #)
                                          [LclId[JoinId(2)],
                                           Arity=2,
                                           Str=<B,U><B,U>x,
                                           Unf=OtherCon []] =
                                              sat-only [ctx_sbinY wild_sbio2] \r [ds11_sbioy
                                                                                  wild4_sbioz]
                                                  GHC.IO.Handle.Lock.$wlvl
                                                      wild4_sbioz ctx_sbinY wild_sbio2 ds11_sbioy;
                                        } in 
                                          let-no-escape {
                                            x_sbioA [Occ=LoopBreakerT[1]]
                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       GHC.Types.Bool #)
                                            [LclId[JoinId(1)],
                                             Arity=1,
                                             Str=<S,U>,
                                             Unf=OtherCon []] =
                                                sat-only [mode_sbinZ
                                                          block_sbio0
                                                          dt7_sbioq
                                                          exit_sbiou
                                                          exit1_sbiox
                                                          x_sbioA] \r [s_sbioB]
                                                    let-no-escape {
                                                      $j_sbioC [Occ=Once*!T[1],
                                                                Dmd=<C(S),1*C1(U(U,U))>]
                                                        :: GHC.Prim.Int#
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 GHC.Types.Bool #)
                                                      [LclId[JoinId(1)],
                                                       Arity=1,
                                                       Str=<S,U>,
                                                       Unf=OtherCon []] =
                                                          sat-only [block_sbio0
                                                                    dt7_sbioq
                                                                    exit_sbiou
                                                                    exit1_sbiox
                                                                    x_sbioA
                                                                    s_sbioB] \r [x#_sbioD]
                                                              let-no-escape {
                                                                $j1_sbioE [Occ=Once*!T[1],
                                                                           Dmd=<C(S),1*C1(U(U,U))>]
                                                                  :: GHC.Prim.Int#
                                                                     -> (# GHC.Prim.State#
                                                                             GHC.Prim.RealWorld,
                                                                           GHC.Types.Bool #)
                                                                [LclId[JoinId(1)],
                                                                 Arity=1,
                                                                 Str=<S,U>,
                                                                 Unf=OtherCon []] =
                                                                    sat-only [block_sbio0
                                                                              dt7_sbioq
                                                                              exit_sbiou
                                                                              exit1_sbiox
                                                                              x_sbioA
                                                                              s_sbioB
                                                                              x#_sbioD] \r [y#_sbioF]
                                                                        case
                                                                            int2Word# [y#_sbioF]
                                                                        of
                                                                        sat_sbioI
                                                                        { __DEFAULT ->
                                                                              case
                                                                                  int2Word# [x#_sbioD]
                                                                              of
                                                                              sat_sbioH
                                                                              { __DEFAULT ->
                                                                                    case
                                                                                        or# [sat_sbioH
                                                                                             sat_sbioI]
                                                                                    of
                                                                                    sat_sbioJ
                                                                                    { __DEFAULT ->
                                                                                          case
                                                                                              word2Int# [sat_sbioJ]
                                                                                          of
                                                                                          sat_sbioK
                                                                                          { __DEFAULT ->
                                                                                                case
                                                                                                    __pkg_ccall_GC base-4.11.0.0 [dt7_sbioq
                                                                                                                                  sat_sbioK
                                                                                                                                  s_sbioB]
                                                                                                of
                                                                                                { (#,#) ds11_sbioM [Occ=Once*]
                                                                                                        ds12_sbioN [Occ=Once] ->
                                                                                                      case
                                                                                                          narrow32Int# [ds12_sbioN]
                                                                                                      of
                                                                                                      { __DEFAULT ->
                                                                                                            case
                                                                                                                __pkg_ccall base-4.11.0.0 [ds11_sbioM]
                                                                                                            of
                                                                                                            { (#,#) ds13_sbioR [Occ=Once*]
                                                                                                                    ds14_sbioS [Occ=Once*] ->
                                                                                                                  case
                                                                                                                      block_sbio0
                                                                                                                  of
                                                                                                                  { GHC.Types.False ->
                                                                                                                        case
                                                                                                                            narrow32Int# [ds14_sbioS]
                                                                                                                        of
                                                                                                                        wild8_sbioU
                                                                                                                        { __DEFAULT ->
                                                                                                                              exit_sbiou
                                                                                                                                  ds13_sbioR
                                                                                                                                  wild8_sbioU;
                                                                                                                          4# ->
                                                                                                                              x_sbioA
                                                                                                                                  ds13_sbioR;
                                                                                                                          11# ->
                                                                                                                              (#,#) [ds13_sbioR
                                                                                                                                     GHC.Types.False];
                                                                                                                          13# ->
                                                                                                                              (#,#) [ds13_sbioR
                                                                                                                                     GHC.Types.False];
                                                                                                                        };
                                                                                                                    GHC.Types.True ->
                                                                                                                        case
                                                                                                                            narrow32Int# [ds14_sbioS]
                                                                                                                        of
                                                                                                                        wild8_sbioV
                                                                                                                        { __DEFAULT ->
                                                                                                                              exit1_sbiox
                                                                                                                                  ds13_sbioR
                                                                                                                                  wild8_sbioV;
                                                                                                                          4# ->
                                                                                                                              x_sbioA
                                                                                                                                  ds13_sbioR;
                                                                                                                        };
                                                                                                                  };
                                                                                                            };
                                                                                                        0# ->
                                                                                                            (#,#) [ds11_sbioM
                                                                                                                   GHC.Types.True];
                                                                                                      };
                                                                                                };
                                                                                          };
                                                                                    };
                                                                              };
                                                                        };
                                                              } in 
                                                                case block_sbio0 of {
                                                                  GHC.Types.False -> $j1_sbioE 4#;
                                                                  GHC.Types.True -> $j1_sbioE 0#;
                                                                };
                                                    } in 
                                                      case mode_sbinZ of {
                                                        GHC.IO.Handle.Lock.SharedLock ->
                                                            $j_sbioC 1#;
                                                        GHC.IO.Handle.Lock.ExclusiveLock ->
                                                            $j_sbioC 2#;
                                                      };
                                          } in  x_sbioA ipv_sbio6;
                                };
                          };
                    };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              GHC.IO.Handle.FD.handleToFd2 wild_sbio2 eta_sbio1;
        };

GHC.IO.Handle.Lock.hTryLock3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hTryLock"#;

GHC.IO.Handle.Lock.hTryLock2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.Lock.hTryLock3;

GHC.IO.Handle.Lock.hTryLock1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Lock.LockMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [h_sbip2 mode_sbip3 eta_B1]
        GHC.IO.Handle.Lock.hLock4
            h_sbip2
            GHC.IO.Handle.Lock.hTryLock2
            mode_sbip3
            GHC.Types.False
            eta_B1;

GHC.IO.Handle.Lock.hTryLock
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Lock.LockMode -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.Lock.hTryLock1 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.Lock.hLock3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hLock"#;

GHC.IO.Handle.Lock.hLock2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.Lock.hLock3;

GHC.IO.Handle.Lock.hLock1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Lock.LockMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [h_sbip4 mode_sbip5 eta1_sbip6]
        case
            GHC.IO.Handle.Lock.hLock4
                h_sbip4
                GHC.IO.Handle.Lock.hLock2
                mode_sbip5
                GHC.Types.True
                eta1_sbip6
        of
        { (#,#) ipv_sbip8 [Occ=Once] _ [Occ=Dead] ->
              (#,#) [ipv_sbip8 GHC.Tuple.()];
        };

GHC.IO.Handle.Lock.hLock
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Lock.LockMode -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,1*U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.Lock.hLock1 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.Lock.SharedLock :: GHC.IO.Handle.Lock.LockMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Lock.SharedLock! [];

GHC.IO.Handle.Lock.ExclusiveLock :: GHC.IO.Handle.Lock.LockMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Lock.ExclusiveLock! [];

GHC.IO.Handle.Lock.FileLockingNotSupported
  :: GHC.IO.Handle.Lock.FileLockingNotSupported
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Lock.FileLockingNotSupported! [];


==================== STG syntax: ====================
2018-03-16 16:06:14.096881184 UTC

GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported2
  :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FileLockingNotSupported"#;

GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported1
  :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported2;

GHC.IO.Handle.Lock.$fShowFileLockingNotSupported_$cshowsPrec
  :: GHC.Types.Int
     -> GHC.IO.Handle.Lock.FileLockingNotSupported -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*H><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sbimI ds1_sbimJ eta_sbimK]
        case ds1_sbimJ of {
          GHC.IO.Handle.Lock.FileLockingNotSupported ->
              GHC.Base.++
                  GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported1 eta_sbimK;
        };

GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$cshow
  :: GHC.IO.Handle.Lock.FileLockingNotSupported -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*H>, Unf=OtherCon []] =
    [] \r [x_sbimM]
        case x_sbimM of {
          GHC.IO.Handle.Lock.FileLockingNotSupported ->
              GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported1;
        };

GHC.IO.Handle.Lock.$fShowFileLockingNotSupported1
  :: GHC.IO.Handle.Lock.FileLockingNotSupported -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*H><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sbimO eta_sbimP]
        case ds_sbimO of {
          GHC.IO.Handle.Lock.FileLockingNotSupported ->
              GHC.Base.++
                  GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported1 eta_sbimP;
        };

GHC.IO.Handle.Lock.$fShowFileLockingNotSupported_$cshowList
  :: [GHC.IO.Handle.Lock.FileLockingNotSupported] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sbimR s_sbimS]
        GHC.Show.showList__
            GHC.IO.Handle.Lock.$fShowFileLockingNotSupported1 ls_sbimR s_sbimS;

GHC.IO.Handle.Lock.$fShowFileLockingNotSupported [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Handle.Lock.FileLockingNotSupported
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Handle.Lock.$fShowFileLockingNotSupported_$cshowsPrec
                                    GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$cshow
                                    GHC.IO.Handle.Lock.$fShowFileLockingNotSupported_$cshowList];

GHC.IO.Handle.Lock.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.Handle.Lock.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Lock.$trModule4];

GHC.IO.Handle.Lock.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Handle.Lock"#;

GHC.IO.Handle.Lock.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Lock.$trModule2];

GHC.IO.Handle.Lock.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Handle.Lock.$trModule3
                                     GHC.IO.Handle.Lock.$trModule1];

GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported4
  :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported2];

GHC.IO.Handle.Lock.$tcFileLockingNotSupported :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2716065848555532007##
                                    12251424812302631774##
                                    GHC.IO.Handle.Lock.$trModule
                                    GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported4
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.Handle.Lock.$tc'FileLockingNotSupported1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Lock.$tcFileLockingNotSupported
                                              GHC.Types.[]];

GHC.IO.Handle.Lock.$tc'FileLockingNotSupported3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'FileLockingNotSupported"#;

GHC.IO.Handle.Lock.$tc'FileLockingNotSupported2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Lock.$tc'FileLockingNotSupported3];

GHC.IO.Handle.Lock.$tc'FileLockingNotSupported :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13975601321420314475##
                                    8398323512000399582##
                                    GHC.IO.Handle.Lock.$trModule
                                    GHC.IO.Handle.Lock.$tc'FileLockingNotSupported2
                                    0#
                                    GHC.IO.Handle.Lock.$tc'FileLockingNotSupported1];

GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported3
  :: Data.Typeable.Internal.TypeRep
       GHC.IO.Handle.Lock.FileLockingNotSupported
[GblId] =
    [] \u []
        case
            Data.Typeable.Internal.$wmkTrCon
                2716065848555532007##
                12251424812302631774##
                GHC.IO.Handle.Lock.$trModule
                GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported4
                0#
                GHC.Types.krep$*
                GHC.Types.[]
        of
        { (#,,,,#) ww8_sbimU [Occ=Once]
                   ww9_sbimV [Occ=Once]
                   ww10_sbimW [Occ=Once]
                   ww11_sbimX [Occ=Once]
                   ww12_sbimY [Occ=Once] ->
              Data.Typeable.Internal.TrTyCon [ww8_sbimU
                                              ww9_sbimV
                                              ww10_sbimW
                                              ww11_sbimX
                                              ww12_sbimY];
        };

GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$cfromException
  :: GHC.Exception.SomeException
     -> GHC.Base.Maybe GHC.IO.Handle.Lock.FileLockingNotSupported
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_sbimZ]
        case ds_sbimZ of {
          GHC.Exception.SomeException $dException1_sbin1 [Occ=Once]
                                      e2_sbin2 [Occ=Once] ->
              case GHC.Exception.$p1Exception $dException1_sbin1 of sat_sbin3 {
                __DEFAULT ->
                    case
                        Data.Typeable.Internal.sameTypeRep
                            sat_sbin3 GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported3
                    of
                    { GHC.Types.False -> GHC.Base.Nothing [];
                      GHC.Types.True -> GHC.Base.Just [e2_sbin2];
                    };
              };
        };

GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Exception.Exception
       GHC.IO.Handle.Lock.FileLockingNotSupported
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Exception.C:Exception! [GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported3
                                              GHC.IO.Handle.Lock.$fShowFileLockingNotSupported
                                              GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$ctoException
                                              GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$cfromException
                                              GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$cshow];
GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$ctoException [Occ=LoopBreaker]
  :: GHC.IO.Handle.Lock.FileLockingNotSupported
     -> GHC.Exception.SomeException
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Exception.SomeException [GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported
                                     eta_B1];

GHC.IO.Handle.Lock.$tcLockMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LockMode"#;

GHC.IO.Handle.Lock.$tcLockMode1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Lock.$tcLockMode2];

GHC.IO.Handle.Lock.$tcLockMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [18068849831825836849##
                                    1974453150269185476##
                                    GHC.IO.Handle.Lock.$trModule
                                    GHC.IO.Handle.Lock.$tcLockMode1
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.Handle.Lock.$tc'ExclusiveLock1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Lock.$tcLockMode
                                              GHC.Types.[]];

GHC.IO.Handle.Lock.$tc'SharedLock2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'SharedLock"#;

GHC.IO.Handle.Lock.$tc'SharedLock1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Lock.$tc'SharedLock2];

GHC.IO.Handle.Lock.$tc'SharedLock :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9660990538910196995##
                                    16983901031857135990##
                                    GHC.IO.Handle.Lock.$trModule
                                    GHC.IO.Handle.Lock.$tc'SharedLock1
                                    0#
                                    GHC.IO.Handle.Lock.$tc'ExclusiveLock1];

GHC.IO.Handle.Lock.$tc'ExclusiveLock3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ExclusiveLock"#;

GHC.IO.Handle.Lock.$tc'ExclusiveLock2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Lock.$tc'ExclusiveLock3];

GHC.IO.Handle.Lock.$tc'ExclusiveLock :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [8544818512469904331##
                                    16785548070058023905##
                                    GHC.IO.Handle.Lock.$trModule
                                    GHC.IO.Handle.Lock.$tc'ExclusiveLock2
                                    0#
                                    GHC.IO.Handle.Lock.$tc'ExclusiveLock1];

lvl_rbimF :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "flock"#;

lvl1_rbimG :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl_rbimF;

GHC.IO.Handle.Lock.hUnlock2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Prim.Int#
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, Foreign.C.Types.CInt #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    [] \r [void_0E ds3_sbin6]
        case narrow32Int# [ds3_sbin6] of sat_sbin7 {
          __DEFAULT ->
              Foreign.C.Error.$wlvl lvl1_rbimG sat_sbin7 GHC.Prim.void#;
        };

GHC.IO.Handle.Lock.hUnlock1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h_sbin8 void_0E]
        case h_sbin8 of wild_sbina {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbinc [Occ=Once] ->
              case readMVar# [dt_sbinc GHC.Prim.void#] of {
                Unit# ipv1_sbinf [Occ=Once!] ->
                    case ipv1_sbinf of {
                      GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   $dTypeable_sbinj [Occ=Once]
                                                   ds2_sbink [Occ=Once]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead] ->
                          case ds2_sbink of {
                            GHC.IO.FD.FD dt7_sbiny [Occ=Once] _ [Occ=Dead] ->
                                case
                                    Data.Typeable.Internal.sameTypeRep
                                        $dTypeable_sbinj GHC.IO.Handle.FD.fdToHandle12
                                of
                                { GHC.Types.False ->
                                      GHC.IO.Handle.FD.handleToFd3 wild_sbina GHC.Prim.void#;
                                  GHC.Types.True ->
                                      case
                                          __pkg_ccall_GC base-4.11.0.0 [dt7_sbiny 8# GHC.Prim.void#]
                                      of
                                      { Unit# ds12_sbinF [Occ=Once] ->
                                            case narrow32Int# [ds12_sbinF] of {
                                              __DEFAULT -> Unit# [GHC.Tuple.()];
                                              -1# ->
                                                  case
                                                      __pkg_ccall base-4.11.0.0 [GHC.Prim.void#]
                                                  of
                                                  { Unit# ds14_sbinK [Occ=Once] ->
                                                        GHC.IO.Handle.Lock.hUnlock2
                                                            GHC.Prim.void# ds14_sbinK;
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              GHC.IO.Handle.FD.handleToFd2 wild_sbina GHC.Prim.void#;
        };

GHC.IO.Handle.Lock.hUnlock
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO ()
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.Lock.hUnlock1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Lock.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=4, Str=<B,U><B,U><B,U><B,U>x, Unf=OtherCon []] =
    [] \r [ww_sbinQ w_sbinR w1_sbinS void_0E]
        let {
          sat_sbinW [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [ww_sbinQ w_sbinR w1_sbinS] \u []
                  let {
                    sat_sbinV [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        [ww_sbinQ w_sbinR w1_sbinS] \u []
                            let {
                              sat_sbinU [Occ=Once] :: GHC.Base.Maybe GHC.IO.Handle.Types.Handle
                              [LclId] =
                                  CCCS GHC.Base.Just! [w1_sbinS];
                            } in 
                              Foreign.C.Error.$werrnoToIOError
                                  w_sbinR ww_sbinQ sat_sbinU GHC.Base.Nothing;
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sbinV;
        } in  raiseIO# [sat_sbinW GHC.Prim.void#];

GHC.IO.Handle.Lock.hLock4
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Base.String
     -> GHC.IO.Handle.Lock.LockMode
     -> GHC.Types.Bool
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId,
 Arity=5,
 Str=<S,1*U><L,U><S,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [h_sbinX ctx_sbinY mode_sbinZ block_sbio0 void_0E]
        case h_sbinX of wild_sbio2 {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbio4 [Occ=Once] ->
              case readMVar# [dt_sbio4 GHC.Prim.void#] of {
                Unit# ipv1_sbio7 [Occ=Once!] ->
                    case ipv1_sbio7 of {
                      GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   $dTypeable_sbiob [Occ=Once]
                                                   ds2_sbioc [Occ=Once]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead] ->
                          case ds2_sbioc of {
                            GHC.IO.FD.FD dt7_sbioq [Occ=OnceL] _ [Occ=Dead] ->
                                case
                                    Data.Typeable.Internal.sameTypeRep
                                        $dTypeable_sbiob GHC.IO.Handle.FD.fdToHandle12
                                of
                                { GHC.Types.False ->
                                      GHC.IO.Handle.FD.handleToFd3 wild_sbio2 GHC.Prim.void#;
                                  GHC.Types.True ->
                                      let-no-escape {
                                        exit_sbiou [Occ=OnceL!T[2], Dmd=<L,C(C1(U(U,U)))>]
                                          :: GHC.Prim.State# GHC.Prim.RealWorld
                                             -> GHC.Prim.Int#
                                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                   GHC.Types.Bool #)
                                        [LclId[JoinId(2)],
                                         Arity=2,
                                         Str=<B,U><B,U>x,
                                         Unf=OtherCon []] =
                                            sat-only [ctx_sbinY wild_sbio2] \r [void_0E wild4_sbiow]
                                                GHC.IO.Handle.Lock.$wlvl
                                                    wild4_sbiow ctx_sbinY wild_sbio2 GHC.Prim.void#;
                                      } in 
                                        let-no-escape {
                                          exit1_sbiox [Occ=OnceL!T[2], Dmd=<L,C(C1(U(U,U)))>]
                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> GHC.Prim.Int#
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                     GHC.Types.Bool #)
                                          [LclId[JoinId(2)],
                                           Arity=2,
                                           Str=<B,U><B,U>x,
                                           Unf=OtherCon []] =
                                              sat-only [ctx_sbinY wild_sbio2] \r [void_0E
                                                                                  wild4_sbioz]
                                                  GHC.IO.Handle.Lock.$wlvl
                                                      wild4_sbioz
                                                      ctx_sbinY
                                                      wild_sbio2
                                                      GHC.Prim.void#;
                                        } in 
                                          let-no-escape {
                                            x_sbioA [Occ=LoopBreakerT[1]]
                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       GHC.Types.Bool #)
                                            [LclId[JoinId(1)],
                                             Arity=1,
                                             Str=<S,U>,
                                             Unf=OtherCon []] =
                                                sat-only [mode_sbinZ
                                                          block_sbio0
                                                          dt7_sbioq
                                                          exit_sbiou
                                                          exit1_sbiox
                                                          x_sbioA] \r [void_0E]
                                                    let-no-escape {
                                                      $j_sbioC [Occ=Once*!T[1],
                                                                Dmd=<C(S),1*C1(U(U,U))>]
                                                        :: GHC.Prim.Int#
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 GHC.Types.Bool #)
                                                      [LclId[JoinId(1)],
                                                       Arity=1,
                                                       Str=<S,U>,
                                                       Unf=OtherCon []] =
                                                          sat-only [block_sbio0
                                                                    dt7_sbioq
                                                                    exit_sbiou
                                                                    exit1_sbiox
                                                                    x_sbioA] \r [x#_sbioD]
                                                              let-no-escape {
                                                                $j1_sbioE [Occ=Once*!T[1],
                                                                           Dmd=<C(S),1*C1(U(U,U))>]
                                                                  :: GHC.Prim.Int#
                                                                     -> (# GHC.Prim.State#
                                                                             GHC.Prim.RealWorld,
                                                                           GHC.Types.Bool #)
                                                                [LclId[JoinId(1)],
                                                                 Arity=1,
                                                                 Str=<S,U>,
                                                                 Unf=OtherCon []] =
                                                                    sat-only [block_sbio0
                                                                              dt7_sbioq
                                                                              exit_sbiou
                                                                              exit1_sbiox
                                                                              x_sbioA
                                                                              x#_sbioD] \r [y#_sbioF]
                                                                        case
                                                                            int2Word# [y#_sbioF]
                                                                        of
                                                                        sat_sbioI
                                                                        { __DEFAULT ->
                                                                              case
                                                                                  int2Word# [x#_sbioD]
                                                                              of
                                                                              sat_sbioH
                                                                              { __DEFAULT ->
                                                                                    case
                                                                                        or# [sat_sbioH
                                                                                             sat_sbioI]
                                                                                    of
                                                                                    sat_sbioJ
                                                                                    { __DEFAULT ->
                                                                                          case
                                                                                              word2Int# [sat_sbioJ]
                                                                                          of
                                                                                          sat_sbioK
                                                                                          { __DEFAULT ->
                                                                                                case
                                                                                                    __pkg_ccall_GC base-4.11.0.0 [dt7_sbioq
                                                                                                                                  sat_sbioK
                                                                                                                                  GHC.Prim.void#]
                                                                                                of
                                                                                                { Unit# ds12_sbioN [Occ=Once] ->
                                                                                                      case
                                                                                                          narrow32Int# [ds12_sbioN]
                                                                                                      of
                                                                                                      { __DEFAULT ->
                                                                                                            case
                                                                                                                __pkg_ccall base-4.11.0.0 [GHC.Prim.void#]
                                                                                                            of
                                                                                                            { Unit# ds14_sbioS [Occ=Once*] ->
                                                                                                                  case
                                                                                                                      block_sbio0
                                                                                                                  of
                                                                                                                  { GHC.Types.False ->
                                                                                                                        case
                                                                                                                            narrow32Int# [ds14_sbioS]
                                                                                                                        of
                                                                                                                        wild8_sbioU
                                                                                                                        { __DEFAULT ->
                                                                                                                              exit_sbiou
                                                                                                                                  GHC.Prim.void#
                                                                                                                                  wild8_sbioU;
                                                                                                                          4# ->
                                                                                                                              x_sbioA
                                                                                                                                  GHC.Prim.void#;
                                                                                                                          11# ->
                                                                                                                              Unit# [GHC.Types.False];
                                                                                                                          13# ->
                                                                                                                              Unit# [GHC.Types.False];
                                                                                                                        };
                                                                                                                    GHC.Types.True ->
                                                                                                                        case
                                                                                                                            narrow32Int# [ds14_sbioS]
                                                                                                                        of
                                                                                                                        wild8_sbioV
                                                                                                                        { __DEFAULT ->
                                                                                                                              exit1_sbiox
                                                                                                                                  GHC.Prim.void#
                                                                                                                                  wild8_sbioV;
                                                                                                                          4# ->
                                                                                                                              x_sbioA
                                                                                                                                  GHC.Prim.void#;
                                                                                                                        };
                                                                                                                  };
                                                                                                            };
                                                                                                        0# ->
                                                                                                            Unit# [GHC.Types.True];
                                                                                                      };
                                                                                                };
                                                                                          };
                                                                                    };
                                                                              };
                                                                        };
                                                              } in 
                                                                case block_sbio0 of {
                                                                  GHC.Types.False -> $j1_sbioE 4#;
                                                                  GHC.Types.True -> $j1_sbioE 0#;
                                                                };
                                                    } in 
                                                      case mode_sbinZ of {
                                                        GHC.IO.Handle.Lock.SharedLock ->
                                                            $j_sbioC 1#;
                                                        GHC.IO.Handle.Lock.ExclusiveLock ->
                                                            $j_sbioC 2#;
                                                      };
                                          } in  x_sbioA GHC.Prim.void#;
                                };
                          };
                    };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              GHC.IO.Handle.FD.handleToFd2 wild_sbio2 GHC.Prim.void#;
        };

GHC.IO.Handle.Lock.hTryLock3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hTryLock"#;

GHC.IO.Handle.Lock.hTryLock2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.Lock.hTryLock3;

GHC.IO.Handle.Lock.hTryLock1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Lock.LockMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [h_sbip2 mode_sbip3 void_0E]
        GHC.IO.Handle.Lock.hLock4
            h_sbip2
            GHC.IO.Handle.Lock.hTryLock2
            mode_sbip3
            GHC.Types.False
            GHC.Prim.void#;

GHC.IO.Handle.Lock.hTryLock
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Lock.LockMode -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.Lock.hTryLock1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Lock.hLock3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hLock"#;

GHC.IO.Handle.Lock.hLock2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.Lock.hLock3;

GHC.IO.Handle.Lock.hLock1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Lock.LockMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [h_sbip4 mode_sbip5 void_0E]
        case
            GHC.IO.Handle.Lock.hLock4
                h_sbip4
                GHC.IO.Handle.Lock.hLock2
                mode_sbip5
                GHC.Types.True
                GHC.Prim.void#
        of
        { Unit# _ [Occ=Dead] -> Unit# [GHC.Tuple.()];
        };

GHC.IO.Handle.Lock.hLock
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Lock.LockMode -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,1*U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.Lock.hLock1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Lock.SharedLock :: GHC.IO.Handle.Lock.LockMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Lock.SharedLock! [];

GHC.IO.Handle.Lock.ExclusiveLock :: GHC.IO.Handle.Lock.LockMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Lock.ExclusiveLock! [];

GHC.IO.Handle.Lock.FileLockingNotSupported
  :: GHC.IO.Handle.Lock.FileLockingNotSupported
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Lock.FileLockingNotSupported! [];


==================== Pre unarise: ====================
2018-03-16 16:06:14.746325921 UTC

GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported2
  :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FileLockingNotSupported"#;

GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported1
  :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported2;

GHC.IO.Handle.Lock.$fShowFileLockingNotSupported_$cshowsPrec
  :: GHC.Types.Int
     -> GHC.IO.Handle.Lock.FileLockingNotSupported -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*H><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sbiTq ds1_sbiTr eta_sbiTs]
        case ds1_sbiTr of {
          GHC.IO.Handle.Lock.FileLockingNotSupported ->
              GHC.Base.++
                  GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported1 eta_sbiTs;
        };

GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$cshow
  :: GHC.IO.Handle.Lock.FileLockingNotSupported -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*H>, Unf=OtherCon []] =
    [] \r [x_sbiTu]
        case x_sbiTu of {
          GHC.IO.Handle.Lock.FileLockingNotSupported ->
              GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported1;
        };

GHC.IO.Handle.Lock.$fShowFileLockingNotSupported1
  :: GHC.IO.Handle.Lock.FileLockingNotSupported -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*H><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sbiTw eta_sbiTx]
        case ds_sbiTw of {
          GHC.IO.Handle.Lock.FileLockingNotSupported ->
              GHC.Base.++
                  GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported1 eta_sbiTx;
        };

GHC.IO.Handle.Lock.$fShowFileLockingNotSupported_$cshowList
  :: [GHC.IO.Handle.Lock.FileLockingNotSupported] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sbiTz s_sbiTA]
        GHC.Show.showList__
            GHC.IO.Handle.Lock.$fShowFileLockingNotSupported1 ls_sbiTz s_sbiTA;

GHC.IO.Handle.Lock.$fShowFileLockingNotSupported [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Handle.Lock.FileLockingNotSupported
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Handle.Lock.$fShowFileLockingNotSupported_$cshowsPrec
                                    GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$cshow
                                    GHC.IO.Handle.Lock.$fShowFileLockingNotSupported_$cshowList];

GHC.IO.Handle.Lock.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.Handle.Lock.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Lock.$trModule4];

GHC.IO.Handle.Lock.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Handle.Lock"#;

GHC.IO.Handle.Lock.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Lock.$trModule2];

GHC.IO.Handle.Lock.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Handle.Lock.$trModule3
                                     GHC.IO.Handle.Lock.$trModule1];

GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported4
  :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported2];

GHC.IO.Handle.Lock.$tcFileLockingNotSupported :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2716065848555532007##
                                    12251424812302631774##
                                    GHC.IO.Handle.Lock.$trModule
                                    GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported4
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.Handle.Lock.$tc'FileLockingNotSupported1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Lock.$tcFileLockingNotSupported
                                              GHC.Types.[]];

GHC.IO.Handle.Lock.$tc'FileLockingNotSupported3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'FileLockingNotSupported"#;

GHC.IO.Handle.Lock.$tc'FileLockingNotSupported2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Lock.$tc'FileLockingNotSupported3];

GHC.IO.Handle.Lock.$tc'FileLockingNotSupported :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13975601321420314475##
                                    8398323512000399582##
                                    GHC.IO.Handle.Lock.$trModule
                                    GHC.IO.Handle.Lock.$tc'FileLockingNotSupported2
                                    0#
                                    GHC.IO.Handle.Lock.$tc'FileLockingNotSupported1];

GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported3
  :: Data.Typeable.Internal.TypeRep
       GHC.IO.Handle.Lock.FileLockingNotSupported
[GblId] =
    [] \u []
        case
            Data.Typeable.Internal.$wmkTrCon
                2716065848555532007##
                12251424812302631774##
                GHC.IO.Handle.Lock.$trModule
                GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported4
                0#
                GHC.Types.krep$*
                GHC.Types.[]
        of
        { (#,,,,#) ww8_sbiTC [Occ=Once]
                   ww9_sbiTD [Occ=Once]
                   ww10_sbiTE [Occ=Once]
                   ww11_sbiTF [Occ=Once]
                   ww12_sbiTG [Occ=Once] ->
              Data.Typeable.Internal.TrTyCon [ww8_sbiTC
                                              ww9_sbiTD
                                              ww10_sbiTE
                                              ww11_sbiTF
                                              ww12_sbiTG];
        };

GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$cfromException
  :: GHC.Exception.SomeException
     -> GHC.Base.Maybe GHC.IO.Handle.Lock.FileLockingNotSupported
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_sbiTH]
        case ds_sbiTH of {
          GHC.Exception.SomeException $dException1_sbiTJ [Occ=Once]
                                      e2_sbiTK [Occ=Once] ->
              case GHC.Exception.$p1Exception $dException1_sbiTJ of sat_sbiTL {
                __DEFAULT ->
                    case
                        Data.Typeable.Internal.sameTypeRep
                            sat_sbiTL GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported3
                    of
                    { GHC.Types.False -> GHC.Base.Nothing [];
                      GHC.Types.True -> GHC.Base.Just [e2_sbiTK];
                    };
              };
        };

GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Exception.Exception
       GHC.IO.Handle.Lock.FileLockingNotSupported
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Exception.C:Exception! [GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported3
                                              GHC.IO.Handle.Lock.$fShowFileLockingNotSupported
                                              GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$ctoException
                                              GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$cfromException
                                              GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$cshow];
GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$ctoException [Occ=LoopBreaker]
  :: GHC.IO.Handle.Lock.FileLockingNotSupported
     -> GHC.Exception.SomeException
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Exception.SomeException [GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported
                                     eta_B1];

GHC.IO.Handle.Lock.$tcLockMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LockMode"#;

GHC.IO.Handle.Lock.$tcLockMode1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Lock.$tcLockMode2];

GHC.IO.Handle.Lock.$tcLockMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [18068849831825836849##
                                    1974453150269185476##
                                    GHC.IO.Handle.Lock.$trModule
                                    GHC.IO.Handle.Lock.$tcLockMode1
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.Handle.Lock.$tc'ExclusiveLock1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Lock.$tcLockMode
                                              GHC.Types.[]];

GHC.IO.Handle.Lock.$tc'SharedLock2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'SharedLock"#;

GHC.IO.Handle.Lock.$tc'SharedLock1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Lock.$tc'SharedLock2];

GHC.IO.Handle.Lock.$tc'SharedLock :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9660990538910196995##
                                    16983901031857135990##
                                    GHC.IO.Handle.Lock.$trModule
                                    GHC.IO.Handle.Lock.$tc'SharedLock1
                                    0#
                                    GHC.IO.Handle.Lock.$tc'ExclusiveLock1];

GHC.IO.Handle.Lock.$tc'ExclusiveLock3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ExclusiveLock"#;

GHC.IO.Handle.Lock.$tc'ExclusiveLock2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Lock.$tc'ExclusiveLock3];

GHC.IO.Handle.Lock.$tc'ExclusiveLock :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [8544818512469904331##
                                    16785548070058023905##
                                    GHC.IO.Handle.Lock.$trModule
                                    GHC.IO.Handle.Lock.$tc'ExclusiveLock2
                                    0#
                                    GHC.IO.Handle.Lock.$tc'ExclusiveLock1];

lvl_rbimF :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "flock"#;

lvl1_rbimG :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl_rbimF;

GHC.IO.Handle.Lock.hUnlock2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Prim.Int#
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, Foreign.C.Types.CInt #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    [] \r [ds2_sbiTN ds3_sbiTO]
        case narrow32Int# [ds3_sbiTO] of sat_sbiTP {
          __DEFAULT -> Foreign.C.Error.$wlvl lvl1_rbimG sat_sbiTP ds2_sbiTN;
        };

GHC.IO.Handle.Lock.hUnlock1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h_sbiTQ s_sbiTR]
        case h_sbiTQ of wild_sbiTS {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbiTU [Occ=Once] ->
              case readMVar# [dt_sbiTU s_sbiTR] of {
                (#,#) ipv_sbiTW [Occ=Once*] ipv1_sbiTX [Occ=Once!] ->
                    case ipv1_sbiTX of {
                      GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   $dTypeable_sbiU1 [Occ=Once]
                                                   ds2_sbiU2 [Occ=Once]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead] ->
                          case ds2_sbiU2 of {
                            GHC.IO.FD.FD dt7_sbiUg [Occ=Once] _ [Occ=Dead] ->
                                case
                                    Data.Typeable.Internal.sameTypeRep
                                        $dTypeable_sbiU1 GHC.IO.Handle.FD.fdToHandle12
                                of
                                { GHC.Types.False ->
                                      GHC.IO.Handle.FD.handleToFd3 wild_sbiTS ipv_sbiTW;
                                  GHC.Types.True ->
                                      case
                                          __pkg_ccall_GC base-4.11.0.0 [dt7_sbiUg 8# ipv_sbiTW]
                                      of
                                      { (#,#) ds11_sbiUm [Occ=Once*] ds12_sbiUn [Occ=Once] ->
                                            case narrow32Int# [ds12_sbiUn] of {
                                              __DEFAULT -> (#,#) [ds11_sbiUm GHC.Tuple.()];
                                              -1# ->
                                                  case __pkg_ccall base-4.11.0.0 [ds11_sbiUm] of {
                                                    (#,#) ds13_sbiUr [Occ=Once]
                                                          ds14_sbiUs [Occ=Once] ->
                                                        GHC.IO.Handle.Lock.hUnlock2
                                                            ds13_sbiUr ds14_sbiUs;
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              GHC.IO.Handle.FD.handleToFd2 wild_sbiTS s_sbiTR;
        };

GHC.IO.Handle.Lock.hUnlock
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO ()
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.Lock.hUnlock1 eta_B2 eta_B1;

GHC.IO.Handle.Lock.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=4, Str=<B,U><B,U><B,U><B,U>x, Unf=OtherCon []] =
    [] \r [ww_sbiUy w_sbiUz w1_sbiUA w2_sbiUB]
        let {
          sat_sbiUE [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [ww_sbiUy w_sbiUz w1_sbiUA] \u []
                  let {
                    sat_sbiUD [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        [ww_sbiUy w_sbiUz w1_sbiUA] \u []
                            let {
                              sat_sbiUC [Occ=Once] :: GHC.Base.Maybe GHC.IO.Handle.Types.Handle
                              [LclId] =
                                  CCCS GHC.Base.Just! [w1_sbiUA];
                            } in 
                              Foreign.C.Error.$werrnoToIOError
                                  w_sbiUz ww_sbiUy sat_sbiUC GHC.Base.Nothing;
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sbiUD;
        } in  raiseIO# [sat_sbiUE w2_sbiUB];

GHC.IO.Handle.Lock.hLock4
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Base.String
     -> GHC.IO.Handle.Lock.LockMode
     -> GHC.Types.Bool
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId,
 Arity=5,
 Str=<S,1*U><L,U><S,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [h_sbiUF ctx_sbiUG mode_sbiUH block_sbiUI eta_sbiUJ]
        case h_sbiUF of wild_sbiUK {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbiUM [Occ=Once] ->
              case readMVar# [dt_sbiUM eta_sbiUJ] of {
                (#,#) ipv_sbiUO [Occ=Once*] ipv1_sbiUP [Occ=Once!] ->
                    case ipv1_sbiUP of {
                      GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   $dTypeable_sbiUT [Occ=Once]
                                                   ds2_sbiUU [Occ=Once]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead] ->
                          case ds2_sbiUU of {
                            GHC.IO.FD.FD dt7_sbiV8 [Occ=OnceL] _ [Occ=Dead] ->
                                case
                                    Data.Typeable.Internal.sameTypeRep
                                        $dTypeable_sbiUT GHC.IO.Handle.FD.fdToHandle12
                                of
                                { GHC.Types.False ->
                                      GHC.IO.Handle.FD.handleToFd3 wild_sbiUK ipv_sbiUO;
                                  GHC.Types.True ->
                                      let-no-escape {
                                        exit_sbiVc [Occ=OnceL!T[2], Dmd=<L,C(C1(U(U,U)))>]
                                          :: GHC.Prim.State# GHC.Prim.RealWorld
                                             -> GHC.Prim.Int#
                                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                   GHC.Types.Bool #)
                                        [LclId[JoinId(2)],
                                         Arity=2,
                                         Str=<B,U><B,U>x,
                                         Unf=OtherCon []] =
                                            sat-only [ctx_sbiUG wild_sbiUK] \r [ds11_sbiVd
                                                                                wild4_sbiVe]
                                                GHC.IO.Handle.Lock.$wlvl
                                                    wild4_sbiVe ctx_sbiUG wild_sbiUK ds11_sbiVd;
                                      } in 
                                        let-no-escape {
                                          exit1_sbiVf [Occ=OnceL!T[2], Dmd=<L,C(C1(U(U,U)))>]
                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> GHC.Prim.Int#
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                     GHC.Types.Bool #)
                                          [LclId[JoinId(2)],
                                           Arity=2,
                                           Str=<B,U><B,U>x,
                                           Unf=OtherCon []] =
                                              sat-only [ctx_sbiUG wild_sbiUK] \r [ds11_sbiVg
                                                                                  wild4_sbiVh]
                                                  GHC.IO.Handle.Lock.$wlvl
                                                      wild4_sbiVh ctx_sbiUG wild_sbiUK ds11_sbiVg;
                                        } in 
                                          let-no-escape {
                                            x_sbiVi [Occ=LoopBreakerT[1]]
                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       GHC.Types.Bool #)
                                            [LclId[JoinId(1)],
                                             Arity=1,
                                             Str=<S,U>,
                                             Unf=OtherCon []] =
                                                sat-only [mode_sbiUH
                                                          block_sbiUI
                                                          dt7_sbiV8
                                                          exit_sbiVc
                                                          exit1_sbiVf
                                                          x_sbiVi] \r [s_sbiVj]
                                                    let-no-escape {
                                                      $j_sbiVk [Occ=Once*!T[1],
                                                                Dmd=<C(S),1*C1(U(U,U))>]
                                                        :: GHC.Prim.Int#
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 GHC.Types.Bool #)
                                                      [LclId[JoinId(1)],
                                                       Arity=1,
                                                       Str=<S,U>,
                                                       Unf=OtherCon []] =
                                                          sat-only [block_sbiUI
                                                                    dt7_sbiV8
                                                                    exit_sbiVc
                                                                    exit1_sbiVf
                                                                    x_sbiVi
                                                                    s_sbiVj] \r [x#_sbiVl]
                                                              let-no-escape {
                                                                $j1_sbiVm [Occ=Once*!T[1],
                                                                           Dmd=<C(S),1*C1(U(U,U))>]
                                                                  :: GHC.Prim.Int#
                                                                     -> (# GHC.Prim.State#
                                                                             GHC.Prim.RealWorld,
                                                                           GHC.Types.Bool #)
                                                                [LclId[JoinId(1)],
                                                                 Arity=1,
                                                                 Str=<S,U>,
                                                                 Unf=OtherCon []] =
                                                                    sat-only [block_sbiUI
                                                                              dt7_sbiV8
                                                                              exit_sbiVc
                                                                              exit1_sbiVf
                                                                              x_sbiVi
                                                                              s_sbiVj
                                                                              x#_sbiVl] \r [y#_sbiVn]
                                                                        case
                                                                            int2Word# [y#_sbiVn]
                                                                        of
                                                                        sat_sbiVq
                                                                        { __DEFAULT ->
                                                                              case
                                                                                  int2Word# [x#_sbiVl]
                                                                              of
                                                                              sat_sbiVp
                                                                              { __DEFAULT ->
                                                                                    case
                                                                                        or# [sat_sbiVp
                                                                                             sat_sbiVq]
                                                                                    of
                                                                                    sat_sbiVr
                                                                                    { __DEFAULT ->
                                                                                          case
                                                                                              word2Int# [sat_sbiVr]
                                                                                          of
                                                                                          sat_sbiVs
                                                                                          { __DEFAULT ->
                                                                                                case
                                                                                                    __pkg_ccall_GC base-4.11.0.0 [dt7_sbiV8
                                                                                                                                  sat_sbiVs
                                                                                                                                  s_sbiVj]
                                                                                                of
                                                                                                { (#,#) ds11_sbiVu [Occ=Once*]
                                                                                                        ds12_sbiVv [Occ=Once] ->
                                                                                                      case
                                                                                                          narrow32Int# [ds12_sbiVv]
                                                                                                      of
                                                                                                      { __DEFAULT ->
                                                                                                            case
                                                                                                                __pkg_ccall base-4.11.0.0 [ds11_sbiVu]
                                                                                                            of
                                                                                                            { (#,#) ds13_sbiVz [Occ=Once*]
                                                                                                                    ds14_sbiVA [Occ=Once*] ->
                                                                                                                  case
                                                                                                                      block_sbiUI
                                                                                                                  of
                                                                                                                  { GHC.Types.False ->
                                                                                                                        case
                                                                                                                            narrow32Int# [ds14_sbiVA]
                                                                                                                        of
                                                                                                                        wild8_sbiVC
                                                                                                                        { __DEFAULT ->
                                                                                                                              exit_sbiVc
                                                                                                                                  ds13_sbiVz
                                                                                                                                  wild8_sbiVC;
                                                                                                                          4# ->
                                                                                                                              x_sbiVi
                                                                                                                                  ds13_sbiVz;
                                                                                                                          11# ->
                                                                                                                              (#,#) [ds13_sbiVz
                                                                                                                                     GHC.Types.False];
                                                                                                                          13# ->
                                                                                                                              (#,#) [ds13_sbiVz
                                                                                                                                     GHC.Types.False];
                                                                                                                        };
                                                                                                                    GHC.Types.True ->
                                                                                                                        case
                                                                                                                            narrow32Int# [ds14_sbiVA]
                                                                                                                        of
                                                                                                                        wild8_sbiVD
                                                                                                                        { __DEFAULT ->
                                                                                                                              exit1_sbiVf
                                                                                                                                  ds13_sbiVz
                                                                                                                                  wild8_sbiVD;
                                                                                                                          4# ->
                                                                                                                              x_sbiVi
                                                                                                                                  ds13_sbiVz;
                                                                                                                        };
                                                                                                                  };
                                                                                                            };
                                                                                                        0# ->
                                                                                                            (#,#) [ds11_sbiVu
                                                                                                                   GHC.Types.True];
                                                                                                      };
                                                                                                };
                                                                                          };
                                                                                    };
                                                                              };
                                                                        };
                                                              } in 
                                                                case block_sbiUI of {
                                                                  GHC.Types.False -> $j1_sbiVm 4#;
                                                                  GHC.Types.True -> $j1_sbiVm 0#;
                                                                };
                                                    } in 
                                                      case mode_sbiUH of {
                                                        GHC.IO.Handle.Lock.SharedLock ->
                                                            $j_sbiVk 1#;
                                                        GHC.IO.Handle.Lock.ExclusiveLock ->
                                                            $j_sbiVk 2#;
                                                      };
                                          } in  x_sbiVi ipv_sbiUO;
                                };
                          };
                    };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              GHC.IO.Handle.FD.handleToFd2 wild_sbiUK eta_sbiUJ;
        };

GHC.IO.Handle.Lock.hTryLock3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hTryLock"#;

GHC.IO.Handle.Lock.hTryLock2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.Lock.hTryLock3;

GHC.IO.Handle.Lock.hTryLock1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Lock.LockMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [h_sbiVK mode_sbiVL eta_B1]
        GHC.IO.Handle.Lock.hLock4
            h_sbiVK
            GHC.IO.Handle.Lock.hTryLock2
            mode_sbiVL
            GHC.Types.False
            eta_B1;

GHC.IO.Handle.Lock.hTryLock
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Lock.LockMode -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.Lock.hTryLock1 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.Lock.hLock3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hLock"#;

GHC.IO.Handle.Lock.hLock2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.Lock.hLock3;

GHC.IO.Handle.Lock.hLock1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Lock.LockMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [h_sbiVM mode_sbiVN eta1_sbiVO]
        case
            GHC.IO.Handle.Lock.hLock4
                h_sbiVM
                GHC.IO.Handle.Lock.hLock2
                mode_sbiVN
                GHC.Types.True
                eta1_sbiVO
        of
        { (#,#) ipv_sbiVQ [Occ=Once] _ [Occ=Dead] ->
              (#,#) [ipv_sbiVQ GHC.Tuple.()];
        };

GHC.IO.Handle.Lock.hLock
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Lock.LockMode -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,1*U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.Lock.hLock1 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.Lock.SharedLock :: GHC.IO.Handle.Lock.LockMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Lock.SharedLock! [];

GHC.IO.Handle.Lock.ExclusiveLock :: GHC.IO.Handle.Lock.LockMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Lock.ExclusiveLock! [];

GHC.IO.Handle.Lock.FileLockingNotSupported
  :: GHC.IO.Handle.Lock.FileLockingNotSupported
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Lock.FileLockingNotSupported! [];


==================== STG syntax: ====================
2018-03-16 16:06:14.755614488 UTC

GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported2
  :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FileLockingNotSupported"#;

GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported1
  :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported2;

GHC.IO.Handle.Lock.$fShowFileLockingNotSupported_$cshowsPrec
  :: GHC.Types.Int
     -> GHC.IO.Handle.Lock.FileLockingNotSupported -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*H><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sbiTq ds1_sbiTr eta_sbiTs]
        case ds1_sbiTr of {
          GHC.IO.Handle.Lock.FileLockingNotSupported ->
              GHC.Base.++
                  GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported1 eta_sbiTs;
        };

GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$cshow
  :: GHC.IO.Handle.Lock.FileLockingNotSupported -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*H>, Unf=OtherCon []] =
    [] \r [x_sbiTu]
        case x_sbiTu of {
          GHC.IO.Handle.Lock.FileLockingNotSupported ->
              GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported1;
        };

GHC.IO.Handle.Lock.$fShowFileLockingNotSupported1
  :: GHC.IO.Handle.Lock.FileLockingNotSupported -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*H><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sbiTw eta_sbiTx]
        case ds_sbiTw of {
          GHC.IO.Handle.Lock.FileLockingNotSupported ->
              GHC.Base.++
                  GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported1 eta_sbiTx;
        };

GHC.IO.Handle.Lock.$fShowFileLockingNotSupported_$cshowList
  :: [GHC.IO.Handle.Lock.FileLockingNotSupported] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sbiTz s_sbiTA]
        GHC.Show.showList__
            GHC.IO.Handle.Lock.$fShowFileLockingNotSupported1 ls_sbiTz s_sbiTA;

GHC.IO.Handle.Lock.$fShowFileLockingNotSupported [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Handle.Lock.FileLockingNotSupported
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Handle.Lock.$fShowFileLockingNotSupported_$cshowsPrec
                                    GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$cshow
                                    GHC.IO.Handle.Lock.$fShowFileLockingNotSupported_$cshowList];

GHC.IO.Handle.Lock.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.Handle.Lock.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Lock.$trModule4];

GHC.IO.Handle.Lock.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Handle.Lock"#;

GHC.IO.Handle.Lock.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Lock.$trModule2];

GHC.IO.Handle.Lock.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Handle.Lock.$trModule3
                                     GHC.IO.Handle.Lock.$trModule1];

GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported4
  :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported2];

GHC.IO.Handle.Lock.$tcFileLockingNotSupported :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2716065848555532007##
                                    12251424812302631774##
                                    GHC.IO.Handle.Lock.$trModule
                                    GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported4
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.Handle.Lock.$tc'FileLockingNotSupported1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Lock.$tcFileLockingNotSupported
                                              GHC.Types.[]];

GHC.IO.Handle.Lock.$tc'FileLockingNotSupported3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'FileLockingNotSupported"#;

GHC.IO.Handle.Lock.$tc'FileLockingNotSupported2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Lock.$tc'FileLockingNotSupported3];

GHC.IO.Handle.Lock.$tc'FileLockingNotSupported :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13975601321420314475##
                                    8398323512000399582##
                                    GHC.IO.Handle.Lock.$trModule
                                    GHC.IO.Handle.Lock.$tc'FileLockingNotSupported2
                                    0#
                                    GHC.IO.Handle.Lock.$tc'FileLockingNotSupported1];

GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported3
  :: Data.Typeable.Internal.TypeRep
       GHC.IO.Handle.Lock.FileLockingNotSupported
[GblId] =
    [] \u []
        case
            Data.Typeable.Internal.$wmkTrCon
                2716065848555532007##
                12251424812302631774##
                GHC.IO.Handle.Lock.$trModule
                GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported4
                0#
                GHC.Types.krep$*
                GHC.Types.[]
        of
        { (#,,,,#) ww8_sbiTC [Occ=Once]
                   ww9_sbiTD [Occ=Once]
                   ww10_sbiTE [Occ=Once]
                   ww11_sbiTF [Occ=Once]
                   ww12_sbiTG [Occ=Once] ->
              Data.Typeable.Internal.TrTyCon [ww8_sbiTC
                                              ww9_sbiTD
                                              ww10_sbiTE
                                              ww11_sbiTF
                                              ww12_sbiTG];
        };

GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$cfromException
  :: GHC.Exception.SomeException
     -> GHC.Base.Maybe GHC.IO.Handle.Lock.FileLockingNotSupported
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_sbiTH]
        case ds_sbiTH of {
          GHC.Exception.SomeException $dException1_sbiTJ [Occ=Once]
                                      e2_sbiTK [Occ=Once] ->
              case GHC.Exception.$p1Exception $dException1_sbiTJ of sat_sbiTL {
                __DEFAULT ->
                    case
                        Data.Typeable.Internal.sameTypeRep
                            sat_sbiTL GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported3
                    of
                    { GHC.Types.False -> GHC.Base.Nothing [];
                      GHC.Types.True -> GHC.Base.Just [e2_sbiTK];
                    };
              };
        };

GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Exception.Exception
       GHC.IO.Handle.Lock.FileLockingNotSupported
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Exception.C:Exception! [GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported3
                                              GHC.IO.Handle.Lock.$fShowFileLockingNotSupported
                                              GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$ctoException
                                              GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$cfromException
                                              GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$cshow];
GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$ctoException [Occ=LoopBreaker]
  :: GHC.IO.Handle.Lock.FileLockingNotSupported
     -> GHC.Exception.SomeException
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Exception.SomeException [GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported
                                     eta_B1];

GHC.IO.Handle.Lock.$tcLockMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LockMode"#;

GHC.IO.Handle.Lock.$tcLockMode1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Lock.$tcLockMode2];

GHC.IO.Handle.Lock.$tcLockMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [18068849831825836849##
                                    1974453150269185476##
                                    GHC.IO.Handle.Lock.$trModule
                                    GHC.IO.Handle.Lock.$tcLockMode1
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.Handle.Lock.$tc'ExclusiveLock1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Lock.$tcLockMode
                                              GHC.Types.[]];

GHC.IO.Handle.Lock.$tc'SharedLock2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'SharedLock"#;

GHC.IO.Handle.Lock.$tc'SharedLock1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Lock.$tc'SharedLock2];

GHC.IO.Handle.Lock.$tc'SharedLock :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9660990538910196995##
                                    16983901031857135990##
                                    GHC.IO.Handle.Lock.$trModule
                                    GHC.IO.Handle.Lock.$tc'SharedLock1
                                    0#
                                    GHC.IO.Handle.Lock.$tc'ExclusiveLock1];

GHC.IO.Handle.Lock.$tc'ExclusiveLock3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ExclusiveLock"#;

GHC.IO.Handle.Lock.$tc'ExclusiveLock2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Lock.$tc'ExclusiveLock3];

GHC.IO.Handle.Lock.$tc'ExclusiveLock :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [8544818512469904331##
                                    16785548070058023905##
                                    GHC.IO.Handle.Lock.$trModule
                                    GHC.IO.Handle.Lock.$tc'ExclusiveLock2
                                    0#
                                    GHC.IO.Handle.Lock.$tc'ExclusiveLock1];

lvl_rbimF :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "flock"#;

lvl1_rbimG :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl_rbimF;

GHC.IO.Handle.Lock.hUnlock2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Prim.Int#
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, Foreign.C.Types.CInt #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    [] \r [void_0E ds3_sbiTO]
        case narrow32Int# [ds3_sbiTO] of sat_sbiTP {
          __DEFAULT ->
              Foreign.C.Error.$wlvl lvl1_rbimG sat_sbiTP GHC.Prim.void#;
        };

GHC.IO.Handle.Lock.hUnlock1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h_sbiTQ void_0E]
        case h_sbiTQ of wild_sbiTS {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbiTU [Occ=Once] ->
              case readMVar# [dt_sbiTU GHC.Prim.void#] of {
                Unit# ipv1_sbiTX [Occ=Once!] ->
                    case ipv1_sbiTX of {
                      GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   $dTypeable_sbiU1 [Occ=Once]
                                                   ds2_sbiU2 [Occ=Once]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead] ->
                          case ds2_sbiU2 of {
                            GHC.IO.FD.FD dt7_sbiUg [Occ=Once] _ [Occ=Dead] ->
                                case
                                    Data.Typeable.Internal.sameTypeRep
                                        $dTypeable_sbiU1 GHC.IO.Handle.FD.fdToHandle12
                                of
                                { GHC.Types.False ->
                                      GHC.IO.Handle.FD.handleToFd3 wild_sbiTS GHC.Prim.void#;
                                  GHC.Types.True ->
                                      case
                                          __pkg_ccall_GC base-4.11.0.0 [dt7_sbiUg 8# GHC.Prim.void#]
                                      of
                                      { Unit# ds12_sbiUn [Occ=Once] ->
                                            case narrow32Int# [ds12_sbiUn] of {
                                              __DEFAULT -> Unit# [GHC.Tuple.()];
                                              -1# ->
                                                  case
                                                      __pkg_ccall base-4.11.0.0 [GHC.Prim.void#]
                                                  of
                                                  { Unit# ds14_sbiUs [Occ=Once] ->
                                                        GHC.IO.Handle.Lock.hUnlock2
                                                            GHC.Prim.void# ds14_sbiUs;
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              GHC.IO.Handle.FD.handleToFd2 wild_sbiTS GHC.Prim.void#;
        };

GHC.IO.Handle.Lock.hUnlock
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO ()
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.Lock.hUnlock1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Lock.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=4, Str=<B,U><B,U><B,U><B,U>x, Unf=OtherCon []] =
    [] \r [ww_sbiUy w_sbiUz w1_sbiUA void_0E]
        let {
          sat_sbiUE [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [ww_sbiUy w_sbiUz w1_sbiUA] \u []
                  let {
                    sat_sbiUD [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        [ww_sbiUy w_sbiUz w1_sbiUA] \u []
                            let {
                              sat_sbiUC [Occ=Once] :: GHC.Base.Maybe GHC.IO.Handle.Types.Handle
                              [LclId] =
                                  CCCS GHC.Base.Just! [w1_sbiUA];
                            } in 
                              Foreign.C.Error.$werrnoToIOError
                                  w_sbiUz ww_sbiUy sat_sbiUC GHC.Base.Nothing;
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sbiUD;
        } in  raiseIO# [sat_sbiUE GHC.Prim.void#];

GHC.IO.Handle.Lock.hLock4
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Base.String
     -> GHC.IO.Handle.Lock.LockMode
     -> GHC.Types.Bool
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId,
 Arity=5,
 Str=<S,1*U><L,U><S,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [h_sbiUF ctx_sbiUG mode_sbiUH block_sbiUI void_0E]
        case h_sbiUF of wild_sbiUK {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbiUM [Occ=Once] ->
              case readMVar# [dt_sbiUM GHC.Prim.void#] of {
                Unit# ipv1_sbiUP [Occ=Once!] ->
                    case ipv1_sbiUP of {
                      GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   $dTypeable_sbiUT [Occ=Once]
                                                   ds2_sbiUU [Occ=Once]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead] ->
                          case ds2_sbiUU of {
                            GHC.IO.FD.FD dt7_sbiV8 [Occ=OnceL] _ [Occ=Dead] ->
                                case
                                    Data.Typeable.Internal.sameTypeRep
                                        $dTypeable_sbiUT GHC.IO.Handle.FD.fdToHandle12
                                of
                                { GHC.Types.False ->
                                      GHC.IO.Handle.FD.handleToFd3 wild_sbiUK GHC.Prim.void#;
                                  GHC.Types.True ->
                                      let-no-escape {
                                        exit_sbiVc [Occ=OnceL!T[2], Dmd=<L,C(C1(U(U,U)))>]
                                          :: GHC.Prim.State# GHC.Prim.RealWorld
                                             -> GHC.Prim.Int#
                                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                   GHC.Types.Bool #)
                                        [LclId[JoinId(2)],
                                         Arity=2,
                                         Str=<B,U><B,U>x,
                                         Unf=OtherCon []] =
                                            sat-only [ctx_sbiUG wild_sbiUK] \r [void_0E wild4_sbiVe]
                                                GHC.IO.Handle.Lock.$wlvl
                                                    wild4_sbiVe ctx_sbiUG wild_sbiUK GHC.Prim.void#;
                                      } in 
                                        let-no-escape {
                                          exit1_sbiVf [Occ=OnceL!T[2], Dmd=<L,C(C1(U(U,U)))>]
                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> GHC.Prim.Int#
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                     GHC.Types.Bool #)
                                          [LclId[JoinId(2)],
                                           Arity=2,
                                           Str=<B,U><B,U>x,
                                           Unf=OtherCon []] =
                                              sat-only [ctx_sbiUG wild_sbiUK] \r [void_0E
                                                                                  wild4_sbiVh]
                                                  GHC.IO.Handle.Lock.$wlvl
                                                      wild4_sbiVh
                                                      ctx_sbiUG
                                                      wild_sbiUK
                                                      GHC.Prim.void#;
                                        } in 
                                          let-no-escape {
                                            x_sbiVi [Occ=LoopBreakerT[1]]
                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       GHC.Types.Bool #)
                                            [LclId[JoinId(1)],
                                             Arity=1,
                                             Str=<S,U>,
                                             Unf=OtherCon []] =
                                                sat-only [mode_sbiUH
                                                          block_sbiUI
                                                          dt7_sbiV8
                                                          exit_sbiVc
                                                          exit1_sbiVf
                                                          x_sbiVi] \r [void_0E]
                                                    let-no-escape {
                                                      $j_sbiVk [Occ=Once*!T[1],
                                                                Dmd=<C(S),1*C1(U(U,U))>]
                                                        :: GHC.Prim.Int#
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 GHC.Types.Bool #)
                                                      [LclId[JoinId(1)],
                                                       Arity=1,
                                                       Str=<S,U>,
                                                       Unf=OtherCon []] =
                                                          sat-only [block_sbiUI
                                                                    dt7_sbiV8
                                                                    exit_sbiVc
                                                                    exit1_sbiVf
                                                                    x_sbiVi] \r [x#_sbiVl]
                                                              let-no-escape {
                                                                $j1_sbiVm [Occ=Once*!T[1],
                                                                           Dmd=<C(S),1*C1(U(U,U))>]
                                                                  :: GHC.Prim.Int#
                                                                     -> (# GHC.Prim.State#
                                                                             GHC.Prim.RealWorld,
                                                                           GHC.Types.Bool #)
                                                                [LclId[JoinId(1)],
                                                                 Arity=1,
                                                                 Str=<S,U>,
                                                                 Unf=OtherCon []] =
                                                                    sat-only [block_sbiUI
                                                                              dt7_sbiV8
                                                                              exit_sbiVc
                                                                              exit1_sbiVf
                                                                              x_sbiVi
                                                                              x#_sbiVl] \r [y#_sbiVn]
                                                                        case
                                                                            int2Word# [y#_sbiVn]
                                                                        of
                                                                        sat_sbiVq
                                                                        { __DEFAULT ->
                                                                              case
                                                                                  int2Word# [x#_sbiVl]
                                                                              of
                                                                              sat_sbiVp
                                                                              { __DEFAULT ->
                                                                                    case
                                                                                        or# [sat_sbiVp
                                                                                             sat_sbiVq]
                                                                                    of
                                                                                    sat_sbiVr
                                                                                    { __DEFAULT ->
                                                                                          case
                                                                                              word2Int# [sat_sbiVr]
                                                                                          of
                                                                                          sat_sbiVs
                                                                                          { __DEFAULT ->
                                                                                                case
                                                                                                    __pkg_ccall_GC base-4.11.0.0 [dt7_sbiV8
                                                                                                                                  sat_sbiVs
                                                                                                                                  GHC.Prim.void#]
                                                                                                of
                                                                                                { Unit# ds12_sbiVv [Occ=Once] ->
                                                                                                      case
                                                                                                          narrow32Int# [ds12_sbiVv]
                                                                                                      of
                                                                                                      { __DEFAULT ->
                                                                                                            case
                                                                                                                __pkg_ccall base-4.11.0.0 [GHC.Prim.void#]
                                                                                                            of
                                                                                                            { Unit# ds14_sbiVA [Occ=Once*] ->
                                                                                                                  case
                                                                                                                      block_sbiUI
                                                                                                                  of
                                                                                                                  { GHC.Types.False ->
                                                                                                                        case
                                                                                                                            narrow32Int# [ds14_sbiVA]
                                                                                                                        of
                                                                                                                        wild8_sbiVC
                                                                                                                        { __DEFAULT ->
                                                                                                                              exit_sbiVc
                                                                                                                                  GHC.Prim.void#
                                                                                                                                  wild8_sbiVC;
                                                                                                                          4# ->
                                                                                                                              x_sbiVi
                                                                                                                                  GHC.Prim.void#;
                                                                                                                          11# ->
                                                                                                                              Unit# [GHC.Types.False];
                                                                                                                          13# ->
                                                                                                                              Unit# [GHC.Types.False];
                                                                                                                        };
                                                                                                                    GHC.Types.True ->
                                                                                                                        case
                                                                                                                            narrow32Int# [ds14_sbiVA]
                                                                                                                        of
                                                                                                                        wild8_sbiVD
                                                                                                                        { __DEFAULT ->
                                                                                                                              exit1_sbiVf
                                                                                                                                  GHC.Prim.void#
                                                                                                                                  wild8_sbiVD;
                                                                                                                          4# ->
                                                                                                                              x_sbiVi
                                                                                                                                  GHC.Prim.void#;
                                                                                                                        };
                                                                                                                  };
                                                                                                            };
                                                                                                        0# ->
                                                                                                            Unit# [GHC.Types.True];
                                                                                                      };
                                                                                                };
                                                                                          };
                                                                                    };
                                                                              };
                                                                        };
                                                              } in 
                                                                case block_sbiUI of {
                                                                  GHC.Types.False -> $j1_sbiVm 4#;
                                                                  GHC.Types.True -> $j1_sbiVm 0#;
                                                                };
                                                    } in 
                                                      case mode_sbiUH of {
                                                        GHC.IO.Handle.Lock.SharedLock ->
                                                            $j_sbiVk 1#;
                                                        GHC.IO.Handle.Lock.ExclusiveLock ->
                                                            $j_sbiVk 2#;
                                                      };
                                          } in  x_sbiVi GHC.Prim.void#;
                                };
                          };
                    };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              GHC.IO.Handle.FD.handleToFd2 wild_sbiUK GHC.Prim.void#;
        };

GHC.IO.Handle.Lock.hTryLock3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hTryLock"#;

GHC.IO.Handle.Lock.hTryLock2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.Lock.hTryLock3;

GHC.IO.Handle.Lock.hTryLock1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Lock.LockMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [h_sbiVK mode_sbiVL void_0E]
        GHC.IO.Handle.Lock.hLock4
            h_sbiVK
            GHC.IO.Handle.Lock.hTryLock2
            mode_sbiVL
            GHC.Types.False
            GHC.Prim.void#;

GHC.IO.Handle.Lock.hTryLock
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Lock.LockMode -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.Lock.hTryLock1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Lock.hLock3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hLock"#;

GHC.IO.Handle.Lock.hLock2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.Lock.hLock3;

GHC.IO.Handle.Lock.hLock1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Lock.LockMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [h_sbiVM mode_sbiVN void_0E]
        case
            GHC.IO.Handle.Lock.hLock4
                h_sbiVM
                GHC.IO.Handle.Lock.hLock2
                mode_sbiVN
                GHC.Types.True
                GHC.Prim.void#
        of
        { Unit# _ [Occ=Dead] -> Unit# [GHC.Tuple.()];
        };

GHC.IO.Handle.Lock.hLock
  :: GHC.IO.Handle.Types.Handle
     -> GHC.IO.Handle.Lock.LockMode -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,1*U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.Lock.hLock1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Lock.SharedLock :: GHC.IO.Handle.Lock.LockMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Lock.SharedLock! [];

GHC.IO.Handle.Lock.ExclusiveLock :: GHC.IO.Handle.Lock.LockMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Lock.ExclusiveLock! [];

GHC.IO.Handle.Lock.FileLockingNotSupported
  :: GHC.IO.Handle.Lock.FileLockingNotSupported
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Lock.FileLockingNotSupported! [];

