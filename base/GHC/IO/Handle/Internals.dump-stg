
==================== Pre unarise: ====================
2018-03-16 16:05:06.448103178 UTC

GHC.IO.Handle.Internals.augmentIOError
  :: GHC.IO.Exception.IOException
     -> GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.IO.Exception.IOException
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,1*U(A,U,A,U,U,1*U)><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [ioe_sa7PJ fun_sa7PK h_sa7PL]
        case ioe_sa7PJ of {
          GHC.IO.Exception.IOError _ [Occ=Dead]
                                   ds1_sa7PO [Occ=Once]
                                   _ [Occ=Dead]
                                   ds3_sa7PQ [Occ=Once]
                                   ds4_sa7PR [Occ=Once]
                                   ds5_sa7PS [Occ=Once!] ->
              let {
                sat_sa7Q2 [Occ=Once] :: GHC.Base.Maybe GHC.IO.FilePath
                [LclId] =
                    [h_sa7PL ds5_sa7PS] \u []
                        case ds5_sa7PS of wild1_sa7PU {
                          GHC.Base.Nothing ->
                              case h_sa7PL of {
                                GHC.IO.Handle.Types.FileHandle path_sa7PW [Occ=Once]
                                                               _ [Occ=Dead] ->
                                    GHC.Base.Just [path_sa7PW];
                                GHC.IO.Handle.Types.DuplexHandle path_sa7PY [Occ=Once]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead] ->
                                    GHC.Base.Just [path_sa7PY];
                              };
                          GHC.Base.Just _ [Occ=Dead] -> wild1_sa7PU;
                        }; } in
              let {
                sat_sa7PT [Occ=Once] :: GHC.Base.Maybe GHC.IO.Handle.Types.Handle
                [LclId] =
                    CCCS GHC.Base.Just! [h_sa7PL];
              } in 
                GHC.IO.Exception.IOError [sat_sa7PT
                                          ds1_sa7PO
                                          fun_sa7PK
                                          ds3_sa7PQ
                                          ds4_sa7PR
                                          sat_sa7Q2];
        };

GHC.IO.Handle.Internals.wantReadableHandle14 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "handle is closed"#;

GHC.IO.Handle.Internals.wantReadableHandle13 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Handle.Internals.wantReadableHandle14;

GHC.IO.Handle.Internals.wantReadableHandle12
  :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.IllegalOperation
                                             GHC.Types.[]
                                             GHC.IO.Handle.Internals.wantReadableHandle13
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Handle.Internals.wantReadableHandle11
  :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Handle.Internals.wantReadableHandle12;

GHC.IO.Handle.Internals.ioe_closedHandle1
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_sa7Q3]
        raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle11 eta_sa7Q3];

ioe_closedHandle2_ra7Pb
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_sa7Q4]
        raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle11 eta_sa7Q4];

GHC.IO.Handle.Internals.ioe_closedHandle
  :: forall a. GHC.Types.IO a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_B1] ioe_closedHandle2_ra7Pb eta_B1;

GHC.IO.Handle.Internals.wantReadableHandle10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "handle is semi-closed"#;

GHC.IO.Handle.Internals.wantReadableHandle9 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Handle.Internals.wantReadableHandle10;

GHC.IO.Handle.Internals.wantReadableHandle8
  :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.IllegalOperation
                                             GHC.Types.[]
                                             GHC.IO.Handle.Internals.wantReadableHandle9
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Handle.Internals.wantReadableHandle7
  :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Handle.Internals.wantReadableHandle8;

GHC.IO.Handle.Internals.ioe_semiclosedHandle1
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_sa7Q5]
        raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle7 eta_sa7Q5];

ioe_semiclosedHandle2_ra7Pc
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_sa7Q6]
        raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle7 eta_sa7Q6];

GHC.IO.Handle.Internals.ioe_semiclosedHandle
  :: forall a. GHC.Types.IO a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_B1] ioe_semiclosedHandle2_ra7Pc eta_B1;

GHC.IO.Handle.Internals.hLookAhead_4
  :: GHC.IO.Exception.IOException
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.EOF
                                             GHC.Types.[]
                                             GHC.Types.[]
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Handle.Internals.hLookAhead_3 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Handle.Internals.hLookAhead_4;

GHC.IO.Handle.Internals.ioe_EOF1
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_sa7Q7]
        raiseIO# [GHC.IO.Handle.Internals.hLookAhead_3 eta_sa7Q7];

ioe_EOF2_ra7Pd
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_sa7Q8]
        raiseIO# [GHC.IO.Handle.Internals.hLookAhead_3 eta_sa7Q8];

GHC.IO.Handle.Internals.ioe_EOF :: forall a. GHC.Types.IO a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_B1] ioe_EOF2_ra7Pd eta_B1;

GHC.IO.Handle.Internals.wantReadableHandle6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "handle is not open for reading"#;

GHC.IO.Handle.Internals.wantReadableHandle5 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Handle.Internals.wantReadableHandle6;

GHC.IO.Handle.Internals.wantReadableHandle4
  :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.IllegalOperation
                                             GHC.Types.[]
                                             GHC.IO.Handle.Internals.wantReadableHandle5
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Handle.Internals.wantReadableHandle3
  :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Handle.Internals.wantReadableHandle4;

GHC.IO.Handle.Internals.ioe_notReadable1
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_sa7Q9]
        raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle3 eta_sa7Q9];

ioe_notReadable2_ra7Pe
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_sa7Qa]
        raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle3 eta_sa7Qa];

GHC.IO.Handle.Internals.ioe_notReadable :: forall a. GHC.Types.IO a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_B1] ioe_notReadable2_ra7Pe eta_B1;

GHC.IO.Handle.Internals.wantWritableHandle5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "handle is not open for writing"#;

GHC.IO.Handle.Internals.wantWritableHandle4 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Handle.Internals.wantWritableHandle5;

GHC.IO.Handle.Internals.wantWritableHandle3
  :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.IllegalOperation
                                             GHC.Types.[]
                                             GHC.IO.Handle.Internals.wantWritableHandle4
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Handle.Internals.wantWritableHandle2
  :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Handle.Internals.wantWritableHandle3;

GHC.IO.Handle.Internals.ioe_notWritable1
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_sa7Qb]
        raiseIO# [GHC.IO.Handle.Internals.wantWritableHandle2 eta_sa7Qb];

ioe_notWritable2_ra7Pf
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_sa7Qc]
        raiseIO# [GHC.IO.Handle.Internals.wantWritableHandle2 eta_sa7Qc];

GHC.IO.Handle.Internals.ioe_notWritable :: forall a. GHC.Types.IO a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_B1] ioe_notWritable2_ra7Pf eta_B1;

GHC.IO.Handle.Internals.wantSeekableHandle6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "handle is not seekable"#;

GHC.IO.Handle.Internals.wantSeekableHandle5 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Handle.Internals.wantSeekableHandle6;

GHC.IO.Handle.Internals.wantSeekableHandle4
  :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.IllegalOperation
                                             GHC.Types.[]
                                             GHC.IO.Handle.Internals.wantSeekableHandle5
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Handle.Internals.wantSeekableHandle3
  :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Handle.Internals.wantSeekableHandle4;

GHC.IO.Handle.Internals.flushBuffer6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "cannot flush the read buffer: underlying device is not seekable"#;

GHC.IO.Handle.Internals.flushBuffer5 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Internals.flushBuffer6;

GHC.IO.Handle.Internals.flushBuffer4
  :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.IllegalOperation
                                             GHC.Types.[]
                                             GHC.IO.Handle.Internals.flushBuffer5
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Handle.Internals.flushBuffer3 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Handle.Internals.flushBuffer4;

lvl_ra7Pg :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hSetBuffering"#;

lvl1_ra7Ph :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl_ra7Pg;

lvl2_ra7Pi :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "illegal buffer size "#;

GHC.IO.Handle.Internals.$wioe_bufsiz [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    [] \r [ww_sa7Qd w_sa7Qe]
        let {
          sat_sa7Ql [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [ww_sa7Qd] \u []
                  let {
                    sat_sa7Qj [Occ=Once] :: GHC.Base.String
                    [LclId] =
                        [ww_sa7Qd] \u []
                            let {
                              sat_sa7Qi [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [ww_sa7Qd] \u []
                                      case GHC.Show.$wshowSignedInt 9# ww_sa7Qd GHC.Types.[] of {
                                        (#,#) ww5_sa7Qg [Occ=Once] ww6_sa7Qh [Occ=Once] ->
                                            : [ww5_sa7Qg ww6_sa7Qh];
                                      };
                            } in  GHC.CString.unpackAppendCString# lvl2_ra7Pi sat_sa7Qi; } in
                  let {
                    sat_sa7Qk [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        CCCS GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                                        GHC.IO.Exception.InvalidArgument
                                                        lvl1_ra7Ph
                                                        sat_sa7Qj
                                                        GHC.Base.Nothing
                                                        GHC.Base.Nothing];
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sa7Qk;
        } in  raiseIO# [sat_sa7Ql w_sa7Qe];

GHC.IO.Handle.Internals.ioe_bufsiz1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<B,1*U(U)><B,U>x, Unf=OtherCon []] =
    [] \r [w_sa7Qm w1_sa7Qn]
        case w_sa7Qm of {
          GHC.Types.I# ww1_sa7Qp [Occ=Once] ->
              GHC.IO.Handle.Internals.$wioe_bufsiz ww1_sa7Qp w1_sa7Qn;
        };

GHC.IO.Handle.Internals.ioe_bufsiz
  :: forall a. GHC.Types.Int -> GHC.Types.IO a
[GblId, Arity=2, Str=<B,1*U(U)><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.IO.Handle.Internals.ioe_bufsiz1 eta_B2 eta_B1;

GHC.IO.Handle.Internals.$wstreamEncode [InlPrag=NOUSERINLINE[0]]
  :: forall from to state.
     GHC.IO.Encoding.Types.CodeBuffer from to
     -> (GHC.IO.Buffer.Buffer from
         -> GHC.IO.Buffer.Buffer to
         -> GHC.Types.IO
              (GHC.IO.Buffer.Buffer from, GHC.IO.Buffer.Buffer to))
     -> GHC.IO.Buffer.Buffer from
     -> GHC.IO.Buffer.Buffer to
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Buffer.Buffer from, GHC.IO.Buffer.Buffer to) #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<C(C(C(S(SS(SLL))))),C(C1(C1(U(U,1*U(1*U,U(U,U,U,U,U,U),U)))))><L,C(C1(C1(U(U,1*U(U(U,U,U,U,U,U),U)))))><L,U(U,U,U,U,U,U)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_sa7Qq ww1_sa7Qr w_sa7Qs w1_sa7Qt w2_sa7Qu]
        let-no-escape {
          go_sa7Qv [Occ=LoopBreakerT[3]]
            :: GHC.IO.Buffer.Buffer from_sa738
               -> GHC.IO.Buffer.Buffer to_sa739
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     (GHC.IO.Buffer.Buffer from_sa738, GHC.IO.Buffer.Buffer to_sa739) #)
          [LclId[JoinId(3)],
           Arity=3,
           Str=<L,U(U,U,U,U,U,U)><L,U><S,U>,
           Unf=OtherCon []] =
              sat-only [ww_sa7Qq ww1_sa7Qr go_sa7Qv] \r [from1_sa7Qw
                                                         to1_sa7Qx
                                                         s_sa7Qy]
                  case ww_sa7Qq from1_sa7Qw to1_sa7Qx s_sa7Qy of {
                    (#,#) ipv_sa7QA [Occ=Once*] ipv1_sa7QB [Occ=Once!] ->
                        case ipv1_sa7QB of {
                          (,,) why_sa7QD [Occ=Once!]
                               from'_sa7QE [Occ=Once*]
                               to'_sa7QF [Occ=Once*] ->
                              case why_sa7QD of {
                                __DEFAULT ->
                                    let {
                                      sat_sa7QH [Occ=Once]
                                        :: (GHC.IO.Buffer.Buffer from_sa738,
                                            GHC.IO.Buffer.Buffer to_sa739)
                                      [LclId] =
                                          CCCS (,)! [from'_sa7QE to'_sa7QF];
                                    } in  (#,#) [ipv_sa7QA sat_sa7QH];
                                GHC.IO.Encoding.Types.InvalidSequence ->
                                    case from1_sa7Qw of {
                                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           dt3_sa7QN [Occ=Once]
                                                           _ [Occ=Dead] ->
                                          case from'_sa7QE of wild3_sa7QP {
                                            GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 dt10_sa7QU [Occ=Once]
                                                                 _ [Occ=Dead] ->
                                                case ==# [dt3_sa7QN dt10_sa7QU] of {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_sa7QX [Occ=Once]
                                                          :: (GHC.IO.Buffer.Buffer from_sa738,
                                                              GHC.IO.Buffer.Buffer to_sa739)
                                                        [LclId] =
                                                            CCCS (,)! [wild3_sa7QP to'_sa7QF];
                                                      } in  (#,#) [ipv_sa7QA sat_sa7QX];
                                                  1# ->
                                                      case
                                                          ww1_sa7Qr wild3_sa7QP to'_sa7QF ipv_sa7QA
                                                      of
                                                      { (#,#) ipv2_sa7QZ [Occ=Once]
                                                              ipv3_sa7R0 [Occ=Once!] ->
                                                            case ipv3_sa7R0 of {
                                                              (,) from'1_sa7R2 [Occ=Once]
                                                                  to'1_sa7R3 [Occ=Once] ->
                                                                  go_sa7Qv
                                                                      from'1_sa7R2
                                                                      to'1_sa7R3
                                                                      ipv2_sa7QZ;
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
                  };
        } in  go_sa7Qv w_sa7Qs w1_sa7Qt w2_sa7Qu;

GHC.IO.Handle.Internals.dEFAULT_CHAR_BUFFER_SIZE :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [2048#];

GHC.IO.Handle.Internals.initBufferState
  :: GHC.IO.Handle.Types.HandleType -> GHC.IO.Buffer.BufferState
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_sa7R4]
        case ds_sa7R4 of {
          __DEFAULT -> GHC.IO.Buffer.WriteBuffer [];
          GHC.IO.Handle.Types.ReadHandle -> GHC.IO.Buffer.ReadBuffer [];
        };

lvl3_ra7Pj
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Buffer.CharBuffer #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [s_sa7R6]
        case noDuplicate# [s_sa7R6] of s'_sa7R7 {
          __DEFAULT ->
              case newMutVar# [GHC.ForeignPtr.NoFinalizers s'_sa7R7] of {
                (#,#) ipv_sa7R9 [Occ=Once] ipv1_sa7Ra [Occ=Once] ->
                    case newPinnedByteArray# [4# ipv_sa7R9] of {
                      (#,#) ipv2_sa7Rc [Occ=Once] ipv3_sa7Rd ->
                          let {
                            sat_sa7Rf [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                            [LclId] =
                                CCCS GHC.ForeignPtr.MallocPtr! [ipv3_sa7Rd ipv1_sa7Ra];
                          } in 
                            case byteArrayContents# [ipv3_sa7Rd] of sat_sa7Re {
                              __DEFAULT ->
                                  let {
                                    sat_sa7Rg [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                    [LclId] =
                                        CCCS GHC.IO.Buffer.Buffer! [sat_sa7Re
                                                                    sat_sa7Rf
                                                                    GHC.IO.Buffer.ReadBuffer
                                                                    1#
                                                                    0#
                                                                    0#];
                                  } in  (#,#) [ipv2_sa7Rc sat_sa7Rg];
                            };
                    };
              };
        };

GHC.IO.Handle.Internals.noCharBuffer [InlPrag=NOINLINE]
  :: GHC.IO.Buffer.CharBuffer
[GblId] =
    [] \u []
        case lvl3_ra7Pj GHC.Prim.realWorld# of {
          (#,#) _ [Occ=Dead] ipv1_sa7Rj [Occ=Once] -> ipv1_sa7Rj;
        };

lvl4_ra7Pk
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Buffer.Buffer GHC.Word.Word8 #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [s_sa7Rk]
        case noDuplicate# [s_sa7Rk] of s'_sa7Rl {
          __DEFAULT ->
              case newMutVar# [GHC.ForeignPtr.NoFinalizers s'_sa7Rl] of {
                (#,#) ipv_sa7Rn [Occ=Once] ipv1_sa7Ro [Occ=Once] ->
                    case newPinnedByteArray# [1# ipv_sa7Rn] of {
                      (#,#) ipv2_sa7Rq [Occ=Once] ipv3_sa7Rr ->
                          let {
                            sat_sa7Rt [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                            [LclId] =
                                CCCS GHC.ForeignPtr.MallocPtr! [ipv3_sa7Rr ipv1_sa7Ro];
                          } in 
                            case byteArrayContents# [ipv3_sa7Rr] of sat_sa7Rs {
                              __DEFAULT ->
                                  let {
                                    sat_sa7Ru [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                    [LclId] =
                                        CCCS GHC.IO.Buffer.Buffer! [sat_sa7Rs
                                                                    sat_sa7Rt
                                                                    GHC.IO.Buffer.ReadBuffer
                                                                    1#
                                                                    0#
                                                                    0#];
                                  } in  (#,#) [ipv2_sa7Rq sat_sa7Ru];
                            };
                    };
              };
        };

GHC.IO.Handle.Internals.noByteBuffer [InlPrag=NOINLINE]
  :: GHC.IO.Buffer.Buffer GHC.Word.Word8
[GblId] =
    [] \u []
        case lvl4_ra7Pk GHC.Prim.realWorld# of {
          (#,#) _ [Occ=Dead] ipv1_sa7Rx [Occ=Once] -> ipv1_sa7Rx;
        };

GHC.IO.Handle.Internals.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.Handle.Internals.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Internals.$trModule4];

GHC.IO.Handle.Internals.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Handle.Internals"#;

GHC.IO.Handle.Internals.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Internals.$trModule2];

GHC.IO.Handle.Internals.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Handle.Internals.$trModule3
                                     GHC.IO.Handle.Internals.$trModule1];

lvl5_ra7Pl :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "handle is finalized"#;

lvl6_ra7Pm :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl5_ra7Pl;

GHC.IO.Handle.Internals.ioe_finalizedHandle
  :: GHC.IO.FilePath -> GHC.IO.Handle.Types.Handle__
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [fp_sa7Ry]
        let {
          sat_sa7Rz [Occ=Once] :: GHC.Base.Maybe GHC.IO.FilePath
          [LclId] =
              CCCS GHC.Base.Just! [fp_sa7Ry]; } in
        let {
          sat_sa7RA [Occ=Once] :: GHC.IO.Exception.IOException
          [LclId] =
              CCCS GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                              GHC.IO.Exception.IllegalOperation
                                              GHC.Types.[]
                                              lvl6_ra7Pm
                                              GHC.Base.Nothing
                                              sat_sa7Rz];
        } in 
          GHC.Exception.throw
              GHC.IO.Exception.$fExceptionIOException sat_sa7RA;

GHC.IO.Handle.Internals.closeTextCodecs1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_sa7RB eta_sa7RC]
        case ds_sa7RB of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds4_sa7RO [Occ=Once*!]
                                       ds5_sa7RP [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds5_sa7RP of {
                GHC.Base.Nothing ->
                    case ds4_sa7RO of {
                      GHC.Base.Nothing -> (#,#) [eta_sa7RC GHC.Tuple.()];
                      GHC.Base.Just d_sa7RW [Occ=Once!] ->
                          case d_sa7RW of {
                            GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                              _ [Occ=Dead]
                                                              ds12_sa7S0 [Occ=Once]
                                                              _ [Occ=Dead]
                                                              _ [Occ=Dead] ->
                                ds12_sa7S0 eta_sa7RC;
                          };
                    };
                GHC.Base.Just d_sa7S3 [Occ=Once!] ->
                    case d_sa7S3 of {
                      GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                        _ [Occ=Dead]
                                                        ds12_sa7S7 [Occ=Once]
                                                        _ [Occ=Dead]
                                                        _ [Occ=Dead] ->
                          case ds12_sa7S7 eta_sa7RC of {
                            (#,#) ipv_sa7Sb [Occ=Once*] _ [Occ=Dead] ->
                                case ds4_sa7RO of {
                                  GHC.Base.Nothing -> (#,#) [ipv_sa7Sb GHC.Tuple.()];
                                  GHC.Base.Just d1_sa7Se [Occ=Once!] ->
                                      case d1_sa7Se of {
                                        GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                          _ [Occ=Dead]
                                                                          ds18_sa7Si [Occ=Once]
                                                                          _ [Occ=Dead]
                                                                          _ [Occ=Dead] ->
                                            ds18_sa7Si ipv_sa7Sb;
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.closeTextCodecs
  :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.IO.Handle.Internals.closeTextCodecs1 eta_B2 eta_B1;

GHC.IO.Handle.Internals.openTextEncoding1
  :: forall a.
     GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.HandleType
     -> (forall es ds.
         GHC.Base.Maybe (GHC.IO.Encoding.Types.TextEncoder es)
         -> GHC.Base.Maybe (GHC.IO.Encoding.Types.TextDecoder ds)
         -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U><L,1*C1(C1(C1(U(U,U))))><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_sa7Sl ha_type_sa7Sm cont_sa7Sn eta_sa7So]
        case ds_sa7Sl of {
          GHC.Base.Nothing ->
              cont_sa7Sn GHC.Base.Nothing GHC.Base.Nothing eta_sa7So;
          GHC.Base.Just ds1_sa7Sq [Occ=Once!] ->
              case ds1_sa7Sq of {
                GHC.IO.Encoding.Types.TextEncoding _ [Occ=Dead]
                                                   ds3_sa7St [Occ=Once*]
                                                   ds4_sa7Su [Occ=Once*] ->
                    let-no-escape {
                      $j_sa7Sv [Occ=Once*!T[2], Dmd=<L,1*C1(C1(U(U,U)))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> GHC.Base.Maybe (GHC.IO.Encoding.Types.TextDecoder dstate_aa436)
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa430 #)
                      [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
                          sat-only [ha_type_sa7Sm cont_sa7Sn ds4_sa7Su] \r [ipv_sa7Sw
                                                                            ipv1_sa7Sx]
                              case ha_type_sa7Sm of {
                                __DEFAULT -> cont_sa7Sn GHC.Base.Nothing ipv1_sa7Sx ipv_sa7Sw;
                                GHC.IO.Handle.Types.WriteHandle ->
                                    case ds4_sa7Su ipv_sa7Sw of {
                                      (#,#) ipv2_sa7SA [Occ=Once] ipv3_sa7SB [Occ=Once] ->
                                          let {
                                            sat_sa7SC [Occ=Once]
                                              :: GHC.Base.Maybe
                                                   (GHC.IO.Encoding.Types.TextEncoder estate_aa437)
                                            [LclId] =
                                                CCCS GHC.Base.Just! [ipv3_sa7SB];
                                          } in  cont_sa7Sn sat_sa7SC ipv1_sa7Sx ipv2_sa7SA;
                                    };
                                GHC.IO.Handle.Types.AppendHandle ->
                                    case ds4_sa7Su ipv_sa7Sw of {
                                      (#,#) ipv2_sa7SE [Occ=Once] ipv3_sa7SF [Occ=Once] ->
                                          let {
                                            sat_sa7SG [Occ=Once]
                                              :: GHC.Base.Maybe
                                                   (GHC.IO.Encoding.Types.TextEncoder estate_aa437)
                                            [LclId] =
                                                CCCS GHC.Base.Just! [ipv3_sa7SF];
                                          } in  cont_sa7Sn sat_sa7SG ipv1_sa7Sx ipv2_sa7SE;
                                    };
                                GHC.IO.Handle.Types.ReadWriteHandle ->
                                    case ds4_sa7Su ipv_sa7Sw of {
                                      (#,#) ipv2_sa7SI [Occ=Once] ipv3_sa7SJ [Occ=Once] ->
                                          let {
                                            sat_sa7SK [Occ=Once]
                                              :: GHC.Base.Maybe
                                                   (GHC.IO.Encoding.Types.TextEncoder estate_aa437)
                                            [LclId] =
                                                CCCS GHC.Base.Just! [ipv3_sa7SJ];
                                          } in  cont_sa7Sn sat_sa7SK ipv1_sa7Sx ipv2_sa7SI;
                                    };
                              };
                    } in 
                      case ha_type_sa7Sm of {
                        __DEFAULT -> $j_sa7Sv eta_sa7So GHC.Base.Nothing;
                        GHC.IO.Handle.Types.ReadHandle ->
                            case ds3_sa7St eta_sa7So of {
                              (#,#) ipv_sa7SN [Occ=Once] ipv1_sa7SO [Occ=Once] ->
                                  let {
                                    sat_sa7SP [Occ=Once]
                                      :: GHC.Base.Maybe
                                           (GHC.IO.Encoding.Types.TextDecoder dstate_aa436)
                                    [LclId] =
                                        CCCS GHC.Base.Just! [ipv1_sa7SO];
                                  } in  $j_sa7Sv ipv_sa7SN sat_sa7SP;
                            };
                        GHC.IO.Handle.Types.ReadWriteHandle ->
                            case ds3_sa7St eta_sa7So of {
                              (#,#) ipv_sa7SR [Occ=Once] ipv1_sa7SS [Occ=Once] ->
                                  let {
                                    sat_sa7ST [Occ=Once]
                                      :: GHC.Base.Maybe
                                           (GHC.IO.Encoding.Types.TextDecoder dstate_aa436)
                                    [LclId] =
                                        CCCS GHC.Base.Just! [ipv1_sa7SS];
                                  } in  $j_sa7Sv ipv_sa7SR sat_sa7ST;
                            };
                      };
              };
        };

GHC.IO.Handle.Internals.openTextEncoding
  :: forall a.
     GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.HandleType
     -> (forall es ds.
         GHC.Base.Maybe (GHC.IO.Encoding.Types.TextEncoder es)
         -> GHC.Base.Maybe (GHC.IO.Encoding.Types.TextDecoder ds)
         -> GHC.Types.IO a)
     -> GHC.Types.IO a
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U><L,1*C1(C1(C1(U(U,U))))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.Internals.openTextEncoding1
            eta_B4 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.Internals.flushByteWriteBuffer1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [h__sa7SU eta_sa7SV]
        case h__sa7SU of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       $dBufferedIO_sa7SY [Occ=Once]
                                       _ [Occ=Dead]
                                       ds_sa7T0 [Occ=Once]
                                       _ [Occ=Dead]
                                       dt_sa7T2
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt_sa7T2 eta_sa7SV] of {
                (#,#) ipv_sa7Te [Occ=Once*] ipv1_sa7Tf [Occ=Once!] ->
                    case ipv1_sa7Tf of wild1_sa7Tg {
                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           dt7_sa7Tl [Occ=Once]
                                           dt8_sa7Tm [Occ=Once] ->
                          case ==# [dt7_sa7Tl dt8_sa7Tm] of {
                            __DEFAULT ->
                                case
                                    GHC.IO.BufferedIO.flushWriteBuffer
                                        $dBufferedIO_sa7SY ds_sa7T0 wild1_sa7Tg ipv_sa7Te
                                of
                                { (#,#) ipv2_sa7Tp [Occ=Once] ipv3_sa7Tq [Occ=Once] ->
                                      case
                                          writeMutVar# [dt_sa7T2 ipv3_sa7Tq ipv2_sa7Tp]
                                      of
                                      s2#_sa7Tr
                                      { __DEFAULT -> (#,#) [s2#_sa7Tr GHC.Tuple.()];
                                      };
                                };
                            1# -> (#,#) [ipv_sa7Te GHC.Tuple.()];
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.flushByteWriteBuffer
  :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.IO.Handle.Internals.flushByteWriteBuffer1 eta_B2 eta_B1;

GHC.IO.Handle.Internals.flushWriteBuffer1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [h__sa7Ts eta_sa7Tt]
        case h__sa7Ts of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       $dBufferedIO_sa7Tw [Occ=Once]
                                       _ [Occ=Dead]
                                       ds_sa7Ty [Occ=Once]
                                       _ [Occ=Dead]
                                       dt_sa7TA
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt_sa7TA eta_sa7Tt] of {
                (#,#) ipv_sa7TM [Occ=Once*] ipv1_sa7TN [Occ=Once!] ->
                    case ipv1_sa7TN of {
                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           ds10_sa7TR [Occ=Once!]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
                          case ds10_sa7TR of {
                            GHC.IO.Buffer.ReadBuffer -> (#,#) [ipv_sa7TM GHC.Tuple.()];
                            GHC.IO.Buffer.WriteBuffer ->
                                case readMutVar# [dt_sa7TA ipv_sa7TM] of {
                                  (#,#) ipv2_sa7TX [Occ=Once*] ipv3_sa7TY [Occ=Once!] ->
                                      case ipv3_sa7TY of wild3_sa7TZ {
                                        GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             dt12_sa7U4 [Occ=Once]
                                                             dt13_sa7U5 [Occ=Once] ->
                                            case ==# [dt12_sa7U4 dt13_sa7U5] of {
                                              __DEFAULT ->
                                                  case
                                                      GHC.IO.BufferedIO.flushWriteBuffer
                                                          $dBufferedIO_sa7Tw
                                                          ds_sa7Ty
                                                          wild3_sa7TZ
                                                          ipv2_sa7TX
                                                  of
                                                  { (#,#) ipv4_sa7U8 [Occ=Once]
                                                          ipv5_sa7U9 [Occ=Once] ->
                                                        case
                                                            writeMutVar# [dt_sa7TA
                                                                          ipv5_sa7U9
                                                                          ipv4_sa7U8]
                                                        of
                                                        s2#_sa7Ua
                                                        { __DEFAULT ->
                                                              (#,#) [s2#_sa7Ua GHC.Tuple.()];
                                                        };
                                                  };
                                              1# -> (#,#) [ipv2_sa7TX GHC.Tuple.()];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.flushWriteBuffer
  :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.IO.Handle.Internals.flushWriteBuffer1 eta_B2 eta_B1;

lvl7_ra7Pn :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "codec_state"#;

GHC.IO.Handle.Internals.decodeByteBuf2
  :: forall dec_state. dec_state
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl7_ra7Pn of sat_sa7Ub {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sa7Ub;
        };

GHC.IO.Handle.Internals.decodeByteBuf1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Buffer.CharBuffer #)
[GblId,
 Arity=3,
 Str=<S,1*U><L,U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [h__sa7Uc cbuf_sa7Ud eta_sa7Ue]
        case h__sa7Uc of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       dt_sa7Ul
                                       _ [Occ=Dead]
                                       dt1_sa7Un [Occ=Once*]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds4_sa7Ur [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt_sa7Ul eta_sa7Ue] of {
                (#,#) ipv_sa7Ux [Occ=Once*] ipv1_sa7Uy ->
                    case ds4_sa7Ur of {
                      GHC.Base.Nothing ->
                          let {
                            sat_sa7UA [Occ=Once]
                              :: (dec_state_aa47A, GHC.IO.Buffer.Buffer GHC.Word.Word8)
                            [LclId] =
                                CCCS (,)! [GHC.IO.Handle.Internals.decodeByteBuf2 ipv1_sa7Uy];
                          } in 
                            case writeMutVar# [dt1_sa7Un sat_sa7UA ipv_sa7Ux] of s2#_sa7UB {
                              __DEFAULT ->
                                  case
                                      GHC.IO.Encoding.Latin1.latin5 ipv1_sa7Uy cbuf_sa7Ud s2#_sa7UB
                                  of
                                  { (#,#) ipv2_sa7UD [Occ=Once] ipv3_sa7UE [Occ=Once!] ->
                                        case ipv3_sa7UE of {
                                          (,,) _ [Occ=Dead]
                                               input'_sa7UH [Occ=Once]
                                               output'_sa7UI [Occ=Once] ->
                                              case
                                                  writeMutVar# [dt_sa7Ul input'_sa7UH ipv2_sa7UD]
                                              of
                                              s2#1_sa7UJ
                                              { __DEFAULT -> (#,#) [s2#1_sa7UJ output'_sa7UI];
                                              };
                                        };
                                  };
                            };
                      GHC.Base.Just decoder_sa7UK [Occ=Once!] ->
                          case decoder_sa7UK of {
                            GHC.IO.Encoding.Types.BufferCodec ds10_sa7UM [Occ=Once]
                                                              ds11_sa7UN [Occ=Once]
                                                              _ [Occ=Dead]
                                                              ds13_sa7UP [Occ=Once]
                                                              _ [Occ=Dead] ->
                                case ds13_sa7UP ipv_sa7Ux of {
                                  (#,#) ipv2_sa7US [Occ=Once] ipv3_sa7UT [Occ=Once] ->
                                      let {
                                        sat_sa7UU [Occ=Once]
                                          :: (dec_state_aa47A, GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                        [LclId] =
                                            CCCS (,)! [ipv3_sa7UT ipv1_sa7Uy];
                                      } in 
                                        case
                                            writeMutVar# [dt1_sa7Un sat_sa7UU ipv2_sa7US]
                                        of
                                        s2#_sa7UV
                                        { __DEFAULT ->
                                              case
                                                  GHC.IO.Handle.Internals.$wstreamEncode
                                                      ds10_sa7UM
                                                      ds11_sa7UN
                                                      ipv1_sa7Uy
                                                      cbuf_sa7Ud
                                                      s2#_sa7UV
                                              of
                                              { (#,#) ipv4_sa7UX [Occ=Once]
                                                      ipv5_sa7UY [Occ=Once!] ->
                                                    case ipv5_sa7UY of {
                                                      (,) bbuf2_sa7V0 [Occ=Once]
                                                          cbuf'_sa7V1 [Occ=Once] ->
                                                          case
                                                              writeMutVar# [dt_sa7Ul
                                                                            bbuf2_sa7V0
                                                                            ipv4_sa7UX]
                                                          of
                                                          s2#1_sa7V2
                                                          { __DEFAULT ->
                                                                (#,#) [s2#1_sa7V2 cbuf'_sa7V1];
                                                          };
                                                    };
                                              };
                                        };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.decodeByteBuf
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Types.IO GHC.IO.Buffer.CharBuffer
[GblId,
 Arity=3,
 Str=<S,1*U><L,U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.Internals.decodeByteBuf1 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.Internals.readTextDeviceNonBlocking1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Buffer.CharBuffer #)
[GblId,
 Arity=3,
 Str=<S,1*U><L,U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [h__sa7V3 cbuf_sa7V4 eta_sa7V5]
        case h__sa7V3 of wild_sa7V6 {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       $dBufferedIO_sa7V8 [Occ=Once]
                                       _ [Occ=Dead]
                                       ds_sa7Va [Occ=Once]
                                       _ [Occ=Dead]
                                       dt_sa7Vc
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt_sa7Vc eta_sa7V5] of {
                (#,#) ipv_sa7Vo [Occ=Once*] ipv1_sa7Vp [Occ=Once!] ->
                    case ipv1_sa7Vp of wild1_sa7Vq {
                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           dt7_sa7Vv [Occ=Once]
                                           dt8_sa7Vw [Occ=Once] ->
                          case ==# [dt7_sa7Vv dt8_sa7Vw] of {
                            __DEFAULT ->
                                GHC.IO.Handle.Internals.decodeByteBuf1
                                    wild_sa7V6 cbuf_sa7V4 ipv_sa7Vo;
                            1# ->
                                case
                                    GHC.IO.BufferedIO.fillReadBuffer0
                                        $dBufferedIO_sa7V8 ds_sa7Va wild1_sa7Vq ipv_sa7Vo
                                of
                                { (#,#) ipv2_sa7Vz [Occ=Once*] ipv3_sa7VA [Occ=Once!] ->
                                      case ipv3_sa7VA of {
                                        (,) r_sa7VC [Occ=Once!] bbuf1_sa7VD [Occ=Once] ->
                                            case r_sa7VC of {
                                              GHC.Base.Nothing ->
                                                  raiseIO# [GHC.IO.Handle.Internals.hLookAhead_3
                                                            ipv2_sa7Vz];
                                              GHC.Base.Just _ [Occ=Dead] ->
                                                  case
                                                      writeMutVar# [dt_sa7Vc bbuf1_sa7VD ipv2_sa7Vz]
                                                  of
                                                  s2#_sa7VH
                                                  { __DEFAULT ->
                                                        GHC.IO.Handle.Internals.decodeByteBuf1
                                                            wild_sa7V6 cbuf_sa7V4 s2#_sa7VH;
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.readTextDeviceNonBlocking
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Types.IO GHC.IO.Buffer.CharBuffer
[GblId,
 Arity=3,
 Str=<S,1*U><L,U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.Internals.readTextDeviceNonBlocking1
            eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.Internals.wantReadableHandle2
  :: forall a.
     (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Str=<L,1*C1(C1(U(U,U)))><S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [act_sa7VI h__sa7VJ eta_sa7VK]
        case h__sa7VJ of wild_sa7VL {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       $dBufferedIO_sa7VN [Occ=Once]
                                       _ [Occ=Dead]
                                       ds_sa7VP [Occ=Once]
                                       ds1_sa7VQ [Occ=Once!]
                                       dt_sa7VR
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       dt2_sa7VU
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds1_sa7VQ of {
                GHC.IO.Handle.Types.ClosedHandle ->
                    raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle11 eta_sa7VK];
                GHC.IO.Handle.Types.SemiClosedHandle ->
                    raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle7 eta_sa7VK];
                GHC.IO.Handle.Types.ReadHandle -> act_sa7VI wild_sa7VL eta_sa7VK;
                GHC.IO.Handle.Types.WriteHandle ->
                    raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle3 eta_sa7VK];
                GHC.IO.Handle.Types.AppendHandle ->
                    raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle3 eta_sa7VK];
                GHC.IO.Handle.Types.ReadWriteHandle ->
                    case readMutVar# [dt_sa7VR eta_sa7VK] of {
                      (#,#) ipv_sa7W4 [Occ=Once*] ipv1_sa7W5 [Occ=Once!] ->
                          case ipv1_sa7W5 of {
                            GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 ds10_sa7W9 [Occ=Once!]
                                                 _ [Occ=Dead]
                                                 dt7_sa7Wb [Occ=Once]
                                                 dt8_sa7Wc [Occ=Once] ->
                                case ds10_sa7W9 of {
                                  GHC.IO.Buffer.ReadBuffer -> act_sa7VI wild_sa7VL ipv_sa7W4;
                                  GHC.IO.Buffer.WriteBuffer ->
                                      case ==# [dt7_sa7Wb dt8_sa7Wc] of {
                                        __DEFAULT ->
                                            case readMutVar# [dt_sa7VR ipv_sa7W4] of {
                                              (#,#) ipv2_sa7Wg [Occ=Once*] ipv3_sa7Wh [Occ=Once!] ->
                                                  case ipv3_sa7Wh of wild4_sa7Wi {
                                                    GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                         _ [Occ=Dead]
                                                                         _ [Occ=Dead]
                                                                         _ [Occ=Dead]
                                                                         dt12_sa7Wn [Occ=Once]
                                                                         dt13_sa7Wo [Occ=Once] ->
                                                        case ==# [dt12_sa7Wn dt13_sa7Wo] of {
                                                          __DEFAULT ->
                                                              case
                                                                  GHC.IO.BufferedIO.flushWriteBuffer
                                                                      $dBufferedIO_sa7VN
                                                                      ds_sa7VP
                                                                      wild4_sa7Wi
                                                                      ipv2_sa7Wg
                                                              of
                                                              { (#,#) ipv4_sa7Wr [Occ=Once]
                                                                      ipv5_sa7Ws [Occ=Once] ->
                                                                    case
                                                                        writeMutVar# [dt_sa7VR
                                                                                      ipv5_sa7Ws
                                                                                      ipv4_sa7Wr]
                                                                    of
                                                                    s2#_sa7Wt
                                                                    { __DEFAULT ->
                                                                          case
                                                                              readMutVar# [dt2_sa7VU
                                                                                           s2#_sa7Wt]
                                                                          of
                                                                          { (#,#) ipv6_sa7Wv [Occ=Once]
                                                                                  ipv7_sa7Ww [Occ=Once!] ->
                                                                                let {
                                                                                  sat_sa7WE [Occ=Once]
                                                                                    :: GHC.IO.Buffer.Buffer
                                                                                         GHC.IO.Buffer.CharBufElem
                                                                                  [LclId] =
                                                                                      [ipv7_sa7Ww] \u []
                                                                                          case
                                                                                              ipv7_sa7Ww
                                                                                          of
                                                                                          { GHC.IO.Buffer.Buffer dt14_sa7Wy [Occ=Once]
                                                                                                                 dt15_sa7Wz [Occ=Once]
                                                                                                                 _ [Occ=Dead]
                                                                                                                 dt16_sa7WB [Occ=Once]
                                                                                                                 dt17_sa7WC [Occ=Once]
                                                                                                                 dt18_sa7WD [Occ=Once] ->
                                                                                                GHC.IO.Buffer.Buffer [dt14_sa7Wy
                                                                                                                      dt15_sa7Wz
                                                                                                                      GHC.IO.Buffer.ReadBuffer
                                                                                                                      dt16_sa7WB
                                                                                                                      dt17_sa7WC
                                                                                                                      dt18_sa7WD];
                                                                                          };
                                                                                } in 
                                                                                  case
                                                                                      writeMutVar# [dt2_sa7VU
                                                                                                    sat_sa7WE
                                                                                                    ipv6_sa7Wv]
                                                                                  of
                                                                                  s2#1_sa7WF
                                                                                  { __DEFAULT ->
                                                                                        case
                                                                                            readMutVar# [dt_sa7VR
                                                                                                         s2#1_sa7WF]
                                                                                        of
                                                                                        { (#,#) ipv8_sa7WH [Occ=Once]
                                                                                                ipv9_sa7WI [Occ=Once!] ->
                                                                                              let {
                                                                                                sat_sa7WQ [Occ=Once]
                                                                                                  :: GHC.IO.Buffer.Buffer
                                                                                                       GHC.Word.Word8
                                                                                                [LclId] =
                                                                                                    [ipv9_sa7WI] \u []
                                                                                                        case
                                                                                                            ipv9_sa7WI
                                                                                                        of
                                                                                                        { GHC.IO.Buffer.Buffer dt14_sa7WK [Occ=Once]
                                                                                                                               dt15_sa7WL [Occ=Once]
                                                                                                                               _ [Occ=Dead]
                                                                                                                               dt16_sa7WN [Occ=Once]
                                                                                                                               dt17_sa7WO [Occ=Once]
                                                                                                                               dt18_sa7WP [Occ=Once] ->
                                                                                                              GHC.IO.Buffer.Buffer [dt14_sa7WK
                                                                                                                                    dt15_sa7WL
                                                                                                                                    GHC.IO.Buffer.ReadBuffer
                                                                                                                                    dt16_sa7WN
                                                                                                                                    dt17_sa7WO
                                                                                                                                    dt18_sa7WP];
                                                                                                        };
                                                                                              } in 
                                                                                                case
                                                                                                    writeMutVar# [dt_sa7VR
                                                                                                                  sat_sa7WQ
                                                                                                                  ipv8_sa7WH]
                                                                                                of
                                                                                                s2#2_sa7WR
                                                                                                { __DEFAULT ->
                                                                                                      act_sa7VI
                                                                                                          wild_sa7VL
                                                                                                          s2#2_sa7WR;
                                                                                                };
                                                                                        };
                                                                                  };
                                                                          };
                                                                    };
                                                              };
                                                          1# ->
                                                              case
                                                                  readMutVar# [dt2_sa7VU ipv2_sa7Wg]
                                                              of
                                                              { (#,#) ipv4_sa7WT [Occ=Once]
                                                                      ipv5_sa7WU [Occ=Once!] ->
                                                                    let {
                                                                      sat_sa7X2 [Occ=Once]
                                                                        :: GHC.IO.Buffer.Buffer
                                                                             GHC.IO.Buffer.CharBufElem
                                                                      [LclId] =
                                                                          [ipv5_sa7WU] \u []
                                                                              case ipv5_sa7WU of {
                                                                                GHC.IO.Buffer.Buffer dt14_sa7WW [Occ=Once]
                                                                                                     dt15_sa7WX [Occ=Once]
                                                                                                     _ [Occ=Dead]
                                                                                                     dt16_sa7WZ [Occ=Once]
                                                                                                     dt17_sa7X0 [Occ=Once]
                                                                                                     dt18_sa7X1 [Occ=Once] ->
                                                                                    GHC.IO.Buffer.Buffer [dt14_sa7WW
                                                                                                          dt15_sa7WX
                                                                                                          GHC.IO.Buffer.ReadBuffer
                                                                                                          dt16_sa7WZ
                                                                                                          dt17_sa7X0
                                                                                                          dt18_sa7X1];
                                                                              };
                                                                    } in 
                                                                      case
                                                                          writeMutVar# [dt2_sa7VU
                                                                                        sat_sa7X2
                                                                                        ipv4_sa7WT]
                                                                      of
                                                                      s2#_sa7X3
                                                                      { __DEFAULT ->
                                                                            case
                                                                                readMutVar# [dt_sa7VR
                                                                                             s2#_sa7X3]
                                                                            of
                                                                            { (#,#) ipv6_sa7X5 [Occ=Once]
                                                                                    ipv7_sa7X6 [Occ=Once!] ->
                                                                                  let {
                                                                                    sat_sa7Xe [Occ=Once]
                                                                                      :: GHC.IO.Buffer.Buffer
                                                                                           GHC.Word.Word8
                                                                                    [LclId] =
                                                                                        [ipv7_sa7X6] \u []
                                                                                            case
                                                                                                ipv7_sa7X6
                                                                                            of
                                                                                            { GHC.IO.Buffer.Buffer dt14_sa7X8 [Occ=Once]
                                                                                                                   dt15_sa7X9 [Occ=Once]
                                                                                                                   _ [Occ=Dead]
                                                                                                                   dt16_sa7Xb [Occ=Once]
                                                                                                                   dt17_sa7Xc [Occ=Once]
                                                                                                                   dt18_sa7Xd [Occ=Once] ->
                                                                                                  GHC.IO.Buffer.Buffer [dt14_sa7X8
                                                                                                                        dt15_sa7X9
                                                                                                                        GHC.IO.Buffer.ReadBuffer
                                                                                                                        dt16_sa7Xb
                                                                                                                        dt17_sa7Xc
                                                                                                                        dt18_sa7Xd];
                                                                                            };
                                                                                  } in 
                                                                                    case
                                                                                        writeMutVar# [dt_sa7VR
                                                                                                      sat_sa7Xe
                                                                                                      ipv6_sa7X5]
                                                                                    of
                                                                                    s2#1_sa7Xf
                                                                                    { __DEFAULT ->
                                                                                          act_sa7VI
                                                                                              wild_sa7VL
                                                                                              s2#1_sa7Xf;
                                                                                    };
                                                                            };
                                                                      };
                                                              };
                                                        };
                                                  };
                                            };
                                        1# ->
                                            case readMutVar# [dt2_sa7VU ipv_sa7W4] of {
                                              (#,#) ipv2_sa7Xh [Occ=Once] ipv3_sa7Xi [Occ=Once!] ->
                                                  let {
                                                    sat_sa7Xq [Occ=Once]
                                                      :: GHC.IO.Buffer.Buffer
                                                           GHC.IO.Buffer.CharBufElem
                                                    [LclId] =
                                                        [ipv3_sa7Xi] \u []
                                                            case ipv3_sa7Xi of {
                                                              GHC.IO.Buffer.Buffer dt9_sa7Xk [Occ=Once]
                                                                                   dt10_sa7Xl [Occ=Once]
                                                                                   _ [Occ=Dead]
                                                                                   dt11_sa7Xn [Occ=Once]
                                                                                   dt12_sa7Xo [Occ=Once]
                                                                                   dt13_sa7Xp [Occ=Once] ->
                                                                  GHC.IO.Buffer.Buffer [dt9_sa7Xk
                                                                                        dt10_sa7Xl
                                                                                        GHC.IO.Buffer.ReadBuffer
                                                                                        dt11_sa7Xn
                                                                                        dt12_sa7Xo
                                                                                        dt13_sa7Xp];
                                                            };
                                                  } in 
                                                    case
                                                        writeMutVar# [dt2_sa7VU
                                                                      sat_sa7Xq
                                                                      ipv2_sa7Xh]
                                                    of
                                                    s2#_sa7Xr
                                                    { __DEFAULT ->
                                                          case readMutVar# [dt_sa7VR s2#_sa7Xr] of {
                                                            (#,#) ipv4_sa7Xt [Occ=Once]
                                                                  ipv5_sa7Xu [Occ=Once!] ->
                                                                let {
                                                                  sat_sa7XC [Occ=Once]
                                                                    :: GHC.IO.Buffer.Buffer
                                                                         GHC.Word.Word8
                                                                  [LclId] =
                                                                      [ipv5_sa7Xu] \u []
                                                                          case ipv5_sa7Xu of {
                                                                            GHC.IO.Buffer.Buffer dt9_sa7Xw [Occ=Once]
                                                                                                 dt10_sa7Xx [Occ=Once]
                                                                                                 _ [Occ=Dead]
                                                                                                 dt11_sa7Xz [Occ=Once]
                                                                                                 dt12_sa7XA [Occ=Once]
                                                                                                 dt13_sa7XB [Occ=Once] ->
                                                                                GHC.IO.Buffer.Buffer [dt9_sa7Xw
                                                                                                      dt10_sa7Xx
                                                                                                      GHC.IO.Buffer.ReadBuffer
                                                                                                      dt11_sa7Xz
                                                                                                      dt12_sa7XA
                                                                                                      dt13_sa7XB];
                                                                          };
                                                                } in 
                                                                  case
                                                                      writeMutVar# [dt_sa7VR
                                                                                    sat_sa7XC
                                                                                    ipv4_sa7Xt]
                                                                  of
                                                                  s2#1_sa7XD
                                                                  { __DEFAULT ->
                                                                        act_sa7VI
                                                                            wild_sa7VL s2#1_sa7XD;
                                                                  };
                                                          };
                                                    };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

lvl8_ra7Po :: GHC.IO.Handle.Types.BufferMode
[GblId, Caf=NoCafRefs, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.BlockBuffering! [GHC.Base.Nothing];

GHC.IO.Handle.Internals.mkDuplexHandle5
  :: forall dev.
     (GHC.IO.Device.IODevice dev, GHC.IO.BufferedIO.BufferedIO dev,
      Data.Typeable.Internal.Typeable dev) =>
     dev
     -> GHC.IO.FilePath
     -> GHC.IO.Handle.Types.HandleType
     -> GHC.Types.Bool
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.NewlineMode
     -> GHC.Base.Maybe GHC.IO.Handle.Internals.HandleFinalizer
     -> GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId,
 Arity=12,
 Str=<L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U)><L,U><L,U><L,U><L,U><L,1*U><S,U><L,U(1*U,1*U)><L,1*U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [$dIODevice_sa7XE
           $dBufferedIO_sa7XF
           $dTypeable_sa7XG
           dev1_sa7XH
           filepath_sa7XI
           ha_type_sa7XJ
           buffered_sa7XK
           mb_codec_sa7XL
           nl_sa7XM
           finalizer_sa7XN
           other_side_sa7XO
           eta_sa7XP]
        let-no-escape {
          cont_sa7XQ [Occ=Once*!T[5], Dmd=<L,1*C1(C1(C1(U(U,U))))>]
            :: forall es ds.
               GHC.Base.Maybe (GHC.IO.Encoding.Types.TextEncoder es)
               -> GHC.Base.Maybe (GHC.IO.Encoding.Types.TextDecoder ds)
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     GHC.IO.Handle.Types.Handle #)
          [LclId[JoinId(5)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
              sat-only [$dIODevice_sa7XE
                        $dBufferedIO_sa7XF
                        $dTypeable_sa7XG
                        dev1_sa7XH
                        filepath_sa7XI
                        ha_type_sa7XJ
                        buffered_sa7XK
                        mb_codec_sa7XL
                        nl_sa7XM
                        finalizer_sa7XN
                        other_side_sa7XO] \r [mb_encoder_sa7XR mb_decoder_sa7XS eta1_sa7XT]
                  let {
                    buf_state_sa7XU :: GHC.IO.Buffer.BufferState
                    [LclId] =
                        [ha_type_sa7XJ] \u []
                            case ha_type_sa7XJ of {
                              __DEFAULT -> GHC.IO.Buffer.WriteBuffer [];
                              GHC.IO.Handle.Types.ReadHandle -> GHC.IO.Buffer.ReadBuffer [];
                            };
                  } in 
                    case
                        GHC.IO.BufferedIO.newBuffer
                            $dBufferedIO_sa7XF dev1_sa7XH buf_state_sa7XU eta1_sa7XT
                    of
                    { (#,#) ipv_sa7XX [Occ=Once] ipv1_sa7XY ->
                          case newMutVar# [ipv1_sa7XY ipv_sa7XX] of {
                            (#,#) ipv2_sa7Y0 [Occ=Once] ipv3_sa7Y1 [Occ=Once] ->
                                let {
                                  sat_sa7Y2 [Occ=Once]
                                    :: (ds_aa4hw, GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                  [LclId] =
                                      CCCS (,)! [GHC.IO.Handle.Internals.decodeByteBuf2 ipv1_sa7XY];
                                } in 
                                  case newMutVar# [sat_sa7Y2 ipv2_sa7Y0] of {
                                    (#,#) ipv4_sa7Y4 [Occ=Once*] ipv5_sa7Y5 [Occ=Once] ->
                                        let-no-escape {
                                          $w$j_sa7Y6 [InlPrag=NOUSERINLINE[0],
                                                      Occ=Once*!T[3],
                                                      Dmd=<L,1*C1(C1(C1(U(U,U))))>]
                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> GHC.IORef.IORef GHC.IO.Buffer.CharBuffer
                                               -> GHC.IO.Handle.Types.BufferMode
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                     GHC.IO.Handle.Types.Handle #)
                                          [LclId[JoinId(3)],
                                           Arity=3,
                                           Str=<S,U><L,1*U(U)><L,U>,
                                           Unf=OtherCon []] =
                                              sat-only [$dIODevice_sa7XE
                                                        $dBufferedIO_sa7XF
                                                        $dTypeable_sa7XG
                                                        dev1_sa7XH
                                                        filepath_sa7XI
                                                        ha_type_sa7XJ
                                                        mb_codec_sa7XL
                                                        nl_sa7XM
                                                        finalizer_sa7XN
                                                        other_side_sa7XO
                                                        mb_encoder_sa7XR
                                                        mb_decoder_sa7XS
                                                        ipv3_sa7Y1
                                                        ipv5_sa7Y5] \r [w_sa7Y7 ww_sa7Y8 ww1_sa7Y9]
                                                  case
                                                      newMutVar# [GHC.IO.Handle.Types.BufferListNil
                                                                  w_sa7Y7]
                                                  of
                                                  { (#,#) ipv6_sa7Yb [Occ=Once]
                                                          ipv7_sa7Yc [Occ=Once] ->
                                                        case newMVar# [ipv6_sa7Yb] of {
                                                          (#,#) ipv8_sa7Ye [Occ=Once] ipv9_sa7Yf ->
                                                              let {
                                                                sat_sa7Yl [Occ=Once]
                                                                  :: GHC.IO.Handle.Types.Handle__
                                                                [LclId] =
                                                                    [$dIODevice_sa7XE
                                                                     $dBufferedIO_sa7XF
                                                                     $dTypeable_sa7XG
                                                                     dev1_sa7XH
                                                                     ha_type_sa7XJ
                                                                     mb_codec_sa7XL
                                                                     nl_sa7XM
                                                                     other_side_sa7XO
                                                                     mb_encoder_sa7XR
                                                                     mb_decoder_sa7XS
                                                                     ipv3_sa7Y1
                                                                     ipv5_sa7Y5
                                                                     ww_sa7Y8
                                                                     ww1_sa7Y9
                                                                     ipv7_sa7Yc] \u []
                                                                        case
                                                                            dev1_sa7XH
                                                                        of
                                                                        dt_sa7Yg
                                                                        { __DEFAULT ->
                                                                              case ww_sa7Y8 of {
                                                                                GHC.STRef.STRef dt2_sa7Yi [Occ=Once] ->
                                                                                    let {
                                                                                      sat_sa7Yk [Occ=Once]
                                                                                        :: GHC.IO.Handle.Types.Newline
                                                                                      [LclId] =
                                                                                          [nl_sa7XM] \u []
                                                                                              GHC.IO.Handle.Types.outputNL
                                                                                                  nl_sa7XM; } in
                                                                                    let {
                                                                                      sat_sa7Yj [Occ=Once]
                                                                                        :: GHC.IO.Handle.Types.Newline
                                                                                      [LclId] =
                                                                                          [nl_sa7XM] \u []
                                                                                              GHC.IO.Handle.Types.inputNL
                                                                                                  nl_sa7XM;
                                                                                    } in 
                                                                                      GHC.IO.Handle.Types.Handle__ [$dIODevice_sa7XE
                                                                                                                    $dBufferedIO_sa7XF
                                                                                                                    $dTypeable_sa7XG
                                                                                                                    dt_sa7Yg
                                                                                                                    ha_type_sa7XJ
                                                                                                                    ipv3_sa7Y1
                                                                                                                    ww1_sa7Y9
                                                                                                                    ipv5_sa7Y5
                                                                                                                    dt2_sa7Yi
                                                                                                                    ipv7_sa7Yc
                                                                                                                    mb_encoder_sa7XR
                                                                                                                    mb_decoder_sa7XS
                                                                                                                    mb_codec_sa7XL
                                                                                                                    sat_sa7Yj
                                                                                                                    sat_sa7Yk
                                                                                                                    other_side_sa7XO];
                                                                              };
                                                                        };
                                                              } in 
                                                                case
                                                                    putMVar# [ipv9_sa7Yf
                                                                              sat_sa7Yl
                                                                              ipv8_sa7Ye]
                                                                of
                                                                s2#_sa7Ym
                                                                { __DEFAULT ->
                                                                      case finalizer_sa7XN of {
                                                                        GHC.Base.Nothing ->
                                                                            let {
                                                                              sat_sa7Yo [Occ=Once]
                                                                                :: GHC.IO.Handle.Types.Handle
                                                                              [LclId] =
                                                                                  CCCS GHC.IO.Handle.Types.FileHandle! [filepath_sa7XI
                                                                                                                        ipv9_sa7Yf];
                                                                            } in 
                                                                              (#,#) [s2#_sa7Ym
                                                                                     sat_sa7Yo];
                                                                        GHC.Base.Just finalizer1_sa7Yp [Occ=Once!] ->
                                                                            let {
                                                                              sat_sa7Yr [Occ=Once]
                                                                                :: GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld
                                                                                   -> (# GHC.Prim.State#
                                                                                           GHC.Prim.RealWorld,
                                                                                         () #)
                                                                              [LclId] =
                                                                                  [filepath_sa7XI
                                                                                   ipv9_sa7Yf
                                                                                   finalizer1_sa7Yp] \u []
                                                                                      let {
                                                                                        sat_sa7Yq [Occ=Once]
                                                                                          :: GHC.MVar.MVar
                                                                                               GHC.IO.Handle.Types.Handle__
                                                                                        [LclId] =
                                                                                            CCCS GHC.MVar.MVar! [ipv9_sa7Yf];
                                                                                      } in 
                                                                                        finalizer1_sa7Yp
                                                                                            filepath_sa7XI
                                                                                            sat_sa7Yq;
                                                                            } in 
                                                                              case
                                                                                  mkWeak# [ipv9_sa7Yf
                                                                                           GHC.Tuple.()
                                                                                           sat_sa7Yr
                                                                                           s2#_sa7Ym]
                                                                              of
                                                                              { (#,#) ipv10_sa7Yt [Occ=Once]
                                                                                      _ [Occ=Dead] ->
                                                                                    let {
                                                                                      sat_sa7Yv [Occ=Once]
                                                                                        :: GHC.IO.Handle.Types.Handle
                                                                                      [LclId] =
                                                                                          CCCS GHC.IO.Handle.Types.FileHandle! [filepath_sa7XI
                                                                                                                                ipv9_sa7Yf];
                                                                                    } in 
                                                                                      (#,#) [ipv10_sa7Yt
                                                                                             sat_sa7Yv];
                                                                              };
                                                                      };
                                                                };
                                                        };
                                                  };
                                        } in 
                                          case buffered_sa7XK of {
                                            GHC.Types.False ->
                                                case
                                                    newMutVar# [GHC.ForeignPtr.NoFinalizers
                                                                ipv4_sa7Y4]
                                                of
                                                { (#,#) ipv6_sa7Yy [Occ=Once]
                                                        ipv7_sa7Yz [Occ=Once] ->
                                                      case
                                                          newPinnedByteArray# [8192# ipv6_sa7Yy]
                                                      of
                                                      { (#,#) ipv8_sa7YB [Occ=Once] ipv9_sa7YC ->
                                                            let {
                                                              sat_sa7YE [Occ=Once]
                                                                :: GHC.ForeignPtr.ForeignPtrContents
                                                              [LclId] =
                                                                  CCCS GHC.ForeignPtr.MallocPtr! [ipv9_sa7YC
                                                                                                  ipv7_sa7Yz];
                                                            } in 
                                                              case
                                                                  byteArrayContents# [ipv9_sa7YC]
                                                              of
                                                              sat_sa7YD
                                                              { __DEFAULT ->
                                                                    let {
                                                                      sat_sa7YF [Occ=Once]
                                                                        :: GHC.IO.Buffer.CharBuffer
                                                                      [LclId] =
                                                                          CCCS GHC.IO.Buffer.Buffer! [sat_sa7YD
                                                                                                      sat_sa7YE
                                                                                                      buf_state_sa7XU
                                                                                                      2048#
                                                                                                      0#
                                                                                                      0#];
                                                                    } in 
                                                                      case
                                                                          newMutVar# [sat_sa7YF
                                                                                      ipv8_sa7YB]
                                                                      of
                                                                      { (#,#) ipv10_sa7YH [Occ=Once]
                                                                              ipv11_sa7YI [Occ=Once] ->
                                                                            let {
                                                                              sat_sa7YJ [Occ=Once]
                                                                                :: GHC.IORef.IORef
                                                                                     GHC.IO.Buffer.CharBuffer
                                                                              [LclId] =
                                                                                  CCCS GHC.STRef.STRef! [ipv11_sa7YI];
                                                                            } in 
                                                                              $w$j_sa7Y6
                                                                                  ipv10_sa7YH
                                                                                  sat_sa7YJ
                                                                                  GHC.IO.Handle.Types.NoBuffering;
                                                                      };
                                                              };
                                                      };
                                                };
                                            GHC.Types.True ->
                                                case
                                                    newMutVar# [GHC.ForeignPtr.NoFinalizers
                                                                ipv4_sa7Y4]
                                                of
                                                { (#,#) ipv6_sa7YL [Occ=Once]
                                                        ipv7_sa7YM [Occ=Once] ->
                                                      case
                                                          newPinnedByteArray# [8192# ipv6_sa7YL]
                                                      of
                                                      { (#,#) ipv8_sa7YO [Occ=Once] ipv9_sa7YP ->
                                                            let {
                                                              sat_sa7YR [Occ=Once]
                                                                :: GHC.ForeignPtr.ForeignPtrContents
                                                              [LclId] =
                                                                  CCCS GHC.ForeignPtr.MallocPtr! [ipv9_sa7YP
                                                                                                  ipv7_sa7YM];
                                                            } in 
                                                              case
                                                                  byteArrayContents# [ipv9_sa7YP]
                                                              of
                                                              sat_sa7YQ
                                                              { __DEFAULT ->
                                                                    let {
                                                                      sat_sa7YS [Occ=Once]
                                                                        :: GHC.IO.Buffer.CharBuffer
                                                                      [LclId] =
                                                                          CCCS GHC.IO.Buffer.Buffer! [sat_sa7YQ
                                                                                                      sat_sa7YR
                                                                                                      buf_state_sa7XU
                                                                                                      2048#
                                                                                                      0#
                                                                                                      0#];
                                                                    } in 
                                                                      case
                                                                          newMutVar# [sat_sa7YS
                                                                                      ipv8_sa7YO]
                                                                      of
                                                                      { (#,#) ipv10_sa7YU [Occ=Once]
                                                                              ipv11_sa7YV [Occ=Once] ->
                                                                            case
                                                                                GHC.IO.Device.isTerminal
                                                                                    $dIODevice_sa7XE
                                                                                    dev1_sa7XH
                                                                                    ipv10_sa7YU
                                                                            of
                                                                            { (#,#) ipv12_sa7YX [Occ=Once]
                                                                                    ipv13_sa7YY [Occ=Once!] ->
                                                                                  let {
                                                                                    sat_sa7Z1 [Occ=Once]
                                                                                      :: GHC.IO.Handle.Types.BufferMode
                                                                                    [LclId] =
                                                                                        [ipv13_sa7YY] \u []
                                                                                            case
                                                                                                ipv13_sa7YY
                                                                                            of
                                                                                            { GHC.Types.False ->
                                                                                                  lvl8_ra7Po;
                                                                                              GHC.Types.True ->
                                                                                                  GHC.IO.Handle.Types.LineBuffering [];
                                                                                            }; } in
                                                                                  let {
                                                                                    sat_sa7YZ [Occ=Once]
                                                                                      :: GHC.IORef.IORef
                                                                                           GHC.IO.Buffer.CharBuffer
                                                                                    [LclId] =
                                                                                        CCCS GHC.STRef.STRef! [ipv11_sa7YV];
                                                                                  } in 
                                                                                    $w$j_sa7Y6
                                                                                        ipv12_sa7YX
                                                                                        sat_sa7YZ
                                                                                        sat_sa7Z1;
                                                                            };
                                                                      };
                                                              };
                                                      };
                                                };
                                          };
                                  };
                          };
                    };
        } in 
          case mb_codec_sa7XL of {
            GHC.Base.Nothing ->
                cont_sa7XQ GHC.Base.Nothing GHC.Base.Nothing eta_sa7XP;
            GHC.Base.Just ds_sa7Z3 [Occ=Once!] ->
                case ds_sa7Z3 of {
                  GHC.IO.Encoding.Types.TextEncoding _ [Occ=Dead]
                                                     ds2_sa7Z6 [Occ=Once*]
                                                     ds3_sa7Z7 [Occ=Once*] ->
                      let-no-escape {
                        $j_sa7Z8 [Occ=Once*!T[2], Dmd=<L,1*C1(C1(U(U,U)))>]
                          :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> GHC.Base.Maybe (GHC.IO.Encoding.Types.TextDecoder dstate_aa436)
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                   GHC.IO.Handle.Types.Handle #)
                        [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
                            sat-only [ha_type_sa7XJ cont_sa7XQ ds3_sa7Z7] \r [ipv_sa7Z9
                                                                              ipv1_sa7Za]
                                case ha_type_sa7XJ of {
                                  __DEFAULT -> cont_sa7XQ GHC.Base.Nothing ipv1_sa7Za ipv_sa7Z9;
                                  GHC.IO.Handle.Types.WriteHandle ->
                                      case ds3_sa7Z7 ipv_sa7Z9 of {
                                        (#,#) ipv2_sa7Zd [Occ=Once] ipv3_sa7Ze [Occ=Once] ->
                                            let {
                                              sat_sa7Zf [Occ=Once]
                                                :: GHC.Base.Maybe
                                                     (GHC.IO.Encoding.Types.TextEncoder
                                                        estate_aa437)
                                              [LclId] =
                                                  CCCS GHC.Base.Just! [ipv3_sa7Ze];
                                            } in  cont_sa7XQ sat_sa7Zf ipv1_sa7Za ipv2_sa7Zd;
                                      };
                                  GHC.IO.Handle.Types.AppendHandle ->
                                      case ds3_sa7Z7 ipv_sa7Z9 of {
                                        (#,#) ipv2_sa7Zh [Occ=Once] ipv3_sa7Zi [Occ=Once] ->
                                            let {
                                              sat_sa7Zj [Occ=Once]
                                                :: GHC.Base.Maybe
                                                     (GHC.IO.Encoding.Types.TextEncoder
                                                        estate_aa437)
                                              [LclId] =
                                                  CCCS GHC.Base.Just! [ipv3_sa7Zi];
                                            } in  cont_sa7XQ sat_sa7Zj ipv1_sa7Za ipv2_sa7Zh;
                                      };
                                  GHC.IO.Handle.Types.ReadWriteHandle ->
                                      case ds3_sa7Z7 ipv_sa7Z9 of {
                                        (#,#) ipv2_sa7Zl [Occ=Once] ipv3_sa7Zm [Occ=Once] ->
                                            let {
                                              sat_sa7Zn [Occ=Once]
                                                :: GHC.Base.Maybe
                                                     (GHC.IO.Encoding.Types.TextEncoder
                                                        estate_aa437)
                                              [LclId] =
                                                  CCCS GHC.Base.Just! [ipv3_sa7Zm];
                                            } in  cont_sa7XQ sat_sa7Zn ipv1_sa7Za ipv2_sa7Zl;
                                      };
                                };
                      } in 
                        case ha_type_sa7XJ of {
                          __DEFAULT -> $j_sa7Z8 eta_sa7XP GHC.Base.Nothing;
                          GHC.IO.Handle.Types.ReadHandle ->
                              case ds2_sa7Z6 eta_sa7XP of {
                                (#,#) ipv_sa7Zq [Occ=Once] ipv1_sa7Zr [Occ=Once] ->
                                    let {
                                      sat_sa7Zs [Occ=Once]
                                        :: GHC.Base.Maybe
                                             (GHC.IO.Encoding.Types.TextDecoder dstate_aa436)
                                      [LclId] =
                                          CCCS GHC.Base.Just! [ipv1_sa7Zr];
                                    } in  $j_sa7Z8 ipv_sa7Zq sat_sa7Zs;
                              };
                          GHC.IO.Handle.Types.ReadWriteHandle ->
                              case ds2_sa7Z6 eta_sa7XP of {
                                (#,#) ipv_sa7Zu [Occ=Once] ipv1_sa7Zv [Occ=Once] ->
                                    let {
                                      sat_sa7Zw [Occ=Once]
                                        :: GHC.Base.Maybe
                                             (GHC.IO.Encoding.Types.TextDecoder dstate_aa436)
                                      [LclId] =
                                          CCCS GHC.Base.Just! [ipv1_sa7Zv];
                                    } in  $j_sa7Z8 ipv_sa7Zu sat_sa7Zw;
                              };
                        };
                };
          };

GHC.IO.Handle.Internals.mkHandle
  :: forall dev.
     (GHC.IO.Device.IODevice dev, GHC.IO.BufferedIO.BufferedIO dev,
      Data.Typeable.Internal.Typeable dev) =>
     dev
     -> GHC.IO.FilePath
     -> GHC.IO.Handle.Types.HandleType
     -> GHC.Types.Bool
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.NewlineMode
     -> GHC.Base.Maybe GHC.IO.Handle.Internals.HandleFinalizer
     -> GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
     -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId,
 Arity=12,
 Str=<L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U)><L,U><L,U><L,U><L,U><L,1*U><S,U><L,U(1*U,1*U)><L,1*U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_Bc
           eta_Bb
           eta_Ba
           eta_B9
           eta_B8
           eta_B7
           eta_B6
           eta_B5
           eta_B4
           eta_B3
           eta_B2
           eta_B1]
        GHC.IO.Handle.Internals.mkDuplexHandle5
            eta_Bc
            eta_Bb
            eta_Ba
            eta_B9
            eta_B8
            eta_B7
            eta_B6
            eta_B5
            eta_B4
            eta_B3
            eta_B2
            eta_B1;

GHC.IO.Handle.Internals.debugIO1
  :: GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><S,U>, Unf=OtherCon []] =
    [] \r [s_sa7Zx s1_sa7Zy] (#,#) [s1_sa7Zy GHC.Tuple.()];

GHC.IO.Handle.Internals.debugIO
  :: GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.IO.Handle.Internals.debugIO1 eta_B2 eta_B1;

GHC.IO.Handle.Internals.$wwriteCharBuffer [InlPrag=NOUSERINLINE[0],
                                           Occ=LoopBreaker]
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> GHC.IO.Buffer.BufferState
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=8,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U><L,U><L,U><L,U><L,U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sa7Zz
           ww_sa7ZA
           ww1_sa7ZB
           ww2_sa7ZC
           ww3_sa7ZD
           ww4_sa7ZE
           ww5_sa7ZF
           w1_sa7ZG]
        case w_sa7Zz of wild_sa7ZH {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       $dBufferedIO_sa7ZJ [Occ=Once]
                                       _ [Occ=Dead]
                                       ds_sa7ZL [Occ=Once]
                                       _ [Occ=Dead]
                                       dt_sa7ZN
                                       ds2_sa7ZO [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds3_sa7ZS [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt_sa7ZN w1_sa7ZG] of {
                (#,#) ipv_sa7ZZ [Occ=Once*] ipv1_sa800 [Occ=Once*] ->
                    let-no-escape {
                      $w$j_sa801 [InlPrag=NOUSERINLINE[0],
                                  Occ=Once*!T[8],
                                  Dmd=<L,1*C1(C1(C1(C1(C1(C1(C1(C1(U(U,U)))))))))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> GHC.IO.Buffer.CharBuffer
                           -> GHC.Prim.Addr#
                           -> GHC.ForeignPtr.ForeignPtrContents
                           -> GHC.IO.Buffer.BufferState
                           -> GHC.Prim.Int#
                           -> GHC.Prim.Int#
                           -> GHC.Prim.Int#
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      [LclId[JoinId(8)],
                       Arity=8,
                       Str=<S,U><L,U(U,U,U,U,U,U)><L,U><L,U><L,U><S,U><L,U><S,U>,
                       Unf=OtherCon []] =
                          sat-only [ww4_sa7ZE
                                    wild_sa7ZH
                                    $dBufferedIO_sa7ZJ
                                    ds_sa7ZL
                                    dt_sa7ZN
                                    ds2_sa7ZO] \r [w2_sa802
                                                   ww6_sa803
                                                   ww7_sa804
                                                   ww8_sa805
                                                   ww9_sa806
                                                   ww10_sa807
                                                   ww11_sa808
                                                   ww12_sa809]
                              let {
                                wild1_sa80a :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                [LclId, Unf=OtherCon []] =
                                    CCCS GHC.IO.Buffer.Buffer! [ww7_sa804
                                                                ww8_sa805
                                                                ww9_sa806
                                                                ww10_sa807
                                                                ww11_sa808
                                                                ww12_sa809];
                              } in 
                                let-no-escape {
                                  $j_sa80b [Dmd=<L,1*U(U,U)>]
                                    :: (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                  [LclId[JoinId(0)], Unf=OtherCon []] =
                                      [wild_sa7ZH
                                       $dBufferedIO_sa7ZJ
                                       ds_sa7ZL
                                       dt_sa7ZN
                                       w2_sa802
                                       ww6_sa803
                                       wild1_sa80a] \r []
                                          case
                                              GHC.IO.BufferedIO.flushWriteBuffer
                                                  $dBufferedIO_sa7ZJ ds_sa7ZL wild1_sa80a w2_sa802
                                          of
                                          { (#,#) ipv2_sa80d [Occ=Once] ipv3_sa80e [Occ=Once] ->
                                                case
                                                    writeMutVar# [dt_sa7ZN ipv3_sa80e ipv2_sa80d]
                                                of
                                                s2#_sa80f
                                                { __DEFAULT ->
                                                      case ww6_sa803 of {
                                                        GHC.IO.Buffer.Buffer dt4_sa80h [Occ=Once]
                                                                             dt5_sa80i [Occ=Once]
                                                                             ds11_sa80j [Occ=Once]
                                                                             dt6_sa80k [Occ=Once]
                                                                             dt7_sa80l
                                                                             dt8_sa80m ->
                                                            case ==# [dt7_sa80l dt8_sa80m] of {
                                                              __DEFAULT ->
                                                                  GHC.IO.Handle.Internals.$wwriteCharBuffer
                                                                      wild_sa7ZH
                                                                      dt4_sa80h
                                                                      dt5_sa80i
                                                                      ds11_sa80j
                                                                      dt6_sa80k
                                                                      dt7_sa80l
                                                                      dt8_sa80m
                                                                      s2#_sa80f;
                                                              1# -> (#,#) [s2#_sa80f GHC.Tuple.()];
                                                            };
                                                      };
                                                };
                                          };
                                } in 
                                  case ==# [ww10_sa807 ww12_sa809] of {
                                    __DEFAULT ->
                                        case ww6_sa803 of {
                                          GHC.IO.Buffer.Buffer dt4_sa80q [Occ=Once*]
                                                               dt5_sa80r [Occ=Once*]
                                                               ds10_sa80s [Occ=Once*]
                                                               dt6_sa80t [Occ=Once*]
                                                               dt7_sa80u
                                                               dt8_sa80v ->
                                              let-no-escape {
                                                $j1_sa80w [Occ=Once*T[0], Dmd=<L,1*U(U,U)>]
                                                  :: (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                                [LclId[JoinId(0)], Unf=OtherCon []] =
                                                    [wild_sa7ZH
                                                     dt_sa7ZN
                                                     ds2_sa7ZO
                                                     w2_sa802
                                                     ww11_sa808
                                                     ww12_sa809
                                                     wild1_sa80a
                                                     $j_sa80b
                                                     dt4_sa80q
                                                     dt5_sa80r
                                                     ds10_sa80s
                                                     dt6_sa80t
                                                     dt7_sa80u
                                                     dt8_sa80v] \r []
                                                        case ds2_sa7ZO of {
                                                          GHC.IO.Handle.Types.NoBuffering ->
                                                              $j_sa80b;
                                                          GHC.IO.Handle.Types.LineBuffering ->
                                                              case
                                                                  writeMutVar# [dt_sa7ZN
                                                                                wild1_sa80a
                                                                                w2_sa802]
                                                              of
                                                              s2#_sa80y
                                                              { __DEFAULT ->
                                                                    case
                                                                        ==# [dt7_sa80u dt8_sa80v]
                                                                    of
                                                                    { __DEFAULT ->
                                                                          GHC.IO.Handle.Internals.$wwriteCharBuffer
                                                                              wild_sa7ZH
                                                                              dt4_sa80q
                                                                              dt5_sa80r
                                                                              ds10_sa80s
                                                                              dt6_sa80t
                                                                              dt7_sa80u
                                                                              dt8_sa80v
                                                                              s2#_sa80y;
                                                                      1# ->
                                                                          (#,#) [s2#_sa80y
                                                                                 GHC.Tuple.()];
                                                                    };
                                                              };
                                                          GHC.IO.Handle.Types.BlockBuffering ds11_sa80A [Occ=Once!] ->
                                                              case ds11_sa80A of {
                                                                GHC.Base.Nothing ->
                                                                    case
                                                                        writeMutVar# [dt_sa7ZN
                                                                                      wild1_sa80a
                                                                                      w2_sa802]
                                                                    of
                                                                    s2#_sa80C
                                                                    { __DEFAULT ->
                                                                          case
                                                                              ==# [dt7_sa80u
                                                                                   dt8_sa80v]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.IO.Handle.Internals.$wwriteCharBuffer
                                                                                    wild_sa7ZH
                                                                                    dt4_sa80q
                                                                                    dt5_sa80r
                                                                                    ds10_sa80s
                                                                                    dt6_sa80t
                                                                                    dt7_sa80u
                                                                                    dt8_sa80v
                                                                                    s2#_sa80C;
                                                                            1# ->
                                                                                (#,#) [s2#_sa80C
                                                                                       GHC.Tuple.()];
                                                                          };
                                                                    };
                                                                GHC.Base.Just s_sa80E [Occ=Once!] ->
                                                                    case s_sa80E of {
                                                                      GHC.Types.I# y_sa80G [Occ=Once] ->
                                                                          case
                                                                              -# [ww12_sa809
                                                                                  ww11_sa808]
                                                                          of
                                                                          sat_sa80H
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    >=# [sat_sa80H
                                                                                         y_sa80G]
                                                                                of
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          writeMutVar# [dt_sa7ZN
                                                                                                        wild1_sa80a
                                                                                                        w2_sa802]
                                                                                      of
                                                                                      s2#_sa80J
                                                                                      { __DEFAULT ->
                                                                                            case
                                                                                                ==# [dt7_sa80u
                                                                                                     dt8_sa80v]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.IO.Handle.Internals.$wwriteCharBuffer
                                                                                                      wild_sa7ZH
                                                                                                      dt4_sa80q
                                                                                                      dt5_sa80r
                                                                                                      ds10_sa80s
                                                                                                      dt6_sa80t
                                                                                                      dt7_sa80u
                                                                                                      dt8_sa80v
                                                                                                      s2#_sa80J;
                                                                                              1# ->
                                                                                                  (#,#) [s2#_sa80J
                                                                                                         GHC.Tuple.()];
                                                                                            };
                                                                                      };
                                                                                  1# -> $j_sa80b;
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                              } in 
                                                case ==# [dt7_sa80u dt8_sa80v] of {
                                                  __DEFAULT ->
                                                      case ==# [dt7_sa80u ww4_sa7ZE] of {
                                                        __DEFAULT -> $j1_sa80w;
                                                        1# -> $j_sa80b;
                                                      };
                                                  1# -> $j1_sa80w;
                                                };
                                        };
                                    1# -> $j_sa80b;
                                  };
                    } in 
                      case ds3_sa7ZS of {
                        GHC.Base.Nothing ->
                            let {
                              sat_sa80O [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                              [LclId] =
                                  CCCS GHC.IO.Buffer.Buffer! [ww_sa7ZA
                                                              ww1_sa7ZB
                                                              ww2_sa7ZC
                                                              ww3_sa7ZD
                                                              ww4_sa7ZE
                                                              ww5_sa7ZF];
                            } in 
                              case
                                  GHC.IO.Encoding.Latin1.latin3 sat_sa80O ipv1_sa800 ipv_sa7ZZ
                              of
                              { (#,#) ipv2_sa80Q [Occ=Once] ipv3_sa80R [Occ=Once!] ->
                                    case ipv3_sa80R of {
                                      (,,) _ [Occ=Dead]
                                           input'_sa80U [Occ=Once]
                                           output'_sa80V [Occ=Once!] ->
                                          case output'_sa80V of {
                                            GHC.IO.Buffer.Buffer ww7_sa80X [Occ=Once]
                                                                 ww8_sa80Y [Occ=Once]
                                                                 ww9_sa80Z [Occ=Once]
                                                                 ww10_sa810 [Occ=Once]
                                                                 ww11_sa811 [Occ=Once]
                                                                 ww12_sa812 [Occ=Once] ->
                                                $w$j_sa801
                                                    ipv2_sa80Q
                                                    input'_sa80U
                                                    ww7_sa80X
                                                    ww8_sa80Y
                                                    ww9_sa80Z
                                                    ww10_sa810
                                                    ww11_sa811
                                                    ww12_sa812;
                                          };
                                    };
                              };
                        GHC.Base.Just encoder_sa813 [Occ=Once!] ->
                            case encoder_sa813 of {
                              GHC.IO.Encoding.Types.BufferCodec ww7_sa815 [Occ=Once]
                                                                ww8_sa816 [Occ=Once]
                                                                _ [Occ=Dead]
                                                                _ [Occ=Dead]
                                                                _ [Occ=Dead] ->
                                  let {
                                    sat_sa81a [Occ=Once]
                                      :: GHC.IO.Buffer.Buffer GHC.IO.Buffer.CharBufElem
                                    [LclId] =
                                        CCCS GHC.IO.Buffer.Buffer! [ww_sa7ZA
                                                                    ww1_sa7ZB
                                                                    ww2_sa7ZC
                                                                    ww3_sa7ZD
                                                                    ww4_sa7ZE
                                                                    ww5_sa7ZF];
                                  } in 
                                    case
                                        GHC.IO.Handle.Internals.$wstreamEncode
                                            ww7_sa815 ww8_sa816 sat_sa81a ipv1_sa800 ipv_sa7ZZ
                                    of
                                    { (#,#) ipv2_sa81c [Occ=Once] ipv3_sa81d [Occ=Once!] ->
                                          case ipv3_sa81d of {
                                            (,) ww13_sa81f [Occ=Once] ww14_sa81g [Occ=Once!] ->
                                                case ww14_sa81g of {
                                                  GHC.IO.Buffer.Buffer ww16_sa81i [Occ=Once]
                                                                       ww17_sa81j [Occ=Once]
                                                                       ww18_sa81k [Occ=Once]
                                                                       ww19_sa81l [Occ=Once]
                                                                       ww20_sa81m [Occ=Once]
                                                                       ww21_sa81n [Occ=Once] ->
                                                      $w$j_sa801
                                                          ipv2_sa81c
                                                          ww13_sa81f
                                                          ww16_sa81i
                                                          ww17_sa81j
                                                          ww18_sa81k
                                                          ww19_sa81l
                                                          ww20_sa81m
                                                          ww21_sa81n;
                                                };
                                          };
                                    };
                            };
                      };
              };
        };

GHC.IO.Handle.Internals.writeCharBuffer1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,1*U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sa81o w1_sa81p w2_sa81q]
        case w1_sa81p of {
          GHC.IO.Buffer.Buffer ww1_sa81s [Occ=Once]
                               ww2_sa81t [Occ=Once]
                               ww3_sa81u [Occ=Once]
                               ww4_sa81v [Occ=Once]
                               ww5_sa81w [Occ=Once]
                               ww6_sa81x [Occ=Once] ->
              GHC.IO.Handle.Internals.$wwriteCharBuffer
                  w_sa81o
                  ww1_sa81s
                  ww2_sa81t
                  ww3_sa81u
                  ww4_sa81v
                  ww5_sa81w
                  ww6_sa81x
                  w2_sa81q;
        };

GHC.IO.Handle.Internals.writeCharBuffer
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Buffer.CharBuffer -> GHC.Types.IO ()
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,1*U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.Internals.writeCharBuffer1 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.Internals.flushCharBuffer3
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_sa81y eta_sa81z]
        case ds_sa81y of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       dt_sa81G [Occ=Once*]
                                       _ [Occ=Dead]
                                       dt1_sa81I [Occ=Once]
                                       dt2_sa81J
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds5_sa81M [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt2_sa81J eta_sa81z] of {
                (#,#) ipv_sa81S [Occ=Once*] ipv1_sa81T [Occ=Once!] ->
                    case ipv1_sa81T of {
                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           ds11_sa81X [Occ=Once!]
                                           _ [Occ=Dead]
                                           dt7_sa81Z [Occ=Once]
                                           dt8_sa820 [Occ=Once] ->
                          case ds11_sa81X of {
                            GHC.IO.Buffer.ReadBuffer ->
                                case ==# [dt7_sa81Z dt8_sa820] of {
                                  __DEFAULT ->
                                      case readMutVar# [dt1_sa81I ipv_sa81S] of {
                                        (#,#) ipv2_sa824 [Occ=Once] ipv3_sa825 [Occ=Once!] ->
                                            case ipv3_sa825 of {
                                              (,) codec_state_sa827 [Occ=Once]
                                                  bbuf0_sa828 [Occ=Once*] ->
                                                  case readMutVar# [dt2_sa81J ipv2_sa824] of {
                                                    (#,#) ipv4_sa82a [Occ=Once] ipv5_sa82b ->
                                                        let {
                                                          sat_sa82j [Occ=Once]
                                                            :: GHC.IO.Buffer.Buffer
                                                                 GHC.IO.Buffer.CharBufElem
                                                          [LclId] =
                                                              [ipv5_sa82b] \u []
                                                                  case ipv5_sa82b of {
                                                                    GHC.IO.Buffer.Buffer dt9_sa82d [Occ=Once]
                                                                                         dt10_sa82e [Occ=Once]
                                                                                         ds14_sa82f [Occ=Once]
                                                                                         dt11_sa82g [Occ=Once]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead] ->
                                                                        GHC.IO.Buffer.Buffer [dt9_sa82d
                                                                                              dt10_sa82e
                                                                                              ds14_sa82f
                                                                                              dt11_sa82g
                                                                                              0#
                                                                                              0#];
                                                                  };
                                                        } in 
                                                          case
                                                              writeMutVar# [dt2_sa81J
                                                                            sat_sa82j
                                                                            ipv4_sa82a]
                                                          of
                                                          s2#_sa82k
                                                          { __DEFAULT ->
                                                                case ipv5_sa82b of {
                                                                  GHC.IO.Buffer.Buffer dt9_sa82m [Occ=Once]
                                                                                       dt10_sa82n [Occ=Once]
                                                                                       ds14_sa82o [Occ=Once]
                                                                                       _ [Occ=Dead]
                                                                                       dt12_sa82q [Occ=Once!]
                                                                                       _ [Occ=Dead] ->
                                                                      case
                                                                          dt12_sa82q
                                                                      of
                                                                      wild5_sa82s
                                                                      { __DEFAULT ->
                                                                            case ds5_sa81M of {
                                                                              GHC.Base.Nothing ->
                                                                                  let {
                                                                                    sat_sa82C [Occ=Once]
                                                                                      :: GHC.IO.Buffer.Buffer
                                                                                           GHC.Word.Word8
                                                                                    [LclId] =
                                                                                        [bbuf0_sa828
                                                                                         wild5_sa82s] \u []
                                                                                            case
                                                                                                bbuf0_sa828
                                                                                            of
                                                                                            { GHC.IO.Buffer.Buffer dt14_sa82v [Occ=Once]
                                                                                                                   dt15_sa82w [Occ=Once]
                                                                                                                   ds15_sa82x [Occ=Once]
                                                                                                                   dt16_sa82y [Occ=Once]
                                                                                                                   dt17_sa82z [Occ=Once]
                                                                                                                   dt18_sa82A [Occ=Once] ->
                                                                                                  case
                                                                                                      +# [dt17_sa82z
                                                                                                          wild5_sa82s]
                                                                                                  of
                                                                                                  sat_sa82B
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.IO.Buffer.Buffer [dt14_sa82v
                                                                                                                              dt15_sa82w
                                                                                                                              ds15_sa82x
                                                                                                                              dt16_sa82y
                                                                                                                              sat_sa82B
                                                                                                                              dt18_sa82A];
                                                                                                  };
                                                                                            };
                                                                                  } in 
                                                                                    case
                                                                                        writeMutVar# [dt_sa81G
                                                                                                      sat_sa82C
                                                                                                      s2#_sa82k]
                                                                                    of
                                                                                    s2#1_sa82D
                                                                                    { __DEFAULT ->
                                                                                          (#,#) [s2#1_sa82D
                                                                                                 GHC.Tuple.()];
                                                                                    };
                                                                              GHC.Base.Just decoder_sa82E [Occ=Once!] ->
                                                                                  case
                                                                                      decoder_sa82E
                                                                                  of
                                                                                  { GHC.IO.Encoding.Types.BufferCodec ds15_sa82G [Occ=Once]
                                                                                                                      ds16_sa82H [Occ=Once]
                                                                                                                      _ [Occ=Dead]
                                                                                                                      _ [Occ=Dead]
                                                                                                                      ds19_sa82K [Occ=Once!] ->
                                                                                        case
                                                                                            ds19_sa82K
                                                                                                codec_state_sa827
                                                                                                s2#_sa82k
                                                                                        of
                                                                                        { (#,#) ipv6_sa82M [Occ=Once]
                                                                                                _ [Occ=Dead] ->
                                                                                              let {
                                                                                                sat_sa82O [Occ=Once]
                                                                                                  :: GHC.IO.Buffer.Buffer
                                                                                                       GHC.IO.Buffer.CharBufElem
                                                                                                [LclId] =
                                                                                                    CCCS GHC.IO.Buffer.Buffer! [dt9_sa82m
                                                                                                                                dt10_sa82n
                                                                                                                                ds14_sa82o
                                                                                                                                wild5_sa82s
                                                                                                                                0#
                                                                                                                                0#];
                                                                                              } in 
                                                                                                case
                                                                                                    GHC.IO.Handle.Internals.$wstreamEncode
                                                                                                        ds15_sa82G
                                                                                                        ds16_sa82H
                                                                                                        bbuf0_sa828
                                                                                                        sat_sa82O
                                                                                                        ipv6_sa82M
                                                                                                of
                                                                                                { (#,#) ipv8_sa82Q [Occ=Once]
                                                                                                        ipv9_sa82R [Occ=Once!] ->
                                                                                                      case
                                                                                                          ipv9_sa82R
                                                                                                      of
                                                                                                      { (,) bbuf1_sa82T [Occ=Once]
                                                                                                            _ [Occ=Dead] ->
                                                                                                            case
                                                                                                                writeMutVar# [dt_sa81G
                                                                                                                              bbuf1_sa82T
                                                                                                                              ipv8_sa82Q]
                                                                                                            of
                                                                                                            s2#1_sa82V
                                                                                                            { __DEFAULT ->
                                                                                                                  (#,#) [s2#1_sa82V
                                                                                                                         GHC.Tuple.()];
                                                                                                            };
                                                                                                      };
                                                                                                };
                                                                                        };
                                                                                  };
                                                                            };
                                                                        0# ->
                                                                            case
                                                                                writeMutVar# [dt_sa81G
                                                                                              bbuf0_sa828
                                                                                              s2#_sa82k]
                                                                            of
                                                                            s2#1_sa82W
                                                                            { __DEFAULT ->
                                                                                  (#,#) [s2#1_sa82W
                                                                                         GHC.Tuple.()];
                                                                            };
                                                                      };
                                                                };
                                                          };
                                                  };
                                            };
                                      };
                                  1# -> (#,#) [ipv_sa81S GHC.Tuple.()];
                                };
                            GHC.IO.Buffer.WriteBuffer -> (#,#) [ipv_sa81S GHC.Tuple.()];
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.flushCharReadBuffer
  :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.IO.Handle.Internals.flushCharBuffer3 eta_B2 eta_B1;

lvl9_ra7Pp :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "error"#;

lvl10_ra7Pq :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl9_ra7Pp;

lvl11_ra7Pr :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Internals.$trModule4;

lvl12_ra7Ps :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Internals.$trModule2;

lvl13_ra7Pt :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./GHC/IO/Handle/Internals.hs"#;

lvl14_ra7Pu :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl13_ra7Pt;

lvl15_ra7Pv :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [487#];

lvl16_ra7Pw :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [12#];

lvl17_ra7Px :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [68#];

lvl18_ra7Py :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl11_ra7Pr
                                           lvl12_ra7Ps
                                           lvl14_ra7Pu
                                           lvl15_ra7Pv
                                           lvl16_ra7Pw
                                           lvl15_ra7Pv
                                           lvl17_ra7Px];

lvl19_ra7Pz :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl10_ra7Pq
                                                  lvl18_ra7Py
                                                  GHC.Stack.Types.EmptyCallStack];

lvl20_ra7PA :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "internal IO library error: Char buffer non-empty"#;

GHC.IO.Handle.Internals.flushCharBuffer2 :: GHC.Types.IO ()
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl20_ra7PA of sat_sa82X {
          __DEFAULT -> GHC.Err.error lvl19_ra7Pz sat_sa82X;
        };

GHC.IO.Handle.Internals.flushCharBuffer1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h__sa82Y eta_sa82Z]
        case h__sa82Y of wild_sa830 {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       dt2_sa839 [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt2_sa839 eta_sa82Z] of {
                (#,#) ipv_sa83i [Occ=Once*] ipv1_sa83j [Occ=Once!] ->
                    case ipv1_sa83j of {
                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           ds10_sa83n [Occ=Once!]
                                           _ [Occ=Dead]
                                           dt7_sa83p [Occ=Once]
                                           dt8_sa83q [Occ=Once] ->
                          case ds10_sa83n of {
                            GHC.IO.Buffer.ReadBuffer ->
                                GHC.IO.Handle.Internals.flushCharBuffer3 wild_sa830 ipv_sa83i;
                            GHC.IO.Buffer.WriteBuffer ->
                                case ==# [dt7_sa83p dt8_sa83q] of {
                                  __DEFAULT -> GHC.IO.Handle.Internals.flushCharBuffer2;
                                  1# -> (#,#) [ipv_sa83i GHC.Tuple.()];
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.flushCharBuffer
  :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.IO.Handle.Internals.flushCharBuffer1 eta_B2 eta_B1;

GHC.IO.Handle.Internals.flushBuffer2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h__sa83u eta_sa83v]
        case h__sa83u of {
          GHC.IO.Handle.Types.Handle__ $dIODevice_sa83x
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds_sa83A
                                       _ [Occ=Dead]
                                       dt_sa83C
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt_sa83C eta_sa83v] of {
                (#,#) ipv_sa83O [Occ=Once*] ipv1_sa83P [Occ=Once!] ->
                    case ipv1_sa83P of {
                      GHC.IO.Buffer.Buffer dt4_sa83R [Occ=Once]
                                           dt5_sa83S [Occ=Once]
                                           ds10_sa83T [Occ=Once]
                                           dt6_sa83U [Occ=Once]
                                           dt7_sa83V
                                           dt8_sa83W ->
                          case ==# [dt7_sa83V dt8_sa83W] of {
                            __DEFAULT ->
                                case
                                    GHC.IO.Device.isSeekable $dIODevice_sa83x ds_sa83A ipv_sa83O
                                of
                                { (#,#) ipv2_sa83Z [Occ=Once*] ipv3_sa840 [Occ=Once!] ->
                                      case ipv3_sa840 of {
                                        GHC.Types.False ->
                                            raiseIO# [GHC.IO.Handle.Internals.flushBuffer3
                                                      ipv2_sa83Z];
                                        GHC.Types.True ->
                                            let {
                                              sat_sa844 [Occ=Once] :: GHC.Integer.Type.Integer
                                              [LclId] =
                                                  [dt7_sa83V dt8_sa83W] \u []
                                                      case -# [dt8_sa83W dt7_sa83V] of sat_sa842 {
                                                        __DEFAULT ->
                                                            case
                                                                negateInt# [sat_sa842]
                                                            of
                                                            sat_sa843
                                                            { __DEFAULT ->
                                                                  GHC.Integer.Type.smallInteger
                                                                      sat_sa843;
                                                            };
                                                      };
                                            } in 
                                              case
                                                  GHC.IO.Device.seek
                                                      $dIODevice_sa83x
                                                      ds_sa83A
                                                      GHC.IO.Device.RelativeSeek
                                                      sat_sa844
                                                      ipv2_sa83Z
                                              of
                                              { (#,#) ipv4_sa846 [Occ=Once] _ [Occ=Dead] ->
                                                    let {
                                                      sat_sa848 [Occ=Once]
                                                        :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                                      [LclId] =
                                                          CCCS GHC.IO.Buffer.Buffer! [dt4_sa83R
                                                                                      dt5_sa83S
                                                                                      ds10_sa83T
                                                                                      dt6_sa83U
                                                                                      0#
                                                                                      0#];
                                                    } in 
                                                      case
                                                          writeMutVar# [dt_sa83C
                                                                        sat_sa848
                                                                        ipv4_sa846]
                                                      of
                                                      s2#_sa849
                                                      { __DEFAULT -> (#,#) [s2#_sa849 GHC.Tuple.()];
                                                      };
                                              };
                                      };
                                };
                            1# -> (#,#) [ipv_sa83O GHC.Tuple.()];
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.flushByteReadBuffer
  :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.IO.Handle.Internals.flushBuffer2 eta_B2 eta_B1;

GHC.IO.Handle.Internals.flushBuffer1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h__sa84a eta_sa84b]
        case h__sa84a of wild_sa84c {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       $dBufferedIO_sa84e [Occ=Once]
                                       _ [Occ=Dead]
                                       ds_sa84g [Occ=Once]
                                       _ [Occ=Dead]
                                       dt_sa84i
                                       _ [Occ=Dead]
                                       dt1_sa84k [Occ=Once]
                                       dt2_sa84l
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds4_sa84o [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt2_sa84l eta_sa84b] of {
                (#,#) ipv_sa84u [Occ=Once*] ipv1_sa84v [Occ=Once!] ->
                    case ipv1_sa84v of {
                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           ds10_sa84z [Occ=Once!]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
                          case ds10_sa84z of {
                            GHC.IO.Buffer.ReadBuffer ->
                                case readMutVar# [dt2_sa84l ipv_sa84u] of {
                                  (#,#) ipv2_sa84F [Occ=Once*] ipv3_sa84G [Occ=Once!] ->
                                      case ipv3_sa84G of {
                                        GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             ds12_sa84K [Occ=Once!]
                                                             _ [Occ=Dead]
                                                             dt12_sa84M [Occ=Once]
                                                             dt13_sa84N [Occ=Once] ->
                                            case ds12_sa84K of {
                                              GHC.IO.Buffer.ReadBuffer ->
                                                  case ==# [dt12_sa84M dt13_sa84N] of {
                                                    __DEFAULT ->
                                                        case readMutVar# [dt1_sa84k ipv2_sa84F] of {
                                                          (#,#) ipv4_sa84R [Occ=Once]
                                                                ipv5_sa84S [Occ=Once!] ->
                                                              case ipv5_sa84S of {
                                                                (,) codec_state_sa84U [Occ=Once]
                                                                    bbuf0_sa84V [Occ=Once*] ->
                                                                    case
                                                                        readMutVar# [dt2_sa84l
                                                                                     ipv4_sa84R]
                                                                    of
                                                                    { (#,#) ipv6_sa84X [Occ=Once]
                                                                            ipv7_sa84Y ->
                                                                          let {
                                                                            sat_sa856 [Occ=Once]
                                                                              :: GHC.IO.Buffer.Buffer
                                                                                   GHC.IO.Buffer.CharBufElem
                                                                            [LclId] =
                                                                                [ipv7_sa84Y] \u []
                                                                                    case
                                                                                        ipv7_sa84Y
                                                                                    of
                                                                                    { GHC.IO.Buffer.Buffer dt14_sa850 [Occ=Once]
                                                                                                           dt15_sa851 [Occ=Once]
                                                                                                           ds15_sa852 [Occ=Once]
                                                                                                           dt16_sa853 [Occ=Once]
                                                                                                           _ [Occ=Dead]
                                                                                                           _ [Occ=Dead] ->
                                                                                          GHC.IO.Buffer.Buffer [dt14_sa850
                                                                                                                dt15_sa851
                                                                                                                ds15_sa852
                                                                                                                dt16_sa853
                                                                                                                0#
                                                                                                                0#];
                                                                                    };
                                                                          } in 
                                                                            case
                                                                                writeMutVar# [dt2_sa84l
                                                                                              sat_sa856
                                                                                              ipv6_sa84X]
                                                                            of
                                                                            s2#_sa857
                                                                            { __DEFAULT ->
                                                                                  case
                                                                                      ipv7_sa84Y
                                                                                  of
                                                                                  { GHC.IO.Buffer.Buffer dt14_sa859 [Occ=Once]
                                                                                                         dt15_sa85a [Occ=Once]
                                                                                                         ds15_sa85b [Occ=Once]
                                                                                                         _ [Occ=Dead]
                                                                                                         dt17_sa85d [Occ=Once!]
                                                                                                         _ [Occ=Dead] ->
                                                                                        case
                                                                                            dt17_sa85d
                                                                                        of
                                                                                        wild7_sa85f
                                                                                        { __DEFAULT ->
                                                                                              case
                                                                                                  ds4_sa84o
                                                                                              of
                                                                                              { GHC.Base.Nothing ->
                                                                                                    let {
                                                                                                      sat_sa85p [Occ=Once]
                                                                                                        :: GHC.IO.Buffer.Buffer
                                                                                                             GHC.Word.Word8
                                                                                                      [LclId] =
                                                                                                          [bbuf0_sa84V
                                                                                                           wild7_sa85f] \u []
                                                                                                              case
                                                                                                                  bbuf0_sa84V
                                                                                                              of
                                                                                                              { GHC.IO.Buffer.Buffer dt19_sa85i [Occ=Once]
                                                                                                                                     dt20_sa85j [Occ=Once]
                                                                                                                                     ds16_sa85k [Occ=Once]
                                                                                                                                     dt21_sa85l [Occ=Once]
                                                                                                                                     dt22_sa85m [Occ=Once]
                                                                                                                                     dt23_sa85n [Occ=Once] ->
                                                                                                                    case
                                                                                                                        +# [dt22_sa85m
                                                                                                                            wild7_sa85f]
                                                                                                                    of
                                                                                                                    sat_sa85o
                                                                                                                    { __DEFAULT ->
                                                                                                                          GHC.IO.Buffer.Buffer [dt19_sa85i
                                                                                                                                                dt20_sa85j
                                                                                                                                                ds16_sa85k
                                                                                                                                                dt21_sa85l
                                                                                                                                                sat_sa85o
                                                                                                                                                dt23_sa85n];
                                                                                                                    };
                                                                                                              };
                                                                                                    } in 
                                                                                                      case
                                                                                                          writeMutVar# [dt_sa84i
                                                                                                                        sat_sa85p
                                                                                                                        s2#_sa857]
                                                                                                      of
                                                                                                      s2#1_sa85q
                                                                                                      { __DEFAULT ->
                                                                                                            GHC.IO.Handle.Internals.flushBuffer2
                                                                                                                wild_sa84c
                                                                                                                s2#1_sa85q;
                                                                                                      };
                                                                                                GHC.Base.Just decoder_sa85r [Occ=Once!] ->
                                                                                                    case
                                                                                                        decoder_sa85r
                                                                                                    of
                                                                                                    { GHC.IO.Encoding.Types.BufferCodec ds16_sa85t [Occ=Once]
                                                                                                                                        ds17_sa85u [Occ=Once]
                                                                                                                                        _ [Occ=Dead]
                                                                                                                                        _ [Occ=Dead]
                                                                                                                                        ds20_sa85x [Occ=Once!] ->
                                                                                                          case
                                                                                                              ds20_sa85x
                                                                                                                  codec_state_sa84U
                                                                                                                  s2#_sa857
                                                                                                          of
                                                                                                          { (#,#) ipv8_sa85z [Occ=Once]
                                                                                                                  _ [Occ=Dead] ->
                                                                                                                let {
                                                                                                                  sat_sa85B [Occ=Once]
                                                                                                                    :: GHC.IO.Buffer.Buffer
                                                                                                                         GHC.IO.Buffer.CharBufElem
                                                                                                                  [LclId] =
                                                                                                                      CCCS GHC.IO.Buffer.Buffer! [dt14_sa859
                                                                                                                                                  dt15_sa85a
                                                                                                                                                  ds15_sa85b
                                                                                                                                                  wild7_sa85f
                                                                                                                                                  0#
                                                                                                                                                  0#];
                                                                                                                } in 
                                                                                                                  case
                                                                                                                      GHC.IO.Handle.Internals.$wstreamEncode
                                                                                                                          ds16_sa85t
                                                                                                                          ds17_sa85u
                                                                                                                          bbuf0_sa84V
                                                                                                                          sat_sa85B
                                                                                                                          ipv8_sa85z
                                                                                                                  of
                                                                                                                  { (#,#) ipv10_sa85D [Occ=Once]
                                                                                                                          ipv11_sa85E [Occ=Once!] ->
                                                                                                                        case
                                                                                                                            ipv11_sa85E
                                                                                                                        of
                                                                                                                        { (,) bbuf1_sa85G [Occ=Once]
                                                                                                                              _ [Occ=Dead] ->
                                                                                                                              case
                                                                                                                                  writeMutVar# [dt_sa84i
                                                                                                                                                bbuf1_sa85G
                                                                                                                                                ipv10_sa85D]
                                                                                                                              of
                                                                                                                              s2#1_sa85I
                                                                                                                              { __DEFAULT ->
                                                                                                                                    GHC.IO.Handle.Internals.flushBuffer2
                                                                                                                                        wild_sa84c
                                                                                                                                        s2#1_sa85I;
                                                                                                                              };
                                                                                                                        };
                                                                                                                  };
                                                                                                          };
                                                                                                    };
                                                                                              };
                                                                                          0# ->
                                                                                              case
                                                                                                  writeMutVar# [dt_sa84i
                                                                                                                bbuf0_sa84V
                                                                                                                s2#_sa857]
                                                                                              of
                                                                                              s2#1_sa85J
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Handle.Internals.flushBuffer2
                                                                                                        wild_sa84c
                                                                                                        s2#1_sa85J;
                                                                                              };
                                                                                        };
                                                                                  };
                                                                            };
                                                                    };
                                                              };
                                                        };
                                                    1# ->
                                                        GHC.IO.Handle.Internals.flushBuffer2
                                                            wild_sa84c ipv2_sa84F;
                                                  };
                                              GHC.IO.Buffer.WriteBuffer ->
                                                  GHC.IO.Handle.Internals.flushBuffer2
                                                      wild_sa84c ipv2_sa84F;
                                            };
                                      };
                                };
                            GHC.IO.Buffer.WriteBuffer ->
                                case readMutVar# [dt_sa84i ipv_sa84u] of {
                                  (#,#) ipv2_sa85L [Occ=Once*] ipv3_sa85M [Occ=Once!] ->
                                      case ipv3_sa85M of wild3_sa85N {
                                        GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             dt12_sa85S [Occ=Once]
                                                             dt13_sa85T [Occ=Once] ->
                                            case ==# [dt12_sa85S dt13_sa85T] of {
                                              __DEFAULT ->
                                                  case
                                                      GHC.IO.BufferedIO.flushWriteBuffer
                                                          $dBufferedIO_sa84e
                                                          ds_sa84g
                                                          wild3_sa85N
                                                          ipv2_sa85L
                                                  of
                                                  { (#,#) ipv4_sa85W [Occ=Once]
                                                          ipv5_sa85X [Occ=Once] ->
                                                        case
                                                            writeMutVar# [dt_sa84i
                                                                          ipv5_sa85X
                                                                          ipv4_sa85W]
                                                        of
                                                        s2#_sa85Y
                                                        { __DEFAULT ->
                                                              (#,#) [s2#_sa85Y GHC.Tuple.()];
                                                        };
                                                  };
                                              1# -> (#,#) [ipv2_sa85L GHC.Tuple.()];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.flushBuffer
  :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.IO.Handle.Internals.flushBuffer1 eta_B2 eta_B1;

lvl21_ra7PB :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC/IO/Handle/Internals.hs:881:7-30|Just decoder"#;

lvl22_ra7PC
  :: forall dec_state. (GHC.IO.Encoding.Types.TextDecoder dec_state)
[GblId, Str=x] =
    [] \u [] Control.Exception.Base.patError lvl21_ra7PB;

GHC.IO.Handle.Internals.hLookAhead_2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Buffer.CharBuffer #)
[GblId,
 Arity=3,
 Str=<S,1*U><L,U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [h__sa85Z cbuf_sa860 eta_sa861]
        case h__sa85Z of wild_sa862 {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       $dBufferedIO_sa864 [Occ=Once]
                                       _ [Occ=Dead]
                                       ds_sa866 [Occ=Once]
                                       _ [Occ=Dead]
                                       dt_sa868
                                       _ [Occ=Dead]
                                       dt1_sa86a [Occ=Once*]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds4_sa86e [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt_sa868 eta_sa861] of {
                (#,#) ipv_sa86k [Occ=Once*] ipv1_sa86l [Occ=Once!] ->
                    case ipv1_sa86l of wild1_sa86m {
                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           dt7_sa86r [Occ=Once]
                                           dt8_sa86s [Occ=Once] ->
                          let-no-escape {
                            $j_sa86t [Occ=Once*!T[2], Dmd=<L,1*C1(C1(U(U,U)))>]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> GHC.IO.Buffer.Buffer GHC.Word.Word8
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                       GHC.IO.Buffer.CharBuffer #)
                            [LclId[JoinId(2)],
                             Arity=2,
                             Str=<S,U><L,U(U,U,U,U,U,U)>,
                             Unf=OtherCon []] =
                                sat-only [cbuf_sa860
                                          wild_sa862
                                          dt_sa868
                                          dt1_sa86a
                                          ds4_sa86e] \r [ipv2_sa86u ipv3_sa86v]
                                    case ds4_sa86e of {
                                      GHC.Base.Nothing ->
                                          let {
                                            sat_sa86x [Occ=Once]
                                              :: (dec_state_aa4pz,
                                                  GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                            [LclId] =
                                                CCCS (,)! [GHC.IO.Handle.Internals.decodeByteBuf2
                                                           ipv3_sa86v];
                                          } in 
                                            case
                                                writeMutVar# [dt1_sa86a sat_sa86x ipv2_sa86u]
                                            of
                                            s2#_sa86y
                                            { __DEFAULT ->
                                                  case
                                                      GHC.IO.Encoding.Latin1.latin5
                                                          ipv3_sa86v cbuf_sa860 s2#_sa86y
                                                  of
                                                  { (#,#) ipv4_sa86A [Occ=Once]
                                                          ipv5_sa86B [Occ=Once!] ->
                                                        case ipv5_sa86B of {
                                                          (,,) _ [Occ=Dead]
                                                               input'_sa86E
                                                               output'_sa86F [Occ=Once!] ->
                                                              case
                                                                  writeMutVar# [dt_sa868
                                                                                input'_sa86E
                                                                                ipv4_sa86A]
                                                              of
                                                              s2#1_sa86G
                                                              { __DEFAULT ->
                                                                    case
                                                                        output'_sa86F
                                                                    of
                                                                    wild4_sa86H
                                                                    { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           dt13_sa86N [Occ=Once] ->
                                                                          case
                                                                              cbuf_sa860
                                                                          of
                                                                          wild5_sa86O
                                                                          { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                                 _ [Occ=Dead]
                                                                                                 _ [Occ=Dead]
                                                                                                 _ [Occ=Dead]
                                                                                                 _ [Occ=Dead]
                                                                                                 dt18_sa86U [Occ=Once] ->
                                                                                case
                                                                                    ==# [dt13_sa86N
                                                                                         dt18_sa86U]
                                                                                of
                                                                                { __DEFAULT ->
                                                                                      (#,#) [s2#1_sa86G
                                                                                             wild4_sa86H];
                                                                                  1# ->
                                                                                      case
                                                                                          input'_sa86E
                                                                                      of
                                                                                      { GHC.IO.Buffer.Buffer ww1_sa86X [Occ=Once]
                                                                                                             ww2_sa86Y [Occ=Once]
                                                                                                             ww3_sa86Z [Occ=Once]
                                                                                                             ww4_sa870 [Occ=Once]
                                                                                                             ww5_sa871 [Occ=Once]
                                                                                                             ww6_sa872 [Occ=Once] ->
                                                                                            GHC.IO.Handle.Internals.$wreadTextDevice'
                                                                                                wild_sa862
                                                                                                ww1_sa86X
                                                                                                ww2_sa86Y
                                                                                                ww3_sa86Z
                                                                                                ww4_sa870
                                                                                                ww5_sa871
                                                                                                ww6_sa872
                                                                                                wild5_sa86O
                                                                                                s2#1_sa86G;
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      GHC.Base.Just decoder_sa873 [Occ=Once!] ->
                                          case decoder_sa873 of {
                                            GHC.IO.Encoding.Types.BufferCodec ds11_sa875 [Occ=Once]
                                                                              ds12_sa876 [Occ=Once]
                                                                              _ [Occ=Dead]
                                                                              ds14_sa878 [Occ=Once]
                                                                              _ [Occ=Dead] ->
                                                case ds14_sa878 ipv2_sa86u of {
                                                  (#,#) ipv4_sa87b [Occ=Once]
                                                        ipv5_sa87c [Occ=Once] ->
                                                      let {
                                                        sat_sa87d [Occ=Once]
                                                          :: (dec_state_aa4pz,
                                                              GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                                        [LclId] =
                                                            CCCS (,)! [ipv5_sa87c ipv3_sa86v];
                                                      } in 
                                                        case
                                                            writeMutVar# [dt1_sa86a
                                                                          sat_sa87d
                                                                          ipv4_sa87b]
                                                        of
                                                        s2#_sa87e
                                                        { __DEFAULT ->
                                                              case
                                                                  GHC.IO.Handle.Internals.$wstreamEncode
                                                                      ds11_sa875
                                                                      ds12_sa876
                                                                      ipv3_sa86v
                                                                      cbuf_sa860
                                                                      s2#_sa87e
                                                              of
                                                              { (#,#) ipv6_sa87g [Occ=Once]
                                                                      ipv7_sa87h [Occ=Once!] ->
                                                                    case ipv7_sa87h of {
                                                                      (,) bbuf2_sa87j
                                                                          cbuf'_sa87k [Occ=Once!] ->
                                                                          case
                                                                              writeMutVar# [dt_sa868
                                                                                            bbuf2_sa87j
                                                                                            ipv6_sa87g]
                                                                          of
                                                                          s2#1_sa87l
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    cbuf'_sa87k
                                                                                of
                                                                                wild5_sa87m
                                                                                { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                                       _ [Occ=Dead]
                                                                                                       _ [Occ=Dead]
                                                                                                       _ [Occ=Dead]
                                                                                                       _ [Occ=Dead]
                                                                                                       dt13_sa87s [Occ=Once] ->
                                                                                      case
                                                                                          cbuf_sa860
                                                                                      of
                                                                                      wild6_sa87t
                                                                                      { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                                             _ [Occ=Dead]
                                                                                                             _ [Occ=Dead]
                                                                                                             _ [Occ=Dead]
                                                                                                             _ [Occ=Dead]
                                                                                                             dt18_sa87z [Occ=Once] ->
                                                                                            case
                                                                                                ==# [dt13_sa87s
                                                                                                     dt18_sa87z]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  (#,#) [s2#1_sa87l
                                                                                                         wild5_sa87m];
                                                                                              1# ->
                                                                                                  case
                                                                                                      bbuf2_sa87j
                                                                                                  of
                                                                                                  { GHC.IO.Buffer.Buffer ww1_sa87C [Occ=Once]
                                                                                                                         ww2_sa87D [Occ=Once]
                                                                                                                         ww3_sa87E [Occ=Once]
                                                                                                                         ww4_sa87F [Occ=Once]
                                                                                                                         ww5_sa87G [Occ=Once]
                                                                                                                         ww6_sa87H [Occ=Once] ->
                                                                                                        GHC.IO.Handle.Internals.$wreadTextDevice'
                                                                                                            wild_sa862
                                                                                                            ww1_sa87C
                                                                                                            ww2_sa87D
                                                                                                            ww3_sa87E
                                                                                                            ww4_sa87F
                                                                                                            ww5_sa87G
                                                                                                            ww6_sa87H
                                                                                                            wild6_sa87t
                                                                                                            s2#1_sa87l;
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                };
                                          };
                                    };
                          } in 
                            case ==# [dt7_sa86r dt8_sa86s] of {
                              __DEFAULT -> $j_sa86t ipv_sa86k wild1_sa86m;
                              1# ->
                                  case
                                      GHC.IO.BufferedIO.fillReadBuffer
                                          $dBufferedIO_sa864 ds_sa866 wild1_sa86m ipv_sa86k
                                  of
                                  { (#,#) ipv2_sa87K [Occ=Once*] ipv3_sa87L [Occ=Once!] ->
                                        case ipv3_sa87L of {
                                          (,) r_sa87N [Occ=Once!] bbuf1_sa87O [Occ=Once] ->
                                              case r_sa87N of {
                                                GHC.Types.I# x_sa87Q [Occ=Once!] ->
                                                    case x_sa87Q of {
                                                      __DEFAULT -> $j_sa86t ipv2_sa87K bbuf1_sa87O;
                                                      0# ->
                                                          raiseIO# [GHC.IO.Handle.Internals.hLookAhead_3
                                                                    ipv2_sa87K];
                                                    };
                                              };
                                        };
                                  };
                            };
                    };
              };
        };
GHC.IO.Handle.Internals.$wreadTextDevice' [InlPrag=NOUSERINLINE[0],
                                           Occ=LoopBreaker]
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> GHC.IO.Buffer.BufferState
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Buffer.CharBuffer #)
[GblId,
 Arity=9,
 Str=<S,1*U><S,U><L,U><L,U><L,U><S,U><S,U><L,U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sa87T
           ww_sa87U
           ww1_sa87V
           ww2_sa87W
           ww3_sa87X
           ww4_sa87Y
           ww5_sa87Z
           w1_sa880
           w2_sa881]
        case w_sa87T of wild_sa882 {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       $dBufferedIO_sa884 [Occ=Once]
                                       _ [Occ=Dead]
                                       ds_sa886 [Occ=Once]
                                       _ [Occ=Dead]
                                       dt_sa888 [Occ=Once*]
                                       _ [Occ=Dead]
                                       dt1_sa88a [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds4_sa88e [Occ=Once*!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case -# [ww5_sa87Z ww4_sa87Y] of elems_sa88j [Dmd=<S,U>] {
                __DEFAULT ->
                    case int2Word# [elems_sa88j] of sat_sa88m {
                      __DEFAULT ->
                          case plusAddr# [ww_sa87U ww4_sa87Y] of sat_sa88l {
                            __DEFAULT ->
                                case
                                    __pkg_ccall base-4.11.0.0 [ww_sa87U
                                                               sat_sa88l
                                                               sat_sa88m
                                                               w2_sa881]
                                of
                                { (#,#) ds9_sa88o [Occ=Once] _ [Occ=Dead] ->
                                      case touch# [ww1_sa87V ds9_sa88o] of s'_sa88q {
                                        __DEFAULT ->
                                            let {
                                              sat_sa88r [Occ=Once]
                                                :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                              [LclId] =
                                                  CCCS GHC.IO.Buffer.Buffer! [ww_sa87U
                                                                              ww1_sa87V
                                                                              ww2_sa87W
                                                                              ww3_sa87X
                                                                              0#
                                                                              elems_sa88j];
                                            } in 
                                              case
                                                  GHC.IO.BufferedIO.fillReadBuffer
                                                      $dBufferedIO_sa884 ds_sa886 sat_sa88r s'_sa88q
                                              of
                                              { (#,#) ipv_sa88t [Occ=Once*]
                                                      ipv1_sa88u [Occ=Once!] ->
                                                    case ipv1_sa88u of {
                                                      (,) r_sa88w [Occ=Once!] bbuf2_sa88x ->
                                                          case r_sa88w of {
                                                            GHC.Types.I# x_sa88z [Occ=Once!] ->
                                                                case x_sa88z of {
                                                                  __DEFAULT ->
                                                                      case ds4_sa88e of {
                                                                        GHC.Base.Nothing ->
                                                                            lvl22_ra7PC;
                                                                        GHC.Base.Just decoder_sa88D [Occ=Once!] ->
                                                                            case decoder_sa88D of {
                                                                              GHC.IO.Encoding.Types.BufferCodec ds12_sa88F [Occ=Once]
                                                                                                                ds13_sa88G [Occ=Once]
                                                                                                                _ [Occ=Dead]
                                                                                                                ds15_sa88I [Occ=Once]
                                                                                                                _ [Occ=Dead] ->
                                                                                  case
                                                                                      ds15_sa88I
                                                                                          ipv_sa88t
                                                                                  of
                                                                                  { (#,#) ipv2_sa88L [Occ=Once]
                                                                                          ipv3_sa88M [Occ=Once] ->
                                                                                        let {
                                                                                          sat_sa88N [Occ=Once]
                                                                                            :: (dec_state_aa4ra,
                                                                                                GHC.IO.Buffer.Buffer
                                                                                                  GHC.Word.Word8)
                                                                                          [LclId] =
                                                                                              CCCS (,)! [ipv3_sa88M
                                                                                                         bbuf2_sa88x];
                                                                                        } in 
                                                                                          case
                                                                                              writeMutVar# [dt1_sa88a
                                                                                                            sat_sa88N
                                                                                                            ipv2_sa88L]
                                                                                          of
                                                                                          s2#_sa88O
                                                                                          { __DEFAULT ->
                                                                                                case
                                                                                                    GHC.IO.Handle.Internals.$wstreamEncode
                                                                                                        ds12_sa88F
                                                                                                        ds13_sa88G
                                                                                                        bbuf2_sa88x
                                                                                                        w1_sa880
                                                                                                        s2#_sa88O
                                                                                                of
                                                                                                { (#,#) ipv4_sa88Q [Occ=Once]
                                                                                                        ipv5_sa88R [Occ=Once!] ->
                                                                                                      case
                                                                                                          ipv5_sa88R
                                                                                                      of
                                                                                                      { (,) bbuf3_sa88T
                                                                                                            cbuf1_sa88U [Occ=Once!] ->
                                                                                                            case
                                                                                                                writeMutVar# [dt_sa888
                                                                                                                              bbuf3_sa88T
                                                                                                                              ipv4_sa88Q]
                                                                                                            of
                                                                                                            s2#1_sa88V
                                                                                                            { __DEFAULT ->
                                                                                                                  case
                                                                                                                      w1_sa880
                                                                                                                  of
                                                                                                                  { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                                                                         _ [Occ=Dead]
                                                                                                                                         _ [Occ=Dead]
                                                                                                                                         _ [Occ=Dead]
                                                                                                                                         _ [Occ=Dead]
                                                                                                                                         dt8_sa892 [Occ=Once] ->
                                                                                                                        case
                                                                                                                            cbuf1_sa88U
                                                                                                                        of
                                                                                                                        wild9_sa893
                                                                                                                        { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                                                                               _ [Occ=Dead]
                                                                                                                                               _ [Occ=Dead]
                                                                                                                                               _ [Occ=Dead]
                                                                                                                                               _ [Occ=Dead]
                                                                                                                                               dt13_sa899 [Occ=Once] ->
                                                                                                                              case
                                                                                                                                  ==# [dt8_sa892
                                                                                                                                       dt13_sa899]
                                                                                                                              of
                                                                                                                              { __DEFAULT ->
                                                                                                                                    (#,#) [s2#1_sa88V
                                                                                                                                           wild9_sa893];
                                                                                                                                1# ->
                                                                                                                                    case
                                                                                                                                        bbuf3_sa88T
                                                                                                                                    of
                                                                                                                                    { GHC.IO.Buffer.Buffer ww7_sa89c [Occ=Once]
                                                                                                                                                           ww8_sa89d [Occ=Once]
                                                                                                                                                           ww9_sa89e [Occ=Once]
                                                                                                                                                           ww10_sa89f [Occ=Once]
                                                                                                                                                           ww11_sa89g [Occ=Once]
                                                                                                                                                           ww12_sa89h [Occ=Once] ->
                                                                                                                                          GHC.IO.Handle.Internals.$wreadTextDevice'
                                                                                                                                              wild_sa882
                                                                                                                                              ww7_sa89c
                                                                                                                                              ww8_sa89d
                                                                                                                                              ww9_sa89e
                                                                                                                                              ww10_sa89f
                                                                                                                                              ww11_sa89g
                                                                                                                                              ww12_sa89h
                                                                                                                                              wild9_sa893
                                                                                                                                              s2#1_sa88V;
                                                                                                                                    };
                                                                                                                              };
                                                                                                                        };
                                                                                                                  };
                                                                                                            };
                                                                                                      };
                                                                                                };
                                                                                          };
                                                                                  };
                                                                            };
                                                                      };
                                                                  0# ->
                                                                      case
                                                                          bbuf2_sa88x
                                                                      of
                                                                      wild5_sa89i
                                                                      { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             dt7_sa89n [Occ=Once]
                                                                                             dt8_sa89o [Occ=Once] ->
                                                                            case
                                                                                ==# [dt7_sa89n
                                                                                     dt8_sa89o]
                                                                            of
                                                                            { __DEFAULT ->
                                                                                  case
                                                                                      ds4_sa88e
                                                                                  of
                                                                                  { GHC.Base.Nothing ->
                                                                                        lvl22_ra7PC;
                                                                                    GHC.Base.Just decoder_sa89s [Occ=Once!] ->
                                                                                        case
                                                                                            decoder_sa89s
                                                                                        of
                                                                                        { GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                                                            ds14_sa89v [Occ=Once!]
                                                                                                                            _ [Occ=Dead]
                                                                                                                            _ [Occ=Dead]
                                                                                                                            _ [Occ=Dead] ->
                                                                                              case
                                                                                                  ds14_sa89v
                                                                                                      wild5_sa89i
                                                                                                      w1_sa880
                                                                                                      ipv_sa88t
                                                                                              of
                                                                                              { (#,#) ipv2_sa89A [Occ=Once]
                                                                                                      ipv3_sa89B [Occ=Once!] ->
                                                                                                    case
                                                                                                        ipv3_sa89B
                                                                                                    of
                                                                                                    { (,) bbuf3_sa89D [Occ=Once]
                                                                                                          cbuf1_sa89E [Occ=Once!] ->
                                                                                                          case
                                                                                                              writeMutVar# [dt_sa888
                                                                                                                            bbuf3_sa89D
                                                                                                                            ipv2_sa89A]
                                                                                                          of
                                                                                                          s2#_sa89F
                                                                                                          { __DEFAULT ->
                                                                                                                case
                                                                                                                    cbuf1_sa89E
                                                                                                                of
                                                                                                                wild9_sa89G
                                                                                                                { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                                                                       _ [Occ=Dead]
                                                                                                                                       _ [Occ=Dead]
                                                                                                                                       _ [Occ=Dead]
                                                                                                                                       _ [Occ=Dead]
                                                                                                                                       dt13_sa89M [Occ=Once] ->
                                                                                                                      case
                                                                                                                          w1_sa880
                                                                                                                      of
                                                                                                                      { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                                                                             _ [Occ=Dead]
                                                                                                                                             _ [Occ=Dead]
                                                                                                                                             _ [Occ=Dead]
                                                                                                                                             _ [Occ=Dead]
                                                                                                                                             dt18_sa89T [Occ=Once] ->
                                                                                                                            case
                                                                                                                                ==# [dt13_sa89M
                                                                                                                                     dt18_sa89T]
                                                                                                                            of
                                                                                                                            { __DEFAULT ->
                                                                                                                                  (#,#) [s2#_sa89F
                                                                                                                                         wild9_sa89G];
                                                                                                                              1# ->
                                                                                                                                  GHC.IO.Handle.Internals.hLookAhead_2
                                                                                                                                      wild_sa882
                                                                                                                                      wild9_sa89G
                                                                                                                                      s2#_sa89F;
                                                                                                                            };
                                                                                                                      };
                                                                                                                };
                                                                                                          };
                                                                                                    };
                                                                                              };
                                                                                        };
                                                                                  };
                                                                              1# ->
                                                                                  raiseIO# [GHC.IO.Handle.Internals.hLookAhead_3
                                                                                            ipv_sa88t];
                                                                            };
                                                                      };
                                                                };
                                                          };
                                                    };
                                              };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.readTextDevice
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Types.IO GHC.IO.Buffer.CharBuffer
[GblId,
 Arity=3,
 Str=<S,1*U><L,U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.Internals.hLookAhead_2 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.Internals.hLookAhead_1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Char #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle__sa89V eta_sa89W]
        case handle__sa89V of wild_sa89X {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       dt2_sa8a6
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt2_sa8a6 eta_sa89W] of {
                (#,#) ipv_sa8af [Occ=Once*] ipv1_sa8ag [Occ=Once!] ->
                    case ipv1_sa8ag of wild1_sa8ah {
                      GHC.IO.Buffer.Buffer dt4_sa8ai [Occ=Once*]
                                           dt5_sa8aj [Occ=Once*]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           dt7_sa8am
                                           dt8_sa8an [Occ=Once] ->
                          case ==# [dt7_sa8am dt8_sa8an] of {
                            __DEFAULT ->
                                case writeMutVar# [dt2_sa8a6 wild1_sa8ah ipv_sa8af] of s2#_sa8ap {
                                  __DEFAULT ->
                                      case readWideCharOffAddr# [dt4_sa8ai dt7_sa8am s2#_sa8ap] of {
                                        (#,#) ipv2_sa8ar [Occ=Once] ipv3_sa8as [Occ=Once] ->
                                            case touch# [dt5_sa8aj ipv2_sa8ar] of s'_sa8at {
                                              __DEFAULT ->
                                                  let {
                                                    sat_sa8au [Occ=Once] :: GHC.Types.Char
                                                    [LclId] =
                                                        CCCS GHC.Types.C#! [ipv3_sa8as];
                                                  } in  (#,#) [s'_sa8at sat_sa8au];
                                            };
                                      };
                                };
                            1# ->
                                case
                                    GHC.IO.Handle.Internals.hLookAhead_2
                                        wild_sa89X wild1_sa8ah ipv_sa8af
                                of
                                { (#,#) ipv2_sa8aw [Occ=Once] ipv3_sa8ax [Occ=Once] ->
                                      case
                                          writeMutVar# [dt2_sa8a6 ipv3_sa8ax ipv2_sa8aw]
                                      of
                                      s2#_sa8ay
                                      { __DEFAULT ->
                                            case
                                                readWideCharOffAddr# [dt4_sa8ai dt7_sa8am s2#_sa8ay]
                                            of
                                            { (#,#) ipv4_sa8aA [Occ=Once] ipv5_sa8aB [Occ=Once] ->
                                                  case touch# [dt5_sa8aj ipv4_sa8aA] of s'_sa8aC {
                                                    __DEFAULT ->
                                                        let {
                                                          sat_sa8aD [Occ=Once] :: GHC.Types.Char
                                                          [LclId] =
                                                              CCCS GHC.Types.C#! [ipv5_sa8aB];
                                                        } in  (#,#) [s'_sa8aC sat_sa8aD];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.hLookAhead_
  :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO GHC.Types.Char
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.IO.Handle.Internals.hLookAhead_1 eta_B2 eta_B1;

GHC.IO.Handle.Internals.hClose_help2
  :: GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Base.Maybe GHC.Exception.SomeException #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [e1_sa8aE s_sa8aF]
        let {
          sat_sa8aG [Occ=Once] :: GHC.Base.Maybe GHC.Exception.SomeException
          [LclId] =
              CCCS GHC.Base.Just! [e1_sa8aE];
        } in  (#,#) [s_sa8aF sat_sa8aG];

GHC.IO.Handle.Internals.hClose_help1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__,
            GHC.Base.Maybe GHC.Exception.SomeException) #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle__sa8aH eta_sa8aI]
        case handle__sa8aH of wild_sa8aJ {
          GHC.IO.Handle.Types.Handle__ $dIODevice_sa8aK
                                       $dBufferedIO_sa8aL
                                       $dTypeable_sa8aM [Occ=Once*]
                                       ds1_sa8aN
                                       ds2_sa8aO [Occ=Once!]
                                       dt_sa8aP
                                       ds3_sa8aQ [Occ=Once*]
                                       dt1_sa8aR [Occ=Once*]
                                       dt2_sa8aS
                                       dt3_sa8aT
                                       ds4_sa8aU [Occ=Once!]
                                       ds5_sa8aV
                                       ds6_sa8aW [Occ=Once*]
                                       ds7_sa8aX [Occ=Once*]
                                       ds8_sa8aY [Occ=Once*]
                                       ds9_sa8aZ ->
              case ds2_sa8aO of {
                __DEFAULT ->
                    let {
                      sat_sa8bs [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 GHC.Base.Maybe GHC.Exception.SomeException #)
                      [LclId] =
                          [$dBufferedIO_sa8aL ds1_sa8aN dt_sa8aP] \r [s_sa8b1]
                              case readMutVar# [dt_sa8aP s_sa8b1] of {
                                (#,#) ipv_sa8b3 [Occ=Once*] ipv1_sa8b4 [Occ=Once!] ->
                                    case ipv1_sa8b4 of {
                                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           ds_sa8b8 [Occ=Once!]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead] ->
                                          case ds_sa8b8 of {
                                            GHC.IO.Buffer.ReadBuffer ->
                                                (#,#) [ipv_sa8b3 GHC.Base.Nothing];
                                            GHC.IO.Buffer.WriteBuffer ->
                                                case readMutVar# [dt_sa8aP ipv_sa8b3] of {
                                                  (#,#) ipv2_sa8be [Occ=Once*]
                                                        ipv3_sa8bf [Occ=Once!] ->
                                                      case ipv3_sa8bf of wild4_sa8bg {
                                                        GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                             _ [Occ=Dead]
                                                                             _ [Occ=Dead]
                                                                             _ [Occ=Dead]
                                                                             dt12_sa8bl [Occ=Once]
                                                                             dt13_sa8bm [Occ=Once] ->
                                                            case ==# [dt12_sa8bl dt13_sa8bm] of {
                                                              __DEFAULT ->
                                                                  case
                                                                      GHC.IO.BufferedIO.flushWriteBuffer
                                                                          $dBufferedIO_sa8aL
                                                                          ds1_sa8aN
                                                                          wild4_sa8bg
                                                                          ipv2_sa8be
                                                                  of
                                                                  { (#,#) ipv4_sa8bp [Occ=Once]
                                                                          ipv5_sa8bq [Occ=Once] ->
                                                                        case
                                                                            writeMutVar# [dt_sa8aP
                                                                                          ipv5_sa8bq
                                                                                          ipv4_sa8bp]
                                                                        of
                                                                        s2#_sa8br
                                                                        { __DEFAULT ->
                                                                              (#,#) [s2#_sa8br
                                                                                     GHC.Base.Nothing];
                                                                        };
                                                                  };
                                                              1# ->
                                                                  (#,#) [ipv2_sa8be
                                                                         GHC.Base.Nothing];
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                    } in 
                      case
                          catch# [sat_sa8bs GHC.IO.Handle.Internals.hClose_help2 eta_sa8aI]
                      of
                      { (#,#) ipv_sa8bu [Occ=Once*] ipv1_sa8bv [Occ=Once*!] ->
                            let-no-escape {
                              $j_sa8bw [Occ=Once*!T[2], Dmd=<C(C(S)),1*C1(C1(U(U,U)))>]
                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                   -> GHC.Base.Maybe GHC.Exception.SomeException
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         (GHC.IO.Handle.Types.Handle__,
                                          GHC.Base.Maybe GHC.Exception.SomeException) #)
                              [LclId[JoinId(2)], Arity=2, Str=<S,U><L,1*U>, Unf=OtherCon []] =
                                  sat-only [$dIODevice_sa8aK
                                            $dBufferedIO_sa8aL
                                            $dTypeable_sa8aM
                                            ds1_sa8aN
                                            dt_sa8aP
                                            ds3_sa8aQ
                                            dt1_sa8aR
                                            dt2_sa8aS
                                            dt3_sa8aT
                                            ds4_sa8aU
                                            ds5_sa8aV
                                            ds6_sa8aW
                                            ds7_sa8aX
                                            ds8_sa8aY
                                            ds9_sa8aZ
                                            ipv1_sa8bv] \r [ipv2_sa8bx ipv3_sa8by]
                                      case
                                          writeMutVar# [dt3_sa8aT
                                                        GHC.IO.Handle.Types.BufferListNil
                                                        ipv2_sa8bx]
                                      of
                                      s2#_sa8bz
                                      { __DEFAULT ->
                                            case
                                                writeMutVar# [dt2_sa8aS
                                                              GHC.IO.Handle.Internals.noCharBuffer
                                                              s2#_sa8bz]
                                            of
                                            s2#1_sa8bA
                                            { __DEFAULT ->
                                                  case
                                                      writeMutVar# [dt_sa8aP
                                                                    GHC.IO.Handle.Internals.noByteBuffer
                                                                    s2#1_sa8bA]
                                                  of
                                                  s2#2_sa8bB
                                                  { __DEFAULT ->
                                                        let-no-escape {
                                                          $w$j_sa8bC [InlPrag=NOUSERINLINE[0],
                                                                      Occ=Once*!T[1],
                                                                      Dmd=<L,1*C1(U(U,U))>]
                                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     (GHC.IO.Handle.Types.Handle__,
                                                                      GHC.Base.Maybe
                                                                        GHC.Exception.SomeException) #)
                                                          [LclId[JoinId(1)],
                                                           Arity=1,
                                                           Str=<S,U>,
                                                           Unf=OtherCon []] =
                                                              sat-only [$dIODevice_sa8aK
                                                                        $dBufferedIO_sa8aL
                                                                        $dTypeable_sa8aM
                                                                        ds1_sa8aN
                                                                        dt_sa8aP
                                                                        ds3_sa8aQ
                                                                        dt1_sa8aR
                                                                        dt2_sa8aS
                                                                        dt3_sa8aT
                                                                        ds4_sa8aU
                                                                        ds5_sa8aV
                                                                        ds6_sa8aW
                                                                        ds7_sa8aX
                                                                        ds8_sa8aY
                                                                        ds9_sa8aZ
                                                                        ipv1_sa8bv
                                                                        ipv3_sa8by] \r [w_sa8bD]
                                                                  case ds4_sa8aU of wild2_sa8bE {
                                                                    GHC.Base.Nothing ->
                                                                        let {
                                                                          sat_sa8bI [Occ=Once]
                                                                            :: GHC.Base.Maybe
                                                                                 GHC.Exception.SomeException
                                                                          [LclId] =
                                                                              [ipv1_sa8bv
                                                                               ipv3_sa8by] \u []
                                                                                  case
                                                                                      ipv1_sa8bv
                                                                                  of
                                                                                  wild3_sa8bG
                                                                                  { GHC.Base.Nothing ->
                                                                                        ipv3_sa8by;
                                                                                    GHC.Base.Just _ [Occ=Dead] ->
                                                                                        wild3_sa8bG;
                                                                                  }; } in
                                                                        let {
                                                                          sat_sa8bF [Occ=Once]
                                                                            :: GHC.IO.Handle.Types.Handle__
                                                                          [LclId] =
                                                                              CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sa8aK
                                                                                                                  $dBufferedIO_sa8aL
                                                                                                                  $dTypeable_sa8aM
                                                                                                                  ds1_sa8aN
                                                                                                                  GHC.IO.Handle.Types.ClosedHandle
                                                                                                                  dt_sa8aP
                                                                                                                  ds3_sa8aQ
                                                                                                                  dt1_sa8aR
                                                                                                                  dt2_sa8aS
                                                                                                                  dt3_sa8aT
                                                                                                                  GHC.Base.Nothing
                                                                                                                  ds5_sa8aV
                                                                                                                  ds6_sa8aW
                                                                                                                  ds7_sa8aX
                                                                                                                  ds8_sa8aY
                                                                                                                  ds9_sa8aZ]; } in
                                                                        let {
                                                                          sat_sa8bJ [Occ=Once]
                                                                            :: (GHC.IO.Handle.Types.Handle__,
                                                                                GHC.Base.Maybe
                                                                                  GHC.Exception.SomeException)
                                                                          [LclId] =
                                                                              CCCS (,)! [sat_sa8bF
                                                                                         sat_sa8bI];
                                                                        } in 
                                                                          (#,#) [w_sa8bD sat_sa8bJ];
                                                                    GHC.Base.Just d_sa8bK [Occ=Once!] ->
                                                                        case d_sa8bK of {
                                                                          GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                                            _ [Occ=Dead]
                                                                                                            ds14_sa8bO [Occ=Once]
                                                                                                            _ [Occ=Dead]
                                                                                                            _ [Occ=Dead] ->
                                                                              case
                                                                                  ds14_sa8bO w_sa8bD
                                                                              of
                                                                              { (#,#) ipv4_sa8bS [Occ=Once]
                                                                                      _ [Occ=Dead] ->
                                                                                    let {
                                                                                      sat_sa8bX [Occ=Once]
                                                                                        :: GHC.Base.Maybe
                                                                                             GHC.Exception.SomeException
                                                                                      [LclId] =
                                                                                          [ipv1_sa8bv
                                                                                           ipv3_sa8by] \u []
                                                                                              case
                                                                                                  ipv1_sa8bv
                                                                                              of
                                                                                              wild4_sa8bV
                                                                                              { GHC.Base.Nothing ->
                                                                                                    ipv3_sa8by;
                                                                                                GHC.Base.Just _ [Occ=Dead] ->
                                                                                                    wild4_sa8bV;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_sa8bU [Occ=Once]
                                                                                        :: GHC.IO.Handle.Types.Handle__
                                                                                      [LclId] =
                                                                                          CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sa8aK
                                                                                                                              $dBufferedIO_sa8aL
                                                                                                                              $dTypeable_sa8aM
                                                                                                                              ds1_sa8aN
                                                                                                                              GHC.IO.Handle.Types.ClosedHandle
                                                                                                                              dt_sa8aP
                                                                                                                              ds3_sa8aQ
                                                                                                                              dt1_sa8aR
                                                                                                                              dt2_sa8aS
                                                                                                                              dt3_sa8aT
                                                                                                                              wild2_sa8bE
                                                                                                                              ds5_sa8aV
                                                                                                                              ds6_sa8aW
                                                                                                                              ds7_sa8aX
                                                                                                                              ds8_sa8aY
                                                                                                                              ds9_sa8aZ]; } in
                                                                                    let {
                                                                                      sat_sa8bY [Occ=Once]
                                                                                        :: (GHC.IO.Handle.Types.Handle__,
                                                                                            GHC.Base.Maybe
                                                                                              GHC.Exception.SomeException)
                                                                                      [LclId] =
                                                                                          CCCS (,)! [sat_sa8bU
                                                                                                     sat_sa8bX];
                                                                                    } in 
                                                                                      (#,#) [ipv4_sa8bS
                                                                                             sat_sa8bY];
                                                                              };
                                                                        };
                                                                  };
                                                        } in 
                                                          case ds5_sa8aV of {
                                                            GHC.Base.Nothing ->
                                                                $w$j_sa8bC s2#2_sa8bB;
                                                            GHC.Base.Just d_sa8c0 [Occ=Once!] ->
                                                                case d_sa8c0 of {
                                                                  GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                                    _ [Occ=Dead]
                                                                                                    ds14_sa8c4 [Occ=Once]
                                                                                                    _ [Occ=Dead]
                                                                                                    _ [Occ=Dead] ->
                                                                      case
                                                                          ds14_sa8c4 s2#2_sa8bB
                                                                      of
                                                                      { (#,#) ipv4_sa8c8 [Occ=Once]
                                                                              _ [Occ=Dead] ->
                                                                            $w$j_sa8bC ipv4_sa8c8;
                                                                      };
                                                                };
                                                          };
                                                  };
                                            };
                                      };
                            } in 
                              case ds9_sa8aZ of {
                                GHC.Base.Nothing ->
                                    let {
                                      sat_sa8cf [Occ=Once]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                 GHC.Base.Maybe GHC.Exception.SomeException #)
                                      [LclId] =
                                          [$dIODevice_sa8aK ds1_sa8aN] \r [s_sa8cb]
                                              case
                                                  GHC.IO.Device.close
                                                      $dIODevice_sa8aK ds1_sa8aN s_sa8cb
                                              of
                                              { (#,#) ipv2_sa8cd [Occ=Once] _ [Occ=Dead] ->
                                                    (#,#) [ipv2_sa8cd GHC.Base.Nothing];
                                              };
                                    } in 
                                      case
                                          catch# [sat_sa8cf
                                                  GHC.IO.Handle.Internals.hClose_help2
                                                  ipv_sa8bu]
                                      of
                                      { (#,#) ipv2_sa8ch [Occ=Once] ipv3_sa8ci [Occ=Once] ->
                                            $j_sa8bw ipv2_sa8ch ipv3_sa8ci;
                                      };
                                GHC.Base.Just _ [Occ=Dead] -> $j_sa8bw ipv_sa8bu GHC.Base.Nothing;
                              };
                      };
                GHC.IO.Handle.Types.ClosedHandle ->
                    let {
                      sat_sa8ck [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__,
                            GHC.Base.Maybe GHC.Exception.SomeException)
                      [LclId] =
                          CCCS (,)! [wild_sa8aJ GHC.Base.Nothing];
                    } in  (#,#) [eta_sa8aI sat_sa8ck];
              };
        };

GHC.IO.Handle.Internals.hClose_help
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Types.IO
          (GHC.IO.Handle.Types.Handle__,
           GHC.Base.Maybe GHC.Exception.SomeException)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.IO.Handle.Internals.hClose_help1 eta_B2 eta_B1;

GHC.IO.Handle.Internals.handleFinalizer1
  :: GHC.IO.FilePath
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,A><S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [fp_sa8cl m_sa8cm s_sa8cn]
        case m_sa8cm of {
          GHC.MVar.MVar mvar#_sa8cp ->
              case takeMVar# [mvar#_sa8cp s_sa8cn] of {
                (#,#) ipv_sa8cr [Occ=Once] ipv1_sa8cs [Occ=Once] ->
                    case GHC.IO.Handle.Internals.hClose_help1 ipv1_sa8cs ipv_sa8cr of {
                      (#,#) ipv2_sa8cu [Occ=Once] ipv3_sa8cv [Occ=Once!] ->
                          case ipv3_sa8cv of {
                            (,) handle_'_sa8cx [Occ=Once] _ [Occ=Dead] ->
                                case
                                    putMVar# [mvar#_sa8cp handle_'_sa8cx ipv2_sa8cu]
                                of
                                s2#_sa8cz
                                { __DEFAULT -> (#,#) [s2#_sa8cz GHC.Tuple.()];
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.handleFinalizer
  :: GHC.IO.FilePath
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
[GblId, Arity=3, Str=<L,A><S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.Internals.handleFinalizer1 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.Internals.mkDuplexHandle4
  :: GHC.Base.Maybe
       (GHC.IO.FilePath
        -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ())
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.IO.Handle.Internals.handleFinalizer1];

GHC.IO.Handle.Internals.mkFileHandle1
  :: forall dev.
     (GHC.IO.Device.IODevice dev, GHC.IO.BufferedIO.BufferedIO dev,
      Data.Typeable.Internal.Typeable dev) =>
     dev
     -> GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.NewlineMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId,
 Arity=9,
 Str=<L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U)><L,U><L,U><L,U><L,1*U><S,U><L,U(U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [$dIODevice_sa8cA
           $dBufferedIO_sa8cB
           $dTypeable_sa8cC
           dev1_sa8cD
           filepath_sa8cE
           iomode_sa8cF
           mb_codec_sa8cG
           tr_newlines_sa8cH
           eta_sa8cI]
        let {
          sat_sa8cK [Occ=Once] :: GHC.IO.Handle.Types.HandleType
          [LclId] =
              [iomode_sa8cF] \u []
                  case iomode_sa8cF of {
                    GHC.IO.IOMode.ReadMode -> GHC.IO.Handle.Types.ReadHandle [];
                    GHC.IO.IOMode.WriteMode -> GHC.IO.Handle.Types.WriteHandle [];
                    GHC.IO.IOMode.AppendMode -> GHC.IO.Handle.Types.AppendHandle [];
                    GHC.IO.IOMode.ReadWriteMode ->
                        GHC.IO.Handle.Types.ReadWriteHandle [];
                  };
        } in 
          GHC.IO.Handle.Internals.mkDuplexHandle5
              $dIODevice_sa8cA
              $dBufferedIO_sa8cB
              $dTypeable_sa8cC
              dev1_sa8cD
              filepath_sa8cE
              sat_sa8cK
              GHC.Types.True
              mb_codec_sa8cG
              tr_newlines_sa8cH
              GHC.IO.Handle.Internals.mkDuplexHandle4
              GHC.Base.Nothing
              eta_sa8cI;

GHC.IO.Handle.Internals.mkFileHandle
  :: forall dev.
     (GHC.IO.Device.IODevice dev, GHC.IO.BufferedIO.BufferedIO dev,
      Data.Typeable.Internal.Typeable dev) =>
     dev
     -> GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.NewlineMode
     -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId,
 Arity=9,
 Str=<L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U)><L,U><L,U><L,U><L,1*U><S,U><L,U(U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B9
           eta_B8
           eta_B7
           eta_B6
           eta_B5
           eta_B4
           eta_B3
           eta_B2
           eta_B1]
        GHC.IO.Handle.Internals.mkFileHandle1
            eta_B9 eta_B8 eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

lvl23_ra7PD :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Pattern match failure in do expression at GHC/IO/Handle/Internals.hs:686:3-33"#;

GHC.IO.Handle.Internals.mkDuplexHandle3
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_sa8cL]
        case GHC.CString.unpackCString# lvl23_ra7PD of sat_sa8cM {
          __DEFAULT -> GHC.IO.failIO1 sat_sa8cM eta_sa8cL;
        };

lvl24_ra7PE :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Pattern match failure in do expression at GHC/IO/Handle/Internals.hs:680:3-35"#;

GHC.IO.Handle.Internals.mkDuplexHandle2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_sa8cN]
        case GHC.CString.unpackCString# lvl24_ra7PE of sat_sa8cO {
          __DEFAULT -> GHC.IO.failIO1 sat_sa8cO eta_sa8cN;
        };

GHC.IO.Handle.Internals.mkDuplexHandle1
  :: forall dev.
     (GHC.IO.Device.IODevice dev, GHC.IO.BufferedIO.BufferedIO dev,
      Data.Typeable.Internal.Typeable dev) =>
     dev
     -> GHC.IO.FilePath
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.NewlineMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId,
 Arity=8,
 Str=<L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U)><L,U><L,U><L,U><S,U><L,U(U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [$dIODevice_sa8cP
           $dBufferedIO_sa8cQ
           $dTypeable_sa8cR
           dev1_sa8cS
           filepath_sa8cT
           mb_codec_sa8cU
           tr_newlines_sa8cV
           s_sa8cW]
        case
            GHC.IO.Handle.Internals.mkDuplexHandle5
                $dIODevice_sa8cP
                $dBufferedIO_sa8cQ
                $dTypeable_sa8cR
                dev1_sa8cS
                filepath_sa8cT
                GHC.IO.Handle.Types.WriteHandle
                GHC.Types.True
                mb_codec_sa8cU
                tr_newlines_sa8cV
                GHC.IO.Handle.Internals.mkDuplexHandle4
                GHC.Base.Nothing
                s_sa8cW
        of
        { (#,#) ipv_sa8cY [Occ=Once*] ipv1_sa8cZ [Occ=Once!] ->
              case ipv1_sa8cZ of {
                GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sa8d2 ->
                    let {
                      sat_sa8d3 [Occ=Once] :: GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
                      [LclId] =
                          CCCS GHC.MVar.MVar! [dt_sa8d2]; } in
                    let {
                      sat_sa8d4 [Occ=Once]
                        :: GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
                      [LclId] =
                          CCCS GHC.Base.Just! [sat_sa8d3];
                    } in 
                      case
                          GHC.IO.Handle.Internals.mkDuplexHandle5
                              $dIODevice_sa8cP
                              $dBufferedIO_sa8cQ
                              $dTypeable_sa8cR
                              dev1_sa8cS
                              filepath_sa8cT
                              GHC.IO.Handle.Types.ReadHandle
                              GHC.Types.True
                              mb_codec_sa8cU
                              tr_newlines_sa8cV
                              GHC.Base.Nothing
                              sat_sa8d4
                              ipv_sa8cY
                      of
                      { (#,#) ipv2_sa8d6 [Occ=Once*] ipv3_sa8d7 [Occ=Once!] ->
                            case ipv3_sa8d7 of {
                              GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt1_sa8da [Occ=Once] ->
                                  let {
                                    sat_sa8db [Occ=Once] :: GHC.IO.Handle.Types.Handle
                                    [LclId] =
                                        CCCS GHC.IO.Handle.Types.DuplexHandle! [filepath_sa8cT
                                                                                dt1_sa8da
                                                                                dt_sa8d2];
                                  } in  (#,#) [ipv2_sa8d6 sat_sa8db];
                              GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead] ->
                                  GHC.IO.Handle.Internals.mkDuplexHandle3 ipv2_sa8d6;
                            };
                      };
                GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead] ->
                    GHC.IO.Handle.Internals.mkDuplexHandle2 ipv_sa8cY;
              };
        };

GHC.IO.Handle.Internals.mkDuplexHandle
  :: forall dev.
     (GHC.IO.Device.IODevice dev, GHC.IO.BufferedIO.BufferedIO dev,
      Data.Typeable.Internal.Typeable dev) =>
     dev
     -> GHC.IO.FilePath
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.NewlineMode
     -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId,
 Arity=8,
 Str=<L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U)><L,U><L,U><L,U><S,U><L,U(U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B8 eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.Internals.mkDuplexHandle1
            eta_B8 eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

$wlvl_ra7PF
  :: forall a.
     GHC.IO.Exception.IOErrorType
     -> GHC.Base.String
     -> GHC.Base.Maybe Foreign.C.Types.CInt
     -> GHC.Base.Maybe GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=7,
 Str=<B,U><B,U><B,U><B,1*U><B,U><B,U><B,U>x,
 Unf=OtherCon []] =
    sat-only [] \r [ww_sa8di
                    ww1_sa8dj
                    ww2_sa8dk
                    ww3_sa8dl
                    w_sa8dm
                    w1_sa8dn
                    w2_sa8do]
        let {
          sat_sa8dA [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [ww_sa8di ww1_sa8dj ww2_sa8dk ww3_sa8dl w_sa8dm w1_sa8dn] \u []
                  let {
                    sat_sa8dy [Occ=Once] :: GHC.Base.Maybe GHC.IO.FilePath
                    [LclId] =
                        [ww3_sa8dl w1_sa8dn] \u []
                            case ww3_sa8dl of wild_sa8dq {
                              GHC.Base.Nothing ->
                                  case w1_sa8dn of {
                                    GHC.IO.Handle.Types.FileHandle path_sa8ds [Occ=Once]
                                                                   _ [Occ=Dead] ->
                                        GHC.Base.Just [path_sa8ds];
                                    GHC.IO.Handle.Types.DuplexHandle path_sa8du [Occ=Once]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead] ->
                                        GHC.Base.Just [path_sa8du];
                                  };
                              GHC.Base.Just _ [Occ=Dead] -> wild_sa8dq;
                            }; } in
                  let {
                    sat_sa8dp [Occ=Once] :: GHC.Base.Maybe GHC.IO.Handle.Types.Handle
                    [LclId] =
                        CCCS GHC.Base.Just! [w1_sa8dn]; } in
                  let {
                    sat_sa8dz [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        CCCS GHC.IO.Exception.IOError! [sat_sa8dp
                                                        ww_sa8di
                                                        w_sa8dm
                                                        ww1_sa8dj
                                                        ww2_sa8dk
                                                        sat_sa8dy];
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sa8dz;
        } in  raiseIO# [sat_sa8dA w2_sa8do];

GHC.IO.Handle.Internals.$wdo_operation [InlPrag=NOUSERINLINE[0],
                                        Occ=LoopBreaker]
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Prim.MVar# GHC.Prim.RealWorld GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=5,
 Str=<L,U><L,U><C(S),C(U)><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sa8dB w1_sa8dC w2_sa8dD ww_sa8dE w3_sa8dF]
        case takeMVar# [ww_sa8dE w3_sa8dF] of {
          (#,#) ipv_sa8dH [Occ=Once] ipv1_sa8dI ->
              case w2_sa8dD ipv1_sa8dI of nt_sa8dJ {
                __DEFAULT ->
                    let {
                      sat_sa8e5 [Occ=Once]
                        :: GHC.Exception.SomeException
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_sa75G #)
                      [LclId] =
                          [w_sa8dB w1_sa8dC w2_sa8dD ww_sa8dE ipv1_sa8dI] \r [e1_sa8dK
                                                                              s_sa8dL]
                              case putMVar# [ww_sa8dE ipv1_sa8dI s_sa8dL] of s2#_sa8dM {
                                __DEFAULT ->
                                    case e1_sa8dK of wild_sa8dN {
                                      GHC.Exception.SomeException $dException1_sa8dO
                                                                  e3_sa8dP [Occ=Once] ->
                                          case
                                              GHC.Exception.$p1Exception $dException1_sa8dO
                                          of
                                          sat_sa8dQ
                                          { __DEFAULT ->
                                                case
                                                    Data.Typeable.Internal.sameTypeRep
                                                        sat_sa8dQ
                                                        GHC.IO.Exception.$fExceptionIOException4
                                                of
                                                { GHC.Types.False ->
                                                      case
                                                          GHC.Exception.$p1Exception
                                                              $dException1_sa8dO
                                                      of
                                                      sat_sa8dS
                                                      { __DEFAULT ->
                                                            case
                                                                Data.Typeable.Internal.sameTypeRep
                                                                    sat_sa8dS
                                                                    GHC.IO.Exception.$fExceptionAllocationLimitExceeded6
                                                            of
                                                            { GHC.Types.False ->
                                                                  raiseIO# [wild_sa8dN s2#_sa8dM];
                                                              GHC.Types.True ->
                                                                  case myThreadId# [s2#_sa8dM] of {
                                                                    (#,#) ipv2_sa8dV [Occ=Once]
                                                                          ipv3_sa8dW [Occ=Once] ->
                                                                        case
                                                                            killThread# [ipv3_sa8dW
                                                                                         wild_sa8dN
                                                                                         ipv2_sa8dV]
                                                                        of
                                                                        s1_sa8dX
                                                                        { __DEFAULT ->
                                                                              GHC.IO.Handle.Internals.$wdo_operation
                                                                                  w_sa8dB
                                                                                  w1_sa8dC
                                                                                  w2_sa8dD
                                                                                  ww_sa8dE
                                                                                  s1_sa8dX;
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                  GHC.Types.True ->
                                                      case e3_sa8dP of {
                                                        GHC.IO.Exception.IOError _ [Occ=Dead]
                                                                                 ww3_sa8e0 [Occ=Once]
                                                                                 _ [Occ=Dead]
                                                                                 ww5_sa8e2 [Occ=Once]
                                                                                 ww6_sa8e3 [Occ=Once]
                                                                                 ww7_sa8e4 [Occ=Once] ->
                                                            $wlvl_ra7PF
                                                                ww3_sa8e0
                                                                ww5_sa8e2
                                                                ww6_sa8e3
                                                                ww7_sa8e4
                                                                w_sa8dB
                                                                w1_sa8dC
                                                                s2#_sa8dM;
                                                      };
                                                };
                                          };
                                    };
                              };
                    } in  catch# [nt_sa8dJ sat_sa8e5 ipv_sa8dH];
              };
        };

GHC.IO.Handle.Internals.withHandle_1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=5,
 Str=<L,U><L,U><C(S),C(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sa8e6 w1_sa8e7 w2_sa8e8 w3_sa8e9 w4_sa8ea]
        case w3_sa8e9 of {
          GHC.MVar.MVar ww1_sa8ec [Occ=Once] ->
              GHC.IO.Handle.Internals.$wdo_operation
                  w_sa8e6 w1_sa8e7 w2_sa8e8 ww1_sa8ec w4_sa8ea;
        };

GHC.IO.Handle.Internals.$wwithHandle__' [InlPrag=NOUSERINLINE[0]]
  :: GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.Prim.MVar# GHC.Prim.RealWorld GHC.IO.Handle.Types.Handle__
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO GHC.IO.Handle.Types.Handle__)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=5,
 Str=<L,U><L,U><S,U><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sa8ed w1_sa8ee ww_sa8ef w2_sa8eg w3_sa8eh]
        case getMaskingState# [w3_sa8eh] of {
          (#,#) ipv_sa8ej [Occ=Once*] ipv1_sa8ek [Occ=Once!] ->
              case ipv1_sa8ek of {
                __DEFAULT ->
                    case
                        GHC.IO.Handle.Internals.$wdo_operation
                            w_sa8ed w1_sa8ee w2_sa8eg ww_sa8ef ipv_sa8ej
                    of
                    { (#,#) ipv2_sa8en [Occ=Once] ipv3_sa8eo [Occ=Once] ->
                          case putMVar# [ww_sa8ef ipv3_sa8eo ipv2_sa8en] of s2#_sa8ep {
                            __DEFAULT -> (#,#) [s2#_sa8ep GHC.Tuple.()];
                          };
                    };
                0# ->
                    let {
                      sat_sa8ev [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      [LclId] =
                          [w_sa8ed w1_sa8ee ww_sa8ef w2_sa8eg] \r [s_sa8eq]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      w_sa8ed w1_sa8ee w2_sa8eg ww_sa8ef s_sa8eq
                              of
                              { (#,#) ipv2_sa8es [Occ=Once] ipv3_sa8et [Occ=Once] ->
                                    case putMVar# [ww_sa8ef ipv3_sa8et ipv2_sa8es] of s2#_sa8eu {
                                      __DEFAULT -> (#,#) [s2#_sa8eu GHC.Tuple.()];
                                    };
                              };
                    } in  maskAsyncExceptions# [sat_sa8ev ipv_sa8ej];
              };
        };

GHC.IO.Handle.Internals.withHandle__'1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO GHC.IO.Handle.Types.Handle__)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=5,
 Str=<L,U><L,U><S(S),1*U(U)><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sa8ew w1_sa8ex w2_sa8ey w3_sa8ez w4_sa8eA]
        case w2_sa8ey of {
          GHC.MVar.MVar ww1_sa8eC [Occ=Once] ->
              GHC.IO.Handle.Internals.$wwithHandle__'
                  w_sa8ew w1_sa8ex ww1_sa8eC w3_sa8ez w4_sa8eA;
        };

GHC.IO.Handle.Internals.withHandle__'
  :: GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO GHC.IO.Handle.Types.Handle__)
     -> GHC.Types.IO ()
[GblId,
 Arity=5,
 Str=<L,U><L,U><S(S),1*U(U)><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.Internals.withHandle__'1
            eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.Internals.withAllHandles__1
  :: GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO GHC.IO.Handle.Types.Handle__)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [fun_sa8eD h_sa8eE act_sa8eF eta_sa8eG]
        case h_sa8eE of wild_sa8eH {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sa8eJ ->
              case getMaskingState# [eta_sa8eG] of {
                (#,#) ipv_sa8eL [Occ=Once*] ipv1_sa8eM [Occ=Once!] ->
                    case ipv1_sa8eM of {
                      __DEFAULT ->
                          case
                              GHC.IO.Handle.Internals.$wdo_operation
                                  fun_sa8eD wild_sa8eH act_sa8eF dt_sa8eJ ipv_sa8eL
                          of
                          { (#,#) ipv2_sa8eP [Occ=Once] ipv3_sa8eQ [Occ=Once] ->
                                case putMVar# [dt_sa8eJ ipv3_sa8eQ ipv2_sa8eP] of s2#_sa8eR {
                                  __DEFAULT -> (#,#) [s2#_sa8eR GHC.Tuple.()];
                                };
                          };
                      0# ->
                          let {
                            sat_sa8eX [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                            [LclId] =
                                [fun_sa8eD act_sa8eF wild_sa8eH dt_sa8eJ] \r [s_sa8eS]
                                    case
                                        GHC.IO.Handle.Internals.$wdo_operation
                                            fun_sa8eD wild_sa8eH act_sa8eF dt_sa8eJ s_sa8eS
                                    of
                                    { (#,#) ipv2_sa8eU [Occ=Once] ipv3_sa8eV [Occ=Once] ->
                                          case
                                              putMVar# [dt_sa8eJ ipv3_sa8eV ipv2_sa8eU]
                                          of
                                          s2#_sa8eW
                                          { __DEFAULT -> (#,#) [s2#_sa8eW GHC.Tuple.()];
                                          };
                                    };
                          } in  maskAsyncExceptions# [sat_sa8eX ipv_sa8eL];
                    };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead] dt_sa8eZ dt1_sa8f0 ->
              case getMaskingState# [eta_sa8eG] of {
                (#,#) ipv_sa8f2 [Occ=Once*] ipv1_sa8f3 [Occ=Once!] ->
                    let-no-escape {
                      $w$j_sa8f4 [InlPrag=NOUSERINLINE[0],
                                  Occ=Once*!T[1],
                                  Dmd=<L,1*C1(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          sat-only [fun_sa8eD act_sa8eF wild_sa8eH dt1_sa8f0] \r [w_sa8f5]
                              case getMaskingState# [w_sa8f5] of {
                                (#,#) ipv2_sa8f7 [Occ=Once*] ipv3_sa8f8 [Occ=Once!] ->
                                    case ipv3_sa8f8 of {
                                      __DEFAULT ->
                                          case
                                              GHC.IO.Handle.Internals.$wdo_operation
                                                  fun_sa8eD
                                                  wild_sa8eH
                                                  act_sa8eF
                                                  dt1_sa8f0
                                                  ipv2_sa8f7
                                          of
                                          { (#,#) ipv4_sa8fb [Occ=Once] ipv5_sa8fc [Occ=Once] ->
                                                case
                                                    putMVar# [dt1_sa8f0 ipv5_sa8fc ipv4_sa8fb]
                                                of
                                                s2#_sa8fd
                                                { __DEFAULT -> (#,#) [s2#_sa8fd GHC.Tuple.()];
                                                };
                                          };
                                      0# ->
                                          let {
                                            sat_sa8fj [Occ=Once]
                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                            [LclId] =
                                                [fun_sa8eD
                                                 act_sa8eF
                                                 wild_sa8eH
                                                 dt1_sa8f0] \r [s_sa8fe]
                                                    case
                                                        GHC.IO.Handle.Internals.$wdo_operation
                                                            fun_sa8eD
                                                            wild_sa8eH
                                                            act_sa8eF
                                                            dt1_sa8f0
                                                            s_sa8fe
                                                    of
                                                    { (#,#) ipv4_sa8fg [Occ=Once]
                                                            ipv5_sa8fh [Occ=Once] ->
                                                          case
                                                              putMVar# [dt1_sa8f0
                                                                        ipv5_sa8fh
                                                                        ipv4_sa8fg]
                                                          of
                                                          s2#_sa8fi
                                                          { __DEFAULT ->
                                                                (#,#) [s2#_sa8fi GHC.Tuple.()];
                                                          };
                                                    };
                                          } in  maskAsyncExceptions# [sat_sa8fj ipv2_sa8f7];
                                    };
                              };
                    } in 
                      case ipv1_sa8f3 of {
                        __DEFAULT ->
                            case
                                GHC.IO.Handle.Internals.$wdo_operation
                                    fun_sa8eD wild_sa8eH act_sa8eF dt_sa8eZ ipv_sa8f2
                            of
                            { (#,#) ipv2_sa8fm [Occ=Once] ipv3_sa8fn [Occ=Once] ->
                                  case putMVar# [dt_sa8eZ ipv3_sa8fn ipv2_sa8fm] of s2#_sa8fo {
                                    __DEFAULT -> $w$j_sa8f4 s2#_sa8fo;
                                  };
                            };
                        0# ->
                            let {
                              sat_sa8fu [Occ=Once]
                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                              [LclId] =
                                  [fun_sa8eD act_sa8eF wild_sa8eH dt_sa8eZ] \r [s_sa8fp]
                                      case
                                          GHC.IO.Handle.Internals.$wdo_operation
                                              fun_sa8eD wild_sa8eH act_sa8eF dt_sa8eZ s_sa8fp
                                      of
                                      { (#,#) ipv2_sa8fr [Occ=Once] ipv3_sa8fs [Occ=Once] ->
                                            case
                                                putMVar# [dt_sa8eZ ipv3_sa8fs ipv2_sa8fr]
                                            of
                                            s2#_sa8ft
                                            { __DEFAULT -> (#,#) [s2#_sa8ft GHC.Tuple.()];
                                            };
                                      };
                            } in 
                              case maskAsyncExceptions# [sat_sa8fu ipv_sa8f2] of {
                                (#,#) ipv2_sa8fw [Occ=Once] _ [Occ=Dead] -> $w$j_sa8f4 ipv2_sa8fw;
                              };
                      };
              };
        };

GHC.IO.Handle.Internals.withAllHandles__
  :: GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO GHC.IO.Handle.Types.Handle__)
     -> GHC.Types.IO ()
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.Internals.withAllHandles__1
            eta_B4 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.Internals.$wwithHandle' [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.Prim.MVar# GHC.Prim.RealWorld GHC.IO.Handle.Types.Handle__
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=5,
 Str=<L,U><L,U><S,U><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sa8fy w1_sa8fz ww_sa8fA w2_sa8fB w3_sa8fC]
        case getMaskingState# [w3_sa8fC] of {
          (#,#) ipv_sa8fE [Occ=Once*] ipv1_sa8fF [Occ=Once!] ->
              let {
                io_sa8fG [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                  :: GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_sa76a #)
                [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                    [w_sa8fy w1_sa8fz ww_sa8fA w2_sa8fB] \r [s_sa8fH]
                        case
                            GHC.IO.Handle.Internals.$wdo_operation
                                w_sa8fy w1_sa8fz w2_sa8fB ww_sa8fA s_sa8fH
                        of
                        { (#,#) ipv2_sa8fJ [Occ=Once] ipv3_sa8fK [Occ=Once!] ->
                              case ipv3_sa8fK of {
                                (,) h'_sa8fM [Occ=Once] v_sa8fN [Occ=Once] ->
                                    case putMVar# [ww_sa8fA h'_sa8fM ipv2_sa8fJ] of s2#_sa8fO {
                                      __DEFAULT -> (#,#) [s2#_sa8fO v_sa8fN];
                                    };
                              };
                        };
              } in 
                case ipv1_sa8fF of {
                  __DEFAULT -> io_sa8fG ipv_sa8fE;
                  0# -> maskAsyncExceptions# [io_sa8fG ipv_sa8fE];
                };
        };

GHC.IO.Handle.Internals.withHandle1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=5,
 Str=<L,U><L,U><S(S),1*U(U)><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sa8fQ w1_sa8fR w2_sa8fS w3_sa8fT w4_sa8fU]
        case w2_sa8fS of {
          GHC.MVar.MVar ww1_sa8fW [Occ=Once] ->
              GHC.IO.Handle.Internals.$wwithHandle'
                  w_sa8fQ w1_sa8fR ww1_sa8fW w3_sa8fT w4_sa8fU;
        };

GHC.IO.Handle.Internals.withHandle'
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a))
     -> GHC.Types.IO a
[GblId,
 Arity=5,
 Str=<L,U><L,U><S(S),1*U(U)><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.Internals.withHandle1
            eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.Internals.withHandle_'1
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=5,
 Str=<L,U><L,U><S(S),1*U(U)><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [fun_sa8fX h_sa8fY m_sa8fZ act_sa8g0 eta_sa8g1]
        case m_sa8fZ of {
          GHC.MVar.MVar ww1_sa8g3 [Occ=Once] ->
              let {
                sat_sa8ga [Occ=Once]
                  :: GHC.IO.Handle.Types.Handle__
                     -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a_aa4gi)
                [LclId] =
                    [act_sa8g0] \r [h__sa8g4 s_sa8g5]
                        case act_sa8g0 h__sa8g4 s_sa8g5 of {
                          (#,#) ipv_sa8g7 [Occ=Once] ipv1_sa8g8 [Occ=Once] ->
                              let {
                                sat_sa8g9 [Occ=Once] :: (GHC.IO.Handle.Types.Handle__, a_aa4gi)
                                [LclId] =
                                    CCCS (,)! [h__sa8g4 ipv1_sa8g8];
                              } in  (#,#) [ipv_sa8g7 sat_sa8g9];
                        };
              } in 
                GHC.IO.Handle.Internals.$wwithHandle'
                    fun_sa8fX h_sa8fY ww1_sa8g3 sat_sa8ga eta_sa8g1;
        };

GHC.IO.Handle.Internals.withHandle_'
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Types.IO a
[GblId,
 Arity=5,
 Str=<L,U><L,U><S(S),1*U(U)><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.Internals.withHandle_'1
            eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

withHandle_2_ra7PG
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [fun_sa8gb h_sa8gc act_sa8gd eta_sa8ge]
        case h_sa8gc of wild_sa8gf {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sa8gh ->
              case getMaskingState# [eta_sa8ge] of {
                (#,#) ipv_sa8gj [Occ=Once*] ipv1_sa8gk [Occ=Once!] ->
                    let {
                      io_sa8gl [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa4gx #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [fun_sa8gb act_sa8gd wild_sa8gf dt_sa8gh] \r [s_sa8gm]
                              let {
                                sat_sa8gt [Occ=Once]
                                  :: GHC.IO.Handle.Types.Handle__
                                     -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a_aa4gx)
                                [LclId] =
                                    [act_sa8gd] \r [h__sa8gn s1_sa8go]
                                        case act_sa8gd h__sa8gn s1_sa8go of {
                                          (#,#) ipv2_sa8gq [Occ=Once] ipv3_sa8gr [Occ=Once] ->
                                              let {
                                                sat_sa8gs [Occ=Once]
                                                  :: (GHC.IO.Handle.Types.Handle__, a_aa4gx)
                                                [LclId] =
                                                    CCCS (,)! [h__sa8gn ipv3_sa8gr];
                                              } in  (#,#) [ipv2_sa8gq sat_sa8gs];
                                        };
                              } in 
                                case
                                    GHC.IO.Handle.Internals.$wdo_operation
                                        fun_sa8gb wild_sa8gf sat_sa8gt dt_sa8gh s_sa8gm
                                of
                                { (#,#) ipv2_sa8gv [Occ=Once] ipv3_sa8gw [Occ=Once!] ->
                                      case ipv3_sa8gw of {
                                        (,) h'_sa8gy [Occ=Once] v_sa8gz [Occ=Once] ->
                                            case
                                                putMVar# [dt_sa8gh h'_sa8gy ipv2_sa8gv]
                                            of
                                            s2#_sa8gA
                                            { __DEFAULT -> (#,#) [s2#_sa8gA v_sa8gz];
                                            };
                                      };
                                };
                    } in 
                      case ipv1_sa8gk of {
                        __DEFAULT -> io_sa8gl ipv_sa8gj;
                        0# -> maskAsyncExceptions# [io_sa8gl ipv_sa8gj];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sa8gD
                                           _ [Occ=Dead] ->
              case getMaskingState# [eta_sa8ge] of {
                (#,#) ipv_sa8gG [Occ=Once*] ipv1_sa8gH [Occ=Once!] ->
                    let {
                      io_sa8gI [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa4gx #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [fun_sa8gb act_sa8gd wild_sa8gf dt_sa8gD] \r [s_sa8gJ]
                              let {
                                sat_sa8gQ [Occ=Once]
                                  :: GHC.IO.Handle.Types.Handle__
                                     -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a_aa4gx)
                                [LclId] =
                                    [act_sa8gd] \r [h__sa8gK s1_sa8gL]
                                        case act_sa8gd h__sa8gK s1_sa8gL of {
                                          (#,#) ipv2_sa8gN [Occ=Once] ipv3_sa8gO [Occ=Once] ->
                                              let {
                                                sat_sa8gP [Occ=Once]
                                                  :: (GHC.IO.Handle.Types.Handle__, a_aa4gx)
                                                [LclId] =
                                                    CCCS (,)! [h__sa8gK ipv3_sa8gO];
                                              } in  (#,#) [ipv2_sa8gN sat_sa8gP];
                                        };
                              } in 
                                case
                                    GHC.IO.Handle.Internals.$wdo_operation
                                        fun_sa8gb wild_sa8gf sat_sa8gQ dt_sa8gD s_sa8gJ
                                of
                                { (#,#) ipv2_sa8gS [Occ=Once] ipv3_sa8gT [Occ=Once!] ->
                                      case ipv3_sa8gT of {
                                        (,) h'_sa8gV [Occ=Once] v_sa8gW [Occ=Once] ->
                                            case
                                                putMVar# [dt_sa8gD h'_sa8gV ipv2_sa8gS]
                                            of
                                            s2#_sa8gX
                                            { __DEFAULT -> (#,#) [s2#_sa8gX v_sa8gW];
                                            };
                                      };
                                };
                    } in 
                      case ipv1_sa8gH of {
                        __DEFAULT -> io_sa8gI ipv_sa8gG;
                        0# -> maskAsyncExceptions# [io_sa8gI ipv_sa8gG];
                      };
              };
        };

GHC.IO.Handle.Internals.withHandle_ [InlPrag=INLINE (sat-args=3)]
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Types.IO a
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        withHandle_2_ra7PG eta_B4 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.Internals.wantReadableHandle_1
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [fun_sa8gZ h_sa8h0 act_sa8h1 eta_sa8h2]
        case h_sa8h0 of wild_sa8h3 {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sa8h5 ->
              case getMaskingState# [eta_sa8h2] of {
                (#,#) ipv_sa8h7 [Occ=Once*] ipv1_sa8h8 [Occ=Once!] ->
                    let {
                      io_sa8h9 [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa4gF #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [fun_sa8gZ act_sa8h1 wild_sa8h3 dt_sa8h5] \r [s_sa8ha]
                              let {
                                sat_sa8hh [Occ=Once]
                                  :: GHC.IO.Handle.Types.Handle__
                                     -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a_aa4gF)
                                [LclId] =
                                    [act_sa8h1] \r [h__sa8hb s1_sa8hc]
                                        case
                                            GHC.IO.Handle.Internals.wantReadableHandle2
                                                act_sa8h1 h__sa8hb s1_sa8hc
                                        of
                                        { (#,#) ipv2_sa8he [Occ=Once] ipv3_sa8hf [Occ=Once] ->
                                              let {
                                                sat_sa8hg [Occ=Once]
                                                  :: (GHC.IO.Handle.Types.Handle__, a_aa4gF)
                                                [LclId] =
                                                    CCCS (,)! [h__sa8hb ipv3_sa8hf];
                                              } in  (#,#) [ipv2_sa8he sat_sa8hg];
                                        };
                              } in 
                                case
                                    GHC.IO.Handle.Internals.$wdo_operation
                                        fun_sa8gZ wild_sa8h3 sat_sa8hh dt_sa8h5 s_sa8ha
                                of
                                { (#,#) ipv2_sa8hj [Occ=Once] ipv3_sa8hk [Occ=Once!] ->
                                      case ipv3_sa8hk of {
                                        (,) h'_sa8hm [Occ=Once] v_sa8hn [Occ=Once] ->
                                            case
                                                putMVar# [dt_sa8h5 h'_sa8hm ipv2_sa8hj]
                                            of
                                            s2#_sa8ho
                                            { __DEFAULT -> (#,#) [s2#_sa8ho v_sa8hn];
                                            };
                                      };
                                };
                    } in 
                      case ipv1_sa8h8 of {
                        __DEFAULT -> io_sa8h9 ipv_sa8h7;
                        0# -> maskAsyncExceptions# [io_sa8h9 ipv_sa8h7];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sa8hr
                                           _ [Occ=Dead] ->
              case getMaskingState# [eta_sa8h2] of {
                (#,#) ipv_sa8hu [Occ=Once*] ipv1_sa8hv [Occ=Once!] ->
                    let {
                      io_sa8hw [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa4gF #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [fun_sa8gZ act_sa8h1 wild_sa8h3 dt_sa8hr] \r [s_sa8hx]
                              let {
                                sat_sa8hE [Occ=Once]
                                  :: GHC.IO.Handle.Types.Handle__
                                     -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a_aa4gF)
                                [LclId] =
                                    [act_sa8h1] \r [h__sa8hy s1_sa8hz]
                                        case
                                            GHC.IO.Handle.Internals.wantReadableHandle2
                                                act_sa8h1 h__sa8hy s1_sa8hz
                                        of
                                        { (#,#) ipv2_sa8hB [Occ=Once] ipv3_sa8hC [Occ=Once] ->
                                              let {
                                                sat_sa8hD [Occ=Once]
                                                  :: (GHC.IO.Handle.Types.Handle__, a_aa4gF)
                                                [LclId] =
                                                    CCCS (,)! [h__sa8hy ipv3_sa8hC];
                                              } in  (#,#) [ipv2_sa8hB sat_sa8hD];
                                        };
                              } in 
                                case
                                    GHC.IO.Handle.Internals.$wdo_operation
                                        fun_sa8gZ wild_sa8h3 sat_sa8hE dt_sa8hr s_sa8hx
                                of
                                { (#,#) ipv2_sa8hG [Occ=Once] ipv3_sa8hH [Occ=Once!] ->
                                      case ipv3_sa8hH of {
                                        (,) h'_sa8hJ [Occ=Once] v_sa8hK [Occ=Once] ->
                                            case
                                                putMVar# [dt_sa8hr h'_sa8hJ ipv2_sa8hG]
                                            of
                                            s2#_sa8hL
                                            { __DEFAULT -> (#,#) [s2#_sa8hL v_sa8hK];
                                            };
                                      };
                                };
                    } in 
                      case ipv1_sa8hv of {
                        __DEFAULT -> io_sa8hw ipv_sa8hu;
                        0# -> maskAsyncExceptions# [io_sa8hw ipv_sa8hu];
                      };
              };
        };

GHC.IO.Handle.Internals.wantReadableHandle_
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Types.IO a
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.Internals.wantReadableHandle_1
            eta_B4 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.Internals.wantSeekableHandle2
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=3, Str=<B,U><B,U><B,U>x, Unf=OtherCon []] =
    [] \r [fun_sa8hN h_sa8hO eta_sa8hP]
        let {
          sat_sa8hS [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [fun_sa8hN h_sa8hO] \u []
                  let {
                    sat_sa8hQ [Occ=Once] :: GHC.Base.Maybe GHC.IO.Handle.Types.Handle
                    [LclId] =
                        CCCS GHC.Base.Just! [h_sa8hO]; } in
                  let {
                    sat_sa8hR [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        CCCS GHC.IO.Exception.IOError! [sat_sa8hQ
                                                        GHC.IO.Exception.IllegalOperation
                                                        fun_sa8hN
                                                        GHC.IO.Handle.Internals.wantSeekableHandle5
                                                        GHC.Base.Nothing
                                                        GHC.Base.Nothing];
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sa8hR;
        } in  raiseIO# [sat_sa8hS eta_sa8hP];

GHC.IO.Handle.Internals.wantSeekableHandle1
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [fun_sa8hT h_sa8hU _act_sa8hV eta_sa8hW]
        case h_sa8hU of wild_sa8hX {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sa8hZ ->
              case getMaskingState# [eta_sa8hW] of {
                (#,#) ipv_sa8i1 [Occ=Once*] ipv1_sa8i2 [Occ=Once!] ->
                    let {
                      io_sa8i3 [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa4gJ #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [fun_sa8hT _act_sa8hV wild_sa8hX dt_sa8hZ] \r [s_sa8i4]
                              let {
                                sat_sa8iB [Occ=Once]
                                  :: GHC.IO.Handle.Types.Handle__
                                     -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a_aa4gJ)
                                [LclId] =
                                    [_act_sa8hV] \r [h__sa8i5 s1_sa8i6]
                                        case h__sa8i5 of wild1_sa8i7 {
                                          GHC.IO.Handle.Types.Handle__ $dIODevice_sa8i8 [Occ=Once]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       ds2_sa8ib [Occ=Once]
                                                                       ds3_sa8ic [Occ=Once!]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                              case ds3_sa8ic of {
                                                __DEFAULT ->
                                                    case
                                                        GHC.IO.Device.isSeekable
                                                            $dIODevice_sa8i8 ds2_sa8ib s1_sa8i6
                                                    of
                                                    { (#,#) ipv2_sa8iq [Occ=Once*]
                                                            ipv3_sa8ir [Occ=Once!] ->
                                                          case ipv3_sa8ir of {
                                                            GHC.Types.False ->
                                                                raiseIO# [GHC.IO.Handle.Internals.wantSeekableHandle3
                                                                          ipv2_sa8iq];
                                                            GHC.Types.True ->
                                                                case
                                                                    _act_sa8hV
                                                                        wild1_sa8i7 ipv2_sa8iq
                                                                of
                                                                { (#,#) ipv4_sa8iv [Occ=Once]
                                                                        ipv5_sa8iw [Occ=Once] ->
                                                                      let {
                                                                        sat_sa8ix [Occ=Once]
                                                                          :: (GHC.IO.Handle.Types.Handle__,
                                                                              a_aa4gJ)
                                                                        [LclId] =
                                                                            CCCS (,)! [wild1_sa8i7
                                                                                       ipv5_sa8iw];
                                                                      } in 
                                                                        (#,#) [ipv4_sa8iv
                                                                               sat_sa8ix];
                                                                };
                                                          };
                                                    };
                                                GHC.IO.Handle.Types.ClosedHandle ->
                                                    raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle11
                                                              s1_sa8i6];
                                                GHC.IO.Handle.Types.SemiClosedHandle ->
                                                    raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle7
                                                              s1_sa8i6];
                                                GHC.IO.Handle.Types.AppendHandle ->
                                                    raiseIO# [GHC.IO.Handle.Internals.wantSeekableHandle3
                                                              s1_sa8i6];
                                              };
                                        };
                              } in 
                                case
                                    GHC.IO.Handle.Internals.$wdo_operation
                                        fun_sa8hT wild_sa8hX sat_sa8iB dt_sa8hZ s_sa8i4
                                of
                                { (#,#) ipv2_sa8iD [Occ=Once] ipv3_sa8iE [Occ=Once!] ->
                                      case ipv3_sa8iE of {
                                        (,) h'_sa8iG [Occ=Once] v_sa8iH [Occ=Once] ->
                                            case
                                                putMVar# [dt_sa8hZ h'_sa8iG ipv2_sa8iD]
                                            of
                                            s2#_sa8iI
                                            { __DEFAULT -> (#,#) [s2#_sa8iI v_sa8iH];
                                            };
                                      };
                                };
                    } in 
                      case ipv1_sa8i2 of {
                        __DEFAULT -> io_sa8i3 ipv_sa8i1;
                        0# -> maskAsyncExceptions# [io_sa8i3 ipv_sa8i1];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              GHC.IO.Handle.Internals.wantSeekableHandle2
                  fun_sa8hT wild_sa8hX eta_sa8hW;
        };

GHC.IO.Handle.Internals.wantSeekableHandle
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Types.IO a
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.Internals.wantSeekableHandle1
            eta_B4 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.Internals.$wwantWritableHandle' [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.Prim.MVar# GHC.Prim.RealWorld GHC.IO.Handle.Types.Handle__
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=5,
 Str=<L,U><L,U><S,U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sa8iN w1_sa8iO ww_sa8iP w2_sa8iQ w3_sa8iR]
        let {
          sat_sa8l6 [Occ=Once]
            :: GHC.IO.Handle.Types.Handle__
               -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a_sa76M)
          [LclId] =
              [w2_sa8iQ] \r [h__sa8iS s_sa8iT]
                  case h__sa8iS of wild_sa8iU {
                    GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                                 $dBufferedIO_sa8iW [Occ=Once]
                                                 _ [Occ=Dead]
                                                 ds_sa8iY [Occ=Once]
                                                 ds1_sa8iZ [Occ=Once!]
                                                 dt_sa8j0
                                                 _ [Occ=Dead]
                                                 dt1_sa8j2 [Occ=Once]
                                                 dt2_sa8j3
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 ds4_sa8j6 [Occ=Once!]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead] ->
                        case ds1_sa8iZ of {
                          __DEFAULT ->
                              case w2_sa8iQ wild_sa8iU s_sa8iT of {
                                (#,#) ipv_sa8jd [Occ=Once] ipv1_sa8je [Occ=Once] ->
                                    let {
                                      sat_sa8jf [Occ=Once]
                                        :: (GHC.IO.Handle.Types.Handle__, a_sa76M)
                                      [LclId] =
                                          CCCS (,)! [wild_sa8iU ipv1_sa8je];
                                    } in  (#,#) [ipv_sa8jd sat_sa8jf];
                              };
                          GHC.IO.Handle.Types.ClosedHandle ->
                              raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle11 s_sa8iT];
                          GHC.IO.Handle.Types.SemiClosedHandle ->
                              raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle7 s_sa8iT];
                          GHC.IO.Handle.Types.ReadHandle ->
                              raiseIO# [GHC.IO.Handle.Internals.wantWritableHandle2 s_sa8iT];
                          GHC.IO.Handle.Types.ReadWriteHandle ->
                              case readMutVar# [dt2_sa8j3 s_sa8iT] of {
                                (#,#) ipv_sa8jk [Occ=Once*] ipv1_sa8jl [Occ=Once!] ->
                                    case ipv1_sa8jl of {
                                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           ds10_sa8jp [Occ=Once!]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead] ->
                                          case ds10_sa8jp of {
                                            GHC.IO.Buffer.ReadBuffer ->
                                                case readMutVar# [dt2_sa8j3 ipv_sa8jk] of {
                                                  (#,#) ipv2_sa8jv [Occ=Once*]
                                                        ipv3_sa8jw [Occ=Once!] ->
                                                      case ipv3_sa8jw of {
                                                        GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                             _ [Occ=Dead]
                                                                             ds12_sa8jA [Occ=Once!]
                                                                             _ [Occ=Dead]
                                                                             dt12_sa8jC [Occ=Once]
                                                                             dt13_sa8jD [Occ=Once] ->
                                                            let-no-escape {
                                                              $w$j_sa8jE [InlPrag=NOUSERINLINE[0],
                                                                          Occ=Once*!T[1],
                                                                          Dmd=<L,1*C1(U)>]
                                                                :: GHC.Prim.State#
                                                                     GHC.Prim.RealWorld
                                                                   -> (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         (GHC.IO.Handle.Types.Handle__,
                                                                          a_sa76M) #)
                                                              [LclId[JoinId(1)],
                                                               Arity=1,
                                                               Str=<S,U>,
                                                               Unf=OtherCon []] =
                                                                  sat-only [w2_sa8iQ
                                                                            wild_sa8iU
                                                                            $dBufferedIO_sa8iW
                                                                            ds_sa8iY
                                                                            dt_sa8j0
                                                                            dt2_sa8j3] \r [w4_sa8jF]
                                                                      case
                                                                          GHC.IO.Handle.Internals.flushBuffer2
                                                                              wild_sa8iU w4_sa8jF
                                                                      of
                                                                      { (#,#) ipv4_sa8jH [Occ=Once]
                                                                              _ [Occ=Dead] ->
                                                                            case
                                                                                readMutVar# [dt2_sa8j3
                                                                                             ipv4_sa8jH]
                                                                            of
                                                                            { (#,#) ipv6_sa8jK [Occ=Once]
                                                                                    ipv7_sa8jL [Occ=Once!] ->
                                                                                  let {
                                                                                    sat_sa8jT [Occ=Once]
                                                                                      :: GHC.IO.Buffer.Buffer
                                                                                           GHC.IO.Buffer.CharBufElem
                                                                                    [LclId] =
                                                                                        [ipv7_sa8jL] \u []
                                                                                            case
                                                                                                ipv7_sa8jL
                                                                                            of
                                                                                            { GHC.IO.Buffer.Buffer dt14_sa8jN [Occ=Once]
                                                                                                                   dt15_sa8jO [Occ=Once]
                                                                                                                   _ [Occ=Dead]
                                                                                                                   dt16_sa8jQ [Occ=Once]
                                                                                                                   dt17_sa8jR [Occ=Once]
                                                                                                                   dt18_sa8jS [Occ=Once] ->
                                                                                                  GHC.IO.Buffer.Buffer [dt14_sa8jN
                                                                                                                        dt15_sa8jO
                                                                                                                        GHC.IO.Buffer.WriteBuffer
                                                                                                                        dt16_sa8jQ
                                                                                                                        dt17_sa8jR
                                                                                                                        dt18_sa8jS];
                                                                                            };
                                                                                  } in 
                                                                                    case
                                                                                        writeMutVar# [dt2_sa8j3
                                                                                                      sat_sa8jT
                                                                                                      ipv6_sa8jK]
                                                                                    of
                                                                                    s2#_sa8jU
                                                                                    { __DEFAULT ->
                                                                                          case
                                                                                              readMutVar# [dt_sa8j0
                                                                                                           s2#_sa8jU]
                                                                                          of
                                                                                          { (#,#) ipv8_sa8jW [Occ=Once]
                                                                                                  ipv9_sa8jX [Occ=Once] ->
                                                                                                case
                                                                                                    GHC.IO.BufferedIO.emptyWriteBuffer
                                                                                                        $dBufferedIO_sa8iW
                                                                                                        ds_sa8iY
                                                                                                        ipv9_sa8jX
                                                                                                        ipv8_sa8jW
                                                                                                of
                                                                                                { (#,#) ipv10_sa8jZ [Occ=Once]
                                                                                                        ipv11_sa8k0 [Occ=Once] ->
                                                                                                      case
                                                                                                          writeMutVar# [dt_sa8j0
                                                                                                                        ipv11_sa8k0
                                                                                                                        ipv10_sa8jZ]
                                                                                                      of
                                                                                                      s2#1_sa8k1
                                                                                                      { __DEFAULT ->
                                                                                                            case
                                                                                                                w2_sa8iQ
                                                                                                                    wild_sa8iU
                                                                                                                    s2#1_sa8k1
                                                                                                            of
                                                                                                            { (#,#) ipv12_sa8k3 [Occ=Once]
                                                                                                                    ipv13_sa8k4 [Occ=Once] ->
                                                                                                                  let {
                                                                                                                    sat_sa8k5 [Occ=Once]
                                                                                                                      :: (GHC.IO.Handle.Types.Handle__,
                                                                                                                          a_sa76M)
                                                                                                                    [LclId] =
                                                                                                                        CCCS (,)! [wild_sa8iU
                                                                                                                                   ipv13_sa8k4];
                                                                                                                  } in 
                                                                                                                    (#,#) [ipv12_sa8k3
                                                                                                                           sat_sa8k5];
                                                                                                            };
                                                                                                      };
                                                                                                };
                                                                                          };
                                                                                    };
                                                                            };
                                                                      };
                                                            } in 
                                                              case ds12_sa8jA of {
                                                                GHC.IO.Buffer.ReadBuffer ->
                                                                    case
                                                                        ==# [dt12_sa8jC dt13_sa8jD]
                                                                    of
                                                                    { __DEFAULT ->
                                                                          case
                                                                              readMutVar# [dt1_sa8j2
                                                                                           ipv2_sa8jv]
                                                                          of
                                                                          { (#,#) ipv4_sa8k9 [Occ=Once]
                                                                                  ipv5_sa8ka [Occ=Once!] ->
                                                                                case ipv5_sa8ka of {
                                                                                  (,) codec_state_sa8kc [Occ=Once]
                                                                                      bbuf0_sa8kd [Occ=Once*] ->
                                                                                      case
                                                                                          readMutVar# [dt2_sa8j3
                                                                                                       ipv4_sa8k9]
                                                                                      of
                                                                                      { (#,#) ipv6_sa8kf [Occ=Once]
                                                                                              ipv7_sa8kg ->
                                                                                            let {
                                                                                              sat_sa8ko [Occ=Once]
                                                                                                :: GHC.IO.Buffer.Buffer
                                                                                                     GHC.IO.Buffer.CharBufElem
                                                                                              [LclId] =
                                                                                                  [ipv7_sa8kg] \u []
                                                                                                      case
                                                                                                          ipv7_sa8kg
                                                                                                      of
                                                                                                      { GHC.IO.Buffer.Buffer dt14_sa8ki [Occ=Once]
                                                                                                                             dt15_sa8kj [Occ=Once]
                                                                                                                             ds15_sa8kk [Occ=Once]
                                                                                                                             dt16_sa8kl [Occ=Once]
                                                                                                                             _ [Occ=Dead]
                                                                                                                             _ [Occ=Dead] ->
                                                                                                            GHC.IO.Buffer.Buffer [dt14_sa8ki
                                                                                                                                  dt15_sa8kj
                                                                                                                                  ds15_sa8kk
                                                                                                                                  dt16_sa8kl
                                                                                                                                  0#
                                                                                                                                  0#];
                                                                                                      };
                                                                                            } in 
                                                                                              case
                                                                                                  writeMutVar# [dt2_sa8j3
                                                                                                                sat_sa8ko
                                                                                                                ipv6_sa8kf]
                                                                                              of
                                                                                              s2#_sa8kp
                                                                                              { __DEFAULT ->
                                                                                                    case
                                                                                                        ipv7_sa8kg
                                                                                                    of
                                                                                                    { GHC.IO.Buffer.Buffer dt14_sa8kr [Occ=Once]
                                                                                                                           dt15_sa8ks [Occ=Once]
                                                                                                                           ds15_sa8kt [Occ=Once]
                                                                                                                           _ [Occ=Dead]
                                                                                                                           dt17_sa8kv [Occ=Once!]
                                                                                                                           _ [Occ=Dead] ->
                                                                                                          case
                                                                                                              dt17_sa8kv
                                                                                                          of
                                                                                                          wild8_sa8kx
                                                                                                          { __DEFAULT ->
                                                                                                                case
                                                                                                                    ds4_sa8j6
                                                                                                                of
                                                                                                                { GHC.Base.Nothing ->
                                                                                                                      let {
                                                                                                                        sat_sa8kH [Occ=Once]
                                                                                                                          :: GHC.IO.Buffer.Buffer
                                                                                                                               GHC.Word.Word8
                                                                                                                        [LclId] =
                                                                                                                            [bbuf0_sa8kd
                                                                                                                             wild8_sa8kx] \u []
                                                                                                                                case
                                                                                                                                    bbuf0_sa8kd
                                                                                                                                of
                                                                                                                                { GHC.IO.Buffer.Buffer dt19_sa8kA [Occ=Once]
                                                                                                                                                       dt20_sa8kB [Occ=Once]
                                                                                                                                                       ds16_sa8kC [Occ=Once]
                                                                                                                                                       dt21_sa8kD [Occ=Once]
                                                                                                                                                       dt22_sa8kE [Occ=Once]
                                                                                                                                                       dt23_sa8kF [Occ=Once] ->
                                                                                                                                      case
                                                                                                                                          +# [dt22_sa8kE
                                                                                                                                              wild8_sa8kx]
                                                                                                                                      of
                                                                                                                                      sat_sa8kG
                                                                                                                                      { __DEFAULT ->
                                                                                                                                            GHC.IO.Buffer.Buffer [dt19_sa8kA
                                                                                                                                                                  dt20_sa8kB
                                                                                                                                                                  ds16_sa8kC
                                                                                                                                                                  dt21_sa8kD
                                                                                                                                                                  sat_sa8kG
                                                                                                                                                                  dt23_sa8kF];
                                                                                                                                      };
                                                                                                                                };
                                                                                                                      } in 
                                                                                                                        case
                                                                                                                            writeMutVar# [dt_sa8j0
                                                                                                                                          sat_sa8kH
                                                                                                                                          s2#_sa8kp]
                                                                                                                        of
                                                                                                                        s2#1_sa8kI
                                                                                                                        { __DEFAULT ->
                                                                                                                              $w$j_sa8jE
                                                                                                                                  s2#1_sa8kI;
                                                                                                                        };
                                                                                                                  GHC.Base.Just decoder_sa8kJ [Occ=Once!] ->
                                                                                                                      case
                                                                                                                          decoder_sa8kJ
                                                                                                                      of
                                                                                                                      { GHC.IO.Encoding.Types.BufferCodec ds16_sa8kL [Occ=Once]
                                                                                                                                                          ds17_sa8kM [Occ=Once]
                                                                                                                                                          _ [Occ=Dead]
                                                                                                                                                          _ [Occ=Dead]
                                                                                                                                                          ds20_sa8kP [Occ=Once!] ->
                                                                                                                            case
                                                                                                                                ds20_sa8kP
                                                                                                                                    codec_state_sa8kc
                                                                                                                                    s2#_sa8kp
                                                                                                                            of
                                                                                                                            { (#,#) ipv8_sa8kR [Occ=Once]
                                                                                                                                    _ [Occ=Dead] ->
                                                                                                                                  let {
                                                                                                                                    sat_sa8kT [Occ=Once]
                                                                                                                                      :: GHC.IO.Buffer.Buffer
                                                                                                                                           GHC.IO.Buffer.CharBufElem
                                                                                                                                    [LclId] =
                                                                                                                                        CCCS GHC.IO.Buffer.Buffer! [dt14_sa8kr
                                                                                                                                                                    dt15_sa8ks
                                                                                                                                                                    ds15_sa8kt
                                                                                                                                                                    wild8_sa8kx
                                                                                                                                                                    0#
                                                                                                                                                                    0#];
                                                                                                                                  } in 
                                                                                                                                    case
                                                                                                                                        GHC.IO.Handle.Internals.$wstreamEncode
                                                                                                                                            ds16_sa8kL
                                                                                                                                            ds17_sa8kM
                                                                                                                                            bbuf0_sa8kd
                                                                                                                                            sat_sa8kT
                                                                                                                                            ipv8_sa8kR
                                                                                                                                    of
                                                                                                                                    { (#,#) ipv10_sa8kV [Occ=Once]
                                                                                                                                            ipv11_sa8kW [Occ=Once!] ->
                                                                                                                                          case
                                                                                                                                              ipv11_sa8kW
                                                                                                                                          of
                                                                                                                                          { (,) bbuf1_sa8kY [Occ=Once]
                                                                                                                                                _ [Occ=Dead] ->
                                                                                                                                                case
                                                                                                                                                    writeMutVar# [dt_sa8j0
                                                                                                                                                                  bbuf1_sa8kY
                                                                                                                                                                  ipv10_sa8kV]
                                                                                                                                                of
                                                                                                                                                s2#1_sa8l0
                                                                                                                                                { __DEFAULT ->
                                                                                                                                                      $w$j_sa8jE
                                                                                                                                                          s2#1_sa8l0;
                                                                                                                                                };
                                                                                                                                          };
                                                                                                                                    };
                                                                                                                            };
                                                                                                                      };
                                                                                                                };
                                                                                                            0# ->
                                                                                                                case
                                                                                                                    writeMutVar# [dt_sa8j0
                                                                                                                                  bbuf0_sa8kd
                                                                                                                                  s2#_sa8kp]
                                                                                                                of
                                                                                                                s2#1_sa8l1
                                                                                                                { __DEFAULT ->
                                                                                                                      $w$j_sa8jE
                                                                                                                          s2#1_sa8l1;
                                                                                                                };
                                                                                                          };
                                                                                                    };
                                                                                              };
                                                                                      };
                                                                                };
                                                                          };
                                                                      1# -> $w$j_sa8jE ipv2_sa8jv;
                                                                    };
                                                                GHC.IO.Buffer.WriteBuffer ->
                                                                    $w$j_sa8jE ipv2_sa8jv;
                                                              };
                                                      };
                                                };
                                            GHC.IO.Buffer.WriteBuffer ->
                                                case w2_sa8iQ wild_sa8iU ipv_sa8jk of {
                                                  (#,#) ipv2_sa8l3 [Occ=Once]
                                                        ipv3_sa8l4 [Occ=Once] ->
                                                      let {
                                                        sat_sa8l5 [Occ=Once]
                                                          :: (GHC.IO.Handle.Types.Handle__, a_sa76M)
                                                        [LclId] =
                                                            CCCS (,)! [wild_sa8iU ipv3_sa8l4];
                                                      } in  (#,#) [ipv2_sa8l3 sat_sa8l5];
                                                };
                                          };
                                    };
                              };
                        };
                  };
        } in 
          GHC.IO.Handle.Internals.$wwithHandle'
              w_sa8iN w1_sa8iO ww_sa8iP sat_sa8l6 w3_sa8iR;

GHC.IO.Handle.Internals.wantWritableHandle1
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [fun_sa8l7 h_sa8l8 act_sa8l9 eta_sa8la]
        case h_sa8l8 of wild_sa8lb {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sa8ld [Occ=Once] ->
              GHC.IO.Handle.Internals.$wwantWritableHandle'
                  fun_sa8l7 wild_sa8lb dt_sa8ld act_sa8l9 eta_sa8la;
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           dt1_sa8lg [Occ=Once] ->
              GHC.IO.Handle.Internals.$wwantWritableHandle'
                  fun_sa8l7 wild_sa8lb dt1_sa8lg act_sa8l9 eta_sa8la;
        };

GHC.IO.Handle.Internals.wantWritableHandle
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Types.IO a
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.Internals.wantWritableHandle1
            eta_B4 eta_B3 eta_B2 eta_B1;

withHandle2_ra7PH
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [fun_sa8lh h_sa8li act_sa8lj eta_sa8lk]
        case h_sa8li of wild_sa8ll {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sa8ln ->
              case getMaskingState# [eta_sa8lk] of {
                (#,#) ipv_sa8lp [Occ=Once*] ipv1_sa8lq [Occ=Once!] ->
                    let {
                      io_sa8lr [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa4gR #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [fun_sa8lh act_sa8lj wild_sa8ll dt_sa8ln] \r [s_sa8ls]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      fun_sa8lh wild_sa8ll act_sa8lj dt_sa8ln s_sa8ls
                              of
                              { (#,#) ipv2_sa8lu [Occ=Once] ipv3_sa8lv [Occ=Once!] ->
                                    case ipv3_sa8lv of {
                                      (,) h'_sa8lx [Occ=Once] v_sa8ly [Occ=Once] ->
                                          case
                                              putMVar# [dt_sa8ln h'_sa8lx ipv2_sa8lu]
                                          of
                                          s2#_sa8lz
                                          { __DEFAULT -> (#,#) [s2#_sa8lz v_sa8ly];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sa8lq of {
                        __DEFAULT -> io_sa8lr ipv_sa8lp;
                        0# -> maskAsyncExceptions# [io_sa8lr ipv_sa8lp];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sa8lC
                                           _ [Occ=Dead] ->
              case getMaskingState# [eta_sa8lk] of {
                (#,#) ipv_sa8lF [Occ=Once*] ipv1_sa8lG [Occ=Once!] ->
                    let {
                      io_sa8lH [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa4gR #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [fun_sa8lh act_sa8lj wild_sa8ll dt_sa8lC] \r [s_sa8lI]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      fun_sa8lh wild_sa8ll act_sa8lj dt_sa8lC s_sa8lI
                              of
                              { (#,#) ipv2_sa8lK [Occ=Once] ipv3_sa8lL [Occ=Once!] ->
                                    case ipv3_sa8lL of {
                                      (,) h'_sa8lN [Occ=Once] v_sa8lO [Occ=Once] ->
                                          case
                                              putMVar# [dt_sa8lC h'_sa8lN ipv2_sa8lK]
                                          of
                                          s2#_sa8lP
                                          { __DEFAULT -> (#,#) [s2#_sa8lP v_sa8lO];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sa8lG of {
                        __DEFAULT -> io_sa8lH ipv_sa8lF;
                        0# -> maskAsyncExceptions# [io_sa8lH ipv_sa8lF];
                      };
              };
        };

GHC.IO.Handle.Internals.withHandle [InlPrag=INLINE (sat-args=3)]
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a))
     -> GHC.Types.IO a
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        withHandle2_ra7PH eta_B4 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.Internals.wantReadableHandle1
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [fun_sa8lR h_sa8lS act_sa8lT eta_sa8lU]
        case h_sa8lS of wild_sa8lV {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sa8lX ->
              case getMaskingState# [eta_sa8lU] of {
                (#,#) ipv_sa8lZ [Occ=Once*] ipv1_sa8m0 [Occ=Once!] ->
                    let {
                      io_sa8m1 [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa4gV #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [fun_sa8lR act_sa8lT wild_sa8lV dt_sa8lX] \r [s_sa8m2]
                              let {
                                sat_sa8m3 [Occ=Once]
                                  :: GHC.IO.Handle.Types.Handle__
                                     -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a_aa4gV)
                                [LclId] =
                                    [act_sa8lT] \r [eta_B2 eta_B1]
                                        GHC.IO.Handle.Internals.wantReadableHandle2
                                            act_sa8lT eta_B2 eta_B1;
                              } in 
                                case
                                    GHC.IO.Handle.Internals.$wdo_operation
                                        fun_sa8lR wild_sa8lV sat_sa8m3 dt_sa8lX s_sa8m2
                                of
                                { (#,#) ipv2_sa8m5 [Occ=Once] ipv3_sa8m6 [Occ=Once!] ->
                                      case ipv3_sa8m6 of {
                                        (,) h'_sa8m8 [Occ=Once] v_sa8m9 [Occ=Once] ->
                                            case
                                                putMVar# [dt_sa8lX h'_sa8m8 ipv2_sa8m5]
                                            of
                                            s2#_sa8ma
                                            { __DEFAULT -> (#,#) [s2#_sa8ma v_sa8m9];
                                            };
                                      };
                                };
                    } in 
                      case ipv1_sa8m0 of {
                        __DEFAULT -> io_sa8m1 ipv_sa8lZ;
                        0# -> maskAsyncExceptions# [io_sa8m1 ipv_sa8lZ];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sa8md
                                           _ [Occ=Dead] ->
              case getMaskingState# [eta_sa8lU] of {
                (#,#) ipv_sa8mg [Occ=Once*] ipv1_sa8mh [Occ=Once!] ->
                    let {
                      io_sa8mi [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa4gV #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [fun_sa8lR act_sa8lT wild_sa8lV dt_sa8md] \r [s_sa8mj]
                              let {
                                sat_sa8mk [Occ=Once]
                                  :: GHC.IO.Handle.Types.Handle__
                                     -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a_aa4gV)
                                [LclId] =
                                    [act_sa8lT] \r [eta_B2 eta_B1]
                                        GHC.IO.Handle.Internals.wantReadableHandle2
                                            act_sa8lT eta_B2 eta_B1;
                              } in 
                                case
                                    GHC.IO.Handle.Internals.$wdo_operation
                                        fun_sa8lR wild_sa8lV sat_sa8mk dt_sa8md s_sa8mj
                                of
                                { (#,#) ipv2_sa8mm [Occ=Once] ipv3_sa8mn [Occ=Once!] ->
                                      case ipv3_sa8mn of {
                                        (,) h'_sa8mp [Occ=Once] v_sa8mq [Occ=Once] ->
                                            case
                                                putMVar# [dt_sa8md h'_sa8mp ipv2_sa8mm]
                                            of
                                            s2#_sa8mr
                                            { __DEFAULT -> (#,#) [s2#_sa8mr v_sa8mq];
                                            };
                                      };
                                };
                    } in 
                      case ipv1_sa8mh of {
                        __DEFAULT -> io_sa8mi ipv_sa8mg;
                        0# -> maskAsyncExceptions# [io_sa8mi ipv_sa8mg];
                      };
              };
        };

GHC.IO.Handle.Internals.wantReadableHandle
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a))
     -> GHC.Types.IO a
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.Internals.wantReadableHandle1
            eta_B4 eta_B3 eta_B2 eta_B1;


==================== STG syntax: ====================
2018-03-16 16:05:06.536579934 UTC

GHC.IO.Handle.Internals.augmentIOError
  :: GHC.IO.Exception.IOException
     -> GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.IO.Exception.IOException
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,1*U(A,U,A,U,U,1*U)><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [ioe_sa7PJ fun_sa7PK h_sa7PL]
        case ioe_sa7PJ of {
          GHC.IO.Exception.IOError _ [Occ=Dead]
                                   ds1_sa7PO [Occ=Once]
                                   _ [Occ=Dead]
                                   ds3_sa7PQ [Occ=Once]
                                   ds4_sa7PR [Occ=Once]
                                   ds5_sa7PS [Occ=Once!] ->
              let {
                sat_sa7Q2 [Occ=Once] :: GHC.Base.Maybe GHC.IO.FilePath
                [LclId] =
                    [h_sa7PL ds5_sa7PS] \u []
                        case ds5_sa7PS of wild1_sa7PU {
                          GHC.Base.Nothing ->
                              case h_sa7PL of {
                                GHC.IO.Handle.Types.FileHandle path_sa7PW [Occ=Once]
                                                               _ [Occ=Dead] ->
                                    GHC.Base.Just [path_sa7PW];
                                GHC.IO.Handle.Types.DuplexHandle path_sa7PY [Occ=Once]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead] ->
                                    GHC.Base.Just [path_sa7PY];
                              };
                          GHC.Base.Just _ [Occ=Dead] -> wild1_sa7PU;
                        }; } in
              let {
                sat_sa7PT [Occ=Once] :: GHC.Base.Maybe GHC.IO.Handle.Types.Handle
                [LclId] =
                    CCCS GHC.Base.Just! [h_sa7PL];
              } in 
                GHC.IO.Exception.IOError [sat_sa7PT
                                          ds1_sa7PO
                                          fun_sa7PK
                                          ds3_sa7PQ
                                          ds4_sa7PR
                                          sat_sa7Q2];
        };

GHC.IO.Handle.Internals.wantReadableHandle14 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "handle is closed"#;

GHC.IO.Handle.Internals.wantReadableHandle13 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Handle.Internals.wantReadableHandle14;

GHC.IO.Handle.Internals.wantReadableHandle12
  :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.IllegalOperation
                                             GHC.Types.[]
                                             GHC.IO.Handle.Internals.wantReadableHandle13
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Handle.Internals.wantReadableHandle11
  :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Handle.Internals.wantReadableHandle12;

GHC.IO.Handle.Internals.ioe_closedHandle1
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [void_0E]
        raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle11
                  GHC.Prim.void#];

ioe_closedHandle2_ra7Pb
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    sat-only [] \r [void_0E]
        raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle11
                  GHC.Prim.void#];

GHC.IO.Handle.Internals.ioe_closedHandle
  :: forall a. GHC.Types.IO a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [void_0E] ioe_closedHandle2_ra7Pb GHC.Prim.void#;

GHC.IO.Handle.Internals.wantReadableHandle10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "handle is semi-closed"#;

GHC.IO.Handle.Internals.wantReadableHandle9 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Handle.Internals.wantReadableHandle10;

GHC.IO.Handle.Internals.wantReadableHandle8
  :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.IllegalOperation
                                             GHC.Types.[]
                                             GHC.IO.Handle.Internals.wantReadableHandle9
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Handle.Internals.wantReadableHandle7
  :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Handle.Internals.wantReadableHandle8;

GHC.IO.Handle.Internals.ioe_semiclosedHandle1
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [void_0E]
        raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle7
                  GHC.Prim.void#];

ioe_semiclosedHandle2_ra7Pc
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    sat-only [] \r [void_0E]
        raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle7
                  GHC.Prim.void#];

GHC.IO.Handle.Internals.ioe_semiclosedHandle
  :: forall a. GHC.Types.IO a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [void_0E] ioe_semiclosedHandle2_ra7Pc GHC.Prim.void#;

GHC.IO.Handle.Internals.hLookAhead_4
  :: GHC.IO.Exception.IOException
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.EOF
                                             GHC.Types.[]
                                             GHC.Types.[]
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Handle.Internals.hLookAhead_3 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Handle.Internals.hLookAhead_4;

GHC.IO.Handle.Internals.ioe_EOF1
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [void_0E]
        raiseIO# [GHC.IO.Handle.Internals.hLookAhead_3 GHC.Prim.void#];

ioe_EOF2_ra7Pd
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    sat-only [] \r [void_0E]
        raiseIO# [GHC.IO.Handle.Internals.hLookAhead_3 GHC.Prim.void#];

GHC.IO.Handle.Internals.ioe_EOF :: forall a. GHC.Types.IO a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [void_0E] ioe_EOF2_ra7Pd GHC.Prim.void#;

GHC.IO.Handle.Internals.wantReadableHandle6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "handle is not open for reading"#;

GHC.IO.Handle.Internals.wantReadableHandle5 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Handle.Internals.wantReadableHandle6;

GHC.IO.Handle.Internals.wantReadableHandle4
  :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.IllegalOperation
                                             GHC.Types.[]
                                             GHC.IO.Handle.Internals.wantReadableHandle5
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Handle.Internals.wantReadableHandle3
  :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Handle.Internals.wantReadableHandle4;

GHC.IO.Handle.Internals.ioe_notReadable1
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [void_0E]
        raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle3
                  GHC.Prim.void#];

ioe_notReadable2_ra7Pe
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    sat-only [] \r [void_0E]
        raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle3
                  GHC.Prim.void#];

GHC.IO.Handle.Internals.ioe_notReadable :: forall a. GHC.Types.IO a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [void_0E] ioe_notReadable2_ra7Pe GHC.Prim.void#;

GHC.IO.Handle.Internals.wantWritableHandle5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "handle is not open for writing"#;

GHC.IO.Handle.Internals.wantWritableHandle4 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Handle.Internals.wantWritableHandle5;

GHC.IO.Handle.Internals.wantWritableHandle3
  :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.IllegalOperation
                                             GHC.Types.[]
                                             GHC.IO.Handle.Internals.wantWritableHandle4
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Handle.Internals.wantWritableHandle2
  :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Handle.Internals.wantWritableHandle3;

GHC.IO.Handle.Internals.ioe_notWritable1
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [void_0E]
        raiseIO# [GHC.IO.Handle.Internals.wantWritableHandle2
                  GHC.Prim.void#];

ioe_notWritable2_ra7Pf
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    sat-only [] \r [void_0E]
        raiseIO# [GHC.IO.Handle.Internals.wantWritableHandle2
                  GHC.Prim.void#];

GHC.IO.Handle.Internals.ioe_notWritable :: forall a. GHC.Types.IO a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [void_0E] ioe_notWritable2_ra7Pf GHC.Prim.void#;

GHC.IO.Handle.Internals.wantSeekableHandle6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "handle is not seekable"#;

GHC.IO.Handle.Internals.wantSeekableHandle5 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Handle.Internals.wantSeekableHandle6;

GHC.IO.Handle.Internals.wantSeekableHandle4
  :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.IllegalOperation
                                             GHC.Types.[]
                                             GHC.IO.Handle.Internals.wantSeekableHandle5
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Handle.Internals.wantSeekableHandle3
  :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Handle.Internals.wantSeekableHandle4;

GHC.IO.Handle.Internals.flushBuffer6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "cannot flush the read buffer: underlying device is not seekable"#;

GHC.IO.Handle.Internals.flushBuffer5 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Internals.flushBuffer6;

GHC.IO.Handle.Internals.flushBuffer4
  :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.IllegalOperation
                                             GHC.Types.[]
                                             GHC.IO.Handle.Internals.flushBuffer5
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Handle.Internals.flushBuffer3 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Handle.Internals.flushBuffer4;

lvl_ra7Pg :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hSetBuffering"#;

lvl1_ra7Ph :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl_ra7Pg;

lvl2_ra7Pi :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "illegal buffer size "#;

GHC.IO.Handle.Internals.$wioe_bufsiz [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    [] \r [ww_sa7Qd void_0E]
        let {
          sat_sa7Ql [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [ww_sa7Qd] \u []
                  let {
                    sat_sa7Qj [Occ=Once] :: GHC.Base.String
                    [LclId] =
                        [ww_sa7Qd] \u []
                            let {
                              sat_sa7Qi [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [ww_sa7Qd] \u []
                                      case GHC.Show.$wshowSignedInt 9# ww_sa7Qd GHC.Types.[] of {
                                        (#,#) ww5_sa7Qg [Occ=Once] ww6_sa7Qh [Occ=Once] ->
                                            : [ww5_sa7Qg ww6_sa7Qh];
                                      };
                            } in  GHC.CString.unpackAppendCString# lvl2_ra7Pi sat_sa7Qi; } in
                  let {
                    sat_sa7Qk [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        CCCS GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                                        GHC.IO.Exception.InvalidArgument
                                                        lvl1_ra7Ph
                                                        sat_sa7Qj
                                                        GHC.Base.Nothing
                                                        GHC.Base.Nothing];
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sa7Qk;
        } in  raiseIO# [sat_sa7Ql GHC.Prim.void#];

GHC.IO.Handle.Internals.ioe_bufsiz1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<B,1*U(U)><B,U>x, Unf=OtherCon []] =
    [] \r [w_sa7Qm void_0E]
        case w_sa7Qm of {
          GHC.Types.I# ww1_sa7Qp [Occ=Once] ->
              GHC.IO.Handle.Internals.$wioe_bufsiz ww1_sa7Qp GHC.Prim.void#;
        };

GHC.IO.Handle.Internals.ioe_bufsiz
  :: forall a. GHC.Types.Int -> GHC.Types.IO a
[GblId, Arity=2, Str=<B,1*U(U)><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.Internals.ioe_bufsiz1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.$wstreamEncode [InlPrag=NOUSERINLINE[0]]
  :: forall from to state.
     GHC.IO.Encoding.Types.CodeBuffer from to
     -> (GHC.IO.Buffer.Buffer from
         -> GHC.IO.Buffer.Buffer to
         -> GHC.Types.IO
              (GHC.IO.Buffer.Buffer from, GHC.IO.Buffer.Buffer to))
     -> GHC.IO.Buffer.Buffer from
     -> GHC.IO.Buffer.Buffer to
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Buffer.Buffer from, GHC.IO.Buffer.Buffer to) #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<C(C(C(S(SS(SLL))))),C(C1(C1(U(U,1*U(1*U,U(U,U,U,U,U,U),U)))))><L,C(C1(C1(U(U,1*U(U(U,U,U,U,U,U),U)))))><L,U(U,U,U,U,U,U)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_sa7Qq ww1_sa7Qr w_sa7Qs w1_sa7Qt void_0E]
        let-no-escape {
          go_sa7Qv [Occ=LoopBreakerT[3]]
            :: GHC.IO.Buffer.Buffer from_sa738
               -> GHC.IO.Buffer.Buffer to_sa739
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     (GHC.IO.Buffer.Buffer from_sa738, GHC.IO.Buffer.Buffer to_sa739) #)
          [LclId[JoinId(3)],
           Arity=3,
           Str=<L,U(U,U,U,U,U,U)><L,U><S,U>,
           Unf=OtherCon []] =
              sat-only [ww_sa7Qq ww1_sa7Qr go_sa7Qv] \r [from1_sa7Qw
                                                         to1_sa7Qx
                                                         void_0E]
                  case ww_sa7Qq from1_sa7Qw to1_sa7Qx GHC.Prim.void# of {
                    Unit# ipv1_sa7QB [Occ=Once!] ->
                        case ipv1_sa7QB of {
                          (,,) why_sa7QD [Occ=Once!]
                               from'_sa7QE [Occ=Once*]
                               to'_sa7QF [Occ=Once*] ->
                              case why_sa7QD of {
                                __DEFAULT ->
                                    let {
                                      sat_sa7QH [Occ=Once]
                                        :: (GHC.IO.Buffer.Buffer from_sa738,
                                            GHC.IO.Buffer.Buffer to_sa739)
                                      [LclId] =
                                          CCCS (,)! [from'_sa7QE to'_sa7QF];
                                    } in  Unit# [sat_sa7QH];
                                GHC.IO.Encoding.Types.InvalidSequence ->
                                    case from1_sa7Qw of {
                                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           dt3_sa7QN [Occ=Once]
                                                           _ [Occ=Dead] ->
                                          case from'_sa7QE of wild3_sa7QP {
                                            GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 dt10_sa7QU [Occ=Once]
                                                                 _ [Occ=Dead] ->
                                                case ==# [dt3_sa7QN dt10_sa7QU] of {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_sa7QX [Occ=Once]
                                                          :: (GHC.IO.Buffer.Buffer from_sa738,
                                                              GHC.IO.Buffer.Buffer to_sa739)
                                                        [LclId] =
                                                            CCCS (,)! [wild3_sa7QP to'_sa7QF];
                                                      } in  Unit# [sat_sa7QX];
                                                  1# ->
                                                      case
                                                          ww1_sa7Qr
                                                              wild3_sa7QP to'_sa7QF GHC.Prim.void#
                                                      of
                                                      { Unit# ipv3_sa7R0 [Occ=Once!] ->
                                                            case ipv3_sa7R0 of {
                                                              (,) from'1_sa7R2 [Occ=Once]
                                                                  to'1_sa7R3 [Occ=Once] ->
                                                                  go_sa7Qv
                                                                      from'1_sa7R2
                                                                      to'1_sa7R3
                                                                      GHC.Prim.void#;
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
                  };
        } in  go_sa7Qv w_sa7Qs w1_sa7Qt GHC.Prim.void#;

GHC.IO.Handle.Internals.dEFAULT_CHAR_BUFFER_SIZE :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [2048#];

GHC.IO.Handle.Internals.initBufferState
  :: GHC.IO.Handle.Types.HandleType -> GHC.IO.Buffer.BufferState
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_sa7R4]
        case ds_sa7R4 of {
          __DEFAULT -> GHC.IO.Buffer.WriteBuffer [];
          GHC.IO.Handle.Types.ReadHandle -> GHC.IO.Buffer.ReadBuffer [];
        };

lvl3_ra7Pj
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Buffer.CharBuffer #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [void_0E]
        case noDuplicate# [GHC.Prim.void#] of s'_sa7R7 {
          (##) ->
              case newMutVar# [GHC.ForeignPtr.NoFinalizers GHC.Prim.void#] of {
                Unit# ipv1_sa7Ra [Occ=Once] ->
                    case newPinnedByteArray# [4# GHC.Prim.void#] of {
                      Unit# ipv3_sa7Rd ->
                          let {
                            sat_sa7Rf [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                            [LclId] =
                                CCCS GHC.ForeignPtr.MallocPtr! [ipv3_sa7Rd ipv1_sa7Ra];
                          } in 
                            case byteArrayContents# [ipv3_sa7Rd] of sat_sa7Re {
                              __DEFAULT ->
                                  let {
                                    sat_sa7Rg [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                    [LclId] =
                                        CCCS GHC.IO.Buffer.Buffer! [sat_sa7Re
                                                                    sat_sa7Rf
                                                                    GHC.IO.Buffer.ReadBuffer
                                                                    1#
                                                                    0#
                                                                    0#];
                                  } in  Unit# [sat_sa7Rg];
                            };
                    };
              };
        };

GHC.IO.Handle.Internals.noCharBuffer [InlPrag=NOINLINE]
  :: GHC.IO.Buffer.CharBuffer
[GblId] =
    [] \u []
        case lvl3_ra7Pj GHC.Prim.realWorld# of {
          Unit# ipv1_sa7Rj [Occ=Once] -> ipv1_sa7Rj;
        };

lvl4_ra7Pk
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Buffer.Buffer GHC.Word.Word8 #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [void_0E]
        case noDuplicate# [GHC.Prim.void#] of s'_sa7Rl {
          (##) ->
              case newMutVar# [GHC.ForeignPtr.NoFinalizers GHC.Prim.void#] of {
                Unit# ipv1_sa7Ro [Occ=Once] ->
                    case newPinnedByteArray# [1# GHC.Prim.void#] of {
                      Unit# ipv3_sa7Rr ->
                          let {
                            sat_sa7Rt [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                            [LclId] =
                                CCCS GHC.ForeignPtr.MallocPtr! [ipv3_sa7Rr ipv1_sa7Ro];
                          } in 
                            case byteArrayContents# [ipv3_sa7Rr] of sat_sa7Rs {
                              __DEFAULT ->
                                  let {
                                    sat_sa7Ru [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                    [LclId] =
                                        CCCS GHC.IO.Buffer.Buffer! [sat_sa7Rs
                                                                    sat_sa7Rt
                                                                    GHC.IO.Buffer.ReadBuffer
                                                                    1#
                                                                    0#
                                                                    0#];
                                  } in  Unit# [sat_sa7Ru];
                            };
                    };
              };
        };

GHC.IO.Handle.Internals.noByteBuffer [InlPrag=NOINLINE]
  :: GHC.IO.Buffer.Buffer GHC.Word.Word8
[GblId] =
    [] \u []
        case lvl4_ra7Pk GHC.Prim.realWorld# of {
          Unit# ipv1_sa7Rx [Occ=Once] -> ipv1_sa7Rx;
        };

GHC.IO.Handle.Internals.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.Handle.Internals.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Internals.$trModule4];

GHC.IO.Handle.Internals.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Handle.Internals"#;

GHC.IO.Handle.Internals.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Internals.$trModule2];

GHC.IO.Handle.Internals.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Handle.Internals.$trModule3
                                     GHC.IO.Handle.Internals.$trModule1];

lvl5_ra7Pl :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "handle is finalized"#;

lvl6_ra7Pm :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl5_ra7Pl;

GHC.IO.Handle.Internals.ioe_finalizedHandle
  :: GHC.IO.FilePath -> GHC.IO.Handle.Types.Handle__
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [fp_sa7Ry]
        let {
          sat_sa7Rz [Occ=Once] :: GHC.Base.Maybe GHC.IO.FilePath
          [LclId] =
              CCCS GHC.Base.Just! [fp_sa7Ry]; } in
        let {
          sat_sa7RA [Occ=Once] :: GHC.IO.Exception.IOException
          [LclId] =
              CCCS GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                              GHC.IO.Exception.IllegalOperation
                                              GHC.Types.[]
                                              lvl6_ra7Pm
                                              GHC.Base.Nothing
                                              sat_sa7Rz];
        } in 
          GHC.Exception.throw
              GHC.IO.Exception.$fExceptionIOException sat_sa7RA;

GHC.IO.Handle.Internals.closeTextCodecs1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_sa7RB void_0E]
        case ds_sa7RB of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds4_sa7RO [Occ=Once*!]
                                       ds5_sa7RP [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds5_sa7RP of {
                GHC.Base.Nothing ->
                    case ds4_sa7RO of {
                      GHC.Base.Nothing -> Unit# [GHC.Tuple.()];
                      GHC.Base.Just d_sa7RW [Occ=Once!] ->
                          case d_sa7RW of {
                            GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                              _ [Occ=Dead]
                                                              ds12_sa7S0 [Occ=Once]
                                                              _ [Occ=Dead]
                                                              _ [Occ=Dead] ->
                                ds12_sa7S0 GHC.Prim.void#;
                          };
                    };
                GHC.Base.Just d_sa7S3 [Occ=Once!] ->
                    case d_sa7S3 of {
                      GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                        _ [Occ=Dead]
                                                        ds12_sa7S7 [Occ=Once]
                                                        _ [Occ=Dead]
                                                        _ [Occ=Dead] ->
                          case ds12_sa7S7 GHC.Prim.void# of {
                            Unit# _ [Occ=Dead] ->
                                case ds4_sa7RO of {
                                  GHC.Base.Nothing -> Unit# [GHC.Tuple.()];
                                  GHC.Base.Just d1_sa7Se [Occ=Once!] ->
                                      case d1_sa7Se of {
                                        GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                          _ [Occ=Dead]
                                                                          ds18_sa7Si [Occ=Once]
                                                                          _ [Occ=Dead]
                                                                          _ [Occ=Dead] ->
                                            ds18_sa7Si GHC.Prim.void#;
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.closeTextCodecs
  :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.Internals.closeTextCodecs1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.openTextEncoding1
  :: forall a.
     GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.HandleType
     -> (forall es ds.
         GHC.Base.Maybe (GHC.IO.Encoding.Types.TextEncoder es)
         -> GHC.Base.Maybe (GHC.IO.Encoding.Types.TextDecoder ds)
         -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U><L,1*C1(C1(C1(U(U,U))))><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_sa7Sl ha_type_sa7Sm cont_sa7Sn void_0E]
        case ds_sa7Sl of {
          GHC.Base.Nothing ->
              cont_sa7Sn GHC.Base.Nothing GHC.Base.Nothing GHC.Prim.void#;
          GHC.Base.Just ds1_sa7Sq [Occ=Once!] ->
              case ds1_sa7Sq of {
                GHC.IO.Encoding.Types.TextEncoding _ [Occ=Dead]
                                                   ds3_sa7St [Occ=Once*]
                                                   ds4_sa7Su [Occ=Once*] ->
                    let-no-escape {
                      $j_sa7Sv [Occ=Once*!T[2], Dmd=<L,1*C1(C1(U(U,U)))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> GHC.Base.Maybe (GHC.IO.Encoding.Types.TextDecoder dstate_aa436)
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa430 #)
                      [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
                          sat-only [ha_type_sa7Sm cont_sa7Sn ds4_sa7Su] \r [void_0E
                                                                            ipv1_sa7Sx]
                              case ha_type_sa7Sm of {
                                __DEFAULT -> cont_sa7Sn GHC.Base.Nothing ipv1_sa7Sx GHC.Prim.void#;
                                GHC.IO.Handle.Types.WriteHandle ->
                                    case ds4_sa7Su GHC.Prim.void# of {
                                      Unit# ipv3_sa7SB [Occ=Once] ->
                                          let {
                                            sat_sa7SC [Occ=Once]
                                              :: GHC.Base.Maybe
                                                   (GHC.IO.Encoding.Types.TextEncoder estate_aa437)
                                            [LclId] =
                                                CCCS GHC.Base.Just! [ipv3_sa7SB];
                                          } in  cont_sa7Sn sat_sa7SC ipv1_sa7Sx GHC.Prim.void#;
                                    };
                                GHC.IO.Handle.Types.AppendHandle ->
                                    case ds4_sa7Su GHC.Prim.void# of {
                                      Unit# ipv3_sa7SF [Occ=Once] ->
                                          let {
                                            sat_sa7SG [Occ=Once]
                                              :: GHC.Base.Maybe
                                                   (GHC.IO.Encoding.Types.TextEncoder estate_aa437)
                                            [LclId] =
                                                CCCS GHC.Base.Just! [ipv3_sa7SF];
                                          } in  cont_sa7Sn sat_sa7SG ipv1_sa7Sx GHC.Prim.void#;
                                    };
                                GHC.IO.Handle.Types.ReadWriteHandle ->
                                    case ds4_sa7Su GHC.Prim.void# of {
                                      Unit# ipv3_sa7SJ [Occ=Once] ->
                                          let {
                                            sat_sa7SK [Occ=Once]
                                              :: GHC.Base.Maybe
                                                   (GHC.IO.Encoding.Types.TextEncoder estate_aa437)
                                            [LclId] =
                                                CCCS GHC.Base.Just! [ipv3_sa7SJ];
                                          } in  cont_sa7Sn sat_sa7SK ipv1_sa7Sx GHC.Prim.void#;
                                    };
                              };
                    } in 
                      case ha_type_sa7Sm of {
                        __DEFAULT -> $j_sa7Sv GHC.Prim.void# GHC.Base.Nothing;
                        GHC.IO.Handle.Types.ReadHandle ->
                            case ds3_sa7St GHC.Prim.void# of {
                              Unit# ipv1_sa7SO [Occ=Once] ->
                                  let {
                                    sat_sa7SP [Occ=Once]
                                      :: GHC.Base.Maybe
                                           (GHC.IO.Encoding.Types.TextDecoder dstate_aa436)
                                    [LclId] =
                                        CCCS GHC.Base.Just! [ipv1_sa7SO];
                                  } in  $j_sa7Sv GHC.Prim.void# sat_sa7SP;
                            };
                        GHC.IO.Handle.Types.ReadWriteHandle ->
                            case ds3_sa7St GHC.Prim.void# of {
                              Unit# ipv1_sa7SS [Occ=Once] ->
                                  let {
                                    sat_sa7ST [Occ=Once]
                                      :: GHC.Base.Maybe
                                           (GHC.IO.Encoding.Types.TextDecoder dstate_aa436)
                                    [LclId] =
                                        CCCS GHC.Base.Just! [ipv1_sa7SS];
                                  } in  $j_sa7Sv GHC.Prim.void# sat_sa7ST;
                            };
                      };
              };
        };

GHC.IO.Handle.Internals.openTextEncoding
  :: forall a.
     GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.HandleType
     -> (forall es ds.
         GHC.Base.Maybe (GHC.IO.Encoding.Types.TextEncoder es)
         -> GHC.Base.Maybe (GHC.IO.Encoding.Types.TextDecoder ds)
         -> GHC.Types.IO a)
     -> GHC.Types.IO a
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U><L,1*C1(C1(C1(U(U,U))))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.Internals.openTextEncoding1
            eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.flushByteWriteBuffer1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [h__sa7SU void_0E]
        case h__sa7SU of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       $dBufferedIO_sa7SY [Occ=Once]
                                       _ [Occ=Dead]
                                       ds_sa7T0 [Occ=Once]
                                       _ [Occ=Dead]
                                       dt_sa7T2
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt_sa7T2 GHC.Prim.void#] of {
                Unit# ipv1_sa7Tf [Occ=Once!] ->
                    case ipv1_sa7Tf of wild1_sa7Tg {
                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           dt7_sa7Tl [Occ=Once]
                                           dt8_sa7Tm [Occ=Once] ->
                          case ==# [dt7_sa7Tl dt8_sa7Tm] of {
                            __DEFAULT ->
                                case
                                    GHC.IO.BufferedIO.flushWriteBuffer
                                        $dBufferedIO_sa7SY ds_sa7T0 wild1_sa7Tg GHC.Prim.void#
                                of
                                { Unit# ipv3_sa7Tq [Occ=Once] ->
                                      case
                                          writeMutVar# [dt_sa7T2 ipv3_sa7Tq GHC.Prim.void#]
                                      of
                                      s2#_sa7Tr
                                      { (##) -> Unit# [GHC.Tuple.()];
                                      };
                                };
                            1# -> Unit# [GHC.Tuple.()];
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.flushByteWriteBuffer
  :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.Internals.flushByteWriteBuffer1
            eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.flushWriteBuffer1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [h__sa7Ts void_0E]
        case h__sa7Ts of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       $dBufferedIO_sa7Tw [Occ=Once]
                                       _ [Occ=Dead]
                                       ds_sa7Ty [Occ=Once]
                                       _ [Occ=Dead]
                                       dt_sa7TA
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt_sa7TA GHC.Prim.void#] of {
                Unit# ipv1_sa7TN [Occ=Once!] ->
                    case ipv1_sa7TN of {
                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           ds10_sa7TR [Occ=Once!]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
                          case ds10_sa7TR of {
                            GHC.IO.Buffer.ReadBuffer -> Unit# [GHC.Tuple.()];
                            GHC.IO.Buffer.WriteBuffer ->
                                case readMutVar# [dt_sa7TA GHC.Prim.void#] of {
                                  Unit# ipv3_sa7TY [Occ=Once!] ->
                                      case ipv3_sa7TY of wild3_sa7TZ {
                                        GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             dt12_sa7U4 [Occ=Once]
                                                             dt13_sa7U5 [Occ=Once] ->
                                            case ==# [dt12_sa7U4 dt13_sa7U5] of {
                                              __DEFAULT ->
                                                  case
                                                      GHC.IO.BufferedIO.flushWriteBuffer
                                                          $dBufferedIO_sa7Tw
                                                          ds_sa7Ty
                                                          wild3_sa7TZ
                                                          GHC.Prim.void#
                                                  of
                                                  { Unit# ipv5_sa7U9 [Occ=Once] ->
                                                        case
                                                            writeMutVar# [dt_sa7TA
                                                                          ipv5_sa7U9
                                                                          GHC.Prim.void#]
                                                        of
                                                        s2#_sa7Ua
                                                        { (##) -> Unit# [GHC.Tuple.()];
                                                        };
                                                  };
                                              1# -> Unit# [GHC.Tuple.()];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.flushWriteBuffer
  :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.Internals.flushWriteBuffer1 eta_B2 GHC.Prim.void#;

lvl7_ra7Pn :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "codec_state"#;

GHC.IO.Handle.Internals.decodeByteBuf2
  :: forall dec_state. dec_state
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl7_ra7Pn of sat_sa7Ub {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sa7Ub;
        };

GHC.IO.Handle.Internals.decodeByteBuf1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Buffer.CharBuffer #)
[GblId,
 Arity=3,
 Str=<S,1*U><L,U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [h__sa7Uc cbuf_sa7Ud void_0E]
        case h__sa7Uc of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       dt_sa7Ul
                                       _ [Occ=Dead]
                                       dt1_sa7Un [Occ=Once*]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds4_sa7Ur [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt_sa7Ul GHC.Prim.void#] of {
                Unit# ipv1_sa7Uy ->
                    case ds4_sa7Ur of {
                      GHC.Base.Nothing ->
                          let {
                            sat_sa7UA [Occ=Once]
                              :: (dec_state_aa47A, GHC.IO.Buffer.Buffer GHC.Word.Word8)
                            [LclId] =
                                CCCS (,)! [GHC.IO.Handle.Internals.decodeByteBuf2 ipv1_sa7Uy];
                          } in 
                            case
                                writeMutVar# [dt1_sa7Un sat_sa7UA GHC.Prim.void#]
                            of
                            s2#_sa7UB
                            { (##) ->
                                  case
                                      GHC.IO.Encoding.Latin1.latin5
                                          ipv1_sa7Uy cbuf_sa7Ud GHC.Prim.void#
                                  of
                                  { Unit# ipv3_sa7UE [Occ=Once!] ->
                                        case ipv3_sa7UE of {
                                          (,,) _ [Occ=Dead]
                                               input'_sa7UH [Occ=Once]
                                               output'_sa7UI [Occ=Once] ->
                                              case
                                                  writeMutVar# [dt_sa7Ul
                                                                input'_sa7UH
                                                                GHC.Prim.void#]
                                              of
                                              s2#1_sa7UJ
                                              { (##) -> Unit# [output'_sa7UI];
                                              };
                                        };
                                  };
                            };
                      GHC.Base.Just decoder_sa7UK [Occ=Once!] ->
                          case decoder_sa7UK of {
                            GHC.IO.Encoding.Types.BufferCodec ds10_sa7UM [Occ=Once]
                                                              ds11_sa7UN [Occ=Once]
                                                              _ [Occ=Dead]
                                                              ds13_sa7UP [Occ=Once]
                                                              _ [Occ=Dead] ->
                                case ds13_sa7UP GHC.Prim.void# of {
                                  Unit# ipv3_sa7UT [Occ=Once] ->
                                      let {
                                        sat_sa7UU [Occ=Once]
                                          :: (dec_state_aa47A, GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                        [LclId] =
                                            CCCS (,)! [ipv3_sa7UT ipv1_sa7Uy];
                                      } in 
                                        case
                                            writeMutVar# [dt1_sa7Un sat_sa7UU GHC.Prim.void#]
                                        of
                                        s2#_sa7UV
                                        { (##) ->
                                              case
                                                  GHC.IO.Handle.Internals.$wstreamEncode
                                                      ds10_sa7UM
                                                      ds11_sa7UN
                                                      ipv1_sa7Uy
                                                      cbuf_sa7Ud
                                                      GHC.Prim.void#
                                              of
                                              { Unit# ipv5_sa7UY [Occ=Once!] ->
                                                    case ipv5_sa7UY of {
                                                      (,) bbuf2_sa7V0 [Occ=Once]
                                                          cbuf'_sa7V1 [Occ=Once] ->
                                                          case
                                                              writeMutVar# [dt_sa7Ul
                                                                            bbuf2_sa7V0
                                                                            GHC.Prim.void#]
                                                          of
                                                          s2#1_sa7V2
                                                          { (##) -> Unit# [cbuf'_sa7V1];
                                                          };
                                                    };
                                              };
                                        };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.decodeByteBuf
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Types.IO GHC.IO.Buffer.CharBuffer
[GblId,
 Arity=3,
 Str=<S,1*U><L,U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.Internals.decodeByteBuf1
            eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.readTextDeviceNonBlocking1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Buffer.CharBuffer #)
[GblId,
 Arity=3,
 Str=<S,1*U><L,U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [h__sa7V3 cbuf_sa7V4 void_0E]
        case h__sa7V3 of wild_sa7V6 {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       $dBufferedIO_sa7V8 [Occ=Once]
                                       _ [Occ=Dead]
                                       ds_sa7Va [Occ=Once]
                                       _ [Occ=Dead]
                                       dt_sa7Vc
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt_sa7Vc GHC.Prim.void#] of {
                Unit# ipv1_sa7Vp [Occ=Once!] ->
                    case ipv1_sa7Vp of wild1_sa7Vq {
                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           dt7_sa7Vv [Occ=Once]
                                           dt8_sa7Vw [Occ=Once] ->
                          case ==# [dt7_sa7Vv dt8_sa7Vw] of {
                            __DEFAULT ->
                                GHC.IO.Handle.Internals.decodeByteBuf1
                                    wild_sa7V6 cbuf_sa7V4 GHC.Prim.void#;
                            1# ->
                                case
                                    GHC.IO.BufferedIO.fillReadBuffer0
                                        $dBufferedIO_sa7V8 ds_sa7Va wild1_sa7Vq GHC.Prim.void#
                                of
                                { Unit# ipv3_sa7VA [Occ=Once!] ->
                                      case ipv3_sa7VA of {
                                        (,) r_sa7VC [Occ=Once!] bbuf1_sa7VD [Occ=Once] ->
                                            case r_sa7VC of {
                                              GHC.Base.Nothing ->
                                                  raiseIO# [GHC.IO.Handle.Internals.hLookAhead_3
                                                            GHC.Prim.void#];
                                              GHC.Base.Just _ [Occ=Dead] ->
                                                  case
                                                      writeMutVar# [dt_sa7Vc
                                                                    bbuf1_sa7VD
                                                                    GHC.Prim.void#]
                                                  of
                                                  s2#_sa7VH
                                                  { (##) ->
                                                        GHC.IO.Handle.Internals.decodeByteBuf1
                                                            wild_sa7V6 cbuf_sa7V4 GHC.Prim.void#;
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.readTextDeviceNonBlocking
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Types.IO GHC.IO.Buffer.CharBuffer
[GblId,
 Arity=3,
 Str=<S,1*U><L,U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.Internals.readTextDeviceNonBlocking1
            eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.wantReadableHandle2
  :: forall a.
     (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Str=<L,1*C1(C1(U(U,U)))><S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [act_sa7VI h__sa7VJ void_0E]
        case h__sa7VJ of wild_sa7VL {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       $dBufferedIO_sa7VN [Occ=Once]
                                       _ [Occ=Dead]
                                       ds_sa7VP [Occ=Once]
                                       ds1_sa7VQ [Occ=Once!]
                                       dt_sa7VR
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       dt2_sa7VU
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds1_sa7VQ of {
                GHC.IO.Handle.Types.ClosedHandle ->
                    raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle11
                              GHC.Prim.void#];
                GHC.IO.Handle.Types.SemiClosedHandle ->
                    raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle7
                              GHC.Prim.void#];
                GHC.IO.Handle.Types.ReadHandle ->
                    act_sa7VI wild_sa7VL GHC.Prim.void#;
                GHC.IO.Handle.Types.WriteHandle ->
                    raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle3
                              GHC.Prim.void#];
                GHC.IO.Handle.Types.AppendHandle ->
                    raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle3
                              GHC.Prim.void#];
                GHC.IO.Handle.Types.ReadWriteHandle ->
                    case readMutVar# [dt_sa7VR GHC.Prim.void#] of {
                      Unit# ipv1_sa7W5 [Occ=Once!] ->
                          case ipv1_sa7W5 of {
                            GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 ds10_sa7W9 [Occ=Once!]
                                                 _ [Occ=Dead]
                                                 dt7_sa7Wb [Occ=Once]
                                                 dt8_sa7Wc [Occ=Once] ->
                                case ds10_sa7W9 of {
                                  GHC.IO.Buffer.ReadBuffer -> act_sa7VI wild_sa7VL GHC.Prim.void#;
                                  GHC.IO.Buffer.WriteBuffer ->
                                      case ==# [dt7_sa7Wb dt8_sa7Wc] of {
                                        __DEFAULT ->
                                            case readMutVar# [dt_sa7VR GHC.Prim.void#] of {
                                              Unit# ipv3_sa7Wh [Occ=Once!] ->
                                                  case ipv3_sa7Wh of wild4_sa7Wi {
                                                    GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                         _ [Occ=Dead]
                                                                         _ [Occ=Dead]
                                                                         _ [Occ=Dead]
                                                                         dt12_sa7Wn [Occ=Once]
                                                                         dt13_sa7Wo [Occ=Once] ->
                                                        case ==# [dt12_sa7Wn dt13_sa7Wo] of {
                                                          __DEFAULT ->
                                                              case
                                                                  GHC.IO.BufferedIO.flushWriteBuffer
                                                                      $dBufferedIO_sa7VN
                                                                      ds_sa7VP
                                                                      wild4_sa7Wi
                                                                      GHC.Prim.void#
                                                              of
                                                              { Unit# ipv5_sa7Ws [Occ=Once] ->
                                                                    case
                                                                        writeMutVar# [dt_sa7VR
                                                                                      ipv5_sa7Ws
                                                                                      GHC.Prim.void#]
                                                                    of
                                                                    s2#_sa7Wt
                                                                    { (##) ->
                                                                          case
                                                                              readMutVar# [dt2_sa7VU
                                                                                           GHC.Prim.void#]
                                                                          of
                                                                          { Unit# ipv7_sa7Ww [Occ=Once!] ->
                                                                                let {
                                                                                  sat_sa7WE [Occ=Once]
                                                                                    :: GHC.IO.Buffer.Buffer
                                                                                         GHC.IO.Buffer.CharBufElem
                                                                                  [LclId] =
                                                                                      [ipv7_sa7Ww] \u []
                                                                                          case
                                                                                              ipv7_sa7Ww
                                                                                          of
                                                                                          { GHC.IO.Buffer.Buffer dt14_sa7Wy [Occ=Once]
                                                                                                                 dt15_sa7Wz [Occ=Once]
                                                                                                                 _ [Occ=Dead]
                                                                                                                 dt16_sa7WB [Occ=Once]
                                                                                                                 dt17_sa7WC [Occ=Once]
                                                                                                                 dt18_sa7WD [Occ=Once] ->
                                                                                                GHC.IO.Buffer.Buffer [dt14_sa7Wy
                                                                                                                      dt15_sa7Wz
                                                                                                                      GHC.IO.Buffer.ReadBuffer
                                                                                                                      dt16_sa7WB
                                                                                                                      dt17_sa7WC
                                                                                                                      dt18_sa7WD];
                                                                                          };
                                                                                } in 
                                                                                  case
                                                                                      writeMutVar# [dt2_sa7VU
                                                                                                    sat_sa7WE
                                                                                                    GHC.Prim.void#]
                                                                                  of
                                                                                  s2#1_sa7WF
                                                                                  { (##) ->
                                                                                        case
                                                                                            readMutVar# [dt_sa7VR
                                                                                                         GHC.Prim.void#]
                                                                                        of
                                                                                        { Unit# ipv9_sa7WI [Occ=Once!] ->
                                                                                              let {
                                                                                                sat_sa7WQ [Occ=Once]
                                                                                                  :: GHC.IO.Buffer.Buffer
                                                                                                       GHC.Word.Word8
                                                                                                [LclId] =
                                                                                                    [ipv9_sa7WI] \u []
                                                                                                        case
                                                                                                            ipv9_sa7WI
                                                                                                        of
                                                                                                        { GHC.IO.Buffer.Buffer dt14_sa7WK [Occ=Once]
                                                                                                                               dt15_sa7WL [Occ=Once]
                                                                                                                               _ [Occ=Dead]
                                                                                                                               dt16_sa7WN [Occ=Once]
                                                                                                                               dt17_sa7WO [Occ=Once]
                                                                                                                               dt18_sa7WP [Occ=Once] ->
                                                                                                              GHC.IO.Buffer.Buffer [dt14_sa7WK
                                                                                                                                    dt15_sa7WL
                                                                                                                                    GHC.IO.Buffer.ReadBuffer
                                                                                                                                    dt16_sa7WN
                                                                                                                                    dt17_sa7WO
                                                                                                                                    dt18_sa7WP];
                                                                                                        };
                                                                                              } in 
                                                                                                case
                                                                                                    writeMutVar# [dt_sa7VR
                                                                                                                  sat_sa7WQ
                                                                                                                  GHC.Prim.void#]
                                                                                                of
                                                                                                s2#2_sa7WR
                                                                                                { (##) ->
                                                                                                      act_sa7VI
                                                                                                          wild_sa7VL
                                                                                                          GHC.Prim.void#;
                                                                                                };
                                                                                        };
                                                                                  };
                                                                          };
                                                                    };
                                                              };
                                                          1# ->
                                                              case
                                                                  readMutVar# [dt2_sa7VU
                                                                               GHC.Prim.void#]
                                                              of
                                                              { Unit# ipv5_sa7WU [Occ=Once!] ->
                                                                    let {
                                                                      sat_sa7X2 [Occ=Once]
                                                                        :: GHC.IO.Buffer.Buffer
                                                                             GHC.IO.Buffer.CharBufElem
                                                                      [LclId] =
                                                                          [ipv5_sa7WU] \u []
                                                                              case ipv5_sa7WU of {
                                                                                GHC.IO.Buffer.Buffer dt14_sa7WW [Occ=Once]
                                                                                                     dt15_sa7WX [Occ=Once]
                                                                                                     _ [Occ=Dead]
                                                                                                     dt16_sa7WZ [Occ=Once]
                                                                                                     dt17_sa7X0 [Occ=Once]
                                                                                                     dt18_sa7X1 [Occ=Once] ->
                                                                                    GHC.IO.Buffer.Buffer [dt14_sa7WW
                                                                                                          dt15_sa7WX
                                                                                                          GHC.IO.Buffer.ReadBuffer
                                                                                                          dt16_sa7WZ
                                                                                                          dt17_sa7X0
                                                                                                          dt18_sa7X1];
                                                                              };
                                                                    } in 
                                                                      case
                                                                          writeMutVar# [dt2_sa7VU
                                                                                        sat_sa7X2
                                                                                        GHC.Prim.void#]
                                                                      of
                                                                      s2#_sa7X3
                                                                      { (##) ->
                                                                            case
                                                                                readMutVar# [dt_sa7VR
                                                                                             GHC.Prim.void#]
                                                                            of
                                                                            { Unit# ipv7_sa7X6 [Occ=Once!] ->
                                                                                  let {
                                                                                    sat_sa7Xe [Occ=Once]
                                                                                      :: GHC.IO.Buffer.Buffer
                                                                                           GHC.Word.Word8
                                                                                    [LclId] =
                                                                                        [ipv7_sa7X6] \u []
                                                                                            case
                                                                                                ipv7_sa7X6
                                                                                            of
                                                                                            { GHC.IO.Buffer.Buffer dt14_sa7X8 [Occ=Once]
                                                                                                                   dt15_sa7X9 [Occ=Once]
                                                                                                                   _ [Occ=Dead]
                                                                                                                   dt16_sa7Xb [Occ=Once]
                                                                                                                   dt17_sa7Xc [Occ=Once]
                                                                                                                   dt18_sa7Xd [Occ=Once] ->
                                                                                                  GHC.IO.Buffer.Buffer [dt14_sa7X8
                                                                                                                        dt15_sa7X9
                                                                                                                        GHC.IO.Buffer.ReadBuffer
                                                                                                                        dt16_sa7Xb
                                                                                                                        dt17_sa7Xc
                                                                                                                        dt18_sa7Xd];
                                                                                            };
                                                                                  } in 
                                                                                    case
                                                                                        writeMutVar# [dt_sa7VR
                                                                                                      sat_sa7Xe
                                                                                                      GHC.Prim.void#]
                                                                                    of
                                                                                    s2#1_sa7Xf
                                                                                    { (##) ->
                                                                                          act_sa7VI
                                                                                              wild_sa7VL
                                                                                              GHC.Prim.void#;
                                                                                    };
                                                                            };
                                                                      };
                                                              };
                                                        };
                                                  };
                                            };
                                        1# ->
                                            case readMutVar# [dt2_sa7VU GHC.Prim.void#] of {
                                              Unit# ipv3_sa7Xi [Occ=Once!] ->
                                                  let {
                                                    sat_sa7Xq [Occ=Once]
                                                      :: GHC.IO.Buffer.Buffer
                                                           GHC.IO.Buffer.CharBufElem
                                                    [LclId] =
                                                        [ipv3_sa7Xi] \u []
                                                            case ipv3_sa7Xi of {
                                                              GHC.IO.Buffer.Buffer dt9_sa7Xk [Occ=Once]
                                                                                   dt10_sa7Xl [Occ=Once]
                                                                                   _ [Occ=Dead]
                                                                                   dt11_sa7Xn [Occ=Once]
                                                                                   dt12_sa7Xo [Occ=Once]
                                                                                   dt13_sa7Xp [Occ=Once] ->
                                                                  GHC.IO.Buffer.Buffer [dt9_sa7Xk
                                                                                        dt10_sa7Xl
                                                                                        GHC.IO.Buffer.ReadBuffer
                                                                                        dt11_sa7Xn
                                                                                        dt12_sa7Xo
                                                                                        dt13_sa7Xp];
                                                            };
                                                  } in 
                                                    case
                                                        writeMutVar# [dt2_sa7VU
                                                                      sat_sa7Xq
                                                                      GHC.Prim.void#]
                                                    of
                                                    s2#_sa7Xr
                                                    { (##) ->
                                                          case
                                                              readMutVar# [dt_sa7VR GHC.Prim.void#]
                                                          of
                                                          { Unit# ipv5_sa7Xu [Occ=Once!] ->
                                                                let {
                                                                  sat_sa7XC [Occ=Once]
                                                                    :: GHC.IO.Buffer.Buffer
                                                                         GHC.Word.Word8
                                                                  [LclId] =
                                                                      [ipv5_sa7Xu] \u []
                                                                          case ipv5_sa7Xu of {
                                                                            GHC.IO.Buffer.Buffer dt9_sa7Xw [Occ=Once]
                                                                                                 dt10_sa7Xx [Occ=Once]
                                                                                                 _ [Occ=Dead]
                                                                                                 dt11_sa7Xz [Occ=Once]
                                                                                                 dt12_sa7XA [Occ=Once]
                                                                                                 dt13_sa7XB [Occ=Once] ->
                                                                                GHC.IO.Buffer.Buffer [dt9_sa7Xw
                                                                                                      dt10_sa7Xx
                                                                                                      GHC.IO.Buffer.ReadBuffer
                                                                                                      dt11_sa7Xz
                                                                                                      dt12_sa7XA
                                                                                                      dt13_sa7XB];
                                                                          };
                                                                } in 
                                                                  case
                                                                      writeMutVar# [dt_sa7VR
                                                                                    sat_sa7XC
                                                                                    GHC.Prim.void#]
                                                                  of
                                                                  s2#1_sa7XD
                                                                  { (##) ->
                                                                        act_sa7VI
                                                                            wild_sa7VL
                                                                            GHC.Prim.void#;
                                                                  };
                                                          };
                                                    };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

lvl8_ra7Po :: GHC.IO.Handle.Types.BufferMode
[GblId, Caf=NoCafRefs, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.BlockBuffering! [GHC.Base.Nothing];

GHC.IO.Handle.Internals.mkDuplexHandle5
  :: forall dev.
     (GHC.IO.Device.IODevice dev, GHC.IO.BufferedIO.BufferedIO dev,
      Data.Typeable.Internal.Typeable dev) =>
     dev
     -> GHC.IO.FilePath
     -> GHC.IO.Handle.Types.HandleType
     -> GHC.Types.Bool
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.NewlineMode
     -> GHC.Base.Maybe GHC.IO.Handle.Internals.HandleFinalizer
     -> GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId,
 Arity=12,
 Str=<L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U)><L,U><L,U><L,U><L,U><L,1*U><S,U><L,U(1*U,1*U)><L,1*U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [$dIODevice_sa7XE
           $dBufferedIO_sa7XF
           $dTypeable_sa7XG
           dev1_sa7XH
           filepath_sa7XI
           ha_type_sa7XJ
           buffered_sa7XK
           mb_codec_sa7XL
           nl_sa7XM
           finalizer_sa7XN
           other_side_sa7XO
           void_0E]
        let-no-escape {
          cont_sa7XQ [Occ=Once*!T[5], Dmd=<L,1*C1(C1(C1(U(U,U))))>]
            :: forall es ds.
               GHC.Base.Maybe (GHC.IO.Encoding.Types.TextEncoder es)
               -> GHC.Base.Maybe (GHC.IO.Encoding.Types.TextDecoder ds)
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     GHC.IO.Handle.Types.Handle #)
          [LclId[JoinId(5)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
              sat-only [$dIODevice_sa7XE
                        $dBufferedIO_sa7XF
                        $dTypeable_sa7XG
                        dev1_sa7XH
                        filepath_sa7XI
                        ha_type_sa7XJ
                        buffered_sa7XK
                        mb_codec_sa7XL
                        nl_sa7XM
                        finalizer_sa7XN
                        other_side_sa7XO] \r [mb_encoder_sa7XR mb_decoder_sa7XS void_0E]
                  let {
                    buf_state_sa7XU :: GHC.IO.Buffer.BufferState
                    [LclId] =
                        [ha_type_sa7XJ] \u []
                            case ha_type_sa7XJ of {
                              __DEFAULT -> GHC.IO.Buffer.WriteBuffer [];
                              GHC.IO.Handle.Types.ReadHandle -> GHC.IO.Buffer.ReadBuffer [];
                            };
                  } in 
                    case
                        GHC.IO.BufferedIO.newBuffer
                            $dBufferedIO_sa7XF dev1_sa7XH buf_state_sa7XU GHC.Prim.void#
                    of
                    { Unit# ipv1_sa7XY ->
                          case newMutVar# [ipv1_sa7XY GHC.Prim.void#] of {
                            Unit# ipv3_sa7Y1 [Occ=Once] ->
                                let {
                                  sat_sa7Y2 [Occ=Once]
                                    :: (ds_aa4hw, GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                  [LclId] =
                                      CCCS (,)! [GHC.IO.Handle.Internals.decodeByteBuf2 ipv1_sa7XY];
                                } in 
                                  case newMutVar# [sat_sa7Y2 GHC.Prim.void#] of {
                                    Unit# ipv5_sa7Y5 [Occ=Once] ->
                                        let-no-escape {
                                          $w$j_sa7Y6 [InlPrag=NOUSERINLINE[0],
                                                      Occ=Once*!T[3],
                                                      Dmd=<L,1*C1(C1(C1(U(U,U))))>]
                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> GHC.IORef.IORef GHC.IO.Buffer.CharBuffer
                                               -> GHC.IO.Handle.Types.BufferMode
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                     GHC.IO.Handle.Types.Handle #)
                                          [LclId[JoinId(3)],
                                           Arity=3,
                                           Str=<S,U><L,1*U(U)><L,U>,
                                           Unf=OtherCon []] =
                                              sat-only [$dIODevice_sa7XE
                                                        $dBufferedIO_sa7XF
                                                        $dTypeable_sa7XG
                                                        dev1_sa7XH
                                                        filepath_sa7XI
                                                        ha_type_sa7XJ
                                                        mb_codec_sa7XL
                                                        nl_sa7XM
                                                        finalizer_sa7XN
                                                        other_side_sa7XO
                                                        mb_encoder_sa7XR
                                                        mb_decoder_sa7XS
                                                        ipv3_sa7Y1
                                                        ipv5_sa7Y5] \r [void_0E ww_sa7Y8 ww1_sa7Y9]
                                                  case
                                                      newMutVar# [GHC.IO.Handle.Types.BufferListNil
                                                                  GHC.Prim.void#]
                                                  of
                                                  { Unit# ipv7_sa7Yc [Occ=Once] ->
                                                        case newMVar# [GHC.Prim.void#] of {
                                                          Unit# ipv9_sa7Yf ->
                                                              let {
                                                                sat_sa7Yl [Occ=Once]
                                                                  :: GHC.IO.Handle.Types.Handle__
                                                                [LclId] =
                                                                    [$dIODevice_sa7XE
                                                                     $dBufferedIO_sa7XF
                                                                     $dTypeable_sa7XG
                                                                     dev1_sa7XH
                                                                     ha_type_sa7XJ
                                                                     mb_codec_sa7XL
                                                                     nl_sa7XM
                                                                     other_side_sa7XO
                                                                     mb_encoder_sa7XR
                                                                     mb_decoder_sa7XS
                                                                     ipv3_sa7Y1
                                                                     ipv5_sa7Y5
                                                                     ww_sa7Y8
                                                                     ww1_sa7Y9
                                                                     ipv7_sa7Yc] \u []
                                                                        case
                                                                            dev1_sa7XH
                                                                        of
                                                                        dt_sa7Yg
                                                                        { __DEFAULT ->
                                                                              case ww_sa7Y8 of {
                                                                                GHC.STRef.STRef dt2_sa7Yi [Occ=Once] ->
                                                                                    let {
                                                                                      sat_sa7Yk [Occ=Once]
                                                                                        :: GHC.IO.Handle.Types.Newline
                                                                                      [LclId] =
                                                                                          [nl_sa7XM] \u []
                                                                                              GHC.IO.Handle.Types.outputNL
                                                                                                  nl_sa7XM; } in
                                                                                    let {
                                                                                      sat_sa7Yj [Occ=Once]
                                                                                        :: GHC.IO.Handle.Types.Newline
                                                                                      [LclId] =
                                                                                          [nl_sa7XM] \u []
                                                                                              GHC.IO.Handle.Types.inputNL
                                                                                                  nl_sa7XM;
                                                                                    } in 
                                                                                      GHC.IO.Handle.Types.Handle__ [$dIODevice_sa7XE
                                                                                                                    $dBufferedIO_sa7XF
                                                                                                                    $dTypeable_sa7XG
                                                                                                                    dt_sa7Yg
                                                                                                                    ha_type_sa7XJ
                                                                                                                    ipv3_sa7Y1
                                                                                                                    ww1_sa7Y9
                                                                                                                    ipv5_sa7Y5
                                                                                                                    dt2_sa7Yi
                                                                                                                    ipv7_sa7Yc
                                                                                                                    mb_encoder_sa7XR
                                                                                                                    mb_decoder_sa7XS
                                                                                                                    mb_codec_sa7XL
                                                                                                                    sat_sa7Yj
                                                                                                                    sat_sa7Yk
                                                                                                                    other_side_sa7XO];
                                                                              };
                                                                        };
                                                              } in 
                                                                case
                                                                    putMVar# [ipv9_sa7Yf
                                                                              sat_sa7Yl
                                                                              GHC.Prim.void#]
                                                                of
                                                                s2#_sa7Ym
                                                                { (##) ->
                                                                      case finalizer_sa7XN of {
                                                                        GHC.Base.Nothing ->
                                                                            let {
                                                                              sat_sa7Yo [Occ=Once]
                                                                                :: GHC.IO.Handle.Types.Handle
                                                                              [LclId] =
                                                                                  CCCS GHC.IO.Handle.Types.FileHandle! [filepath_sa7XI
                                                                                                                        ipv9_sa7Yf];
                                                                            } in  Unit# [sat_sa7Yo];
                                                                        GHC.Base.Just finalizer1_sa7Yp [Occ=Once!] ->
                                                                            let {
                                                                              sat_sa7Yr [Occ=Once]
                                                                                :: GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld
                                                                                   -> (# GHC.Prim.State#
                                                                                           GHC.Prim.RealWorld,
                                                                                         () #)
                                                                              [LclId] =
                                                                                  [filepath_sa7XI
                                                                                   ipv9_sa7Yf
                                                                                   finalizer1_sa7Yp] \u []
                                                                                      let {
                                                                                        sat_sa7Yq [Occ=Once]
                                                                                          :: GHC.MVar.MVar
                                                                                               GHC.IO.Handle.Types.Handle__
                                                                                        [LclId] =
                                                                                            CCCS GHC.MVar.MVar! [ipv9_sa7Yf];
                                                                                      } in 
                                                                                        finalizer1_sa7Yp
                                                                                            filepath_sa7XI
                                                                                            sat_sa7Yq;
                                                                            } in 
                                                                              case
                                                                                  mkWeak# [ipv9_sa7Yf
                                                                                           GHC.Tuple.()
                                                                                           sat_sa7Yr
                                                                                           GHC.Prim.void#]
                                                                              of
                                                                              { Unit# _ [Occ=Dead] ->
                                                                                    let {
                                                                                      sat_sa7Yv [Occ=Once]
                                                                                        :: GHC.IO.Handle.Types.Handle
                                                                                      [LclId] =
                                                                                          CCCS GHC.IO.Handle.Types.FileHandle! [filepath_sa7XI
                                                                                                                                ipv9_sa7Yf];
                                                                                    } in 
                                                                                      Unit# [sat_sa7Yv];
                                                                              };
                                                                      };
                                                                };
                                                        };
                                                  };
                                        } in 
                                          case buffered_sa7XK of {
                                            GHC.Types.False ->
                                                case
                                                    newMutVar# [GHC.ForeignPtr.NoFinalizers
                                                                GHC.Prim.void#]
                                                of
                                                { Unit# ipv7_sa7Yz [Occ=Once] ->
                                                      case
                                                          newPinnedByteArray# [8192# GHC.Prim.void#]
                                                      of
                                                      { Unit# ipv9_sa7YC ->
                                                            let {
                                                              sat_sa7YE [Occ=Once]
                                                                :: GHC.ForeignPtr.ForeignPtrContents
                                                              [LclId] =
                                                                  CCCS GHC.ForeignPtr.MallocPtr! [ipv9_sa7YC
                                                                                                  ipv7_sa7Yz];
                                                            } in 
                                                              case
                                                                  byteArrayContents# [ipv9_sa7YC]
                                                              of
                                                              sat_sa7YD
                                                              { __DEFAULT ->
                                                                    let {
                                                                      sat_sa7YF [Occ=Once]
                                                                        :: GHC.IO.Buffer.CharBuffer
                                                                      [LclId] =
                                                                          CCCS GHC.IO.Buffer.Buffer! [sat_sa7YD
                                                                                                      sat_sa7YE
                                                                                                      buf_state_sa7XU
                                                                                                      2048#
                                                                                                      0#
                                                                                                      0#];
                                                                    } in 
                                                                      case
                                                                          newMutVar# [sat_sa7YF
                                                                                      GHC.Prim.void#]
                                                                      of
                                                                      { Unit# ipv11_sa7YI [Occ=Once] ->
                                                                            let {
                                                                              sat_sa7YJ [Occ=Once]
                                                                                :: GHC.IORef.IORef
                                                                                     GHC.IO.Buffer.CharBuffer
                                                                              [LclId] =
                                                                                  CCCS GHC.STRef.STRef! [ipv11_sa7YI];
                                                                            } in 
                                                                              $w$j_sa7Y6
                                                                                  GHC.Prim.void#
                                                                                  sat_sa7YJ
                                                                                  GHC.IO.Handle.Types.NoBuffering;
                                                                      };
                                                              };
                                                      };
                                                };
                                            GHC.Types.True ->
                                                case
                                                    newMutVar# [GHC.ForeignPtr.NoFinalizers
                                                                GHC.Prim.void#]
                                                of
                                                { Unit# ipv7_sa7YM [Occ=Once] ->
                                                      case
                                                          newPinnedByteArray# [8192# GHC.Prim.void#]
                                                      of
                                                      { Unit# ipv9_sa7YP ->
                                                            let {
                                                              sat_sa7YR [Occ=Once]
                                                                :: GHC.ForeignPtr.ForeignPtrContents
                                                              [LclId] =
                                                                  CCCS GHC.ForeignPtr.MallocPtr! [ipv9_sa7YP
                                                                                                  ipv7_sa7YM];
                                                            } in 
                                                              case
                                                                  byteArrayContents# [ipv9_sa7YP]
                                                              of
                                                              sat_sa7YQ
                                                              { __DEFAULT ->
                                                                    let {
                                                                      sat_sa7YS [Occ=Once]
                                                                        :: GHC.IO.Buffer.CharBuffer
                                                                      [LclId] =
                                                                          CCCS GHC.IO.Buffer.Buffer! [sat_sa7YQ
                                                                                                      sat_sa7YR
                                                                                                      buf_state_sa7XU
                                                                                                      2048#
                                                                                                      0#
                                                                                                      0#];
                                                                    } in 
                                                                      case
                                                                          newMutVar# [sat_sa7YS
                                                                                      GHC.Prim.void#]
                                                                      of
                                                                      { Unit# ipv11_sa7YV [Occ=Once] ->
                                                                            case
                                                                                GHC.IO.Device.isTerminal
                                                                                    $dIODevice_sa7XE
                                                                                    dev1_sa7XH
                                                                                    GHC.Prim.void#
                                                                            of
                                                                            { Unit# ipv13_sa7YY [Occ=Once!] ->
                                                                                  let {
                                                                                    sat_sa7Z1 [Occ=Once]
                                                                                      :: GHC.IO.Handle.Types.BufferMode
                                                                                    [LclId] =
                                                                                        [ipv13_sa7YY] \u []
                                                                                            case
                                                                                                ipv13_sa7YY
                                                                                            of
                                                                                            { GHC.Types.False ->
                                                                                                  lvl8_ra7Po;
                                                                                              GHC.Types.True ->
                                                                                                  GHC.IO.Handle.Types.LineBuffering [];
                                                                                            }; } in
                                                                                  let {
                                                                                    sat_sa7YZ [Occ=Once]
                                                                                      :: GHC.IORef.IORef
                                                                                           GHC.IO.Buffer.CharBuffer
                                                                                    [LclId] =
                                                                                        CCCS GHC.STRef.STRef! [ipv11_sa7YV];
                                                                                  } in 
                                                                                    $w$j_sa7Y6
                                                                                        GHC.Prim.void#
                                                                                        sat_sa7YZ
                                                                                        sat_sa7Z1;
                                                                            };
                                                                      };
                                                              };
                                                      };
                                                };
                                          };
                                  };
                          };
                    };
        } in 
          case mb_codec_sa7XL of {
            GHC.Base.Nothing ->
                cont_sa7XQ GHC.Base.Nothing GHC.Base.Nothing GHC.Prim.void#;
            GHC.Base.Just ds_sa7Z3 [Occ=Once!] ->
                case ds_sa7Z3 of {
                  GHC.IO.Encoding.Types.TextEncoding _ [Occ=Dead]
                                                     ds2_sa7Z6 [Occ=Once*]
                                                     ds3_sa7Z7 [Occ=Once*] ->
                      let-no-escape {
                        $j_sa7Z8 [Occ=Once*!T[2], Dmd=<L,1*C1(C1(U(U,U)))>]
                          :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> GHC.Base.Maybe (GHC.IO.Encoding.Types.TextDecoder dstate_aa436)
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                   GHC.IO.Handle.Types.Handle #)
                        [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
                            sat-only [ha_type_sa7XJ cont_sa7XQ ds3_sa7Z7] \r [void_0E
                                                                              ipv1_sa7Za]
                                case ha_type_sa7XJ of {
                                  __DEFAULT ->
                                      cont_sa7XQ GHC.Base.Nothing ipv1_sa7Za GHC.Prim.void#;
                                  GHC.IO.Handle.Types.WriteHandle ->
                                      case ds3_sa7Z7 GHC.Prim.void# of {
                                        Unit# ipv3_sa7Ze [Occ=Once] ->
                                            let {
                                              sat_sa7Zf [Occ=Once]
                                                :: GHC.Base.Maybe
                                                     (GHC.IO.Encoding.Types.TextEncoder
                                                        estate_aa437)
                                              [LclId] =
                                                  CCCS GHC.Base.Just! [ipv3_sa7Ze];
                                            } in  cont_sa7XQ sat_sa7Zf ipv1_sa7Za GHC.Prim.void#;
                                      };
                                  GHC.IO.Handle.Types.AppendHandle ->
                                      case ds3_sa7Z7 GHC.Prim.void# of {
                                        Unit# ipv3_sa7Zi [Occ=Once] ->
                                            let {
                                              sat_sa7Zj [Occ=Once]
                                                :: GHC.Base.Maybe
                                                     (GHC.IO.Encoding.Types.TextEncoder
                                                        estate_aa437)
                                              [LclId] =
                                                  CCCS GHC.Base.Just! [ipv3_sa7Zi];
                                            } in  cont_sa7XQ sat_sa7Zj ipv1_sa7Za GHC.Prim.void#;
                                      };
                                  GHC.IO.Handle.Types.ReadWriteHandle ->
                                      case ds3_sa7Z7 GHC.Prim.void# of {
                                        Unit# ipv3_sa7Zm [Occ=Once] ->
                                            let {
                                              sat_sa7Zn [Occ=Once]
                                                :: GHC.Base.Maybe
                                                     (GHC.IO.Encoding.Types.TextEncoder
                                                        estate_aa437)
                                              [LclId] =
                                                  CCCS GHC.Base.Just! [ipv3_sa7Zm];
                                            } in  cont_sa7XQ sat_sa7Zn ipv1_sa7Za GHC.Prim.void#;
                                      };
                                };
                      } in 
                        case ha_type_sa7XJ of {
                          __DEFAULT -> $j_sa7Z8 GHC.Prim.void# GHC.Base.Nothing;
                          GHC.IO.Handle.Types.ReadHandle ->
                              case ds2_sa7Z6 GHC.Prim.void# of {
                                Unit# ipv1_sa7Zr [Occ=Once] ->
                                    let {
                                      sat_sa7Zs [Occ=Once]
                                        :: GHC.Base.Maybe
                                             (GHC.IO.Encoding.Types.TextDecoder dstate_aa436)
                                      [LclId] =
                                          CCCS GHC.Base.Just! [ipv1_sa7Zr];
                                    } in  $j_sa7Z8 GHC.Prim.void# sat_sa7Zs;
                              };
                          GHC.IO.Handle.Types.ReadWriteHandle ->
                              case ds2_sa7Z6 GHC.Prim.void# of {
                                Unit# ipv1_sa7Zv [Occ=Once] ->
                                    let {
                                      sat_sa7Zw [Occ=Once]
                                        :: GHC.Base.Maybe
                                             (GHC.IO.Encoding.Types.TextDecoder dstate_aa436)
                                      [LclId] =
                                          CCCS GHC.Base.Just! [ipv1_sa7Zv];
                                    } in  $j_sa7Z8 GHC.Prim.void# sat_sa7Zw;
                              };
                        };
                };
          };

GHC.IO.Handle.Internals.mkHandle
  :: forall dev.
     (GHC.IO.Device.IODevice dev, GHC.IO.BufferedIO.BufferedIO dev,
      Data.Typeable.Internal.Typeable dev) =>
     dev
     -> GHC.IO.FilePath
     -> GHC.IO.Handle.Types.HandleType
     -> GHC.Types.Bool
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.NewlineMode
     -> GHC.Base.Maybe GHC.IO.Handle.Internals.HandleFinalizer
     -> GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
     -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId,
 Arity=12,
 Str=<L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U)><L,U><L,U><L,U><L,U><L,1*U><S,U><L,U(1*U,1*U)><L,1*U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_Bc
           eta_Bb
           eta_Ba
           eta_B9
           eta_B8
           eta_B7
           eta_B6
           eta_B5
           eta_B4
           eta_B3
           eta_B2
           void_0E]
        GHC.IO.Handle.Internals.mkDuplexHandle5
            eta_Bc
            eta_Bb
            eta_Ba
            eta_B9
            eta_B8
            eta_B7
            eta_B6
            eta_B5
            eta_B4
            eta_B3
            eta_B2
            GHC.Prim.void#;

GHC.IO.Handle.Internals.debugIO1
  :: GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><S,U>, Unf=OtherCon []] =
    [] \r [s_sa7Zx void_0E] Unit# [GHC.Tuple.()];

GHC.IO.Handle.Internals.debugIO
  :: GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.Internals.debugIO1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.$wwriteCharBuffer [InlPrag=NOUSERINLINE[0],
                                           Occ=LoopBreaker]
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> GHC.IO.Buffer.BufferState
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=8,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U><L,U><L,U><L,U><L,U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sa7Zz
           ww_sa7ZA
           ww1_sa7ZB
           ww2_sa7ZC
           ww3_sa7ZD
           ww4_sa7ZE
           ww5_sa7ZF
           void_0E]
        case w_sa7Zz of wild_sa7ZH {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       $dBufferedIO_sa7ZJ [Occ=Once]
                                       _ [Occ=Dead]
                                       ds_sa7ZL [Occ=Once]
                                       _ [Occ=Dead]
                                       dt_sa7ZN
                                       ds2_sa7ZO [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds3_sa7ZS [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt_sa7ZN GHC.Prim.void#] of {
                Unit# ipv1_sa800 [Occ=Once*] ->
                    let-no-escape {
                      $w$j_sa801 [InlPrag=NOUSERINLINE[0],
                                  Occ=Once*!T[8],
                                  Dmd=<L,1*C1(C1(C1(C1(C1(C1(C1(C1(U(U,U)))))))))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> GHC.IO.Buffer.CharBuffer
                           -> GHC.Prim.Addr#
                           -> GHC.ForeignPtr.ForeignPtrContents
                           -> GHC.IO.Buffer.BufferState
                           -> GHC.Prim.Int#
                           -> GHC.Prim.Int#
                           -> GHC.Prim.Int#
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      [LclId[JoinId(8)],
                       Arity=8,
                       Str=<S,U><L,U(U,U,U,U,U,U)><L,U><L,U><L,U><S,U><L,U><S,U>,
                       Unf=OtherCon []] =
                          sat-only [ww4_sa7ZE
                                    wild_sa7ZH
                                    $dBufferedIO_sa7ZJ
                                    ds_sa7ZL
                                    dt_sa7ZN
                                    ds2_sa7ZO] \r [void_0E
                                                   ww6_sa803
                                                   ww7_sa804
                                                   ww8_sa805
                                                   ww9_sa806
                                                   ww10_sa807
                                                   ww11_sa808
                                                   ww12_sa809]
                              let {
                                wild1_sa80a :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                [LclId, Unf=OtherCon []] =
                                    CCCS GHC.IO.Buffer.Buffer! [ww7_sa804
                                                                ww8_sa805
                                                                ww9_sa806
                                                                ww10_sa807
                                                                ww11_sa808
                                                                ww12_sa809];
                              } in 
                                let-no-escape {
                                  $j_sa80b [Dmd=<L,1*U(U,U)>]
                                    :: (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                  [LclId[JoinId(0)], Unf=OtherCon []] =
                                      [wild_sa7ZH
                                       $dBufferedIO_sa7ZJ
                                       ds_sa7ZL
                                       dt_sa7ZN
                                       ww6_sa803
                                       wild1_sa80a] \r []
                                          case
                                              GHC.IO.BufferedIO.flushWriteBuffer
                                                  $dBufferedIO_sa7ZJ
                                                  ds_sa7ZL
                                                  wild1_sa80a
                                                  GHC.Prim.void#
                                          of
                                          { Unit# ipv3_sa80e [Occ=Once] ->
                                                case
                                                    writeMutVar# [dt_sa7ZN
                                                                  ipv3_sa80e
                                                                  GHC.Prim.void#]
                                                of
                                                s2#_sa80f
                                                { (##) ->
                                                      case ww6_sa803 of {
                                                        GHC.IO.Buffer.Buffer dt4_sa80h [Occ=Once]
                                                                             dt5_sa80i [Occ=Once]
                                                                             ds11_sa80j [Occ=Once]
                                                                             dt6_sa80k [Occ=Once]
                                                                             dt7_sa80l
                                                                             dt8_sa80m ->
                                                            case ==# [dt7_sa80l dt8_sa80m] of {
                                                              __DEFAULT ->
                                                                  GHC.IO.Handle.Internals.$wwriteCharBuffer
                                                                      wild_sa7ZH
                                                                      dt4_sa80h
                                                                      dt5_sa80i
                                                                      ds11_sa80j
                                                                      dt6_sa80k
                                                                      dt7_sa80l
                                                                      dt8_sa80m
                                                                      GHC.Prim.void#;
                                                              1# -> Unit# [GHC.Tuple.()];
                                                            };
                                                      };
                                                };
                                          };
                                } in 
                                  case ==# [ww10_sa807 ww12_sa809] of {
                                    __DEFAULT ->
                                        case ww6_sa803 of {
                                          GHC.IO.Buffer.Buffer dt4_sa80q [Occ=Once*]
                                                               dt5_sa80r [Occ=Once*]
                                                               ds10_sa80s [Occ=Once*]
                                                               dt6_sa80t [Occ=Once*]
                                                               dt7_sa80u
                                                               dt8_sa80v ->
                                              let-no-escape {
                                                $j1_sa80w [Occ=Once*T[0], Dmd=<L,1*U(U,U)>]
                                                  :: (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                                [LclId[JoinId(0)], Unf=OtherCon []] =
                                                    [wild_sa7ZH
                                                     dt_sa7ZN
                                                     ds2_sa7ZO
                                                     ww11_sa808
                                                     ww12_sa809
                                                     wild1_sa80a
                                                     $j_sa80b
                                                     dt4_sa80q
                                                     dt5_sa80r
                                                     ds10_sa80s
                                                     dt6_sa80t
                                                     dt7_sa80u
                                                     dt8_sa80v] \r []
                                                        case ds2_sa7ZO of {
                                                          GHC.IO.Handle.Types.NoBuffering ->
                                                              $j_sa80b;
                                                          GHC.IO.Handle.Types.LineBuffering ->
                                                              case
                                                                  writeMutVar# [dt_sa7ZN
                                                                                wild1_sa80a
                                                                                GHC.Prim.void#]
                                                              of
                                                              s2#_sa80y
                                                              { (##) ->
                                                                    case
                                                                        ==# [dt7_sa80u dt8_sa80v]
                                                                    of
                                                                    { __DEFAULT ->
                                                                          GHC.IO.Handle.Internals.$wwriteCharBuffer
                                                                              wild_sa7ZH
                                                                              dt4_sa80q
                                                                              dt5_sa80r
                                                                              ds10_sa80s
                                                                              dt6_sa80t
                                                                              dt7_sa80u
                                                                              dt8_sa80v
                                                                              GHC.Prim.void#;
                                                                      1# -> Unit# [GHC.Tuple.()];
                                                                    };
                                                              };
                                                          GHC.IO.Handle.Types.BlockBuffering ds11_sa80A [Occ=Once!] ->
                                                              case ds11_sa80A of {
                                                                GHC.Base.Nothing ->
                                                                    case
                                                                        writeMutVar# [dt_sa7ZN
                                                                                      wild1_sa80a
                                                                                      GHC.Prim.void#]
                                                                    of
                                                                    s2#_sa80C
                                                                    { (##) ->
                                                                          case
                                                                              ==# [dt7_sa80u
                                                                                   dt8_sa80v]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.IO.Handle.Internals.$wwriteCharBuffer
                                                                                    wild_sa7ZH
                                                                                    dt4_sa80q
                                                                                    dt5_sa80r
                                                                                    ds10_sa80s
                                                                                    dt6_sa80t
                                                                                    dt7_sa80u
                                                                                    dt8_sa80v
                                                                                    GHC.Prim.void#;
                                                                            1# ->
                                                                                Unit# [GHC.Tuple.()];
                                                                          };
                                                                    };
                                                                GHC.Base.Just s_sa80E [Occ=Once!] ->
                                                                    case s_sa80E of {
                                                                      GHC.Types.I# y_sa80G [Occ=Once] ->
                                                                          case
                                                                              -# [ww12_sa809
                                                                                  ww11_sa808]
                                                                          of
                                                                          sat_sa80H
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    >=# [sat_sa80H
                                                                                         y_sa80G]
                                                                                of
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          writeMutVar# [dt_sa7ZN
                                                                                                        wild1_sa80a
                                                                                                        GHC.Prim.void#]
                                                                                      of
                                                                                      s2#_sa80J
                                                                                      { (##) ->
                                                                                            case
                                                                                                ==# [dt7_sa80u
                                                                                                     dt8_sa80v]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.IO.Handle.Internals.$wwriteCharBuffer
                                                                                                      wild_sa7ZH
                                                                                                      dt4_sa80q
                                                                                                      dt5_sa80r
                                                                                                      ds10_sa80s
                                                                                                      dt6_sa80t
                                                                                                      dt7_sa80u
                                                                                                      dt8_sa80v
                                                                                                      GHC.Prim.void#;
                                                                                              1# ->
                                                                                                  Unit# [GHC.Tuple.()];
                                                                                            };
                                                                                      };
                                                                                  1# -> $j_sa80b;
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                              } in 
                                                case ==# [dt7_sa80u dt8_sa80v] of {
                                                  __DEFAULT ->
                                                      case ==# [dt7_sa80u ww4_sa7ZE] of {
                                                        __DEFAULT -> $j1_sa80w;
                                                        1# -> $j_sa80b;
                                                      };
                                                  1# -> $j1_sa80w;
                                                };
                                        };
                                    1# -> $j_sa80b;
                                  };
                    } in 
                      case ds3_sa7ZS of {
                        GHC.Base.Nothing ->
                            let {
                              sat_sa80O [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                              [LclId] =
                                  CCCS GHC.IO.Buffer.Buffer! [ww_sa7ZA
                                                              ww1_sa7ZB
                                                              ww2_sa7ZC
                                                              ww3_sa7ZD
                                                              ww4_sa7ZE
                                                              ww5_sa7ZF];
                            } in 
                              case
                                  GHC.IO.Encoding.Latin1.latin3 sat_sa80O ipv1_sa800 GHC.Prim.void#
                              of
                              { Unit# ipv3_sa80R [Occ=Once!] ->
                                    case ipv3_sa80R of {
                                      (,,) _ [Occ=Dead]
                                           input'_sa80U [Occ=Once]
                                           output'_sa80V [Occ=Once!] ->
                                          case output'_sa80V of {
                                            GHC.IO.Buffer.Buffer ww7_sa80X [Occ=Once]
                                                                 ww8_sa80Y [Occ=Once]
                                                                 ww9_sa80Z [Occ=Once]
                                                                 ww10_sa810 [Occ=Once]
                                                                 ww11_sa811 [Occ=Once]
                                                                 ww12_sa812 [Occ=Once] ->
                                                $w$j_sa801
                                                    GHC.Prim.void#
                                                    input'_sa80U
                                                    ww7_sa80X
                                                    ww8_sa80Y
                                                    ww9_sa80Z
                                                    ww10_sa810
                                                    ww11_sa811
                                                    ww12_sa812;
                                          };
                                    };
                              };
                        GHC.Base.Just encoder_sa813 [Occ=Once!] ->
                            case encoder_sa813 of {
                              GHC.IO.Encoding.Types.BufferCodec ww7_sa815 [Occ=Once]
                                                                ww8_sa816 [Occ=Once]
                                                                _ [Occ=Dead]
                                                                _ [Occ=Dead]
                                                                _ [Occ=Dead] ->
                                  let {
                                    sat_sa81a [Occ=Once]
                                      :: GHC.IO.Buffer.Buffer GHC.IO.Buffer.CharBufElem
                                    [LclId] =
                                        CCCS GHC.IO.Buffer.Buffer! [ww_sa7ZA
                                                                    ww1_sa7ZB
                                                                    ww2_sa7ZC
                                                                    ww3_sa7ZD
                                                                    ww4_sa7ZE
                                                                    ww5_sa7ZF];
                                  } in 
                                    case
                                        GHC.IO.Handle.Internals.$wstreamEncode
                                            ww7_sa815 ww8_sa816 sat_sa81a ipv1_sa800 GHC.Prim.void#
                                    of
                                    { Unit# ipv3_sa81d [Occ=Once!] ->
                                          case ipv3_sa81d of {
                                            (,) ww13_sa81f [Occ=Once] ww14_sa81g [Occ=Once!] ->
                                                case ww14_sa81g of {
                                                  GHC.IO.Buffer.Buffer ww16_sa81i [Occ=Once]
                                                                       ww17_sa81j [Occ=Once]
                                                                       ww18_sa81k [Occ=Once]
                                                                       ww19_sa81l [Occ=Once]
                                                                       ww20_sa81m [Occ=Once]
                                                                       ww21_sa81n [Occ=Once] ->
                                                      $w$j_sa801
                                                          GHC.Prim.void#
                                                          ww13_sa81f
                                                          ww16_sa81i
                                                          ww17_sa81j
                                                          ww18_sa81k
                                                          ww19_sa81l
                                                          ww20_sa81m
                                                          ww21_sa81n;
                                                };
                                          };
                                    };
                            };
                      };
              };
        };

GHC.IO.Handle.Internals.writeCharBuffer1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,1*U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sa81o w1_sa81p void_0E]
        case w1_sa81p of {
          GHC.IO.Buffer.Buffer ww1_sa81s [Occ=Once]
                               ww2_sa81t [Occ=Once]
                               ww3_sa81u [Occ=Once]
                               ww4_sa81v [Occ=Once]
                               ww5_sa81w [Occ=Once]
                               ww6_sa81x [Occ=Once] ->
              GHC.IO.Handle.Internals.$wwriteCharBuffer
                  w_sa81o
                  ww1_sa81s
                  ww2_sa81t
                  ww3_sa81u
                  ww4_sa81v
                  ww5_sa81w
                  ww6_sa81x
                  GHC.Prim.void#;
        };

GHC.IO.Handle.Internals.writeCharBuffer
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Buffer.CharBuffer -> GHC.Types.IO ()
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,1*U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.Internals.writeCharBuffer1
            eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.flushCharBuffer3
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_sa81y void_0E]
        case ds_sa81y of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       dt_sa81G [Occ=Once*]
                                       _ [Occ=Dead]
                                       dt1_sa81I [Occ=Once]
                                       dt2_sa81J
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds5_sa81M [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt2_sa81J GHC.Prim.void#] of {
                Unit# ipv1_sa81T [Occ=Once!] ->
                    case ipv1_sa81T of {
                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           ds11_sa81X [Occ=Once!]
                                           _ [Occ=Dead]
                                           dt7_sa81Z [Occ=Once]
                                           dt8_sa820 [Occ=Once] ->
                          case ds11_sa81X of {
                            GHC.IO.Buffer.ReadBuffer ->
                                case ==# [dt7_sa81Z dt8_sa820] of {
                                  __DEFAULT ->
                                      case readMutVar# [dt1_sa81I GHC.Prim.void#] of {
                                        Unit# ipv3_sa825 [Occ=Once!] ->
                                            case ipv3_sa825 of {
                                              (,) codec_state_sa827 [Occ=Once]
                                                  bbuf0_sa828 [Occ=Once*] ->
                                                  case readMutVar# [dt2_sa81J GHC.Prim.void#] of {
                                                    Unit# ipv5_sa82b ->
                                                        let {
                                                          sat_sa82j [Occ=Once]
                                                            :: GHC.IO.Buffer.Buffer
                                                                 GHC.IO.Buffer.CharBufElem
                                                          [LclId] =
                                                              [ipv5_sa82b] \u []
                                                                  case ipv5_sa82b of {
                                                                    GHC.IO.Buffer.Buffer dt9_sa82d [Occ=Once]
                                                                                         dt10_sa82e [Occ=Once]
                                                                                         ds14_sa82f [Occ=Once]
                                                                                         dt11_sa82g [Occ=Once]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead] ->
                                                                        GHC.IO.Buffer.Buffer [dt9_sa82d
                                                                                              dt10_sa82e
                                                                                              ds14_sa82f
                                                                                              dt11_sa82g
                                                                                              0#
                                                                                              0#];
                                                                  };
                                                        } in 
                                                          case
                                                              writeMutVar# [dt2_sa81J
                                                                            sat_sa82j
                                                                            GHC.Prim.void#]
                                                          of
                                                          s2#_sa82k
                                                          { (##) ->
                                                                case ipv5_sa82b of {
                                                                  GHC.IO.Buffer.Buffer dt9_sa82m [Occ=Once]
                                                                                       dt10_sa82n [Occ=Once]
                                                                                       ds14_sa82o [Occ=Once]
                                                                                       _ [Occ=Dead]
                                                                                       dt12_sa82q [Occ=Once!]
                                                                                       _ [Occ=Dead] ->
                                                                      case
                                                                          dt12_sa82q
                                                                      of
                                                                      wild5_sa82s
                                                                      { __DEFAULT ->
                                                                            case ds5_sa81M of {
                                                                              GHC.Base.Nothing ->
                                                                                  let {
                                                                                    sat_sa82C [Occ=Once]
                                                                                      :: GHC.IO.Buffer.Buffer
                                                                                           GHC.Word.Word8
                                                                                    [LclId] =
                                                                                        [bbuf0_sa828
                                                                                         wild5_sa82s] \u []
                                                                                            case
                                                                                                bbuf0_sa828
                                                                                            of
                                                                                            { GHC.IO.Buffer.Buffer dt14_sa82v [Occ=Once]
                                                                                                                   dt15_sa82w [Occ=Once]
                                                                                                                   ds15_sa82x [Occ=Once]
                                                                                                                   dt16_sa82y [Occ=Once]
                                                                                                                   dt17_sa82z [Occ=Once]
                                                                                                                   dt18_sa82A [Occ=Once] ->
                                                                                                  case
                                                                                                      +# [dt17_sa82z
                                                                                                          wild5_sa82s]
                                                                                                  of
                                                                                                  sat_sa82B
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.IO.Buffer.Buffer [dt14_sa82v
                                                                                                                              dt15_sa82w
                                                                                                                              ds15_sa82x
                                                                                                                              dt16_sa82y
                                                                                                                              sat_sa82B
                                                                                                                              dt18_sa82A];
                                                                                                  };
                                                                                            };
                                                                                  } in 
                                                                                    case
                                                                                        writeMutVar# [dt_sa81G
                                                                                                      sat_sa82C
                                                                                                      GHC.Prim.void#]
                                                                                    of
                                                                                    s2#1_sa82D
                                                                                    { (##) ->
                                                                                          Unit# [GHC.Tuple.()];
                                                                                    };
                                                                              GHC.Base.Just decoder_sa82E [Occ=Once!] ->
                                                                                  case
                                                                                      decoder_sa82E
                                                                                  of
                                                                                  { GHC.IO.Encoding.Types.BufferCodec ds15_sa82G [Occ=Once]
                                                                                                                      ds16_sa82H [Occ=Once]
                                                                                                                      _ [Occ=Dead]
                                                                                                                      _ [Occ=Dead]
                                                                                                                      ds19_sa82K [Occ=Once!] ->
                                                                                        case
                                                                                            ds19_sa82K
                                                                                                codec_state_sa827
                                                                                                GHC.Prim.void#
                                                                                        of
                                                                                        { Unit# _ [Occ=Dead] ->
                                                                                              let {
                                                                                                sat_sa82O [Occ=Once]
                                                                                                  :: GHC.IO.Buffer.Buffer
                                                                                                       GHC.IO.Buffer.CharBufElem
                                                                                                [LclId] =
                                                                                                    CCCS GHC.IO.Buffer.Buffer! [dt9_sa82m
                                                                                                                                dt10_sa82n
                                                                                                                                ds14_sa82o
                                                                                                                                wild5_sa82s
                                                                                                                                0#
                                                                                                                                0#];
                                                                                              } in 
                                                                                                case
                                                                                                    GHC.IO.Handle.Internals.$wstreamEncode
                                                                                                        ds15_sa82G
                                                                                                        ds16_sa82H
                                                                                                        bbuf0_sa828
                                                                                                        sat_sa82O
                                                                                                        GHC.Prim.void#
                                                                                                of
                                                                                                { Unit# ipv9_sa82R [Occ=Once!] ->
                                                                                                      case
                                                                                                          ipv9_sa82R
                                                                                                      of
                                                                                                      { (,) bbuf1_sa82T [Occ=Once]
                                                                                                            _ [Occ=Dead] ->
                                                                                                            case
                                                                                                                writeMutVar# [dt_sa81G
                                                                                                                              bbuf1_sa82T
                                                                                                                              GHC.Prim.void#]
                                                                                                            of
                                                                                                            s2#1_sa82V
                                                                                                            { (##) ->
                                                                                                                  Unit# [GHC.Tuple.()];
                                                                                                            };
                                                                                                      };
                                                                                                };
                                                                                        };
                                                                                  };
                                                                            };
                                                                        0# ->
                                                                            case
                                                                                writeMutVar# [dt_sa81G
                                                                                              bbuf0_sa828
                                                                                              GHC.Prim.void#]
                                                                            of
                                                                            s2#1_sa82W
                                                                            { (##) ->
                                                                                  Unit# [GHC.Tuple.()];
                                                                            };
                                                                      };
                                                                };
                                                          };
                                                  };
                                            };
                                      };
                                  1# -> Unit# [GHC.Tuple.()];
                                };
                            GHC.IO.Buffer.WriteBuffer -> Unit# [GHC.Tuple.()];
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.flushCharReadBuffer
  :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.Internals.flushCharBuffer3 eta_B2 GHC.Prim.void#;

lvl9_ra7Pp :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "error"#;

lvl10_ra7Pq :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl9_ra7Pp;

lvl11_ra7Pr :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Internals.$trModule4;

lvl12_ra7Ps :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Internals.$trModule2;

lvl13_ra7Pt :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./GHC/IO/Handle/Internals.hs"#;

lvl14_ra7Pu :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl13_ra7Pt;

lvl15_ra7Pv :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [487#];

lvl16_ra7Pw :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [12#];

lvl17_ra7Px :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [68#];

lvl18_ra7Py :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl11_ra7Pr
                                           lvl12_ra7Ps
                                           lvl14_ra7Pu
                                           lvl15_ra7Pv
                                           lvl16_ra7Pw
                                           lvl15_ra7Pv
                                           lvl17_ra7Px];

lvl19_ra7Pz :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl10_ra7Pq
                                                  lvl18_ra7Py
                                                  GHC.Stack.Types.EmptyCallStack];

lvl20_ra7PA :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "internal IO library error: Char buffer non-empty"#;

GHC.IO.Handle.Internals.flushCharBuffer2 :: GHC.Types.IO ()
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl20_ra7PA of sat_sa82X {
          __DEFAULT -> GHC.Err.error lvl19_ra7Pz sat_sa82X;
        };

GHC.IO.Handle.Internals.flushCharBuffer1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h__sa82Y void_0E]
        case h__sa82Y of wild_sa830 {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       dt2_sa839 [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt2_sa839 GHC.Prim.void#] of {
                Unit# ipv1_sa83j [Occ=Once!] ->
                    case ipv1_sa83j of {
                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           ds10_sa83n [Occ=Once!]
                                           _ [Occ=Dead]
                                           dt7_sa83p [Occ=Once]
                                           dt8_sa83q [Occ=Once] ->
                          case ds10_sa83n of {
                            GHC.IO.Buffer.ReadBuffer ->
                                GHC.IO.Handle.Internals.flushCharBuffer3 wild_sa830 GHC.Prim.void#;
                            GHC.IO.Buffer.WriteBuffer ->
                                case ==# [dt7_sa83p dt8_sa83q] of {
                                  __DEFAULT -> GHC.IO.Handle.Internals.flushCharBuffer2;
                                  1# -> Unit# [GHC.Tuple.()];
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.flushCharBuffer
  :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.Internals.flushCharBuffer1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.flushBuffer2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h__sa83u void_0E]
        case h__sa83u of {
          GHC.IO.Handle.Types.Handle__ $dIODevice_sa83x
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds_sa83A
                                       _ [Occ=Dead]
                                       dt_sa83C
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt_sa83C GHC.Prim.void#] of {
                Unit# ipv1_sa83P [Occ=Once!] ->
                    case ipv1_sa83P of {
                      GHC.IO.Buffer.Buffer dt4_sa83R [Occ=Once]
                                           dt5_sa83S [Occ=Once]
                                           ds10_sa83T [Occ=Once]
                                           dt6_sa83U [Occ=Once]
                                           dt7_sa83V
                                           dt8_sa83W ->
                          case ==# [dt7_sa83V dt8_sa83W] of {
                            __DEFAULT ->
                                case
                                    GHC.IO.Device.isSeekable
                                        $dIODevice_sa83x ds_sa83A GHC.Prim.void#
                                of
                                { Unit# ipv3_sa840 [Occ=Once!] ->
                                      case ipv3_sa840 of {
                                        GHC.Types.False ->
                                            raiseIO# [GHC.IO.Handle.Internals.flushBuffer3
                                                      GHC.Prim.void#];
                                        GHC.Types.True ->
                                            let {
                                              sat_sa844 [Occ=Once] :: GHC.Integer.Type.Integer
                                              [LclId] =
                                                  [dt7_sa83V dt8_sa83W] \u []
                                                      case -# [dt8_sa83W dt7_sa83V] of sat_sa842 {
                                                        __DEFAULT ->
                                                            case
                                                                negateInt# [sat_sa842]
                                                            of
                                                            sat_sa843
                                                            { __DEFAULT ->
                                                                  GHC.Integer.Type.smallInteger
                                                                      sat_sa843;
                                                            };
                                                      };
                                            } in 
                                              case
                                                  GHC.IO.Device.seek
                                                      $dIODevice_sa83x
                                                      ds_sa83A
                                                      GHC.IO.Device.RelativeSeek
                                                      sat_sa844
                                                      GHC.Prim.void#
                                              of
                                              { Unit# _ [Occ=Dead] ->
                                                    let {
                                                      sat_sa848 [Occ=Once]
                                                        :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                                      [LclId] =
                                                          CCCS GHC.IO.Buffer.Buffer! [dt4_sa83R
                                                                                      dt5_sa83S
                                                                                      ds10_sa83T
                                                                                      dt6_sa83U
                                                                                      0#
                                                                                      0#];
                                                    } in 
                                                      case
                                                          writeMutVar# [dt_sa83C
                                                                        sat_sa848
                                                                        GHC.Prim.void#]
                                                      of
                                                      s2#_sa849
                                                      { (##) -> Unit# [GHC.Tuple.()];
                                                      };
                                              };
                                      };
                                };
                            1# -> Unit# [GHC.Tuple.()];
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.flushByteReadBuffer
  :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.Internals.flushBuffer2 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.flushBuffer1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h__sa84a void_0E]
        case h__sa84a of wild_sa84c {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       $dBufferedIO_sa84e [Occ=Once]
                                       _ [Occ=Dead]
                                       ds_sa84g [Occ=Once]
                                       _ [Occ=Dead]
                                       dt_sa84i
                                       _ [Occ=Dead]
                                       dt1_sa84k [Occ=Once]
                                       dt2_sa84l
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds4_sa84o [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt2_sa84l GHC.Prim.void#] of {
                Unit# ipv1_sa84v [Occ=Once!] ->
                    case ipv1_sa84v of {
                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           ds10_sa84z [Occ=Once!]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
                          case ds10_sa84z of {
                            GHC.IO.Buffer.ReadBuffer ->
                                case readMutVar# [dt2_sa84l GHC.Prim.void#] of {
                                  Unit# ipv3_sa84G [Occ=Once!] ->
                                      case ipv3_sa84G of {
                                        GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             ds12_sa84K [Occ=Once!]
                                                             _ [Occ=Dead]
                                                             dt12_sa84M [Occ=Once]
                                                             dt13_sa84N [Occ=Once] ->
                                            case ds12_sa84K of {
                                              GHC.IO.Buffer.ReadBuffer ->
                                                  case ==# [dt12_sa84M dt13_sa84N] of {
                                                    __DEFAULT ->
                                                        case
                                                            readMutVar# [dt1_sa84k GHC.Prim.void#]
                                                        of
                                                        { Unit# ipv5_sa84S [Occ=Once!] ->
                                                              case ipv5_sa84S of {
                                                                (,) codec_state_sa84U [Occ=Once]
                                                                    bbuf0_sa84V [Occ=Once*] ->
                                                                    case
                                                                        readMutVar# [dt2_sa84l
                                                                                     GHC.Prim.void#]
                                                                    of
                                                                    { Unit# ipv7_sa84Y ->
                                                                          let {
                                                                            sat_sa856 [Occ=Once]
                                                                              :: GHC.IO.Buffer.Buffer
                                                                                   GHC.IO.Buffer.CharBufElem
                                                                            [LclId] =
                                                                                [ipv7_sa84Y] \u []
                                                                                    case
                                                                                        ipv7_sa84Y
                                                                                    of
                                                                                    { GHC.IO.Buffer.Buffer dt14_sa850 [Occ=Once]
                                                                                                           dt15_sa851 [Occ=Once]
                                                                                                           ds15_sa852 [Occ=Once]
                                                                                                           dt16_sa853 [Occ=Once]
                                                                                                           _ [Occ=Dead]
                                                                                                           _ [Occ=Dead] ->
                                                                                          GHC.IO.Buffer.Buffer [dt14_sa850
                                                                                                                dt15_sa851
                                                                                                                ds15_sa852
                                                                                                                dt16_sa853
                                                                                                                0#
                                                                                                                0#];
                                                                                    };
                                                                          } in 
                                                                            case
                                                                                writeMutVar# [dt2_sa84l
                                                                                              sat_sa856
                                                                                              GHC.Prim.void#]
                                                                            of
                                                                            s2#_sa857
                                                                            { (##) ->
                                                                                  case
                                                                                      ipv7_sa84Y
                                                                                  of
                                                                                  { GHC.IO.Buffer.Buffer dt14_sa859 [Occ=Once]
                                                                                                         dt15_sa85a [Occ=Once]
                                                                                                         ds15_sa85b [Occ=Once]
                                                                                                         _ [Occ=Dead]
                                                                                                         dt17_sa85d [Occ=Once!]
                                                                                                         _ [Occ=Dead] ->
                                                                                        case
                                                                                            dt17_sa85d
                                                                                        of
                                                                                        wild7_sa85f
                                                                                        { __DEFAULT ->
                                                                                              case
                                                                                                  ds4_sa84o
                                                                                              of
                                                                                              { GHC.Base.Nothing ->
                                                                                                    let {
                                                                                                      sat_sa85p [Occ=Once]
                                                                                                        :: GHC.IO.Buffer.Buffer
                                                                                                             GHC.Word.Word8
                                                                                                      [LclId] =
                                                                                                          [bbuf0_sa84V
                                                                                                           wild7_sa85f] \u []
                                                                                                              case
                                                                                                                  bbuf0_sa84V
                                                                                                              of
                                                                                                              { GHC.IO.Buffer.Buffer dt19_sa85i [Occ=Once]
                                                                                                                                     dt20_sa85j [Occ=Once]
                                                                                                                                     ds16_sa85k [Occ=Once]
                                                                                                                                     dt21_sa85l [Occ=Once]
                                                                                                                                     dt22_sa85m [Occ=Once]
                                                                                                                                     dt23_sa85n [Occ=Once] ->
                                                                                                                    case
                                                                                                                        +# [dt22_sa85m
                                                                                                                            wild7_sa85f]
                                                                                                                    of
                                                                                                                    sat_sa85o
                                                                                                                    { __DEFAULT ->
                                                                                                                          GHC.IO.Buffer.Buffer [dt19_sa85i
                                                                                                                                                dt20_sa85j
                                                                                                                                                ds16_sa85k
                                                                                                                                                dt21_sa85l
                                                                                                                                                sat_sa85o
                                                                                                                                                dt23_sa85n];
                                                                                                                    };
                                                                                                              };
                                                                                                    } in 
                                                                                                      case
                                                                                                          writeMutVar# [dt_sa84i
                                                                                                                        sat_sa85p
                                                                                                                        GHC.Prim.void#]
                                                                                                      of
                                                                                                      s2#1_sa85q
                                                                                                      { (##) ->
                                                                                                            GHC.IO.Handle.Internals.flushBuffer2
                                                                                                                wild_sa84c
                                                                                                                GHC.Prim.void#;
                                                                                                      };
                                                                                                GHC.Base.Just decoder_sa85r [Occ=Once!] ->
                                                                                                    case
                                                                                                        decoder_sa85r
                                                                                                    of
                                                                                                    { GHC.IO.Encoding.Types.BufferCodec ds16_sa85t [Occ=Once]
                                                                                                                                        ds17_sa85u [Occ=Once]
                                                                                                                                        _ [Occ=Dead]
                                                                                                                                        _ [Occ=Dead]
                                                                                                                                        ds20_sa85x [Occ=Once!] ->
                                                                                                          case
                                                                                                              ds20_sa85x
                                                                                                                  codec_state_sa84U
                                                                                                                  GHC.Prim.void#
                                                                                                          of
                                                                                                          { Unit# _ [Occ=Dead] ->
                                                                                                                let {
                                                                                                                  sat_sa85B [Occ=Once]
                                                                                                                    :: GHC.IO.Buffer.Buffer
                                                                                                                         GHC.IO.Buffer.CharBufElem
                                                                                                                  [LclId] =
                                                                                                                      CCCS GHC.IO.Buffer.Buffer! [dt14_sa859
                                                                                                                                                  dt15_sa85a
                                                                                                                                                  ds15_sa85b
                                                                                                                                                  wild7_sa85f
                                                                                                                                                  0#
                                                                                                                                                  0#];
                                                                                                                } in 
                                                                                                                  case
                                                                                                                      GHC.IO.Handle.Internals.$wstreamEncode
                                                                                                                          ds16_sa85t
                                                                                                                          ds17_sa85u
                                                                                                                          bbuf0_sa84V
                                                                                                                          sat_sa85B
                                                                                                                          GHC.Prim.void#
                                                                                                                  of
                                                                                                                  { Unit# ipv11_sa85E [Occ=Once!] ->
                                                                                                                        case
                                                                                                                            ipv11_sa85E
                                                                                                                        of
                                                                                                                        { (,) bbuf1_sa85G [Occ=Once]
                                                                                                                              _ [Occ=Dead] ->
                                                                                                                              case
                                                                                                                                  writeMutVar# [dt_sa84i
                                                                                                                                                bbuf1_sa85G
                                                                                                                                                GHC.Prim.void#]
                                                                                                                              of
                                                                                                                              s2#1_sa85I
                                                                                                                              { (##) ->
                                                                                                                                    GHC.IO.Handle.Internals.flushBuffer2
                                                                                                                                        wild_sa84c
                                                                                                                                        GHC.Prim.void#;
                                                                                                                              };
                                                                                                                        };
                                                                                                                  };
                                                                                                          };
                                                                                                    };
                                                                                              };
                                                                                          0# ->
                                                                                              case
                                                                                                  writeMutVar# [dt_sa84i
                                                                                                                bbuf0_sa84V
                                                                                                                GHC.Prim.void#]
                                                                                              of
                                                                                              s2#1_sa85J
                                                                                              { (##) ->
                                                                                                    GHC.IO.Handle.Internals.flushBuffer2
                                                                                                        wild_sa84c
                                                                                                        GHC.Prim.void#;
                                                                                              };
                                                                                        };
                                                                                  };
                                                                            };
                                                                    };
                                                              };
                                                        };
                                                    1# ->
                                                        GHC.IO.Handle.Internals.flushBuffer2
                                                            wild_sa84c GHC.Prim.void#;
                                                  };
                                              GHC.IO.Buffer.WriteBuffer ->
                                                  GHC.IO.Handle.Internals.flushBuffer2
                                                      wild_sa84c GHC.Prim.void#;
                                            };
                                      };
                                };
                            GHC.IO.Buffer.WriteBuffer ->
                                case readMutVar# [dt_sa84i GHC.Prim.void#] of {
                                  Unit# ipv3_sa85M [Occ=Once!] ->
                                      case ipv3_sa85M of wild3_sa85N {
                                        GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             dt12_sa85S [Occ=Once]
                                                             dt13_sa85T [Occ=Once] ->
                                            case ==# [dt12_sa85S dt13_sa85T] of {
                                              __DEFAULT ->
                                                  case
                                                      GHC.IO.BufferedIO.flushWriteBuffer
                                                          $dBufferedIO_sa84e
                                                          ds_sa84g
                                                          wild3_sa85N
                                                          GHC.Prim.void#
                                                  of
                                                  { Unit# ipv5_sa85X [Occ=Once] ->
                                                        case
                                                            writeMutVar# [dt_sa84i
                                                                          ipv5_sa85X
                                                                          GHC.Prim.void#]
                                                        of
                                                        s2#_sa85Y
                                                        { (##) -> Unit# [GHC.Tuple.()];
                                                        };
                                                  };
                                              1# -> Unit# [GHC.Tuple.()];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.flushBuffer
  :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.Internals.flushBuffer1 eta_B2 GHC.Prim.void#;

lvl21_ra7PB :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC/IO/Handle/Internals.hs:881:7-30|Just decoder"#;

lvl22_ra7PC
  :: forall dec_state. (GHC.IO.Encoding.Types.TextDecoder dec_state)
[GblId, Str=x] =
    [] \u [] Control.Exception.Base.patError lvl21_ra7PB;

GHC.IO.Handle.Internals.hLookAhead_2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Buffer.CharBuffer #)
[GblId,
 Arity=3,
 Str=<S,1*U><L,U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [h__sa85Z cbuf_sa860 void_0E]
        case h__sa85Z of wild_sa862 {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       $dBufferedIO_sa864 [Occ=Once]
                                       _ [Occ=Dead]
                                       ds_sa866 [Occ=Once]
                                       _ [Occ=Dead]
                                       dt_sa868
                                       _ [Occ=Dead]
                                       dt1_sa86a [Occ=Once*]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds4_sa86e [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt_sa868 GHC.Prim.void#] of {
                Unit# ipv1_sa86l [Occ=Once!] ->
                    case ipv1_sa86l of wild1_sa86m {
                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           dt7_sa86r [Occ=Once]
                                           dt8_sa86s [Occ=Once] ->
                          let-no-escape {
                            $j_sa86t [Occ=Once*!T[2], Dmd=<L,1*C1(C1(U(U,U)))>]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> GHC.IO.Buffer.Buffer GHC.Word.Word8
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                       GHC.IO.Buffer.CharBuffer #)
                            [LclId[JoinId(2)],
                             Arity=2,
                             Str=<S,U><L,U(U,U,U,U,U,U)>,
                             Unf=OtherCon []] =
                                sat-only [cbuf_sa860
                                          wild_sa862
                                          dt_sa868
                                          dt1_sa86a
                                          ds4_sa86e] \r [void_0E ipv3_sa86v]
                                    case ds4_sa86e of {
                                      GHC.Base.Nothing ->
                                          let {
                                            sat_sa86x [Occ=Once]
                                              :: (dec_state_aa4pz,
                                                  GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                            [LclId] =
                                                CCCS (,)! [GHC.IO.Handle.Internals.decodeByteBuf2
                                                           ipv3_sa86v];
                                          } in 
                                            case
                                                writeMutVar# [dt1_sa86a sat_sa86x GHC.Prim.void#]
                                            of
                                            s2#_sa86y
                                            { (##) ->
                                                  case
                                                      GHC.IO.Encoding.Latin1.latin5
                                                          ipv3_sa86v cbuf_sa860 GHC.Prim.void#
                                                  of
                                                  { Unit# ipv5_sa86B [Occ=Once!] ->
                                                        case ipv5_sa86B of {
                                                          (,,) _ [Occ=Dead]
                                                               input'_sa86E
                                                               output'_sa86F [Occ=Once!] ->
                                                              case
                                                                  writeMutVar# [dt_sa868
                                                                                input'_sa86E
                                                                                GHC.Prim.void#]
                                                              of
                                                              s2#1_sa86G
                                                              { (##) ->
                                                                    case
                                                                        output'_sa86F
                                                                    of
                                                                    wild4_sa86H
                                                                    { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           dt13_sa86N [Occ=Once] ->
                                                                          case
                                                                              cbuf_sa860
                                                                          of
                                                                          wild5_sa86O
                                                                          { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                                 _ [Occ=Dead]
                                                                                                 _ [Occ=Dead]
                                                                                                 _ [Occ=Dead]
                                                                                                 _ [Occ=Dead]
                                                                                                 dt18_sa86U [Occ=Once] ->
                                                                                case
                                                                                    ==# [dt13_sa86N
                                                                                         dt18_sa86U]
                                                                                of
                                                                                { __DEFAULT ->
                                                                                      Unit# [wild4_sa86H];
                                                                                  1# ->
                                                                                      case
                                                                                          input'_sa86E
                                                                                      of
                                                                                      { GHC.IO.Buffer.Buffer ww1_sa86X [Occ=Once]
                                                                                                             ww2_sa86Y [Occ=Once]
                                                                                                             ww3_sa86Z [Occ=Once]
                                                                                                             ww4_sa870 [Occ=Once]
                                                                                                             ww5_sa871 [Occ=Once]
                                                                                                             ww6_sa872 [Occ=Once] ->
                                                                                            GHC.IO.Handle.Internals.$wreadTextDevice'
                                                                                                wild_sa862
                                                                                                ww1_sa86X
                                                                                                ww2_sa86Y
                                                                                                ww3_sa86Z
                                                                                                ww4_sa870
                                                                                                ww5_sa871
                                                                                                ww6_sa872
                                                                                                wild5_sa86O
                                                                                                GHC.Prim.void#;
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      GHC.Base.Just decoder_sa873 [Occ=Once!] ->
                                          case decoder_sa873 of {
                                            GHC.IO.Encoding.Types.BufferCodec ds11_sa875 [Occ=Once]
                                                                              ds12_sa876 [Occ=Once]
                                                                              _ [Occ=Dead]
                                                                              ds14_sa878 [Occ=Once]
                                                                              _ [Occ=Dead] ->
                                                case ds14_sa878 GHC.Prim.void# of {
                                                  Unit# ipv5_sa87c [Occ=Once] ->
                                                      let {
                                                        sat_sa87d [Occ=Once]
                                                          :: (dec_state_aa4pz,
                                                              GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                                        [LclId] =
                                                            CCCS (,)! [ipv5_sa87c ipv3_sa86v];
                                                      } in 
                                                        case
                                                            writeMutVar# [dt1_sa86a
                                                                          sat_sa87d
                                                                          GHC.Prim.void#]
                                                        of
                                                        s2#_sa87e
                                                        { (##) ->
                                                              case
                                                                  GHC.IO.Handle.Internals.$wstreamEncode
                                                                      ds11_sa875
                                                                      ds12_sa876
                                                                      ipv3_sa86v
                                                                      cbuf_sa860
                                                                      GHC.Prim.void#
                                                              of
                                                              { Unit# ipv7_sa87h [Occ=Once!] ->
                                                                    case ipv7_sa87h of {
                                                                      (,) bbuf2_sa87j
                                                                          cbuf'_sa87k [Occ=Once!] ->
                                                                          case
                                                                              writeMutVar# [dt_sa868
                                                                                            bbuf2_sa87j
                                                                                            GHC.Prim.void#]
                                                                          of
                                                                          s2#1_sa87l
                                                                          { (##) ->
                                                                                case
                                                                                    cbuf'_sa87k
                                                                                of
                                                                                wild5_sa87m
                                                                                { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                                       _ [Occ=Dead]
                                                                                                       _ [Occ=Dead]
                                                                                                       _ [Occ=Dead]
                                                                                                       _ [Occ=Dead]
                                                                                                       dt13_sa87s [Occ=Once] ->
                                                                                      case
                                                                                          cbuf_sa860
                                                                                      of
                                                                                      wild6_sa87t
                                                                                      { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                                             _ [Occ=Dead]
                                                                                                             _ [Occ=Dead]
                                                                                                             _ [Occ=Dead]
                                                                                                             _ [Occ=Dead]
                                                                                                             dt18_sa87z [Occ=Once] ->
                                                                                            case
                                                                                                ==# [dt13_sa87s
                                                                                                     dt18_sa87z]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  Unit# [wild5_sa87m];
                                                                                              1# ->
                                                                                                  case
                                                                                                      bbuf2_sa87j
                                                                                                  of
                                                                                                  { GHC.IO.Buffer.Buffer ww1_sa87C [Occ=Once]
                                                                                                                         ww2_sa87D [Occ=Once]
                                                                                                                         ww3_sa87E [Occ=Once]
                                                                                                                         ww4_sa87F [Occ=Once]
                                                                                                                         ww5_sa87G [Occ=Once]
                                                                                                                         ww6_sa87H [Occ=Once] ->
                                                                                                        GHC.IO.Handle.Internals.$wreadTextDevice'
                                                                                                            wild_sa862
                                                                                                            ww1_sa87C
                                                                                                            ww2_sa87D
                                                                                                            ww3_sa87E
                                                                                                            ww4_sa87F
                                                                                                            ww5_sa87G
                                                                                                            ww6_sa87H
                                                                                                            wild6_sa87t
                                                                                                            GHC.Prim.void#;
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                };
                                          };
                                    };
                          } in 
                            case ==# [dt7_sa86r dt8_sa86s] of {
                              __DEFAULT -> $j_sa86t GHC.Prim.void# wild1_sa86m;
                              1# ->
                                  case
                                      GHC.IO.BufferedIO.fillReadBuffer
                                          $dBufferedIO_sa864 ds_sa866 wild1_sa86m GHC.Prim.void#
                                  of
                                  { Unit# ipv3_sa87L [Occ=Once!] ->
                                        case ipv3_sa87L of {
                                          (,) r_sa87N [Occ=Once!] bbuf1_sa87O [Occ=Once] ->
                                              case r_sa87N of {
                                                GHC.Types.I# x_sa87Q [Occ=Once!] ->
                                                    case x_sa87Q of {
                                                      __DEFAULT ->
                                                          $j_sa86t GHC.Prim.void# bbuf1_sa87O;
                                                      0# ->
                                                          raiseIO# [GHC.IO.Handle.Internals.hLookAhead_3
                                                                    GHC.Prim.void#];
                                                    };
                                              };
                                        };
                                  };
                            };
                    };
              };
        };
GHC.IO.Handle.Internals.$wreadTextDevice' [InlPrag=NOUSERINLINE[0],
                                           Occ=LoopBreaker]
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> GHC.IO.Buffer.BufferState
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Buffer.CharBuffer #)
[GblId,
 Arity=9,
 Str=<S,1*U><S,U><L,U><L,U><L,U><S,U><S,U><L,U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sa87T
           ww_sa87U
           ww1_sa87V
           ww2_sa87W
           ww3_sa87X
           ww4_sa87Y
           ww5_sa87Z
           w1_sa880
           void_0E]
        case w_sa87T of wild_sa882 {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       $dBufferedIO_sa884 [Occ=Once]
                                       _ [Occ=Dead]
                                       ds_sa886 [Occ=Once]
                                       _ [Occ=Dead]
                                       dt_sa888 [Occ=Once*]
                                       _ [Occ=Dead]
                                       dt1_sa88a [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds4_sa88e [Occ=Once*!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case -# [ww5_sa87Z ww4_sa87Y] of elems_sa88j [Dmd=<S,U>] {
                __DEFAULT ->
                    case int2Word# [elems_sa88j] of sat_sa88m {
                      __DEFAULT ->
                          case plusAddr# [ww_sa87U ww4_sa87Y] of sat_sa88l {
                            __DEFAULT ->
                                case
                                    __pkg_ccall base-4.11.0.0 [ww_sa87U
                                                               sat_sa88l
                                                               sat_sa88m
                                                               GHC.Prim.void#]
                                of
                                { Unit# _ [Occ=Dead] ->
                                      case touch# [ww1_sa87V GHC.Prim.void#] of s'_sa88q {
                                        (##) ->
                                            let {
                                              sat_sa88r [Occ=Once]
                                                :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                              [LclId] =
                                                  CCCS GHC.IO.Buffer.Buffer! [ww_sa87U
                                                                              ww1_sa87V
                                                                              ww2_sa87W
                                                                              ww3_sa87X
                                                                              0#
                                                                              elems_sa88j];
                                            } in 
                                              case
                                                  GHC.IO.BufferedIO.fillReadBuffer
                                                      $dBufferedIO_sa884
                                                      ds_sa886
                                                      sat_sa88r
                                                      GHC.Prim.void#
                                              of
                                              { Unit# ipv1_sa88u [Occ=Once!] ->
                                                    case ipv1_sa88u of {
                                                      (,) r_sa88w [Occ=Once!] bbuf2_sa88x ->
                                                          case r_sa88w of {
                                                            GHC.Types.I# x_sa88z [Occ=Once!] ->
                                                                case x_sa88z of {
                                                                  __DEFAULT ->
                                                                      case ds4_sa88e of {
                                                                        GHC.Base.Nothing ->
                                                                            lvl22_ra7PC;
                                                                        GHC.Base.Just decoder_sa88D [Occ=Once!] ->
                                                                            case decoder_sa88D of {
                                                                              GHC.IO.Encoding.Types.BufferCodec ds12_sa88F [Occ=Once]
                                                                                                                ds13_sa88G [Occ=Once]
                                                                                                                _ [Occ=Dead]
                                                                                                                ds15_sa88I [Occ=Once]
                                                                                                                _ [Occ=Dead] ->
                                                                                  case
                                                                                      ds15_sa88I
                                                                                          GHC.Prim.void#
                                                                                  of
                                                                                  { Unit# ipv3_sa88M [Occ=Once] ->
                                                                                        let {
                                                                                          sat_sa88N [Occ=Once]
                                                                                            :: (dec_state_aa4ra,
                                                                                                GHC.IO.Buffer.Buffer
                                                                                                  GHC.Word.Word8)
                                                                                          [LclId] =
                                                                                              CCCS (,)! [ipv3_sa88M
                                                                                                         bbuf2_sa88x];
                                                                                        } in 
                                                                                          case
                                                                                              writeMutVar# [dt1_sa88a
                                                                                                            sat_sa88N
                                                                                                            GHC.Prim.void#]
                                                                                          of
                                                                                          s2#_sa88O
                                                                                          { (##) ->
                                                                                                case
                                                                                                    GHC.IO.Handle.Internals.$wstreamEncode
                                                                                                        ds12_sa88F
                                                                                                        ds13_sa88G
                                                                                                        bbuf2_sa88x
                                                                                                        w1_sa880
                                                                                                        GHC.Prim.void#
                                                                                                of
                                                                                                { Unit# ipv5_sa88R [Occ=Once!] ->
                                                                                                      case
                                                                                                          ipv5_sa88R
                                                                                                      of
                                                                                                      { (,) bbuf3_sa88T
                                                                                                            cbuf1_sa88U [Occ=Once!] ->
                                                                                                            case
                                                                                                                writeMutVar# [dt_sa888
                                                                                                                              bbuf3_sa88T
                                                                                                                              GHC.Prim.void#]
                                                                                                            of
                                                                                                            s2#1_sa88V
                                                                                                            { (##) ->
                                                                                                                  case
                                                                                                                      w1_sa880
                                                                                                                  of
                                                                                                                  { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                                                                         _ [Occ=Dead]
                                                                                                                                         _ [Occ=Dead]
                                                                                                                                         _ [Occ=Dead]
                                                                                                                                         _ [Occ=Dead]
                                                                                                                                         dt8_sa892 [Occ=Once] ->
                                                                                                                        case
                                                                                                                            cbuf1_sa88U
                                                                                                                        of
                                                                                                                        wild9_sa893
                                                                                                                        { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                                                                               _ [Occ=Dead]
                                                                                                                                               _ [Occ=Dead]
                                                                                                                                               _ [Occ=Dead]
                                                                                                                                               _ [Occ=Dead]
                                                                                                                                               dt13_sa899 [Occ=Once] ->
                                                                                                                              case
                                                                                                                                  ==# [dt8_sa892
                                                                                                                                       dt13_sa899]
                                                                                                                              of
                                                                                                                              { __DEFAULT ->
                                                                                                                                    Unit# [wild9_sa893];
                                                                                                                                1# ->
                                                                                                                                    case
                                                                                                                                        bbuf3_sa88T
                                                                                                                                    of
                                                                                                                                    { GHC.IO.Buffer.Buffer ww7_sa89c [Occ=Once]
                                                                                                                                                           ww8_sa89d [Occ=Once]
                                                                                                                                                           ww9_sa89e [Occ=Once]
                                                                                                                                                           ww10_sa89f [Occ=Once]
                                                                                                                                                           ww11_sa89g [Occ=Once]
                                                                                                                                                           ww12_sa89h [Occ=Once] ->
                                                                                                                                          GHC.IO.Handle.Internals.$wreadTextDevice'
                                                                                                                                              wild_sa882
                                                                                                                                              ww7_sa89c
                                                                                                                                              ww8_sa89d
                                                                                                                                              ww9_sa89e
                                                                                                                                              ww10_sa89f
                                                                                                                                              ww11_sa89g
                                                                                                                                              ww12_sa89h
                                                                                                                                              wild9_sa893
                                                                                                                                              GHC.Prim.void#;
                                                                                                                                    };
                                                                                                                              };
                                                                                                                        };
                                                                                                                  };
                                                                                                            };
                                                                                                      };
                                                                                                };
                                                                                          };
                                                                                  };
                                                                            };
                                                                      };
                                                                  0# ->
                                                                      case
                                                                          bbuf2_sa88x
                                                                      of
                                                                      wild5_sa89i
                                                                      { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             dt7_sa89n [Occ=Once]
                                                                                             dt8_sa89o [Occ=Once] ->
                                                                            case
                                                                                ==# [dt7_sa89n
                                                                                     dt8_sa89o]
                                                                            of
                                                                            { __DEFAULT ->
                                                                                  case
                                                                                      ds4_sa88e
                                                                                  of
                                                                                  { GHC.Base.Nothing ->
                                                                                        lvl22_ra7PC;
                                                                                    GHC.Base.Just decoder_sa89s [Occ=Once!] ->
                                                                                        case
                                                                                            decoder_sa89s
                                                                                        of
                                                                                        { GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                                                            ds14_sa89v [Occ=Once!]
                                                                                                                            _ [Occ=Dead]
                                                                                                                            _ [Occ=Dead]
                                                                                                                            _ [Occ=Dead] ->
                                                                                              case
                                                                                                  ds14_sa89v
                                                                                                      wild5_sa89i
                                                                                                      w1_sa880
                                                                                                      GHC.Prim.void#
                                                                                              of
                                                                                              { Unit# ipv3_sa89B [Occ=Once!] ->
                                                                                                    case
                                                                                                        ipv3_sa89B
                                                                                                    of
                                                                                                    { (,) bbuf3_sa89D [Occ=Once]
                                                                                                          cbuf1_sa89E [Occ=Once!] ->
                                                                                                          case
                                                                                                              writeMutVar# [dt_sa888
                                                                                                                            bbuf3_sa89D
                                                                                                                            GHC.Prim.void#]
                                                                                                          of
                                                                                                          s2#_sa89F
                                                                                                          { (##) ->
                                                                                                                case
                                                                                                                    cbuf1_sa89E
                                                                                                                of
                                                                                                                wild9_sa89G
                                                                                                                { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                                                                       _ [Occ=Dead]
                                                                                                                                       _ [Occ=Dead]
                                                                                                                                       _ [Occ=Dead]
                                                                                                                                       _ [Occ=Dead]
                                                                                                                                       dt13_sa89M [Occ=Once] ->
                                                                                                                      case
                                                                                                                          w1_sa880
                                                                                                                      of
                                                                                                                      { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                                                                             _ [Occ=Dead]
                                                                                                                                             _ [Occ=Dead]
                                                                                                                                             _ [Occ=Dead]
                                                                                                                                             _ [Occ=Dead]
                                                                                                                                             dt18_sa89T [Occ=Once] ->
                                                                                                                            case
                                                                                                                                ==# [dt13_sa89M
                                                                                                                                     dt18_sa89T]
                                                                                                                            of
                                                                                                                            { __DEFAULT ->
                                                                                                                                  Unit# [wild9_sa89G];
                                                                                                                              1# ->
                                                                                                                                  GHC.IO.Handle.Internals.hLookAhead_2
                                                                                                                                      wild_sa882
                                                                                                                                      wild9_sa89G
                                                                                                                                      GHC.Prim.void#;
                                                                                                                            };
                                                                                                                      };
                                                                                                                };
                                                                                                          };
                                                                                                    };
                                                                                              };
                                                                                        };
                                                                                  };
                                                                              1# ->
                                                                                  raiseIO# [GHC.IO.Handle.Internals.hLookAhead_3
                                                                                            GHC.Prim.void#];
                                                                            };
                                                                      };
                                                                };
                                                          };
                                                    };
                                              };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.readTextDevice
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Types.IO GHC.IO.Buffer.CharBuffer
[GblId,
 Arity=3,
 Str=<S,1*U><L,U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.Internals.hLookAhead_2 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.hLookAhead_1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Char #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle__sa89V void_0E]
        case handle__sa89V of wild_sa89X {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       dt2_sa8a6
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt2_sa8a6 GHC.Prim.void#] of {
                Unit# ipv1_sa8ag [Occ=Once!] ->
                    case ipv1_sa8ag of wild1_sa8ah {
                      GHC.IO.Buffer.Buffer dt4_sa8ai [Occ=Once*]
                                           dt5_sa8aj [Occ=Once*]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           dt7_sa8am
                                           dt8_sa8an [Occ=Once] ->
                          case ==# [dt7_sa8am dt8_sa8an] of {
                            __DEFAULT ->
                                case
                                    writeMutVar# [dt2_sa8a6 wild1_sa8ah GHC.Prim.void#]
                                of
                                s2#_sa8ap
                                { (##) ->
                                      case
                                          readWideCharOffAddr# [dt4_sa8ai dt7_sa8am GHC.Prim.void#]
                                      of
                                      { Unit# ipv3_sa8as [Occ=Once] ->
                                            case touch# [dt5_sa8aj GHC.Prim.void#] of s'_sa8at {
                                              (##) ->
                                                  let {
                                                    sat_sa8au [Occ=Once] :: GHC.Types.Char
                                                    [LclId] =
                                                        CCCS GHC.Types.C#! [ipv3_sa8as];
                                                  } in  Unit# [sat_sa8au];
                                            };
                                      };
                                };
                            1# ->
                                case
                                    GHC.IO.Handle.Internals.hLookAhead_2
                                        wild_sa89X wild1_sa8ah GHC.Prim.void#
                                of
                                { Unit# ipv3_sa8ax [Occ=Once] ->
                                      case
                                          writeMutVar# [dt2_sa8a6 ipv3_sa8ax GHC.Prim.void#]
                                      of
                                      s2#_sa8ay
                                      { (##) ->
                                            case
                                                readWideCharOffAddr# [dt4_sa8ai
                                                                      dt7_sa8am
                                                                      GHC.Prim.void#]
                                            of
                                            { Unit# ipv5_sa8aB [Occ=Once] ->
                                                  case
                                                      touch# [dt5_sa8aj GHC.Prim.void#]
                                                  of
                                                  s'_sa8aC
                                                  { (##) ->
                                                        let {
                                                          sat_sa8aD [Occ=Once] :: GHC.Types.Char
                                                          [LclId] =
                                                              CCCS GHC.Types.C#! [ipv5_sa8aB];
                                                        } in  Unit# [sat_sa8aD];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.hLookAhead_
  :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO GHC.Types.Char
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.Internals.hLookAhead_1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.hClose_help2
  :: GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Base.Maybe GHC.Exception.SomeException #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [e1_sa8aE void_0E]
        let {
          sat_sa8aG [Occ=Once] :: GHC.Base.Maybe GHC.Exception.SomeException
          [LclId] =
              CCCS GHC.Base.Just! [e1_sa8aE];
        } in  Unit# [sat_sa8aG];

GHC.IO.Handle.Internals.hClose_help1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__,
            GHC.Base.Maybe GHC.Exception.SomeException) #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle__sa8aH void_0E]
        case handle__sa8aH of wild_sa8aJ {
          GHC.IO.Handle.Types.Handle__ $dIODevice_sa8aK
                                       $dBufferedIO_sa8aL
                                       $dTypeable_sa8aM [Occ=Once*]
                                       ds1_sa8aN
                                       ds2_sa8aO [Occ=Once!]
                                       dt_sa8aP
                                       ds3_sa8aQ [Occ=Once*]
                                       dt1_sa8aR [Occ=Once*]
                                       dt2_sa8aS
                                       dt3_sa8aT
                                       ds4_sa8aU [Occ=Once!]
                                       ds5_sa8aV
                                       ds6_sa8aW [Occ=Once*]
                                       ds7_sa8aX [Occ=Once*]
                                       ds8_sa8aY [Occ=Once*]
                                       ds9_sa8aZ ->
              case ds2_sa8aO of {
                __DEFAULT ->
                    let {
                      sat_sa8bs [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 GHC.Base.Maybe GHC.Exception.SomeException #)
                      [LclId] =
                          [$dBufferedIO_sa8aL ds1_sa8aN dt_sa8aP] \r [void_0E]
                              case readMutVar# [dt_sa8aP GHC.Prim.void#] of {
                                Unit# ipv1_sa8b4 [Occ=Once!] ->
                                    case ipv1_sa8b4 of {
                                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           ds_sa8b8 [Occ=Once!]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead] ->
                                          case ds_sa8b8 of {
                                            GHC.IO.Buffer.ReadBuffer -> Unit# [GHC.Base.Nothing];
                                            GHC.IO.Buffer.WriteBuffer ->
                                                case readMutVar# [dt_sa8aP GHC.Prim.void#] of {
                                                  Unit# ipv3_sa8bf [Occ=Once!] ->
                                                      case ipv3_sa8bf of wild4_sa8bg {
                                                        GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                             _ [Occ=Dead]
                                                                             _ [Occ=Dead]
                                                                             _ [Occ=Dead]
                                                                             dt12_sa8bl [Occ=Once]
                                                                             dt13_sa8bm [Occ=Once] ->
                                                            case ==# [dt12_sa8bl dt13_sa8bm] of {
                                                              __DEFAULT ->
                                                                  case
                                                                      GHC.IO.BufferedIO.flushWriteBuffer
                                                                          $dBufferedIO_sa8aL
                                                                          ds1_sa8aN
                                                                          wild4_sa8bg
                                                                          GHC.Prim.void#
                                                                  of
                                                                  { Unit# ipv5_sa8bq [Occ=Once] ->
                                                                        case
                                                                            writeMutVar# [dt_sa8aP
                                                                                          ipv5_sa8bq
                                                                                          GHC.Prim.void#]
                                                                        of
                                                                        s2#_sa8br
                                                                        { (##) ->
                                                                              Unit# [GHC.Base.Nothing];
                                                                        };
                                                                  };
                                                              1# -> Unit# [GHC.Base.Nothing];
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                    } in 
                      case
                          catch# [sat_sa8bs
                                  GHC.IO.Handle.Internals.hClose_help2
                                  GHC.Prim.void#]
                      of
                      { Unit# ipv1_sa8bv [Occ=Once*!] ->
                            let-no-escape {
                              $j_sa8bw [Occ=Once*!T[2], Dmd=<C(C(S)),1*C1(C1(U(U,U)))>]
                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                   -> GHC.Base.Maybe GHC.Exception.SomeException
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         (GHC.IO.Handle.Types.Handle__,
                                          GHC.Base.Maybe GHC.Exception.SomeException) #)
                              [LclId[JoinId(2)], Arity=2, Str=<S,U><L,1*U>, Unf=OtherCon []] =
                                  sat-only [$dIODevice_sa8aK
                                            $dBufferedIO_sa8aL
                                            $dTypeable_sa8aM
                                            ds1_sa8aN
                                            dt_sa8aP
                                            ds3_sa8aQ
                                            dt1_sa8aR
                                            dt2_sa8aS
                                            dt3_sa8aT
                                            ds4_sa8aU
                                            ds5_sa8aV
                                            ds6_sa8aW
                                            ds7_sa8aX
                                            ds8_sa8aY
                                            ds9_sa8aZ
                                            ipv1_sa8bv] \r [void_0E ipv3_sa8by]
                                      case
                                          writeMutVar# [dt3_sa8aT
                                                        GHC.IO.Handle.Types.BufferListNil
                                                        GHC.Prim.void#]
                                      of
                                      s2#_sa8bz
                                      { (##) ->
                                            case
                                                writeMutVar# [dt2_sa8aS
                                                              GHC.IO.Handle.Internals.noCharBuffer
                                                              GHC.Prim.void#]
                                            of
                                            s2#1_sa8bA
                                            { (##) ->
                                                  case
                                                      writeMutVar# [dt_sa8aP
                                                                    GHC.IO.Handle.Internals.noByteBuffer
                                                                    GHC.Prim.void#]
                                                  of
                                                  s2#2_sa8bB
                                                  { (##) ->
                                                        let-no-escape {
                                                          $w$j_sa8bC [InlPrag=NOUSERINLINE[0],
                                                                      Occ=Once*!T[1],
                                                                      Dmd=<L,1*C1(U(U,U))>]
                                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     (GHC.IO.Handle.Types.Handle__,
                                                                      GHC.Base.Maybe
                                                                        GHC.Exception.SomeException) #)
                                                          [LclId[JoinId(1)],
                                                           Arity=1,
                                                           Str=<S,U>,
                                                           Unf=OtherCon []] =
                                                              sat-only [$dIODevice_sa8aK
                                                                        $dBufferedIO_sa8aL
                                                                        $dTypeable_sa8aM
                                                                        ds1_sa8aN
                                                                        dt_sa8aP
                                                                        ds3_sa8aQ
                                                                        dt1_sa8aR
                                                                        dt2_sa8aS
                                                                        dt3_sa8aT
                                                                        ds4_sa8aU
                                                                        ds5_sa8aV
                                                                        ds6_sa8aW
                                                                        ds7_sa8aX
                                                                        ds8_sa8aY
                                                                        ds9_sa8aZ
                                                                        ipv1_sa8bv
                                                                        ipv3_sa8by] \r [void_0E]
                                                                  case ds4_sa8aU of wild2_sa8bE {
                                                                    GHC.Base.Nothing ->
                                                                        let {
                                                                          sat_sa8bI [Occ=Once]
                                                                            :: GHC.Base.Maybe
                                                                                 GHC.Exception.SomeException
                                                                          [LclId] =
                                                                              [ipv1_sa8bv
                                                                               ipv3_sa8by] \u []
                                                                                  case
                                                                                      ipv1_sa8bv
                                                                                  of
                                                                                  wild3_sa8bG
                                                                                  { GHC.Base.Nothing ->
                                                                                        ipv3_sa8by;
                                                                                    GHC.Base.Just _ [Occ=Dead] ->
                                                                                        wild3_sa8bG;
                                                                                  }; } in
                                                                        let {
                                                                          sat_sa8bF [Occ=Once]
                                                                            :: GHC.IO.Handle.Types.Handle__
                                                                          [LclId] =
                                                                              CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sa8aK
                                                                                                                  $dBufferedIO_sa8aL
                                                                                                                  $dTypeable_sa8aM
                                                                                                                  ds1_sa8aN
                                                                                                                  GHC.IO.Handle.Types.ClosedHandle
                                                                                                                  dt_sa8aP
                                                                                                                  ds3_sa8aQ
                                                                                                                  dt1_sa8aR
                                                                                                                  dt2_sa8aS
                                                                                                                  dt3_sa8aT
                                                                                                                  GHC.Base.Nothing
                                                                                                                  ds5_sa8aV
                                                                                                                  ds6_sa8aW
                                                                                                                  ds7_sa8aX
                                                                                                                  ds8_sa8aY
                                                                                                                  ds9_sa8aZ]; } in
                                                                        let {
                                                                          sat_sa8bJ [Occ=Once]
                                                                            :: (GHC.IO.Handle.Types.Handle__,
                                                                                GHC.Base.Maybe
                                                                                  GHC.Exception.SomeException)
                                                                          [LclId] =
                                                                              CCCS (,)! [sat_sa8bF
                                                                                         sat_sa8bI];
                                                                        } in  Unit# [sat_sa8bJ];
                                                                    GHC.Base.Just d_sa8bK [Occ=Once!] ->
                                                                        case d_sa8bK of {
                                                                          GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                                            _ [Occ=Dead]
                                                                                                            ds14_sa8bO [Occ=Once]
                                                                                                            _ [Occ=Dead]
                                                                                                            _ [Occ=Dead] ->
                                                                              case
                                                                                  ds14_sa8bO
                                                                                      GHC.Prim.void#
                                                                              of
                                                                              { Unit# _ [Occ=Dead] ->
                                                                                    let {
                                                                                      sat_sa8bX [Occ=Once]
                                                                                        :: GHC.Base.Maybe
                                                                                             GHC.Exception.SomeException
                                                                                      [LclId] =
                                                                                          [ipv1_sa8bv
                                                                                           ipv3_sa8by] \u []
                                                                                              case
                                                                                                  ipv1_sa8bv
                                                                                              of
                                                                                              wild4_sa8bV
                                                                                              { GHC.Base.Nothing ->
                                                                                                    ipv3_sa8by;
                                                                                                GHC.Base.Just _ [Occ=Dead] ->
                                                                                                    wild4_sa8bV;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_sa8bU [Occ=Once]
                                                                                        :: GHC.IO.Handle.Types.Handle__
                                                                                      [LclId] =
                                                                                          CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sa8aK
                                                                                                                              $dBufferedIO_sa8aL
                                                                                                                              $dTypeable_sa8aM
                                                                                                                              ds1_sa8aN
                                                                                                                              GHC.IO.Handle.Types.ClosedHandle
                                                                                                                              dt_sa8aP
                                                                                                                              ds3_sa8aQ
                                                                                                                              dt1_sa8aR
                                                                                                                              dt2_sa8aS
                                                                                                                              dt3_sa8aT
                                                                                                                              wild2_sa8bE
                                                                                                                              ds5_sa8aV
                                                                                                                              ds6_sa8aW
                                                                                                                              ds7_sa8aX
                                                                                                                              ds8_sa8aY
                                                                                                                              ds9_sa8aZ]; } in
                                                                                    let {
                                                                                      sat_sa8bY [Occ=Once]
                                                                                        :: (GHC.IO.Handle.Types.Handle__,
                                                                                            GHC.Base.Maybe
                                                                                              GHC.Exception.SomeException)
                                                                                      [LclId] =
                                                                                          CCCS (,)! [sat_sa8bU
                                                                                                     sat_sa8bX];
                                                                                    } in 
                                                                                      Unit# [sat_sa8bY];
                                                                              };
                                                                        };
                                                                  };
                                                        } in 
                                                          case ds5_sa8aV of {
                                                            GHC.Base.Nothing ->
                                                                $w$j_sa8bC GHC.Prim.void#;
                                                            GHC.Base.Just d_sa8c0 [Occ=Once!] ->
                                                                case d_sa8c0 of {
                                                                  GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                                    _ [Occ=Dead]
                                                                                                    ds14_sa8c4 [Occ=Once]
                                                                                                    _ [Occ=Dead]
                                                                                                    _ [Occ=Dead] ->
                                                                      case
                                                                          ds14_sa8c4 GHC.Prim.void#
                                                                      of
                                                                      { Unit# _ [Occ=Dead] ->
                                                                            $w$j_sa8bC
                                                                                GHC.Prim.void#;
                                                                      };
                                                                };
                                                          };
                                                  };
                                            };
                                      };
                            } in 
                              case ds9_sa8aZ of {
                                GHC.Base.Nothing ->
                                    let {
                                      sat_sa8cf [Occ=Once]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                 GHC.Base.Maybe GHC.Exception.SomeException #)
                                      [LclId] =
                                          [$dIODevice_sa8aK ds1_sa8aN] \r [void_0E]
                                              case
                                                  GHC.IO.Device.close
                                                      $dIODevice_sa8aK ds1_sa8aN GHC.Prim.void#
                                              of
                                              { Unit# _ [Occ=Dead] -> Unit# [GHC.Base.Nothing];
                                              };
                                    } in 
                                      case
                                          catch# [sat_sa8cf
                                                  GHC.IO.Handle.Internals.hClose_help2
                                                  GHC.Prim.void#]
                                      of
                                      { Unit# ipv3_sa8ci [Occ=Once] ->
                                            $j_sa8bw GHC.Prim.void# ipv3_sa8ci;
                                      };
                                GHC.Base.Just _ [Occ=Dead] ->
                                    $j_sa8bw GHC.Prim.void# GHC.Base.Nothing;
                              };
                      };
                GHC.IO.Handle.Types.ClosedHandle ->
                    let {
                      sat_sa8ck [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__,
                            GHC.Base.Maybe GHC.Exception.SomeException)
                      [LclId] =
                          CCCS (,)! [wild_sa8aJ GHC.Base.Nothing];
                    } in  Unit# [sat_sa8ck];
              };
        };

GHC.IO.Handle.Internals.hClose_help
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Types.IO
          (GHC.IO.Handle.Types.Handle__,
           GHC.Base.Maybe GHC.Exception.SomeException)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.Internals.hClose_help1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.handleFinalizer1
  :: GHC.IO.FilePath
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,A><S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [fp_sa8cl m_sa8cm void_0E]
        case m_sa8cm of {
          GHC.MVar.MVar mvar#_sa8cp ->
              case takeMVar# [mvar#_sa8cp GHC.Prim.void#] of {
                Unit# ipv1_sa8cs [Occ=Once] ->
                    case
                        GHC.IO.Handle.Internals.hClose_help1 ipv1_sa8cs GHC.Prim.void#
                    of
                    { Unit# ipv3_sa8cv [Occ=Once!] ->
                          case ipv3_sa8cv of {
                            (,) handle_'_sa8cx [Occ=Once] _ [Occ=Dead] ->
                                case
                                    putMVar# [mvar#_sa8cp handle_'_sa8cx GHC.Prim.void#]
                                of
                                s2#_sa8cz
                                { (##) -> Unit# [GHC.Tuple.()];
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.handleFinalizer
  :: GHC.IO.FilePath
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
[GblId, Arity=3, Str=<L,A><S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.Internals.handleFinalizer1
            eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.mkDuplexHandle4
  :: GHC.Base.Maybe
       (GHC.IO.FilePath
        -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ())
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.IO.Handle.Internals.handleFinalizer1];

GHC.IO.Handle.Internals.mkFileHandle1
  :: forall dev.
     (GHC.IO.Device.IODevice dev, GHC.IO.BufferedIO.BufferedIO dev,
      Data.Typeable.Internal.Typeable dev) =>
     dev
     -> GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.NewlineMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId,
 Arity=9,
 Str=<L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U)><L,U><L,U><L,U><L,1*U><S,U><L,U(U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [$dIODevice_sa8cA
           $dBufferedIO_sa8cB
           $dTypeable_sa8cC
           dev1_sa8cD
           filepath_sa8cE
           iomode_sa8cF
           mb_codec_sa8cG
           tr_newlines_sa8cH
           void_0E]
        let {
          sat_sa8cK [Occ=Once] :: GHC.IO.Handle.Types.HandleType
          [LclId] =
              [iomode_sa8cF] \u []
                  case iomode_sa8cF of {
                    GHC.IO.IOMode.ReadMode -> GHC.IO.Handle.Types.ReadHandle [];
                    GHC.IO.IOMode.WriteMode -> GHC.IO.Handle.Types.WriteHandle [];
                    GHC.IO.IOMode.AppendMode -> GHC.IO.Handle.Types.AppendHandle [];
                    GHC.IO.IOMode.ReadWriteMode ->
                        GHC.IO.Handle.Types.ReadWriteHandle [];
                  };
        } in 
          GHC.IO.Handle.Internals.mkDuplexHandle5
              $dIODevice_sa8cA
              $dBufferedIO_sa8cB
              $dTypeable_sa8cC
              dev1_sa8cD
              filepath_sa8cE
              sat_sa8cK
              GHC.Types.True
              mb_codec_sa8cG
              tr_newlines_sa8cH
              GHC.IO.Handle.Internals.mkDuplexHandle4
              GHC.Base.Nothing
              GHC.Prim.void#;

GHC.IO.Handle.Internals.mkFileHandle
  :: forall dev.
     (GHC.IO.Device.IODevice dev, GHC.IO.BufferedIO.BufferedIO dev,
      Data.Typeable.Internal.Typeable dev) =>
     dev
     -> GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.NewlineMode
     -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId,
 Arity=9,
 Str=<L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U)><L,U><L,U><L,U><L,1*U><S,U><L,U(U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B9
           eta_B8
           eta_B7
           eta_B6
           eta_B5
           eta_B4
           eta_B3
           eta_B2
           void_0E]
        GHC.IO.Handle.Internals.mkFileHandle1
            eta_B9
            eta_B8
            eta_B7
            eta_B6
            eta_B5
            eta_B4
            eta_B3
            eta_B2
            GHC.Prim.void#;

lvl23_ra7PD :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Pattern match failure in do expression at GHC/IO/Handle/Internals.hs:686:3-33"#;

GHC.IO.Handle.Internals.mkDuplexHandle3
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [void_0E]
        case GHC.CString.unpackCString# lvl23_ra7PD of sat_sa8cM {
          __DEFAULT -> GHC.IO.failIO1 sat_sa8cM GHC.Prim.void#;
        };

lvl24_ra7PE :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Pattern match failure in do expression at GHC/IO/Handle/Internals.hs:680:3-35"#;

GHC.IO.Handle.Internals.mkDuplexHandle2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [void_0E]
        case GHC.CString.unpackCString# lvl24_ra7PE of sat_sa8cO {
          __DEFAULT -> GHC.IO.failIO1 sat_sa8cO GHC.Prim.void#;
        };

GHC.IO.Handle.Internals.mkDuplexHandle1
  :: forall dev.
     (GHC.IO.Device.IODevice dev, GHC.IO.BufferedIO.BufferedIO dev,
      Data.Typeable.Internal.Typeable dev) =>
     dev
     -> GHC.IO.FilePath
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.NewlineMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId,
 Arity=8,
 Str=<L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U)><L,U><L,U><L,U><S,U><L,U(U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [$dIODevice_sa8cP
           $dBufferedIO_sa8cQ
           $dTypeable_sa8cR
           dev1_sa8cS
           filepath_sa8cT
           mb_codec_sa8cU
           tr_newlines_sa8cV
           void_0E]
        case
            GHC.IO.Handle.Internals.mkDuplexHandle5
                $dIODevice_sa8cP
                $dBufferedIO_sa8cQ
                $dTypeable_sa8cR
                dev1_sa8cS
                filepath_sa8cT
                GHC.IO.Handle.Types.WriteHandle
                GHC.Types.True
                mb_codec_sa8cU
                tr_newlines_sa8cV
                GHC.IO.Handle.Internals.mkDuplexHandle4
                GHC.Base.Nothing
                GHC.Prim.void#
        of
        { Unit# ipv1_sa8cZ [Occ=Once!] ->
              case ipv1_sa8cZ of {
                GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sa8d2 ->
                    let {
                      sat_sa8d3 [Occ=Once] :: GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
                      [LclId] =
                          CCCS GHC.MVar.MVar! [dt_sa8d2]; } in
                    let {
                      sat_sa8d4 [Occ=Once]
                        :: GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
                      [LclId] =
                          CCCS GHC.Base.Just! [sat_sa8d3];
                    } in 
                      case
                          GHC.IO.Handle.Internals.mkDuplexHandle5
                              $dIODevice_sa8cP
                              $dBufferedIO_sa8cQ
                              $dTypeable_sa8cR
                              dev1_sa8cS
                              filepath_sa8cT
                              GHC.IO.Handle.Types.ReadHandle
                              GHC.Types.True
                              mb_codec_sa8cU
                              tr_newlines_sa8cV
                              GHC.Base.Nothing
                              sat_sa8d4
                              GHC.Prim.void#
                      of
                      { Unit# ipv3_sa8d7 [Occ=Once!] ->
                            case ipv3_sa8d7 of {
                              GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt1_sa8da [Occ=Once] ->
                                  let {
                                    sat_sa8db [Occ=Once] :: GHC.IO.Handle.Types.Handle
                                    [LclId] =
                                        CCCS GHC.IO.Handle.Types.DuplexHandle! [filepath_sa8cT
                                                                                dt1_sa8da
                                                                                dt_sa8d2];
                                  } in  Unit# [sat_sa8db];
                              GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead] ->
                                  GHC.IO.Handle.Internals.mkDuplexHandle3 GHC.Prim.void#;
                            };
                      };
                GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead] ->
                    GHC.IO.Handle.Internals.mkDuplexHandle2 GHC.Prim.void#;
              };
        };

GHC.IO.Handle.Internals.mkDuplexHandle
  :: forall dev.
     (GHC.IO.Device.IODevice dev, GHC.IO.BufferedIO.BufferedIO dev,
      Data.Typeable.Internal.Typeable dev) =>
     dev
     -> GHC.IO.FilePath
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.NewlineMode
     -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId,
 Arity=8,
 Str=<L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U)><L,U><L,U><L,U><S,U><L,U(U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B8 eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.Internals.mkDuplexHandle1
            eta_B8 eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

$wlvl_ra7PF
  :: forall a.
     GHC.IO.Exception.IOErrorType
     -> GHC.Base.String
     -> GHC.Base.Maybe Foreign.C.Types.CInt
     -> GHC.Base.Maybe GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=7,
 Str=<B,U><B,U><B,U><B,1*U><B,U><B,U><B,U>x,
 Unf=OtherCon []] =
    sat-only [] \r [ww_sa8di
                    ww1_sa8dj
                    ww2_sa8dk
                    ww3_sa8dl
                    w_sa8dm
                    w1_sa8dn
                    void_0E]
        let {
          sat_sa8dA [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [ww_sa8di ww1_sa8dj ww2_sa8dk ww3_sa8dl w_sa8dm w1_sa8dn] \u []
                  let {
                    sat_sa8dy [Occ=Once] :: GHC.Base.Maybe GHC.IO.FilePath
                    [LclId] =
                        [ww3_sa8dl w1_sa8dn] \u []
                            case ww3_sa8dl of wild_sa8dq {
                              GHC.Base.Nothing ->
                                  case w1_sa8dn of {
                                    GHC.IO.Handle.Types.FileHandle path_sa8ds [Occ=Once]
                                                                   _ [Occ=Dead] ->
                                        GHC.Base.Just [path_sa8ds];
                                    GHC.IO.Handle.Types.DuplexHandle path_sa8du [Occ=Once]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead] ->
                                        GHC.Base.Just [path_sa8du];
                                  };
                              GHC.Base.Just _ [Occ=Dead] -> wild_sa8dq;
                            }; } in
                  let {
                    sat_sa8dp [Occ=Once] :: GHC.Base.Maybe GHC.IO.Handle.Types.Handle
                    [LclId] =
                        CCCS GHC.Base.Just! [w1_sa8dn]; } in
                  let {
                    sat_sa8dz [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        CCCS GHC.IO.Exception.IOError! [sat_sa8dp
                                                        ww_sa8di
                                                        w_sa8dm
                                                        ww1_sa8dj
                                                        ww2_sa8dk
                                                        sat_sa8dy];
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sa8dz;
        } in  raiseIO# [sat_sa8dA GHC.Prim.void#];

GHC.IO.Handle.Internals.$wdo_operation [InlPrag=NOUSERINLINE[0],
                                        Occ=LoopBreaker]
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Prim.MVar# GHC.Prim.RealWorld GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=5,
 Str=<L,U><L,U><C(S),C(U)><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sa8dB w1_sa8dC w2_sa8dD ww_sa8dE void_0E]
        case takeMVar# [ww_sa8dE GHC.Prim.void#] of {
          Unit# ipv1_sa8dI ->
              case w2_sa8dD ipv1_sa8dI of nt_sa8dJ {
                __DEFAULT ->
                    let {
                      sat_sa8e5 [Occ=Once]
                        :: GHC.Exception.SomeException
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_sa75G #)
                      [LclId] =
                          [w_sa8dB w1_sa8dC w2_sa8dD ww_sa8dE ipv1_sa8dI] \r [e1_sa8dK
                                                                              void_0E]
                              case putMVar# [ww_sa8dE ipv1_sa8dI GHC.Prim.void#] of s2#_sa8dM {
                                (##) ->
                                    case e1_sa8dK of wild_sa8dN {
                                      GHC.Exception.SomeException $dException1_sa8dO
                                                                  e3_sa8dP [Occ=Once] ->
                                          case
                                              GHC.Exception.$p1Exception $dException1_sa8dO
                                          of
                                          sat_sa8dQ
                                          { __DEFAULT ->
                                                case
                                                    Data.Typeable.Internal.sameTypeRep
                                                        sat_sa8dQ
                                                        GHC.IO.Exception.$fExceptionIOException4
                                                of
                                                { GHC.Types.False ->
                                                      case
                                                          GHC.Exception.$p1Exception
                                                              $dException1_sa8dO
                                                      of
                                                      sat_sa8dS
                                                      { __DEFAULT ->
                                                            case
                                                                Data.Typeable.Internal.sameTypeRep
                                                                    sat_sa8dS
                                                                    GHC.IO.Exception.$fExceptionAllocationLimitExceeded6
                                                            of
                                                            { GHC.Types.False ->
                                                                  raiseIO# [wild_sa8dN
                                                                            GHC.Prim.void#];
                                                              GHC.Types.True ->
                                                                  case
                                                                      myThreadId# [GHC.Prim.void#]
                                                                  of
                                                                  { Unit# ipv3_sa8dW [Occ=Once] ->
                                                                        case
                                                                            killThread# [ipv3_sa8dW
                                                                                         wild_sa8dN
                                                                                         GHC.Prim.void#]
                                                                        of
                                                                        s1_sa8dX
                                                                        { (##) ->
                                                                              GHC.IO.Handle.Internals.$wdo_operation
                                                                                  w_sa8dB
                                                                                  w1_sa8dC
                                                                                  w2_sa8dD
                                                                                  ww_sa8dE
                                                                                  GHC.Prim.void#;
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                  GHC.Types.True ->
                                                      case e3_sa8dP of {
                                                        GHC.IO.Exception.IOError _ [Occ=Dead]
                                                                                 ww3_sa8e0 [Occ=Once]
                                                                                 _ [Occ=Dead]
                                                                                 ww5_sa8e2 [Occ=Once]
                                                                                 ww6_sa8e3 [Occ=Once]
                                                                                 ww7_sa8e4 [Occ=Once] ->
                                                            $wlvl_ra7PF
                                                                ww3_sa8e0
                                                                ww5_sa8e2
                                                                ww6_sa8e3
                                                                ww7_sa8e4
                                                                w_sa8dB
                                                                w1_sa8dC
                                                                GHC.Prim.void#;
                                                      };
                                                };
                                          };
                                    };
                              };
                    } in  catch# [nt_sa8dJ sat_sa8e5 GHC.Prim.void#];
              };
        };

GHC.IO.Handle.Internals.withHandle_1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=5,
 Str=<L,U><L,U><C(S),C(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sa8e6 w1_sa8e7 w2_sa8e8 w3_sa8e9 void_0E]
        case w3_sa8e9 of {
          GHC.MVar.MVar ww1_sa8ec [Occ=Once] ->
              GHC.IO.Handle.Internals.$wdo_operation
                  w_sa8e6 w1_sa8e7 w2_sa8e8 ww1_sa8ec GHC.Prim.void#;
        };

GHC.IO.Handle.Internals.$wwithHandle__' [InlPrag=NOUSERINLINE[0]]
  :: GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.Prim.MVar# GHC.Prim.RealWorld GHC.IO.Handle.Types.Handle__
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO GHC.IO.Handle.Types.Handle__)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=5,
 Str=<L,U><L,U><S,U><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sa8ed w1_sa8ee ww_sa8ef w2_sa8eg void_0E]
        case getMaskingState# [GHC.Prim.void#] of {
          Unit# ipv1_sa8ek [Occ=Once!] ->
              case ipv1_sa8ek of {
                __DEFAULT ->
                    case
                        GHC.IO.Handle.Internals.$wdo_operation
                            w_sa8ed w1_sa8ee w2_sa8eg ww_sa8ef GHC.Prim.void#
                    of
                    { Unit# ipv3_sa8eo [Occ=Once] ->
                          case putMVar# [ww_sa8ef ipv3_sa8eo GHC.Prim.void#] of s2#_sa8ep {
                            (##) -> Unit# [GHC.Tuple.()];
                          };
                    };
                0# ->
                    let {
                      sat_sa8ev [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      [LclId] =
                          [w_sa8ed w1_sa8ee ww_sa8ef w2_sa8eg] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      w_sa8ed w1_sa8ee w2_sa8eg ww_sa8ef GHC.Prim.void#
                              of
                              { Unit# ipv3_sa8et [Occ=Once] ->
                                    case
                                        putMVar# [ww_sa8ef ipv3_sa8et GHC.Prim.void#]
                                    of
                                    s2#_sa8eu
                                    { (##) -> Unit# [GHC.Tuple.()];
                                    };
                              };
                    } in  maskAsyncExceptions# [sat_sa8ev GHC.Prim.void#];
              };
        };

GHC.IO.Handle.Internals.withHandle__'1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO GHC.IO.Handle.Types.Handle__)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=5,
 Str=<L,U><L,U><S(S),1*U(U)><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sa8ew w1_sa8ex w2_sa8ey w3_sa8ez void_0E]
        case w2_sa8ey of {
          GHC.MVar.MVar ww1_sa8eC [Occ=Once] ->
              GHC.IO.Handle.Internals.$wwithHandle__'
                  w_sa8ew w1_sa8ex ww1_sa8eC w3_sa8ez GHC.Prim.void#;
        };

GHC.IO.Handle.Internals.withHandle__'
  :: GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO GHC.IO.Handle.Types.Handle__)
     -> GHC.Types.IO ()
[GblId,
 Arity=5,
 Str=<L,U><L,U><S(S),1*U(U)><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.Internals.withHandle__'1
            eta_B5 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.withAllHandles__1
  :: GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO GHC.IO.Handle.Types.Handle__)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [fun_sa8eD h_sa8eE act_sa8eF void_0E]
        case h_sa8eE of wild_sa8eH {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sa8eJ ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sa8eM [Occ=Once!] ->
                    case ipv1_sa8eM of {
                      __DEFAULT ->
                          case
                              GHC.IO.Handle.Internals.$wdo_operation
                                  fun_sa8eD wild_sa8eH act_sa8eF dt_sa8eJ GHC.Prim.void#
                          of
                          { Unit# ipv3_sa8eQ [Occ=Once] ->
                                case putMVar# [dt_sa8eJ ipv3_sa8eQ GHC.Prim.void#] of s2#_sa8eR {
                                  (##) -> Unit# [GHC.Tuple.()];
                                };
                          };
                      0# ->
                          let {
                            sat_sa8eX [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                            [LclId] =
                                [fun_sa8eD act_sa8eF wild_sa8eH dt_sa8eJ] \r [void_0E]
                                    case
                                        GHC.IO.Handle.Internals.$wdo_operation
                                            fun_sa8eD wild_sa8eH act_sa8eF dt_sa8eJ GHC.Prim.void#
                                    of
                                    { Unit# ipv3_sa8eV [Occ=Once] ->
                                          case
                                              putMVar# [dt_sa8eJ ipv3_sa8eV GHC.Prim.void#]
                                          of
                                          s2#_sa8eW
                                          { (##) -> Unit# [GHC.Tuple.()];
                                          };
                                    };
                          } in  maskAsyncExceptions# [sat_sa8eX GHC.Prim.void#];
                    };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead] dt_sa8eZ dt1_sa8f0 ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sa8f3 [Occ=Once!] ->
                    let-no-escape {
                      $w$j_sa8f4 [InlPrag=NOUSERINLINE[0],
                                  Occ=Once*!T[1],
                                  Dmd=<L,1*C1(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          sat-only [fun_sa8eD act_sa8eF wild_sa8eH dt1_sa8f0] \r [void_0E]
                              case getMaskingState# [GHC.Prim.void#] of {
                                Unit# ipv3_sa8f8 [Occ=Once!] ->
                                    case ipv3_sa8f8 of {
                                      __DEFAULT ->
                                          case
                                              GHC.IO.Handle.Internals.$wdo_operation
                                                  fun_sa8eD
                                                  wild_sa8eH
                                                  act_sa8eF
                                                  dt1_sa8f0
                                                  GHC.Prim.void#
                                          of
                                          { Unit# ipv5_sa8fc [Occ=Once] ->
                                                case
                                                    putMVar# [dt1_sa8f0 ipv5_sa8fc GHC.Prim.void#]
                                                of
                                                s2#_sa8fd
                                                { (##) -> Unit# [GHC.Tuple.()];
                                                };
                                          };
                                      0# ->
                                          let {
                                            sat_sa8fj [Occ=Once]
                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                            [LclId] =
                                                [fun_sa8eD
                                                 act_sa8eF
                                                 wild_sa8eH
                                                 dt1_sa8f0] \r [void_0E]
                                                    case
                                                        GHC.IO.Handle.Internals.$wdo_operation
                                                            fun_sa8eD
                                                            wild_sa8eH
                                                            act_sa8eF
                                                            dt1_sa8f0
                                                            GHC.Prim.void#
                                                    of
                                                    { Unit# ipv5_sa8fh [Occ=Once] ->
                                                          case
                                                              putMVar# [dt1_sa8f0
                                                                        ipv5_sa8fh
                                                                        GHC.Prim.void#]
                                                          of
                                                          s2#_sa8fi
                                                          { (##) -> Unit# [GHC.Tuple.()];
                                                          };
                                                    };
                                          } in  maskAsyncExceptions# [sat_sa8fj GHC.Prim.void#];
                                    };
                              };
                    } in 
                      case ipv1_sa8f3 of {
                        __DEFAULT ->
                            case
                                GHC.IO.Handle.Internals.$wdo_operation
                                    fun_sa8eD wild_sa8eH act_sa8eF dt_sa8eZ GHC.Prim.void#
                            of
                            { Unit# ipv3_sa8fn [Occ=Once] ->
                                  case putMVar# [dt_sa8eZ ipv3_sa8fn GHC.Prim.void#] of s2#_sa8fo {
                                    (##) -> $w$j_sa8f4 GHC.Prim.void#;
                                  };
                            };
                        0# ->
                            let {
                              sat_sa8fu [Occ=Once]
                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                              [LclId] =
                                  [fun_sa8eD act_sa8eF wild_sa8eH dt_sa8eZ] \r [void_0E]
                                      case
                                          GHC.IO.Handle.Internals.$wdo_operation
                                              fun_sa8eD wild_sa8eH act_sa8eF dt_sa8eZ GHC.Prim.void#
                                      of
                                      { Unit# ipv3_sa8fs [Occ=Once] ->
                                            case
                                                putMVar# [dt_sa8eZ ipv3_sa8fs GHC.Prim.void#]
                                            of
                                            s2#_sa8ft
                                            { (##) -> Unit# [GHC.Tuple.()];
                                            };
                                      };
                            } in 
                              case maskAsyncExceptions# [sat_sa8fu GHC.Prim.void#] of {
                                Unit# _ [Occ=Dead] -> $w$j_sa8f4 GHC.Prim.void#;
                              };
                      };
              };
        };

GHC.IO.Handle.Internals.withAllHandles__
  :: GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO GHC.IO.Handle.Types.Handle__)
     -> GHC.Types.IO ()
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.Internals.withAllHandles__1
            eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.$wwithHandle' [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.Prim.MVar# GHC.Prim.RealWorld GHC.IO.Handle.Types.Handle__
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=5,
 Str=<L,U><L,U><S,U><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sa8fy w1_sa8fz ww_sa8fA w2_sa8fB void_0E]
        case getMaskingState# [GHC.Prim.void#] of {
          Unit# ipv1_sa8fF [Occ=Once!] ->
              let {
                io_sa8fG [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                  :: GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_sa76a #)
                [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                    [w_sa8fy w1_sa8fz ww_sa8fA w2_sa8fB] \r [void_0E]
                        case
                            GHC.IO.Handle.Internals.$wdo_operation
                                w_sa8fy w1_sa8fz w2_sa8fB ww_sa8fA GHC.Prim.void#
                        of
                        { Unit# ipv3_sa8fK [Occ=Once!] ->
                              case ipv3_sa8fK of {
                                (,) h'_sa8fM [Occ=Once] v_sa8fN [Occ=Once] ->
                                    case putMVar# [ww_sa8fA h'_sa8fM GHC.Prim.void#] of s2#_sa8fO {
                                      (##) -> Unit# [v_sa8fN];
                                    };
                              };
                        };
              } in 
                case ipv1_sa8fF of {
                  __DEFAULT -> io_sa8fG GHC.Prim.void#;
                  0# -> maskAsyncExceptions# [io_sa8fG GHC.Prim.void#];
                };
        };

GHC.IO.Handle.Internals.withHandle1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=5,
 Str=<L,U><L,U><S(S),1*U(U)><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sa8fQ w1_sa8fR w2_sa8fS w3_sa8fT void_0E]
        case w2_sa8fS of {
          GHC.MVar.MVar ww1_sa8fW [Occ=Once] ->
              GHC.IO.Handle.Internals.$wwithHandle'
                  w_sa8fQ w1_sa8fR ww1_sa8fW w3_sa8fT GHC.Prim.void#;
        };

GHC.IO.Handle.Internals.withHandle'
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a))
     -> GHC.Types.IO a
[GblId,
 Arity=5,
 Str=<L,U><L,U><S(S),1*U(U)><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.Internals.withHandle1
            eta_B5 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.withHandle_'1
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=5,
 Str=<L,U><L,U><S(S),1*U(U)><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [fun_sa8fX h_sa8fY m_sa8fZ act_sa8g0 void_0E]
        case m_sa8fZ of {
          GHC.MVar.MVar ww1_sa8g3 [Occ=Once] ->
              let {
                sat_sa8ga [Occ=Once]
                  :: GHC.IO.Handle.Types.Handle__
                     -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a_aa4gi)
                [LclId] =
                    [act_sa8g0] \r [h__sa8g4 void_0E]
                        case act_sa8g0 h__sa8g4 GHC.Prim.void# of {
                          Unit# ipv1_sa8g8 [Occ=Once] ->
                              let {
                                sat_sa8g9 [Occ=Once] :: (GHC.IO.Handle.Types.Handle__, a_aa4gi)
                                [LclId] =
                                    CCCS (,)! [h__sa8g4 ipv1_sa8g8];
                              } in  Unit# [sat_sa8g9];
                        };
              } in 
                GHC.IO.Handle.Internals.$wwithHandle'
                    fun_sa8fX h_sa8fY ww1_sa8g3 sat_sa8ga GHC.Prim.void#;
        };

GHC.IO.Handle.Internals.withHandle_'
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Types.IO a
[GblId,
 Arity=5,
 Str=<L,U><L,U><S(S),1*U(U)><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.Internals.withHandle_'1
            eta_B5 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

withHandle_2_ra7PG
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [fun_sa8gb h_sa8gc act_sa8gd void_0E]
        case h_sa8gc of wild_sa8gf {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sa8gh ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sa8gk [Occ=Once!] ->
                    let {
                      io_sa8gl [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa4gx #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [fun_sa8gb act_sa8gd wild_sa8gf dt_sa8gh] \r [void_0E]
                              let {
                                sat_sa8gt [Occ=Once]
                                  :: GHC.IO.Handle.Types.Handle__
                                     -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a_aa4gx)
                                [LclId] =
                                    [act_sa8gd] \r [h__sa8gn void_0E]
                                        case act_sa8gd h__sa8gn GHC.Prim.void# of {
                                          Unit# ipv3_sa8gr [Occ=Once] ->
                                              let {
                                                sat_sa8gs [Occ=Once]
                                                  :: (GHC.IO.Handle.Types.Handle__, a_aa4gx)
                                                [LclId] =
                                                    CCCS (,)! [h__sa8gn ipv3_sa8gr];
                                              } in  Unit# [sat_sa8gs];
                                        };
                              } in 
                                case
                                    GHC.IO.Handle.Internals.$wdo_operation
                                        fun_sa8gb wild_sa8gf sat_sa8gt dt_sa8gh GHC.Prim.void#
                                of
                                { Unit# ipv3_sa8gw [Occ=Once!] ->
                                      case ipv3_sa8gw of {
                                        (,) h'_sa8gy [Occ=Once] v_sa8gz [Occ=Once] ->
                                            case
                                                putMVar# [dt_sa8gh h'_sa8gy GHC.Prim.void#]
                                            of
                                            s2#_sa8gA
                                            { (##) -> Unit# [v_sa8gz];
                                            };
                                      };
                                };
                    } in 
                      case ipv1_sa8gk of {
                        __DEFAULT -> io_sa8gl GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sa8gl GHC.Prim.void#];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sa8gD
                                           _ [Occ=Dead] ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sa8gH [Occ=Once!] ->
                    let {
                      io_sa8gI [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa4gx #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [fun_sa8gb act_sa8gd wild_sa8gf dt_sa8gD] \r [void_0E]
                              let {
                                sat_sa8gQ [Occ=Once]
                                  :: GHC.IO.Handle.Types.Handle__
                                     -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a_aa4gx)
                                [LclId] =
                                    [act_sa8gd] \r [h__sa8gK void_0E]
                                        case act_sa8gd h__sa8gK GHC.Prim.void# of {
                                          Unit# ipv3_sa8gO [Occ=Once] ->
                                              let {
                                                sat_sa8gP [Occ=Once]
                                                  :: (GHC.IO.Handle.Types.Handle__, a_aa4gx)
                                                [LclId] =
                                                    CCCS (,)! [h__sa8gK ipv3_sa8gO];
                                              } in  Unit# [sat_sa8gP];
                                        };
                              } in 
                                case
                                    GHC.IO.Handle.Internals.$wdo_operation
                                        fun_sa8gb wild_sa8gf sat_sa8gQ dt_sa8gD GHC.Prim.void#
                                of
                                { Unit# ipv3_sa8gT [Occ=Once!] ->
                                      case ipv3_sa8gT of {
                                        (,) h'_sa8gV [Occ=Once] v_sa8gW [Occ=Once] ->
                                            case
                                                putMVar# [dt_sa8gD h'_sa8gV GHC.Prim.void#]
                                            of
                                            s2#_sa8gX
                                            { (##) -> Unit# [v_sa8gW];
                                            };
                                      };
                                };
                    } in 
                      case ipv1_sa8gH of {
                        __DEFAULT -> io_sa8gI GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sa8gI GHC.Prim.void#];
                      };
              };
        };

GHC.IO.Handle.Internals.withHandle_ [InlPrag=INLINE (sat-args=3)]
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Types.IO a
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        withHandle_2_ra7PG eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.wantReadableHandle_1
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [fun_sa8gZ h_sa8h0 act_sa8h1 void_0E]
        case h_sa8h0 of wild_sa8h3 {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sa8h5 ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sa8h8 [Occ=Once!] ->
                    let {
                      io_sa8h9 [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa4gF #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [fun_sa8gZ act_sa8h1 wild_sa8h3 dt_sa8h5] \r [void_0E]
                              let {
                                sat_sa8hh [Occ=Once]
                                  :: GHC.IO.Handle.Types.Handle__
                                     -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a_aa4gF)
                                [LclId] =
                                    [act_sa8h1] \r [h__sa8hb void_0E]
                                        case
                                            GHC.IO.Handle.Internals.wantReadableHandle2
                                                act_sa8h1 h__sa8hb GHC.Prim.void#
                                        of
                                        { Unit# ipv3_sa8hf [Occ=Once] ->
                                              let {
                                                sat_sa8hg [Occ=Once]
                                                  :: (GHC.IO.Handle.Types.Handle__, a_aa4gF)
                                                [LclId] =
                                                    CCCS (,)! [h__sa8hb ipv3_sa8hf];
                                              } in  Unit# [sat_sa8hg];
                                        };
                              } in 
                                case
                                    GHC.IO.Handle.Internals.$wdo_operation
                                        fun_sa8gZ wild_sa8h3 sat_sa8hh dt_sa8h5 GHC.Prim.void#
                                of
                                { Unit# ipv3_sa8hk [Occ=Once!] ->
                                      case ipv3_sa8hk of {
                                        (,) h'_sa8hm [Occ=Once] v_sa8hn [Occ=Once] ->
                                            case
                                                putMVar# [dt_sa8h5 h'_sa8hm GHC.Prim.void#]
                                            of
                                            s2#_sa8ho
                                            { (##) -> Unit# [v_sa8hn];
                                            };
                                      };
                                };
                    } in 
                      case ipv1_sa8h8 of {
                        __DEFAULT -> io_sa8h9 GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sa8h9 GHC.Prim.void#];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sa8hr
                                           _ [Occ=Dead] ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sa8hv [Occ=Once!] ->
                    let {
                      io_sa8hw [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa4gF #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [fun_sa8gZ act_sa8h1 wild_sa8h3 dt_sa8hr] \r [void_0E]
                              let {
                                sat_sa8hE [Occ=Once]
                                  :: GHC.IO.Handle.Types.Handle__
                                     -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a_aa4gF)
                                [LclId] =
                                    [act_sa8h1] \r [h__sa8hy void_0E]
                                        case
                                            GHC.IO.Handle.Internals.wantReadableHandle2
                                                act_sa8h1 h__sa8hy GHC.Prim.void#
                                        of
                                        { Unit# ipv3_sa8hC [Occ=Once] ->
                                              let {
                                                sat_sa8hD [Occ=Once]
                                                  :: (GHC.IO.Handle.Types.Handle__, a_aa4gF)
                                                [LclId] =
                                                    CCCS (,)! [h__sa8hy ipv3_sa8hC];
                                              } in  Unit# [sat_sa8hD];
                                        };
                              } in 
                                case
                                    GHC.IO.Handle.Internals.$wdo_operation
                                        fun_sa8gZ wild_sa8h3 sat_sa8hE dt_sa8hr GHC.Prim.void#
                                of
                                { Unit# ipv3_sa8hH [Occ=Once!] ->
                                      case ipv3_sa8hH of {
                                        (,) h'_sa8hJ [Occ=Once] v_sa8hK [Occ=Once] ->
                                            case
                                                putMVar# [dt_sa8hr h'_sa8hJ GHC.Prim.void#]
                                            of
                                            s2#_sa8hL
                                            { (##) -> Unit# [v_sa8hK];
                                            };
                                      };
                                };
                    } in 
                      case ipv1_sa8hv of {
                        __DEFAULT -> io_sa8hw GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sa8hw GHC.Prim.void#];
                      };
              };
        };

GHC.IO.Handle.Internals.wantReadableHandle_
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Types.IO a
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.Internals.wantReadableHandle_1
            eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.wantSeekableHandle2
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=3, Str=<B,U><B,U><B,U>x, Unf=OtherCon []] =
    [] \r [fun_sa8hN h_sa8hO void_0E]
        let {
          sat_sa8hS [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [fun_sa8hN h_sa8hO] \u []
                  let {
                    sat_sa8hQ [Occ=Once] :: GHC.Base.Maybe GHC.IO.Handle.Types.Handle
                    [LclId] =
                        CCCS GHC.Base.Just! [h_sa8hO]; } in
                  let {
                    sat_sa8hR [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        CCCS GHC.IO.Exception.IOError! [sat_sa8hQ
                                                        GHC.IO.Exception.IllegalOperation
                                                        fun_sa8hN
                                                        GHC.IO.Handle.Internals.wantSeekableHandle5
                                                        GHC.Base.Nothing
                                                        GHC.Base.Nothing];
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sa8hR;
        } in  raiseIO# [sat_sa8hS GHC.Prim.void#];

GHC.IO.Handle.Internals.wantSeekableHandle1
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [fun_sa8hT h_sa8hU _act_sa8hV void_0E]
        case h_sa8hU of wild_sa8hX {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sa8hZ ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sa8i2 [Occ=Once!] ->
                    let {
                      io_sa8i3 [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa4gJ #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [fun_sa8hT _act_sa8hV wild_sa8hX dt_sa8hZ] \r [void_0E]
                              let {
                                sat_sa8iB [Occ=Once]
                                  :: GHC.IO.Handle.Types.Handle__
                                     -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a_aa4gJ)
                                [LclId] =
                                    [_act_sa8hV] \r [h__sa8i5 void_0E]
                                        case h__sa8i5 of wild1_sa8i7 {
                                          GHC.IO.Handle.Types.Handle__ $dIODevice_sa8i8 [Occ=Once]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       ds2_sa8ib [Occ=Once]
                                                                       ds3_sa8ic [Occ=Once!]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                              case ds3_sa8ic of {
                                                __DEFAULT ->
                                                    case
                                                        GHC.IO.Device.isSeekable
                                                            $dIODevice_sa8i8
                                                            ds2_sa8ib
                                                            GHC.Prim.void#
                                                    of
                                                    { Unit# ipv3_sa8ir [Occ=Once!] ->
                                                          case ipv3_sa8ir of {
                                                            GHC.Types.False ->
                                                                raiseIO# [GHC.IO.Handle.Internals.wantSeekableHandle3
                                                                          GHC.Prim.void#];
                                                            GHC.Types.True ->
                                                                case
                                                                    _act_sa8hV
                                                                        wild1_sa8i7 GHC.Prim.void#
                                                                of
                                                                { Unit# ipv5_sa8iw [Occ=Once] ->
                                                                      let {
                                                                        sat_sa8ix [Occ=Once]
                                                                          :: (GHC.IO.Handle.Types.Handle__,
                                                                              a_aa4gJ)
                                                                        [LclId] =
                                                                            CCCS (,)! [wild1_sa8i7
                                                                                       ipv5_sa8iw];
                                                                      } in  Unit# [sat_sa8ix];
                                                                };
                                                          };
                                                    };
                                                GHC.IO.Handle.Types.ClosedHandle ->
                                                    raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle11
                                                              GHC.Prim.void#];
                                                GHC.IO.Handle.Types.SemiClosedHandle ->
                                                    raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle7
                                                              GHC.Prim.void#];
                                                GHC.IO.Handle.Types.AppendHandle ->
                                                    raiseIO# [GHC.IO.Handle.Internals.wantSeekableHandle3
                                                              GHC.Prim.void#];
                                              };
                                        };
                              } in 
                                case
                                    GHC.IO.Handle.Internals.$wdo_operation
                                        fun_sa8hT wild_sa8hX sat_sa8iB dt_sa8hZ GHC.Prim.void#
                                of
                                { Unit# ipv3_sa8iE [Occ=Once!] ->
                                      case ipv3_sa8iE of {
                                        (,) h'_sa8iG [Occ=Once] v_sa8iH [Occ=Once] ->
                                            case
                                                putMVar# [dt_sa8hZ h'_sa8iG GHC.Prim.void#]
                                            of
                                            s2#_sa8iI
                                            { (##) -> Unit# [v_sa8iH];
                                            };
                                      };
                                };
                    } in 
                      case ipv1_sa8i2 of {
                        __DEFAULT -> io_sa8i3 GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sa8i3 GHC.Prim.void#];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              GHC.IO.Handle.Internals.wantSeekableHandle2
                  fun_sa8hT wild_sa8hX GHC.Prim.void#;
        };

GHC.IO.Handle.Internals.wantSeekableHandle
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Types.IO a
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.Internals.wantSeekableHandle1
            eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.$wwantWritableHandle' [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.Prim.MVar# GHC.Prim.RealWorld GHC.IO.Handle.Types.Handle__
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=5,
 Str=<L,U><L,U><S,U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sa8iN w1_sa8iO ww_sa8iP w2_sa8iQ void_0E]
        let {
          sat_sa8l6 [Occ=Once]
            :: GHC.IO.Handle.Types.Handle__
               -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a_sa76M)
          [LclId] =
              [w2_sa8iQ] \r [h__sa8iS void_0E]
                  case h__sa8iS of wild_sa8iU {
                    GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                                 $dBufferedIO_sa8iW [Occ=Once]
                                                 _ [Occ=Dead]
                                                 ds_sa8iY [Occ=Once]
                                                 ds1_sa8iZ [Occ=Once!]
                                                 dt_sa8j0
                                                 _ [Occ=Dead]
                                                 dt1_sa8j2 [Occ=Once]
                                                 dt2_sa8j3
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 ds4_sa8j6 [Occ=Once!]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead] ->
                        case ds1_sa8iZ of {
                          __DEFAULT ->
                              case w2_sa8iQ wild_sa8iU GHC.Prim.void# of {
                                Unit# ipv1_sa8je [Occ=Once] ->
                                    let {
                                      sat_sa8jf [Occ=Once]
                                        :: (GHC.IO.Handle.Types.Handle__, a_sa76M)
                                      [LclId] =
                                          CCCS (,)! [wild_sa8iU ipv1_sa8je];
                                    } in  Unit# [sat_sa8jf];
                              };
                          GHC.IO.Handle.Types.ClosedHandle ->
                              raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle11
                                        GHC.Prim.void#];
                          GHC.IO.Handle.Types.SemiClosedHandle ->
                              raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle7
                                        GHC.Prim.void#];
                          GHC.IO.Handle.Types.ReadHandle ->
                              raiseIO# [GHC.IO.Handle.Internals.wantWritableHandle2
                                        GHC.Prim.void#];
                          GHC.IO.Handle.Types.ReadWriteHandle ->
                              case readMutVar# [dt2_sa8j3 GHC.Prim.void#] of {
                                Unit# ipv1_sa8jl [Occ=Once!] ->
                                    case ipv1_sa8jl of {
                                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           ds10_sa8jp [Occ=Once!]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead] ->
                                          case ds10_sa8jp of {
                                            GHC.IO.Buffer.ReadBuffer ->
                                                case readMutVar# [dt2_sa8j3 GHC.Prim.void#] of {
                                                  Unit# ipv3_sa8jw [Occ=Once!] ->
                                                      case ipv3_sa8jw of {
                                                        GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                             _ [Occ=Dead]
                                                                             ds12_sa8jA [Occ=Once!]
                                                                             _ [Occ=Dead]
                                                                             dt12_sa8jC [Occ=Once]
                                                                             dt13_sa8jD [Occ=Once] ->
                                                            let-no-escape {
                                                              $w$j_sa8jE [InlPrag=NOUSERINLINE[0],
                                                                          Occ=Once*!T[1],
                                                                          Dmd=<L,1*C1(U)>]
                                                                :: GHC.Prim.State#
                                                                     GHC.Prim.RealWorld
                                                                   -> (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         (GHC.IO.Handle.Types.Handle__,
                                                                          a_sa76M) #)
                                                              [LclId[JoinId(1)],
                                                               Arity=1,
                                                               Str=<S,U>,
                                                               Unf=OtherCon []] =
                                                                  sat-only [w2_sa8iQ
                                                                            wild_sa8iU
                                                                            $dBufferedIO_sa8iW
                                                                            ds_sa8iY
                                                                            dt_sa8j0
                                                                            dt2_sa8j3] \r [void_0E]
                                                                      case
                                                                          GHC.IO.Handle.Internals.flushBuffer2
                                                                              wild_sa8iU
                                                                              GHC.Prim.void#
                                                                      of
                                                                      { Unit# _ [Occ=Dead] ->
                                                                            case
                                                                                readMutVar# [dt2_sa8j3
                                                                                             GHC.Prim.void#]
                                                                            of
                                                                            { Unit# ipv7_sa8jL [Occ=Once!] ->
                                                                                  let {
                                                                                    sat_sa8jT [Occ=Once]
                                                                                      :: GHC.IO.Buffer.Buffer
                                                                                           GHC.IO.Buffer.CharBufElem
                                                                                    [LclId] =
                                                                                        [ipv7_sa8jL] \u []
                                                                                            case
                                                                                                ipv7_sa8jL
                                                                                            of
                                                                                            { GHC.IO.Buffer.Buffer dt14_sa8jN [Occ=Once]
                                                                                                                   dt15_sa8jO [Occ=Once]
                                                                                                                   _ [Occ=Dead]
                                                                                                                   dt16_sa8jQ [Occ=Once]
                                                                                                                   dt17_sa8jR [Occ=Once]
                                                                                                                   dt18_sa8jS [Occ=Once] ->
                                                                                                  GHC.IO.Buffer.Buffer [dt14_sa8jN
                                                                                                                        dt15_sa8jO
                                                                                                                        GHC.IO.Buffer.WriteBuffer
                                                                                                                        dt16_sa8jQ
                                                                                                                        dt17_sa8jR
                                                                                                                        dt18_sa8jS];
                                                                                            };
                                                                                  } in 
                                                                                    case
                                                                                        writeMutVar# [dt2_sa8j3
                                                                                                      sat_sa8jT
                                                                                                      GHC.Prim.void#]
                                                                                    of
                                                                                    s2#_sa8jU
                                                                                    { (##) ->
                                                                                          case
                                                                                              readMutVar# [dt_sa8j0
                                                                                                           GHC.Prim.void#]
                                                                                          of
                                                                                          { Unit# ipv9_sa8jX [Occ=Once] ->
                                                                                                case
                                                                                                    GHC.IO.BufferedIO.emptyWriteBuffer
                                                                                                        $dBufferedIO_sa8iW
                                                                                                        ds_sa8iY
                                                                                                        ipv9_sa8jX
                                                                                                        GHC.Prim.void#
                                                                                                of
                                                                                                { Unit# ipv11_sa8k0 [Occ=Once] ->
                                                                                                      case
                                                                                                          writeMutVar# [dt_sa8j0
                                                                                                                        ipv11_sa8k0
                                                                                                                        GHC.Prim.void#]
                                                                                                      of
                                                                                                      s2#1_sa8k1
                                                                                                      { (##) ->
                                                                                                            case
                                                                                                                w2_sa8iQ
                                                                                                                    wild_sa8iU
                                                                                                                    GHC.Prim.void#
                                                                                                            of
                                                                                                            { Unit# ipv13_sa8k4 [Occ=Once] ->
                                                                                                                  let {
                                                                                                                    sat_sa8k5 [Occ=Once]
                                                                                                                      :: (GHC.IO.Handle.Types.Handle__,
                                                                                                                          a_sa76M)
                                                                                                                    [LclId] =
                                                                                                                        CCCS (,)! [wild_sa8iU
                                                                                                                                   ipv13_sa8k4];
                                                                                                                  } in 
                                                                                                                    Unit# [sat_sa8k5];
                                                                                                            };
                                                                                                      };
                                                                                                };
                                                                                          };
                                                                                    };
                                                                            };
                                                                      };
                                                            } in 
                                                              case ds12_sa8jA of {
                                                                GHC.IO.Buffer.ReadBuffer ->
                                                                    case
                                                                        ==# [dt12_sa8jC dt13_sa8jD]
                                                                    of
                                                                    { __DEFAULT ->
                                                                          case
                                                                              readMutVar# [dt1_sa8j2
                                                                                           GHC.Prim.void#]
                                                                          of
                                                                          { Unit# ipv5_sa8ka [Occ=Once!] ->
                                                                                case ipv5_sa8ka of {
                                                                                  (,) codec_state_sa8kc [Occ=Once]
                                                                                      bbuf0_sa8kd [Occ=Once*] ->
                                                                                      case
                                                                                          readMutVar# [dt2_sa8j3
                                                                                                       GHC.Prim.void#]
                                                                                      of
                                                                                      { Unit# ipv7_sa8kg ->
                                                                                            let {
                                                                                              sat_sa8ko [Occ=Once]
                                                                                                :: GHC.IO.Buffer.Buffer
                                                                                                     GHC.IO.Buffer.CharBufElem
                                                                                              [LclId] =
                                                                                                  [ipv7_sa8kg] \u []
                                                                                                      case
                                                                                                          ipv7_sa8kg
                                                                                                      of
                                                                                                      { GHC.IO.Buffer.Buffer dt14_sa8ki [Occ=Once]
                                                                                                                             dt15_sa8kj [Occ=Once]
                                                                                                                             ds15_sa8kk [Occ=Once]
                                                                                                                             dt16_sa8kl [Occ=Once]
                                                                                                                             _ [Occ=Dead]
                                                                                                                             _ [Occ=Dead] ->
                                                                                                            GHC.IO.Buffer.Buffer [dt14_sa8ki
                                                                                                                                  dt15_sa8kj
                                                                                                                                  ds15_sa8kk
                                                                                                                                  dt16_sa8kl
                                                                                                                                  0#
                                                                                                                                  0#];
                                                                                                      };
                                                                                            } in 
                                                                                              case
                                                                                                  writeMutVar# [dt2_sa8j3
                                                                                                                sat_sa8ko
                                                                                                                GHC.Prim.void#]
                                                                                              of
                                                                                              s2#_sa8kp
                                                                                              { (##) ->
                                                                                                    case
                                                                                                        ipv7_sa8kg
                                                                                                    of
                                                                                                    { GHC.IO.Buffer.Buffer dt14_sa8kr [Occ=Once]
                                                                                                                           dt15_sa8ks [Occ=Once]
                                                                                                                           ds15_sa8kt [Occ=Once]
                                                                                                                           _ [Occ=Dead]
                                                                                                                           dt17_sa8kv [Occ=Once!]
                                                                                                                           _ [Occ=Dead] ->
                                                                                                          case
                                                                                                              dt17_sa8kv
                                                                                                          of
                                                                                                          wild8_sa8kx
                                                                                                          { __DEFAULT ->
                                                                                                                case
                                                                                                                    ds4_sa8j6
                                                                                                                of
                                                                                                                { GHC.Base.Nothing ->
                                                                                                                      let {
                                                                                                                        sat_sa8kH [Occ=Once]
                                                                                                                          :: GHC.IO.Buffer.Buffer
                                                                                                                               GHC.Word.Word8
                                                                                                                        [LclId] =
                                                                                                                            [bbuf0_sa8kd
                                                                                                                             wild8_sa8kx] \u []
                                                                                                                                case
                                                                                                                                    bbuf0_sa8kd
                                                                                                                                of
                                                                                                                                { GHC.IO.Buffer.Buffer dt19_sa8kA [Occ=Once]
                                                                                                                                                       dt20_sa8kB [Occ=Once]
                                                                                                                                                       ds16_sa8kC [Occ=Once]
                                                                                                                                                       dt21_sa8kD [Occ=Once]
                                                                                                                                                       dt22_sa8kE [Occ=Once]
                                                                                                                                                       dt23_sa8kF [Occ=Once] ->
                                                                                                                                      case
                                                                                                                                          +# [dt22_sa8kE
                                                                                                                                              wild8_sa8kx]
                                                                                                                                      of
                                                                                                                                      sat_sa8kG
                                                                                                                                      { __DEFAULT ->
                                                                                                                                            GHC.IO.Buffer.Buffer [dt19_sa8kA
                                                                                                                                                                  dt20_sa8kB
                                                                                                                                                                  ds16_sa8kC
                                                                                                                                                                  dt21_sa8kD
                                                                                                                                                                  sat_sa8kG
                                                                                                                                                                  dt23_sa8kF];
                                                                                                                                      };
                                                                                                                                };
                                                                                                                      } in 
                                                                                                                        case
                                                                                                                            writeMutVar# [dt_sa8j0
                                                                                                                                          sat_sa8kH
                                                                                                                                          GHC.Prim.void#]
                                                                                                                        of
                                                                                                                        s2#1_sa8kI
                                                                                                                        { (##) ->
                                                                                                                              $w$j_sa8jE
                                                                                                                                  GHC.Prim.void#;
                                                                                                                        };
                                                                                                                  GHC.Base.Just decoder_sa8kJ [Occ=Once!] ->
                                                                                                                      case
                                                                                                                          decoder_sa8kJ
                                                                                                                      of
                                                                                                                      { GHC.IO.Encoding.Types.BufferCodec ds16_sa8kL [Occ=Once]
                                                                                                                                                          ds17_sa8kM [Occ=Once]
                                                                                                                                                          _ [Occ=Dead]
                                                                                                                                                          _ [Occ=Dead]
                                                                                                                                                          ds20_sa8kP [Occ=Once!] ->
                                                                                                                            case
                                                                                                                                ds20_sa8kP
                                                                                                                                    codec_state_sa8kc
                                                                                                                                    GHC.Prim.void#
                                                                                                                            of
                                                                                                                            { Unit# _ [Occ=Dead] ->
                                                                                                                                  let {
                                                                                                                                    sat_sa8kT [Occ=Once]
                                                                                                                                      :: GHC.IO.Buffer.Buffer
                                                                                                                                           GHC.IO.Buffer.CharBufElem
                                                                                                                                    [LclId] =
                                                                                                                                        CCCS GHC.IO.Buffer.Buffer! [dt14_sa8kr
                                                                                                                                                                    dt15_sa8ks
                                                                                                                                                                    ds15_sa8kt
                                                                                                                                                                    wild8_sa8kx
                                                                                                                                                                    0#
                                                                                                                                                                    0#];
                                                                                                                                  } in 
                                                                                                                                    case
                                                                                                                                        GHC.IO.Handle.Internals.$wstreamEncode
                                                                                                                                            ds16_sa8kL
                                                                                                                                            ds17_sa8kM
                                                                                                                                            bbuf0_sa8kd
                                                                                                                                            sat_sa8kT
                                                                                                                                            GHC.Prim.void#
                                                                                                                                    of
                                                                                                                                    { Unit# ipv11_sa8kW [Occ=Once!] ->
                                                                                                                                          case
                                                                                                                                              ipv11_sa8kW
                                                                                                                                          of
                                                                                                                                          { (,) bbuf1_sa8kY [Occ=Once]
                                                                                                                                                _ [Occ=Dead] ->
                                                                                                                                                case
                                                                                                                                                    writeMutVar# [dt_sa8j0
                                                                                                                                                                  bbuf1_sa8kY
                                                                                                                                                                  GHC.Prim.void#]
                                                                                                                                                of
                                                                                                                                                s2#1_sa8l0
                                                                                                                                                { (##) ->
                                                                                                                                                      $w$j_sa8jE
                                                                                                                                                          GHC.Prim.void#;
                                                                                                                                                };
                                                                                                                                          };
                                                                                                                                    };
                                                                                                                            };
                                                                                                                      };
                                                                                                                };
                                                                                                            0# ->
                                                                                                                case
                                                                                                                    writeMutVar# [dt_sa8j0
                                                                                                                                  bbuf0_sa8kd
                                                                                                                                  GHC.Prim.void#]
                                                                                                                of
                                                                                                                s2#1_sa8l1
                                                                                                                { (##) ->
                                                                                                                      $w$j_sa8jE
                                                                                                                          GHC.Prim.void#;
                                                                                                                };
                                                                                                          };
                                                                                                    };
                                                                                              };
                                                                                      };
                                                                                };
                                                                          };
                                                                      1# ->
                                                                          $w$j_sa8jE GHC.Prim.void#;
                                                                    };
                                                                GHC.IO.Buffer.WriteBuffer ->
                                                                    $w$j_sa8jE GHC.Prim.void#;
                                                              };
                                                      };
                                                };
                                            GHC.IO.Buffer.WriteBuffer ->
                                                case w2_sa8iQ wild_sa8iU GHC.Prim.void# of {
                                                  Unit# ipv3_sa8l4 [Occ=Once] ->
                                                      let {
                                                        sat_sa8l5 [Occ=Once]
                                                          :: (GHC.IO.Handle.Types.Handle__, a_sa76M)
                                                        [LclId] =
                                                            CCCS (,)! [wild_sa8iU ipv3_sa8l4];
                                                      } in  Unit# [sat_sa8l5];
                                                };
                                          };
                                    };
                              };
                        };
                  };
        } in 
          GHC.IO.Handle.Internals.$wwithHandle'
              w_sa8iN w1_sa8iO ww_sa8iP sat_sa8l6 GHC.Prim.void#;

GHC.IO.Handle.Internals.wantWritableHandle1
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [fun_sa8l7 h_sa8l8 act_sa8l9 void_0E]
        case h_sa8l8 of wild_sa8lb {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sa8ld [Occ=Once] ->
              GHC.IO.Handle.Internals.$wwantWritableHandle'
                  fun_sa8l7 wild_sa8lb dt_sa8ld act_sa8l9 GHC.Prim.void#;
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           dt1_sa8lg [Occ=Once] ->
              GHC.IO.Handle.Internals.$wwantWritableHandle'
                  fun_sa8l7 wild_sa8lb dt1_sa8lg act_sa8l9 GHC.Prim.void#;
        };

GHC.IO.Handle.Internals.wantWritableHandle
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Types.IO a
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.Internals.wantWritableHandle1
            eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

withHandle2_ra7PH
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [fun_sa8lh h_sa8li act_sa8lj void_0E]
        case h_sa8li of wild_sa8ll {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sa8ln ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sa8lq [Occ=Once!] ->
                    let {
                      io_sa8lr [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa4gR #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [fun_sa8lh act_sa8lj wild_sa8ll dt_sa8ln] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      fun_sa8lh wild_sa8ll act_sa8lj dt_sa8ln GHC.Prim.void#
                              of
                              { Unit# ipv3_sa8lv [Occ=Once!] ->
                                    case ipv3_sa8lv of {
                                      (,) h'_sa8lx [Occ=Once] v_sa8ly [Occ=Once] ->
                                          case
                                              putMVar# [dt_sa8ln h'_sa8lx GHC.Prim.void#]
                                          of
                                          s2#_sa8lz
                                          { (##) -> Unit# [v_sa8ly];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sa8lq of {
                        __DEFAULT -> io_sa8lr GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sa8lr GHC.Prim.void#];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sa8lC
                                           _ [Occ=Dead] ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sa8lG [Occ=Once!] ->
                    let {
                      io_sa8lH [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa4gR #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [fun_sa8lh act_sa8lj wild_sa8ll dt_sa8lC] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      fun_sa8lh wild_sa8ll act_sa8lj dt_sa8lC GHC.Prim.void#
                              of
                              { Unit# ipv3_sa8lL [Occ=Once!] ->
                                    case ipv3_sa8lL of {
                                      (,) h'_sa8lN [Occ=Once] v_sa8lO [Occ=Once] ->
                                          case
                                              putMVar# [dt_sa8lC h'_sa8lN GHC.Prim.void#]
                                          of
                                          s2#_sa8lP
                                          { (##) -> Unit# [v_sa8lO];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sa8lG of {
                        __DEFAULT -> io_sa8lH GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sa8lH GHC.Prim.void#];
                      };
              };
        };

GHC.IO.Handle.Internals.withHandle [InlPrag=INLINE (sat-args=3)]
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a))
     -> GHC.Types.IO a
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        withHandle2_ra7PH eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.wantReadableHandle1
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [fun_sa8lR h_sa8lS act_sa8lT void_0E]
        case h_sa8lS of wild_sa8lV {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sa8lX ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sa8m0 [Occ=Once!] ->
                    let {
                      io_sa8m1 [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa4gV #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [fun_sa8lR act_sa8lT wild_sa8lV dt_sa8lX] \r [void_0E]
                              let {
                                sat_sa8m3 [Occ=Once]
                                  :: GHC.IO.Handle.Types.Handle__
                                     -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a_aa4gV)
                                [LclId] =
                                    [act_sa8lT] \r [eta_B2 void_0E]
                                        GHC.IO.Handle.Internals.wantReadableHandle2
                                            act_sa8lT eta_B2 GHC.Prim.void#;
                              } in 
                                case
                                    GHC.IO.Handle.Internals.$wdo_operation
                                        fun_sa8lR wild_sa8lV sat_sa8m3 dt_sa8lX GHC.Prim.void#
                                of
                                { Unit# ipv3_sa8m6 [Occ=Once!] ->
                                      case ipv3_sa8m6 of {
                                        (,) h'_sa8m8 [Occ=Once] v_sa8m9 [Occ=Once] ->
                                            case
                                                putMVar# [dt_sa8lX h'_sa8m8 GHC.Prim.void#]
                                            of
                                            s2#_sa8ma
                                            { (##) -> Unit# [v_sa8m9];
                                            };
                                      };
                                };
                    } in 
                      case ipv1_sa8m0 of {
                        __DEFAULT -> io_sa8m1 GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sa8m1 GHC.Prim.void#];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sa8md
                                           _ [Occ=Dead] ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sa8mh [Occ=Once!] ->
                    let {
                      io_sa8mi [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa4gV #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [fun_sa8lR act_sa8lT wild_sa8lV dt_sa8md] \r [void_0E]
                              let {
                                sat_sa8mk [Occ=Once]
                                  :: GHC.IO.Handle.Types.Handle__
                                     -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a_aa4gV)
                                [LclId] =
                                    [act_sa8lT] \r [eta_B2 void_0E]
                                        GHC.IO.Handle.Internals.wantReadableHandle2
                                            act_sa8lT eta_B2 GHC.Prim.void#;
                              } in 
                                case
                                    GHC.IO.Handle.Internals.$wdo_operation
                                        fun_sa8lR wild_sa8lV sat_sa8mk dt_sa8md GHC.Prim.void#
                                of
                                { Unit# ipv3_sa8mn [Occ=Once!] ->
                                      case ipv3_sa8mn of {
                                        (,) h'_sa8mp [Occ=Once] v_sa8mq [Occ=Once] ->
                                            case
                                                putMVar# [dt_sa8md h'_sa8mp GHC.Prim.void#]
                                            of
                                            s2#_sa8mr
                                            { (##) -> Unit# [v_sa8mq];
                                            };
                                      };
                                };
                    } in 
                      case ipv1_sa8mh of {
                        __DEFAULT -> io_sa8mi GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sa8mi GHC.Prim.void#];
                      };
              };
        };

GHC.IO.Handle.Internals.wantReadableHandle
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a))
     -> GHC.Types.IO a
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.Internals.wantReadableHandle1
            eta_B4 eta_B3 eta_B2 GHC.Prim.void#;


==================== Pre unarise: ====================
2018-03-16 16:05:15.038143434 UTC

GHC.IO.Handle.Internals.augmentIOError
  :: GHC.IO.Exception.IOException
     -> GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.IO.Exception.IOException
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,1*U(A,U,A,U,U,1*U)><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [ioe_sacFo fun_sacFp h_sacFq]
        case ioe_sacFo of {
          GHC.IO.Exception.IOError _ [Occ=Dead]
                                   ds1_sacFt [Occ=Once]
                                   _ [Occ=Dead]
                                   ds3_sacFv [Occ=Once]
                                   ds4_sacFw [Occ=Once]
                                   ds5_sacFx [Occ=Once!] ->
              let {
                sat_sacFH [Occ=Once] :: GHC.Base.Maybe GHC.IO.FilePath
                [LclId] =
                    [h_sacFq ds5_sacFx] \u []
                        case ds5_sacFx of wild1_sacFz {
                          GHC.Base.Nothing ->
                              case h_sacFq of {
                                GHC.IO.Handle.Types.FileHandle path_sacFB [Occ=Once]
                                                               _ [Occ=Dead] ->
                                    GHC.Base.Just [path_sacFB];
                                GHC.IO.Handle.Types.DuplexHandle path_sacFD [Occ=Once]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead] ->
                                    GHC.Base.Just [path_sacFD];
                              };
                          GHC.Base.Just _ [Occ=Dead] -> wild1_sacFz;
                        }; } in
              let {
                sat_sacFy [Occ=Once] :: GHC.Base.Maybe GHC.IO.Handle.Types.Handle
                [LclId] =
                    CCCS GHC.Base.Just! [h_sacFq];
              } in 
                GHC.IO.Exception.IOError [sat_sacFy
                                          ds1_sacFt
                                          fun_sacFp
                                          ds3_sacFv
                                          ds4_sacFw
                                          sat_sacFH];
        };

GHC.IO.Handle.Internals.wantReadableHandle14 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "handle is closed"#;

GHC.IO.Handle.Internals.wantReadableHandle13 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Handle.Internals.wantReadableHandle14;

GHC.IO.Handle.Internals.wantReadableHandle12
  :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.IllegalOperation
                                             GHC.Types.[]
                                             GHC.IO.Handle.Internals.wantReadableHandle13
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Handle.Internals.wantReadableHandle11
  :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Handle.Internals.wantReadableHandle12;

GHC.IO.Handle.Internals.ioe_closedHandle1
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_sacFI]
        raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle11 eta_sacFI];

ioe_closedHandle2_ra7Pb
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_sacFJ]
        raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle11 eta_sacFJ];

GHC.IO.Handle.Internals.ioe_closedHandle
  :: forall a. GHC.Types.IO a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_B1] ioe_closedHandle2_ra7Pb eta_B1;

GHC.IO.Handle.Internals.wantReadableHandle10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "handle is semi-closed"#;

GHC.IO.Handle.Internals.wantReadableHandle9 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Handle.Internals.wantReadableHandle10;

GHC.IO.Handle.Internals.wantReadableHandle8
  :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.IllegalOperation
                                             GHC.Types.[]
                                             GHC.IO.Handle.Internals.wantReadableHandle9
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Handle.Internals.wantReadableHandle7
  :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Handle.Internals.wantReadableHandle8;

GHC.IO.Handle.Internals.ioe_semiclosedHandle1
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_sacFK]
        raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle7 eta_sacFK];

ioe_semiclosedHandle2_ra7Pc
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_sacFL]
        raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle7 eta_sacFL];

GHC.IO.Handle.Internals.ioe_semiclosedHandle
  :: forall a. GHC.Types.IO a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_B1] ioe_semiclosedHandle2_ra7Pc eta_B1;

GHC.IO.Handle.Internals.hLookAhead_4
  :: GHC.IO.Exception.IOException
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.EOF
                                             GHC.Types.[]
                                             GHC.Types.[]
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Handle.Internals.hLookAhead_3 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Handle.Internals.hLookAhead_4;

GHC.IO.Handle.Internals.ioe_EOF1
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_sacFM]
        raiseIO# [GHC.IO.Handle.Internals.hLookAhead_3 eta_sacFM];

ioe_EOF2_ra7Pd
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_sacFN]
        raiseIO# [GHC.IO.Handle.Internals.hLookAhead_3 eta_sacFN];

GHC.IO.Handle.Internals.ioe_EOF :: forall a. GHC.Types.IO a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_B1] ioe_EOF2_ra7Pd eta_B1;

GHC.IO.Handle.Internals.wantReadableHandle6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "handle is not open for reading"#;

GHC.IO.Handle.Internals.wantReadableHandle5 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Handle.Internals.wantReadableHandle6;

GHC.IO.Handle.Internals.wantReadableHandle4
  :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.IllegalOperation
                                             GHC.Types.[]
                                             GHC.IO.Handle.Internals.wantReadableHandle5
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Handle.Internals.wantReadableHandle3
  :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Handle.Internals.wantReadableHandle4;

GHC.IO.Handle.Internals.ioe_notReadable1
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_sacFO]
        raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle3 eta_sacFO];

ioe_notReadable2_ra7Pe
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_sacFP]
        raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle3 eta_sacFP];

GHC.IO.Handle.Internals.ioe_notReadable :: forall a. GHC.Types.IO a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_B1] ioe_notReadable2_ra7Pe eta_B1;

GHC.IO.Handle.Internals.wantWritableHandle5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "handle is not open for writing"#;

GHC.IO.Handle.Internals.wantWritableHandle4 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Handle.Internals.wantWritableHandle5;

GHC.IO.Handle.Internals.wantWritableHandle3
  :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.IllegalOperation
                                             GHC.Types.[]
                                             GHC.IO.Handle.Internals.wantWritableHandle4
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Handle.Internals.wantWritableHandle2
  :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Handle.Internals.wantWritableHandle3;

GHC.IO.Handle.Internals.ioe_notWritable1
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_sacFQ]
        raiseIO# [GHC.IO.Handle.Internals.wantWritableHandle2 eta_sacFQ];

ioe_notWritable2_ra7Pf
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_sacFR]
        raiseIO# [GHC.IO.Handle.Internals.wantWritableHandle2 eta_sacFR];

GHC.IO.Handle.Internals.ioe_notWritable :: forall a. GHC.Types.IO a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_B1] ioe_notWritable2_ra7Pf eta_B1;

GHC.IO.Handle.Internals.wantSeekableHandle6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "handle is not seekable"#;

GHC.IO.Handle.Internals.wantSeekableHandle5 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Handle.Internals.wantSeekableHandle6;

GHC.IO.Handle.Internals.wantSeekableHandle4
  :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.IllegalOperation
                                             GHC.Types.[]
                                             GHC.IO.Handle.Internals.wantSeekableHandle5
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Handle.Internals.wantSeekableHandle3
  :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Handle.Internals.wantSeekableHandle4;

GHC.IO.Handle.Internals.flushBuffer6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "cannot flush the read buffer: underlying device is not seekable"#;

GHC.IO.Handle.Internals.flushBuffer5 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Internals.flushBuffer6;

GHC.IO.Handle.Internals.flushBuffer4
  :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.IllegalOperation
                                             GHC.Types.[]
                                             GHC.IO.Handle.Internals.flushBuffer5
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Handle.Internals.flushBuffer3 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Handle.Internals.flushBuffer4;

lvl_ra7Pg :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hSetBuffering"#;

lvl1_ra7Ph :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl_ra7Pg;

lvl2_ra7Pi :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "illegal buffer size "#;

GHC.IO.Handle.Internals.$wioe_bufsiz [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    [] \r [ww_sacFS w_sacFT]
        let {
          sat_sacG0 [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [ww_sacFS] \u []
                  let {
                    sat_sacFY [Occ=Once] :: GHC.Base.String
                    [LclId] =
                        [ww_sacFS] \u []
                            let {
                              sat_sacFX [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [ww_sacFS] \u []
                                      case GHC.Show.$wshowSignedInt 9# ww_sacFS GHC.Types.[] of {
                                        (#,#) ww5_sacFV [Occ=Once] ww6_sacFW [Occ=Once] ->
                                            : [ww5_sacFV ww6_sacFW];
                                      };
                            } in  GHC.CString.unpackAppendCString# lvl2_ra7Pi sat_sacFX; } in
                  let {
                    sat_sacFZ [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        CCCS GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                                        GHC.IO.Exception.InvalidArgument
                                                        lvl1_ra7Ph
                                                        sat_sacFY
                                                        GHC.Base.Nothing
                                                        GHC.Base.Nothing];
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sacFZ;
        } in  raiseIO# [sat_sacG0 w_sacFT];

GHC.IO.Handle.Internals.ioe_bufsiz1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<B,1*U(U)><B,U>x, Unf=OtherCon []] =
    [] \r [w_sacG1 w1_sacG2]
        case w_sacG1 of {
          GHC.Types.I# ww1_sacG4 [Occ=Once] ->
              GHC.IO.Handle.Internals.$wioe_bufsiz ww1_sacG4 w1_sacG2;
        };

GHC.IO.Handle.Internals.ioe_bufsiz
  :: forall a. GHC.Types.Int -> GHC.Types.IO a
[GblId, Arity=2, Str=<B,1*U(U)><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.IO.Handle.Internals.ioe_bufsiz1 eta_B2 eta_B1;

GHC.IO.Handle.Internals.$wstreamEncode [InlPrag=NOUSERINLINE[0]]
  :: forall from to state.
     GHC.IO.Encoding.Types.CodeBuffer from to
     -> (GHC.IO.Buffer.Buffer from
         -> GHC.IO.Buffer.Buffer to
         -> GHC.Types.IO
              (GHC.IO.Buffer.Buffer from, GHC.IO.Buffer.Buffer to))
     -> GHC.IO.Buffer.Buffer from
     -> GHC.IO.Buffer.Buffer to
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Buffer.Buffer from, GHC.IO.Buffer.Buffer to) #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<C(C(C(S(SS(SLL))))),C(C1(C1(U(U,1*U(1*U,U(U,U,U,U,U,U),U)))))><L,C(C1(C1(U(U,1*U(U(U,U,U,U,U,U),U)))))><L,U(U,U,U,U,U,U)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_sacG5 ww1_sacG6 w_sacG7 w1_sacG8 w2_sacG9]
        let-no-escape {
          go_sacGa [Occ=LoopBreakerT[3]]
            :: GHC.IO.Buffer.Buffer from_sa738
               -> GHC.IO.Buffer.Buffer to_sa739
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     (GHC.IO.Buffer.Buffer from_sa738, GHC.IO.Buffer.Buffer to_sa739) #)
          [LclId[JoinId(3)],
           Arity=3,
           Str=<L,U(U,U,U,U,U,U)><L,U><S,U>,
           Unf=OtherCon []] =
              sat-only [ww_sacG5 ww1_sacG6 go_sacGa] \r [from1_sacGb
                                                         to1_sacGc
                                                         s_sacGd]
                  case ww_sacG5 from1_sacGb to1_sacGc s_sacGd of {
                    (#,#) ipv_sacGf [Occ=Once*] ipv1_sacGg [Occ=Once!] ->
                        case ipv1_sacGg of {
                          (,,) why_sacGi [Occ=Once!]
                               from'_sacGj [Occ=Once*]
                               to'_sacGk [Occ=Once*] ->
                              case why_sacGi of {
                                __DEFAULT ->
                                    let {
                                      sat_sacGm [Occ=Once]
                                        :: (GHC.IO.Buffer.Buffer from_sa738,
                                            GHC.IO.Buffer.Buffer to_sa739)
                                      [LclId] =
                                          CCCS (,)! [from'_sacGj to'_sacGk];
                                    } in  (#,#) [ipv_sacGf sat_sacGm];
                                GHC.IO.Encoding.Types.InvalidSequence ->
                                    case from1_sacGb of {
                                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           dt3_sacGs [Occ=Once]
                                                           _ [Occ=Dead] ->
                                          case from'_sacGj of wild3_sacGu {
                                            GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 dt10_sacGz [Occ=Once]
                                                                 _ [Occ=Dead] ->
                                                case ==# [dt3_sacGs dt10_sacGz] of {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_sacGC [Occ=Once]
                                                          :: (GHC.IO.Buffer.Buffer from_sa738,
                                                              GHC.IO.Buffer.Buffer to_sa739)
                                                        [LclId] =
                                                            CCCS (,)! [wild3_sacGu to'_sacGk];
                                                      } in  (#,#) [ipv_sacGf sat_sacGC];
                                                  1# ->
                                                      case
                                                          ww1_sacG6 wild3_sacGu to'_sacGk ipv_sacGf
                                                      of
                                                      { (#,#) ipv2_sacGE [Occ=Once]
                                                              ipv3_sacGF [Occ=Once!] ->
                                                            case ipv3_sacGF of {
                                                              (,) from'1_sacGH [Occ=Once]
                                                                  to'1_sacGI [Occ=Once] ->
                                                                  go_sacGa
                                                                      from'1_sacGH
                                                                      to'1_sacGI
                                                                      ipv2_sacGE;
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
                  };
        } in  go_sacGa w_sacG7 w1_sacG8 w2_sacG9;

GHC.IO.Handle.Internals.dEFAULT_CHAR_BUFFER_SIZE :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [2048#];

GHC.IO.Handle.Internals.initBufferState
  :: GHC.IO.Handle.Types.HandleType -> GHC.IO.Buffer.BufferState
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_sacGJ]
        case ds_sacGJ of {
          __DEFAULT -> GHC.IO.Buffer.WriteBuffer [];
          GHC.IO.Handle.Types.ReadHandle -> GHC.IO.Buffer.ReadBuffer [];
        };

lvl3_ra7Pj
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Buffer.CharBuffer #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [s_sacGL]
        case noDuplicate# [s_sacGL] of s'_sacGM {
          __DEFAULT ->
              case newMutVar# [GHC.ForeignPtr.NoFinalizers s'_sacGM] of {
                (#,#) ipv_sacGO [Occ=Once] ipv1_sacGP [Occ=Once] ->
                    case newPinnedByteArray# [4# ipv_sacGO] of {
                      (#,#) ipv2_sacGR [Occ=Once] ipv3_sacGS ->
                          let {
                            sat_sacGU [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                            [LclId] =
                                CCCS GHC.ForeignPtr.MallocPtr! [ipv3_sacGS ipv1_sacGP];
                          } in 
                            case byteArrayContents# [ipv3_sacGS] of sat_sacGT {
                              __DEFAULT ->
                                  let {
                                    sat_sacGV [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                    [LclId] =
                                        CCCS GHC.IO.Buffer.Buffer! [sat_sacGT
                                                                    sat_sacGU
                                                                    GHC.IO.Buffer.ReadBuffer
                                                                    1#
                                                                    0#
                                                                    0#];
                                  } in  (#,#) [ipv2_sacGR sat_sacGV];
                            };
                    };
              };
        };

GHC.IO.Handle.Internals.noCharBuffer [InlPrag=NOINLINE]
  :: GHC.IO.Buffer.CharBuffer
[GblId] =
    [] \u []
        case lvl3_ra7Pj GHC.Prim.realWorld# of {
          (#,#) _ [Occ=Dead] ipv1_sacGY [Occ=Once] -> ipv1_sacGY;
        };

lvl4_ra7Pk
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Buffer.Buffer GHC.Word.Word8 #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [s_sacGZ]
        case noDuplicate# [s_sacGZ] of s'_sacH0 {
          __DEFAULT ->
              case newMutVar# [GHC.ForeignPtr.NoFinalizers s'_sacH0] of {
                (#,#) ipv_sacH2 [Occ=Once] ipv1_sacH3 [Occ=Once] ->
                    case newPinnedByteArray# [1# ipv_sacH2] of {
                      (#,#) ipv2_sacH5 [Occ=Once] ipv3_sacH6 ->
                          let {
                            sat_sacH8 [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                            [LclId] =
                                CCCS GHC.ForeignPtr.MallocPtr! [ipv3_sacH6 ipv1_sacH3];
                          } in 
                            case byteArrayContents# [ipv3_sacH6] of sat_sacH7 {
                              __DEFAULT ->
                                  let {
                                    sat_sacH9 [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                    [LclId] =
                                        CCCS GHC.IO.Buffer.Buffer! [sat_sacH7
                                                                    sat_sacH8
                                                                    GHC.IO.Buffer.ReadBuffer
                                                                    1#
                                                                    0#
                                                                    0#];
                                  } in  (#,#) [ipv2_sacH5 sat_sacH9];
                            };
                    };
              };
        };

GHC.IO.Handle.Internals.noByteBuffer [InlPrag=NOINLINE]
  :: GHC.IO.Buffer.Buffer GHC.Word.Word8
[GblId] =
    [] \u []
        case lvl4_ra7Pk GHC.Prim.realWorld# of {
          (#,#) _ [Occ=Dead] ipv1_sacHc [Occ=Once] -> ipv1_sacHc;
        };

GHC.IO.Handle.Internals.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.Handle.Internals.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Internals.$trModule4];

GHC.IO.Handle.Internals.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Handle.Internals"#;

GHC.IO.Handle.Internals.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Internals.$trModule2];

GHC.IO.Handle.Internals.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Handle.Internals.$trModule3
                                     GHC.IO.Handle.Internals.$trModule1];

lvl5_ra7Pl :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "handle is finalized"#;

lvl6_ra7Pm :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl5_ra7Pl;

GHC.IO.Handle.Internals.ioe_finalizedHandle
  :: GHC.IO.FilePath -> GHC.IO.Handle.Types.Handle__
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [fp_sacHd]
        let {
          sat_sacHe [Occ=Once] :: GHC.Base.Maybe GHC.IO.FilePath
          [LclId] =
              CCCS GHC.Base.Just! [fp_sacHd]; } in
        let {
          sat_sacHf [Occ=Once] :: GHC.IO.Exception.IOException
          [LclId] =
              CCCS GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                              GHC.IO.Exception.IllegalOperation
                                              GHC.Types.[]
                                              lvl6_ra7Pm
                                              GHC.Base.Nothing
                                              sat_sacHe];
        } in 
          GHC.Exception.throw
              GHC.IO.Exception.$fExceptionIOException sat_sacHf;

GHC.IO.Handle.Internals.closeTextCodecs1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_sacHg eta_sacHh]
        case ds_sacHg of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds4_sacHt [Occ=Once*!]
                                       ds5_sacHu [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds5_sacHu of {
                GHC.Base.Nothing ->
                    case ds4_sacHt of {
                      GHC.Base.Nothing -> (#,#) [eta_sacHh GHC.Tuple.()];
                      GHC.Base.Just d_sacHB [Occ=Once!] ->
                          case d_sacHB of {
                            GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                              _ [Occ=Dead]
                                                              ds12_sacHF [Occ=Once]
                                                              _ [Occ=Dead]
                                                              _ [Occ=Dead] ->
                                ds12_sacHF eta_sacHh;
                          };
                    };
                GHC.Base.Just d_sacHI [Occ=Once!] ->
                    case d_sacHI of {
                      GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                        _ [Occ=Dead]
                                                        ds12_sacHM [Occ=Once]
                                                        _ [Occ=Dead]
                                                        _ [Occ=Dead] ->
                          case ds12_sacHM eta_sacHh of {
                            (#,#) ipv_sacHQ [Occ=Once*] _ [Occ=Dead] ->
                                case ds4_sacHt of {
                                  GHC.Base.Nothing -> (#,#) [ipv_sacHQ GHC.Tuple.()];
                                  GHC.Base.Just d1_sacHT [Occ=Once!] ->
                                      case d1_sacHT of {
                                        GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                          _ [Occ=Dead]
                                                                          ds18_sacHX [Occ=Once]
                                                                          _ [Occ=Dead]
                                                                          _ [Occ=Dead] ->
                                            ds18_sacHX ipv_sacHQ;
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.closeTextCodecs
  :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.IO.Handle.Internals.closeTextCodecs1 eta_B2 eta_B1;

GHC.IO.Handle.Internals.openTextEncoding1
  :: forall a.
     GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.HandleType
     -> (forall es ds.
         GHC.Base.Maybe (GHC.IO.Encoding.Types.TextEncoder es)
         -> GHC.Base.Maybe (GHC.IO.Encoding.Types.TextDecoder ds)
         -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U><L,1*C1(C1(C1(U(U,U))))><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_sacI0 ha_type_sacI1 cont_sacI2 eta_sacI3]
        case ds_sacI0 of {
          GHC.Base.Nothing ->
              cont_sacI2 GHC.Base.Nothing GHC.Base.Nothing eta_sacI3;
          GHC.Base.Just ds1_sacI5 [Occ=Once!] ->
              case ds1_sacI5 of {
                GHC.IO.Encoding.Types.TextEncoding _ [Occ=Dead]
                                                   ds3_sacI8 [Occ=Once*]
                                                   ds4_sacI9 [Occ=Once*] ->
                    let-no-escape {
                      $j_sacIa [Occ=Once*!T[2], Dmd=<L,1*C1(C1(U(U,U)))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> GHC.Base.Maybe (GHC.IO.Encoding.Types.TextDecoder dstate_aa436)
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa430 #)
                      [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
                          sat-only [ha_type_sacI1 cont_sacI2 ds4_sacI9] \r [ipv_sacIb
                                                                            ipv1_sacIc]
                              case ha_type_sacI1 of {
                                __DEFAULT -> cont_sacI2 GHC.Base.Nothing ipv1_sacIc ipv_sacIb;
                                GHC.IO.Handle.Types.WriteHandle ->
                                    case ds4_sacI9 ipv_sacIb of {
                                      (#,#) ipv2_sacIf [Occ=Once] ipv3_sacIg [Occ=Once] ->
                                          let {
                                            sat_sacIh [Occ=Once]
                                              :: GHC.Base.Maybe
                                                   (GHC.IO.Encoding.Types.TextEncoder estate_aa437)
                                            [LclId] =
                                                CCCS GHC.Base.Just! [ipv3_sacIg];
                                          } in  cont_sacI2 sat_sacIh ipv1_sacIc ipv2_sacIf;
                                    };
                                GHC.IO.Handle.Types.AppendHandle ->
                                    case ds4_sacI9 ipv_sacIb of {
                                      (#,#) ipv2_sacIj [Occ=Once] ipv3_sacIk [Occ=Once] ->
                                          let {
                                            sat_sacIl [Occ=Once]
                                              :: GHC.Base.Maybe
                                                   (GHC.IO.Encoding.Types.TextEncoder estate_aa437)
                                            [LclId] =
                                                CCCS GHC.Base.Just! [ipv3_sacIk];
                                          } in  cont_sacI2 sat_sacIl ipv1_sacIc ipv2_sacIj;
                                    };
                                GHC.IO.Handle.Types.ReadWriteHandle ->
                                    case ds4_sacI9 ipv_sacIb of {
                                      (#,#) ipv2_sacIn [Occ=Once] ipv3_sacIo [Occ=Once] ->
                                          let {
                                            sat_sacIp [Occ=Once]
                                              :: GHC.Base.Maybe
                                                   (GHC.IO.Encoding.Types.TextEncoder estate_aa437)
                                            [LclId] =
                                                CCCS GHC.Base.Just! [ipv3_sacIo];
                                          } in  cont_sacI2 sat_sacIp ipv1_sacIc ipv2_sacIn;
                                    };
                              };
                    } in 
                      case ha_type_sacI1 of {
                        __DEFAULT -> $j_sacIa eta_sacI3 GHC.Base.Nothing;
                        GHC.IO.Handle.Types.ReadHandle ->
                            case ds3_sacI8 eta_sacI3 of {
                              (#,#) ipv_sacIs [Occ=Once] ipv1_sacIt [Occ=Once] ->
                                  let {
                                    sat_sacIu [Occ=Once]
                                      :: GHC.Base.Maybe
                                           (GHC.IO.Encoding.Types.TextDecoder dstate_aa436)
                                    [LclId] =
                                        CCCS GHC.Base.Just! [ipv1_sacIt];
                                  } in  $j_sacIa ipv_sacIs sat_sacIu;
                            };
                        GHC.IO.Handle.Types.ReadWriteHandle ->
                            case ds3_sacI8 eta_sacI3 of {
                              (#,#) ipv_sacIw [Occ=Once] ipv1_sacIx [Occ=Once] ->
                                  let {
                                    sat_sacIy [Occ=Once]
                                      :: GHC.Base.Maybe
                                           (GHC.IO.Encoding.Types.TextDecoder dstate_aa436)
                                    [LclId] =
                                        CCCS GHC.Base.Just! [ipv1_sacIx];
                                  } in  $j_sacIa ipv_sacIw sat_sacIy;
                            };
                      };
              };
        };

GHC.IO.Handle.Internals.openTextEncoding
  :: forall a.
     GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.HandleType
     -> (forall es ds.
         GHC.Base.Maybe (GHC.IO.Encoding.Types.TextEncoder es)
         -> GHC.Base.Maybe (GHC.IO.Encoding.Types.TextDecoder ds)
         -> GHC.Types.IO a)
     -> GHC.Types.IO a
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U><L,1*C1(C1(C1(U(U,U))))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.Internals.openTextEncoding1
            eta_B4 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.Internals.flushByteWriteBuffer1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [h__sacIz eta_sacIA]
        case h__sacIz of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       $dBufferedIO_sacID [Occ=Once]
                                       _ [Occ=Dead]
                                       ds_sacIF [Occ=Once]
                                       _ [Occ=Dead]
                                       dt_sacIH
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt_sacIH eta_sacIA] of {
                (#,#) ipv_sacIT [Occ=Once*] ipv1_sacIU [Occ=Once!] ->
                    case ipv1_sacIU of wild1_sacIV {
                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           dt7_sacJ0 [Occ=Once]
                                           dt8_sacJ1 [Occ=Once] ->
                          case ==# [dt7_sacJ0 dt8_sacJ1] of {
                            __DEFAULT ->
                                case
                                    GHC.IO.BufferedIO.flushWriteBuffer
                                        $dBufferedIO_sacID ds_sacIF wild1_sacIV ipv_sacIT
                                of
                                { (#,#) ipv2_sacJ4 [Occ=Once] ipv3_sacJ5 [Occ=Once] ->
                                      case
                                          writeMutVar# [dt_sacIH ipv3_sacJ5 ipv2_sacJ4]
                                      of
                                      s2#_sacJ6
                                      { __DEFAULT -> (#,#) [s2#_sacJ6 GHC.Tuple.()];
                                      };
                                };
                            1# -> (#,#) [ipv_sacIT GHC.Tuple.()];
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.flushByteWriteBuffer
  :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.IO.Handle.Internals.flushByteWriteBuffer1 eta_B2 eta_B1;

GHC.IO.Handle.Internals.flushWriteBuffer1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [h__sacJ7 eta_sacJ8]
        case h__sacJ7 of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       $dBufferedIO_sacJb [Occ=Once]
                                       _ [Occ=Dead]
                                       ds_sacJd [Occ=Once]
                                       _ [Occ=Dead]
                                       dt_sacJf
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt_sacJf eta_sacJ8] of {
                (#,#) ipv_sacJr [Occ=Once*] ipv1_sacJs [Occ=Once!] ->
                    case ipv1_sacJs of {
                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           ds10_sacJw [Occ=Once!]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
                          case ds10_sacJw of {
                            GHC.IO.Buffer.ReadBuffer -> (#,#) [ipv_sacJr GHC.Tuple.()];
                            GHC.IO.Buffer.WriteBuffer ->
                                case readMutVar# [dt_sacJf ipv_sacJr] of {
                                  (#,#) ipv2_sacJC [Occ=Once*] ipv3_sacJD [Occ=Once!] ->
                                      case ipv3_sacJD of wild3_sacJE {
                                        GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             dt12_sacJJ [Occ=Once]
                                                             dt13_sacJK [Occ=Once] ->
                                            case ==# [dt12_sacJJ dt13_sacJK] of {
                                              __DEFAULT ->
                                                  case
                                                      GHC.IO.BufferedIO.flushWriteBuffer
                                                          $dBufferedIO_sacJb
                                                          ds_sacJd
                                                          wild3_sacJE
                                                          ipv2_sacJC
                                                  of
                                                  { (#,#) ipv4_sacJN [Occ=Once]
                                                          ipv5_sacJO [Occ=Once] ->
                                                        case
                                                            writeMutVar# [dt_sacJf
                                                                          ipv5_sacJO
                                                                          ipv4_sacJN]
                                                        of
                                                        s2#_sacJP
                                                        { __DEFAULT ->
                                                              (#,#) [s2#_sacJP GHC.Tuple.()];
                                                        };
                                                  };
                                              1# -> (#,#) [ipv2_sacJC GHC.Tuple.()];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.flushWriteBuffer
  :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.IO.Handle.Internals.flushWriteBuffer1 eta_B2 eta_B1;

lvl7_ra7Pn :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "codec_state"#;

GHC.IO.Handle.Internals.decodeByteBuf2
  :: forall dec_state. dec_state
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl7_ra7Pn of sat_sacJQ {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sacJQ;
        };

GHC.IO.Handle.Internals.decodeByteBuf1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Buffer.CharBuffer #)
[GblId,
 Arity=3,
 Str=<S,1*U><L,U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [h__sacJR cbuf_sacJS eta_sacJT]
        case h__sacJR of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       dt_sacK0
                                       _ [Occ=Dead]
                                       dt1_sacK2 [Occ=Once*]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds4_sacK6 [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt_sacK0 eta_sacJT] of {
                (#,#) ipv_sacKc [Occ=Once*] ipv1_sacKd ->
                    case ds4_sacK6 of {
                      GHC.Base.Nothing ->
                          let {
                            sat_sacKf [Occ=Once]
                              :: (dec_state_aa47A, GHC.IO.Buffer.Buffer GHC.Word.Word8)
                            [LclId] =
                                CCCS (,)! [GHC.IO.Handle.Internals.decodeByteBuf2 ipv1_sacKd];
                          } in 
                            case writeMutVar# [dt1_sacK2 sat_sacKf ipv_sacKc] of s2#_sacKg {
                              __DEFAULT ->
                                  case
                                      GHC.IO.Encoding.Latin1.latin5 ipv1_sacKd cbuf_sacJS s2#_sacKg
                                  of
                                  { (#,#) ipv2_sacKi [Occ=Once] ipv3_sacKj [Occ=Once!] ->
                                        case ipv3_sacKj of {
                                          (,,) _ [Occ=Dead]
                                               input'_sacKm [Occ=Once]
                                               output'_sacKn [Occ=Once] ->
                                              case
                                                  writeMutVar# [dt_sacK0 input'_sacKm ipv2_sacKi]
                                              of
                                              s2#1_sacKo
                                              { __DEFAULT -> (#,#) [s2#1_sacKo output'_sacKn];
                                              };
                                        };
                                  };
                            };
                      GHC.Base.Just decoder_sacKp [Occ=Once!] ->
                          case decoder_sacKp of {
                            GHC.IO.Encoding.Types.BufferCodec ds10_sacKr [Occ=Once]
                                                              ds11_sacKs [Occ=Once]
                                                              _ [Occ=Dead]
                                                              ds13_sacKu [Occ=Once]
                                                              _ [Occ=Dead] ->
                                case ds13_sacKu ipv_sacKc of {
                                  (#,#) ipv2_sacKx [Occ=Once] ipv3_sacKy [Occ=Once] ->
                                      let {
                                        sat_sacKz [Occ=Once]
                                          :: (dec_state_aa47A, GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                        [LclId] =
                                            CCCS (,)! [ipv3_sacKy ipv1_sacKd];
                                      } in 
                                        case
                                            writeMutVar# [dt1_sacK2 sat_sacKz ipv2_sacKx]
                                        of
                                        s2#_sacKA
                                        { __DEFAULT ->
                                              case
                                                  GHC.IO.Handle.Internals.$wstreamEncode
                                                      ds10_sacKr
                                                      ds11_sacKs
                                                      ipv1_sacKd
                                                      cbuf_sacJS
                                                      s2#_sacKA
                                              of
                                              { (#,#) ipv4_sacKC [Occ=Once]
                                                      ipv5_sacKD [Occ=Once!] ->
                                                    case ipv5_sacKD of {
                                                      (,) bbuf2_sacKF [Occ=Once]
                                                          cbuf'_sacKG [Occ=Once] ->
                                                          case
                                                              writeMutVar# [dt_sacK0
                                                                            bbuf2_sacKF
                                                                            ipv4_sacKC]
                                                          of
                                                          s2#1_sacKH
                                                          { __DEFAULT ->
                                                                (#,#) [s2#1_sacKH cbuf'_sacKG];
                                                          };
                                                    };
                                              };
                                        };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.decodeByteBuf
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Types.IO GHC.IO.Buffer.CharBuffer
[GblId,
 Arity=3,
 Str=<S,1*U><L,U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.Internals.decodeByteBuf1 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.Internals.readTextDeviceNonBlocking1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Buffer.CharBuffer #)
[GblId,
 Arity=3,
 Str=<S,1*U><L,U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [h__sacKI cbuf_sacKJ eta_sacKK]
        case h__sacKI of wild_sacKL {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       $dBufferedIO_sacKN [Occ=Once]
                                       _ [Occ=Dead]
                                       ds_sacKP [Occ=Once]
                                       _ [Occ=Dead]
                                       dt_sacKR
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt_sacKR eta_sacKK] of {
                (#,#) ipv_sacL3 [Occ=Once*] ipv1_sacL4 [Occ=Once!] ->
                    case ipv1_sacL4 of wild1_sacL5 {
                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           dt7_sacLa [Occ=Once]
                                           dt8_sacLb [Occ=Once] ->
                          case ==# [dt7_sacLa dt8_sacLb] of {
                            __DEFAULT ->
                                GHC.IO.Handle.Internals.decodeByteBuf1
                                    wild_sacKL cbuf_sacKJ ipv_sacL3;
                            1# ->
                                case
                                    GHC.IO.BufferedIO.fillReadBuffer0
                                        $dBufferedIO_sacKN ds_sacKP wild1_sacL5 ipv_sacL3
                                of
                                { (#,#) ipv2_sacLe [Occ=Once*] ipv3_sacLf [Occ=Once!] ->
                                      case ipv3_sacLf of {
                                        (,) r_sacLh [Occ=Once!] bbuf1_sacLi [Occ=Once] ->
                                            case r_sacLh of {
                                              GHC.Base.Nothing ->
                                                  raiseIO# [GHC.IO.Handle.Internals.hLookAhead_3
                                                            ipv2_sacLe];
                                              GHC.Base.Just _ [Occ=Dead] ->
                                                  case
                                                      writeMutVar# [dt_sacKR bbuf1_sacLi ipv2_sacLe]
                                                  of
                                                  s2#_sacLm
                                                  { __DEFAULT ->
                                                        GHC.IO.Handle.Internals.decodeByteBuf1
                                                            wild_sacKL cbuf_sacKJ s2#_sacLm;
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.readTextDeviceNonBlocking
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Types.IO GHC.IO.Buffer.CharBuffer
[GblId,
 Arity=3,
 Str=<S,1*U><L,U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.Internals.readTextDeviceNonBlocking1
            eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.Internals.wantReadableHandle2
  :: forall a.
     (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Str=<L,1*C1(C1(U(U,U)))><S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [act_sacLn h__sacLo eta_sacLp]
        case h__sacLo of wild_sacLq {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       $dBufferedIO_sacLs [Occ=Once]
                                       _ [Occ=Dead]
                                       ds_sacLu [Occ=Once]
                                       ds1_sacLv [Occ=Once!]
                                       dt_sacLw
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       dt2_sacLz
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds1_sacLv of {
                GHC.IO.Handle.Types.ClosedHandle ->
                    raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle11 eta_sacLp];
                GHC.IO.Handle.Types.SemiClosedHandle ->
                    raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle7 eta_sacLp];
                GHC.IO.Handle.Types.ReadHandle -> act_sacLn wild_sacLq eta_sacLp;
                GHC.IO.Handle.Types.WriteHandle ->
                    raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle3 eta_sacLp];
                GHC.IO.Handle.Types.AppendHandle ->
                    raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle3 eta_sacLp];
                GHC.IO.Handle.Types.ReadWriteHandle ->
                    case readMutVar# [dt_sacLw eta_sacLp] of {
                      (#,#) ipv_sacLJ [Occ=Once*] ipv1_sacLK [Occ=Once!] ->
                          case ipv1_sacLK of {
                            GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 ds10_sacLO [Occ=Once!]
                                                 _ [Occ=Dead]
                                                 dt7_sacLQ [Occ=Once]
                                                 dt8_sacLR [Occ=Once] ->
                                case ds10_sacLO of {
                                  GHC.IO.Buffer.ReadBuffer -> act_sacLn wild_sacLq ipv_sacLJ;
                                  GHC.IO.Buffer.WriteBuffer ->
                                      case ==# [dt7_sacLQ dt8_sacLR] of {
                                        __DEFAULT ->
                                            case readMutVar# [dt_sacLw ipv_sacLJ] of {
                                              (#,#) ipv2_sacLV [Occ=Once*] ipv3_sacLW [Occ=Once!] ->
                                                  case ipv3_sacLW of wild4_sacLX {
                                                    GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                         _ [Occ=Dead]
                                                                         _ [Occ=Dead]
                                                                         _ [Occ=Dead]
                                                                         dt12_sacM2 [Occ=Once]
                                                                         dt13_sacM3 [Occ=Once] ->
                                                        case ==# [dt12_sacM2 dt13_sacM3] of {
                                                          __DEFAULT ->
                                                              case
                                                                  GHC.IO.BufferedIO.flushWriteBuffer
                                                                      $dBufferedIO_sacLs
                                                                      ds_sacLu
                                                                      wild4_sacLX
                                                                      ipv2_sacLV
                                                              of
                                                              { (#,#) ipv4_sacM6 [Occ=Once]
                                                                      ipv5_sacM7 [Occ=Once] ->
                                                                    case
                                                                        writeMutVar# [dt_sacLw
                                                                                      ipv5_sacM7
                                                                                      ipv4_sacM6]
                                                                    of
                                                                    s2#_sacM8
                                                                    { __DEFAULT ->
                                                                          case
                                                                              readMutVar# [dt2_sacLz
                                                                                           s2#_sacM8]
                                                                          of
                                                                          { (#,#) ipv6_sacMa [Occ=Once]
                                                                                  ipv7_sacMb [Occ=Once!] ->
                                                                                let {
                                                                                  sat_sacMj [Occ=Once]
                                                                                    :: GHC.IO.Buffer.Buffer
                                                                                         GHC.IO.Buffer.CharBufElem
                                                                                  [LclId] =
                                                                                      [ipv7_sacMb] \u []
                                                                                          case
                                                                                              ipv7_sacMb
                                                                                          of
                                                                                          { GHC.IO.Buffer.Buffer dt14_sacMd [Occ=Once]
                                                                                                                 dt15_sacMe [Occ=Once]
                                                                                                                 _ [Occ=Dead]
                                                                                                                 dt16_sacMg [Occ=Once]
                                                                                                                 dt17_sacMh [Occ=Once]
                                                                                                                 dt18_sacMi [Occ=Once] ->
                                                                                                GHC.IO.Buffer.Buffer [dt14_sacMd
                                                                                                                      dt15_sacMe
                                                                                                                      GHC.IO.Buffer.ReadBuffer
                                                                                                                      dt16_sacMg
                                                                                                                      dt17_sacMh
                                                                                                                      dt18_sacMi];
                                                                                          };
                                                                                } in 
                                                                                  case
                                                                                      writeMutVar# [dt2_sacLz
                                                                                                    sat_sacMj
                                                                                                    ipv6_sacMa]
                                                                                  of
                                                                                  s2#1_sacMk
                                                                                  { __DEFAULT ->
                                                                                        case
                                                                                            readMutVar# [dt_sacLw
                                                                                                         s2#1_sacMk]
                                                                                        of
                                                                                        { (#,#) ipv8_sacMm [Occ=Once]
                                                                                                ipv9_sacMn [Occ=Once!] ->
                                                                                              let {
                                                                                                sat_sacMv [Occ=Once]
                                                                                                  :: GHC.IO.Buffer.Buffer
                                                                                                       GHC.Word.Word8
                                                                                                [LclId] =
                                                                                                    [ipv9_sacMn] \u []
                                                                                                        case
                                                                                                            ipv9_sacMn
                                                                                                        of
                                                                                                        { GHC.IO.Buffer.Buffer dt14_sacMp [Occ=Once]
                                                                                                                               dt15_sacMq [Occ=Once]
                                                                                                                               _ [Occ=Dead]
                                                                                                                               dt16_sacMs [Occ=Once]
                                                                                                                               dt17_sacMt [Occ=Once]
                                                                                                                               dt18_sacMu [Occ=Once] ->
                                                                                                              GHC.IO.Buffer.Buffer [dt14_sacMp
                                                                                                                                    dt15_sacMq
                                                                                                                                    GHC.IO.Buffer.ReadBuffer
                                                                                                                                    dt16_sacMs
                                                                                                                                    dt17_sacMt
                                                                                                                                    dt18_sacMu];
                                                                                                        };
                                                                                              } in 
                                                                                                case
                                                                                                    writeMutVar# [dt_sacLw
                                                                                                                  sat_sacMv
                                                                                                                  ipv8_sacMm]
                                                                                                of
                                                                                                s2#2_sacMw
                                                                                                { __DEFAULT ->
                                                                                                      act_sacLn
                                                                                                          wild_sacLq
                                                                                                          s2#2_sacMw;
                                                                                                };
                                                                                        };
                                                                                  };
                                                                          };
                                                                    };
                                                              };
                                                          1# ->
                                                              case
                                                                  readMutVar# [dt2_sacLz ipv2_sacLV]
                                                              of
                                                              { (#,#) ipv4_sacMy [Occ=Once]
                                                                      ipv5_sacMz [Occ=Once!] ->
                                                                    let {
                                                                      sat_sacMH [Occ=Once]
                                                                        :: GHC.IO.Buffer.Buffer
                                                                             GHC.IO.Buffer.CharBufElem
                                                                      [LclId] =
                                                                          [ipv5_sacMz] \u []
                                                                              case ipv5_sacMz of {
                                                                                GHC.IO.Buffer.Buffer dt14_sacMB [Occ=Once]
                                                                                                     dt15_sacMC [Occ=Once]
                                                                                                     _ [Occ=Dead]
                                                                                                     dt16_sacME [Occ=Once]
                                                                                                     dt17_sacMF [Occ=Once]
                                                                                                     dt18_sacMG [Occ=Once] ->
                                                                                    GHC.IO.Buffer.Buffer [dt14_sacMB
                                                                                                          dt15_sacMC
                                                                                                          GHC.IO.Buffer.ReadBuffer
                                                                                                          dt16_sacME
                                                                                                          dt17_sacMF
                                                                                                          dt18_sacMG];
                                                                              };
                                                                    } in 
                                                                      case
                                                                          writeMutVar# [dt2_sacLz
                                                                                        sat_sacMH
                                                                                        ipv4_sacMy]
                                                                      of
                                                                      s2#_sacMI
                                                                      { __DEFAULT ->
                                                                            case
                                                                                readMutVar# [dt_sacLw
                                                                                             s2#_sacMI]
                                                                            of
                                                                            { (#,#) ipv6_sacMK [Occ=Once]
                                                                                    ipv7_sacML [Occ=Once!] ->
                                                                                  let {
                                                                                    sat_sacMT [Occ=Once]
                                                                                      :: GHC.IO.Buffer.Buffer
                                                                                           GHC.Word.Word8
                                                                                    [LclId] =
                                                                                        [ipv7_sacML] \u []
                                                                                            case
                                                                                                ipv7_sacML
                                                                                            of
                                                                                            { GHC.IO.Buffer.Buffer dt14_sacMN [Occ=Once]
                                                                                                                   dt15_sacMO [Occ=Once]
                                                                                                                   _ [Occ=Dead]
                                                                                                                   dt16_sacMQ [Occ=Once]
                                                                                                                   dt17_sacMR [Occ=Once]
                                                                                                                   dt18_sacMS [Occ=Once] ->
                                                                                                  GHC.IO.Buffer.Buffer [dt14_sacMN
                                                                                                                        dt15_sacMO
                                                                                                                        GHC.IO.Buffer.ReadBuffer
                                                                                                                        dt16_sacMQ
                                                                                                                        dt17_sacMR
                                                                                                                        dt18_sacMS];
                                                                                            };
                                                                                  } in 
                                                                                    case
                                                                                        writeMutVar# [dt_sacLw
                                                                                                      sat_sacMT
                                                                                                      ipv6_sacMK]
                                                                                    of
                                                                                    s2#1_sacMU
                                                                                    { __DEFAULT ->
                                                                                          act_sacLn
                                                                                              wild_sacLq
                                                                                              s2#1_sacMU;
                                                                                    };
                                                                            };
                                                                      };
                                                              };
                                                        };
                                                  };
                                            };
                                        1# ->
                                            case readMutVar# [dt2_sacLz ipv_sacLJ] of {
                                              (#,#) ipv2_sacMW [Occ=Once] ipv3_sacMX [Occ=Once!] ->
                                                  let {
                                                    sat_sacN5 [Occ=Once]
                                                      :: GHC.IO.Buffer.Buffer
                                                           GHC.IO.Buffer.CharBufElem
                                                    [LclId] =
                                                        [ipv3_sacMX] \u []
                                                            case ipv3_sacMX of {
                                                              GHC.IO.Buffer.Buffer dt9_sacMZ [Occ=Once]
                                                                                   dt10_sacN0 [Occ=Once]
                                                                                   _ [Occ=Dead]
                                                                                   dt11_sacN2 [Occ=Once]
                                                                                   dt12_sacN3 [Occ=Once]
                                                                                   dt13_sacN4 [Occ=Once] ->
                                                                  GHC.IO.Buffer.Buffer [dt9_sacMZ
                                                                                        dt10_sacN0
                                                                                        GHC.IO.Buffer.ReadBuffer
                                                                                        dt11_sacN2
                                                                                        dt12_sacN3
                                                                                        dt13_sacN4];
                                                            };
                                                  } in 
                                                    case
                                                        writeMutVar# [dt2_sacLz
                                                                      sat_sacN5
                                                                      ipv2_sacMW]
                                                    of
                                                    s2#_sacN6
                                                    { __DEFAULT ->
                                                          case readMutVar# [dt_sacLw s2#_sacN6] of {
                                                            (#,#) ipv4_sacN8 [Occ=Once]
                                                                  ipv5_sacN9 [Occ=Once!] ->
                                                                let {
                                                                  sat_sacNh [Occ=Once]
                                                                    :: GHC.IO.Buffer.Buffer
                                                                         GHC.Word.Word8
                                                                  [LclId] =
                                                                      [ipv5_sacN9] \u []
                                                                          case ipv5_sacN9 of {
                                                                            GHC.IO.Buffer.Buffer dt9_sacNb [Occ=Once]
                                                                                                 dt10_sacNc [Occ=Once]
                                                                                                 _ [Occ=Dead]
                                                                                                 dt11_sacNe [Occ=Once]
                                                                                                 dt12_sacNf [Occ=Once]
                                                                                                 dt13_sacNg [Occ=Once] ->
                                                                                GHC.IO.Buffer.Buffer [dt9_sacNb
                                                                                                      dt10_sacNc
                                                                                                      GHC.IO.Buffer.ReadBuffer
                                                                                                      dt11_sacNe
                                                                                                      dt12_sacNf
                                                                                                      dt13_sacNg];
                                                                          };
                                                                } in 
                                                                  case
                                                                      writeMutVar# [dt_sacLw
                                                                                    sat_sacNh
                                                                                    ipv4_sacN8]
                                                                  of
                                                                  s2#1_sacNi
                                                                  { __DEFAULT ->
                                                                        act_sacLn
                                                                            wild_sacLq s2#1_sacNi;
                                                                  };
                                                          };
                                                    };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

lvl8_ra7Po :: GHC.IO.Handle.Types.BufferMode
[GblId, Caf=NoCafRefs, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.BlockBuffering! [GHC.Base.Nothing];

GHC.IO.Handle.Internals.mkDuplexHandle5
  :: forall dev.
     (GHC.IO.Device.IODevice dev, GHC.IO.BufferedIO.BufferedIO dev,
      Data.Typeable.Internal.Typeable dev) =>
     dev
     -> GHC.IO.FilePath
     -> GHC.IO.Handle.Types.HandleType
     -> GHC.Types.Bool
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.NewlineMode
     -> GHC.Base.Maybe GHC.IO.Handle.Internals.HandleFinalizer
     -> GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId,
 Arity=12,
 Str=<L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U)><L,U><L,U><L,U><L,U><L,1*U><S,U><L,U(1*U,1*U)><L,1*U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [$dIODevice_sacNj
           $dBufferedIO_sacNk
           $dTypeable_sacNl
           dev1_sacNm
           filepath_sacNn
           ha_type_sacNo
           buffered_sacNp
           mb_codec_sacNq
           nl_sacNr
           finalizer_sacNs
           other_side_sacNt
           eta_sacNu]
        let-no-escape {
          cont_sacNv [Occ=Once*!T[5], Dmd=<L,1*C1(C1(C1(U(U,U))))>]
            :: forall es ds.
               GHC.Base.Maybe (GHC.IO.Encoding.Types.TextEncoder es)
               -> GHC.Base.Maybe (GHC.IO.Encoding.Types.TextDecoder ds)
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     GHC.IO.Handle.Types.Handle #)
          [LclId[JoinId(5)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
              sat-only [$dIODevice_sacNj
                        $dBufferedIO_sacNk
                        $dTypeable_sacNl
                        dev1_sacNm
                        filepath_sacNn
                        ha_type_sacNo
                        buffered_sacNp
                        mb_codec_sacNq
                        nl_sacNr
                        finalizer_sacNs
                        other_side_sacNt] \r [mb_encoder_sacNw mb_decoder_sacNx eta1_sacNy]
                  let {
                    buf_state_sacNz :: GHC.IO.Buffer.BufferState
                    [LclId] =
                        [ha_type_sacNo] \u []
                            case ha_type_sacNo of {
                              __DEFAULT -> GHC.IO.Buffer.WriteBuffer [];
                              GHC.IO.Handle.Types.ReadHandle -> GHC.IO.Buffer.ReadBuffer [];
                            };
                  } in 
                    case
                        GHC.IO.BufferedIO.newBuffer
                            $dBufferedIO_sacNk dev1_sacNm buf_state_sacNz eta1_sacNy
                    of
                    { (#,#) ipv_sacNC [Occ=Once] ipv1_sacND ->
                          case newMutVar# [ipv1_sacND ipv_sacNC] of {
                            (#,#) ipv2_sacNF [Occ=Once] ipv3_sacNG [Occ=Once] ->
                                let {
                                  sat_sacNH [Occ=Once]
                                    :: (ds_aa4hw, GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                  [LclId] =
                                      CCCS (,)! [GHC.IO.Handle.Internals.decodeByteBuf2 ipv1_sacND];
                                } in 
                                  case newMutVar# [sat_sacNH ipv2_sacNF] of {
                                    (#,#) ipv4_sacNJ [Occ=Once*] ipv5_sacNK [Occ=Once] ->
                                        let-no-escape {
                                          $w$j_sacNL [InlPrag=NOUSERINLINE[0],
                                                      Occ=Once*!T[3],
                                                      Dmd=<L,1*C1(C1(C1(U(U,U))))>]
                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> GHC.IORef.IORef GHC.IO.Buffer.CharBuffer
                                               -> GHC.IO.Handle.Types.BufferMode
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                     GHC.IO.Handle.Types.Handle #)
                                          [LclId[JoinId(3)],
                                           Arity=3,
                                           Str=<S,U><L,1*U(U)><L,U>,
                                           Unf=OtherCon []] =
                                              sat-only [$dIODevice_sacNj
                                                        $dBufferedIO_sacNk
                                                        $dTypeable_sacNl
                                                        dev1_sacNm
                                                        filepath_sacNn
                                                        ha_type_sacNo
                                                        mb_codec_sacNq
                                                        nl_sacNr
                                                        finalizer_sacNs
                                                        other_side_sacNt
                                                        mb_encoder_sacNw
                                                        mb_decoder_sacNx
                                                        ipv3_sacNG
                                                        ipv5_sacNK] \r [w_sacNM ww_sacNN ww1_sacNO]
                                                  case
                                                      newMutVar# [GHC.IO.Handle.Types.BufferListNil
                                                                  w_sacNM]
                                                  of
                                                  { (#,#) ipv6_sacNQ [Occ=Once]
                                                          ipv7_sacNR [Occ=Once] ->
                                                        case newMVar# [ipv6_sacNQ] of {
                                                          (#,#) ipv8_sacNT [Occ=Once] ipv9_sacNU ->
                                                              let {
                                                                sat_sacO0 [Occ=Once]
                                                                  :: GHC.IO.Handle.Types.Handle__
                                                                [LclId] =
                                                                    [$dIODevice_sacNj
                                                                     $dBufferedIO_sacNk
                                                                     $dTypeable_sacNl
                                                                     dev1_sacNm
                                                                     ha_type_sacNo
                                                                     mb_codec_sacNq
                                                                     nl_sacNr
                                                                     other_side_sacNt
                                                                     mb_encoder_sacNw
                                                                     mb_decoder_sacNx
                                                                     ipv3_sacNG
                                                                     ipv5_sacNK
                                                                     ww_sacNN
                                                                     ww1_sacNO
                                                                     ipv7_sacNR] \u []
                                                                        case
                                                                            dev1_sacNm
                                                                        of
                                                                        dt_sacNV
                                                                        { __DEFAULT ->
                                                                              case ww_sacNN of {
                                                                                GHC.STRef.STRef dt2_sacNX [Occ=Once] ->
                                                                                    let {
                                                                                      sat_sacNZ [Occ=Once]
                                                                                        :: GHC.IO.Handle.Types.Newline
                                                                                      [LclId] =
                                                                                          [nl_sacNr] \u []
                                                                                              GHC.IO.Handle.Types.outputNL
                                                                                                  nl_sacNr; } in
                                                                                    let {
                                                                                      sat_sacNY [Occ=Once]
                                                                                        :: GHC.IO.Handle.Types.Newline
                                                                                      [LclId] =
                                                                                          [nl_sacNr] \u []
                                                                                              GHC.IO.Handle.Types.inputNL
                                                                                                  nl_sacNr;
                                                                                    } in 
                                                                                      GHC.IO.Handle.Types.Handle__ [$dIODevice_sacNj
                                                                                                                    $dBufferedIO_sacNk
                                                                                                                    $dTypeable_sacNl
                                                                                                                    dt_sacNV
                                                                                                                    ha_type_sacNo
                                                                                                                    ipv3_sacNG
                                                                                                                    ww1_sacNO
                                                                                                                    ipv5_sacNK
                                                                                                                    dt2_sacNX
                                                                                                                    ipv7_sacNR
                                                                                                                    mb_encoder_sacNw
                                                                                                                    mb_decoder_sacNx
                                                                                                                    mb_codec_sacNq
                                                                                                                    sat_sacNY
                                                                                                                    sat_sacNZ
                                                                                                                    other_side_sacNt];
                                                                              };
                                                                        };
                                                              } in 
                                                                case
                                                                    putMVar# [ipv9_sacNU
                                                                              sat_sacO0
                                                                              ipv8_sacNT]
                                                                of
                                                                s2#_sacO1
                                                                { __DEFAULT ->
                                                                      case finalizer_sacNs of {
                                                                        GHC.Base.Nothing ->
                                                                            let {
                                                                              sat_sacO3 [Occ=Once]
                                                                                :: GHC.IO.Handle.Types.Handle
                                                                              [LclId] =
                                                                                  CCCS GHC.IO.Handle.Types.FileHandle! [filepath_sacNn
                                                                                                                        ipv9_sacNU];
                                                                            } in 
                                                                              (#,#) [s2#_sacO1
                                                                                     sat_sacO3];
                                                                        GHC.Base.Just finalizer1_sacO4 [Occ=Once!] ->
                                                                            let {
                                                                              sat_sacO6 [Occ=Once]
                                                                                :: GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld
                                                                                   -> (# GHC.Prim.State#
                                                                                           GHC.Prim.RealWorld,
                                                                                         () #)
                                                                              [LclId] =
                                                                                  [filepath_sacNn
                                                                                   ipv9_sacNU
                                                                                   finalizer1_sacO4] \u []
                                                                                      let {
                                                                                        sat_sacO5 [Occ=Once]
                                                                                          :: GHC.MVar.MVar
                                                                                               GHC.IO.Handle.Types.Handle__
                                                                                        [LclId] =
                                                                                            CCCS GHC.MVar.MVar! [ipv9_sacNU];
                                                                                      } in 
                                                                                        finalizer1_sacO4
                                                                                            filepath_sacNn
                                                                                            sat_sacO5;
                                                                            } in 
                                                                              case
                                                                                  mkWeak# [ipv9_sacNU
                                                                                           GHC.Tuple.()
                                                                                           sat_sacO6
                                                                                           s2#_sacO1]
                                                                              of
                                                                              { (#,#) ipv10_sacO8 [Occ=Once]
                                                                                      _ [Occ=Dead] ->
                                                                                    let {
                                                                                      sat_sacOa [Occ=Once]
                                                                                        :: GHC.IO.Handle.Types.Handle
                                                                                      [LclId] =
                                                                                          CCCS GHC.IO.Handle.Types.FileHandle! [filepath_sacNn
                                                                                                                                ipv9_sacNU];
                                                                                    } in 
                                                                                      (#,#) [ipv10_sacO8
                                                                                             sat_sacOa];
                                                                              };
                                                                      };
                                                                };
                                                        };
                                                  };
                                        } in 
                                          case buffered_sacNp of {
                                            GHC.Types.False ->
                                                case
                                                    newMutVar# [GHC.ForeignPtr.NoFinalizers
                                                                ipv4_sacNJ]
                                                of
                                                { (#,#) ipv6_sacOd [Occ=Once]
                                                        ipv7_sacOe [Occ=Once] ->
                                                      case
                                                          newPinnedByteArray# [8192# ipv6_sacOd]
                                                      of
                                                      { (#,#) ipv8_sacOg [Occ=Once] ipv9_sacOh ->
                                                            let {
                                                              sat_sacOj [Occ=Once]
                                                                :: GHC.ForeignPtr.ForeignPtrContents
                                                              [LclId] =
                                                                  CCCS GHC.ForeignPtr.MallocPtr! [ipv9_sacOh
                                                                                                  ipv7_sacOe];
                                                            } in 
                                                              case
                                                                  byteArrayContents# [ipv9_sacOh]
                                                              of
                                                              sat_sacOi
                                                              { __DEFAULT ->
                                                                    let {
                                                                      sat_sacOk [Occ=Once]
                                                                        :: GHC.IO.Buffer.CharBuffer
                                                                      [LclId] =
                                                                          CCCS GHC.IO.Buffer.Buffer! [sat_sacOi
                                                                                                      sat_sacOj
                                                                                                      buf_state_sacNz
                                                                                                      2048#
                                                                                                      0#
                                                                                                      0#];
                                                                    } in 
                                                                      case
                                                                          newMutVar# [sat_sacOk
                                                                                      ipv8_sacOg]
                                                                      of
                                                                      { (#,#) ipv10_sacOm [Occ=Once]
                                                                              ipv11_sacOn [Occ=Once] ->
                                                                            let {
                                                                              sat_sacOo [Occ=Once]
                                                                                :: GHC.IORef.IORef
                                                                                     GHC.IO.Buffer.CharBuffer
                                                                              [LclId] =
                                                                                  CCCS GHC.STRef.STRef! [ipv11_sacOn];
                                                                            } in 
                                                                              $w$j_sacNL
                                                                                  ipv10_sacOm
                                                                                  sat_sacOo
                                                                                  GHC.IO.Handle.Types.NoBuffering;
                                                                      };
                                                              };
                                                      };
                                                };
                                            GHC.Types.True ->
                                                case
                                                    newMutVar# [GHC.ForeignPtr.NoFinalizers
                                                                ipv4_sacNJ]
                                                of
                                                { (#,#) ipv6_sacOq [Occ=Once]
                                                        ipv7_sacOr [Occ=Once] ->
                                                      case
                                                          newPinnedByteArray# [8192# ipv6_sacOq]
                                                      of
                                                      { (#,#) ipv8_sacOt [Occ=Once] ipv9_sacOu ->
                                                            let {
                                                              sat_sacOw [Occ=Once]
                                                                :: GHC.ForeignPtr.ForeignPtrContents
                                                              [LclId] =
                                                                  CCCS GHC.ForeignPtr.MallocPtr! [ipv9_sacOu
                                                                                                  ipv7_sacOr];
                                                            } in 
                                                              case
                                                                  byteArrayContents# [ipv9_sacOu]
                                                              of
                                                              sat_sacOv
                                                              { __DEFAULT ->
                                                                    let {
                                                                      sat_sacOx [Occ=Once]
                                                                        :: GHC.IO.Buffer.CharBuffer
                                                                      [LclId] =
                                                                          CCCS GHC.IO.Buffer.Buffer! [sat_sacOv
                                                                                                      sat_sacOw
                                                                                                      buf_state_sacNz
                                                                                                      2048#
                                                                                                      0#
                                                                                                      0#];
                                                                    } in 
                                                                      case
                                                                          newMutVar# [sat_sacOx
                                                                                      ipv8_sacOt]
                                                                      of
                                                                      { (#,#) ipv10_sacOz [Occ=Once]
                                                                              ipv11_sacOA [Occ=Once] ->
                                                                            case
                                                                                GHC.IO.Device.isTerminal
                                                                                    $dIODevice_sacNj
                                                                                    dev1_sacNm
                                                                                    ipv10_sacOz
                                                                            of
                                                                            { (#,#) ipv12_sacOC [Occ=Once]
                                                                                    ipv13_sacOD [Occ=Once!] ->
                                                                                  let {
                                                                                    sat_sacOG [Occ=Once]
                                                                                      :: GHC.IO.Handle.Types.BufferMode
                                                                                    [LclId] =
                                                                                        [ipv13_sacOD] \u []
                                                                                            case
                                                                                                ipv13_sacOD
                                                                                            of
                                                                                            { GHC.Types.False ->
                                                                                                  lvl8_ra7Po;
                                                                                              GHC.Types.True ->
                                                                                                  GHC.IO.Handle.Types.LineBuffering [];
                                                                                            }; } in
                                                                                  let {
                                                                                    sat_sacOE [Occ=Once]
                                                                                      :: GHC.IORef.IORef
                                                                                           GHC.IO.Buffer.CharBuffer
                                                                                    [LclId] =
                                                                                        CCCS GHC.STRef.STRef! [ipv11_sacOA];
                                                                                  } in 
                                                                                    $w$j_sacNL
                                                                                        ipv12_sacOC
                                                                                        sat_sacOE
                                                                                        sat_sacOG;
                                                                            };
                                                                      };
                                                              };
                                                      };
                                                };
                                          };
                                  };
                          };
                    };
        } in 
          case mb_codec_sacNq of {
            GHC.Base.Nothing ->
                cont_sacNv GHC.Base.Nothing GHC.Base.Nothing eta_sacNu;
            GHC.Base.Just ds_sacOI [Occ=Once!] ->
                case ds_sacOI of {
                  GHC.IO.Encoding.Types.TextEncoding _ [Occ=Dead]
                                                     ds2_sacOL [Occ=Once*]
                                                     ds3_sacOM [Occ=Once*] ->
                      let-no-escape {
                        $j_sacON [Occ=Once*!T[2], Dmd=<L,1*C1(C1(U(U,U)))>]
                          :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> GHC.Base.Maybe (GHC.IO.Encoding.Types.TextDecoder dstate_aa436)
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                   GHC.IO.Handle.Types.Handle #)
                        [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
                            sat-only [ha_type_sacNo cont_sacNv ds3_sacOM] \r [ipv_sacOO
                                                                              ipv1_sacOP]
                                case ha_type_sacNo of {
                                  __DEFAULT -> cont_sacNv GHC.Base.Nothing ipv1_sacOP ipv_sacOO;
                                  GHC.IO.Handle.Types.WriteHandle ->
                                      case ds3_sacOM ipv_sacOO of {
                                        (#,#) ipv2_sacOS [Occ=Once] ipv3_sacOT [Occ=Once] ->
                                            let {
                                              sat_sacOU [Occ=Once]
                                                :: GHC.Base.Maybe
                                                     (GHC.IO.Encoding.Types.TextEncoder
                                                        estate_aa437)
                                              [LclId] =
                                                  CCCS GHC.Base.Just! [ipv3_sacOT];
                                            } in  cont_sacNv sat_sacOU ipv1_sacOP ipv2_sacOS;
                                      };
                                  GHC.IO.Handle.Types.AppendHandle ->
                                      case ds3_sacOM ipv_sacOO of {
                                        (#,#) ipv2_sacOW [Occ=Once] ipv3_sacOX [Occ=Once] ->
                                            let {
                                              sat_sacOY [Occ=Once]
                                                :: GHC.Base.Maybe
                                                     (GHC.IO.Encoding.Types.TextEncoder
                                                        estate_aa437)
                                              [LclId] =
                                                  CCCS GHC.Base.Just! [ipv3_sacOX];
                                            } in  cont_sacNv sat_sacOY ipv1_sacOP ipv2_sacOW;
                                      };
                                  GHC.IO.Handle.Types.ReadWriteHandle ->
                                      case ds3_sacOM ipv_sacOO of {
                                        (#,#) ipv2_sacP0 [Occ=Once] ipv3_sacP1 [Occ=Once] ->
                                            let {
                                              sat_sacP2 [Occ=Once]
                                                :: GHC.Base.Maybe
                                                     (GHC.IO.Encoding.Types.TextEncoder
                                                        estate_aa437)
                                              [LclId] =
                                                  CCCS GHC.Base.Just! [ipv3_sacP1];
                                            } in  cont_sacNv sat_sacP2 ipv1_sacOP ipv2_sacP0;
                                      };
                                };
                      } in 
                        case ha_type_sacNo of {
                          __DEFAULT -> $j_sacON eta_sacNu GHC.Base.Nothing;
                          GHC.IO.Handle.Types.ReadHandle ->
                              case ds2_sacOL eta_sacNu of {
                                (#,#) ipv_sacP5 [Occ=Once] ipv1_sacP6 [Occ=Once] ->
                                    let {
                                      sat_sacP7 [Occ=Once]
                                        :: GHC.Base.Maybe
                                             (GHC.IO.Encoding.Types.TextDecoder dstate_aa436)
                                      [LclId] =
                                          CCCS GHC.Base.Just! [ipv1_sacP6];
                                    } in  $j_sacON ipv_sacP5 sat_sacP7;
                              };
                          GHC.IO.Handle.Types.ReadWriteHandle ->
                              case ds2_sacOL eta_sacNu of {
                                (#,#) ipv_sacP9 [Occ=Once] ipv1_sacPa [Occ=Once] ->
                                    let {
                                      sat_sacPb [Occ=Once]
                                        :: GHC.Base.Maybe
                                             (GHC.IO.Encoding.Types.TextDecoder dstate_aa436)
                                      [LclId] =
                                          CCCS GHC.Base.Just! [ipv1_sacPa];
                                    } in  $j_sacON ipv_sacP9 sat_sacPb;
                              };
                        };
                };
          };

GHC.IO.Handle.Internals.mkHandle
  :: forall dev.
     (GHC.IO.Device.IODevice dev, GHC.IO.BufferedIO.BufferedIO dev,
      Data.Typeable.Internal.Typeable dev) =>
     dev
     -> GHC.IO.FilePath
     -> GHC.IO.Handle.Types.HandleType
     -> GHC.Types.Bool
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.NewlineMode
     -> GHC.Base.Maybe GHC.IO.Handle.Internals.HandleFinalizer
     -> GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
     -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId,
 Arity=12,
 Str=<L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U)><L,U><L,U><L,U><L,U><L,1*U><S,U><L,U(1*U,1*U)><L,1*U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_Bc
           eta_Bb
           eta_Ba
           eta_B9
           eta_B8
           eta_B7
           eta_B6
           eta_B5
           eta_B4
           eta_B3
           eta_B2
           eta_B1]
        GHC.IO.Handle.Internals.mkDuplexHandle5
            eta_Bc
            eta_Bb
            eta_Ba
            eta_B9
            eta_B8
            eta_B7
            eta_B6
            eta_B5
            eta_B4
            eta_B3
            eta_B2
            eta_B1;

GHC.IO.Handle.Internals.debugIO1
  :: GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><S,U>, Unf=OtherCon []] =
    [] \r [s_sacPc s1_sacPd] (#,#) [s1_sacPd GHC.Tuple.()];

GHC.IO.Handle.Internals.debugIO
  :: GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.IO.Handle.Internals.debugIO1 eta_B2 eta_B1;

GHC.IO.Handle.Internals.$wwriteCharBuffer [InlPrag=NOUSERINLINE[0],
                                           Occ=LoopBreaker]
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> GHC.IO.Buffer.BufferState
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=8,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U><L,U><L,U><L,U><L,U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sacPe
           ww_sacPf
           ww1_sacPg
           ww2_sacPh
           ww3_sacPi
           ww4_sacPj
           ww5_sacPk
           w1_sacPl]
        case w_sacPe of wild_sacPm {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       $dBufferedIO_sacPo [Occ=Once]
                                       _ [Occ=Dead]
                                       ds_sacPq [Occ=Once]
                                       _ [Occ=Dead]
                                       dt_sacPs
                                       ds2_sacPt [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds3_sacPx [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt_sacPs w1_sacPl] of {
                (#,#) ipv_sacPE [Occ=Once*] ipv1_sacPF [Occ=Once*] ->
                    let-no-escape {
                      $w$j_sacPG [InlPrag=NOUSERINLINE[0],
                                  Occ=Once*!T[8],
                                  Dmd=<L,1*C1(C1(C1(C1(C1(C1(C1(C1(U(U,U)))))))))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> GHC.IO.Buffer.CharBuffer
                           -> GHC.Prim.Addr#
                           -> GHC.ForeignPtr.ForeignPtrContents
                           -> GHC.IO.Buffer.BufferState
                           -> GHC.Prim.Int#
                           -> GHC.Prim.Int#
                           -> GHC.Prim.Int#
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      [LclId[JoinId(8)],
                       Arity=8,
                       Str=<S,U><L,U(U,U,U,U,U,U)><L,U><L,U><L,U><S,U><L,U><S,U>,
                       Unf=OtherCon []] =
                          sat-only [ww4_sacPj
                                    wild_sacPm
                                    $dBufferedIO_sacPo
                                    ds_sacPq
                                    dt_sacPs
                                    ds2_sacPt] \r [w2_sacPH
                                                   ww6_sacPI
                                                   ww7_sacPJ
                                                   ww8_sacPK
                                                   ww9_sacPL
                                                   ww10_sacPM
                                                   ww11_sacPN
                                                   ww12_sacPO]
                              let {
                                wild1_sacPP :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                [LclId, Unf=OtherCon []] =
                                    CCCS GHC.IO.Buffer.Buffer! [ww7_sacPJ
                                                                ww8_sacPK
                                                                ww9_sacPL
                                                                ww10_sacPM
                                                                ww11_sacPN
                                                                ww12_sacPO];
                              } in 
                                let-no-escape {
                                  $j_sacPQ [Dmd=<L,1*U(U,U)>]
                                    :: (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                  [LclId[JoinId(0)], Unf=OtherCon []] =
                                      [wild_sacPm
                                       $dBufferedIO_sacPo
                                       ds_sacPq
                                       dt_sacPs
                                       w2_sacPH
                                       ww6_sacPI
                                       wild1_sacPP] \r []
                                          case
                                              GHC.IO.BufferedIO.flushWriteBuffer
                                                  $dBufferedIO_sacPo ds_sacPq wild1_sacPP w2_sacPH
                                          of
                                          { (#,#) ipv2_sacPS [Occ=Once] ipv3_sacPT [Occ=Once] ->
                                                case
                                                    writeMutVar# [dt_sacPs ipv3_sacPT ipv2_sacPS]
                                                of
                                                s2#_sacPU
                                                { __DEFAULT ->
                                                      case ww6_sacPI of {
                                                        GHC.IO.Buffer.Buffer dt4_sacPW [Occ=Once]
                                                                             dt5_sacPX [Occ=Once]
                                                                             ds11_sacPY [Occ=Once]
                                                                             dt6_sacPZ [Occ=Once]
                                                                             dt7_sacQ0
                                                                             dt8_sacQ1 ->
                                                            case ==# [dt7_sacQ0 dt8_sacQ1] of {
                                                              __DEFAULT ->
                                                                  GHC.IO.Handle.Internals.$wwriteCharBuffer
                                                                      wild_sacPm
                                                                      dt4_sacPW
                                                                      dt5_sacPX
                                                                      ds11_sacPY
                                                                      dt6_sacPZ
                                                                      dt7_sacQ0
                                                                      dt8_sacQ1
                                                                      s2#_sacPU;
                                                              1# -> (#,#) [s2#_sacPU GHC.Tuple.()];
                                                            };
                                                      };
                                                };
                                          };
                                } in 
                                  case ==# [ww10_sacPM ww12_sacPO] of {
                                    __DEFAULT ->
                                        case ww6_sacPI of {
                                          GHC.IO.Buffer.Buffer dt4_sacQ5 [Occ=Once*]
                                                               dt5_sacQ6 [Occ=Once*]
                                                               ds10_sacQ7 [Occ=Once*]
                                                               dt6_sacQ8 [Occ=Once*]
                                                               dt7_sacQ9
                                                               dt8_sacQa ->
                                              let-no-escape {
                                                $j1_sacQb [Occ=Once*T[0], Dmd=<L,1*U(U,U)>]
                                                  :: (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                                [LclId[JoinId(0)], Unf=OtherCon []] =
                                                    [wild_sacPm
                                                     dt_sacPs
                                                     ds2_sacPt
                                                     w2_sacPH
                                                     ww11_sacPN
                                                     ww12_sacPO
                                                     wild1_sacPP
                                                     $j_sacPQ
                                                     dt4_sacQ5
                                                     dt5_sacQ6
                                                     ds10_sacQ7
                                                     dt6_sacQ8
                                                     dt7_sacQ9
                                                     dt8_sacQa] \r []
                                                        case ds2_sacPt of {
                                                          GHC.IO.Handle.Types.NoBuffering ->
                                                              $j_sacPQ;
                                                          GHC.IO.Handle.Types.LineBuffering ->
                                                              case
                                                                  writeMutVar# [dt_sacPs
                                                                                wild1_sacPP
                                                                                w2_sacPH]
                                                              of
                                                              s2#_sacQd
                                                              { __DEFAULT ->
                                                                    case
                                                                        ==# [dt7_sacQ9 dt8_sacQa]
                                                                    of
                                                                    { __DEFAULT ->
                                                                          GHC.IO.Handle.Internals.$wwriteCharBuffer
                                                                              wild_sacPm
                                                                              dt4_sacQ5
                                                                              dt5_sacQ6
                                                                              ds10_sacQ7
                                                                              dt6_sacQ8
                                                                              dt7_sacQ9
                                                                              dt8_sacQa
                                                                              s2#_sacQd;
                                                                      1# ->
                                                                          (#,#) [s2#_sacQd
                                                                                 GHC.Tuple.()];
                                                                    };
                                                              };
                                                          GHC.IO.Handle.Types.BlockBuffering ds11_sacQf [Occ=Once!] ->
                                                              case ds11_sacQf of {
                                                                GHC.Base.Nothing ->
                                                                    case
                                                                        writeMutVar# [dt_sacPs
                                                                                      wild1_sacPP
                                                                                      w2_sacPH]
                                                                    of
                                                                    s2#_sacQh
                                                                    { __DEFAULT ->
                                                                          case
                                                                              ==# [dt7_sacQ9
                                                                                   dt8_sacQa]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.IO.Handle.Internals.$wwriteCharBuffer
                                                                                    wild_sacPm
                                                                                    dt4_sacQ5
                                                                                    dt5_sacQ6
                                                                                    ds10_sacQ7
                                                                                    dt6_sacQ8
                                                                                    dt7_sacQ9
                                                                                    dt8_sacQa
                                                                                    s2#_sacQh;
                                                                            1# ->
                                                                                (#,#) [s2#_sacQh
                                                                                       GHC.Tuple.()];
                                                                          };
                                                                    };
                                                                GHC.Base.Just s_sacQj [Occ=Once!] ->
                                                                    case s_sacQj of {
                                                                      GHC.Types.I# y_sacQl [Occ=Once] ->
                                                                          case
                                                                              -# [ww12_sacPO
                                                                                  ww11_sacPN]
                                                                          of
                                                                          sat_sacQm
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    >=# [sat_sacQm
                                                                                         y_sacQl]
                                                                                of
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          writeMutVar# [dt_sacPs
                                                                                                        wild1_sacPP
                                                                                                        w2_sacPH]
                                                                                      of
                                                                                      s2#_sacQo
                                                                                      { __DEFAULT ->
                                                                                            case
                                                                                                ==# [dt7_sacQ9
                                                                                                     dt8_sacQa]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.IO.Handle.Internals.$wwriteCharBuffer
                                                                                                      wild_sacPm
                                                                                                      dt4_sacQ5
                                                                                                      dt5_sacQ6
                                                                                                      ds10_sacQ7
                                                                                                      dt6_sacQ8
                                                                                                      dt7_sacQ9
                                                                                                      dt8_sacQa
                                                                                                      s2#_sacQo;
                                                                                              1# ->
                                                                                                  (#,#) [s2#_sacQo
                                                                                                         GHC.Tuple.()];
                                                                                            };
                                                                                      };
                                                                                  1# -> $j_sacPQ;
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                              } in 
                                                case ==# [dt7_sacQ9 dt8_sacQa] of {
                                                  __DEFAULT ->
                                                      case ==# [dt7_sacQ9 ww4_sacPj] of {
                                                        __DEFAULT -> $j1_sacQb;
                                                        1# -> $j_sacPQ;
                                                      };
                                                  1# -> $j1_sacQb;
                                                };
                                        };
                                    1# -> $j_sacPQ;
                                  };
                    } in 
                      case ds3_sacPx of {
                        GHC.Base.Nothing ->
                            let {
                              sat_sacQt [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                              [LclId] =
                                  CCCS GHC.IO.Buffer.Buffer! [ww_sacPf
                                                              ww1_sacPg
                                                              ww2_sacPh
                                                              ww3_sacPi
                                                              ww4_sacPj
                                                              ww5_sacPk];
                            } in 
                              case
                                  GHC.IO.Encoding.Latin1.latin3 sat_sacQt ipv1_sacPF ipv_sacPE
                              of
                              { (#,#) ipv2_sacQv [Occ=Once] ipv3_sacQw [Occ=Once!] ->
                                    case ipv3_sacQw of {
                                      (,,) _ [Occ=Dead]
                                           input'_sacQz [Occ=Once]
                                           output'_sacQA [Occ=Once!] ->
                                          case output'_sacQA of {
                                            GHC.IO.Buffer.Buffer ww7_sacQC [Occ=Once]
                                                                 ww8_sacQD [Occ=Once]
                                                                 ww9_sacQE [Occ=Once]
                                                                 ww10_sacQF [Occ=Once]
                                                                 ww11_sacQG [Occ=Once]
                                                                 ww12_sacQH [Occ=Once] ->
                                                $w$j_sacPG
                                                    ipv2_sacQv
                                                    input'_sacQz
                                                    ww7_sacQC
                                                    ww8_sacQD
                                                    ww9_sacQE
                                                    ww10_sacQF
                                                    ww11_sacQG
                                                    ww12_sacQH;
                                          };
                                    };
                              };
                        GHC.Base.Just encoder_sacQI [Occ=Once!] ->
                            case encoder_sacQI of {
                              GHC.IO.Encoding.Types.BufferCodec ww7_sacQK [Occ=Once]
                                                                ww8_sacQL [Occ=Once]
                                                                _ [Occ=Dead]
                                                                _ [Occ=Dead]
                                                                _ [Occ=Dead] ->
                                  let {
                                    sat_sacQP [Occ=Once]
                                      :: GHC.IO.Buffer.Buffer GHC.IO.Buffer.CharBufElem
                                    [LclId] =
                                        CCCS GHC.IO.Buffer.Buffer! [ww_sacPf
                                                                    ww1_sacPg
                                                                    ww2_sacPh
                                                                    ww3_sacPi
                                                                    ww4_sacPj
                                                                    ww5_sacPk];
                                  } in 
                                    case
                                        GHC.IO.Handle.Internals.$wstreamEncode
                                            ww7_sacQK ww8_sacQL sat_sacQP ipv1_sacPF ipv_sacPE
                                    of
                                    { (#,#) ipv2_sacQR [Occ=Once] ipv3_sacQS [Occ=Once!] ->
                                          case ipv3_sacQS of {
                                            (,) ww13_sacQU [Occ=Once] ww14_sacQV [Occ=Once!] ->
                                                case ww14_sacQV of {
                                                  GHC.IO.Buffer.Buffer ww16_sacQX [Occ=Once]
                                                                       ww17_sacQY [Occ=Once]
                                                                       ww18_sacQZ [Occ=Once]
                                                                       ww19_sacR0 [Occ=Once]
                                                                       ww20_sacR1 [Occ=Once]
                                                                       ww21_sacR2 [Occ=Once] ->
                                                      $w$j_sacPG
                                                          ipv2_sacQR
                                                          ww13_sacQU
                                                          ww16_sacQX
                                                          ww17_sacQY
                                                          ww18_sacQZ
                                                          ww19_sacR0
                                                          ww20_sacR1
                                                          ww21_sacR2;
                                                };
                                          };
                                    };
                            };
                      };
              };
        };

GHC.IO.Handle.Internals.writeCharBuffer1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,1*U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sacR3 w1_sacR4 w2_sacR5]
        case w1_sacR4 of {
          GHC.IO.Buffer.Buffer ww1_sacR7 [Occ=Once]
                               ww2_sacR8 [Occ=Once]
                               ww3_sacR9 [Occ=Once]
                               ww4_sacRa [Occ=Once]
                               ww5_sacRb [Occ=Once]
                               ww6_sacRc [Occ=Once] ->
              GHC.IO.Handle.Internals.$wwriteCharBuffer
                  w_sacR3
                  ww1_sacR7
                  ww2_sacR8
                  ww3_sacR9
                  ww4_sacRa
                  ww5_sacRb
                  ww6_sacRc
                  w2_sacR5;
        };

GHC.IO.Handle.Internals.writeCharBuffer
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Buffer.CharBuffer -> GHC.Types.IO ()
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,1*U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.Internals.writeCharBuffer1 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.Internals.flushCharBuffer3
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_sacRd eta_sacRe]
        case ds_sacRd of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       dt_sacRl [Occ=Once*]
                                       _ [Occ=Dead]
                                       dt1_sacRn [Occ=Once]
                                       dt2_sacRo
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds5_sacRr [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt2_sacRo eta_sacRe] of {
                (#,#) ipv_sacRx [Occ=Once*] ipv1_sacRy [Occ=Once!] ->
                    case ipv1_sacRy of {
                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           ds11_sacRC [Occ=Once!]
                                           _ [Occ=Dead]
                                           dt7_sacRE [Occ=Once]
                                           dt8_sacRF [Occ=Once] ->
                          case ds11_sacRC of {
                            GHC.IO.Buffer.ReadBuffer ->
                                case ==# [dt7_sacRE dt8_sacRF] of {
                                  __DEFAULT ->
                                      case readMutVar# [dt1_sacRn ipv_sacRx] of {
                                        (#,#) ipv2_sacRJ [Occ=Once] ipv3_sacRK [Occ=Once!] ->
                                            case ipv3_sacRK of {
                                              (,) codec_state_sacRM [Occ=Once]
                                                  bbuf0_sacRN [Occ=Once*] ->
                                                  case readMutVar# [dt2_sacRo ipv2_sacRJ] of {
                                                    (#,#) ipv4_sacRP [Occ=Once] ipv5_sacRQ ->
                                                        let {
                                                          sat_sacRY [Occ=Once]
                                                            :: GHC.IO.Buffer.Buffer
                                                                 GHC.IO.Buffer.CharBufElem
                                                          [LclId] =
                                                              [ipv5_sacRQ] \u []
                                                                  case ipv5_sacRQ of {
                                                                    GHC.IO.Buffer.Buffer dt9_sacRS [Occ=Once]
                                                                                         dt10_sacRT [Occ=Once]
                                                                                         ds14_sacRU [Occ=Once]
                                                                                         dt11_sacRV [Occ=Once]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead] ->
                                                                        GHC.IO.Buffer.Buffer [dt9_sacRS
                                                                                              dt10_sacRT
                                                                                              ds14_sacRU
                                                                                              dt11_sacRV
                                                                                              0#
                                                                                              0#];
                                                                  };
                                                        } in 
                                                          case
                                                              writeMutVar# [dt2_sacRo
                                                                            sat_sacRY
                                                                            ipv4_sacRP]
                                                          of
                                                          s2#_sacRZ
                                                          { __DEFAULT ->
                                                                case ipv5_sacRQ of {
                                                                  GHC.IO.Buffer.Buffer dt9_sacS1 [Occ=Once]
                                                                                       dt10_sacS2 [Occ=Once]
                                                                                       ds14_sacS3 [Occ=Once]
                                                                                       _ [Occ=Dead]
                                                                                       dt12_sacS5 [Occ=Once!]
                                                                                       _ [Occ=Dead] ->
                                                                      case
                                                                          dt12_sacS5
                                                                      of
                                                                      wild5_sacS7
                                                                      { __DEFAULT ->
                                                                            case ds5_sacRr of {
                                                                              GHC.Base.Nothing ->
                                                                                  let {
                                                                                    sat_sacSh [Occ=Once]
                                                                                      :: GHC.IO.Buffer.Buffer
                                                                                           GHC.Word.Word8
                                                                                    [LclId] =
                                                                                        [bbuf0_sacRN
                                                                                         wild5_sacS7] \u []
                                                                                            case
                                                                                                bbuf0_sacRN
                                                                                            of
                                                                                            { GHC.IO.Buffer.Buffer dt14_sacSa [Occ=Once]
                                                                                                                   dt15_sacSb [Occ=Once]
                                                                                                                   ds15_sacSc [Occ=Once]
                                                                                                                   dt16_sacSd [Occ=Once]
                                                                                                                   dt17_sacSe [Occ=Once]
                                                                                                                   dt18_sacSf [Occ=Once] ->
                                                                                                  case
                                                                                                      +# [dt17_sacSe
                                                                                                          wild5_sacS7]
                                                                                                  of
                                                                                                  sat_sacSg
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.IO.Buffer.Buffer [dt14_sacSa
                                                                                                                              dt15_sacSb
                                                                                                                              ds15_sacSc
                                                                                                                              dt16_sacSd
                                                                                                                              sat_sacSg
                                                                                                                              dt18_sacSf];
                                                                                                  };
                                                                                            };
                                                                                  } in 
                                                                                    case
                                                                                        writeMutVar# [dt_sacRl
                                                                                                      sat_sacSh
                                                                                                      s2#_sacRZ]
                                                                                    of
                                                                                    s2#1_sacSi
                                                                                    { __DEFAULT ->
                                                                                          (#,#) [s2#1_sacSi
                                                                                                 GHC.Tuple.()];
                                                                                    };
                                                                              GHC.Base.Just decoder_sacSj [Occ=Once!] ->
                                                                                  case
                                                                                      decoder_sacSj
                                                                                  of
                                                                                  { GHC.IO.Encoding.Types.BufferCodec ds15_sacSl [Occ=Once]
                                                                                                                      ds16_sacSm [Occ=Once]
                                                                                                                      _ [Occ=Dead]
                                                                                                                      _ [Occ=Dead]
                                                                                                                      ds19_sacSp [Occ=Once!] ->
                                                                                        case
                                                                                            ds19_sacSp
                                                                                                codec_state_sacRM
                                                                                                s2#_sacRZ
                                                                                        of
                                                                                        { (#,#) ipv6_sacSr [Occ=Once]
                                                                                                _ [Occ=Dead] ->
                                                                                              let {
                                                                                                sat_sacSt [Occ=Once]
                                                                                                  :: GHC.IO.Buffer.Buffer
                                                                                                       GHC.IO.Buffer.CharBufElem
                                                                                                [LclId] =
                                                                                                    CCCS GHC.IO.Buffer.Buffer! [dt9_sacS1
                                                                                                                                dt10_sacS2
                                                                                                                                ds14_sacS3
                                                                                                                                wild5_sacS7
                                                                                                                                0#
                                                                                                                                0#];
                                                                                              } in 
                                                                                                case
                                                                                                    GHC.IO.Handle.Internals.$wstreamEncode
                                                                                                        ds15_sacSl
                                                                                                        ds16_sacSm
                                                                                                        bbuf0_sacRN
                                                                                                        sat_sacSt
                                                                                                        ipv6_sacSr
                                                                                                of
                                                                                                { (#,#) ipv8_sacSv [Occ=Once]
                                                                                                        ipv9_sacSw [Occ=Once!] ->
                                                                                                      case
                                                                                                          ipv9_sacSw
                                                                                                      of
                                                                                                      { (,) bbuf1_sacSy [Occ=Once]
                                                                                                            _ [Occ=Dead] ->
                                                                                                            case
                                                                                                                writeMutVar# [dt_sacRl
                                                                                                                              bbuf1_sacSy
                                                                                                                              ipv8_sacSv]
                                                                                                            of
                                                                                                            s2#1_sacSA
                                                                                                            { __DEFAULT ->
                                                                                                                  (#,#) [s2#1_sacSA
                                                                                                                         GHC.Tuple.()];
                                                                                                            };
                                                                                                      };
                                                                                                };
                                                                                        };
                                                                                  };
                                                                            };
                                                                        0# ->
                                                                            case
                                                                                writeMutVar# [dt_sacRl
                                                                                              bbuf0_sacRN
                                                                                              s2#_sacRZ]
                                                                            of
                                                                            s2#1_sacSB
                                                                            { __DEFAULT ->
                                                                                  (#,#) [s2#1_sacSB
                                                                                         GHC.Tuple.()];
                                                                            };
                                                                      };
                                                                };
                                                          };
                                                  };
                                            };
                                      };
                                  1# -> (#,#) [ipv_sacRx GHC.Tuple.()];
                                };
                            GHC.IO.Buffer.WriteBuffer -> (#,#) [ipv_sacRx GHC.Tuple.()];
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.flushCharReadBuffer
  :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.IO.Handle.Internals.flushCharBuffer3 eta_B2 eta_B1;

lvl9_ra7Pp :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "error"#;

lvl10_ra7Pq :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl9_ra7Pp;

lvl11_ra7Pr :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Internals.$trModule4;

lvl12_ra7Ps :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Internals.$trModule2;

lvl13_ra7Pt :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./GHC/IO/Handle/Internals.hs"#;

lvl14_ra7Pu :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl13_ra7Pt;

lvl15_ra7Pv :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [487#];

lvl16_ra7Pw :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [12#];

lvl17_ra7Px :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [68#];

lvl18_ra7Py :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl11_ra7Pr
                                           lvl12_ra7Ps
                                           lvl14_ra7Pu
                                           lvl15_ra7Pv
                                           lvl16_ra7Pw
                                           lvl15_ra7Pv
                                           lvl17_ra7Px];

lvl19_ra7Pz :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl10_ra7Pq
                                                  lvl18_ra7Py
                                                  GHC.Stack.Types.EmptyCallStack];

lvl20_ra7PA :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "internal IO library error: Char buffer non-empty"#;

GHC.IO.Handle.Internals.flushCharBuffer2 :: GHC.Types.IO ()
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl20_ra7PA of sat_sacSC {
          __DEFAULT -> GHC.Err.error lvl19_ra7Pz sat_sacSC;
        };

GHC.IO.Handle.Internals.flushCharBuffer1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h__sacSD eta_sacSE]
        case h__sacSD of wild_sacSF {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       dt2_sacSO [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt2_sacSO eta_sacSE] of {
                (#,#) ipv_sacSX [Occ=Once*] ipv1_sacSY [Occ=Once!] ->
                    case ipv1_sacSY of {
                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           ds10_sacT2 [Occ=Once!]
                                           _ [Occ=Dead]
                                           dt7_sacT4 [Occ=Once]
                                           dt8_sacT5 [Occ=Once] ->
                          case ds10_sacT2 of {
                            GHC.IO.Buffer.ReadBuffer ->
                                GHC.IO.Handle.Internals.flushCharBuffer3 wild_sacSF ipv_sacSX;
                            GHC.IO.Buffer.WriteBuffer ->
                                case ==# [dt7_sacT4 dt8_sacT5] of {
                                  __DEFAULT -> GHC.IO.Handle.Internals.flushCharBuffer2;
                                  1# -> (#,#) [ipv_sacSX GHC.Tuple.()];
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.flushCharBuffer
  :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.IO.Handle.Internals.flushCharBuffer1 eta_B2 eta_B1;

GHC.IO.Handle.Internals.flushBuffer2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h__sacT9 eta_sacTa]
        case h__sacT9 of {
          GHC.IO.Handle.Types.Handle__ $dIODevice_sacTc
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds_sacTf
                                       _ [Occ=Dead]
                                       dt_sacTh
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt_sacTh eta_sacTa] of {
                (#,#) ipv_sacTt [Occ=Once*] ipv1_sacTu [Occ=Once!] ->
                    case ipv1_sacTu of {
                      GHC.IO.Buffer.Buffer dt4_sacTw [Occ=Once]
                                           dt5_sacTx [Occ=Once]
                                           ds10_sacTy [Occ=Once]
                                           dt6_sacTz [Occ=Once]
                                           dt7_sacTA
                                           dt8_sacTB ->
                          case ==# [dt7_sacTA dt8_sacTB] of {
                            __DEFAULT ->
                                case
                                    GHC.IO.Device.isSeekable $dIODevice_sacTc ds_sacTf ipv_sacTt
                                of
                                { (#,#) ipv2_sacTE [Occ=Once*] ipv3_sacTF [Occ=Once!] ->
                                      case ipv3_sacTF of {
                                        GHC.Types.False ->
                                            raiseIO# [GHC.IO.Handle.Internals.flushBuffer3
                                                      ipv2_sacTE];
                                        GHC.Types.True ->
                                            let {
                                              sat_sacTJ [Occ=Once] :: GHC.Integer.Type.Integer
                                              [LclId] =
                                                  [dt7_sacTA dt8_sacTB] \u []
                                                      case -# [dt8_sacTB dt7_sacTA] of sat_sacTH {
                                                        __DEFAULT ->
                                                            case
                                                                negateInt# [sat_sacTH]
                                                            of
                                                            sat_sacTI
                                                            { __DEFAULT ->
                                                                  GHC.Integer.Type.smallInteger
                                                                      sat_sacTI;
                                                            };
                                                      };
                                            } in 
                                              case
                                                  GHC.IO.Device.seek
                                                      $dIODevice_sacTc
                                                      ds_sacTf
                                                      GHC.IO.Device.RelativeSeek
                                                      sat_sacTJ
                                                      ipv2_sacTE
                                              of
                                              { (#,#) ipv4_sacTL [Occ=Once] _ [Occ=Dead] ->
                                                    let {
                                                      sat_sacTN [Occ=Once]
                                                        :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                                      [LclId] =
                                                          CCCS GHC.IO.Buffer.Buffer! [dt4_sacTw
                                                                                      dt5_sacTx
                                                                                      ds10_sacTy
                                                                                      dt6_sacTz
                                                                                      0#
                                                                                      0#];
                                                    } in 
                                                      case
                                                          writeMutVar# [dt_sacTh
                                                                        sat_sacTN
                                                                        ipv4_sacTL]
                                                      of
                                                      s2#_sacTO
                                                      { __DEFAULT -> (#,#) [s2#_sacTO GHC.Tuple.()];
                                                      };
                                              };
                                      };
                                };
                            1# -> (#,#) [ipv_sacTt GHC.Tuple.()];
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.flushByteReadBuffer
  :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.IO.Handle.Internals.flushBuffer2 eta_B2 eta_B1;

GHC.IO.Handle.Internals.flushBuffer1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h__sacTP eta_sacTQ]
        case h__sacTP of wild_sacTR {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       $dBufferedIO_sacTT [Occ=Once]
                                       _ [Occ=Dead]
                                       ds_sacTV [Occ=Once]
                                       _ [Occ=Dead]
                                       dt_sacTX
                                       _ [Occ=Dead]
                                       dt1_sacTZ [Occ=Once]
                                       dt2_sacU0
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds4_sacU3 [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt2_sacU0 eta_sacTQ] of {
                (#,#) ipv_sacU9 [Occ=Once*] ipv1_sacUa [Occ=Once!] ->
                    case ipv1_sacUa of {
                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           ds10_sacUe [Occ=Once!]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
                          case ds10_sacUe of {
                            GHC.IO.Buffer.ReadBuffer ->
                                case readMutVar# [dt2_sacU0 ipv_sacU9] of {
                                  (#,#) ipv2_sacUk [Occ=Once*] ipv3_sacUl [Occ=Once!] ->
                                      case ipv3_sacUl of {
                                        GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             ds12_sacUp [Occ=Once!]
                                                             _ [Occ=Dead]
                                                             dt12_sacUr [Occ=Once]
                                                             dt13_sacUs [Occ=Once] ->
                                            case ds12_sacUp of {
                                              GHC.IO.Buffer.ReadBuffer ->
                                                  case ==# [dt12_sacUr dt13_sacUs] of {
                                                    __DEFAULT ->
                                                        case readMutVar# [dt1_sacTZ ipv2_sacUk] of {
                                                          (#,#) ipv4_sacUw [Occ=Once]
                                                                ipv5_sacUx [Occ=Once!] ->
                                                              case ipv5_sacUx of {
                                                                (,) codec_state_sacUz [Occ=Once]
                                                                    bbuf0_sacUA [Occ=Once*] ->
                                                                    case
                                                                        readMutVar# [dt2_sacU0
                                                                                     ipv4_sacUw]
                                                                    of
                                                                    { (#,#) ipv6_sacUC [Occ=Once]
                                                                            ipv7_sacUD ->
                                                                          let {
                                                                            sat_sacUL [Occ=Once]
                                                                              :: GHC.IO.Buffer.Buffer
                                                                                   GHC.IO.Buffer.CharBufElem
                                                                            [LclId] =
                                                                                [ipv7_sacUD] \u []
                                                                                    case
                                                                                        ipv7_sacUD
                                                                                    of
                                                                                    { GHC.IO.Buffer.Buffer dt14_sacUF [Occ=Once]
                                                                                                           dt15_sacUG [Occ=Once]
                                                                                                           ds15_sacUH [Occ=Once]
                                                                                                           dt16_sacUI [Occ=Once]
                                                                                                           _ [Occ=Dead]
                                                                                                           _ [Occ=Dead] ->
                                                                                          GHC.IO.Buffer.Buffer [dt14_sacUF
                                                                                                                dt15_sacUG
                                                                                                                ds15_sacUH
                                                                                                                dt16_sacUI
                                                                                                                0#
                                                                                                                0#];
                                                                                    };
                                                                          } in 
                                                                            case
                                                                                writeMutVar# [dt2_sacU0
                                                                                              sat_sacUL
                                                                                              ipv6_sacUC]
                                                                            of
                                                                            s2#_sacUM
                                                                            { __DEFAULT ->
                                                                                  case
                                                                                      ipv7_sacUD
                                                                                  of
                                                                                  { GHC.IO.Buffer.Buffer dt14_sacUO [Occ=Once]
                                                                                                         dt15_sacUP [Occ=Once]
                                                                                                         ds15_sacUQ [Occ=Once]
                                                                                                         _ [Occ=Dead]
                                                                                                         dt17_sacUS [Occ=Once!]
                                                                                                         _ [Occ=Dead] ->
                                                                                        case
                                                                                            dt17_sacUS
                                                                                        of
                                                                                        wild7_sacUU
                                                                                        { __DEFAULT ->
                                                                                              case
                                                                                                  ds4_sacU3
                                                                                              of
                                                                                              { GHC.Base.Nothing ->
                                                                                                    let {
                                                                                                      sat_sacV4 [Occ=Once]
                                                                                                        :: GHC.IO.Buffer.Buffer
                                                                                                             GHC.Word.Word8
                                                                                                      [LclId] =
                                                                                                          [bbuf0_sacUA
                                                                                                           wild7_sacUU] \u []
                                                                                                              case
                                                                                                                  bbuf0_sacUA
                                                                                                              of
                                                                                                              { GHC.IO.Buffer.Buffer dt19_sacUX [Occ=Once]
                                                                                                                                     dt20_sacUY [Occ=Once]
                                                                                                                                     ds16_sacUZ [Occ=Once]
                                                                                                                                     dt21_sacV0 [Occ=Once]
                                                                                                                                     dt22_sacV1 [Occ=Once]
                                                                                                                                     dt23_sacV2 [Occ=Once] ->
                                                                                                                    case
                                                                                                                        +# [dt22_sacV1
                                                                                                                            wild7_sacUU]
                                                                                                                    of
                                                                                                                    sat_sacV3
                                                                                                                    { __DEFAULT ->
                                                                                                                          GHC.IO.Buffer.Buffer [dt19_sacUX
                                                                                                                                                dt20_sacUY
                                                                                                                                                ds16_sacUZ
                                                                                                                                                dt21_sacV0
                                                                                                                                                sat_sacV3
                                                                                                                                                dt23_sacV2];
                                                                                                                    };
                                                                                                              };
                                                                                                    } in 
                                                                                                      case
                                                                                                          writeMutVar# [dt_sacTX
                                                                                                                        sat_sacV4
                                                                                                                        s2#_sacUM]
                                                                                                      of
                                                                                                      s2#1_sacV5
                                                                                                      { __DEFAULT ->
                                                                                                            GHC.IO.Handle.Internals.flushBuffer2
                                                                                                                wild_sacTR
                                                                                                                s2#1_sacV5;
                                                                                                      };
                                                                                                GHC.Base.Just decoder_sacV6 [Occ=Once!] ->
                                                                                                    case
                                                                                                        decoder_sacV6
                                                                                                    of
                                                                                                    { GHC.IO.Encoding.Types.BufferCodec ds16_sacV8 [Occ=Once]
                                                                                                                                        ds17_sacV9 [Occ=Once]
                                                                                                                                        _ [Occ=Dead]
                                                                                                                                        _ [Occ=Dead]
                                                                                                                                        ds20_sacVc [Occ=Once!] ->
                                                                                                          case
                                                                                                              ds20_sacVc
                                                                                                                  codec_state_sacUz
                                                                                                                  s2#_sacUM
                                                                                                          of
                                                                                                          { (#,#) ipv8_sacVe [Occ=Once]
                                                                                                                  _ [Occ=Dead] ->
                                                                                                                let {
                                                                                                                  sat_sacVg [Occ=Once]
                                                                                                                    :: GHC.IO.Buffer.Buffer
                                                                                                                         GHC.IO.Buffer.CharBufElem
                                                                                                                  [LclId] =
                                                                                                                      CCCS GHC.IO.Buffer.Buffer! [dt14_sacUO
                                                                                                                                                  dt15_sacUP
                                                                                                                                                  ds15_sacUQ
                                                                                                                                                  wild7_sacUU
                                                                                                                                                  0#
                                                                                                                                                  0#];
                                                                                                                } in 
                                                                                                                  case
                                                                                                                      GHC.IO.Handle.Internals.$wstreamEncode
                                                                                                                          ds16_sacV8
                                                                                                                          ds17_sacV9
                                                                                                                          bbuf0_sacUA
                                                                                                                          sat_sacVg
                                                                                                                          ipv8_sacVe
                                                                                                                  of
                                                                                                                  { (#,#) ipv10_sacVi [Occ=Once]
                                                                                                                          ipv11_sacVj [Occ=Once!] ->
                                                                                                                        case
                                                                                                                            ipv11_sacVj
                                                                                                                        of
                                                                                                                        { (,) bbuf1_sacVl [Occ=Once]
                                                                                                                              _ [Occ=Dead] ->
                                                                                                                              case
                                                                                                                                  writeMutVar# [dt_sacTX
                                                                                                                                                bbuf1_sacVl
                                                                                                                                                ipv10_sacVi]
                                                                                                                              of
                                                                                                                              s2#1_sacVn
                                                                                                                              { __DEFAULT ->
                                                                                                                                    GHC.IO.Handle.Internals.flushBuffer2
                                                                                                                                        wild_sacTR
                                                                                                                                        s2#1_sacVn;
                                                                                                                              };
                                                                                                                        };
                                                                                                                  };
                                                                                                          };
                                                                                                    };
                                                                                              };
                                                                                          0# ->
                                                                                              case
                                                                                                  writeMutVar# [dt_sacTX
                                                                                                                bbuf0_sacUA
                                                                                                                s2#_sacUM]
                                                                                              of
                                                                                              s2#1_sacVo
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Handle.Internals.flushBuffer2
                                                                                                        wild_sacTR
                                                                                                        s2#1_sacVo;
                                                                                              };
                                                                                        };
                                                                                  };
                                                                            };
                                                                    };
                                                              };
                                                        };
                                                    1# ->
                                                        GHC.IO.Handle.Internals.flushBuffer2
                                                            wild_sacTR ipv2_sacUk;
                                                  };
                                              GHC.IO.Buffer.WriteBuffer ->
                                                  GHC.IO.Handle.Internals.flushBuffer2
                                                      wild_sacTR ipv2_sacUk;
                                            };
                                      };
                                };
                            GHC.IO.Buffer.WriteBuffer ->
                                case readMutVar# [dt_sacTX ipv_sacU9] of {
                                  (#,#) ipv2_sacVq [Occ=Once*] ipv3_sacVr [Occ=Once!] ->
                                      case ipv3_sacVr of wild3_sacVs {
                                        GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             dt12_sacVx [Occ=Once]
                                                             dt13_sacVy [Occ=Once] ->
                                            case ==# [dt12_sacVx dt13_sacVy] of {
                                              __DEFAULT ->
                                                  case
                                                      GHC.IO.BufferedIO.flushWriteBuffer
                                                          $dBufferedIO_sacTT
                                                          ds_sacTV
                                                          wild3_sacVs
                                                          ipv2_sacVq
                                                  of
                                                  { (#,#) ipv4_sacVB [Occ=Once]
                                                          ipv5_sacVC [Occ=Once] ->
                                                        case
                                                            writeMutVar# [dt_sacTX
                                                                          ipv5_sacVC
                                                                          ipv4_sacVB]
                                                        of
                                                        s2#_sacVD
                                                        { __DEFAULT ->
                                                              (#,#) [s2#_sacVD GHC.Tuple.()];
                                                        };
                                                  };
                                              1# -> (#,#) [ipv2_sacVq GHC.Tuple.()];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.flushBuffer
  :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.IO.Handle.Internals.flushBuffer1 eta_B2 eta_B1;

lvl21_ra7PB :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC/IO/Handle/Internals.hs:881:7-30|Just decoder"#;

lvl22_ra7PC
  :: forall dec_state. (GHC.IO.Encoding.Types.TextDecoder dec_state)
[GblId, Str=x] =
    [] \u [] Control.Exception.Base.patError lvl21_ra7PB;

GHC.IO.Handle.Internals.hLookAhead_2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Buffer.CharBuffer #)
[GblId,
 Arity=3,
 Str=<S,1*U><L,U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [h__sacVE cbuf_sacVF eta_sacVG]
        case h__sacVE of wild_sacVH {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       $dBufferedIO_sacVJ [Occ=Once]
                                       _ [Occ=Dead]
                                       ds_sacVL [Occ=Once]
                                       _ [Occ=Dead]
                                       dt_sacVN
                                       _ [Occ=Dead]
                                       dt1_sacVP [Occ=Once*]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds4_sacVT [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt_sacVN eta_sacVG] of {
                (#,#) ipv_sacVZ [Occ=Once*] ipv1_sacW0 [Occ=Once!] ->
                    case ipv1_sacW0 of wild1_sacW1 {
                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           dt7_sacW6 [Occ=Once]
                                           dt8_sacW7 [Occ=Once] ->
                          let-no-escape {
                            $j_sacW8 [Occ=Once*!T[2], Dmd=<L,1*C1(C1(U(U,U)))>]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> GHC.IO.Buffer.Buffer GHC.Word.Word8
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                       GHC.IO.Buffer.CharBuffer #)
                            [LclId[JoinId(2)],
                             Arity=2,
                             Str=<S,U><L,U(U,U,U,U,U,U)>,
                             Unf=OtherCon []] =
                                sat-only [cbuf_sacVF
                                          wild_sacVH
                                          dt_sacVN
                                          dt1_sacVP
                                          ds4_sacVT] \r [ipv2_sacW9 ipv3_sacWa]
                                    case ds4_sacVT of {
                                      GHC.Base.Nothing ->
                                          let {
                                            sat_sacWc [Occ=Once]
                                              :: (dec_state_aa4pz,
                                                  GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                            [LclId] =
                                                CCCS (,)! [GHC.IO.Handle.Internals.decodeByteBuf2
                                                           ipv3_sacWa];
                                          } in 
                                            case
                                                writeMutVar# [dt1_sacVP sat_sacWc ipv2_sacW9]
                                            of
                                            s2#_sacWd
                                            { __DEFAULT ->
                                                  case
                                                      GHC.IO.Encoding.Latin1.latin5
                                                          ipv3_sacWa cbuf_sacVF s2#_sacWd
                                                  of
                                                  { (#,#) ipv4_sacWf [Occ=Once]
                                                          ipv5_sacWg [Occ=Once!] ->
                                                        case ipv5_sacWg of {
                                                          (,,) _ [Occ=Dead]
                                                               input'_sacWj
                                                               output'_sacWk [Occ=Once!] ->
                                                              case
                                                                  writeMutVar# [dt_sacVN
                                                                                input'_sacWj
                                                                                ipv4_sacWf]
                                                              of
                                                              s2#1_sacWl
                                                              { __DEFAULT ->
                                                                    case
                                                                        output'_sacWk
                                                                    of
                                                                    wild4_sacWm
                                                                    { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           dt13_sacWs [Occ=Once] ->
                                                                          case
                                                                              cbuf_sacVF
                                                                          of
                                                                          wild5_sacWt
                                                                          { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                                 _ [Occ=Dead]
                                                                                                 _ [Occ=Dead]
                                                                                                 _ [Occ=Dead]
                                                                                                 _ [Occ=Dead]
                                                                                                 dt18_sacWz [Occ=Once] ->
                                                                                case
                                                                                    ==# [dt13_sacWs
                                                                                         dt18_sacWz]
                                                                                of
                                                                                { __DEFAULT ->
                                                                                      (#,#) [s2#1_sacWl
                                                                                             wild4_sacWm];
                                                                                  1# ->
                                                                                      case
                                                                                          input'_sacWj
                                                                                      of
                                                                                      { GHC.IO.Buffer.Buffer ww1_sacWC [Occ=Once]
                                                                                                             ww2_sacWD [Occ=Once]
                                                                                                             ww3_sacWE [Occ=Once]
                                                                                                             ww4_sacWF [Occ=Once]
                                                                                                             ww5_sacWG [Occ=Once]
                                                                                                             ww6_sacWH [Occ=Once] ->
                                                                                            GHC.IO.Handle.Internals.$wreadTextDevice'
                                                                                                wild_sacVH
                                                                                                ww1_sacWC
                                                                                                ww2_sacWD
                                                                                                ww3_sacWE
                                                                                                ww4_sacWF
                                                                                                ww5_sacWG
                                                                                                ww6_sacWH
                                                                                                wild5_sacWt
                                                                                                s2#1_sacWl;
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      GHC.Base.Just decoder_sacWI [Occ=Once!] ->
                                          case decoder_sacWI of {
                                            GHC.IO.Encoding.Types.BufferCodec ds11_sacWK [Occ=Once]
                                                                              ds12_sacWL [Occ=Once]
                                                                              _ [Occ=Dead]
                                                                              ds14_sacWN [Occ=Once]
                                                                              _ [Occ=Dead] ->
                                                case ds14_sacWN ipv2_sacW9 of {
                                                  (#,#) ipv4_sacWQ [Occ=Once]
                                                        ipv5_sacWR [Occ=Once] ->
                                                      let {
                                                        sat_sacWS [Occ=Once]
                                                          :: (dec_state_aa4pz,
                                                              GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                                        [LclId] =
                                                            CCCS (,)! [ipv5_sacWR ipv3_sacWa];
                                                      } in 
                                                        case
                                                            writeMutVar# [dt1_sacVP
                                                                          sat_sacWS
                                                                          ipv4_sacWQ]
                                                        of
                                                        s2#_sacWT
                                                        { __DEFAULT ->
                                                              case
                                                                  GHC.IO.Handle.Internals.$wstreamEncode
                                                                      ds11_sacWK
                                                                      ds12_sacWL
                                                                      ipv3_sacWa
                                                                      cbuf_sacVF
                                                                      s2#_sacWT
                                                              of
                                                              { (#,#) ipv6_sacWV [Occ=Once]
                                                                      ipv7_sacWW [Occ=Once!] ->
                                                                    case ipv7_sacWW of {
                                                                      (,) bbuf2_sacWY
                                                                          cbuf'_sacWZ [Occ=Once!] ->
                                                                          case
                                                                              writeMutVar# [dt_sacVN
                                                                                            bbuf2_sacWY
                                                                                            ipv6_sacWV]
                                                                          of
                                                                          s2#1_sacX0
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    cbuf'_sacWZ
                                                                                of
                                                                                wild5_sacX1
                                                                                { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                                       _ [Occ=Dead]
                                                                                                       _ [Occ=Dead]
                                                                                                       _ [Occ=Dead]
                                                                                                       _ [Occ=Dead]
                                                                                                       dt13_sacX7 [Occ=Once] ->
                                                                                      case
                                                                                          cbuf_sacVF
                                                                                      of
                                                                                      wild6_sacX8
                                                                                      { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                                             _ [Occ=Dead]
                                                                                                             _ [Occ=Dead]
                                                                                                             _ [Occ=Dead]
                                                                                                             _ [Occ=Dead]
                                                                                                             dt18_sacXe [Occ=Once] ->
                                                                                            case
                                                                                                ==# [dt13_sacX7
                                                                                                     dt18_sacXe]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  (#,#) [s2#1_sacX0
                                                                                                         wild5_sacX1];
                                                                                              1# ->
                                                                                                  case
                                                                                                      bbuf2_sacWY
                                                                                                  of
                                                                                                  { GHC.IO.Buffer.Buffer ww1_sacXh [Occ=Once]
                                                                                                                         ww2_sacXi [Occ=Once]
                                                                                                                         ww3_sacXj [Occ=Once]
                                                                                                                         ww4_sacXk [Occ=Once]
                                                                                                                         ww5_sacXl [Occ=Once]
                                                                                                                         ww6_sacXm [Occ=Once] ->
                                                                                                        GHC.IO.Handle.Internals.$wreadTextDevice'
                                                                                                            wild_sacVH
                                                                                                            ww1_sacXh
                                                                                                            ww2_sacXi
                                                                                                            ww3_sacXj
                                                                                                            ww4_sacXk
                                                                                                            ww5_sacXl
                                                                                                            ww6_sacXm
                                                                                                            wild6_sacX8
                                                                                                            s2#1_sacX0;
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                };
                                          };
                                    };
                          } in 
                            case ==# [dt7_sacW6 dt8_sacW7] of {
                              __DEFAULT -> $j_sacW8 ipv_sacVZ wild1_sacW1;
                              1# ->
                                  case
                                      GHC.IO.BufferedIO.fillReadBuffer
                                          $dBufferedIO_sacVJ ds_sacVL wild1_sacW1 ipv_sacVZ
                                  of
                                  { (#,#) ipv2_sacXp [Occ=Once*] ipv3_sacXq [Occ=Once!] ->
                                        case ipv3_sacXq of {
                                          (,) r_sacXs [Occ=Once!] bbuf1_sacXt [Occ=Once] ->
                                              case r_sacXs of {
                                                GHC.Types.I# x_sacXv [Occ=Once!] ->
                                                    case x_sacXv of {
                                                      __DEFAULT -> $j_sacW8 ipv2_sacXp bbuf1_sacXt;
                                                      0# ->
                                                          raiseIO# [GHC.IO.Handle.Internals.hLookAhead_3
                                                                    ipv2_sacXp];
                                                    };
                                              };
                                        };
                                  };
                            };
                    };
              };
        };
GHC.IO.Handle.Internals.$wreadTextDevice' [InlPrag=NOUSERINLINE[0],
                                           Occ=LoopBreaker]
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> GHC.IO.Buffer.BufferState
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Buffer.CharBuffer #)
[GblId,
 Arity=9,
 Str=<S,1*U><S,U><L,U><L,U><L,U><S,U><S,U><L,U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sacXy
           ww_sacXz
           ww1_sacXA
           ww2_sacXB
           ww3_sacXC
           ww4_sacXD
           ww5_sacXE
           w1_sacXF
           w2_sacXG]
        case w_sacXy of wild_sacXH {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       $dBufferedIO_sacXJ [Occ=Once]
                                       _ [Occ=Dead]
                                       ds_sacXL [Occ=Once]
                                       _ [Occ=Dead]
                                       dt_sacXN [Occ=Once*]
                                       _ [Occ=Dead]
                                       dt1_sacXP [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds4_sacXT [Occ=Once*!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case -# [ww5_sacXE ww4_sacXD] of elems_sacXY [Dmd=<S,U>] {
                __DEFAULT ->
                    case int2Word# [elems_sacXY] of sat_sacY1 {
                      __DEFAULT ->
                          case plusAddr# [ww_sacXz ww4_sacXD] of sat_sacY0 {
                            __DEFAULT ->
                                case
                                    __pkg_ccall base-4.11.0.0 [ww_sacXz
                                                               sat_sacY0
                                                               sat_sacY1
                                                               w2_sacXG]
                                of
                                { (#,#) ds9_sacY3 [Occ=Once] _ [Occ=Dead] ->
                                      case touch# [ww1_sacXA ds9_sacY3] of s'_sacY5 {
                                        __DEFAULT ->
                                            let {
                                              sat_sacY6 [Occ=Once]
                                                :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                              [LclId] =
                                                  CCCS GHC.IO.Buffer.Buffer! [ww_sacXz
                                                                              ww1_sacXA
                                                                              ww2_sacXB
                                                                              ww3_sacXC
                                                                              0#
                                                                              elems_sacXY];
                                            } in 
                                              case
                                                  GHC.IO.BufferedIO.fillReadBuffer
                                                      $dBufferedIO_sacXJ ds_sacXL sat_sacY6 s'_sacY5
                                              of
                                              { (#,#) ipv_sacY8 [Occ=Once*]
                                                      ipv1_sacY9 [Occ=Once!] ->
                                                    case ipv1_sacY9 of {
                                                      (,) r_sacYb [Occ=Once!] bbuf2_sacYc ->
                                                          case r_sacYb of {
                                                            GHC.Types.I# x_sacYe [Occ=Once!] ->
                                                                case x_sacYe of {
                                                                  __DEFAULT ->
                                                                      case ds4_sacXT of {
                                                                        GHC.Base.Nothing ->
                                                                            lvl22_ra7PC;
                                                                        GHC.Base.Just decoder_sacYi [Occ=Once!] ->
                                                                            case decoder_sacYi of {
                                                                              GHC.IO.Encoding.Types.BufferCodec ds12_sacYk [Occ=Once]
                                                                                                                ds13_sacYl [Occ=Once]
                                                                                                                _ [Occ=Dead]
                                                                                                                ds15_sacYn [Occ=Once]
                                                                                                                _ [Occ=Dead] ->
                                                                                  case
                                                                                      ds15_sacYn
                                                                                          ipv_sacY8
                                                                                  of
                                                                                  { (#,#) ipv2_sacYq [Occ=Once]
                                                                                          ipv3_sacYr [Occ=Once] ->
                                                                                        let {
                                                                                          sat_sacYs [Occ=Once]
                                                                                            :: (dec_state_aa4ra,
                                                                                                GHC.IO.Buffer.Buffer
                                                                                                  GHC.Word.Word8)
                                                                                          [LclId] =
                                                                                              CCCS (,)! [ipv3_sacYr
                                                                                                         bbuf2_sacYc];
                                                                                        } in 
                                                                                          case
                                                                                              writeMutVar# [dt1_sacXP
                                                                                                            sat_sacYs
                                                                                                            ipv2_sacYq]
                                                                                          of
                                                                                          s2#_sacYt
                                                                                          { __DEFAULT ->
                                                                                                case
                                                                                                    GHC.IO.Handle.Internals.$wstreamEncode
                                                                                                        ds12_sacYk
                                                                                                        ds13_sacYl
                                                                                                        bbuf2_sacYc
                                                                                                        w1_sacXF
                                                                                                        s2#_sacYt
                                                                                                of
                                                                                                { (#,#) ipv4_sacYv [Occ=Once]
                                                                                                        ipv5_sacYw [Occ=Once!] ->
                                                                                                      case
                                                                                                          ipv5_sacYw
                                                                                                      of
                                                                                                      { (,) bbuf3_sacYy
                                                                                                            cbuf1_sacYz [Occ=Once!] ->
                                                                                                            case
                                                                                                                writeMutVar# [dt_sacXN
                                                                                                                              bbuf3_sacYy
                                                                                                                              ipv4_sacYv]
                                                                                                            of
                                                                                                            s2#1_sacYA
                                                                                                            { __DEFAULT ->
                                                                                                                  case
                                                                                                                      w1_sacXF
                                                                                                                  of
                                                                                                                  { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                                                                         _ [Occ=Dead]
                                                                                                                                         _ [Occ=Dead]
                                                                                                                                         _ [Occ=Dead]
                                                                                                                                         _ [Occ=Dead]
                                                                                                                                         dt8_sacYH [Occ=Once] ->
                                                                                                                        case
                                                                                                                            cbuf1_sacYz
                                                                                                                        of
                                                                                                                        wild9_sacYI
                                                                                                                        { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                                                                               _ [Occ=Dead]
                                                                                                                                               _ [Occ=Dead]
                                                                                                                                               _ [Occ=Dead]
                                                                                                                                               _ [Occ=Dead]
                                                                                                                                               dt13_sacYO [Occ=Once] ->
                                                                                                                              case
                                                                                                                                  ==# [dt8_sacYH
                                                                                                                                       dt13_sacYO]
                                                                                                                              of
                                                                                                                              { __DEFAULT ->
                                                                                                                                    (#,#) [s2#1_sacYA
                                                                                                                                           wild9_sacYI];
                                                                                                                                1# ->
                                                                                                                                    case
                                                                                                                                        bbuf3_sacYy
                                                                                                                                    of
                                                                                                                                    { GHC.IO.Buffer.Buffer ww7_sacYR [Occ=Once]
                                                                                                                                                           ww8_sacYS [Occ=Once]
                                                                                                                                                           ww9_sacYT [Occ=Once]
                                                                                                                                                           ww10_sacYU [Occ=Once]
                                                                                                                                                           ww11_sacYV [Occ=Once]
                                                                                                                                                           ww12_sacYW [Occ=Once] ->
                                                                                                                                          GHC.IO.Handle.Internals.$wreadTextDevice'
                                                                                                                                              wild_sacXH
                                                                                                                                              ww7_sacYR
                                                                                                                                              ww8_sacYS
                                                                                                                                              ww9_sacYT
                                                                                                                                              ww10_sacYU
                                                                                                                                              ww11_sacYV
                                                                                                                                              ww12_sacYW
                                                                                                                                              wild9_sacYI
                                                                                                                                              s2#1_sacYA;
                                                                                                                                    };
                                                                                                                              };
                                                                                                                        };
                                                                                                                  };
                                                                                                            };
                                                                                                      };
                                                                                                };
                                                                                          };
                                                                                  };
                                                                            };
                                                                      };
                                                                  0# ->
                                                                      case
                                                                          bbuf2_sacYc
                                                                      of
                                                                      wild5_sacYX
                                                                      { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             dt7_sacZ2 [Occ=Once]
                                                                                             dt8_sacZ3 [Occ=Once] ->
                                                                            case
                                                                                ==# [dt7_sacZ2
                                                                                     dt8_sacZ3]
                                                                            of
                                                                            { __DEFAULT ->
                                                                                  case
                                                                                      ds4_sacXT
                                                                                  of
                                                                                  { GHC.Base.Nothing ->
                                                                                        lvl22_ra7PC;
                                                                                    GHC.Base.Just decoder_sacZ7 [Occ=Once!] ->
                                                                                        case
                                                                                            decoder_sacZ7
                                                                                        of
                                                                                        { GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                                                            ds14_sacZa [Occ=Once!]
                                                                                                                            _ [Occ=Dead]
                                                                                                                            _ [Occ=Dead]
                                                                                                                            _ [Occ=Dead] ->
                                                                                              case
                                                                                                  ds14_sacZa
                                                                                                      wild5_sacYX
                                                                                                      w1_sacXF
                                                                                                      ipv_sacY8
                                                                                              of
                                                                                              { (#,#) ipv2_sacZf [Occ=Once]
                                                                                                      ipv3_sacZg [Occ=Once!] ->
                                                                                                    case
                                                                                                        ipv3_sacZg
                                                                                                    of
                                                                                                    { (,) bbuf3_sacZi [Occ=Once]
                                                                                                          cbuf1_sacZj [Occ=Once!] ->
                                                                                                          case
                                                                                                              writeMutVar# [dt_sacXN
                                                                                                                            bbuf3_sacZi
                                                                                                                            ipv2_sacZf]
                                                                                                          of
                                                                                                          s2#_sacZk
                                                                                                          { __DEFAULT ->
                                                                                                                case
                                                                                                                    cbuf1_sacZj
                                                                                                                of
                                                                                                                wild9_sacZl
                                                                                                                { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                                                                       _ [Occ=Dead]
                                                                                                                                       _ [Occ=Dead]
                                                                                                                                       _ [Occ=Dead]
                                                                                                                                       _ [Occ=Dead]
                                                                                                                                       dt13_sacZr [Occ=Once] ->
                                                                                                                      case
                                                                                                                          w1_sacXF
                                                                                                                      of
                                                                                                                      { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                                                                             _ [Occ=Dead]
                                                                                                                                             _ [Occ=Dead]
                                                                                                                                             _ [Occ=Dead]
                                                                                                                                             _ [Occ=Dead]
                                                                                                                                             dt18_sacZy [Occ=Once] ->
                                                                                                                            case
                                                                                                                                ==# [dt13_sacZr
                                                                                                                                     dt18_sacZy]
                                                                                                                            of
                                                                                                                            { __DEFAULT ->
                                                                                                                                  (#,#) [s2#_sacZk
                                                                                                                                         wild9_sacZl];
                                                                                                                              1# ->
                                                                                                                                  GHC.IO.Handle.Internals.hLookAhead_2
                                                                                                                                      wild_sacXH
                                                                                                                                      wild9_sacZl
                                                                                                                                      s2#_sacZk;
                                                                                                                            };
                                                                                                                      };
                                                                                                                };
                                                                                                          };
                                                                                                    };
                                                                                              };
                                                                                        };
                                                                                  };
                                                                              1# ->
                                                                                  raiseIO# [GHC.IO.Handle.Internals.hLookAhead_3
                                                                                            ipv_sacY8];
                                                                            };
                                                                      };
                                                                };
                                                          };
                                                    };
                                              };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.readTextDevice
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Types.IO GHC.IO.Buffer.CharBuffer
[GblId,
 Arity=3,
 Str=<S,1*U><L,U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.Internals.hLookAhead_2 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.Internals.hLookAhead_1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Char #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle__sacZA eta_sacZB]
        case handle__sacZA of wild_sacZC {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       dt2_sacZL
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt2_sacZL eta_sacZB] of {
                (#,#) ipv_sacZU [Occ=Once*] ipv1_sacZV [Occ=Once!] ->
                    case ipv1_sacZV of wild1_sacZW {
                      GHC.IO.Buffer.Buffer dt4_sacZX [Occ=Once*]
                                           dt5_sacZY [Occ=Once*]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           dt7_sad01
                                           dt8_sad02 [Occ=Once] ->
                          case ==# [dt7_sad01 dt8_sad02] of {
                            __DEFAULT ->
                                case writeMutVar# [dt2_sacZL wild1_sacZW ipv_sacZU] of s2#_sad04 {
                                  __DEFAULT ->
                                      case readWideCharOffAddr# [dt4_sacZX dt7_sad01 s2#_sad04] of {
                                        (#,#) ipv2_sad06 [Occ=Once] ipv3_sad07 [Occ=Once] ->
                                            case touch# [dt5_sacZY ipv2_sad06] of s'_sad08 {
                                              __DEFAULT ->
                                                  let {
                                                    sat_sad09 [Occ=Once] :: GHC.Types.Char
                                                    [LclId] =
                                                        CCCS GHC.Types.C#! [ipv3_sad07];
                                                  } in  (#,#) [s'_sad08 sat_sad09];
                                            };
                                      };
                                };
                            1# ->
                                case
                                    GHC.IO.Handle.Internals.hLookAhead_2
                                        wild_sacZC wild1_sacZW ipv_sacZU
                                of
                                { (#,#) ipv2_sad0b [Occ=Once] ipv3_sad0c [Occ=Once] ->
                                      case
                                          writeMutVar# [dt2_sacZL ipv3_sad0c ipv2_sad0b]
                                      of
                                      s2#_sad0d
                                      { __DEFAULT ->
                                            case
                                                readWideCharOffAddr# [dt4_sacZX dt7_sad01 s2#_sad0d]
                                            of
                                            { (#,#) ipv4_sad0f [Occ=Once] ipv5_sad0g [Occ=Once] ->
                                                  case touch# [dt5_sacZY ipv4_sad0f] of s'_sad0h {
                                                    __DEFAULT ->
                                                        let {
                                                          sat_sad0i [Occ=Once] :: GHC.Types.Char
                                                          [LclId] =
                                                              CCCS GHC.Types.C#! [ipv5_sad0g];
                                                        } in  (#,#) [s'_sad0h sat_sad0i];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.hLookAhead_
  :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO GHC.Types.Char
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.IO.Handle.Internals.hLookAhead_1 eta_B2 eta_B1;

GHC.IO.Handle.Internals.hClose_help2
  :: GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Base.Maybe GHC.Exception.SomeException #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [e1_sad0j s_sad0k]
        let {
          sat_sad0l [Occ=Once] :: GHC.Base.Maybe GHC.Exception.SomeException
          [LclId] =
              CCCS GHC.Base.Just! [e1_sad0j];
        } in  (#,#) [s_sad0k sat_sad0l];

GHC.IO.Handle.Internals.hClose_help1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__,
            GHC.Base.Maybe GHC.Exception.SomeException) #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle__sad0m eta_sad0n]
        case handle__sad0m of wild_sad0o {
          GHC.IO.Handle.Types.Handle__ $dIODevice_sad0p
                                       $dBufferedIO_sad0q
                                       $dTypeable_sad0r [Occ=Once*]
                                       ds1_sad0s
                                       ds2_sad0t [Occ=Once!]
                                       dt_sad0u
                                       ds3_sad0v [Occ=Once*]
                                       dt1_sad0w [Occ=Once*]
                                       dt2_sad0x
                                       dt3_sad0y
                                       ds4_sad0z [Occ=Once!]
                                       ds5_sad0A
                                       ds6_sad0B [Occ=Once*]
                                       ds7_sad0C [Occ=Once*]
                                       ds8_sad0D [Occ=Once*]
                                       ds9_sad0E ->
              case ds2_sad0t of {
                __DEFAULT ->
                    let {
                      sat_sad17 [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 GHC.Base.Maybe GHC.Exception.SomeException #)
                      [LclId] =
                          [$dBufferedIO_sad0q ds1_sad0s dt_sad0u] \r [s_sad0G]
                              case readMutVar# [dt_sad0u s_sad0G] of {
                                (#,#) ipv_sad0I [Occ=Once*] ipv1_sad0J [Occ=Once!] ->
                                    case ipv1_sad0J of {
                                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           ds_sad0N [Occ=Once!]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead] ->
                                          case ds_sad0N of {
                                            GHC.IO.Buffer.ReadBuffer ->
                                                (#,#) [ipv_sad0I GHC.Base.Nothing];
                                            GHC.IO.Buffer.WriteBuffer ->
                                                case readMutVar# [dt_sad0u ipv_sad0I] of {
                                                  (#,#) ipv2_sad0T [Occ=Once*]
                                                        ipv3_sad0U [Occ=Once!] ->
                                                      case ipv3_sad0U of wild4_sad0V {
                                                        GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                             _ [Occ=Dead]
                                                                             _ [Occ=Dead]
                                                                             _ [Occ=Dead]
                                                                             dt12_sad10 [Occ=Once]
                                                                             dt13_sad11 [Occ=Once] ->
                                                            case ==# [dt12_sad10 dt13_sad11] of {
                                                              __DEFAULT ->
                                                                  case
                                                                      GHC.IO.BufferedIO.flushWriteBuffer
                                                                          $dBufferedIO_sad0q
                                                                          ds1_sad0s
                                                                          wild4_sad0V
                                                                          ipv2_sad0T
                                                                  of
                                                                  { (#,#) ipv4_sad14 [Occ=Once]
                                                                          ipv5_sad15 [Occ=Once] ->
                                                                        case
                                                                            writeMutVar# [dt_sad0u
                                                                                          ipv5_sad15
                                                                                          ipv4_sad14]
                                                                        of
                                                                        s2#_sad16
                                                                        { __DEFAULT ->
                                                                              (#,#) [s2#_sad16
                                                                                     GHC.Base.Nothing];
                                                                        };
                                                                  };
                                                              1# ->
                                                                  (#,#) [ipv2_sad0T
                                                                         GHC.Base.Nothing];
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                    } in 
                      case
                          catch# [sat_sad17 GHC.IO.Handle.Internals.hClose_help2 eta_sad0n]
                      of
                      { (#,#) ipv_sad19 [Occ=Once*] ipv1_sad1a [Occ=Once*!] ->
                            let-no-escape {
                              $j_sad1b [Occ=Once*!T[2], Dmd=<C(C(S)),1*C1(C1(U(U,U)))>]
                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                   -> GHC.Base.Maybe GHC.Exception.SomeException
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         (GHC.IO.Handle.Types.Handle__,
                                          GHC.Base.Maybe GHC.Exception.SomeException) #)
                              [LclId[JoinId(2)], Arity=2, Str=<S,U><L,1*U>, Unf=OtherCon []] =
                                  sat-only [$dIODevice_sad0p
                                            $dBufferedIO_sad0q
                                            $dTypeable_sad0r
                                            ds1_sad0s
                                            dt_sad0u
                                            ds3_sad0v
                                            dt1_sad0w
                                            dt2_sad0x
                                            dt3_sad0y
                                            ds4_sad0z
                                            ds5_sad0A
                                            ds6_sad0B
                                            ds7_sad0C
                                            ds8_sad0D
                                            ds9_sad0E
                                            ipv1_sad1a] \r [ipv2_sad1c ipv3_sad1d]
                                      case
                                          writeMutVar# [dt3_sad0y
                                                        GHC.IO.Handle.Types.BufferListNil
                                                        ipv2_sad1c]
                                      of
                                      s2#_sad1e
                                      { __DEFAULT ->
                                            case
                                                writeMutVar# [dt2_sad0x
                                                              GHC.IO.Handle.Internals.noCharBuffer
                                                              s2#_sad1e]
                                            of
                                            s2#1_sad1f
                                            { __DEFAULT ->
                                                  case
                                                      writeMutVar# [dt_sad0u
                                                                    GHC.IO.Handle.Internals.noByteBuffer
                                                                    s2#1_sad1f]
                                                  of
                                                  s2#2_sad1g
                                                  { __DEFAULT ->
                                                        let-no-escape {
                                                          $w$j_sad1h [InlPrag=NOUSERINLINE[0],
                                                                      Occ=Once*!T[1],
                                                                      Dmd=<L,1*C1(U(U,U))>]
                                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     (GHC.IO.Handle.Types.Handle__,
                                                                      GHC.Base.Maybe
                                                                        GHC.Exception.SomeException) #)
                                                          [LclId[JoinId(1)],
                                                           Arity=1,
                                                           Str=<S,U>,
                                                           Unf=OtherCon []] =
                                                              sat-only [$dIODevice_sad0p
                                                                        $dBufferedIO_sad0q
                                                                        $dTypeable_sad0r
                                                                        ds1_sad0s
                                                                        dt_sad0u
                                                                        ds3_sad0v
                                                                        dt1_sad0w
                                                                        dt2_sad0x
                                                                        dt3_sad0y
                                                                        ds4_sad0z
                                                                        ds5_sad0A
                                                                        ds6_sad0B
                                                                        ds7_sad0C
                                                                        ds8_sad0D
                                                                        ds9_sad0E
                                                                        ipv1_sad1a
                                                                        ipv3_sad1d] \r [w_sad1i]
                                                                  case ds4_sad0z of wild2_sad1j {
                                                                    GHC.Base.Nothing ->
                                                                        let {
                                                                          sat_sad1n [Occ=Once]
                                                                            :: GHC.Base.Maybe
                                                                                 GHC.Exception.SomeException
                                                                          [LclId] =
                                                                              [ipv1_sad1a
                                                                               ipv3_sad1d] \u []
                                                                                  case
                                                                                      ipv1_sad1a
                                                                                  of
                                                                                  wild3_sad1l
                                                                                  { GHC.Base.Nothing ->
                                                                                        ipv3_sad1d;
                                                                                    GHC.Base.Just _ [Occ=Dead] ->
                                                                                        wild3_sad1l;
                                                                                  }; } in
                                                                        let {
                                                                          sat_sad1k [Occ=Once]
                                                                            :: GHC.IO.Handle.Types.Handle__
                                                                          [LclId] =
                                                                              CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sad0p
                                                                                                                  $dBufferedIO_sad0q
                                                                                                                  $dTypeable_sad0r
                                                                                                                  ds1_sad0s
                                                                                                                  GHC.IO.Handle.Types.ClosedHandle
                                                                                                                  dt_sad0u
                                                                                                                  ds3_sad0v
                                                                                                                  dt1_sad0w
                                                                                                                  dt2_sad0x
                                                                                                                  dt3_sad0y
                                                                                                                  GHC.Base.Nothing
                                                                                                                  ds5_sad0A
                                                                                                                  ds6_sad0B
                                                                                                                  ds7_sad0C
                                                                                                                  ds8_sad0D
                                                                                                                  ds9_sad0E]; } in
                                                                        let {
                                                                          sat_sad1o [Occ=Once]
                                                                            :: (GHC.IO.Handle.Types.Handle__,
                                                                                GHC.Base.Maybe
                                                                                  GHC.Exception.SomeException)
                                                                          [LclId] =
                                                                              CCCS (,)! [sat_sad1k
                                                                                         sat_sad1n];
                                                                        } in 
                                                                          (#,#) [w_sad1i sat_sad1o];
                                                                    GHC.Base.Just d_sad1p [Occ=Once!] ->
                                                                        case d_sad1p of {
                                                                          GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                                            _ [Occ=Dead]
                                                                                                            ds14_sad1t [Occ=Once]
                                                                                                            _ [Occ=Dead]
                                                                                                            _ [Occ=Dead] ->
                                                                              case
                                                                                  ds14_sad1t w_sad1i
                                                                              of
                                                                              { (#,#) ipv4_sad1x [Occ=Once]
                                                                                      _ [Occ=Dead] ->
                                                                                    let {
                                                                                      sat_sad1C [Occ=Once]
                                                                                        :: GHC.Base.Maybe
                                                                                             GHC.Exception.SomeException
                                                                                      [LclId] =
                                                                                          [ipv1_sad1a
                                                                                           ipv3_sad1d] \u []
                                                                                              case
                                                                                                  ipv1_sad1a
                                                                                              of
                                                                                              wild4_sad1A
                                                                                              { GHC.Base.Nothing ->
                                                                                                    ipv3_sad1d;
                                                                                                GHC.Base.Just _ [Occ=Dead] ->
                                                                                                    wild4_sad1A;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_sad1z [Occ=Once]
                                                                                        :: GHC.IO.Handle.Types.Handle__
                                                                                      [LclId] =
                                                                                          CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sad0p
                                                                                                                              $dBufferedIO_sad0q
                                                                                                                              $dTypeable_sad0r
                                                                                                                              ds1_sad0s
                                                                                                                              GHC.IO.Handle.Types.ClosedHandle
                                                                                                                              dt_sad0u
                                                                                                                              ds3_sad0v
                                                                                                                              dt1_sad0w
                                                                                                                              dt2_sad0x
                                                                                                                              dt3_sad0y
                                                                                                                              wild2_sad1j
                                                                                                                              ds5_sad0A
                                                                                                                              ds6_sad0B
                                                                                                                              ds7_sad0C
                                                                                                                              ds8_sad0D
                                                                                                                              ds9_sad0E]; } in
                                                                                    let {
                                                                                      sat_sad1D [Occ=Once]
                                                                                        :: (GHC.IO.Handle.Types.Handle__,
                                                                                            GHC.Base.Maybe
                                                                                              GHC.Exception.SomeException)
                                                                                      [LclId] =
                                                                                          CCCS (,)! [sat_sad1z
                                                                                                     sat_sad1C];
                                                                                    } in 
                                                                                      (#,#) [ipv4_sad1x
                                                                                             sat_sad1D];
                                                                              };
                                                                        };
                                                                  };
                                                        } in 
                                                          case ds5_sad0A of {
                                                            GHC.Base.Nothing ->
                                                                $w$j_sad1h s2#2_sad1g;
                                                            GHC.Base.Just d_sad1F [Occ=Once!] ->
                                                                case d_sad1F of {
                                                                  GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                                    _ [Occ=Dead]
                                                                                                    ds14_sad1J [Occ=Once]
                                                                                                    _ [Occ=Dead]
                                                                                                    _ [Occ=Dead] ->
                                                                      case
                                                                          ds14_sad1J s2#2_sad1g
                                                                      of
                                                                      { (#,#) ipv4_sad1N [Occ=Once]
                                                                              _ [Occ=Dead] ->
                                                                            $w$j_sad1h ipv4_sad1N;
                                                                      };
                                                                };
                                                          };
                                                  };
                                            };
                                      };
                            } in 
                              case ds9_sad0E of {
                                GHC.Base.Nothing ->
                                    let {
                                      sat_sad1U [Occ=Once]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                 GHC.Base.Maybe GHC.Exception.SomeException #)
                                      [LclId] =
                                          [$dIODevice_sad0p ds1_sad0s] \r [s_sad1Q]
                                              case
                                                  GHC.IO.Device.close
                                                      $dIODevice_sad0p ds1_sad0s s_sad1Q
                                              of
                                              { (#,#) ipv2_sad1S [Occ=Once] _ [Occ=Dead] ->
                                                    (#,#) [ipv2_sad1S GHC.Base.Nothing];
                                              };
                                    } in 
                                      case
                                          catch# [sat_sad1U
                                                  GHC.IO.Handle.Internals.hClose_help2
                                                  ipv_sad19]
                                      of
                                      { (#,#) ipv2_sad1W [Occ=Once] ipv3_sad1X [Occ=Once] ->
                                            $j_sad1b ipv2_sad1W ipv3_sad1X;
                                      };
                                GHC.Base.Just _ [Occ=Dead] -> $j_sad1b ipv_sad19 GHC.Base.Nothing;
                              };
                      };
                GHC.IO.Handle.Types.ClosedHandle ->
                    let {
                      sat_sad1Z [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__,
                            GHC.Base.Maybe GHC.Exception.SomeException)
                      [LclId] =
                          CCCS (,)! [wild_sad0o GHC.Base.Nothing];
                    } in  (#,#) [eta_sad0n sat_sad1Z];
              };
        };

GHC.IO.Handle.Internals.hClose_help
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Types.IO
          (GHC.IO.Handle.Types.Handle__,
           GHC.Base.Maybe GHC.Exception.SomeException)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.IO.Handle.Internals.hClose_help1 eta_B2 eta_B1;

GHC.IO.Handle.Internals.handleFinalizer1
  :: GHC.IO.FilePath
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,A><S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [fp_sad20 m_sad21 s_sad22]
        case m_sad21 of {
          GHC.MVar.MVar mvar#_sad24 ->
              case takeMVar# [mvar#_sad24 s_sad22] of {
                (#,#) ipv_sad26 [Occ=Once] ipv1_sad27 [Occ=Once] ->
                    case GHC.IO.Handle.Internals.hClose_help1 ipv1_sad27 ipv_sad26 of {
                      (#,#) ipv2_sad29 [Occ=Once] ipv3_sad2a [Occ=Once!] ->
                          case ipv3_sad2a of {
                            (,) handle_'_sad2c [Occ=Once] _ [Occ=Dead] ->
                                case
                                    putMVar# [mvar#_sad24 handle_'_sad2c ipv2_sad29]
                                of
                                s2#_sad2e
                                { __DEFAULT -> (#,#) [s2#_sad2e GHC.Tuple.()];
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.handleFinalizer
  :: GHC.IO.FilePath
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
[GblId, Arity=3, Str=<L,A><S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.Internals.handleFinalizer1 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.Internals.mkDuplexHandle4
  :: GHC.Base.Maybe
       (GHC.IO.FilePath
        -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ())
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.IO.Handle.Internals.handleFinalizer1];

GHC.IO.Handle.Internals.mkFileHandle1
  :: forall dev.
     (GHC.IO.Device.IODevice dev, GHC.IO.BufferedIO.BufferedIO dev,
      Data.Typeable.Internal.Typeable dev) =>
     dev
     -> GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.NewlineMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId,
 Arity=9,
 Str=<L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U)><L,U><L,U><L,U><L,1*U><S,U><L,U(U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [$dIODevice_sad2f
           $dBufferedIO_sad2g
           $dTypeable_sad2h
           dev1_sad2i
           filepath_sad2j
           iomode_sad2k
           mb_codec_sad2l
           tr_newlines_sad2m
           eta_sad2n]
        let {
          sat_sad2p [Occ=Once] :: GHC.IO.Handle.Types.HandleType
          [LclId] =
              [iomode_sad2k] \u []
                  case iomode_sad2k of {
                    GHC.IO.IOMode.ReadMode -> GHC.IO.Handle.Types.ReadHandle [];
                    GHC.IO.IOMode.WriteMode -> GHC.IO.Handle.Types.WriteHandle [];
                    GHC.IO.IOMode.AppendMode -> GHC.IO.Handle.Types.AppendHandle [];
                    GHC.IO.IOMode.ReadWriteMode ->
                        GHC.IO.Handle.Types.ReadWriteHandle [];
                  };
        } in 
          GHC.IO.Handle.Internals.mkDuplexHandle5
              $dIODevice_sad2f
              $dBufferedIO_sad2g
              $dTypeable_sad2h
              dev1_sad2i
              filepath_sad2j
              sat_sad2p
              GHC.Types.True
              mb_codec_sad2l
              tr_newlines_sad2m
              GHC.IO.Handle.Internals.mkDuplexHandle4
              GHC.Base.Nothing
              eta_sad2n;

GHC.IO.Handle.Internals.mkFileHandle
  :: forall dev.
     (GHC.IO.Device.IODevice dev, GHC.IO.BufferedIO.BufferedIO dev,
      Data.Typeable.Internal.Typeable dev) =>
     dev
     -> GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.NewlineMode
     -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId,
 Arity=9,
 Str=<L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U)><L,U><L,U><L,U><L,1*U><S,U><L,U(U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B9
           eta_B8
           eta_B7
           eta_B6
           eta_B5
           eta_B4
           eta_B3
           eta_B2
           eta_B1]
        GHC.IO.Handle.Internals.mkFileHandle1
            eta_B9 eta_B8 eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

lvl23_ra7PD :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Pattern match failure in do expression at GHC/IO/Handle/Internals.hs:686:3-33"#;

GHC.IO.Handle.Internals.mkDuplexHandle3
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_sad2q]
        case GHC.CString.unpackCString# lvl23_ra7PD of sat_sad2r {
          __DEFAULT -> GHC.IO.failIO1 sat_sad2r eta_sad2q;
        };

lvl24_ra7PE :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Pattern match failure in do expression at GHC/IO/Handle/Internals.hs:680:3-35"#;

GHC.IO.Handle.Internals.mkDuplexHandle2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_sad2s]
        case GHC.CString.unpackCString# lvl24_ra7PE of sat_sad2t {
          __DEFAULT -> GHC.IO.failIO1 sat_sad2t eta_sad2s;
        };

GHC.IO.Handle.Internals.mkDuplexHandle1
  :: forall dev.
     (GHC.IO.Device.IODevice dev, GHC.IO.BufferedIO.BufferedIO dev,
      Data.Typeable.Internal.Typeable dev) =>
     dev
     -> GHC.IO.FilePath
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.NewlineMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId,
 Arity=8,
 Str=<L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U)><L,U><L,U><L,U><S,U><L,U(U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [$dIODevice_sad2u
           $dBufferedIO_sad2v
           $dTypeable_sad2w
           dev1_sad2x
           filepath_sad2y
           mb_codec_sad2z
           tr_newlines_sad2A
           s_sad2B]
        case
            GHC.IO.Handle.Internals.mkDuplexHandle5
                $dIODevice_sad2u
                $dBufferedIO_sad2v
                $dTypeable_sad2w
                dev1_sad2x
                filepath_sad2y
                GHC.IO.Handle.Types.WriteHandle
                GHC.Types.True
                mb_codec_sad2z
                tr_newlines_sad2A
                GHC.IO.Handle.Internals.mkDuplexHandle4
                GHC.Base.Nothing
                s_sad2B
        of
        { (#,#) ipv_sad2D [Occ=Once*] ipv1_sad2E [Occ=Once!] ->
              case ipv1_sad2E of {
                GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sad2H ->
                    let {
                      sat_sad2I [Occ=Once] :: GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
                      [LclId] =
                          CCCS GHC.MVar.MVar! [dt_sad2H]; } in
                    let {
                      sat_sad2J [Occ=Once]
                        :: GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
                      [LclId] =
                          CCCS GHC.Base.Just! [sat_sad2I];
                    } in 
                      case
                          GHC.IO.Handle.Internals.mkDuplexHandle5
                              $dIODevice_sad2u
                              $dBufferedIO_sad2v
                              $dTypeable_sad2w
                              dev1_sad2x
                              filepath_sad2y
                              GHC.IO.Handle.Types.ReadHandle
                              GHC.Types.True
                              mb_codec_sad2z
                              tr_newlines_sad2A
                              GHC.Base.Nothing
                              sat_sad2J
                              ipv_sad2D
                      of
                      { (#,#) ipv2_sad2L [Occ=Once*] ipv3_sad2M [Occ=Once!] ->
                            case ipv3_sad2M of {
                              GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt1_sad2P [Occ=Once] ->
                                  let {
                                    sat_sad2Q [Occ=Once] :: GHC.IO.Handle.Types.Handle
                                    [LclId] =
                                        CCCS GHC.IO.Handle.Types.DuplexHandle! [filepath_sad2y
                                                                                dt1_sad2P
                                                                                dt_sad2H];
                                  } in  (#,#) [ipv2_sad2L sat_sad2Q];
                              GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead] ->
                                  GHC.IO.Handle.Internals.mkDuplexHandle3 ipv2_sad2L;
                            };
                      };
                GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead] ->
                    GHC.IO.Handle.Internals.mkDuplexHandle2 ipv_sad2D;
              };
        };

GHC.IO.Handle.Internals.mkDuplexHandle
  :: forall dev.
     (GHC.IO.Device.IODevice dev, GHC.IO.BufferedIO.BufferedIO dev,
      Data.Typeable.Internal.Typeable dev) =>
     dev
     -> GHC.IO.FilePath
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.NewlineMode
     -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId,
 Arity=8,
 Str=<L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U)><L,U><L,U><L,U><S,U><L,U(U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B8 eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.Internals.mkDuplexHandle1
            eta_B8 eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

$wlvl_ra7PF
  :: forall a.
     GHC.IO.Exception.IOErrorType
     -> GHC.Base.String
     -> GHC.Base.Maybe Foreign.C.Types.CInt
     -> GHC.Base.Maybe GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=7,
 Str=<B,U><B,U><B,U><B,1*U><B,U><B,U><B,U>x,
 Unf=OtherCon []] =
    sat-only [] \r [ww_sad2X
                    ww1_sad2Y
                    ww2_sad2Z
                    ww3_sad30
                    w_sad31
                    w1_sad32
                    w2_sad33]
        let {
          sat_sad3f [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [ww_sad2X ww1_sad2Y ww2_sad2Z ww3_sad30 w_sad31 w1_sad32] \u []
                  let {
                    sat_sad3d [Occ=Once] :: GHC.Base.Maybe GHC.IO.FilePath
                    [LclId] =
                        [ww3_sad30 w1_sad32] \u []
                            case ww3_sad30 of wild_sad35 {
                              GHC.Base.Nothing ->
                                  case w1_sad32 of {
                                    GHC.IO.Handle.Types.FileHandle path_sad37 [Occ=Once]
                                                                   _ [Occ=Dead] ->
                                        GHC.Base.Just [path_sad37];
                                    GHC.IO.Handle.Types.DuplexHandle path_sad39 [Occ=Once]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead] ->
                                        GHC.Base.Just [path_sad39];
                                  };
                              GHC.Base.Just _ [Occ=Dead] -> wild_sad35;
                            }; } in
                  let {
                    sat_sad34 [Occ=Once] :: GHC.Base.Maybe GHC.IO.Handle.Types.Handle
                    [LclId] =
                        CCCS GHC.Base.Just! [w1_sad32]; } in
                  let {
                    sat_sad3e [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        CCCS GHC.IO.Exception.IOError! [sat_sad34
                                                        ww_sad2X
                                                        w_sad31
                                                        ww1_sad2Y
                                                        ww2_sad2Z
                                                        sat_sad3d];
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sad3e;
        } in  raiseIO# [sat_sad3f w2_sad33];

GHC.IO.Handle.Internals.$wdo_operation [InlPrag=NOUSERINLINE[0],
                                        Occ=LoopBreaker]
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Prim.MVar# GHC.Prim.RealWorld GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=5,
 Str=<L,U><L,U><C(S),C(U)><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sad3g w1_sad3h w2_sad3i ww_sad3j w3_sad3k]
        case takeMVar# [ww_sad3j w3_sad3k] of {
          (#,#) ipv_sad3m [Occ=Once] ipv1_sad3n ->
              case w2_sad3i ipv1_sad3n of nt_sad3o {
                __DEFAULT ->
                    let {
                      sat_sad3K [Occ=Once]
                        :: GHC.Exception.SomeException
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_sa75G #)
                      [LclId] =
                          [w_sad3g w1_sad3h w2_sad3i ww_sad3j ipv1_sad3n] \r [e1_sad3p
                                                                              s_sad3q]
                              case putMVar# [ww_sad3j ipv1_sad3n s_sad3q] of s2#_sad3r {
                                __DEFAULT ->
                                    case e1_sad3p of wild_sad3s {
                                      GHC.Exception.SomeException $dException1_sad3t
                                                                  e3_sad3u [Occ=Once] ->
                                          case
                                              GHC.Exception.$p1Exception $dException1_sad3t
                                          of
                                          sat_sad3v
                                          { __DEFAULT ->
                                                case
                                                    Data.Typeable.Internal.sameTypeRep
                                                        sat_sad3v
                                                        GHC.IO.Exception.$fExceptionIOException4
                                                of
                                                { GHC.Types.False ->
                                                      case
                                                          GHC.Exception.$p1Exception
                                                              $dException1_sad3t
                                                      of
                                                      sat_sad3x
                                                      { __DEFAULT ->
                                                            case
                                                                Data.Typeable.Internal.sameTypeRep
                                                                    sat_sad3x
                                                                    GHC.IO.Exception.$fExceptionAllocationLimitExceeded6
                                                            of
                                                            { GHC.Types.False ->
                                                                  raiseIO# [wild_sad3s s2#_sad3r];
                                                              GHC.Types.True ->
                                                                  case myThreadId# [s2#_sad3r] of {
                                                                    (#,#) ipv2_sad3A [Occ=Once]
                                                                          ipv3_sad3B [Occ=Once] ->
                                                                        case
                                                                            killThread# [ipv3_sad3B
                                                                                         wild_sad3s
                                                                                         ipv2_sad3A]
                                                                        of
                                                                        s1_sad3C
                                                                        { __DEFAULT ->
                                                                              GHC.IO.Handle.Internals.$wdo_operation
                                                                                  w_sad3g
                                                                                  w1_sad3h
                                                                                  w2_sad3i
                                                                                  ww_sad3j
                                                                                  s1_sad3C;
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                  GHC.Types.True ->
                                                      case e3_sad3u of {
                                                        GHC.IO.Exception.IOError _ [Occ=Dead]
                                                                                 ww3_sad3F [Occ=Once]
                                                                                 _ [Occ=Dead]
                                                                                 ww5_sad3H [Occ=Once]
                                                                                 ww6_sad3I [Occ=Once]
                                                                                 ww7_sad3J [Occ=Once] ->
                                                            $wlvl_ra7PF
                                                                ww3_sad3F
                                                                ww5_sad3H
                                                                ww6_sad3I
                                                                ww7_sad3J
                                                                w_sad3g
                                                                w1_sad3h
                                                                s2#_sad3r;
                                                      };
                                                };
                                          };
                                    };
                              };
                    } in  catch# [nt_sad3o sat_sad3K ipv_sad3m];
              };
        };

GHC.IO.Handle.Internals.withHandle_1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=5,
 Str=<L,U><L,U><C(S),C(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sad3L w1_sad3M w2_sad3N w3_sad3O w4_sad3P]
        case w3_sad3O of {
          GHC.MVar.MVar ww1_sad3R [Occ=Once] ->
              GHC.IO.Handle.Internals.$wdo_operation
                  w_sad3L w1_sad3M w2_sad3N ww1_sad3R w4_sad3P;
        };

GHC.IO.Handle.Internals.$wwithHandle__' [InlPrag=NOUSERINLINE[0]]
  :: GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.Prim.MVar# GHC.Prim.RealWorld GHC.IO.Handle.Types.Handle__
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO GHC.IO.Handle.Types.Handle__)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=5,
 Str=<L,U><L,U><S,U><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sad3S w1_sad3T ww_sad3U w2_sad3V w3_sad3W]
        case getMaskingState# [w3_sad3W] of {
          (#,#) ipv_sad3Y [Occ=Once*] ipv1_sad3Z [Occ=Once!] ->
              case ipv1_sad3Z of {
                __DEFAULT ->
                    case
                        GHC.IO.Handle.Internals.$wdo_operation
                            w_sad3S w1_sad3T w2_sad3V ww_sad3U ipv_sad3Y
                    of
                    { (#,#) ipv2_sad42 [Occ=Once] ipv3_sad43 [Occ=Once] ->
                          case putMVar# [ww_sad3U ipv3_sad43 ipv2_sad42] of s2#_sad44 {
                            __DEFAULT -> (#,#) [s2#_sad44 GHC.Tuple.()];
                          };
                    };
                0# ->
                    let {
                      sat_sad4a [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      [LclId] =
                          [w_sad3S w1_sad3T ww_sad3U w2_sad3V] \r [s_sad45]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      w_sad3S w1_sad3T w2_sad3V ww_sad3U s_sad45
                              of
                              { (#,#) ipv2_sad47 [Occ=Once] ipv3_sad48 [Occ=Once] ->
                                    case putMVar# [ww_sad3U ipv3_sad48 ipv2_sad47] of s2#_sad49 {
                                      __DEFAULT -> (#,#) [s2#_sad49 GHC.Tuple.()];
                                    };
                              };
                    } in  maskAsyncExceptions# [sat_sad4a ipv_sad3Y];
              };
        };

GHC.IO.Handle.Internals.withHandle__'1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO GHC.IO.Handle.Types.Handle__)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=5,
 Str=<L,U><L,U><S(S),1*U(U)><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sad4b w1_sad4c w2_sad4d w3_sad4e w4_sad4f]
        case w2_sad4d of {
          GHC.MVar.MVar ww1_sad4h [Occ=Once] ->
              GHC.IO.Handle.Internals.$wwithHandle__'
                  w_sad4b w1_sad4c ww1_sad4h w3_sad4e w4_sad4f;
        };

GHC.IO.Handle.Internals.withHandle__'
  :: GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO GHC.IO.Handle.Types.Handle__)
     -> GHC.Types.IO ()
[GblId,
 Arity=5,
 Str=<L,U><L,U><S(S),1*U(U)><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.Internals.withHandle__'1
            eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.Internals.withAllHandles__1
  :: GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO GHC.IO.Handle.Types.Handle__)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [fun_sad4i h_sad4j act_sad4k eta_sad4l]
        case h_sad4j of wild_sad4m {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sad4o ->
              case getMaskingState# [eta_sad4l] of {
                (#,#) ipv_sad4q [Occ=Once*] ipv1_sad4r [Occ=Once!] ->
                    case ipv1_sad4r of {
                      __DEFAULT ->
                          case
                              GHC.IO.Handle.Internals.$wdo_operation
                                  fun_sad4i wild_sad4m act_sad4k dt_sad4o ipv_sad4q
                          of
                          { (#,#) ipv2_sad4u [Occ=Once] ipv3_sad4v [Occ=Once] ->
                                case putMVar# [dt_sad4o ipv3_sad4v ipv2_sad4u] of s2#_sad4w {
                                  __DEFAULT -> (#,#) [s2#_sad4w GHC.Tuple.()];
                                };
                          };
                      0# ->
                          let {
                            sat_sad4C [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                            [LclId] =
                                [fun_sad4i act_sad4k wild_sad4m dt_sad4o] \r [s_sad4x]
                                    case
                                        GHC.IO.Handle.Internals.$wdo_operation
                                            fun_sad4i wild_sad4m act_sad4k dt_sad4o s_sad4x
                                    of
                                    { (#,#) ipv2_sad4z [Occ=Once] ipv3_sad4A [Occ=Once] ->
                                          case
                                              putMVar# [dt_sad4o ipv3_sad4A ipv2_sad4z]
                                          of
                                          s2#_sad4B
                                          { __DEFAULT -> (#,#) [s2#_sad4B GHC.Tuple.()];
                                          };
                                    };
                          } in  maskAsyncExceptions# [sat_sad4C ipv_sad4q];
                    };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead] dt_sad4E dt1_sad4F ->
              case getMaskingState# [eta_sad4l] of {
                (#,#) ipv_sad4H [Occ=Once*] ipv1_sad4I [Occ=Once!] ->
                    let-no-escape {
                      $w$j_sad4J [InlPrag=NOUSERINLINE[0],
                                  Occ=Once*!T[1],
                                  Dmd=<L,1*C1(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          sat-only [fun_sad4i act_sad4k wild_sad4m dt1_sad4F] \r [w_sad4K]
                              case getMaskingState# [w_sad4K] of {
                                (#,#) ipv2_sad4M [Occ=Once*] ipv3_sad4N [Occ=Once!] ->
                                    case ipv3_sad4N of {
                                      __DEFAULT ->
                                          case
                                              GHC.IO.Handle.Internals.$wdo_operation
                                                  fun_sad4i
                                                  wild_sad4m
                                                  act_sad4k
                                                  dt1_sad4F
                                                  ipv2_sad4M
                                          of
                                          { (#,#) ipv4_sad4Q [Occ=Once] ipv5_sad4R [Occ=Once] ->
                                                case
                                                    putMVar# [dt1_sad4F ipv5_sad4R ipv4_sad4Q]
                                                of
                                                s2#_sad4S
                                                { __DEFAULT -> (#,#) [s2#_sad4S GHC.Tuple.()];
                                                };
                                          };
                                      0# ->
                                          let {
                                            sat_sad4Y [Occ=Once]
                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                            [LclId] =
                                                [fun_sad4i
                                                 act_sad4k
                                                 wild_sad4m
                                                 dt1_sad4F] \r [s_sad4T]
                                                    case
                                                        GHC.IO.Handle.Internals.$wdo_operation
                                                            fun_sad4i
                                                            wild_sad4m
                                                            act_sad4k
                                                            dt1_sad4F
                                                            s_sad4T
                                                    of
                                                    { (#,#) ipv4_sad4V [Occ=Once]
                                                            ipv5_sad4W [Occ=Once] ->
                                                          case
                                                              putMVar# [dt1_sad4F
                                                                        ipv5_sad4W
                                                                        ipv4_sad4V]
                                                          of
                                                          s2#_sad4X
                                                          { __DEFAULT ->
                                                                (#,#) [s2#_sad4X GHC.Tuple.()];
                                                          };
                                                    };
                                          } in  maskAsyncExceptions# [sat_sad4Y ipv2_sad4M];
                                    };
                              };
                    } in 
                      case ipv1_sad4I of {
                        __DEFAULT ->
                            case
                                GHC.IO.Handle.Internals.$wdo_operation
                                    fun_sad4i wild_sad4m act_sad4k dt_sad4E ipv_sad4H
                            of
                            { (#,#) ipv2_sad51 [Occ=Once] ipv3_sad52 [Occ=Once] ->
                                  case putMVar# [dt_sad4E ipv3_sad52 ipv2_sad51] of s2#_sad53 {
                                    __DEFAULT -> $w$j_sad4J s2#_sad53;
                                  };
                            };
                        0# ->
                            let {
                              sat_sad59 [Occ=Once]
                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                              [LclId] =
                                  [fun_sad4i act_sad4k wild_sad4m dt_sad4E] \r [s_sad54]
                                      case
                                          GHC.IO.Handle.Internals.$wdo_operation
                                              fun_sad4i wild_sad4m act_sad4k dt_sad4E s_sad54
                                      of
                                      { (#,#) ipv2_sad56 [Occ=Once] ipv3_sad57 [Occ=Once] ->
                                            case
                                                putMVar# [dt_sad4E ipv3_sad57 ipv2_sad56]
                                            of
                                            s2#_sad58
                                            { __DEFAULT -> (#,#) [s2#_sad58 GHC.Tuple.()];
                                            };
                                      };
                            } in 
                              case maskAsyncExceptions# [sat_sad59 ipv_sad4H] of {
                                (#,#) ipv2_sad5b [Occ=Once] _ [Occ=Dead] -> $w$j_sad4J ipv2_sad5b;
                              };
                      };
              };
        };

GHC.IO.Handle.Internals.withAllHandles__
  :: GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO GHC.IO.Handle.Types.Handle__)
     -> GHC.Types.IO ()
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.Internals.withAllHandles__1
            eta_B4 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.Internals.$wwithHandle' [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.Prim.MVar# GHC.Prim.RealWorld GHC.IO.Handle.Types.Handle__
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=5,
 Str=<L,U><L,U><S,U><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sad5d w1_sad5e ww_sad5f w2_sad5g w3_sad5h]
        case getMaskingState# [w3_sad5h] of {
          (#,#) ipv_sad5j [Occ=Once*] ipv1_sad5k [Occ=Once!] ->
              let {
                io_sad5l [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                  :: GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_sa76a #)
                [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                    [w_sad5d w1_sad5e ww_sad5f w2_sad5g] \r [s_sad5m]
                        case
                            GHC.IO.Handle.Internals.$wdo_operation
                                w_sad5d w1_sad5e w2_sad5g ww_sad5f s_sad5m
                        of
                        { (#,#) ipv2_sad5o [Occ=Once] ipv3_sad5p [Occ=Once!] ->
                              case ipv3_sad5p of {
                                (,) h'_sad5r [Occ=Once] v_sad5s [Occ=Once] ->
                                    case putMVar# [ww_sad5f h'_sad5r ipv2_sad5o] of s2#_sad5t {
                                      __DEFAULT -> (#,#) [s2#_sad5t v_sad5s];
                                    };
                              };
                        };
              } in 
                case ipv1_sad5k of {
                  __DEFAULT -> io_sad5l ipv_sad5j;
                  0# -> maskAsyncExceptions# [io_sad5l ipv_sad5j];
                };
        };

GHC.IO.Handle.Internals.withHandle1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=5,
 Str=<L,U><L,U><S(S),1*U(U)><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sad5v w1_sad5w w2_sad5x w3_sad5y w4_sad5z]
        case w2_sad5x of {
          GHC.MVar.MVar ww1_sad5B [Occ=Once] ->
              GHC.IO.Handle.Internals.$wwithHandle'
                  w_sad5v w1_sad5w ww1_sad5B w3_sad5y w4_sad5z;
        };

GHC.IO.Handle.Internals.withHandle'
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a))
     -> GHC.Types.IO a
[GblId,
 Arity=5,
 Str=<L,U><L,U><S(S),1*U(U)><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.Internals.withHandle1
            eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.Internals.withHandle_'1
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=5,
 Str=<L,U><L,U><S(S),1*U(U)><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [fun_sad5C h_sad5D m_sad5E act_sad5F eta_sad5G]
        case m_sad5E of {
          GHC.MVar.MVar ww1_sad5I [Occ=Once] ->
              let {
                sat_sad5P [Occ=Once]
                  :: GHC.IO.Handle.Types.Handle__
                     -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a_aa4gi)
                [LclId] =
                    [act_sad5F] \r [h__sad5J s_sad5K]
                        case act_sad5F h__sad5J s_sad5K of {
                          (#,#) ipv_sad5M [Occ=Once] ipv1_sad5N [Occ=Once] ->
                              let {
                                sat_sad5O [Occ=Once] :: (GHC.IO.Handle.Types.Handle__, a_aa4gi)
                                [LclId] =
                                    CCCS (,)! [h__sad5J ipv1_sad5N];
                              } in  (#,#) [ipv_sad5M sat_sad5O];
                        };
              } in 
                GHC.IO.Handle.Internals.$wwithHandle'
                    fun_sad5C h_sad5D ww1_sad5I sat_sad5P eta_sad5G;
        };

GHC.IO.Handle.Internals.withHandle_'
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Types.IO a
[GblId,
 Arity=5,
 Str=<L,U><L,U><S(S),1*U(U)><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.Internals.withHandle_'1
            eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

withHandle_2_ra7PG
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [fun_sad5Q h_sad5R act_sad5S eta_sad5T]
        case h_sad5R of wild_sad5U {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sad5W ->
              case getMaskingState# [eta_sad5T] of {
                (#,#) ipv_sad5Y [Occ=Once*] ipv1_sad5Z [Occ=Once!] ->
                    let {
                      io_sad60 [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa4gx #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [fun_sad5Q act_sad5S wild_sad5U dt_sad5W] \r [s_sad61]
                              let {
                                sat_sad68 [Occ=Once]
                                  :: GHC.IO.Handle.Types.Handle__
                                     -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a_aa4gx)
                                [LclId] =
                                    [act_sad5S] \r [h__sad62 s1_sad63]
                                        case act_sad5S h__sad62 s1_sad63 of {
                                          (#,#) ipv2_sad65 [Occ=Once] ipv3_sad66 [Occ=Once] ->
                                              let {
                                                sat_sad67 [Occ=Once]
                                                  :: (GHC.IO.Handle.Types.Handle__, a_aa4gx)
                                                [LclId] =
                                                    CCCS (,)! [h__sad62 ipv3_sad66];
                                              } in  (#,#) [ipv2_sad65 sat_sad67];
                                        };
                              } in 
                                case
                                    GHC.IO.Handle.Internals.$wdo_operation
                                        fun_sad5Q wild_sad5U sat_sad68 dt_sad5W s_sad61
                                of
                                { (#,#) ipv2_sad6a [Occ=Once] ipv3_sad6b [Occ=Once!] ->
                                      case ipv3_sad6b of {
                                        (,) h'_sad6d [Occ=Once] v_sad6e [Occ=Once] ->
                                            case
                                                putMVar# [dt_sad5W h'_sad6d ipv2_sad6a]
                                            of
                                            s2#_sad6f
                                            { __DEFAULT -> (#,#) [s2#_sad6f v_sad6e];
                                            };
                                      };
                                };
                    } in 
                      case ipv1_sad5Z of {
                        __DEFAULT -> io_sad60 ipv_sad5Y;
                        0# -> maskAsyncExceptions# [io_sad60 ipv_sad5Y];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sad6i
                                           _ [Occ=Dead] ->
              case getMaskingState# [eta_sad5T] of {
                (#,#) ipv_sad6l [Occ=Once*] ipv1_sad6m [Occ=Once!] ->
                    let {
                      io_sad6n [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa4gx #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [fun_sad5Q act_sad5S wild_sad5U dt_sad6i] \r [s_sad6o]
                              let {
                                sat_sad6v [Occ=Once]
                                  :: GHC.IO.Handle.Types.Handle__
                                     -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a_aa4gx)
                                [LclId] =
                                    [act_sad5S] \r [h__sad6p s1_sad6q]
                                        case act_sad5S h__sad6p s1_sad6q of {
                                          (#,#) ipv2_sad6s [Occ=Once] ipv3_sad6t [Occ=Once] ->
                                              let {
                                                sat_sad6u [Occ=Once]
                                                  :: (GHC.IO.Handle.Types.Handle__, a_aa4gx)
                                                [LclId] =
                                                    CCCS (,)! [h__sad6p ipv3_sad6t];
                                              } in  (#,#) [ipv2_sad6s sat_sad6u];
                                        };
                              } in 
                                case
                                    GHC.IO.Handle.Internals.$wdo_operation
                                        fun_sad5Q wild_sad5U sat_sad6v dt_sad6i s_sad6o
                                of
                                { (#,#) ipv2_sad6x [Occ=Once] ipv3_sad6y [Occ=Once!] ->
                                      case ipv3_sad6y of {
                                        (,) h'_sad6A [Occ=Once] v_sad6B [Occ=Once] ->
                                            case
                                                putMVar# [dt_sad6i h'_sad6A ipv2_sad6x]
                                            of
                                            s2#_sad6C
                                            { __DEFAULT -> (#,#) [s2#_sad6C v_sad6B];
                                            };
                                      };
                                };
                    } in 
                      case ipv1_sad6m of {
                        __DEFAULT -> io_sad6n ipv_sad6l;
                        0# -> maskAsyncExceptions# [io_sad6n ipv_sad6l];
                      };
              };
        };

GHC.IO.Handle.Internals.withHandle_ [InlPrag=INLINE (sat-args=3)]
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Types.IO a
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        withHandle_2_ra7PG eta_B4 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.Internals.wantReadableHandle_1
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [fun_sad6E h_sad6F act_sad6G eta_sad6H]
        case h_sad6F of wild_sad6I {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sad6K ->
              case getMaskingState# [eta_sad6H] of {
                (#,#) ipv_sad6M [Occ=Once*] ipv1_sad6N [Occ=Once!] ->
                    let {
                      io_sad6O [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa4gF #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [fun_sad6E act_sad6G wild_sad6I dt_sad6K] \r [s_sad6P]
                              let {
                                sat_sad6W [Occ=Once]
                                  :: GHC.IO.Handle.Types.Handle__
                                     -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a_aa4gF)
                                [LclId] =
                                    [act_sad6G] \r [h__sad6Q s1_sad6R]
                                        case
                                            GHC.IO.Handle.Internals.wantReadableHandle2
                                                act_sad6G h__sad6Q s1_sad6R
                                        of
                                        { (#,#) ipv2_sad6T [Occ=Once] ipv3_sad6U [Occ=Once] ->
                                              let {
                                                sat_sad6V [Occ=Once]
                                                  :: (GHC.IO.Handle.Types.Handle__, a_aa4gF)
                                                [LclId] =
                                                    CCCS (,)! [h__sad6Q ipv3_sad6U];
                                              } in  (#,#) [ipv2_sad6T sat_sad6V];
                                        };
                              } in 
                                case
                                    GHC.IO.Handle.Internals.$wdo_operation
                                        fun_sad6E wild_sad6I sat_sad6W dt_sad6K s_sad6P
                                of
                                { (#,#) ipv2_sad6Y [Occ=Once] ipv3_sad6Z [Occ=Once!] ->
                                      case ipv3_sad6Z of {
                                        (,) h'_sad71 [Occ=Once] v_sad72 [Occ=Once] ->
                                            case
                                                putMVar# [dt_sad6K h'_sad71 ipv2_sad6Y]
                                            of
                                            s2#_sad73
                                            { __DEFAULT -> (#,#) [s2#_sad73 v_sad72];
                                            };
                                      };
                                };
                    } in 
                      case ipv1_sad6N of {
                        __DEFAULT -> io_sad6O ipv_sad6M;
                        0# -> maskAsyncExceptions# [io_sad6O ipv_sad6M];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sad76
                                           _ [Occ=Dead] ->
              case getMaskingState# [eta_sad6H] of {
                (#,#) ipv_sad79 [Occ=Once*] ipv1_sad7a [Occ=Once!] ->
                    let {
                      io_sad7b [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa4gF #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [fun_sad6E act_sad6G wild_sad6I dt_sad76] \r [s_sad7c]
                              let {
                                sat_sad7j [Occ=Once]
                                  :: GHC.IO.Handle.Types.Handle__
                                     -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a_aa4gF)
                                [LclId] =
                                    [act_sad6G] \r [h__sad7d s1_sad7e]
                                        case
                                            GHC.IO.Handle.Internals.wantReadableHandle2
                                                act_sad6G h__sad7d s1_sad7e
                                        of
                                        { (#,#) ipv2_sad7g [Occ=Once] ipv3_sad7h [Occ=Once] ->
                                              let {
                                                sat_sad7i [Occ=Once]
                                                  :: (GHC.IO.Handle.Types.Handle__, a_aa4gF)
                                                [LclId] =
                                                    CCCS (,)! [h__sad7d ipv3_sad7h];
                                              } in  (#,#) [ipv2_sad7g sat_sad7i];
                                        };
                              } in 
                                case
                                    GHC.IO.Handle.Internals.$wdo_operation
                                        fun_sad6E wild_sad6I sat_sad7j dt_sad76 s_sad7c
                                of
                                { (#,#) ipv2_sad7l [Occ=Once] ipv3_sad7m [Occ=Once!] ->
                                      case ipv3_sad7m of {
                                        (,) h'_sad7o [Occ=Once] v_sad7p [Occ=Once] ->
                                            case
                                                putMVar# [dt_sad76 h'_sad7o ipv2_sad7l]
                                            of
                                            s2#_sad7q
                                            { __DEFAULT -> (#,#) [s2#_sad7q v_sad7p];
                                            };
                                      };
                                };
                    } in 
                      case ipv1_sad7a of {
                        __DEFAULT -> io_sad7b ipv_sad79;
                        0# -> maskAsyncExceptions# [io_sad7b ipv_sad79];
                      };
              };
        };

GHC.IO.Handle.Internals.wantReadableHandle_
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Types.IO a
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.Internals.wantReadableHandle_1
            eta_B4 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.Internals.wantSeekableHandle2
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=3, Str=<B,U><B,U><B,U>x, Unf=OtherCon []] =
    [] \r [fun_sad7s h_sad7t eta_sad7u]
        let {
          sat_sad7x [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [fun_sad7s h_sad7t] \u []
                  let {
                    sat_sad7v [Occ=Once] :: GHC.Base.Maybe GHC.IO.Handle.Types.Handle
                    [LclId] =
                        CCCS GHC.Base.Just! [h_sad7t]; } in
                  let {
                    sat_sad7w [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        CCCS GHC.IO.Exception.IOError! [sat_sad7v
                                                        GHC.IO.Exception.IllegalOperation
                                                        fun_sad7s
                                                        GHC.IO.Handle.Internals.wantSeekableHandle5
                                                        GHC.Base.Nothing
                                                        GHC.Base.Nothing];
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sad7w;
        } in  raiseIO# [sat_sad7x eta_sad7u];

GHC.IO.Handle.Internals.wantSeekableHandle1
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [fun_sad7y h_sad7z _act_sad7A eta_sad7B]
        case h_sad7z of wild_sad7C {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sad7E ->
              case getMaskingState# [eta_sad7B] of {
                (#,#) ipv_sad7G [Occ=Once*] ipv1_sad7H [Occ=Once!] ->
                    let {
                      io_sad7I [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa4gJ #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [fun_sad7y _act_sad7A wild_sad7C dt_sad7E] \r [s_sad7J]
                              let {
                                sat_sad8g [Occ=Once]
                                  :: GHC.IO.Handle.Types.Handle__
                                     -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a_aa4gJ)
                                [LclId] =
                                    [_act_sad7A] \r [h__sad7K s1_sad7L]
                                        case h__sad7K of wild1_sad7M {
                                          GHC.IO.Handle.Types.Handle__ $dIODevice_sad7N [Occ=Once]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       ds2_sad7Q [Occ=Once]
                                                                       ds3_sad7R [Occ=Once!]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                              case ds3_sad7R of {
                                                __DEFAULT ->
                                                    case
                                                        GHC.IO.Device.isSeekable
                                                            $dIODevice_sad7N ds2_sad7Q s1_sad7L
                                                    of
                                                    { (#,#) ipv2_sad85 [Occ=Once*]
                                                            ipv3_sad86 [Occ=Once!] ->
                                                          case ipv3_sad86 of {
                                                            GHC.Types.False ->
                                                                raiseIO# [GHC.IO.Handle.Internals.wantSeekableHandle3
                                                                          ipv2_sad85];
                                                            GHC.Types.True ->
                                                                case
                                                                    _act_sad7A
                                                                        wild1_sad7M ipv2_sad85
                                                                of
                                                                { (#,#) ipv4_sad8a [Occ=Once]
                                                                        ipv5_sad8b [Occ=Once] ->
                                                                      let {
                                                                        sat_sad8c [Occ=Once]
                                                                          :: (GHC.IO.Handle.Types.Handle__,
                                                                              a_aa4gJ)
                                                                        [LclId] =
                                                                            CCCS (,)! [wild1_sad7M
                                                                                       ipv5_sad8b];
                                                                      } in 
                                                                        (#,#) [ipv4_sad8a
                                                                               sat_sad8c];
                                                                };
                                                          };
                                                    };
                                                GHC.IO.Handle.Types.ClosedHandle ->
                                                    raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle11
                                                              s1_sad7L];
                                                GHC.IO.Handle.Types.SemiClosedHandle ->
                                                    raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle7
                                                              s1_sad7L];
                                                GHC.IO.Handle.Types.AppendHandle ->
                                                    raiseIO# [GHC.IO.Handle.Internals.wantSeekableHandle3
                                                              s1_sad7L];
                                              };
                                        };
                              } in 
                                case
                                    GHC.IO.Handle.Internals.$wdo_operation
                                        fun_sad7y wild_sad7C sat_sad8g dt_sad7E s_sad7J
                                of
                                { (#,#) ipv2_sad8i [Occ=Once] ipv3_sad8j [Occ=Once!] ->
                                      case ipv3_sad8j of {
                                        (,) h'_sad8l [Occ=Once] v_sad8m [Occ=Once] ->
                                            case
                                                putMVar# [dt_sad7E h'_sad8l ipv2_sad8i]
                                            of
                                            s2#_sad8n
                                            { __DEFAULT -> (#,#) [s2#_sad8n v_sad8m];
                                            };
                                      };
                                };
                    } in 
                      case ipv1_sad7H of {
                        __DEFAULT -> io_sad7I ipv_sad7G;
                        0# -> maskAsyncExceptions# [io_sad7I ipv_sad7G];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              GHC.IO.Handle.Internals.wantSeekableHandle2
                  fun_sad7y wild_sad7C eta_sad7B;
        };

GHC.IO.Handle.Internals.wantSeekableHandle
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Types.IO a
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.Internals.wantSeekableHandle1
            eta_B4 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.Internals.$wwantWritableHandle' [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.Prim.MVar# GHC.Prim.RealWorld GHC.IO.Handle.Types.Handle__
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=5,
 Str=<L,U><L,U><S,U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sad8s w1_sad8t ww_sad8u w2_sad8v w3_sad8w]
        let {
          sat_sadaL [Occ=Once]
            :: GHC.IO.Handle.Types.Handle__
               -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a_sa76M)
          [LclId] =
              [w2_sad8v] \r [h__sad8x s_sad8y]
                  case h__sad8x of wild_sad8z {
                    GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                                 $dBufferedIO_sad8B [Occ=Once]
                                                 _ [Occ=Dead]
                                                 ds_sad8D [Occ=Once]
                                                 ds1_sad8E [Occ=Once!]
                                                 dt_sad8F
                                                 _ [Occ=Dead]
                                                 dt1_sad8H [Occ=Once]
                                                 dt2_sad8I
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 ds4_sad8L [Occ=Once!]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead] ->
                        case ds1_sad8E of {
                          __DEFAULT ->
                              case w2_sad8v wild_sad8z s_sad8y of {
                                (#,#) ipv_sad8S [Occ=Once] ipv1_sad8T [Occ=Once] ->
                                    let {
                                      sat_sad8U [Occ=Once]
                                        :: (GHC.IO.Handle.Types.Handle__, a_sa76M)
                                      [LclId] =
                                          CCCS (,)! [wild_sad8z ipv1_sad8T];
                                    } in  (#,#) [ipv_sad8S sat_sad8U];
                              };
                          GHC.IO.Handle.Types.ClosedHandle ->
                              raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle11 s_sad8y];
                          GHC.IO.Handle.Types.SemiClosedHandle ->
                              raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle7 s_sad8y];
                          GHC.IO.Handle.Types.ReadHandle ->
                              raiseIO# [GHC.IO.Handle.Internals.wantWritableHandle2 s_sad8y];
                          GHC.IO.Handle.Types.ReadWriteHandle ->
                              case readMutVar# [dt2_sad8I s_sad8y] of {
                                (#,#) ipv_sad8Z [Occ=Once*] ipv1_sad90 [Occ=Once!] ->
                                    case ipv1_sad90 of {
                                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           ds10_sad94 [Occ=Once!]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead] ->
                                          case ds10_sad94 of {
                                            GHC.IO.Buffer.ReadBuffer ->
                                                case readMutVar# [dt2_sad8I ipv_sad8Z] of {
                                                  (#,#) ipv2_sad9a [Occ=Once*]
                                                        ipv3_sad9b [Occ=Once!] ->
                                                      case ipv3_sad9b of {
                                                        GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                             _ [Occ=Dead]
                                                                             ds12_sad9f [Occ=Once!]
                                                                             _ [Occ=Dead]
                                                                             dt12_sad9h [Occ=Once]
                                                                             dt13_sad9i [Occ=Once] ->
                                                            let-no-escape {
                                                              $w$j_sad9j [InlPrag=NOUSERINLINE[0],
                                                                          Occ=Once*!T[1],
                                                                          Dmd=<L,1*C1(U)>]
                                                                :: GHC.Prim.State#
                                                                     GHC.Prim.RealWorld
                                                                   -> (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         (GHC.IO.Handle.Types.Handle__,
                                                                          a_sa76M) #)
                                                              [LclId[JoinId(1)],
                                                               Arity=1,
                                                               Str=<S,U>,
                                                               Unf=OtherCon []] =
                                                                  sat-only [w2_sad8v
                                                                            wild_sad8z
                                                                            $dBufferedIO_sad8B
                                                                            ds_sad8D
                                                                            dt_sad8F
                                                                            dt2_sad8I] \r [w4_sad9k]
                                                                      case
                                                                          GHC.IO.Handle.Internals.flushBuffer2
                                                                              wild_sad8z w4_sad9k
                                                                      of
                                                                      { (#,#) ipv4_sad9m [Occ=Once]
                                                                              _ [Occ=Dead] ->
                                                                            case
                                                                                readMutVar# [dt2_sad8I
                                                                                             ipv4_sad9m]
                                                                            of
                                                                            { (#,#) ipv6_sad9p [Occ=Once]
                                                                                    ipv7_sad9q [Occ=Once!] ->
                                                                                  let {
                                                                                    sat_sad9y [Occ=Once]
                                                                                      :: GHC.IO.Buffer.Buffer
                                                                                           GHC.IO.Buffer.CharBufElem
                                                                                    [LclId] =
                                                                                        [ipv7_sad9q] \u []
                                                                                            case
                                                                                                ipv7_sad9q
                                                                                            of
                                                                                            { GHC.IO.Buffer.Buffer dt14_sad9s [Occ=Once]
                                                                                                                   dt15_sad9t [Occ=Once]
                                                                                                                   _ [Occ=Dead]
                                                                                                                   dt16_sad9v [Occ=Once]
                                                                                                                   dt17_sad9w [Occ=Once]
                                                                                                                   dt18_sad9x [Occ=Once] ->
                                                                                                  GHC.IO.Buffer.Buffer [dt14_sad9s
                                                                                                                        dt15_sad9t
                                                                                                                        GHC.IO.Buffer.WriteBuffer
                                                                                                                        dt16_sad9v
                                                                                                                        dt17_sad9w
                                                                                                                        dt18_sad9x];
                                                                                            };
                                                                                  } in 
                                                                                    case
                                                                                        writeMutVar# [dt2_sad8I
                                                                                                      sat_sad9y
                                                                                                      ipv6_sad9p]
                                                                                    of
                                                                                    s2#_sad9z
                                                                                    { __DEFAULT ->
                                                                                          case
                                                                                              readMutVar# [dt_sad8F
                                                                                                           s2#_sad9z]
                                                                                          of
                                                                                          { (#,#) ipv8_sad9B [Occ=Once]
                                                                                                  ipv9_sad9C [Occ=Once] ->
                                                                                                case
                                                                                                    GHC.IO.BufferedIO.emptyWriteBuffer
                                                                                                        $dBufferedIO_sad8B
                                                                                                        ds_sad8D
                                                                                                        ipv9_sad9C
                                                                                                        ipv8_sad9B
                                                                                                of
                                                                                                { (#,#) ipv10_sad9E [Occ=Once]
                                                                                                        ipv11_sad9F [Occ=Once] ->
                                                                                                      case
                                                                                                          writeMutVar# [dt_sad8F
                                                                                                                        ipv11_sad9F
                                                                                                                        ipv10_sad9E]
                                                                                                      of
                                                                                                      s2#1_sad9G
                                                                                                      { __DEFAULT ->
                                                                                                            case
                                                                                                                w2_sad8v
                                                                                                                    wild_sad8z
                                                                                                                    s2#1_sad9G
                                                                                                            of
                                                                                                            { (#,#) ipv12_sad9I [Occ=Once]
                                                                                                                    ipv13_sad9J [Occ=Once] ->
                                                                                                                  let {
                                                                                                                    sat_sad9K [Occ=Once]
                                                                                                                      :: (GHC.IO.Handle.Types.Handle__,
                                                                                                                          a_sa76M)
                                                                                                                    [LclId] =
                                                                                                                        CCCS (,)! [wild_sad8z
                                                                                                                                   ipv13_sad9J];
                                                                                                                  } in 
                                                                                                                    (#,#) [ipv12_sad9I
                                                                                                                           sat_sad9K];
                                                                                                            };
                                                                                                      };
                                                                                                };
                                                                                          };
                                                                                    };
                                                                            };
                                                                      };
                                                            } in 
                                                              case ds12_sad9f of {
                                                                GHC.IO.Buffer.ReadBuffer ->
                                                                    case
                                                                        ==# [dt12_sad9h dt13_sad9i]
                                                                    of
                                                                    { __DEFAULT ->
                                                                          case
                                                                              readMutVar# [dt1_sad8H
                                                                                           ipv2_sad9a]
                                                                          of
                                                                          { (#,#) ipv4_sad9O [Occ=Once]
                                                                                  ipv5_sad9P [Occ=Once!] ->
                                                                                case ipv5_sad9P of {
                                                                                  (,) codec_state_sad9R [Occ=Once]
                                                                                      bbuf0_sad9S [Occ=Once*] ->
                                                                                      case
                                                                                          readMutVar# [dt2_sad8I
                                                                                                       ipv4_sad9O]
                                                                                      of
                                                                                      { (#,#) ipv6_sad9U [Occ=Once]
                                                                                              ipv7_sad9V ->
                                                                                            let {
                                                                                              sat_sada3 [Occ=Once]
                                                                                                :: GHC.IO.Buffer.Buffer
                                                                                                     GHC.IO.Buffer.CharBufElem
                                                                                              [LclId] =
                                                                                                  [ipv7_sad9V] \u []
                                                                                                      case
                                                                                                          ipv7_sad9V
                                                                                                      of
                                                                                                      { GHC.IO.Buffer.Buffer dt14_sad9X [Occ=Once]
                                                                                                                             dt15_sad9Y [Occ=Once]
                                                                                                                             ds15_sad9Z [Occ=Once]
                                                                                                                             dt16_sada0 [Occ=Once]
                                                                                                                             _ [Occ=Dead]
                                                                                                                             _ [Occ=Dead] ->
                                                                                                            GHC.IO.Buffer.Buffer [dt14_sad9X
                                                                                                                                  dt15_sad9Y
                                                                                                                                  ds15_sad9Z
                                                                                                                                  dt16_sada0
                                                                                                                                  0#
                                                                                                                                  0#];
                                                                                                      };
                                                                                            } in 
                                                                                              case
                                                                                                  writeMutVar# [dt2_sad8I
                                                                                                                sat_sada3
                                                                                                                ipv6_sad9U]
                                                                                              of
                                                                                              s2#_sada4
                                                                                              { __DEFAULT ->
                                                                                                    case
                                                                                                        ipv7_sad9V
                                                                                                    of
                                                                                                    { GHC.IO.Buffer.Buffer dt14_sada6 [Occ=Once]
                                                                                                                           dt15_sada7 [Occ=Once]
                                                                                                                           ds15_sada8 [Occ=Once]
                                                                                                                           _ [Occ=Dead]
                                                                                                                           dt17_sadaa [Occ=Once!]
                                                                                                                           _ [Occ=Dead] ->
                                                                                                          case
                                                                                                              dt17_sadaa
                                                                                                          of
                                                                                                          wild8_sadac
                                                                                                          { __DEFAULT ->
                                                                                                                case
                                                                                                                    ds4_sad8L
                                                                                                                of
                                                                                                                { GHC.Base.Nothing ->
                                                                                                                      let {
                                                                                                                        sat_sadam [Occ=Once]
                                                                                                                          :: GHC.IO.Buffer.Buffer
                                                                                                                               GHC.Word.Word8
                                                                                                                        [LclId] =
                                                                                                                            [bbuf0_sad9S
                                                                                                                             wild8_sadac] \u []
                                                                                                                                case
                                                                                                                                    bbuf0_sad9S
                                                                                                                                of
                                                                                                                                { GHC.IO.Buffer.Buffer dt19_sadaf [Occ=Once]
                                                                                                                                                       dt20_sadag [Occ=Once]
                                                                                                                                                       ds16_sadah [Occ=Once]
                                                                                                                                                       dt21_sadai [Occ=Once]
                                                                                                                                                       dt22_sadaj [Occ=Once]
                                                                                                                                                       dt23_sadak [Occ=Once] ->
                                                                                                                                      case
                                                                                                                                          +# [dt22_sadaj
                                                                                                                                              wild8_sadac]
                                                                                                                                      of
                                                                                                                                      sat_sadal
                                                                                                                                      { __DEFAULT ->
                                                                                                                                            GHC.IO.Buffer.Buffer [dt19_sadaf
                                                                                                                                                                  dt20_sadag
                                                                                                                                                                  ds16_sadah
                                                                                                                                                                  dt21_sadai
                                                                                                                                                                  sat_sadal
                                                                                                                                                                  dt23_sadak];
                                                                                                                                      };
                                                                                                                                };
                                                                                                                      } in 
                                                                                                                        case
                                                                                                                            writeMutVar# [dt_sad8F
                                                                                                                                          sat_sadam
                                                                                                                                          s2#_sada4]
                                                                                                                        of
                                                                                                                        s2#1_sadan
                                                                                                                        { __DEFAULT ->
                                                                                                                              $w$j_sad9j
                                                                                                                                  s2#1_sadan;
                                                                                                                        };
                                                                                                                  GHC.Base.Just decoder_sadao [Occ=Once!] ->
                                                                                                                      case
                                                                                                                          decoder_sadao
                                                                                                                      of
                                                                                                                      { GHC.IO.Encoding.Types.BufferCodec ds16_sadaq [Occ=Once]
                                                                                                                                                          ds17_sadar [Occ=Once]
                                                                                                                                                          _ [Occ=Dead]
                                                                                                                                                          _ [Occ=Dead]
                                                                                                                                                          ds20_sadau [Occ=Once!] ->
                                                                                                                            case
                                                                                                                                ds20_sadau
                                                                                                                                    codec_state_sad9R
                                                                                                                                    s2#_sada4
                                                                                                                            of
                                                                                                                            { (#,#) ipv8_sadaw [Occ=Once]
                                                                                                                                    _ [Occ=Dead] ->
                                                                                                                                  let {
                                                                                                                                    sat_saday [Occ=Once]
                                                                                                                                      :: GHC.IO.Buffer.Buffer
                                                                                                                                           GHC.IO.Buffer.CharBufElem
                                                                                                                                    [LclId] =
                                                                                                                                        CCCS GHC.IO.Buffer.Buffer! [dt14_sada6
                                                                                                                                                                    dt15_sada7
                                                                                                                                                                    ds15_sada8
                                                                                                                                                                    wild8_sadac
                                                                                                                                                                    0#
                                                                                                                                                                    0#];
                                                                                                                                  } in 
                                                                                                                                    case
                                                                                                                                        GHC.IO.Handle.Internals.$wstreamEncode
                                                                                                                                            ds16_sadaq
                                                                                                                                            ds17_sadar
                                                                                                                                            bbuf0_sad9S
                                                                                                                                            sat_saday
                                                                                                                                            ipv8_sadaw
                                                                                                                                    of
                                                                                                                                    { (#,#) ipv10_sadaA [Occ=Once]
                                                                                                                                            ipv11_sadaB [Occ=Once!] ->
                                                                                                                                          case
                                                                                                                                              ipv11_sadaB
                                                                                                                                          of
                                                                                                                                          { (,) bbuf1_sadaD [Occ=Once]
                                                                                                                                                _ [Occ=Dead] ->
                                                                                                                                                case
                                                                                                                                                    writeMutVar# [dt_sad8F
                                                                                                                                                                  bbuf1_sadaD
                                                                                                                                                                  ipv10_sadaA]
                                                                                                                                                of
                                                                                                                                                s2#1_sadaF
                                                                                                                                                { __DEFAULT ->
                                                                                                                                                      $w$j_sad9j
                                                                                                                                                          s2#1_sadaF;
                                                                                                                                                };
                                                                                                                                          };
                                                                                                                                    };
                                                                                                                            };
                                                                                                                      };
                                                                                                                };
                                                                                                            0# ->
                                                                                                                case
                                                                                                                    writeMutVar# [dt_sad8F
                                                                                                                                  bbuf0_sad9S
                                                                                                                                  s2#_sada4]
                                                                                                                of
                                                                                                                s2#1_sadaG
                                                                                                                { __DEFAULT ->
                                                                                                                      $w$j_sad9j
                                                                                                                          s2#1_sadaG;
                                                                                                                };
                                                                                                          };
                                                                                                    };
                                                                                              };
                                                                                      };
                                                                                };
                                                                          };
                                                                      1# -> $w$j_sad9j ipv2_sad9a;
                                                                    };
                                                                GHC.IO.Buffer.WriteBuffer ->
                                                                    $w$j_sad9j ipv2_sad9a;
                                                              };
                                                      };
                                                };
                                            GHC.IO.Buffer.WriteBuffer ->
                                                case w2_sad8v wild_sad8z ipv_sad8Z of {
                                                  (#,#) ipv2_sadaI [Occ=Once]
                                                        ipv3_sadaJ [Occ=Once] ->
                                                      let {
                                                        sat_sadaK [Occ=Once]
                                                          :: (GHC.IO.Handle.Types.Handle__, a_sa76M)
                                                        [LclId] =
                                                            CCCS (,)! [wild_sad8z ipv3_sadaJ];
                                                      } in  (#,#) [ipv2_sadaI sat_sadaK];
                                                };
                                          };
                                    };
                              };
                        };
                  };
        } in 
          GHC.IO.Handle.Internals.$wwithHandle'
              w_sad8s w1_sad8t ww_sad8u sat_sadaL w3_sad8w;

GHC.IO.Handle.Internals.wantWritableHandle1
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [fun_sadaM h_sadaN act_sadaO eta_sadaP]
        case h_sadaN of wild_sadaQ {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sadaS [Occ=Once] ->
              GHC.IO.Handle.Internals.$wwantWritableHandle'
                  fun_sadaM wild_sadaQ dt_sadaS act_sadaO eta_sadaP;
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           dt1_sadaV [Occ=Once] ->
              GHC.IO.Handle.Internals.$wwantWritableHandle'
                  fun_sadaM wild_sadaQ dt1_sadaV act_sadaO eta_sadaP;
        };

GHC.IO.Handle.Internals.wantWritableHandle
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Types.IO a
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.Internals.wantWritableHandle1
            eta_B4 eta_B3 eta_B2 eta_B1;

withHandle2_ra7PH
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [fun_sadaW h_sadaX act_sadaY eta_sadaZ]
        case h_sadaX of wild_sadb0 {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sadb2 ->
              case getMaskingState# [eta_sadaZ] of {
                (#,#) ipv_sadb4 [Occ=Once*] ipv1_sadb5 [Occ=Once!] ->
                    let {
                      io_sadb6 [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa4gR #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [fun_sadaW act_sadaY wild_sadb0 dt_sadb2] \r [s_sadb7]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      fun_sadaW wild_sadb0 act_sadaY dt_sadb2 s_sadb7
                              of
                              { (#,#) ipv2_sadb9 [Occ=Once] ipv3_sadba [Occ=Once!] ->
                                    case ipv3_sadba of {
                                      (,) h'_sadbc [Occ=Once] v_sadbd [Occ=Once] ->
                                          case
                                              putMVar# [dt_sadb2 h'_sadbc ipv2_sadb9]
                                          of
                                          s2#_sadbe
                                          { __DEFAULT -> (#,#) [s2#_sadbe v_sadbd];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sadb5 of {
                        __DEFAULT -> io_sadb6 ipv_sadb4;
                        0# -> maskAsyncExceptions# [io_sadb6 ipv_sadb4];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sadbh
                                           _ [Occ=Dead] ->
              case getMaskingState# [eta_sadaZ] of {
                (#,#) ipv_sadbk [Occ=Once*] ipv1_sadbl [Occ=Once!] ->
                    let {
                      io_sadbm [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa4gR #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [fun_sadaW act_sadaY wild_sadb0 dt_sadbh] \r [s_sadbn]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      fun_sadaW wild_sadb0 act_sadaY dt_sadbh s_sadbn
                              of
                              { (#,#) ipv2_sadbp [Occ=Once] ipv3_sadbq [Occ=Once!] ->
                                    case ipv3_sadbq of {
                                      (,) h'_sadbs [Occ=Once] v_sadbt [Occ=Once] ->
                                          case
                                              putMVar# [dt_sadbh h'_sadbs ipv2_sadbp]
                                          of
                                          s2#_sadbu
                                          { __DEFAULT -> (#,#) [s2#_sadbu v_sadbt];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sadbl of {
                        __DEFAULT -> io_sadbm ipv_sadbk;
                        0# -> maskAsyncExceptions# [io_sadbm ipv_sadbk];
                      };
              };
        };

GHC.IO.Handle.Internals.withHandle [InlPrag=INLINE (sat-args=3)]
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a))
     -> GHC.Types.IO a
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        withHandle2_ra7PH eta_B4 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.Internals.wantReadableHandle1
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [fun_sadbw h_sadbx act_sadby eta_sadbz]
        case h_sadbx of wild_sadbA {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sadbC ->
              case getMaskingState# [eta_sadbz] of {
                (#,#) ipv_sadbE [Occ=Once*] ipv1_sadbF [Occ=Once!] ->
                    let {
                      io_sadbG [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa4gV #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [fun_sadbw act_sadby wild_sadbA dt_sadbC] \r [s_sadbH]
                              let {
                                sat_sadbI [Occ=Once]
                                  :: GHC.IO.Handle.Types.Handle__
                                     -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a_aa4gV)
                                [LclId] =
                                    [act_sadby] \r [eta_B2 eta_B1]
                                        GHC.IO.Handle.Internals.wantReadableHandle2
                                            act_sadby eta_B2 eta_B1;
                              } in 
                                case
                                    GHC.IO.Handle.Internals.$wdo_operation
                                        fun_sadbw wild_sadbA sat_sadbI dt_sadbC s_sadbH
                                of
                                { (#,#) ipv2_sadbK [Occ=Once] ipv3_sadbL [Occ=Once!] ->
                                      case ipv3_sadbL of {
                                        (,) h'_sadbN [Occ=Once] v_sadbO [Occ=Once] ->
                                            case
                                                putMVar# [dt_sadbC h'_sadbN ipv2_sadbK]
                                            of
                                            s2#_sadbP
                                            { __DEFAULT -> (#,#) [s2#_sadbP v_sadbO];
                                            };
                                      };
                                };
                    } in 
                      case ipv1_sadbF of {
                        __DEFAULT -> io_sadbG ipv_sadbE;
                        0# -> maskAsyncExceptions# [io_sadbG ipv_sadbE];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sadbS
                                           _ [Occ=Dead] ->
              case getMaskingState# [eta_sadbz] of {
                (#,#) ipv_sadbV [Occ=Once*] ipv1_sadbW [Occ=Once!] ->
                    let {
                      io_sadbX [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa4gV #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [fun_sadbw act_sadby wild_sadbA dt_sadbS] \r [s_sadbY]
                              let {
                                sat_sadbZ [Occ=Once]
                                  :: GHC.IO.Handle.Types.Handle__
                                     -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a_aa4gV)
                                [LclId] =
                                    [act_sadby] \r [eta_B2 eta_B1]
                                        GHC.IO.Handle.Internals.wantReadableHandle2
                                            act_sadby eta_B2 eta_B1;
                              } in 
                                case
                                    GHC.IO.Handle.Internals.$wdo_operation
                                        fun_sadbw wild_sadbA sat_sadbZ dt_sadbS s_sadbY
                                of
                                { (#,#) ipv2_sadc1 [Occ=Once] ipv3_sadc2 [Occ=Once!] ->
                                      case ipv3_sadc2 of {
                                        (,) h'_sadc4 [Occ=Once] v_sadc5 [Occ=Once] ->
                                            case
                                                putMVar# [dt_sadbS h'_sadc4 ipv2_sadc1]
                                            of
                                            s2#_sadc6
                                            { __DEFAULT -> (#,#) [s2#_sadc6 v_sadc5];
                                            };
                                      };
                                };
                    } in 
                      case ipv1_sadbW of {
                        __DEFAULT -> io_sadbX ipv_sadbV;
                        0# -> maskAsyncExceptions# [io_sadbX ipv_sadbV];
                      };
              };
        };

GHC.IO.Handle.Internals.wantReadableHandle
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a))
     -> GHC.Types.IO a
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.Internals.wantReadableHandle1
            eta_B4 eta_B3 eta_B2 eta_B1;


==================== STG syntax: ====================
2018-03-16 16:05:15.152942557 UTC

GHC.IO.Handle.Internals.augmentIOError
  :: GHC.IO.Exception.IOException
     -> GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.IO.Exception.IOException
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,1*U(A,U,A,U,U,1*U)><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [ioe_sacFo fun_sacFp h_sacFq]
        case ioe_sacFo of {
          GHC.IO.Exception.IOError _ [Occ=Dead]
                                   ds1_sacFt [Occ=Once]
                                   _ [Occ=Dead]
                                   ds3_sacFv [Occ=Once]
                                   ds4_sacFw [Occ=Once]
                                   ds5_sacFx [Occ=Once!] ->
              let {
                sat_sacFH [Occ=Once] :: GHC.Base.Maybe GHC.IO.FilePath
                [LclId] =
                    [h_sacFq ds5_sacFx] \u []
                        case ds5_sacFx of wild1_sacFz {
                          GHC.Base.Nothing ->
                              case h_sacFq of {
                                GHC.IO.Handle.Types.FileHandle path_sacFB [Occ=Once]
                                                               _ [Occ=Dead] ->
                                    GHC.Base.Just [path_sacFB];
                                GHC.IO.Handle.Types.DuplexHandle path_sacFD [Occ=Once]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead] ->
                                    GHC.Base.Just [path_sacFD];
                              };
                          GHC.Base.Just _ [Occ=Dead] -> wild1_sacFz;
                        }; } in
              let {
                sat_sacFy [Occ=Once] :: GHC.Base.Maybe GHC.IO.Handle.Types.Handle
                [LclId] =
                    CCCS GHC.Base.Just! [h_sacFq];
              } in 
                GHC.IO.Exception.IOError [sat_sacFy
                                          ds1_sacFt
                                          fun_sacFp
                                          ds3_sacFv
                                          ds4_sacFw
                                          sat_sacFH];
        };

GHC.IO.Handle.Internals.wantReadableHandle14 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "handle is closed"#;

GHC.IO.Handle.Internals.wantReadableHandle13 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Handle.Internals.wantReadableHandle14;

GHC.IO.Handle.Internals.wantReadableHandle12
  :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.IllegalOperation
                                             GHC.Types.[]
                                             GHC.IO.Handle.Internals.wantReadableHandle13
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Handle.Internals.wantReadableHandle11
  :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Handle.Internals.wantReadableHandle12;

GHC.IO.Handle.Internals.ioe_closedHandle1
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [void_0E]
        raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle11
                  GHC.Prim.void#];

ioe_closedHandle2_ra7Pb
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    sat-only [] \r [void_0E]
        raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle11
                  GHC.Prim.void#];

GHC.IO.Handle.Internals.ioe_closedHandle
  :: forall a. GHC.Types.IO a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [void_0E] ioe_closedHandle2_ra7Pb GHC.Prim.void#;

GHC.IO.Handle.Internals.wantReadableHandle10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "handle is semi-closed"#;

GHC.IO.Handle.Internals.wantReadableHandle9 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Handle.Internals.wantReadableHandle10;

GHC.IO.Handle.Internals.wantReadableHandle8
  :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.IllegalOperation
                                             GHC.Types.[]
                                             GHC.IO.Handle.Internals.wantReadableHandle9
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Handle.Internals.wantReadableHandle7
  :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Handle.Internals.wantReadableHandle8;

GHC.IO.Handle.Internals.ioe_semiclosedHandle1
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [void_0E]
        raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle7
                  GHC.Prim.void#];

ioe_semiclosedHandle2_ra7Pc
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    sat-only [] \r [void_0E]
        raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle7
                  GHC.Prim.void#];

GHC.IO.Handle.Internals.ioe_semiclosedHandle
  :: forall a. GHC.Types.IO a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [void_0E] ioe_semiclosedHandle2_ra7Pc GHC.Prim.void#;

GHC.IO.Handle.Internals.hLookAhead_4
  :: GHC.IO.Exception.IOException
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.EOF
                                             GHC.Types.[]
                                             GHC.Types.[]
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Handle.Internals.hLookAhead_3 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Handle.Internals.hLookAhead_4;

GHC.IO.Handle.Internals.ioe_EOF1
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [void_0E]
        raiseIO# [GHC.IO.Handle.Internals.hLookAhead_3 GHC.Prim.void#];

ioe_EOF2_ra7Pd
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    sat-only [] \r [void_0E]
        raiseIO# [GHC.IO.Handle.Internals.hLookAhead_3 GHC.Prim.void#];

GHC.IO.Handle.Internals.ioe_EOF :: forall a. GHC.Types.IO a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [void_0E] ioe_EOF2_ra7Pd GHC.Prim.void#;

GHC.IO.Handle.Internals.wantReadableHandle6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "handle is not open for reading"#;

GHC.IO.Handle.Internals.wantReadableHandle5 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Handle.Internals.wantReadableHandle6;

GHC.IO.Handle.Internals.wantReadableHandle4
  :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.IllegalOperation
                                             GHC.Types.[]
                                             GHC.IO.Handle.Internals.wantReadableHandle5
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Handle.Internals.wantReadableHandle3
  :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Handle.Internals.wantReadableHandle4;

GHC.IO.Handle.Internals.ioe_notReadable1
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [void_0E]
        raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle3
                  GHC.Prim.void#];

ioe_notReadable2_ra7Pe
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    sat-only [] \r [void_0E]
        raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle3
                  GHC.Prim.void#];

GHC.IO.Handle.Internals.ioe_notReadable :: forall a. GHC.Types.IO a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [void_0E] ioe_notReadable2_ra7Pe GHC.Prim.void#;

GHC.IO.Handle.Internals.wantWritableHandle5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "handle is not open for writing"#;

GHC.IO.Handle.Internals.wantWritableHandle4 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Handle.Internals.wantWritableHandle5;

GHC.IO.Handle.Internals.wantWritableHandle3
  :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.IllegalOperation
                                             GHC.Types.[]
                                             GHC.IO.Handle.Internals.wantWritableHandle4
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Handle.Internals.wantWritableHandle2
  :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Handle.Internals.wantWritableHandle3;

GHC.IO.Handle.Internals.ioe_notWritable1
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [void_0E]
        raiseIO# [GHC.IO.Handle.Internals.wantWritableHandle2
                  GHC.Prim.void#];

ioe_notWritable2_ra7Pf
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    sat-only [] \r [void_0E]
        raiseIO# [GHC.IO.Handle.Internals.wantWritableHandle2
                  GHC.Prim.void#];

GHC.IO.Handle.Internals.ioe_notWritable :: forall a. GHC.Types.IO a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [void_0E] ioe_notWritable2_ra7Pf GHC.Prim.void#;

GHC.IO.Handle.Internals.wantSeekableHandle6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "handle is not seekable"#;

GHC.IO.Handle.Internals.wantSeekableHandle5 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            GHC.IO.Handle.Internals.wantSeekableHandle6;

GHC.IO.Handle.Internals.wantSeekableHandle4
  :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.IllegalOperation
                                             GHC.Types.[]
                                             GHC.IO.Handle.Internals.wantSeekableHandle5
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Handle.Internals.wantSeekableHandle3
  :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Handle.Internals.wantSeekableHandle4;

GHC.IO.Handle.Internals.flushBuffer6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "cannot flush the read buffer: underlying device is not seekable"#;

GHC.IO.Handle.Internals.flushBuffer5 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Internals.flushBuffer6;

GHC.IO.Handle.Internals.flushBuffer4
  :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.IllegalOperation
                                             GHC.Types.[]
                                             GHC.IO.Handle.Internals.flushBuffer5
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Handle.Internals.flushBuffer3 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Handle.Internals.flushBuffer4;

lvl_ra7Pg :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hSetBuffering"#;

lvl1_ra7Ph :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl_ra7Pg;

lvl2_ra7Pi :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "illegal buffer size "#;

GHC.IO.Handle.Internals.$wioe_bufsiz [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    [] \r [ww_sacFS void_0E]
        let {
          sat_sacG0 [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [ww_sacFS] \u []
                  let {
                    sat_sacFY [Occ=Once] :: GHC.Base.String
                    [LclId] =
                        [ww_sacFS] \u []
                            let {
                              sat_sacFX [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [ww_sacFS] \u []
                                      case GHC.Show.$wshowSignedInt 9# ww_sacFS GHC.Types.[] of {
                                        (#,#) ww5_sacFV [Occ=Once] ww6_sacFW [Occ=Once] ->
                                            : [ww5_sacFV ww6_sacFW];
                                      };
                            } in  GHC.CString.unpackAppendCString# lvl2_ra7Pi sat_sacFX; } in
                  let {
                    sat_sacFZ [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        CCCS GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                                        GHC.IO.Exception.InvalidArgument
                                                        lvl1_ra7Ph
                                                        sat_sacFY
                                                        GHC.Base.Nothing
                                                        GHC.Base.Nothing];
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sacFZ;
        } in  raiseIO# [sat_sacG0 GHC.Prim.void#];

GHC.IO.Handle.Internals.ioe_bufsiz1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<B,1*U(U)><B,U>x, Unf=OtherCon []] =
    [] \r [w_sacG1 void_0E]
        case w_sacG1 of {
          GHC.Types.I# ww1_sacG4 [Occ=Once] ->
              GHC.IO.Handle.Internals.$wioe_bufsiz ww1_sacG4 GHC.Prim.void#;
        };

GHC.IO.Handle.Internals.ioe_bufsiz
  :: forall a. GHC.Types.Int -> GHC.Types.IO a
[GblId, Arity=2, Str=<B,1*U(U)><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.Internals.ioe_bufsiz1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.$wstreamEncode [InlPrag=NOUSERINLINE[0]]
  :: forall from to state.
     GHC.IO.Encoding.Types.CodeBuffer from to
     -> (GHC.IO.Buffer.Buffer from
         -> GHC.IO.Buffer.Buffer to
         -> GHC.Types.IO
              (GHC.IO.Buffer.Buffer from, GHC.IO.Buffer.Buffer to))
     -> GHC.IO.Buffer.Buffer from
     -> GHC.IO.Buffer.Buffer to
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Buffer.Buffer from, GHC.IO.Buffer.Buffer to) #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<C(C(C(S(SS(SLL))))),C(C1(C1(U(U,1*U(1*U,U(U,U,U,U,U,U),U)))))><L,C(C1(C1(U(U,1*U(U(U,U,U,U,U,U),U)))))><L,U(U,U,U,U,U,U)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_sacG5 ww1_sacG6 w_sacG7 w1_sacG8 void_0E]
        let-no-escape {
          go_sacGa [Occ=LoopBreakerT[3]]
            :: GHC.IO.Buffer.Buffer from_sa738
               -> GHC.IO.Buffer.Buffer to_sa739
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     (GHC.IO.Buffer.Buffer from_sa738, GHC.IO.Buffer.Buffer to_sa739) #)
          [LclId[JoinId(3)],
           Arity=3,
           Str=<L,U(U,U,U,U,U,U)><L,U><S,U>,
           Unf=OtherCon []] =
              sat-only [ww_sacG5 ww1_sacG6 go_sacGa] \r [from1_sacGb
                                                         to1_sacGc
                                                         void_0E]
                  case ww_sacG5 from1_sacGb to1_sacGc GHC.Prim.void# of {
                    Unit# ipv1_sacGg [Occ=Once!] ->
                        case ipv1_sacGg of {
                          (,,) why_sacGi [Occ=Once!]
                               from'_sacGj [Occ=Once*]
                               to'_sacGk [Occ=Once*] ->
                              case why_sacGi of {
                                __DEFAULT ->
                                    let {
                                      sat_sacGm [Occ=Once]
                                        :: (GHC.IO.Buffer.Buffer from_sa738,
                                            GHC.IO.Buffer.Buffer to_sa739)
                                      [LclId] =
                                          CCCS (,)! [from'_sacGj to'_sacGk];
                                    } in  Unit# [sat_sacGm];
                                GHC.IO.Encoding.Types.InvalidSequence ->
                                    case from1_sacGb of {
                                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           dt3_sacGs [Occ=Once]
                                                           _ [Occ=Dead] ->
                                          case from'_sacGj of wild3_sacGu {
                                            GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 _ [Occ=Dead]
                                                                 dt10_sacGz [Occ=Once]
                                                                 _ [Occ=Dead] ->
                                                case ==# [dt3_sacGs dt10_sacGz] of {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_sacGC [Occ=Once]
                                                          :: (GHC.IO.Buffer.Buffer from_sa738,
                                                              GHC.IO.Buffer.Buffer to_sa739)
                                                        [LclId] =
                                                            CCCS (,)! [wild3_sacGu to'_sacGk];
                                                      } in  Unit# [sat_sacGC];
                                                  1# ->
                                                      case
                                                          ww1_sacG6
                                                              wild3_sacGu to'_sacGk GHC.Prim.void#
                                                      of
                                                      { Unit# ipv3_sacGF [Occ=Once!] ->
                                                            case ipv3_sacGF of {
                                                              (,) from'1_sacGH [Occ=Once]
                                                                  to'1_sacGI [Occ=Once] ->
                                                                  go_sacGa
                                                                      from'1_sacGH
                                                                      to'1_sacGI
                                                                      GHC.Prim.void#;
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
                  };
        } in  go_sacGa w_sacG7 w1_sacG8 GHC.Prim.void#;

GHC.IO.Handle.Internals.dEFAULT_CHAR_BUFFER_SIZE :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [2048#];

GHC.IO.Handle.Internals.initBufferState
  :: GHC.IO.Handle.Types.HandleType -> GHC.IO.Buffer.BufferState
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_sacGJ]
        case ds_sacGJ of {
          __DEFAULT -> GHC.IO.Buffer.WriteBuffer [];
          GHC.IO.Handle.Types.ReadHandle -> GHC.IO.Buffer.ReadBuffer [];
        };

lvl3_ra7Pj
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Buffer.CharBuffer #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [void_0E]
        case noDuplicate# [GHC.Prim.void#] of s'_sacGM {
          (##) ->
              case newMutVar# [GHC.ForeignPtr.NoFinalizers GHC.Prim.void#] of {
                Unit# ipv1_sacGP [Occ=Once] ->
                    case newPinnedByteArray# [4# GHC.Prim.void#] of {
                      Unit# ipv3_sacGS ->
                          let {
                            sat_sacGU [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                            [LclId] =
                                CCCS GHC.ForeignPtr.MallocPtr! [ipv3_sacGS ipv1_sacGP];
                          } in 
                            case byteArrayContents# [ipv3_sacGS] of sat_sacGT {
                              __DEFAULT ->
                                  let {
                                    sat_sacGV [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                                    [LclId] =
                                        CCCS GHC.IO.Buffer.Buffer! [sat_sacGT
                                                                    sat_sacGU
                                                                    GHC.IO.Buffer.ReadBuffer
                                                                    1#
                                                                    0#
                                                                    0#];
                                  } in  Unit# [sat_sacGV];
                            };
                    };
              };
        };

GHC.IO.Handle.Internals.noCharBuffer [InlPrag=NOINLINE]
  :: GHC.IO.Buffer.CharBuffer
[GblId] =
    [] \u []
        case lvl3_ra7Pj GHC.Prim.realWorld# of {
          Unit# ipv1_sacGY [Occ=Once] -> ipv1_sacGY;
        };

lvl4_ra7Pk
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Buffer.Buffer GHC.Word.Word8 #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [void_0E]
        case noDuplicate# [GHC.Prim.void#] of s'_sacH0 {
          (##) ->
              case newMutVar# [GHC.ForeignPtr.NoFinalizers GHC.Prim.void#] of {
                Unit# ipv1_sacH3 [Occ=Once] ->
                    case newPinnedByteArray# [1# GHC.Prim.void#] of {
                      Unit# ipv3_sacH6 ->
                          let {
                            sat_sacH8 [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                            [LclId] =
                                CCCS GHC.ForeignPtr.MallocPtr! [ipv3_sacH6 ipv1_sacH3];
                          } in 
                            case byteArrayContents# [ipv3_sacH6] of sat_sacH7 {
                              __DEFAULT ->
                                  let {
                                    sat_sacH9 [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                    [LclId] =
                                        CCCS GHC.IO.Buffer.Buffer! [sat_sacH7
                                                                    sat_sacH8
                                                                    GHC.IO.Buffer.ReadBuffer
                                                                    1#
                                                                    0#
                                                                    0#];
                                  } in  Unit# [sat_sacH9];
                            };
                    };
              };
        };

GHC.IO.Handle.Internals.noByteBuffer [InlPrag=NOINLINE]
  :: GHC.IO.Buffer.Buffer GHC.Word.Word8
[GblId] =
    [] \u []
        case lvl4_ra7Pk GHC.Prim.realWorld# of {
          Unit# ipv1_sacHc [Occ=Once] -> ipv1_sacHc;
        };

GHC.IO.Handle.Internals.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.Handle.Internals.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Internals.$trModule4];

GHC.IO.Handle.Internals.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Handle.Internals"#;

GHC.IO.Handle.Internals.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.Internals.$trModule2];

GHC.IO.Handle.Internals.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Handle.Internals.$trModule3
                                     GHC.IO.Handle.Internals.$trModule1];

lvl5_ra7Pl :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "handle is finalized"#;

lvl6_ra7Pm :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl5_ra7Pl;

GHC.IO.Handle.Internals.ioe_finalizedHandle
  :: GHC.IO.FilePath -> GHC.IO.Handle.Types.Handle__
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [fp_sacHd]
        let {
          sat_sacHe [Occ=Once] :: GHC.Base.Maybe GHC.IO.FilePath
          [LclId] =
              CCCS GHC.Base.Just! [fp_sacHd]; } in
        let {
          sat_sacHf [Occ=Once] :: GHC.IO.Exception.IOException
          [LclId] =
              CCCS GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                              GHC.IO.Exception.IllegalOperation
                                              GHC.Types.[]
                                              lvl6_ra7Pm
                                              GHC.Base.Nothing
                                              sat_sacHe];
        } in 
          GHC.Exception.throw
              GHC.IO.Exception.$fExceptionIOException sat_sacHf;

GHC.IO.Handle.Internals.closeTextCodecs1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_sacHg void_0E]
        case ds_sacHg of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds4_sacHt [Occ=Once*!]
                                       ds5_sacHu [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds5_sacHu of {
                GHC.Base.Nothing ->
                    case ds4_sacHt of {
                      GHC.Base.Nothing -> Unit# [GHC.Tuple.()];
                      GHC.Base.Just d_sacHB [Occ=Once!] ->
                          case d_sacHB of {
                            GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                              _ [Occ=Dead]
                                                              ds12_sacHF [Occ=Once]
                                                              _ [Occ=Dead]
                                                              _ [Occ=Dead] ->
                                ds12_sacHF GHC.Prim.void#;
                          };
                    };
                GHC.Base.Just d_sacHI [Occ=Once!] ->
                    case d_sacHI of {
                      GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                        _ [Occ=Dead]
                                                        ds12_sacHM [Occ=Once]
                                                        _ [Occ=Dead]
                                                        _ [Occ=Dead] ->
                          case ds12_sacHM GHC.Prim.void# of {
                            Unit# _ [Occ=Dead] ->
                                case ds4_sacHt of {
                                  GHC.Base.Nothing -> Unit# [GHC.Tuple.()];
                                  GHC.Base.Just d1_sacHT [Occ=Once!] ->
                                      case d1_sacHT of {
                                        GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                          _ [Occ=Dead]
                                                                          ds18_sacHX [Occ=Once]
                                                                          _ [Occ=Dead]
                                                                          _ [Occ=Dead] ->
                                            ds18_sacHX GHC.Prim.void#;
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.closeTextCodecs
  :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.Internals.closeTextCodecs1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.openTextEncoding1
  :: forall a.
     GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.HandleType
     -> (forall es ds.
         GHC.Base.Maybe (GHC.IO.Encoding.Types.TextEncoder es)
         -> GHC.Base.Maybe (GHC.IO.Encoding.Types.TextDecoder ds)
         -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U><L,1*C1(C1(C1(U(U,U))))><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_sacI0 ha_type_sacI1 cont_sacI2 void_0E]
        case ds_sacI0 of {
          GHC.Base.Nothing ->
              cont_sacI2 GHC.Base.Nothing GHC.Base.Nothing GHC.Prim.void#;
          GHC.Base.Just ds1_sacI5 [Occ=Once!] ->
              case ds1_sacI5 of {
                GHC.IO.Encoding.Types.TextEncoding _ [Occ=Dead]
                                                   ds3_sacI8 [Occ=Once*]
                                                   ds4_sacI9 [Occ=Once*] ->
                    let-no-escape {
                      $j_sacIa [Occ=Once*!T[2], Dmd=<L,1*C1(C1(U(U,U)))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> GHC.Base.Maybe (GHC.IO.Encoding.Types.TextDecoder dstate_aa436)
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa430 #)
                      [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
                          sat-only [ha_type_sacI1 cont_sacI2 ds4_sacI9] \r [void_0E
                                                                            ipv1_sacIc]
                              case ha_type_sacI1 of {
                                __DEFAULT -> cont_sacI2 GHC.Base.Nothing ipv1_sacIc GHC.Prim.void#;
                                GHC.IO.Handle.Types.WriteHandle ->
                                    case ds4_sacI9 GHC.Prim.void# of {
                                      Unit# ipv3_sacIg [Occ=Once] ->
                                          let {
                                            sat_sacIh [Occ=Once]
                                              :: GHC.Base.Maybe
                                                   (GHC.IO.Encoding.Types.TextEncoder estate_aa437)
                                            [LclId] =
                                                CCCS GHC.Base.Just! [ipv3_sacIg];
                                          } in  cont_sacI2 sat_sacIh ipv1_sacIc GHC.Prim.void#;
                                    };
                                GHC.IO.Handle.Types.AppendHandle ->
                                    case ds4_sacI9 GHC.Prim.void# of {
                                      Unit# ipv3_sacIk [Occ=Once] ->
                                          let {
                                            sat_sacIl [Occ=Once]
                                              :: GHC.Base.Maybe
                                                   (GHC.IO.Encoding.Types.TextEncoder estate_aa437)
                                            [LclId] =
                                                CCCS GHC.Base.Just! [ipv3_sacIk];
                                          } in  cont_sacI2 sat_sacIl ipv1_sacIc GHC.Prim.void#;
                                    };
                                GHC.IO.Handle.Types.ReadWriteHandle ->
                                    case ds4_sacI9 GHC.Prim.void# of {
                                      Unit# ipv3_sacIo [Occ=Once] ->
                                          let {
                                            sat_sacIp [Occ=Once]
                                              :: GHC.Base.Maybe
                                                   (GHC.IO.Encoding.Types.TextEncoder estate_aa437)
                                            [LclId] =
                                                CCCS GHC.Base.Just! [ipv3_sacIo];
                                          } in  cont_sacI2 sat_sacIp ipv1_sacIc GHC.Prim.void#;
                                    };
                              };
                    } in 
                      case ha_type_sacI1 of {
                        __DEFAULT -> $j_sacIa GHC.Prim.void# GHC.Base.Nothing;
                        GHC.IO.Handle.Types.ReadHandle ->
                            case ds3_sacI8 GHC.Prim.void# of {
                              Unit# ipv1_sacIt [Occ=Once] ->
                                  let {
                                    sat_sacIu [Occ=Once]
                                      :: GHC.Base.Maybe
                                           (GHC.IO.Encoding.Types.TextDecoder dstate_aa436)
                                    [LclId] =
                                        CCCS GHC.Base.Just! [ipv1_sacIt];
                                  } in  $j_sacIa GHC.Prim.void# sat_sacIu;
                            };
                        GHC.IO.Handle.Types.ReadWriteHandle ->
                            case ds3_sacI8 GHC.Prim.void# of {
                              Unit# ipv1_sacIx [Occ=Once] ->
                                  let {
                                    sat_sacIy [Occ=Once]
                                      :: GHC.Base.Maybe
                                           (GHC.IO.Encoding.Types.TextDecoder dstate_aa436)
                                    [LclId] =
                                        CCCS GHC.Base.Just! [ipv1_sacIx];
                                  } in  $j_sacIa GHC.Prim.void# sat_sacIy;
                            };
                      };
              };
        };

GHC.IO.Handle.Internals.openTextEncoding
  :: forall a.
     GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.HandleType
     -> (forall es ds.
         GHC.Base.Maybe (GHC.IO.Encoding.Types.TextEncoder es)
         -> GHC.Base.Maybe (GHC.IO.Encoding.Types.TextDecoder ds)
         -> GHC.Types.IO a)
     -> GHC.Types.IO a
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U><L,1*C1(C1(C1(U(U,U))))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.Internals.openTextEncoding1
            eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.flushByteWriteBuffer1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [h__sacIz void_0E]
        case h__sacIz of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       $dBufferedIO_sacID [Occ=Once]
                                       _ [Occ=Dead]
                                       ds_sacIF [Occ=Once]
                                       _ [Occ=Dead]
                                       dt_sacIH
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt_sacIH GHC.Prim.void#] of {
                Unit# ipv1_sacIU [Occ=Once!] ->
                    case ipv1_sacIU of wild1_sacIV {
                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           dt7_sacJ0 [Occ=Once]
                                           dt8_sacJ1 [Occ=Once] ->
                          case ==# [dt7_sacJ0 dt8_sacJ1] of {
                            __DEFAULT ->
                                case
                                    GHC.IO.BufferedIO.flushWriteBuffer
                                        $dBufferedIO_sacID ds_sacIF wild1_sacIV GHC.Prim.void#
                                of
                                { Unit# ipv3_sacJ5 [Occ=Once] ->
                                      case
                                          writeMutVar# [dt_sacIH ipv3_sacJ5 GHC.Prim.void#]
                                      of
                                      s2#_sacJ6
                                      { (##) -> Unit# [GHC.Tuple.()];
                                      };
                                };
                            1# -> Unit# [GHC.Tuple.()];
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.flushByteWriteBuffer
  :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.Internals.flushByteWriteBuffer1
            eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.flushWriteBuffer1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [h__sacJ7 void_0E]
        case h__sacJ7 of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       $dBufferedIO_sacJb [Occ=Once]
                                       _ [Occ=Dead]
                                       ds_sacJd [Occ=Once]
                                       _ [Occ=Dead]
                                       dt_sacJf
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt_sacJf GHC.Prim.void#] of {
                Unit# ipv1_sacJs [Occ=Once!] ->
                    case ipv1_sacJs of {
                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           ds10_sacJw [Occ=Once!]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
                          case ds10_sacJw of {
                            GHC.IO.Buffer.ReadBuffer -> Unit# [GHC.Tuple.()];
                            GHC.IO.Buffer.WriteBuffer ->
                                case readMutVar# [dt_sacJf GHC.Prim.void#] of {
                                  Unit# ipv3_sacJD [Occ=Once!] ->
                                      case ipv3_sacJD of wild3_sacJE {
                                        GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             dt12_sacJJ [Occ=Once]
                                                             dt13_sacJK [Occ=Once] ->
                                            case ==# [dt12_sacJJ dt13_sacJK] of {
                                              __DEFAULT ->
                                                  case
                                                      GHC.IO.BufferedIO.flushWriteBuffer
                                                          $dBufferedIO_sacJb
                                                          ds_sacJd
                                                          wild3_sacJE
                                                          GHC.Prim.void#
                                                  of
                                                  { Unit# ipv5_sacJO [Occ=Once] ->
                                                        case
                                                            writeMutVar# [dt_sacJf
                                                                          ipv5_sacJO
                                                                          GHC.Prim.void#]
                                                        of
                                                        s2#_sacJP
                                                        { (##) -> Unit# [GHC.Tuple.()];
                                                        };
                                                  };
                                              1# -> Unit# [GHC.Tuple.()];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.flushWriteBuffer
  :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.Internals.flushWriteBuffer1 eta_B2 GHC.Prim.void#;

lvl7_ra7Pn :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "codec_state"#;

GHC.IO.Handle.Internals.decodeByteBuf2
  :: forall dec_state. dec_state
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl7_ra7Pn of sat_sacJQ {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sacJQ;
        };

GHC.IO.Handle.Internals.decodeByteBuf1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Buffer.CharBuffer #)
[GblId,
 Arity=3,
 Str=<S,1*U><L,U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [h__sacJR cbuf_sacJS void_0E]
        case h__sacJR of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       dt_sacK0
                                       _ [Occ=Dead]
                                       dt1_sacK2 [Occ=Once*]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds4_sacK6 [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt_sacK0 GHC.Prim.void#] of {
                Unit# ipv1_sacKd ->
                    case ds4_sacK6 of {
                      GHC.Base.Nothing ->
                          let {
                            sat_sacKf [Occ=Once]
                              :: (dec_state_aa47A, GHC.IO.Buffer.Buffer GHC.Word.Word8)
                            [LclId] =
                                CCCS (,)! [GHC.IO.Handle.Internals.decodeByteBuf2 ipv1_sacKd];
                          } in 
                            case
                                writeMutVar# [dt1_sacK2 sat_sacKf GHC.Prim.void#]
                            of
                            s2#_sacKg
                            { (##) ->
                                  case
                                      GHC.IO.Encoding.Latin1.latin5
                                          ipv1_sacKd cbuf_sacJS GHC.Prim.void#
                                  of
                                  { Unit# ipv3_sacKj [Occ=Once!] ->
                                        case ipv3_sacKj of {
                                          (,,) _ [Occ=Dead]
                                               input'_sacKm [Occ=Once]
                                               output'_sacKn [Occ=Once] ->
                                              case
                                                  writeMutVar# [dt_sacK0
                                                                input'_sacKm
                                                                GHC.Prim.void#]
                                              of
                                              s2#1_sacKo
                                              { (##) -> Unit# [output'_sacKn];
                                              };
                                        };
                                  };
                            };
                      GHC.Base.Just decoder_sacKp [Occ=Once!] ->
                          case decoder_sacKp of {
                            GHC.IO.Encoding.Types.BufferCodec ds10_sacKr [Occ=Once]
                                                              ds11_sacKs [Occ=Once]
                                                              _ [Occ=Dead]
                                                              ds13_sacKu [Occ=Once]
                                                              _ [Occ=Dead] ->
                                case ds13_sacKu GHC.Prim.void# of {
                                  Unit# ipv3_sacKy [Occ=Once] ->
                                      let {
                                        sat_sacKz [Occ=Once]
                                          :: (dec_state_aa47A, GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                        [LclId] =
                                            CCCS (,)! [ipv3_sacKy ipv1_sacKd];
                                      } in 
                                        case
                                            writeMutVar# [dt1_sacK2 sat_sacKz GHC.Prim.void#]
                                        of
                                        s2#_sacKA
                                        { (##) ->
                                              case
                                                  GHC.IO.Handle.Internals.$wstreamEncode
                                                      ds10_sacKr
                                                      ds11_sacKs
                                                      ipv1_sacKd
                                                      cbuf_sacJS
                                                      GHC.Prim.void#
                                              of
                                              { Unit# ipv5_sacKD [Occ=Once!] ->
                                                    case ipv5_sacKD of {
                                                      (,) bbuf2_sacKF [Occ=Once]
                                                          cbuf'_sacKG [Occ=Once] ->
                                                          case
                                                              writeMutVar# [dt_sacK0
                                                                            bbuf2_sacKF
                                                                            GHC.Prim.void#]
                                                          of
                                                          s2#1_sacKH
                                                          { (##) -> Unit# [cbuf'_sacKG];
                                                          };
                                                    };
                                              };
                                        };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.decodeByteBuf
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Types.IO GHC.IO.Buffer.CharBuffer
[GblId,
 Arity=3,
 Str=<S,1*U><L,U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.Internals.decodeByteBuf1
            eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.readTextDeviceNonBlocking1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Buffer.CharBuffer #)
[GblId,
 Arity=3,
 Str=<S,1*U><L,U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [h__sacKI cbuf_sacKJ void_0E]
        case h__sacKI of wild_sacKL {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       $dBufferedIO_sacKN [Occ=Once]
                                       _ [Occ=Dead]
                                       ds_sacKP [Occ=Once]
                                       _ [Occ=Dead]
                                       dt_sacKR
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt_sacKR GHC.Prim.void#] of {
                Unit# ipv1_sacL4 [Occ=Once!] ->
                    case ipv1_sacL4 of wild1_sacL5 {
                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           dt7_sacLa [Occ=Once]
                                           dt8_sacLb [Occ=Once] ->
                          case ==# [dt7_sacLa dt8_sacLb] of {
                            __DEFAULT ->
                                GHC.IO.Handle.Internals.decodeByteBuf1
                                    wild_sacKL cbuf_sacKJ GHC.Prim.void#;
                            1# ->
                                case
                                    GHC.IO.BufferedIO.fillReadBuffer0
                                        $dBufferedIO_sacKN ds_sacKP wild1_sacL5 GHC.Prim.void#
                                of
                                { Unit# ipv3_sacLf [Occ=Once!] ->
                                      case ipv3_sacLf of {
                                        (,) r_sacLh [Occ=Once!] bbuf1_sacLi [Occ=Once] ->
                                            case r_sacLh of {
                                              GHC.Base.Nothing ->
                                                  raiseIO# [GHC.IO.Handle.Internals.hLookAhead_3
                                                            GHC.Prim.void#];
                                              GHC.Base.Just _ [Occ=Dead] ->
                                                  case
                                                      writeMutVar# [dt_sacKR
                                                                    bbuf1_sacLi
                                                                    GHC.Prim.void#]
                                                  of
                                                  s2#_sacLm
                                                  { (##) ->
                                                        GHC.IO.Handle.Internals.decodeByteBuf1
                                                            wild_sacKL cbuf_sacKJ GHC.Prim.void#;
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.readTextDeviceNonBlocking
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Types.IO GHC.IO.Buffer.CharBuffer
[GblId,
 Arity=3,
 Str=<S,1*U><L,U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.Internals.readTextDeviceNonBlocking1
            eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.wantReadableHandle2
  :: forall a.
     (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Str=<L,1*C1(C1(U(U,U)))><S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [act_sacLn h__sacLo void_0E]
        case h__sacLo of wild_sacLq {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       $dBufferedIO_sacLs [Occ=Once]
                                       _ [Occ=Dead]
                                       ds_sacLu [Occ=Once]
                                       ds1_sacLv [Occ=Once!]
                                       dt_sacLw
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       dt2_sacLz
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case ds1_sacLv of {
                GHC.IO.Handle.Types.ClosedHandle ->
                    raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle11
                              GHC.Prim.void#];
                GHC.IO.Handle.Types.SemiClosedHandle ->
                    raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle7
                              GHC.Prim.void#];
                GHC.IO.Handle.Types.ReadHandle ->
                    act_sacLn wild_sacLq GHC.Prim.void#;
                GHC.IO.Handle.Types.WriteHandle ->
                    raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle3
                              GHC.Prim.void#];
                GHC.IO.Handle.Types.AppendHandle ->
                    raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle3
                              GHC.Prim.void#];
                GHC.IO.Handle.Types.ReadWriteHandle ->
                    case readMutVar# [dt_sacLw GHC.Prim.void#] of {
                      Unit# ipv1_sacLK [Occ=Once!] ->
                          case ipv1_sacLK of {
                            GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 ds10_sacLO [Occ=Once!]
                                                 _ [Occ=Dead]
                                                 dt7_sacLQ [Occ=Once]
                                                 dt8_sacLR [Occ=Once] ->
                                case ds10_sacLO of {
                                  GHC.IO.Buffer.ReadBuffer -> act_sacLn wild_sacLq GHC.Prim.void#;
                                  GHC.IO.Buffer.WriteBuffer ->
                                      case ==# [dt7_sacLQ dt8_sacLR] of {
                                        __DEFAULT ->
                                            case readMutVar# [dt_sacLw GHC.Prim.void#] of {
                                              Unit# ipv3_sacLW [Occ=Once!] ->
                                                  case ipv3_sacLW of wild4_sacLX {
                                                    GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                         _ [Occ=Dead]
                                                                         _ [Occ=Dead]
                                                                         _ [Occ=Dead]
                                                                         dt12_sacM2 [Occ=Once]
                                                                         dt13_sacM3 [Occ=Once] ->
                                                        case ==# [dt12_sacM2 dt13_sacM3] of {
                                                          __DEFAULT ->
                                                              case
                                                                  GHC.IO.BufferedIO.flushWriteBuffer
                                                                      $dBufferedIO_sacLs
                                                                      ds_sacLu
                                                                      wild4_sacLX
                                                                      GHC.Prim.void#
                                                              of
                                                              { Unit# ipv5_sacM7 [Occ=Once] ->
                                                                    case
                                                                        writeMutVar# [dt_sacLw
                                                                                      ipv5_sacM7
                                                                                      GHC.Prim.void#]
                                                                    of
                                                                    s2#_sacM8
                                                                    { (##) ->
                                                                          case
                                                                              readMutVar# [dt2_sacLz
                                                                                           GHC.Prim.void#]
                                                                          of
                                                                          { Unit# ipv7_sacMb [Occ=Once!] ->
                                                                                let {
                                                                                  sat_sacMj [Occ=Once]
                                                                                    :: GHC.IO.Buffer.Buffer
                                                                                         GHC.IO.Buffer.CharBufElem
                                                                                  [LclId] =
                                                                                      [ipv7_sacMb] \u []
                                                                                          case
                                                                                              ipv7_sacMb
                                                                                          of
                                                                                          { GHC.IO.Buffer.Buffer dt14_sacMd [Occ=Once]
                                                                                                                 dt15_sacMe [Occ=Once]
                                                                                                                 _ [Occ=Dead]
                                                                                                                 dt16_sacMg [Occ=Once]
                                                                                                                 dt17_sacMh [Occ=Once]
                                                                                                                 dt18_sacMi [Occ=Once] ->
                                                                                                GHC.IO.Buffer.Buffer [dt14_sacMd
                                                                                                                      dt15_sacMe
                                                                                                                      GHC.IO.Buffer.ReadBuffer
                                                                                                                      dt16_sacMg
                                                                                                                      dt17_sacMh
                                                                                                                      dt18_sacMi];
                                                                                          };
                                                                                } in 
                                                                                  case
                                                                                      writeMutVar# [dt2_sacLz
                                                                                                    sat_sacMj
                                                                                                    GHC.Prim.void#]
                                                                                  of
                                                                                  s2#1_sacMk
                                                                                  { (##) ->
                                                                                        case
                                                                                            readMutVar# [dt_sacLw
                                                                                                         GHC.Prim.void#]
                                                                                        of
                                                                                        { Unit# ipv9_sacMn [Occ=Once!] ->
                                                                                              let {
                                                                                                sat_sacMv [Occ=Once]
                                                                                                  :: GHC.IO.Buffer.Buffer
                                                                                                       GHC.Word.Word8
                                                                                                [LclId] =
                                                                                                    [ipv9_sacMn] \u []
                                                                                                        case
                                                                                                            ipv9_sacMn
                                                                                                        of
                                                                                                        { GHC.IO.Buffer.Buffer dt14_sacMp [Occ=Once]
                                                                                                                               dt15_sacMq [Occ=Once]
                                                                                                                               _ [Occ=Dead]
                                                                                                                               dt16_sacMs [Occ=Once]
                                                                                                                               dt17_sacMt [Occ=Once]
                                                                                                                               dt18_sacMu [Occ=Once] ->
                                                                                                              GHC.IO.Buffer.Buffer [dt14_sacMp
                                                                                                                                    dt15_sacMq
                                                                                                                                    GHC.IO.Buffer.ReadBuffer
                                                                                                                                    dt16_sacMs
                                                                                                                                    dt17_sacMt
                                                                                                                                    dt18_sacMu];
                                                                                                        };
                                                                                              } in 
                                                                                                case
                                                                                                    writeMutVar# [dt_sacLw
                                                                                                                  sat_sacMv
                                                                                                                  GHC.Prim.void#]
                                                                                                of
                                                                                                s2#2_sacMw
                                                                                                { (##) ->
                                                                                                      act_sacLn
                                                                                                          wild_sacLq
                                                                                                          GHC.Prim.void#;
                                                                                                };
                                                                                        };
                                                                                  };
                                                                          };
                                                                    };
                                                              };
                                                          1# ->
                                                              case
                                                                  readMutVar# [dt2_sacLz
                                                                               GHC.Prim.void#]
                                                              of
                                                              { Unit# ipv5_sacMz [Occ=Once!] ->
                                                                    let {
                                                                      sat_sacMH [Occ=Once]
                                                                        :: GHC.IO.Buffer.Buffer
                                                                             GHC.IO.Buffer.CharBufElem
                                                                      [LclId] =
                                                                          [ipv5_sacMz] \u []
                                                                              case ipv5_sacMz of {
                                                                                GHC.IO.Buffer.Buffer dt14_sacMB [Occ=Once]
                                                                                                     dt15_sacMC [Occ=Once]
                                                                                                     _ [Occ=Dead]
                                                                                                     dt16_sacME [Occ=Once]
                                                                                                     dt17_sacMF [Occ=Once]
                                                                                                     dt18_sacMG [Occ=Once] ->
                                                                                    GHC.IO.Buffer.Buffer [dt14_sacMB
                                                                                                          dt15_sacMC
                                                                                                          GHC.IO.Buffer.ReadBuffer
                                                                                                          dt16_sacME
                                                                                                          dt17_sacMF
                                                                                                          dt18_sacMG];
                                                                              };
                                                                    } in 
                                                                      case
                                                                          writeMutVar# [dt2_sacLz
                                                                                        sat_sacMH
                                                                                        GHC.Prim.void#]
                                                                      of
                                                                      s2#_sacMI
                                                                      { (##) ->
                                                                            case
                                                                                readMutVar# [dt_sacLw
                                                                                             GHC.Prim.void#]
                                                                            of
                                                                            { Unit# ipv7_sacML [Occ=Once!] ->
                                                                                  let {
                                                                                    sat_sacMT [Occ=Once]
                                                                                      :: GHC.IO.Buffer.Buffer
                                                                                           GHC.Word.Word8
                                                                                    [LclId] =
                                                                                        [ipv7_sacML] \u []
                                                                                            case
                                                                                                ipv7_sacML
                                                                                            of
                                                                                            { GHC.IO.Buffer.Buffer dt14_sacMN [Occ=Once]
                                                                                                                   dt15_sacMO [Occ=Once]
                                                                                                                   _ [Occ=Dead]
                                                                                                                   dt16_sacMQ [Occ=Once]
                                                                                                                   dt17_sacMR [Occ=Once]
                                                                                                                   dt18_sacMS [Occ=Once] ->
                                                                                                  GHC.IO.Buffer.Buffer [dt14_sacMN
                                                                                                                        dt15_sacMO
                                                                                                                        GHC.IO.Buffer.ReadBuffer
                                                                                                                        dt16_sacMQ
                                                                                                                        dt17_sacMR
                                                                                                                        dt18_sacMS];
                                                                                            };
                                                                                  } in 
                                                                                    case
                                                                                        writeMutVar# [dt_sacLw
                                                                                                      sat_sacMT
                                                                                                      GHC.Prim.void#]
                                                                                    of
                                                                                    s2#1_sacMU
                                                                                    { (##) ->
                                                                                          act_sacLn
                                                                                              wild_sacLq
                                                                                              GHC.Prim.void#;
                                                                                    };
                                                                            };
                                                                      };
                                                              };
                                                        };
                                                  };
                                            };
                                        1# ->
                                            case readMutVar# [dt2_sacLz GHC.Prim.void#] of {
                                              Unit# ipv3_sacMX [Occ=Once!] ->
                                                  let {
                                                    sat_sacN5 [Occ=Once]
                                                      :: GHC.IO.Buffer.Buffer
                                                           GHC.IO.Buffer.CharBufElem
                                                    [LclId] =
                                                        [ipv3_sacMX] \u []
                                                            case ipv3_sacMX of {
                                                              GHC.IO.Buffer.Buffer dt9_sacMZ [Occ=Once]
                                                                                   dt10_sacN0 [Occ=Once]
                                                                                   _ [Occ=Dead]
                                                                                   dt11_sacN2 [Occ=Once]
                                                                                   dt12_sacN3 [Occ=Once]
                                                                                   dt13_sacN4 [Occ=Once] ->
                                                                  GHC.IO.Buffer.Buffer [dt9_sacMZ
                                                                                        dt10_sacN0
                                                                                        GHC.IO.Buffer.ReadBuffer
                                                                                        dt11_sacN2
                                                                                        dt12_sacN3
                                                                                        dt13_sacN4];
                                                            };
                                                  } in 
                                                    case
                                                        writeMutVar# [dt2_sacLz
                                                                      sat_sacN5
                                                                      GHC.Prim.void#]
                                                    of
                                                    s2#_sacN6
                                                    { (##) ->
                                                          case
                                                              readMutVar# [dt_sacLw GHC.Prim.void#]
                                                          of
                                                          { Unit# ipv5_sacN9 [Occ=Once!] ->
                                                                let {
                                                                  sat_sacNh [Occ=Once]
                                                                    :: GHC.IO.Buffer.Buffer
                                                                         GHC.Word.Word8
                                                                  [LclId] =
                                                                      [ipv5_sacN9] \u []
                                                                          case ipv5_sacN9 of {
                                                                            GHC.IO.Buffer.Buffer dt9_sacNb [Occ=Once]
                                                                                                 dt10_sacNc [Occ=Once]
                                                                                                 _ [Occ=Dead]
                                                                                                 dt11_sacNe [Occ=Once]
                                                                                                 dt12_sacNf [Occ=Once]
                                                                                                 dt13_sacNg [Occ=Once] ->
                                                                                GHC.IO.Buffer.Buffer [dt9_sacNb
                                                                                                      dt10_sacNc
                                                                                                      GHC.IO.Buffer.ReadBuffer
                                                                                                      dt11_sacNe
                                                                                                      dt12_sacNf
                                                                                                      dt13_sacNg];
                                                                          };
                                                                } in 
                                                                  case
                                                                      writeMutVar# [dt_sacLw
                                                                                    sat_sacNh
                                                                                    GHC.Prim.void#]
                                                                  of
                                                                  s2#1_sacNi
                                                                  { (##) ->
                                                                        act_sacLn
                                                                            wild_sacLq
                                                                            GHC.Prim.void#;
                                                                  };
                                                          };
                                                    };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

lvl8_ra7Po :: GHC.IO.Handle.Types.BufferMode
[GblId, Caf=NoCafRefs, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Handle.Types.BlockBuffering! [GHC.Base.Nothing];

GHC.IO.Handle.Internals.mkDuplexHandle5
  :: forall dev.
     (GHC.IO.Device.IODevice dev, GHC.IO.BufferedIO.BufferedIO dev,
      Data.Typeable.Internal.Typeable dev) =>
     dev
     -> GHC.IO.FilePath
     -> GHC.IO.Handle.Types.HandleType
     -> GHC.Types.Bool
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.NewlineMode
     -> GHC.Base.Maybe GHC.IO.Handle.Internals.HandleFinalizer
     -> GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId,
 Arity=12,
 Str=<L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U)><L,U><L,U><L,U><L,U><L,1*U><S,U><L,U(1*U,1*U)><L,1*U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [$dIODevice_sacNj
           $dBufferedIO_sacNk
           $dTypeable_sacNl
           dev1_sacNm
           filepath_sacNn
           ha_type_sacNo
           buffered_sacNp
           mb_codec_sacNq
           nl_sacNr
           finalizer_sacNs
           other_side_sacNt
           void_0E]
        let-no-escape {
          cont_sacNv [Occ=Once*!T[5], Dmd=<L,1*C1(C1(C1(U(U,U))))>]
            :: forall es ds.
               GHC.Base.Maybe (GHC.IO.Encoding.Types.TextEncoder es)
               -> GHC.Base.Maybe (GHC.IO.Encoding.Types.TextDecoder ds)
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     GHC.IO.Handle.Types.Handle #)
          [LclId[JoinId(5)], Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
              sat-only [$dIODevice_sacNj
                        $dBufferedIO_sacNk
                        $dTypeable_sacNl
                        dev1_sacNm
                        filepath_sacNn
                        ha_type_sacNo
                        buffered_sacNp
                        mb_codec_sacNq
                        nl_sacNr
                        finalizer_sacNs
                        other_side_sacNt] \r [mb_encoder_sacNw mb_decoder_sacNx void_0E]
                  let {
                    buf_state_sacNz :: GHC.IO.Buffer.BufferState
                    [LclId] =
                        [ha_type_sacNo] \u []
                            case ha_type_sacNo of {
                              __DEFAULT -> GHC.IO.Buffer.WriteBuffer [];
                              GHC.IO.Handle.Types.ReadHandle -> GHC.IO.Buffer.ReadBuffer [];
                            };
                  } in 
                    case
                        GHC.IO.BufferedIO.newBuffer
                            $dBufferedIO_sacNk dev1_sacNm buf_state_sacNz GHC.Prim.void#
                    of
                    { Unit# ipv1_sacND ->
                          case newMutVar# [ipv1_sacND GHC.Prim.void#] of {
                            Unit# ipv3_sacNG [Occ=Once] ->
                                let {
                                  sat_sacNH [Occ=Once]
                                    :: (ds_aa4hw, GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                  [LclId] =
                                      CCCS (,)! [GHC.IO.Handle.Internals.decodeByteBuf2 ipv1_sacND];
                                } in 
                                  case newMutVar# [sat_sacNH GHC.Prim.void#] of {
                                    Unit# ipv5_sacNK [Occ=Once] ->
                                        let-no-escape {
                                          $w$j_sacNL [InlPrag=NOUSERINLINE[0],
                                                      Occ=Once*!T[3],
                                                      Dmd=<L,1*C1(C1(C1(U(U,U))))>]
                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> GHC.IORef.IORef GHC.IO.Buffer.CharBuffer
                                               -> GHC.IO.Handle.Types.BufferMode
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                     GHC.IO.Handle.Types.Handle #)
                                          [LclId[JoinId(3)],
                                           Arity=3,
                                           Str=<S,U><L,1*U(U)><L,U>,
                                           Unf=OtherCon []] =
                                              sat-only [$dIODevice_sacNj
                                                        $dBufferedIO_sacNk
                                                        $dTypeable_sacNl
                                                        dev1_sacNm
                                                        filepath_sacNn
                                                        ha_type_sacNo
                                                        mb_codec_sacNq
                                                        nl_sacNr
                                                        finalizer_sacNs
                                                        other_side_sacNt
                                                        mb_encoder_sacNw
                                                        mb_decoder_sacNx
                                                        ipv3_sacNG
                                                        ipv5_sacNK] \r [void_0E ww_sacNN ww1_sacNO]
                                                  case
                                                      newMutVar# [GHC.IO.Handle.Types.BufferListNil
                                                                  GHC.Prim.void#]
                                                  of
                                                  { Unit# ipv7_sacNR [Occ=Once] ->
                                                        case newMVar# [GHC.Prim.void#] of {
                                                          Unit# ipv9_sacNU ->
                                                              let {
                                                                sat_sacO0 [Occ=Once]
                                                                  :: GHC.IO.Handle.Types.Handle__
                                                                [LclId] =
                                                                    [$dIODevice_sacNj
                                                                     $dBufferedIO_sacNk
                                                                     $dTypeable_sacNl
                                                                     dev1_sacNm
                                                                     ha_type_sacNo
                                                                     mb_codec_sacNq
                                                                     nl_sacNr
                                                                     other_side_sacNt
                                                                     mb_encoder_sacNw
                                                                     mb_decoder_sacNx
                                                                     ipv3_sacNG
                                                                     ipv5_sacNK
                                                                     ww_sacNN
                                                                     ww1_sacNO
                                                                     ipv7_sacNR] \u []
                                                                        case
                                                                            dev1_sacNm
                                                                        of
                                                                        dt_sacNV
                                                                        { __DEFAULT ->
                                                                              case ww_sacNN of {
                                                                                GHC.STRef.STRef dt2_sacNX [Occ=Once] ->
                                                                                    let {
                                                                                      sat_sacNZ [Occ=Once]
                                                                                        :: GHC.IO.Handle.Types.Newline
                                                                                      [LclId] =
                                                                                          [nl_sacNr] \u []
                                                                                              GHC.IO.Handle.Types.outputNL
                                                                                                  nl_sacNr; } in
                                                                                    let {
                                                                                      sat_sacNY [Occ=Once]
                                                                                        :: GHC.IO.Handle.Types.Newline
                                                                                      [LclId] =
                                                                                          [nl_sacNr] \u []
                                                                                              GHC.IO.Handle.Types.inputNL
                                                                                                  nl_sacNr;
                                                                                    } in 
                                                                                      GHC.IO.Handle.Types.Handle__ [$dIODevice_sacNj
                                                                                                                    $dBufferedIO_sacNk
                                                                                                                    $dTypeable_sacNl
                                                                                                                    dt_sacNV
                                                                                                                    ha_type_sacNo
                                                                                                                    ipv3_sacNG
                                                                                                                    ww1_sacNO
                                                                                                                    ipv5_sacNK
                                                                                                                    dt2_sacNX
                                                                                                                    ipv7_sacNR
                                                                                                                    mb_encoder_sacNw
                                                                                                                    mb_decoder_sacNx
                                                                                                                    mb_codec_sacNq
                                                                                                                    sat_sacNY
                                                                                                                    sat_sacNZ
                                                                                                                    other_side_sacNt];
                                                                              };
                                                                        };
                                                              } in 
                                                                case
                                                                    putMVar# [ipv9_sacNU
                                                                              sat_sacO0
                                                                              GHC.Prim.void#]
                                                                of
                                                                s2#_sacO1
                                                                { (##) ->
                                                                      case finalizer_sacNs of {
                                                                        GHC.Base.Nothing ->
                                                                            let {
                                                                              sat_sacO3 [Occ=Once]
                                                                                :: GHC.IO.Handle.Types.Handle
                                                                              [LclId] =
                                                                                  CCCS GHC.IO.Handle.Types.FileHandle! [filepath_sacNn
                                                                                                                        ipv9_sacNU];
                                                                            } in  Unit# [sat_sacO3];
                                                                        GHC.Base.Just finalizer1_sacO4 [Occ=Once!] ->
                                                                            let {
                                                                              sat_sacO6 [Occ=Once]
                                                                                :: GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld
                                                                                   -> (# GHC.Prim.State#
                                                                                           GHC.Prim.RealWorld,
                                                                                         () #)
                                                                              [LclId] =
                                                                                  [filepath_sacNn
                                                                                   ipv9_sacNU
                                                                                   finalizer1_sacO4] \u []
                                                                                      let {
                                                                                        sat_sacO5 [Occ=Once]
                                                                                          :: GHC.MVar.MVar
                                                                                               GHC.IO.Handle.Types.Handle__
                                                                                        [LclId] =
                                                                                            CCCS GHC.MVar.MVar! [ipv9_sacNU];
                                                                                      } in 
                                                                                        finalizer1_sacO4
                                                                                            filepath_sacNn
                                                                                            sat_sacO5;
                                                                            } in 
                                                                              case
                                                                                  mkWeak# [ipv9_sacNU
                                                                                           GHC.Tuple.()
                                                                                           sat_sacO6
                                                                                           GHC.Prim.void#]
                                                                              of
                                                                              { Unit# _ [Occ=Dead] ->
                                                                                    let {
                                                                                      sat_sacOa [Occ=Once]
                                                                                        :: GHC.IO.Handle.Types.Handle
                                                                                      [LclId] =
                                                                                          CCCS GHC.IO.Handle.Types.FileHandle! [filepath_sacNn
                                                                                                                                ipv9_sacNU];
                                                                                    } in 
                                                                                      Unit# [sat_sacOa];
                                                                              };
                                                                      };
                                                                };
                                                        };
                                                  };
                                        } in 
                                          case buffered_sacNp of {
                                            GHC.Types.False ->
                                                case
                                                    newMutVar# [GHC.ForeignPtr.NoFinalizers
                                                                GHC.Prim.void#]
                                                of
                                                { Unit# ipv7_sacOe [Occ=Once] ->
                                                      case
                                                          newPinnedByteArray# [8192# GHC.Prim.void#]
                                                      of
                                                      { Unit# ipv9_sacOh ->
                                                            let {
                                                              sat_sacOj [Occ=Once]
                                                                :: GHC.ForeignPtr.ForeignPtrContents
                                                              [LclId] =
                                                                  CCCS GHC.ForeignPtr.MallocPtr! [ipv9_sacOh
                                                                                                  ipv7_sacOe];
                                                            } in 
                                                              case
                                                                  byteArrayContents# [ipv9_sacOh]
                                                              of
                                                              sat_sacOi
                                                              { __DEFAULT ->
                                                                    let {
                                                                      sat_sacOk [Occ=Once]
                                                                        :: GHC.IO.Buffer.CharBuffer
                                                                      [LclId] =
                                                                          CCCS GHC.IO.Buffer.Buffer! [sat_sacOi
                                                                                                      sat_sacOj
                                                                                                      buf_state_sacNz
                                                                                                      2048#
                                                                                                      0#
                                                                                                      0#];
                                                                    } in 
                                                                      case
                                                                          newMutVar# [sat_sacOk
                                                                                      GHC.Prim.void#]
                                                                      of
                                                                      { Unit# ipv11_sacOn [Occ=Once] ->
                                                                            let {
                                                                              sat_sacOo [Occ=Once]
                                                                                :: GHC.IORef.IORef
                                                                                     GHC.IO.Buffer.CharBuffer
                                                                              [LclId] =
                                                                                  CCCS GHC.STRef.STRef! [ipv11_sacOn];
                                                                            } in 
                                                                              $w$j_sacNL
                                                                                  GHC.Prim.void#
                                                                                  sat_sacOo
                                                                                  GHC.IO.Handle.Types.NoBuffering;
                                                                      };
                                                              };
                                                      };
                                                };
                                            GHC.Types.True ->
                                                case
                                                    newMutVar# [GHC.ForeignPtr.NoFinalizers
                                                                GHC.Prim.void#]
                                                of
                                                { Unit# ipv7_sacOr [Occ=Once] ->
                                                      case
                                                          newPinnedByteArray# [8192# GHC.Prim.void#]
                                                      of
                                                      { Unit# ipv9_sacOu ->
                                                            let {
                                                              sat_sacOw [Occ=Once]
                                                                :: GHC.ForeignPtr.ForeignPtrContents
                                                              [LclId] =
                                                                  CCCS GHC.ForeignPtr.MallocPtr! [ipv9_sacOu
                                                                                                  ipv7_sacOr];
                                                            } in 
                                                              case
                                                                  byteArrayContents# [ipv9_sacOu]
                                                              of
                                                              sat_sacOv
                                                              { __DEFAULT ->
                                                                    let {
                                                                      sat_sacOx [Occ=Once]
                                                                        :: GHC.IO.Buffer.CharBuffer
                                                                      [LclId] =
                                                                          CCCS GHC.IO.Buffer.Buffer! [sat_sacOv
                                                                                                      sat_sacOw
                                                                                                      buf_state_sacNz
                                                                                                      2048#
                                                                                                      0#
                                                                                                      0#];
                                                                    } in 
                                                                      case
                                                                          newMutVar# [sat_sacOx
                                                                                      GHC.Prim.void#]
                                                                      of
                                                                      { Unit# ipv11_sacOA [Occ=Once] ->
                                                                            case
                                                                                GHC.IO.Device.isTerminal
                                                                                    $dIODevice_sacNj
                                                                                    dev1_sacNm
                                                                                    GHC.Prim.void#
                                                                            of
                                                                            { Unit# ipv13_sacOD [Occ=Once!] ->
                                                                                  let {
                                                                                    sat_sacOG [Occ=Once]
                                                                                      :: GHC.IO.Handle.Types.BufferMode
                                                                                    [LclId] =
                                                                                        [ipv13_sacOD] \u []
                                                                                            case
                                                                                                ipv13_sacOD
                                                                                            of
                                                                                            { GHC.Types.False ->
                                                                                                  lvl8_ra7Po;
                                                                                              GHC.Types.True ->
                                                                                                  GHC.IO.Handle.Types.LineBuffering [];
                                                                                            }; } in
                                                                                  let {
                                                                                    sat_sacOE [Occ=Once]
                                                                                      :: GHC.IORef.IORef
                                                                                           GHC.IO.Buffer.CharBuffer
                                                                                    [LclId] =
                                                                                        CCCS GHC.STRef.STRef! [ipv11_sacOA];
                                                                                  } in 
                                                                                    $w$j_sacNL
                                                                                        GHC.Prim.void#
                                                                                        sat_sacOE
                                                                                        sat_sacOG;
                                                                            };
                                                                      };
                                                              };
                                                      };
                                                };
                                          };
                                  };
                          };
                    };
        } in 
          case mb_codec_sacNq of {
            GHC.Base.Nothing ->
                cont_sacNv GHC.Base.Nothing GHC.Base.Nothing GHC.Prim.void#;
            GHC.Base.Just ds_sacOI [Occ=Once!] ->
                case ds_sacOI of {
                  GHC.IO.Encoding.Types.TextEncoding _ [Occ=Dead]
                                                     ds2_sacOL [Occ=Once*]
                                                     ds3_sacOM [Occ=Once*] ->
                      let-no-escape {
                        $j_sacON [Occ=Once*!T[2], Dmd=<L,1*C1(C1(U(U,U)))>]
                          :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> GHC.Base.Maybe (GHC.IO.Encoding.Types.TextDecoder dstate_aa436)
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                   GHC.IO.Handle.Types.Handle #)
                        [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
                            sat-only [ha_type_sacNo cont_sacNv ds3_sacOM] \r [void_0E
                                                                              ipv1_sacOP]
                                case ha_type_sacNo of {
                                  __DEFAULT ->
                                      cont_sacNv GHC.Base.Nothing ipv1_sacOP GHC.Prim.void#;
                                  GHC.IO.Handle.Types.WriteHandle ->
                                      case ds3_sacOM GHC.Prim.void# of {
                                        Unit# ipv3_sacOT [Occ=Once] ->
                                            let {
                                              sat_sacOU [Occ=Once]
                                                :: GHC.Base.Maybe
                                                     (GHC.IO.Encoding.Types.TextEncoder
                                                        estate_aa437)
                                              [LclId] =
                                                  CCCS GHC.Base.Just! [ipv3_sacOT];
                                            } in  cont_sacNv sat_sacOU ipv1_sacOP GHC.Prim.void#;
                                      };
                                  GHC.IO.Handle.Types.AppendHandle ->
                                      case ds3_sacOM GHC.Prim.void# of {
                                        Unit# ipv3_sacOX [Occ=Once] ->
                                            let {
                                              sat_sacOY [Occ=Once]
                                                :: GHC.Base.Maybe
                                                     (GHC.IO.Encoding.Types.TextEncoder
                                                        estate_aa437)
                                              [LclId] =
                                                  CCCS GHC.Base.Just! [ipv3_sacOX];
                                            } in  cont_sacNv sat_sacOY ipv1_sacOP GHC.Prim.void#;
                                      };
                                  GHC.IO.Handle.Types.ReadWriteHandle ->
                                      case ds3_sacOM GHC.Prim.void# of {
                                        Unit# ipv3_sacP1 [Occ=Once] ->
                                            let {
                                              sat_sacP2 [Occ=Once]
                                                :: GHC.Base.Maybe
                                                     (GHC.IO.Encoding.Types.TextEncoder
                                                        estate_aa437)
                                              [LclId] =
                                                  CCCS GHC.Base.Just! [ipv3_sacP1];
                                            } in  cont_sacNv sat_sacP2 ipv1_sacOP GHC.Prim.void#;
                                      };
                                };
                      } in 
                        case ha_type_sacNo of {
                          __DEFAULT -> $j_sacON GHC.Prim.void# GHC.Base.Nothing;
                          GHC.IO.Handle.Types.ReadHandle ->
                              case ds2_sacOL GHC.Prim.void# of {
                                Unit# ipv1_sacP6 [Occ=Once] ->
                                    let {
                                      sat_sacP7 [Occ=Once]
                                        :: GHC.Base.Maybe
                                             (GHC.IO.Encoding.Types.TextDecoder dstate_aa436)
                                      [LclId] =
                                          CCCS GHC.Base.Just! [ipv1_sacP6];
                                    } in  $j_sacON GHC.Prim.void# sat_sacP7;
                              };
                          GHC.IO.Handle.Types.ReadWriteHandle ->
                              case ds2_sacOL GHC.Prim.void# of {
                                Unit# ipv1_sacPa [Occ=Once] ->
                                    let {
                                      sat_sacPb [Occ=Once]
                                        :: GHC.Base.Maybe
                                             (GHC.IO.Encoding.Types.TextDecoder dstate_aa436)
                                      [LclId] =
                                          CCCS GHC.Base.Just! [ipv1_sacPa];
                                    } in  $j_sacON GHC.Prim.void# sat_sacPb;
                              };
                        };
                };
          };

GHC.IO.Handle.Internals.mkHandle
  :: forall dev.
     (GHC.IO.Device.IODevice dev, GHC.IO.BufferedIO.BufferedIO dev,
      Data.Typeable.Internal.Typeable dev) =>
     dev
     -> GHC.IO.FilePath
     -> GHC.IO.Handle.Types.HandleType
     -> GHC.Types.Bool
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.NewlineMode
     -> GHC.Base.Maybe GHC.IO.Handle.Internals.HandleFinalizer
     -> GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
     -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId,
 Arity=12,
 Str=<L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U)><L,U><L,U><L,U><L,U><L,1*U><S,U><L,U(1*U,1*U)><L,1*U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_Bc
           eta_Bb
           eta_Ba
           eta_B9
           eta_B8
           eta_B7
           eta_B6
           eta_B5
           eta_B4
           eta_B3
           eta_B2
           void_0E]
        GHC.IO.Handle.Internals.mkDuplexHandle5
            eta_Bc
            eta_Bb
            eta_Ba
            eta_B9
            eta_B8
            eta_B7
            eta_B6
            eta_B5
            eta_B4
            eta_B3
            eta_B2
            GHC.Prim.void#;

GHC.IO.Handle.Internals.debugIO1
  :: GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><S,U>, Unf=OtherCon []] =
    [] \r [s_sacPc void_0E] Unit# [GHC.Tuple.()];

GHC.IO.Handle.Internals.debugIO
  :: GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.Internals.debugIO1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.$wwriteCharBuffer [InlPrag=NOUSERINLINE[0],
                                           Occ=LoopBreaker]
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> GHC.IO.Buffer.BufferState
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=8,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U><L,U><L,U><L,U><L,U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sacPe
           ww_sacPf
           ww1_sacPg
           ww2_sacPh
           ww3_sacPi
           ww4_sacPj
           ww5_sacPk
           void_0E]
        case w_sacPe of wild_sacPm {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       $dBufferedIO_sacPo [Occ=Once]
                                       _ [Occ=Dead]
                                       ds_sacPq [Occ=Once]
                                       _ [Occ=Dead]
                                       dt_sacPs
                                       ds2_sacPt [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds3_sacPx [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt_sacPs GHC.Prim.void#] of {
                Unit# ipv1_sacPF [Occ=Once*] ->
                    let-no-escape {
                      $w$j_sacPG [InlPrag=NOUSERINLINE[0],
                                  Occ=Once*!T[8],
                                  Dmd=<L,1*C1(C1(C1(C1(C1(C1(C1(C1(U(U,U)))))))))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> GHC.IO.Buffer.CharBuffer
                           -> GHC.Prim.Addr#
                           -> GHC.ForeignPtr.ForeignPtrContents
                           -> GHC.IO.Buffer.BufferState
                           -> GHC.Prim.Int#
                           -> GHC.Prim.Int#
                           -> GHC.Prim.Int#
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      [LclId[JoinId(8)],
                       Arity=8,
                       Str=<S,U><L,U(U,U,U,U,U,U)><L,U><L,U><L,U><S,U><L,U><S,U>,
                       Unf=OtherCon []] =
                          sat-only [ww4_sacPj
                                    wild_sacPm
                                    $dBufferedIO_sacPo
                                    ds_sacPq
                                    dt_sacPs
                                    ds2_sacPt] \r [void_0E
                                                   ww6_sacPI
                                                   ww7_sacPJ
                                                   ww8_sacPK
                                                   ww9_sacPL
                                                   ww10_sacPM
                                                   ww11_sacPN
                                                   ww12_sacPO]
                              let {
                                wild1_sacPP :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                [LclId, Unf=OtherCon []] =
                                    CCCS GHC.IO.Buffer.Buffer! [ww7_sacPJ
                                                                ww8_sacPK
                                                                ww9_sacPL
                                                                ww10_sacPM
                                                                ww11_sacPN
                                                                ww12_sacPO];
                              } in 
                                let-no-escape {
                                  $j_sacPQ [Dmd=<L,1*U(U,U)>]
                                    :: (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                  [LclId[JoinId(0)], Unf=OtherCon []] =
                                      [wild_sacPm
                                       $dBufferedIO_sacPo
                                       ds_sacPq
                                       dt_sacPs
                                       ww6_sacPI
                                       wild1_sacPP] \r []
                                          case
                                              GHC.IO.BufferedIO.flushWriteBuffer
                                                  $dBufferedIO_sacPo
                                                  ds_sacPq
                                                  wild1_sacPP
                                                  GHC.Prim.void#
                                          of
                                          { Unit# ipv3_sacPT [Occ=Once] ->
                                                case
                                                    writeMutVar# [dt_sacPs
                                                                  ipv3_sacPT
                                                                  GHC.Prim.void#]
                                                of
                                                s2#_sacPU
                                                { (##) ->
                                                      case ww6_sacPI of {
                                                        GHC.IO.Buffer.Buffer dt4_sacPW [Occ=Once]
                                                                             dt5_sacPX [Occ=Once]
                                                                             ds11_sacPY [Occ=Once]
                                                                             dt6_sacPZ [Occ=Once]
                                                                             dt7_sacQ0
                                                                             dt8_sacQ1 ->
                                                            case ==# [dt7_sacQ0 dt8_sacQ1] of {
                                                              __DEFAULT ->
                                                                  GHC.IO.Handle.Internals.$wwriteCharBuffer
                                                                      wild_sacPm
                                                                      dt4_sacPW
                                                                      dt5_sacPX
                                                                      ds11_sacPY
                                                                      dt6_sacPZ
                                                                      dt7_sacQ0
                                                                      dt8_sacQ1
                                                                      GHC.Prim.void#;
                                                              1# -> Unit# [GHC.Tuple.()];
                                                            };
                                                      };
                                                };
                                          };
                                } in 
                                  case ==# [ww10_sacPM ww12_sacPO] of {
                                    __DEFAULT ->
                                        case ww6_sacPI of {
                                          GHC.IO.Buffer.Buffer dt4_sacQ5 [Occ=Once*]
                                                               dt5_sacQ6 [Occ=Once*]
                                                               ds10_sacQ7 [Occ=Once*]
                                                               dt6_sacQ8 [Occ=Once*]
                                                               dt7_sacQ9
                                                               dt8_sacQa ->
                                              let-no-escape {
                                                $j1_sacQb [Occ=Once*T[0], Dmd=<L,1*U(U,U)>]
                                                  :: (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                                [LclId[JoinId(0)], Unf=OtherCon []] =
                                                    [wild_sacPm
                                                     dt_sacPs
                                                     ds2_sacPt
                                                     ww11_sacPN
                                                     ww12_sacPO
                                                     wild1_sacPP
                                                     $j_sacPQ
                                                     dt4_sacQ5
                                                     dt5_sacQ6
                                                     ds10_sacQ7
                                                     dt6_sacQ8
                                                     dt7_sacQ9
                                                     dt8_sacQa] \r []
                                                        case ds2_sacPt of {
                                                          GHC.IO.Handle.Types.NoBuffering ->
                                                              $j_sacPQ;
                                                          GHC.IO.Handle.Types.LineBuffering ->
                                                              case
                                                                  writeMutVar# [dt_sacPs
                                                                                wild1_sacPP
                                                                                GHC.Prim.void#]
                                                              of
                                                              s2#_sacQd
                                                              { (##) ->
                                                                    case
                                                                        ==# [dt7_sacQ9 dt8_sacQa]
                                                                    of
                                                                    { __DEFAULT ->
                                                                          GHC.IO.Handle.Internals.$wwriteCharBuffer
                                                                              wild_sacPm
                                                                              dt4_sacQ5
                                                                              dt5_sacQ6
                                                                              ds10_sacQ7
                                                                              dt6_sacQ8
                                                                              dt7_sacQ9
                                                                              dt8_sacQa
                                                                              GHC.Prim.void#;
                                                                      1# -> Unit# [GHC.Tuple.()];
                                                                    };
                                                              };
                                                          GHC.IO.Handle.Types.BlockBuffering ds11_sacQf [Occ=Once!] ->
                                                              case ds11_sacQf of {
                                                                GHC.Base.Nothing ->
                                                                    case
                                                                        writeMutVar# [dt_sacPs
                                                                                      wild1_sacPP
                                                                                      GHC.Prim.void#]
                                                                    of
                                                                    s2#_sacQh
                                                                    { (##) ->
                                                                          case
                                                                              ==# [dt7_sacQ9
                                                                                   dt8_sacQa]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.IO.Handle.Internals.$wwriteCharBuffer
                                                                                    wild_sacPm
                                                                                    dt4_sacQ5
                                                                                    dt5_sacQ6
                                                                                    ds10_sacQ7
                                                                                    dt6_sacQ8
                                                                                    dt7_sacQ9
                                                                                    dt8_sacQa
                                                                                    GHC.Prim.void#;
                                                                            1# ->
                                                                                Unit# [GHC.Tuple.()];
                                                                          };
                                                                    };
                                                                GHC.Base.Just s_sacQj [Occ=Once!] ->
                                                                    case s_sacQj of {
                                                                      GHC.Types.I# y_sacQl [Occ=Once] ->
                                                                          case
                                                                              -# [ww12_sacPO
                                                                                  ww11_sacPN]
                                                                          of
                                                                          sat_sacQm
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    >=# [sat_sacQm
                                                                                         y_sacQl]
                                                                                of
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          writeMutVar# [dt_sacPs
                                                                                                        wild1_sacPP
                                                                                                        GHC.Prim.void#]
                                                                                      of
                                                                                      s2#_sacQo
                                                                                      { (##) ->
                                                                                            case
                                                                                                ==# [dt7_sacQ9
                                                                                                     dt8_sacQa]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.IO.Handle.Internals.$wwriteCharBuffer
                                                                                                      wild_sacPm
                                                                                                      dt4_sacQ5
                                                                                                      dt5_sacQ6
                                                                                                      ds10_sacQ7
                                                                                                      dt6_sacQ8
                                                                                                      dt7_sacQ9
                                                                                                      dt8_sacQa
                                                                                                      GHC.Prim.void#;
                                                                                              1# ->
                                                                                                  Unit# [GHC.Tuple.()];
                                                                                            };
                                                                                      };
                                                                                  1# -> $j_sacPQ;
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                              } in 
                                                case ==# [dt7_sacQ9 dt8_sacQa] of {
                                                  __DEFAULT ->
                                                      case ==# [dt7_sacQ9 ww4_sacPj] of {
                                                        __DEFAULT -> $j1_sacQb;
                                                        1# -> $j_sacPQ;
                                                      };
                                                  1# -> $j1_sacQb;
                                                };
                                        };
                                    1# -> $j_sacPQ;
                                  };
                    } in 
                      case ds3_sacPx of {
                        GHC.Base.Nothing ->
                            let {
                              sat_sacQt [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Types.Char
                              [LclId] =
                                  CCCS GHC.IO.Buffer.Buffer! [ww_sacPf
                                                              ww1_sacPg
                                                              ww2_sacPh
                                                              ww3_sacPi
                                                              ww4_sacPj
                                                              ww5_sacPk];
                            } in 
                              case
                                  GHC.IO.Encoding.Latin1.latin3 sat_sacQt ipv1_sacPF GHC.Prim.void#
                              of
                              { Unit# ipv3_sacQw [Occ=Once!] ->
                                    case ipv3_sacQw of {
                                      (,,) _ [Occ=Dead]
                                           input'_sacQz [Occ=Once]
                                           output'_sacQA [Occ=Once!] ->
                                          case output'_sacQA of {
                                            GHC.IO.Buffer.Buffer ww7_sacQC [Occ=Once]
                                                                 ww8_sacQD [Occ=Once]
                                                                 ww9_sacQE [Occ=Once]
                                                                 ww10_sacQF [Occ=Once]
                                                                 ww11_sacQG [Occ=Once]
                                                                 ww12_sacQH [Occ=Once] ->
                                                $w$j_sacPG
                                                    GHC.Prim.void#
                                                    input'_sacQz
                                                    ww7_sacQC
                                                    ww8_sacQD
                                                    ww9_sacQE
                                                    ww10_sacQF
                                                    ww11_sacQG
                                                    ww12_sacQH;
                                          };
                                    };
                              };
                        GHC.Base.Just encoder_sacQI [Occ=Once!] ->
                            case encoder_sacQI of {
                              GHC.IO.Encoding.Types.BufferCodec ww7_sacQK [Occ=Once]
                                                                ww8_sacQL [Occ=Once]
                                                                _ [Occ=Dead]
                                                                _ [Occ=Dead]
                                                                _ [Occ=Dead] ->
                                  let {
                                    sat_sacQP [Occ=Once]
                                      :: GHC.IO.Buffer.Buffer GHC.IO.Buffer.CharBufElem
                                    [LclId] =
                                        CCCS GHC.IO.Buffer.Buffer! [ww_sacPf
                                                                    ww1_sacPg
                                                                    ww2_sacPh
                                                                    ww3_sacPi
                                                                    ww4_sacPj
                                                                    ww5_sacPk];
                                  } in 
                                    case
                                        GHC.IO.Handle.Internals.$wstreamEncode
                                            ww7_sacQK ww8_sacQL sat_sacQP ipv1_sacPF GHC.Prim.void#
                                    of
                                    { Unit# ipv3_sacQS [Occ=Once!] ->
                                          case ipv3_sacQS of {
                                            (,) ww13_sacQU [Occ=Once] ww14_sacQV [Occ=Once!] ->
                                                case ww14_sacQV of {
                                                  GHC.IO.Buffer.Buffer ww16_sacQX [Occ=Once]
                                                                       ww17_sacQY [Occ=Once]
                                                                       ww18_sacQZ [Occ=Once]
                                                                       ww19_sacR0 [Occ=Once]
                                                                       ww20_sacR1 [Occ=Once]
                                                                       ww21_sacR2 [Occ=Once] ->
                                                      $w$j_sacPG
                                                          GHC.Prim.void#
                                                          ww13_sacQU
                                                          ww16_sacQX
                                                          ww17_sacQY
                                                          ww18_sacQZ
                                                          ww19_sacR0
                                                          ww20_sacR1
                                                          ww21_sacR2;
                                                };
                                          };
                                    };
                            };
                      };
              };
        };

GHC.IO.Handle.Internals.writeCharBuffer1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,1*U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sacR3 w1_sacR4 void_0E]
        case w1_sacR4 of {
          GHC.IO.Buffer.Buffer ww1_sacR7 [Occ=Once]
                               ww2_sacR8 [Occ=Once]
                               ww3_sacR9 [Occ=Once]
                               ww4_sacRa [Occ=Once]
                               ww5_sacRb [Occ=Once]
                               ww6_sacRc [Occ=Once] ->
              GHC.IO.Handle.Internals.$wwriteCharBuffer
                  w_sacR3
                  ww1_sacR7
                  ww2_sacR8
                  ww3_sacR9
                  ww4_sacRa
                  ww5_sacRb
                  ww6_sacRc
                  GHC.Prim.void#;
        };

GHC.IO.Handle.Internals.writeCharBuffer
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Buffer.CharBuffer -> GHC.Types.IO ()
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,1*U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.Internals.writeCharBuffer1
            eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.flushCharBuffer3
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_sacRd void_0E]
        case ds_sacRd of {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       dt_sacRl [Occ=Once*]
                                       _ [Occ=Dead]
                                       dt1_sacRn [Occ=Once]
                                       dt2_sacRo
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds5_sacRr [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt2_sacRo GHC.Prim.void#] of {
                Unit# ipv1_sacRy [Occ=Once!] ->
                    case ipv1_sacRy of {
                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           ds11_sacRC [Occ=Once!]
                                           _ [Occ=Dead]
                                           dt7_sacRE [Occ=Once]
                                           dt8_sacRF [Occ=Once] ->
                          case ds11_sacRC of {
                            GHC.IO.Buffer.ReadBuffer ->
                                case ==# [dt7_sacRE dt8_sacRF] of {
                                  __DEFAULT ->
                                      case readMutVar# [dt1_sacRn GHC.Prim.void#] of {
                                        Unit# ipv3_sacRK [Occ=Once!] ->
                                            case ipv3_sacRK of {
                                              (,) codec_state_sacRM [Occ=Once]
                                                  bbuf0_sacRN [Occ=Once*] ->
                                                  case readMutVar# [dt2_sacRo GHC.Prim.void#] of {
                                                    Unit# ipv5_sacRQ ->
                                                        let {
                                                          sat_sacRY [Occ=Once]
                                                            :: GHC.IO.Buffer.Buffer
                                                                 GHC.IO.Buffer.CharBufElem
                                                          [LclId] =
                                                              [ipv5_sacRQ] \u []
                                                                  case ipv5_sacRQ of {
                                                                    GHC.IO.Buffer.Buffer dt9_sacRS [Occ=Once]
                                                                                         dt10_sacRT [Occ=Once]
                                                                                         ds14_sacRU [Occ=Once]
                                                                                         dt11_sacRV [Occ=Once]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead] ->
                                                                        GHC.IO.Buffer.Buffer [dt9_sacRS
                                                                                              dt10_sacRT
                                                                                              ds14_sacRU
                                                                                              dt11_sacRV
                                                                                              0#
                                                                                              0#];
                                                                  };
                                                        } in 
                                                          case
                                                              writeMutVar# [dt2_sacRo
                                                                            sat_sacRY
                                                                            GHC.Prim.void#]
                                                          of
                                                          s2#_sacRZ
                                                          { (##) ->
                                                                case ipv5_sacRQ of {
                                                                  GHC.IO.Buffer.Buffer dt9_sacS1 [Occ=Once]
                                                                                       dt10_sacS2 [Occ=Once]
                                                                                       ds14_sacS3 [Occ=Once]
                                                                                       _ [Occ=Dead]
                                                                                       dt12_sacS5 [Occ=Once!]
                                                                                       _ [Occ=Dead] ->
                                                                      case
                                                                          dt12_sacS5
                                                                      of
                                                                      wild5_sacS7
                                                                      { __DEFAULT ->
                                                                            case ds5_sacRr of {
                                                                              GHC.Base.Nothing ->
                                                                                  let {
                                                                                    sat_sacSh [Occ=Once]
                                                                                      :: GHC.IO.Buffer.Buffer
                                                                                           GHC.Word.Word8
                                                                                    [LclId] =
                                                                                        [bbuf0_sacRN
                                                                                         wild5_sacS7] \u []
                                                                                            case
                                                                                                bbuf0_sacRN
                                                                                            of
                                                                                            { GHC.IO.Buffer.Buffer dt14_sacSa [Occ=Once]
                                                                                                                   dt15_sacSb [Occ=Once]
                                                                                                                   ds15_sacSc [Occ=Once]
                                                                                                                   dt16_sacSd [Occ=Once]
                                                                                                                   dt17_sacSe [Occ=Once]
                                                                                                                   dt18_sacSf [Occ=Once] ->
                                                                                                  case
                                                                                                      +# [dt17_sacSe
                                                                                                          wild5_sacS7]
                                                                                                  of
                                                                                                  sat_sacSg
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.IO.Buffer.Buffer [dt14_sacSa
                                                                                                                              dt15_sacSb
                                                                                                                              ds15_sacSc
                                                                                                                              dt16_sacSd
                                                                                                                              sat_sacSg
                                                                                                                              dt18_sacSf];
                                                                                                  };
                                                                                            };
                                                                                  } in 
                                                                                    case
                                                                                        writeMutVar# [dt_sacRl
                                                                                                      sat_sacSh
                                                                                                      GHC.Prim.void#]
                                                                                    of
                                                                                    s2#1_sacSi
                                                                                    { (##) ->
                                                                                          Unit# [GHC.Tuple.()];
                                                                                    };
                                                                              GHC.Base.Just decoder_sacSj [Occ=Once!] ->
                                                                                  case
                                                                                      decoder_sacSj
                                                                                  of
                                                                                  { GHC.IO.Encoding.Types.BufferCodec ds15_sacSl [Occ=Once]
                                                                                                                      ds16_sacSm [Occ=Once]
                                                                                                                      _ [Occ=Dead]
                                                                                                                      _ [Occ=Dead]
                                                                                                                      ds19_sacSp [Occ=Once!] ->
                                                                                        case
                                                                                            ds19_sacSp
                                                                                                codec_state_sacRM
                                                                                                GHC.Prim.void#
                                                                                        of
                                                                                        { Unit# _ [Occ=Dead] ->
                                                                                              let {
                                                                                                sat_sacSt [Occ=Once]
                                                                                                  :: GHC.IO.Buffer.Buffer
                                                                                                       GHC.IO.Buffer.CharBufElem
                                                                                                [LclId] =
                                                                                                    CCCS GHC.IO.Buffer.Buffer! [dt9_sacS1
                                                                                                                                dt10_sacS2
                                                                                                                                ds14_sacS3
                                                                                                                                wild5_sacS7
                                                                                                                                0#
                                                                                                                                0#];
                                                                                              } in 
                                                                                                case
                                                                                                    GHC.IO.Handle.Internals.$wstreamEncode
                                                                                                        ds15_sacSl
                                                                                                        ds16_sacSm
                                                                                                        bbuf0_sacRN
                                                                                                        sat_sacSt
                                                                                                        GHC.Prim.void#
                                                                                                of
                                                                                                { Unit# ipv9_sacSw [Occ=Once!] ->
                                                                                                      case
                                                                                                          ipv9_sacSw
                                                                                                      of
                                                                                                      { (,) bbuf1_sacSy [Occ=Once]
                                                                                                            _ [Occ=Dead] ->
                                                                                                            case
                                                                                                                writeMutVar# [dt_sacRl
                                                                                                                              bbuf1_sacSy
                                                                                                                              GHC.Prim.void#]
                                                                                                            of
                                                                                                            s2#1_sacSA
                                                                                                            { (##) ->
                                                                                                                  Unit# [GHC.Tuple.()];
                                                                                                            };
                                                                                                      };
                                                                                                };
                                                                                        };
                                                                                  };
                                                                            };
                                                                        0# ->
                                                                            case
                                                                                writeMutVar# [dt_sacRl
                                                                                              bbuf0_sacRN
                                                                                              GHC.Prim.void#]
                                                                            of
                                                                            s2#1_sacSB
                                                                            { (##) ->
                                                                                  Unit# [GHC.Tuple.()];
                                                                            };
                                                                      };
                                                                };
                                                          };
                                                  };
                                            };
                                      };
                                  1# -> Unit# [GHC.Tuple.()];
                                };
                            GHC.IO.Buffer.WriteBuffer -> Unit# [GHC.Tuple.()];
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.flushCharReadBuffer
  :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.Internals.flushCharBuffer3 eta_B2 GHC.Prim.void#;

lvl9_ra7Pp :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "error"#;

lvl10_ra7Pq :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl9_ra7Pp;

lvl11_ra7Pr :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Internals.$trModule4;

lvl12_ra7Ps :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.Internals.$trModule2;

lvl13_ra7Pt :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./GHC/IO/Handle/Internals.hs"#;

lvl14_ra7Pu :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl13_ra7Pt;

lvl15_ra7Pv :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [487#];

lvl16_ra7Pw :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [12#];

lvl17_ra7Px :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [68#];

lvl18_ra7Py :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl11_ra7Pr
                                           lvl12_ra7Ps
                                           lvl14_ra7Pu
                                           lvl15_ra7Pv
                                           lvl16_ra7Pw
                                           lvl15_ra7Pv
                                           lvl17_ra7Px];

lvl19_ra7Pz :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl10_ra7Pq
                                                  lvl18_ra7Py
                                                  GHC.Stack.Types.EmptyCallStack];

lvl20_ra7PA :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "internal IO library error: Char buffer non-empty"#;

GHC.IO.Handle.Internals.flushCharBuffer2 :: GHC.Types.IO ()
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl20_ra7PA of sat_sacSC {
          __DEFAULT -> GHC.Err.error lvl19_ra7Pz sat_sacSC;
        };

GHC.IO.Handle.Internals.flushCharBuffer1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h__sacSD void_0E]
        case h__sacSD of wild_sacSF {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       dt2_sacSO [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt2_sacSO GHC.Prim.void#] of {
                Unit# ipv1_sacSY [Occ=Once!] ->
                    case ipv1_sacSY of {
                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           ds10_sacT2 [Occ=Once!]
                                           _ [Occ=Dead]
                                           dt7_sacT4 [Occ=Once]
                                           dt8_sacT5 [Occ=Once] ->
                          case ds10_sacT2 of {
                            GHC.IO.Buffer.ReadBuffer ->
                                GHC.IO.Handle.Internals.flushCharBuffer3 wild_sacSF GHC.Prim.void#;
                            GHC.IO.Buffer.WriteBuffer ->
                                case ==# [dt7_sacT4 dt8_sacT5] of {
                                  __DEFAULT -> GHC.IO.Handle.Internals.flushCharBuffer2;
                                  1# -> Unit# [GHC.Tuple.()];
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.flushCharBuffer
  :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.Internals.flushCharBuffer1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.flushBuffer2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h__sacT9 void_0E]
        case h__sacT9 of {
          GHC.IO.Handle.Types.Handle__ $dIODevice_sacTc
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds_sacTf
                                       _ [Occ=Dead]
                                       dt_sacTh
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt_sacTh GHC.Prim.void#] of {
                Unit# ipv1_sacTu [Occ=Once!] ->
                    case ipv1_sacTu of {
                      GHC.IO.Buffer.Buffer dt4_sacTw [Occ=Once]
                                           dt5_sacTx [Occ=Once]
                                           ds10_sacTy [Occ=Once]
                                           dt6_sacTz [Occ=Once]
                                           dt7_sacTA
                                           dt8_sacTB ->
                          case ==# [dt7_sacTA dt8_sacTB] of {
                            __DEFAULT ->
                                case
                                    GHC.IO.Device.isSeekable
                                        $dIODevice_sacTc ds_sacTf GHC.Prim.void#
                                of
                                { Unit# ipv3_sacTF [Occ=Once!] ->
                                      case ipv3_sacTF of {
                                        GHC.Types.False ->
                                            raiseIO# [GHC.IO.Handle.Internals.flushBuffer3
                                                      GHC.Prim.void#];
                                        GHC.Types.True ->
                                            let {
                                              sat_sacTJ [Occ=Once] :: GHC.Integer.Type.Integer
                                              [LclId] =
                                                  [dt7_sacTA dt8_sacTB] \u []
                                                      case -# [dt8_sacTB dt7_sacTA] of sat_sacTH {
                                                        __DEFAULT ->
                                                            case
                                                                negateInt# [sat_sacTH]
                                                            of
                                                            sat_sacTI
                                                            { __DEFAULT ->
                                                                  GHC.Integer.Type.smallInteger
                                                                      sat_sacTI;
                                                            };
                                                      };
                                            } in 
                                              case
                                                  GHC.IO.Device.seek
                                                      $dIODevice_sacTc
                                                      ds_sacTf
                                                      GHC.IO.Device.RelativeSeek
                                                      sat_sacTJ
                                                      GHC.Prim.void#
                                              of
                                              { Unit# _ [Occ=Dead] ->
                                                    let {
                                                      sat_sacTN [Occ=Once]
                                                        :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                                      [LclId] =
                                                          CCCS GHC.IO.Buffer.Buffer! [dt4_sacTw
                                                                                      dt5_sacTx
                                                                                      ds10_sacTy
                                                                                      dt6_sacTz
                                                                                      0#
                                                                                      0#];
                                                    } in 
                                                      case
                                                          writeMutVar# [dt_sacTh
                                                                        sat_sacTN
                                                                        GHC.Prim.void#]
                                                      of
                                                      s2#_sacTO
                                                      { (##) -> Unit# [GHC.Tuple.()];
                                                      };
                                              };
                                      };
                                };
                            1# -> Unit# [GHC.Tuple.()];
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.flushByteReadBuffer
  :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.Internals.flushBuffer2 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.flushBuffer1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h__sacTP void_0E]
        case h__sacTP of wild_sacTR {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       $dBufferedIO_sacTT [Occ=Once]
                                       _ [Occ=Dead]
                                       ds_sacTV [Occ=Once]
                                       _ [Occ=Dead]
                                       dt_sacTX
                                       _ [Occ=Dead]
                                       dt1_sacTZ [Occ=Once]
                                       dt2_sacU0
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds4_sacU3 [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt2_sacU0 GHC.Prim.void#] of {
                Unit# ipv1_sacUa [Occ=Once!] ->
                    case ipv1_sacUa of {
                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           ds10_sacUe [Occ=Once!]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
                          case ds10_sacUe of {
                            GHC.IO.Buffer.ReadBuffer ->
                                case readMutVar# [dt2_sacU0 GHC.Prim.void#] of {
                                  Unit# ipv3_sacUl [Occ=Once!] ->
                                      case ipv3_sacUl of {
                                        GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             ds12_sacUp [Occ=Once!]
                                                             _ [Occ=Dead]
                                                             dt12_sacUr [Occ=Once]
                                                             dt13_sacUs [Occ=Once] ->
                                            case ds12_sacUp of {
                                              GHC.IO.Buffer.ReadBuffer ->
                                                  case ==# [dt12_sacUr dt13_sacUs] of {
                                                    __DEFAULT ->
                                                        case
                                                            readMutVar# [dt1_sacTZ GHC.Prim.void#]
                                                        of
                                                        { Unit# ipv5_sacUx [Occ=Once!] ->
                                                              case ipv5_sacUx of {
                                                                (,) codec_state_sacUz [Occ=Once]
                                                                    bbuf0_sacUA [Occ=Once*] ->
                                                                    case
                                                                        readMutVar# [dt2_sacU0
                                                                                     GHC.Prim.void#]
                                                                    of
                                                                    { Unit# ipv7_sacUD ->
                                                                          let {
                                                                            sat_sacUL [Occ=Once]
                                                                              :: GHC.IO.Buffer.Buffer
                                                                                   GHC.IO.Buffer.CharBufElem
                                                                            [LclId] =
                                                                                [ipv7_sacUD] \u []
                                                                                    case
                                                                                        ipv7_sacUD
                                                                                    of
                                                                                    { GHC.IO.Buffer.Buffer dt14_sacUF [Occ=Once]
                                                                                                           dt15_sacUG [Occ=Once]
                                                                                                           ds15_sacUH [Occ=Once]
                                                                                                           dt16_sacUI [Occ=Once]
                                                                                                           _ [Occ=Dead]
                                                                                                           _ [Occ=Dead] ->
                                                                                          GHC.IO.Buffer.Buffer [dt14_sacUF
                                                                                                                dt15_sacUG
                                                                                                                ds15_sacUH
                                                                                                                dt16_sacUI
                                                                                                                0#
                                                                                                                0#];
                                                                                    };
                                                                          } in 
                                                                            case
                                                                                writeMutVar# [dt2_sacU0
                                                                                              sat_sacUL
                                                                                              GHC.Prim.void#]
                                                                            of
                                                                            s2#_sacUM
                                                                            { (##) ->
                                                                                  case
                                                                                      ipv7_sacUD
                                                                                  of
                                                                                  { GHC.IO.Buffer.Buffer dt14_sacUO [Occ=Once]
                                                                                                         dt15_sacUP [Occ=Once]
                                                                                                         ds15_sacUQ [Occ=Once]
                                                                                                         _ [Occ=Dead]
                                                                                                         dt17_sacUS [Occ=Once!]
                                                                                                         _ [Occ=Dead] ->
                                                                                        case
                                                                                            dt17_sacUS
                                                                                        of
                                                                                        wild7_sacUU
                                                                                        { __DEFAULT ->
                                                                                              case
                                                                                                  ds4_sacU3
                                                                                              of
                                                                                              { GHC.Base.Nothing ->
                                                                                                    let {
                                                                                                      sat_sacV4 [Occ=Once]
                                                                                                        :: GHC.IO.Buffer.Buffer
                                                                                                             GHC.Word.Word8
                                                                                                      [LclId] =
                                                                                                          [bbuf0_sacUA
                                                                                                           wild7_sacUU] \u []
                                                                                                              case
                                                                                                                  bbuf0_sacUA
                                                                                                              of
                                                                                                              { GHC.IO.Buffer.Buffer dt19_sacUX [Occ=Once]
                                                                                                                                     dt20_sacUY [Occ=Once]
                                                                                                                                     ds16_sacUZ [Occ=Once]
                                                                                                                                     dt21_sacV0 [Occ=Once]
                                                                                                                                     dt22_sacV1 [Occ=Once]
                                                                                                                                     dt23_sacV2 [Occ=Once] ->
                                                                                                                    case
                                                                                                                        +# [dt22_sacV1
                                                                                                                            wild7_sacUU]
                                                                                                                    of
                                                                                                                    sat_sacV3
                                                                                                                    { __DEFAULT ->
                                                                                                                          GHC.IO.Buffer.Buffer [dt19_sacUX
                                                                                                                                                dt20_sacUY
                                                                                                                                                ds16_sacUZ
                                                                                                                                                dt21_sacV0
                                                                                                                                                sat_sacV3
                                                                                                                                                dt23_sacV2];
                                                                                                                    };
                                                                                                              };
                                                                                                    } in 
                                                                                                      case
                                                                                                          writeMutVar# [dt_sacTX
                                                                                                                        sat_sacV4
                                                                                                                        GHC.Prim.void#]
                                                                                                      of
                                                                                                      s2#1_sacV5
                                                                                                      { (##) ->
                                                                                                            GHC.IO.Handle.Internals.flushBuffer2
                                                                                                                wild_sacTR
                                                                                                                GHC.Prim.void#;
                                                                                                      };
                                                                                                GHC.Base.Just decoder_sacV6 [Occ=Once!] ->
                                                                                                    case
                                                                                                        decoder_sacV6
                                                                                                    of
                                                                                                    { GHC.IO.Encoding.Types.BufferCodec ds16_sacV8 [Occ=Once]
                                                                                                                                        ds17_sacV9 [Occ=Once]
                                                                                                                                        _ [Occ=Dead]
                                                                                                                                        _ [Occ=Dead]
                                                                                                                                        ds20_sacVc [Occ=Once!] ->
                                                                                                          case
                                                                                                              ds20_sacVc
                                                                                                                  codec_state_sacUz
                                                                                                                  GHC.Prim.void#
                                                                                                          of
                                                                                                          { Unit# _ [Occ=Dead] ->
                                                                                                                let {
                                                                                                                  sat_sacVg [Occ=Once]
                                                                                                                    :: GHC.IO.Buffer.Buffer
                                                                                                                         GHC.IO.Buffer.CharBufElem
                                                                                                                  [LclId] =
                                                                                                                      CCCS GHC.IO.Buffer.Buffer! [dt14_sacUO
                                                                                                                                                  dt15_sacUP
                                                                                                                                                  ds15_sacUQ
                                                                                                                                                  wild7_sacUU
                                                                                                                                                  0#
                                                                                                                                                  0#];
                                                                                                                } in 
                                                                                                                  case
                                                                                                                      GHC.IO.Handle.Internals.$wstreamEncode
                                                                                                                          ds16_sacV8
                                                                                                                          ds17_sacV9
                                                                                                                          bbuf0_sacUA
                                                                                                                          sat_sacVg
                                                                                                                          GHC.Prim.void#
                                                                                                                  of
                                                                                                                  { Unit# ipv11_sacVj [Occ=Once!] ->
                                                                                                                        case
                                                                                                                            ipv11_sacVj
                                                                                                                        of
                                                                                                                        { (,) bbuf1_sacVl [Occ=Once]
                                                                                                                              _ [Occ=Dead] ->
                                                                                                                              case
                                                                                                                                  writeMutVar# [dt_sacTX
                                                                                                                                                bbuf1_sacVl
                                                                                                                                                GHC.Prim.void#]
                                                                                                                              of
                                                                                                                              s2#1_sacVn
                                                                                                                              { (##) ->
                                                                                                                                    GHC.IO.Handle.Internals.flushBuffer2
                                                                                                                                        wild_sacTR
                                                                                                                                        GHC.Prim.void#;
                                                                                                                              };
                                                                                                                        };
                                                                                                                  };
                                                                                                          };
                                                                                                    };
                                                                                              };
                                                                                          0# ->
                                                                                              case
                                                                                                  writeMutVar# [dt_sacTX
                                                                                                                bbuf0_sacUA
                                                                                                                GHC.Prim.void#]
                                                                                              of
                                                                                              s2#1_sacVo
                                                                                              { (##) ->
                                                                                                    GHC.IO.Handle.Internals.flushBuffer2
                                                                                                        wild_sacTR
                                                                                                        GHC.Prim.void#;
                                                                                              };
                                                                                        };
                                                                                  };
                                                                            };
                                                                    };
                                                              };
                                                        };
                                                    1# ->
                                                        GHC.IO.Handle.Internals.flushBuffer2
                                                            wild_sacTR GHC.Prim.void#;
                                                  };
                                              GHC.IO.Buffer.WriteBuffer ->
                                                  GHC.IO.Handle.Internals.flushBuffer2
                                                      wild_sacTR GHC.Prim.void#;
                                            };
                                      };
                                };
                            GHC.IO.Buffer.WriteBuffer ->
                                case readMutVar# [dt_sacTX GHC.Prim.void#] of {
                                  Unit# ipv3_sacVr [Occ=Once!] ->
                                      case ipv3_sacVr of wild3_sacVs {
                                        GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             _ [Occ=Dead]
                                                             dt12_sacVx [Occ=Once]
                                                             dt13_sacVy [Occ=Once] ->
                                            case ==# [dt12_sacVx dt13_sacVy] of {
                                              __DEFAULT ->
                                                  case
                                                      GHC.IO.BufferedIO.flushWriteBuffer
                                                          $dBufferedIO_sacTT
                                                          ds_sacTV
                                                          wild3_sacVs
                                                          GHC.Prim.void#
                                                  of
                                                  { Unit# ipv5_sacVC [Occ=Once] ->
                                                        case
                                                            writeMutVar# [dt_sacTX
                                                                          ipv5_sacVC
                                                                          GHC.Prim.void#]
                                                        of
                                                        s2#_sacVD
                                                        { (##) -> Unit# [GHC.Tuple.()];
                                                        };
                                                  };
                                              1# -> Unit# [GHC.Tuple.()];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.flushBuffer
  :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.Internals.flushBuffer1 eta_B2 GHC.Prim.void#;

lvl21_ra7PB :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC/IO/Handle/Internals.hs:881:7-30|Just decoder"#;

lvl22_ra7PC
  :: forall dec_state. (GHC.IO.Encoding.Types.TextDecoder dec_state)
[GblId, Str=x] =
    [] \u [] Control.Exception.Base.patError lvl21_ra7PB;

GHC.IO.Handle.Internals.hLookAhead_2
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Buffer.CharBuffer #)
[GblId,
 Arity=3,
 Str=<S,1*U><L,U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [h__sacVE cbuf_sacVF void_0E]
        case h__sacVE of wild_sacVH {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       $dBufferedIO_sacVJ [Occ=Once]
                                       _ [Occ=Dead]
                                       ds_sacVL [Occ=Once]
                                       _ [Occ=Dead]
                                       dt_sacVN
                                       _ [Occ=Dead]
                                       dt1_sacVP [Occ=Once*]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds4_sacVT [Occ=Once!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt_sacVN GHC.Prim.void#] of {
                Unit# ipv1_sacW0 [Occ=Once!] ->
                    case ipv1_sacW0 of wild1_sacW1 {
                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           dt7_sacW6 [Occ=Once]
                                           dt8_sacW7 [Occ=Once] ->
                          let-no-escape {
                            $j_sacW8 [Occ=Once*!T[2], Dmd=<L,1*C1(C1(U(U,U)))>]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> GHC.IO.Buffer.Buffer GHC.Word.Word8
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                       GHC.IO.Buffer.CharBuffer #)
                            [LclId[JoinId(2)],
                             Arity=2,
                             Str=<S,U><L,U(U,U,U,U,U,U)>,
                             Unf=OtherCon []] =
                                sat-only [cbuf_sacVF
                                          wild_sacVH
                                          dt_sacVN
                                          dt1_sacVP
                                          ds4_sacVT] \r [void_0E ipv3_sacWa]
                                    case ds4_sacVT of {
                                      GHC.Base.Nothing ->
                                          let {
                                            sat_sacWc [Occ=Once]
                                              :: (dec_state_aa4pz,
                                                  GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                            [LclId] =
                                                CCCS (,)! [GHC.IO.Handle.Internals.decodeByteBuf2
                                                           ipv3_sacWa];
                                          } in 
                                            case
                                                writeMutVar# [dt1_sacVP sat_sacWc GHC.Prim.void#]
                                            of
                                            s2#_sacWd
                                            { (##) ->
                                                  case
                                                      GHC.IO.Encoding.Latin1.latin5
                                                          ipv3_sacWa cbuf_sacVF GHC.Prim.void#
                                                  of
                                                  { Unit# ipv5_sacWg [Occ=Once!] ->
                                                        case ipv5_sacWg of {
                                                          (,,) _ [Occ=Dead]
                                                               input'_sacWj
                                                               output'_sacWk [Occ=Once!] ->
                                                              case
                                                                  writeMutVar# [dt_sacVN
                                                                                input'_sacWj
                                                                                GHC.Prim.void#]
                                                              of
                                                              s2#1_sacWl
                                                              { (##) ->
                                                                    case
                                                                        output'_sacWk
                                                                    of
                                                                    wild4_sacWm
                                                                    { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           dt13_sacWs [Occ=Once] ->
                                                                          case
                                                                              cbuf_sacVF
                                                                          of
                                                                          wild5_sacWt
                                                                          { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                                 _ [Occ=Dead]
                                                                                                 _ [Occ=Dead]
                                                                                                 _ [Occ=Dead]
                                                                                                 _ [Occ=Dead]
                                                                                                 dt18_sacWz [Occ=Once] ->
                                                                                case
                                                                                    ==# [dt13_sacWs
                                                                                         dt18_sacWz]
                                                                                of
                                                                                { __DEFAULT ->
                                                                                      Unit# [wild4_sacWm];
                                                                                  1# ->
                                                                                      case
                                                                                          input'_sacWj
                                                                                      of
                                                                                      { GHC.IO.Buffer.Buffer ww1_sacWC [Occ=Once]
                                                                                                             ww2_sacWD [Occ=Once]
                                                                                                             ww3_sacWE [Occ=Once]
                                                                                                             ww4_sacWF [Occ=Once]
                                                                                                             ww5_sacWG [Occ=Once]
                                                                                                             ww6_sacWH [Occ=Once] ->
                                                                                            GHC.IO.Handle.Internals.$wreadTextDevice'
                                                                                                wild_sacVH
                                                                                                ww1_sacWC
                                                                                                ww2_sacWD
                                                                                                ww3_sacWE
                                                                                                ww4_sacWF
                                                                                                ww5_sacWG
                                                                                                ww6_sacWH
                                                                                                wild5_sacWt
                                                                                                GHC.Prim.void#;
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      GHC.Base.Just decoder_sacWI [Occ=Once!] ->
                                          case decoder_sacWI of {
                                            GHC.IO.Encoding.Types.BufferCodec ds11_sacWK [Occ=Once]
                                                                              ds12_sacWL [Occ=Once]
                                                                              _ [Occ=Dead]
                                                                              ds14_sacWN [Occ=Once]
                                                                              _ [Occ=Dead] ->
                                                case ds14_sacWN GHC.Prim.void# of {
                                                  Unit# ipv5_sacWR [Occ=Once] ->
                                                      let {
                                                        sat_sacWS [Occ=Once]
                                                          :: (dec_state_aa4pz,
                                                              GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                                        [LclId] =
                                                            CCCS (,)! [ipv5_sacWR ipv3_sacWa];
                                                      } in 
                                                        case
                                                            writeMutVar# [dt1_sacVP
                                                                          sat_sacWS
                                                                          GHC.Prim.void#]
                                                        of
                                                        s2#_sacWT
                                                        { (##) ->
                                                              case
                                                                  GHC.IO.Handle.Internals.$wstreamEncode
                                                                      ds11_sacWK
                                                                      ds12_sacWL
                                                                      ipv3_sacWa
                                                                      cbuf_sacVF
                                                                      GHC.Prim.void#
                                                              of
                                                              { Unit# ipv7_sacWW [Occ=Once!] ->
                                                                    case ipv7_sacWW of {
                                                                      (,) bbuf2_sacWY
                                                                          cbuf'_sacWZ [Occ=Once!] ->
                                                                          case
                                                                              writeMutVar# [dt_sacVN
                                                                                            bbuf2_sacWY
                                                                                            GHC.Prim.void#]
                                                                          of
                                                                          s2#1_sacX0
                                                                          { (##) ->
                                                                                case
                                                                                    cbuf'_sacWZ
                                                                                of
                                                                                wild5_sacX1
                                                                                { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                                       _ [Occ=Dead]
                                                                                                       _ [Occ=Dead]
                                                                                                       _ [Occ=Dead]
                                                                                                       _ [Occ=Dead]
                                                                                                       dt13_sacX7 [Occ=Once] ->
                                                                                      case
                                                                                          cbuf_sacVF
                                                                                      of
                                                                                      wild6_sacX8
                                                                                      { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                                             _ [Occ=Dead]
                                                                                                             _ [Occ=Dead]
                                                                                                             _ [Occ=Dead]
                                                                                                             _ [Occ=Dead]
                                                                                                             dt18_sacXe [Occ=Once] ->
                                                                                            case
                                                                                                ==# [dt13_sacX7
                                                                                                     dt18_sacXe]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  Unit# [wild5_sacX1];
                                                                                              1# ->
                                                                                                  case
                                                                                                      bbuf2_sacWY
                                                                                                  of
                                                                                                  { GHC.IO.Buffer.Buffer ww1_sacXh [Occ=Once]
                                                                                                                         ww2_sacXi [Occ=Once]
                                                                                                                         ww3_sacXj [Occ=Once]
                                                                                                                         ww4_sacXk [Occ=Once]
                                                                                                                         ww5_sacXl [Occ=Once]
                                                                                                                         ww6_sacXm [Occ=Once] ->
                                                                                                        GHC.IO.Handle.Internals.$wreadTextDevice'
                                                                                                            wild_sacVH
                                                                                                            ww1_sacXh
                                                                                                            ww2_sacXi
                                                                                                            ww3_sacXj
                                                                                                            ww4_sacXk
                                                                                                            ww5_sacXl
                                                                                                            ww6_sacXm
                                                                                                            wild6_sacX8
                                                                                                            GHC.Prim.void#;
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                };
                                          };
                                    };
                          } in 
                            case ==# [dt7_sacW6 dt8_sacW7] of {
                              __DEFAULT -> $j_sacW8 GHC.Prim.void# wild1_sacW1;
                              1# ->
                                  case
                                      GHC.IO.BufferedIO.fillReadBuffer
                                          $dBufferedIO_sacVJ ds_sacVL wild1_sacW1 GHC.Prim.void#
                                  of
                                  { Unit# ipv3_sacXq [Occ=Once!] ->
                                        case ipv3_sacXq of {
                                          (,) r_sacXs [Occ=Once!] bbuf1_sacXt [Occ=Once] ->
                                              case r_sacXs of {
                                                GHC.Types.I# x_sacXv [Occ=Once!] ->
                                                    case x_sacXv of {
                                                      __DEFAULT ->
                                                          $j_sacW8 GHC.Prim.void# bbuf1_sacXt;
                                                      0# ->
                                                          raiseIO# [GHC.IO.Handle.Internals.hLookAhead_3
                                                                    GHC.Prim.void#];
                                                    };
                                              };
                                        };
                                  };
                            };
                    };
              };
        };
GHC.IO.Handle.Internals.$wreadTextDevice' [InlPrag=NOUSERINLINE[0],
                                           Occ=LoopBreaker]
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> GHC.IO.Buffer.BufferState
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Buffer.CharBuffer #)
[GblId,
 Arity=9,
 Str=<S,1*U><S,U><L,U><L,U><L,U><S,U><S,U><L,U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sacXy
           ww_sacXz
           ww1_sacXA
           ww2_sacXB
           ww3_sacXC
           ww4_sacXD
           ww5_sacXE
           w1_sacXF
           void_0E]
        case w_sacXy of wild_sacXH {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       $dBufferedIO_sacXJ [Occ=Once]
                                       _ [Occ=Dead]
                                       ds_sacXL [Occ=Once]
                                       _ [Occ=Dead]
                                       dt_sacXN [Occ=Once*]
                                       _ [Occ=Dead]
                                       dt1_sacXP [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds4_sacXT [Occ=Once*!]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case -# [ww5_sacXE ww4_sacXD] of elems_sacXY [Dmd=<S,U>] {
                __DEFAULT ->
                    case int2Word# [elems_sacXY] of sat_sacY1 {
                      __DEFAULT ->
                          case plusAddr# [ww_sacXz ww4_sacXD] of sat_sacY0 {
                            __DEFAULT ->
                                case
                                    __pkg_ccall base-4.11.0.0 [ww_sacXz
                                                               sat_sacY0
                                                               sat_sacY1
                                                               GHC.Prim.void#]
                                of
                                { Unit# _ [Occ=Dead] ->
                                      case touch# [ww1_sacXA GHC.Prim.void#] of s'_sacY5 {
                                        (##) ->
                                            let {
                                              sat_sacY6 [Occ=Once]
                                                :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                              [LclId] =
                                                  CCCS GHC.IO.Buffer.Buffer! [ww_sacXz
                                                                              ww1_sacXA
                                                                              ww2_sacXB
                                                                              ww3_sacXC
                                                                              0#
                                                                              elems_sacXY];
                                            } in 
                                              case
                                                  GHC.IO.BufferedIO.fillReadBuffer
                                                      $dBufferedIO_sacXJ
                                                      ds_sacXL
                                                      sat_sacY6
                                                      GHC.Prim.void#
                                              of
                                              { Unit# ipv1_sacY9 [Occ=Once!] ->
                                                    case ipv1_sacY9 of {
                                                      (,) r_sacYb [Occ=Once!] bbuf2_sacYc ->
                                                          case r_sacYb of {
                                                            GHC.Types.I# x_sacYe [Occ=Once!] ->
                                                                case x_sacYe of {
                                                                  __DEFAULT ->
                                                                      case ds4_sacXT of {
                                                                        GHC.Base.Nothing ->
                                                                            lvl22_ra7PC;
                                                                        GHC.Base.Just decoder_sacYi [Occ=Once!] ->
                                                                            case decoder_sacYi of {
                                                                              GHC.IO.Encoding.Types.BufferCodec ds12_sacYk [Occ=Once]
                                                                                                                ds13_sacYl [Occ=Once]
                                                                                                                _ [Occ=Dead]
                                                                                                                ds15_sacYn [Occ=Once]
                                                                                                                _ [Occ=Dead] ->
                                                                                  case
                                                                                      ds15_sacYn
                                                                                          GHC.Prim.void#
                                                                                  of
                                                                                  { Unit# ipv3_sacYr [Occ=Once] ->
                                                                                        let {
                                                                                          sat_sacYs [Occ=Once]
                                                                                            :: (dec_state_aa4ra,
                                                                                                GHC.IO.Buffer.Buffer
                                                                                                  GHC.Word.Word8)
                                                                                          [LclId] =
                                                                                              CCCS (,)! [ipv3_sacYr
                                                                                                         bbuf2_sacYc];
                                                                                        } in 
                                                                                          case
                                                                                              writeMutVar# [dt1_sacXP
                                                                                                            sat_sacYs
                                                                                                            GHC.Prim.void#]
                                                                                          of
                                                                                          s2#_sacYt
                                                                                          { (##) ->
                                                                                                case
                                                                                                    GHC.IO.Handle.Internals.$wstreamEncode
                                                                                                        ds12_sacYk
                                                                                                        ds13_sacYl
                                                                                                        bbuf2_sacYc
                                                                                                        w1_sacXF
                                                                                                        GHC.Prim.void#
                                                                                                of
                                                                                                { Unit# ipv5_sacYw [Occ=Once!] ->
                                                                                                      case
                                                                                                          ipv5_sacYw
                                                                                                      of
                                                                                                      { (,) bbuf3_sacYy
                                                                                                            cbuf1_sacYz [Occ=Once!] ->
                                                                                                            case
                                                                                                                writeMutVar# [dt_sacXN
                                                                                                                              bbuf3_sacYy
                                                                                                                              GHC.Prim.void#]
                                                                                                            of
                                                                                                            s2#1_sacYA
                                                                                                            { (##) ->
                                                                                                                  case
                                                                                                                      w1_sacXF
                                                                                                                  of
                                                                                                                  { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                                                                         _ [Occ=Dead]
                                                                                                                                         _ [Occ=Dead]
                                                                                                                                         _ [Occ=Dead]
                                                                                                                                         _ [Occ=Dead]
                                                                                                                                         dt8_sacYH [Occ=Once] ->
                                                                                                                        case
                                                                                                                            cbuf1_sacYz
                                                                                                                        of
                                                                                                                        wild9_sacYI
                                                                                                                        { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                                                                               _ [Occ=Dead]
                                                                                                                                               _ [Occ=Dead]
                                                                                                                                               _ [Occ=Dead]
                                                                                                                                               _ [Occ=Dead]
                                                                                                                                               dt13_sacYO [Occ=Once] ->
                                                                                                                              case
                                                                                                                                  ==# [dt8_sacYH
                                                                                                                                       dt13_sacYO]
                                                                                                                              of
                                                                                                                              { __DEFAULT ->
                                                                                                                                    Unit# [wild9_sacYI];
                                                                                                                                1# ->
                                                                                                                                    case
                                                                                                                                        bbuf3_sacYy
                                                                                                                                    of
                                                                                                                                    { GHC.IO.Buffer.Buffer ww7_sacYR [Occ=Once]
                                                                                                                                                           ww8_sacYS [Occ=Once]
                                                                                                                                                           ww9_sacYT [Occ=Once]
                                                                                                                                                           ww10_sacYU [Occ=Once]
                                                                                                                                                           ww11_sacYV [Occ=Once]
                                                                                                                                                           ww12_sacYW [Occ=Once] ->
                                                                                                                                          GHC.IO.Handle.Internals.$wreadTextDevice'
                                                                                                                                              wild_sacXH
                                                                                                                                              ww7_sacYR
                                                                                                                                              ww8_sacYS
                                                                                                                                              ww9_sacYT
                                                                                                                                              ww10_sacYU
                                                                                                                                              ww11_sacYV
                                                                                                                                              ww12_sacYW
                                                                                                                                              wild9_sacYI
                                                                                                                                              GHC.Prim.void#;
                                                                                                                                    };
                                                                                                                              };
                                                                                                                        };
                                                                                                                  };
                                                                                                            };
                                                                                                      };
                                                                                                };
                                                                                          };
                                                                                  };
                                                                            };
                                                                      };
                                                                  0# ->
                                                                      case
                                                                          bbuf2_sacYc
                                                                      of
                                                                      wild5_sacYX
                                                                      { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             dt7_sacZ2 [Occ=Once]
                                                                                             dt8_sacZ3 [Occ=Once] ->
                                                                            case
                                                                                ==# [dt7_sacZ2
                                                                                     dt8_sacZ3]
                                                                            of
                                                                            { __DEFAULT ->
                                                                                  case
                                                                                      ds4_sacXT
                                                                                  of
                                                                                  { GHC.Base.Nothing ->
                                                                                        lvl22_ra7PC;
                                                                                    GHC.Base.Just decoder_sacZ7 [Occ=Once!] ->
                                                                                        case
                                                                                            decoder_sacZ7
                                                                                        of
                                                                                        { GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                                                            ds14_sacZa [Occ=Once!]
                                                                                                                            _ [Occ=Dead]
                                                                                                                            _ [Occ=Dead]
                                                                                                                            _ [Occ=Dead] ->
                                                                                              case
                                                                                                  ds14_sacZa
                                                                                                      wild5_sacYX
                                                                                                      w1_sacXF
                                                                                                      GHC.Prim.void#
                                                                                              of
                                                                                              { Unit# ipv3_sacZg [Occ=Once!] ->
                                                                                                    case
                                                                                                        ipv3_sacZg
                                                                                                    of
                                                                                                    { (,) bbuf3_sacZi [Occ=Once]
                                                                                                          cbuf1_sacZj [Occ=Once!] ->
                                                                                                          case
                                                                                                              writeMutVar# [dt_sacXN
                                                                                                                            bbuf3_sacZi
                                                                                                                            GHC.Prim.void#]
                                                                                                          of
                                                                                                          s2#_sacZk
                                                                                                          { (##) ->
                                                                                                                case
                                                                                                                    cbuf1_sacZj
                                                                                                                of
                                                                                                                wild9_sacZl
                                                                                                                { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                                                                       _ [Occ=Dead]
                                                                                                                                       _ [Occ=Dead]
                                                                                                                                       _ [Occ=Dead]
                                                                                                                                       _ [Occ=Dead]
                                                                                                                                       dt13_sacZr [Occ=Once] ->
                                                                                                                      case
                                                                                                                          w1_sacXF
                                                                                                                      of
                                                                                                                      { GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                                                                                             _ [Occ=Dead]
                                                                                                                                             _ [Occ=Dead]
                                                                                                                                             _ [Occ=Dead]
                                                                                                                                             _ [Occ=Dead]
                                                                                                                                             dt18_sacZy [Occ=Once] ->
                                                                                                                            case
                                                                                                                                ==# [dt13_sacZr
                                                                                                                                     dt18_sacZy]
                                                                                                                            of
                                                                                                                            { __DEFAULT ->
                                                                                                                                  Unit# [wild9_sacZl];
                                                                                                                              1# ->
                                                                                                                                  GHC.IO.Handle.Internals.hLookAhead_2
                                                                                                                                      wild_sacXH
                                                                                                                                      wild9_sacZl
                                                                                                                                      GHC.Prim.void#;
                                                                                                                            };
                                                                                                                      };
                                                                                                                };
                                                                                                          };
                                                                                                    };
                                                                                              };
                                                                                        };
                                                                                  };
                                                                              1# ->
                                                                                  raiseIO# [GHC.IO.Handle.Internals.hLookAhead_3
                                                                                            GHC.Prim.void#];
                                                                            };
                                                                      };
                                                                };
                                                          };
                                                    };
                                              };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.readTextDevice
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Types.IO GHC.IO.Buffer.CharBuffer
[GblId,
 Arity=3,
 Str=<S,1*U><L,U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.Internals.hLookAhead_2 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.hLookAhead_1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Char #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle__sacZA void_0E]
        case handle__sacZA of wild_sacZC {
          GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       dt2_sacZL
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
              case readMutVar# [dt2_sacZL GHC.Prim.void#] of {
                Unit# ipv1_sacZV [Occ=Once!] ->
                    case ipv1_sacZV of wild1_sacZW {
                      GHC.IO.Buffer.Buffer dt4_sacZX [Occ=Once*]
                                           dt5_sacZY [Occ=Once*]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           dt7_sad01
                                           dt8_sad02 [Occ=Once] ->
                          case ==# [dt7_sad01 dt8_sad02] of {
                            __DEFAULT ->
                                case
                                    writeMutVar# [dt2_sacZL wild1_sacZW GHC.Prim.void#]
                                of
                                s2#_sad04
                                { (##) ->
                                      case
                                          readWideCharOffAddr# [dt4_sacZX dt7_sad01 GHC.Prim.void#]
                                      of
                                      { Unit# ipv3_sad07 [Occ=Once] ->
                                            case touch# [dt5_sacZY GHC.Prim.void#] of s'_sad08 {
                                              (##) ->
                                                  let {
                                                    sat_sad09 [Occ=Once] :: GHC.Types.Char
                                                    [LclId] =
                                                        CCCS GHC.Types.C#! [ipv3_sad07];
                                                  } in  Unit# [sat_sad09];
                                            };
                                      };
                                };
                            1# ->
                                case
                                    GHC.IO.Handle.Internals.hLookAhead_2
                                        wild_sacZC wild1_sacZW GHC.Prim.void#
                                of
                                { Unit# ipv3_sad0c [Occ=Once] ->
                                      case
                                          writeMutVar# [dt2_sacZL ipv3_sad0c GHC.Prim.void#]
                                      of
                                      s2#_sad0d
                                      { (##) ->
                                            case
                                                readWideCharOffAddr# [dt4_sacZX
                                                                      dt7_sad01
                                                                      GHC.Prim.void#]
                                            of
                                            { Unit# ipv5_sad0g [Occ=Once] ->
                                                  case
                                                      touch# [dt5_sacZY GHC.Prim.void#]
                                                  of
                                                  s'_sad0h
                                                  { (##) ->
                                                        let {
                                                          sat_sad0i [Occ=Once] :: GHC.Types.Char
                                                          [LclId] =
                                                              CCCS GHC.Types.C#! [ipv5_sad0g];
                                                        } in  Unit# [sat_sad0i];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.hLookAhead_
  :: GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO GHC.Types.Char
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.Internals.hLookAhead_1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.hClose_help2
  :: GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Base.Maybe GHC.Exception.SomeException #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [e1_sad0j void_0E]
        let {
          sat_sad0l [Occ=Once] :: GHC.Base.Maybe GHC.Exception.SomeException
          [LclId] =
              CCCS GHC.Base.Just! [e1_sad0j];
        } in  Unit# [sat_sad0l];

GHC.IO.Handle.Internals.hClose_help1
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Handle.Types.Handle__,
            GHC.Base.Maybe GHC.Exception.SomeException) #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [handle__sad0m void_0E]
        case handle__sad0m of wild_sad0o {
          GHC.IO.Handle.Types.Handle__ $dIODevice_sad0p
                                       $dBufferedIO_sad0q
                                       $dTypeable_sad0r [Occ=Once*]
                                       ds1_sad0s
                                       ds2_sad0t [Occ=Once!]
                                       dt_sad0u
                                       ds3_sad0v [Occ=Once*]
                                       dt1_sad0w [Occ=Once*]
                                       dt2_sad0x
                                       dt3_sad0y
                                       ds4_sad0z [Occ=Once!]
                                       ds5_sad0A
                                       ds6_sad0B [Occ=Once*]
                                       ds7_sad0C [Occ=Once*]
                                       ds8_sad0D [Occ=Once*]
                                       ds9_sad0E ->
              case ds2_sad0t of {
                __DEFAULT ->
                    let {
                      sat_sad17 [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 GHC.Base.Maybe GHC.Exception.SomeException #)
                      [LclId] =
                          [$dBufferedIO_sad0q ds1_sad0s dt_sad0u] \r [void_0E]
                              case readMutVar# [dt_sad0u GHC.Prim.void#] of {
                                Unit# ipv1_sad0J [Occ=Once!] ->
                                    case ipv1_sad0J of {
                                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           ds_sad0N [Occ=Once!]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead] ->
                                          case ds_sad0N of {
                                            GHC.IO.Buffer.ReadBuffer -> Unit# [GHC.Base.Nothing];
                                            GHC.IO.Buffer.WriteBuffer ->
                                                case readMutVar# [dt_sad0u GHC.Prim.void#] of {
                                                  Unit# ipv3_sad0U [Occ=Once!] ->
                                                      case ipv3_sad0U of wild4_sad0V {
                                                        GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                             _ [Occ=Dead]
                                                                             _ [Occ=Dead]
                                                                             _ [Occ=Dead]
                                                                             dt12_sad10 [Occ=Once]
                                                                             dt13_sad11 [Occ=Once] ->
                                                            case ==# [dt12_sad10 dt13_sad11] of {
                                                              __DEFAULT ->
                                                                  case
                                                                      GHC.IO.BufferedIO.flushWriteBuffer
                                                                          $dBufferedIO_sad0q
                                                                          ds1_sad0s
                                                                          wild4_sad0V
                                                                          GHC.Prim.void#
                                                                  of
                                                                  { Unit# ipv5_sad15 [Occ=Once] ->
                                                                        case
                                                                            writeMutVar# [dt_sad0u
                                                                                          ipv5_sad15
                                                                                          GHC.Prim.void#]
                                                                        of
                                                                        s2#_sad16
                                                                        { (##) ->
                                                                              Unit# [GHC.Base.Nothing];
                                                                        };
                                                                  };
                                                              1# -> Unit# [GHC.Base.Nothing];
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                    } in 
                      case
                          catch# [sat_sad17
                                  GHC.IO.Handle.Internals.hClose_help2
                                  GHC.Prim.void#]
                      of
                      { Unit# ipv1_sad1a [Occ=Once*!] ->
                            let-no-escape {
                              $j_sad1b [Occ=Once*!T[2], Dmd=<C(C(S)),1*C1(C1(U(U,U)))>]
                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                   -> GHC.Base.Maybe GHC.Exception.SomeException
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         (GHC.IO.Handle.Types.Handle__,
                                          GHC.Base.Maybe GHC.Exception.SomeException) #)
                              [LclId[JoinId(2)], Arity=2, Str=<S,U><L,1*U>, Unf=OtherCon []] =
                                  sat-only [$dIODevice_sad0p
                                            $dBufferedIO_sad0q
                                            $dTypeable_sad0r
                                            ds1_sad0s
                                            dt_sad0u
                                            ds3_sad0v
                                            dt1_sad0w
                                            dt2_sad0x
                                            dt3_sad0y
                                            ds4_sad0z
                                            ds5_sad0A
                                            ds6_sad0B
                                            ds7_sad0C
                                            ds8_sad0D
                                            ds9_sad0E
                                            ipv1_sad1a] \r [void_0E ipv3_sad1d]
                                      case
                                          writeMutVar# [dt3_sad0y
                                                        GHC.IO.Handle.Types.BufferListNil
                                                        GHC.Prim.void#]
                                      of
                                      s2#_sad1e
                                      { (##) ->
                                            case
                                                writeMutVar# [dt2_sad0x
                                                              GHC.IO.Handle.Internals.noCharBuffer
                                                              GHC.Prim.void#]
                                            of
                                            s2#1_sad1f
                                            { (##) ->
                                                  case
                                                      writeMutVar# [dt_sad0u
                                                                    GHC.IO.Handle.Internals.noByteBuffer
                                                                    GHC.Prim.void#]
                                                  of
                                                  s2#2_sad1g
                                                  { (##) ->
                                                        let-no-escape {
                                                          $w$j_sad1h [InlPrag=NOUSERINLINE[0],
                                                                      Occ=Once*!T[1],
                                                                      Dmd=<L,1*C1(U(U,U))>]
                                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     (GHC.IO.Handle.Types.Handle__,
                                                                      GHC.Base.Maybe
                                                                        GHC.Exception.SomeException) #)
                                                          [LclId[JoinId(1)],
                                                           Arity=1,
                                                           Str=<S,U>,
                                                           Unf=OtherCon []] =
                                                              sat-only [$dIODevice_sad0p
                                                                        $dBufferedIO_sad0q
                                                                        $dTypeable_sad0r
                                                                        ds1_sad0s
                                                                        dt_sad0u
                                                                        ds3_sad0v
                                                                        dt1_sad0w
                                                                        dt2_sad0x
                                                                        dt3_sad0y
                                                                        ds4_sad0z
                                                                        ds5_sad0A
                                                                        ds6_sad0B
                                                                        ds7_sad0C
                                                                        ds8_sad0D
                                                                        ds9_sad0E
                                                                        ipv1_sad1a
                                                                        ipv3_sad1d] \r [void_0E]
                                                                  case ds4_sad0z of wild2_sad1j {
                                                                    GHC.Base.Nothing ->
                                                                        let {
                                                                          sat_sad1n [Occ=Once]
                                                                            :: GHC.Base.Maybe
                                                                                 GHC.Exception.SomeException
                                                                          [LclId] =
                                                                              [ipv1_sad1a
                                                                               ipv3_sad1d] \u []
                                                                                  case
                                                                                      ipv1_sad1a
                                                                                  of
                                                                                  wild3_sad1l
                                                                                  { GHC.Base.Nothing ->
                                                                                        ipv3_sad1d;
                                                                                    GHC.Base.Just _ [Occ=Dead] ->
                                                                                        wild3_sad1l;
                                                                                  }; } in
                                                                        let {
                                                                          sat_sad1k [Occ=Once]
                                                                            :: GHC.IO.Handle.Types.Handle__
                                                                          [LclId] =
                                                                              CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sad0p
                                                                                                                  $dBufferedIO_sad0q
                                                                                                                  $dTypeable_sad0r
                                                                                                                  ds1_sad0s
                                                                                                                  GHC.IO.Handle.Types.ClosedHandle
                                                                                                                  dt_sad0u
                                                                                                                  ds3_sad0v
                                                                                                                  dt1_sad0w
                                                                                                                  dt2_sad0x
                                                                                                                  dt3_sad0y
                                                                                                                  GHC.Base.Nothing
                                                                                                                  ds5_sad0A
                                                                                                                  ds6_sad0B
                                                                                                                  ds7_sad0C
                                                                                                                  ds8_sad0D
                                                                                                                  ds9_sad0E]; } in
                                                                        let {
                                                                          sat_sad1o [Occ=Once]
                                                                            :: (GHC.IO.Handle.Types.Handle__,
                                                                                GHC.Base.Maybe
                                                                                  GHC.Exception.SomeException)
                                                                          [LclId] =
                                                                              CCCS (,)! [sat_sad1k
                                                                                         sat_sad1n];
                                                                        } in  Unit# [sat_sad1o];
                                                                    GHC.Base.Just d_sad1p [Occ=Once!] ->
                                                                        case d_sad1p of {
                                                                          GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                                            _ [Occ=Dead]
                                                                                                            ds14_sad1t [Occ=Once]
                                                                                                            _ [Occ=Dead]
                                                                                                            _ [Occ=Dead] ->
                                                                              case
                                                                                  ds14_sad1t
                                                                                      GHC.Prim.void#
                                                                              of
                                                                              { Unit# _ [Occ=Dead] ->
                                                                                    let {
                                                                                      sat_sad1C [Occ=Once]
                                                                                        :: GHC.Base.Maybe
                                                                                             GHC.Exception.SomeException
                                                                                      [LclId] =
                                                                                          [ipv1_sad1a
                                                                                           ipv3_sad1d] \u []
                                                                                              case
                                                                                                  ipv1_sad1a
                                                                                              of
                                                                                              wild4_sad1A
                                                                                              { GHC.Base.Nothing ->
                                                                                                    ipv3_sad1d;
                                                                                                GHC.Base.Just _ [Occ=Dead] ->
                                                                                                    wild4_sad1A;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_sad1z [Occ=Once]
                                                                                        :: GHC.IO.Handle.Types.Handle__
                                                                                      [LclId] =
                                                                                          CCCS GHC.IO.Handle.Types.Handle__! [$dIODevice_sad0p
                                                                                                                              $dBufferedIO_sad0q
                                                                                                                              $dTypeable_sad0r
                                                                                                                              ds1_sad0s
                                                                                                                              GHC.IO.Handle.Types.ClosedHandle
                                                                                                                              dt_sad0u
                                                                                                                              ds3_sad0v
                                                                                                                              dt1_sad0w
                                                                                                                              dt2_sad0x
                                                                                                                              dt3_sad0y
                                                                                                                              wild2_sad1j
                                                                                                                              ds5_sad0A
                                                                                                                              ds6_sad0B
                                                                                                                              ds7_sad0C
                                                                                                                              ds8_sad0D
                                                                                                                              ds9_sad0E]; } in
                                                                                    let {
                                                                                      sat_sad1D [Occ=Once]
                                                                                        :: (GHC.IO.Handle.Types.Handle__,
                                                                                            GHC.Base.Maybe
                                                                                              GHC.Exception.SomeException)
                                                                                      [LclId] =
                                                                                          CCCS (,)! [sat_sad1z
                                                                                                     sat_sad1C];
                                                                                    } in 
                                                                                      Unit# [sat_sad1D];
                                                                              };
                                                                        };
                                                                  };
                                                        } in 
                                                          case ds5_sad0A of {
                                                            GHC.Base.Nothing ->
                                                                $w$j_sad1h GHC.Prim.void#;
                                                            GHC.Base.Just d_sad1F [Occ=Once!] ->
                                                                case d_sad1F of {
                                                                  GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                                    _ [Occ=Dead]
                                                                                                    ds14_sad1J [Occ=Once]
                                                                                                    _ [Occ=Dead]
                                                                                                    _ [Occ=Dead] ->
                                                                      case
                                                                          ds14_sad1J GHC.Prim.void#
                                                                      of
                                                                      { Unit# _ [Occ=Dead] ->
                                                                            $w$j_sad1h
                                                                                GHC.Prim.void#;
                                                                      };
                                                                };
                                                          };
                                                  };
                                            };
                                      };
                            } in 
                              case ds9_sad0E of {
                                GHC.Base.Nothing ->
                                    let {
                                      sat_sad1U [Occ=Once]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                 GHC.Base.Maybe GHC.Exception.SomeException #)
                                      [LclId] =
                                          [$dIODevice_sad0p ds1_sad0s] \r [void_0E]
                                              case
                                                  GHC.IO.Device.close
                                                      $dIODevice_sad0p ds1_sad0s GHC.Prim.void#
                                              of
                                              { Unit# _ [Occ=Dead] -> Unit# [GHC.Base.Nothing];
                                              };
                                    } in 
                                      case
                                          catch# [sat_sad1U
                                                  GHC.IO.Handle.Internals.hClose_help2
                                                  GHC.Prim.void#]
                                      of
                                      { Unit# ipv3_sad1X [Occ=Once] ->
                                            $j_sad1b GHC.Prim.void# ipv3_sad1X;
                                      };
                                GHC.Base.Just _ [Occ=Dead] ->
                                    $j_sad1b GHC.Prim.void# GHC.Base.Nothing;
                              };
                      };
                GHC.IO.Handle.Types.ClosedHandle ->
                    let {
                      sat_sad1Z [Occ=Once]
                        :: (GHC.IO.Handle.Types.Handle__,
                            GHC.Base.Maybe GHC.Exception.SomeException)
                      [LclId] =
                          CCCS (,)! [wild_sad0o GHC.Base.Nothing];
                    } in  Unit# [sat_sad1Z];
              };
        };

GHC.IO.Handle.Internals.hClose_help
  :: GHC.IO.Handle.Types.Handle__
     -> GHC.Types.IO
          (GHC.IO.Handle.Types.Handle__,
           GHC.Base.Maybe GHC.Exception.SomeException)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.Internals.hClose_help1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.handleFinalizer1
  :: GHC.IO.FilePath
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,A><S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [fp_sad20 m_sad21 void_0E]
        case m_sad21 of {
          GHC.MVar.MVar mvar#_sad24 ->
              case takeMVar# [mvar#_sad24 GHC.Prim.void#] of {
                Unit# ipv1_sad27 [Occ=Once] ->
                    case
                        GHC.IO.Handle.Internals.hClose_help1 ipv1_sad27 GHC.Prim.void#
                    of
                    { Unit# ipv3_sad2a [Occ=Once!] ->
                          case ipv3_sad2a of {
                            (,) handle_'_sad2c [Occ=Once] _ [Occ=Dead] ->
                                case
                                    putMVar# [mvar#_sad24 handle_'_sad2c GHC.Prim.void#]
                                of
                                s2#_sad2e
                                { (##) -> Unit# [GHC.Tuple.()];
                                };
                          };
                    };
              };
        };

GHC.IO.Handle.Internals.handleFinalizer
  :: GHC.IO.FilePath
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ()
[GblId, Arity=3, Str=<L,A><S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.Internals.handleFinalizer1
            eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.mkDuplexHandle4
  :: GHC.Base.Maybe
       (GHC.IO.FilePath
        -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ())
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.IO.Handle.Internals.handleFinalizer1];

GHC.IO.Handle.Internals.mkFileHandle1
  :: forall dev.
     (GHC.IO.Device.IODevice dev, GHC.IO.BufferedIO.BufferedIO dev,
      Data.Typeable.Internal.Typeable dev) =>
     dev
     -> GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.NewlineMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId,
 Arity=9,
 Str=<L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U)><L,U><L,U><L,U><L,1*U><S,U><L,U(U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [$dIODevice_sad2f
           $dBufferedIO_sad2g
           $dTypeable_sad2h
           dev1_sad2i
           filepath_sad2j
           iomode_sad2k
           mb_codec_sad2l
           tr_newlines_sad2m
           void_0E]
        let {
          sat_sad2p [Occ=Once] :: GHC.IO.Handle.Types.HandleType
          [LclId] =
              [iomode_sad2k] \u []
                  case iomode_sad2k of {
                    GHC.IO.IOMode.ReadMode -> GHC.IO.Handle.Types.ReadHandle [];
                    GHC.IO.IOMode.WriteMode -> GHC.IO.Handle.Types.WriteHandle [];
                    GHC.IO.IOMode.AppendMode -> GHC.IO.Handle.Types.AppendHandle [];
                    GHC.IO.IOMode.ReadWriteMode ->
                        GHC.IO.Handle.Types.ReadWriteHandle [];
                  };
        } in 
          GHC.IO.Handle.Internals.mkDuplexHandle5
              $dIODevice_sad2f
              $dBufferedIO_sad2g
              $dTypeable_sad2h
              dev1_sad2i
              filepath_sad2j
              sat_sad2p
              GHC.Types.True
              mb_codec_sad2l
              tr_newlines_sad2m
              GHC.IO.Handle.Internals.mkDuplexHandle4
              GHC.Base.Nothing
              GHC.Prim.void#;

GHC.IO.Handle.Internals.mkFileHandle
  :: forall dev.
     (GHC.IO.Device.IODevice dev, GHC.IO.BufferedIO.BufferedIO dev,
      Data.Typeable.Internal.Typeable dev) =>
     dev
     -> GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.NewlineMode
     -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId,
 Arity=9,
 Str=<L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U)><L,U><L,U><L,U><L,1*U><S,U><L,U(U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B9
           eta_B8
           eta_B7
           eta_B6
           eta_B5
           eta_B4
           eta_B3
           eta_B2
           void_0E]
        GHC.IO.Handle.Internals.mkFileHandle1
            eta_B9
            eta_B8
            eta_B7
            eta_B6
            eta_B5
            eta_B4
            eta_B3
            eta_B2
            GHC.Prim.void#;

lvl23_ra7PD :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Pattern match failure in do expression at GHC/IO/Handle/Internals.hs:686:3-33"#;

GHC.IO.Handle.Internals.mkDuplexHandle3
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [void_0E]
        case GHC.CString.unpackCString# lvl23_ra7PD of sat_sad2r {
          __DEFAULT -> GHC.IO.failIO1 sat_sad2r GHC.Prim.void#;
        };

lvl24_ra7PE :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Pattern match failure in do expression at GHC/IO/Handle/Internals.hs:680:3-35"#;

GHC.IO.Handle.Internals.mkDuplexHandle2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [void_0E]
        case GHC.CString.unpackCString# lvl24_ra7PE of sat_sad2t {
          __DEFAULT -> GHC.IO.failIO1 sat_sad2t GHC.Prim.void#;
        };

GHC.IO.Handle.Internals.mkDuplexHandle1
  :: forall dev.
     (GHC.IO.Device.IODevice dev, GHC.IO.BufferedIO.BufferedIO dev,
      Data.Typeable.Internal.Typeable dev) =>
     dev
     -> GHC.IO.FilePath
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.NewlineMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId,
 Arity=8,
 Str=<L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U)><L,U><L,U><L,U><S,U><L,U(U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [$dIODevice_sad2u
           $dBufferedIO_sad2v
           $dTypeable_sad2w
           dev1_sad2x
           filepath_sad2y
           mb_codec_sad2z
           tr_newlines_sad2A
           void_0E]
        case
            GHC.IO.Handle.Internals.mkDuplexHandle5
                $dIODevice_sad2u
                $dBufferedIO_sad2v
                $dTypeable_sad2w
                dev1_sad2x
                filepath_sad2y
                GHC.IO.Handle.Types.WriteHandle
                GHC.Types.True
                mb_codec_sad2z
                tr_newlines_sad2A
                GHC.IO.Handle.Internals.mkDuplexHandle4
                GHC.Base.Nothing
                GHC.Prim.void#
        of
        { Unit# ipv1_sad2E [Occ=Once!] ->
              case ipv1_sad2E of {
                GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sad2H ->
                    let {
                      sat_sad2I [Occ=Once] :: GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
                      [LclId] =
                          CCCS GHC.MVar.MVar! [dt_sad2H]; } in
                    let {
                      sat_sad2J [Occ=Once]
                        :: GHC.Base.Maybe (GHC.MVar.MVar GHC.IO.Handle.Types.Handle__)
                      [LclId] =
                          CCCS GHC.Base.Just! [sat_sad2I];
                    } in 
                      case
                          GHC.IO.Handle.Internals.mkDuplexHandle5
                              $dIODevice_sad2u
                              $dBufferedIO_sad2v
                              $dTypeable_sad2w
                              dev1_sad2x
                              filepath_sad2y
                              GHC.IO.Handle.Types.ReadHandle
                              GHC.Types.True
                              mb_codec_sad2z
                              tr_newlines_sad2A
                              GHC.Base.Nothing
                              sat_sad2J
                              GHC.Prim.void#
                      of
                      { Unit# ipv3_sad2M [Occ=Once!] ->
                            case ipv3_sad2M of {
                              GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt1_sad2P [Occ=Once] ->
                                  let {
                                    sat_sad2Q [Occ=Once] :: GHC.IO.Handle.Types.Handle
                                    [LclId] =
                                        CCCS GHC.IO.Handle.Types.DuplexHandle! [filepath_sad2y
                                                                                dt1_sad2P
                                                                                dt_sad2H];
                                  } in  Unit# [sat_sad2Q];
                              GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                               _ [Occ=Dead]
                                                               _ [Occ=Dead] ->
                                  GHC.IO.Handle.Internals.mkDuplexHandle3 GHC.Prim.void#;
                            };
                      };
                GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead] ->
                    GHC.IO.Handle.Internals.mkDuplexHandle2 GHC.Prim.void#;
              };
        };

GHC.IO.Handle.Internals.mkDuplexHandle
  :: forall dev.
     (GHC.IO.Device.IODevice dev, GHC.IO.BufferedIO.BufferedIO dev,
      Data.Typeable.Internal.Typeable dev) =>
     dev
     -> GHC.IO.FilePath
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.IO.Handle.Types.NewlineMode
     -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId,
 Arity=8,
 Str=<L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U)><L,U><L,U><L,U><S,U><L,U(U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B8 eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.Internals.mkDuplexHandle1
            eta_B8 eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

$wlvl_ra7PF
  :: forall a.
     GHC.IO.Exception.IOErrorType
     -> GHC.Base.String
     -> GHC.Base.Maybe Foreign.C.Types.CInt
     -> GHC.Base.Maybe GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=7,
 Str=<B,U><B,U><B,U><B,1*U><B,U><B,U><B,U>x,
 Unf=OtherCon []] =
    sat-only [] \r [ww_sad2X
                    ww1_sad2Y
                    ww2_sad2Z
                    ww3_sad30
                    w_sad31
                    w1_sad32
                    void_0E]
        let {
          sat_sad3f [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [ww_sad2X ww1_sad2Y ww2_sad2Z ww3_sad30 w_sad31 w1_sad32] \u []
                  let {
                    sat_sad3d [Occ=Once] :: GHC.Base.Maybe GHC.IO.FilePath
                    [LclId] =
                        [ww3_sad30 w1_sad32] \u []
                            case ww3_sad30 of wild_sad35 {
                              GHC.Base.Nothing ->
                                  case w1_sad32 of {
                                    GHC.IO.Handle.Types.FileHandle path_sad37 [Occ=Once]
                                                                   _ [Occ=Dead] ->
                                        GHC.Base.Just [path_sad37];
                                    GHC.IO.Handle.Types.DuplexHandle path_sad39 [Occ=Once]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead] ->
                                        GHC.Base.Just [path_sad39];
                                  };
                              GHC.Base.Just _ [Occ=Dead] -> wild_sad35;
                            }; } in
                  let {
                    sat_sad34 [Occ=Once] :: GHC.Base.Maybe GHC.IO.Handle.Types.Handle
                    [LclId] =
                        CCCS GHC.Base.Just! [w1_sad32]; } in
                  let {
                    sat_sad3e [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        CCCS GHC.IO.Exception.IOError! [sat_sad34
                                                        ww_sad2X
                                                        w_sad31
                                                        ww1_sad2Y
                                                        ww2_sad2Z
                                                        sat_sad3d];
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sad3e;
        } in  raiseIO# [sat_sad3f GHC.Prim.void#];

GHC.IO.Handle.Internals.$wdo_operation [InlPrag=NOUSERINLINE[0],
                                        Occ=LoopBreaker]
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Prim.MVar# GHC.Prim.RealWorld GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=5,
 Str=<L,U><L,U><C(S),C(U)><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sad3g w1_sad3h w2_sad3i ww_sad3j void_0E]
        case takeMVar# [ww_sad3j GHC.Prim.void#] of {
          Unit# ipv1_sad3n ->
              case w2_sad3i ipv1_sad3n of nt_sad3o {
                __DEFAULT ->
                    let {
                      sat_sad3K [Occ=Once]
                        :: GHC.Exception.SomeException
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_sa75G #)
                      [LclId] =
                          [w_sad3g w1_sad3h w2_sad3i ww_sad3j ipv1_sad3n] \r [e1_sad3p
                                                                              void_0E]
                              case putMVar# [ww_sad3j ipv1_sad3n GHC.Prim.void#] of s2#_sad3r {
                                (##) ->
                                    case e1_sad3p of wild_sad3s {
                                      GHC.Exception.SomeException $dException1_sad3t
                                                                  e3_sad3u [Occ=Once] ->
                                          case
                                              GHC.Exception.$p1Exception $dException1_sad3t
                                          of
                                          sat_sad3v
                                          { __DEFAULT ->
                                                case
                                                    Data.Typeable.Internal.sameTypeRep
                                                        sat_sad3v
                                                        GHC.IO.Exception.$fExceptionIOException4
                                                of
                                                { GHC.Types.False ->
                                                      case
                                                          GHC.Exception.$p1Exception
                                                              $dException1_sad3t
                                                      of
                                                      sat_sad3x
                                                      { __DEFAULT ->
                                                            case
                                                                Data.Typeable.Internal.sameTypeRep
                                                                    sat_sad3x
                                                                    GHC.IO.Exception.$fExceptionAllocationLimitExceeded6
                                                            of
                                                            { GHC.Types.False ->
                                                                  raiseIO# [wild_sad3s
                                                                            GHC.Prim.void#];
                                                              GHC.Types.True ->
                                                                  case
                                                                      myThreadId# [GHC.Prim.void#]
                                                                  of
                                                                  { Unit# ipv3_sad3B [Occ=Once] ->
                                                                        case
                                                                            killThread# [ipv3_sad3B
                                                                                         wild_sad3s
                                                                                         GHC.Prim.void#]
                                                                        of
                                                                        s1_sad3C
                                                                        { (##) ->
                                                                              GHC.IO.Handle.Internals.$wdo_operation
                                                                                  w_sad3g
                                                                                  w1_sad3h
                                                                                  w2_sad3i
                                                                                  ww_sad3j
                                                                                  GHC.Prim.void#;
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                  GHC.Types.True ->
                                                      case e3_sad3u of {
                                                        GHC.IO.Exception.IOError _ [Occ=Dead]
                                                                                 ww3_sad3F [Occ=Once]
                                                                                 _ [Occ=Dead]
                                                                                 ww5_sad3H [Occ=Once]
                                                                                 ww6_sad3I [Occ=Once]
                                                                                 ww7_sad3J [Occ=Once] ->
                                                            $wlvl_ra7PF
                                                                ww3_sad3F
                                                                ww5_sad3H
                                                                ww6_sad3I
                                                                ww7_sad3J
                                                                w_sad3g
                                                                w1_sad3h
                                                                GHC.Prim.void#;
                                                      };
                                                };
                                          };
                                    };
                              };
                    } in  catch# [nt_sad3o sat_sad3K GHC.Prim.void#];
              };
        };

GHC.IO.Handle.Internals.withHandle_1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=5,
 Str=<L,U><L,U><C(S),C(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sad3L w1_sad3M w2_sad3N w3_sad3O void_0E]
        case w3_sad3O of {
          GHC.MVar.MVar ww1_sad3R [Occ=Once] ->
              GHC.IO.Handle.Internals.$wdo_operation
                  w_sad3L w1_sad3M w2_sad3N ww1_sad3R GHC.Prim.void#;
        };

GHC.IO.Handle.Internals.$wwithHandle__' [InlPrag=NOUSERINLINE[0]]
  :: GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.Prim.MVar# GHC.Prim.RealWorld GHC.IO.Handle.Types.Handle__
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO GHC.IO.Handle.Types.Handle__)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=5,
 Str=<L,U><L,U><S,U><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sad3S w1_sad3T ww_sad3U w2_sad3V void_0E]
        case getMaskingState# [GHC.Prim.void#] of {
          Unit# ipv1_sad3Z [Occ=Once!] ->
              case ipv1_sad3Z of {
                __DEFAULT ->
                    case
                        GHC.IO.Handle.Internals.$wdo_operation
                            w_sad3S w1_sad3T w2_sad3V ww_sad3U GHC.Prim.void#
                    of
                    { Unit# ipv3_sad43 [Occ=Once] ->
                          case putMVar# [ww_sad3U ipv3_sad43 GHC.Prim.void#] of s2#_sad44 {
                            (##) -> Unit# [GHC.Tuple.()];
                          };
                    };
                0# ->
                    let {
                      sat_sad4a [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      [LclId] =
                          [w_sad3S w1_sad3T ww_sad3U w2_sad3V] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      w_sad3S w1_sad3T w2_sad3V ww_sad3U GHC.Prim.void#
                              of
                              { Unit# ipv3_sad48 [Occ=Once] ->
                                    case
                                        putMVar# [ww_sad3U ipv3_sad48 GHC.Prim.void#]
                                    of
                                    s2#_sad49
                                    { (##) -> Unit# [GHC.Tuple.()];
                                    };
                              };
                    } in  maskAsyncExceptions# [sat_sad4a GHC.Prim.void#];
              };
        };

GHC.IO.Handle.Internals.withHandle__'1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO GHC.IO.Handle.Types.Handle__)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=5,
 Str=<L,U><L,U><S(S),1*U(U)><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sad4b w1_sad4c w2_sad4d w3_sad4e void_0E]
        case w2_sad4d of {
          GHC.MVar.MVar ww1_sad4h [Occ=Once] ->
              GHC.IO.Handle.Internals.$wwithHandle__'
                  w_sad4b w1_sad4c ww1_sad4h w3_sad4e GHC.Prim.void#;
        };

GHC.IO.Handle.Internals.withHandle__'
  :: GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO GHC.IO.Handle.Types.Handle__)
     -> GHC.Types.IO ()
[GblId,
 Arity=5,
 Str=<L,U><L,U><S(S),1*U(U)><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.Internals.withHandle__'1
            eta_B5 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.withAllHandles__1
  :: GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO GHC.IO.Handle.Types.Handle__)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [fun_sad4i h_sad4j act_sad4k void_0E]
        case h_sad4j of wild_sad4m {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sad4o ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sad4r [Occ=Once!] ->
                    case ipv1_sad4r of {
                      __DEFAULT ->
                          case
                              GHC.IO.Handle.Internals.$wdo_operation
                                  fun_sad4i wild_sad4m act_sad4k dt_sad4o GHC.Prim.void#
                          of
                          { Unit# ipv3_sad4v [Occ=Once] ->
                                case putMVar# [dt_sad4o ipv3_sad4v GHC.Prim.void#] of s2#_sad4w {
                                  (##) -> Unit# [GHC.Tuple.()];
                                };
                          };
                      0# ->
                          let {
                            sat_sad4C [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                            [LclId] =
                                [fun_sad4i act_sad4k wild_sad4m dt_sad4o] \r [void_0E]
                                    case
                                        GHC.IO.Handle.Internals.$wdo_operation
                                            fun_sad4i wild_sad4m act_sad4k dt_sad4o GHC.Prim.void#
                                    of
                                    { Unit# ipv3_sad4A [Occ=Once] ->
                                          case
                                              putMVar# [dt_sad4o ipv3_sad4A GHC.Prim.void#]
                                          of
                                          s2#_sad4B
                                          { (##) -> Unit# [GHC.Tuple.()];
                                          };
                                    };
                          } in  maskAsyncExceptions# [sat_sad4C GHC.Prim.void#];
                    };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead] dt_sad4E dt1_sad4F ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sad4I [Occ=Once!] ->
                    let-no-escape {
                      $w$j_sad4J [InlPrag=NOUSERINLINE[0],
                                  Occ=Once*!T[1],
                                  Dmd=<L,1*C1(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          sat-only [fun_sad4i act_sad4k wild_sad4m dt1_sad4F] \r [void_0E]
                              case getMaskingState# [GHC.Prim.void#] of {
                                Unit# ipv3_sad4N [Occ=Once!] ->
                                    case ipv3_sad4N of {
                                      __DEFAULT ->
                                          case
                                              GHC.IO.Handle.Internals.$wdo_operation
                                                  fun_sad4i
                                                  wild_sad4m
                                                  act_sad4k
                                                  dt1_sad4F
                                                  GHC.Prim.void#
                                          of
                                          { Unit# ipv5_sad4R [Occ=Once] ->
                                                case
                                                    putMVar# [dt1_sad4F ipv5_sad4R GHC.Prim.void#]
                                                of
                                                s2#_sad4S
                                                { (##) -> Unit# [GHC.Tuple.()];
                                                };
                                          };
                                      0# ->
                                          let {
                                            sat_sad4Y [Occ=Once]
                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                            [LclId] =
                                                [fun_sad4i
                                                 act_sad4k
                                                 wild_sad4m
                                                 dt1_sad4F] \r [void_0E]
                                                    case
                                                        GHC.IO.Handle.Internals.$wdo_operation
                                                            fun_sad4i
                                                            wild_sad4m
                                                            act_sad4k
                                                            dt1_sad4F
                                                            GHC.Prim.void#
                                                    of
                                                    { Unit# ipv5_sad4W [Occ=Once] ->
                                                          case
                                                              putMVar# [dt1_sad4F
                                                                        ipv5_sad4W
                                                                        GHC.Prim.void#]
                                                          of
                                                          s2#_sad4X
                                                          { (##) -> Unit# [GHC.Tuple.()];
                                                          };
                                                    };
                                          } in  maskAsyncExceptions# [sat_sad4Y GHC.Prim.void#];
                                    };
                              };
                    } in 
                      case ipv1_sad4I of {
                        __DEFAULT ->
                            case
                                GHC.IO.Handle.Internals.$wdo_operation
                                    fun_sad4i wild_sad4m act_sad4k dt_sad4E GHC.Prim.void#
                            of
                            { Unit# ipv3_sad52 [Occ=Once] ->
                                  case putMVar# [dt_sad4E ipv3_sad52 GHC.Prim.void#] of s2#_sad53 {
                                    (##) -> $w$j_sad4J GHC.Prim.void#;
                                  };
                            };
                        0# ->
                            let {
                              sat_sad59 [Occ=Once]
                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                              [LclId] =
                                  [fun_sad4i act_sad4k wild_sad4m dt_sad4E] \r [void_0E]
                                      case
                                          GHC.IO.Handle.Internals.$wdo_operation
                                              fun_sad4i wild_sad4m act_sad4k dt_sad4E GHC.Prim.void#
                                      of
                                      { Unit# ipv3_sad57 [Occ=Once] ->
                                            case
                                                putMVar# [dt_sad4E ipv3_sad57 GHC.Prim.void#]
                                            of
                                            s2#_sad58
                                            { (##) -> Unit# [GHC.Tuple.()];
                                            };
                                      };
                            } in 
                              case maskAsyncExceptions# [sat_sad59 GHC.Prim.void#] of {
                                Unit# _ [Occ=Dead] -> $w$j_sad4J GHC.Prim.void#;
                              };
                      };
              };
        };

GHC.IO.Handle.Internals.withAllHandles__
  :: GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO GHC.IO.Handle.Types.Handle__)
     -> GHC.Types.IO ()
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.Internals.withAllHandles__1
            eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.$wwithHandle' [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.Prim.MVar# GHC.Prim.RealWorld GHC.IO.Handle.Types.Handle__
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=5,
 Str=<L,U><L,U><S,U><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sad5d w1_sad5e ww_sad5f w2_sad5g void_0E]
        case getMaskingState# [GHC.Prim.void#] of {
          Unit# ipv1_sad5k [Occ=Once!] ->
              let {
                io_sad5l [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                  :: GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_sa76a #)
                [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                    [w_sad5d w1_sad5e ww_sad5f w2_sad5g] \r [void_0E]
                        case
                            GHC.IO.Handle.Internals.$wdo_operation
                                w_sad5d w1_sad5e w2_sad5g ww_sad5f GHC.Prim.void#
                        of
                        { Unit# ipv3_sad5p [Occ=Once!] ->
                              case ipv3_sad5p of {
                                (,) h'_sad5r [Occ=Once] v_sad5s [Occ=Once] ->
                                    case putMVar# [ww_sad5f h'_sad5r GHC.Prim.void#] of s2#_sad5t {
                                      (##) -> Unit# [v_sad5s];
                                    };
                              };
                        };
              } in 
                case ipv1_sad5k of {
                  __DEFAULT -> io_sad5l GHC.Prim.void#;
                  0# -> maskAsyncExceptions# [io_sad5l GHC.Prim.void#];
                };
        };

GHC.IO.Handle.Internals.withHandle1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=5,
 Str=<L,U><L,U><S(S),1*U(U)><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sad5v w1_sad5w w2_sad5x w3_sad5y void_0E]
        case w2_sad5x of {
          GHC.MVar.MVar ww1_sad5B [Occ=Once] ->
              GHC.IO.Handle.Internals.$wwithHandle'
                  w_sad5v w1_sad5w ww1_sad5B w3_sad5y GHC.Prim.void#;
        };

GHC.IO.Handle.Internals.withHandle'
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a))
     -> GHC.Types.IO a
[GblId,
 Arity=5,
 Str=<L,U><L,U><S(S),1*U(U)><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.Internals.withHandle1
            eta_B5 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.withHandle_'1
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=5,
 Str=<L,U><L,U><S(S),1*U(U)><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [fun_sad5C h_sad5D m_sad5E act_sad5F void_0E]
        case m_sad5E of {
          GHC.MVar.MVar ww1_sad5I [Occ=Once] ->
              let {
                sat_sad5P [Occ=Once]
                  :: GHC.IO.Handle.Types.Handle__
                     -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a_aa4gi)
                [LclId] =
                    [act_sad5F] \r [h__sad5J void_0E]
                        case act_sad5F h__sad5J GHC.Prim.void# of {
                          Unit# ipv1_sad5N [Occ=Once] ->
                              let {
                                sat_sad5O [Occ=Once] :: (GHC.IO.Handle.Types.Handle__, a_aa4gi)
                                [LclId] =
                                    CCCS (,)! [h__sad5J ipv1_sad5N];
                              } in  Unit# [sat_sad5O];
                        };
              } in 
                GHC.IO.Handle.Internals.$wwithHandle'
                    fun_sad5C h_sad5D ww1_sad5I sat_sad5P GHC.Prim.void#;
        };

GHC.IO.Handle.Internals.withHandle_'
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Types.IO a
[GblId,
 Arity=5,
 Str=<L,U><L,U><S(S),1*U(U)><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.Internals.withHandle_'1
            eta_B5 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

withHandle_2_ra7PG
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [fun_sad5Q h_sad5R act_sad5S void_0E]
        case h_sad5R of wild_sad5U {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sad5W ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sad5Z [Occ=Once!] ->
                    let {
                      io_sad60 [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa4gx #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [fun_sad5Q act_sad5S wild_sad5U dt_sad5W] \r [void_0E]
                              let {
                                sat_sad68 [Occ=Once]
                                  :: GHC.IO.Handle.Types.Handle__
                                     -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a_aa4gx)
                                [LclId] =
                                    [act_sad5S] \r [h__sad62 void_0E]
                                        case act_sad5S h__sad62 GHC.Prim.void# of {
                                          Unit# ipv3_sad66 [Occ=Once] ->
                                              let {
                                                sat_sad67 [Occ=Once]
                                                  :: (GHC.IO.Handle.Types.Handle__, a_aa4gx)
                                                [LclId] =
                                                    CCCS (,)! [h__sad62 ipv3_sad66];
                                              } in  Unit# [sat_sad67];
                                        };
                              } in 
                                case
                                    GHC.IO.Handle.Internals.$wdo_operation
                                        fun_sad5Q wild_sad5U sat_sad68 dt_sad5W GHC.Prim.void#
                                of
                                { Unit# ipv3_sad6b [Occ=Once!] ->
                                      case ipv3_sad6b of {
                                        (,) h'_sad6d [Occ=Once] v_sad6e [Occ=Once] ->
                                            case
                                                putMVar# [dt_sad5W h'_sad6d GHC.Prim.void#]
                                            of
                                            s2#_sad6f
                                            { (##) -> Unit# [v_sad6e];
                                            };
                                      };
                                };
                    } in 
                      case ipv1_sad5Z of {
                        __DEFAULT -> io_sad60 GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sad60 GHC.Prim.void#];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sad6i
                                           _ [Occ=Dead] ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sad6m [Occ=Once!] ->
                    let {
                      io_sad6n [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa4gx #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [fun_sad5Q act_sad5S wild_sad5U dt_sad6i] \r [void_0E]
                              let {
                                sat_sad6v [Occ=Once]
                                  :: GHC.IO.Handle.Types.Handle__
                                     -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a_aa4gx)
                                [LclId] =
                                    [act_sad5S] \r [h__sad6p void_0E]
                                        case act_sad5S h__sad6p GHC.Prim.void# of {
                                          Unit# ipv3_sad6t [Occ=Once] ->
                                              let {
                                                sat_sad6u [Occ=Once]
                                                  :: (GHC.IO.Handle.Types.Handle__, a_aa4gx)
                                                [LclId] =
                                                    CCCS (,)! [h__sad6p ipv3_sad6t];
                                              } in  Unit# [sat_sad6u];
                                        };
                              } in 
                                case
                                    GHC.IO.Handle.Internals.$wdo_operation
                                        fun_sad5Q wild_sad5U sat_sad6v dt_sad6i GHC.Prim.void#
                                of
                                { Unit# ipv3_sad6y [Occ=Once!] ->
                                      case ipv3_sad6y of {
                                        (,) h'_sad6A [Occ=Once] v_sad6B [Occ=Once] ->
                                            case
                                                putMVar# [dt_sad6i h'_sad6A GHC.Prim.void#]
                                            of
                                            s2#_sad6C
                                            { (##) -> Unit# [v_sad6B];
                                            };
                                      };
                                };
                    } in 
                      case ipv1_sad6m of {
                        __DEFAULT -> io_sad6n GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sad6n GHC.Prim.void#];
                      };
              };
        };

GHC.IO.Handle.Internals.withHandle_ [InlPrag=INLINE (sat-args=3)]
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Types.IO a
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        withHandle_2_ra7PG eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.wantReadableHandle_1
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [fun_sad6E h_sad6F act_sad6G void_0E]
        case h_sad6F of wild_sad6I {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sad6K ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sad6N [Occ=Once!] ->
                    let {
                      io_sad6O [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa4gF #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [fun_sad6E act_sad6G wild_sad6I dt_sad6K] \r [void_0E]
                              let {
                                sat_sad6W [Occ=Once]
                                  :: GHC.IO.Handle.Types.Handle__
                                     -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a_aa4gF)
                                [LclId] =
                                    [act_sad6G] \r [h__sad6Q void_0E]
                                        case
                                            GHC.IO.Handle.Internals.wantReadableHandle2
                                                act_sad6G h__sad6Q GHC.Prim.void#
                                        of
                                        { Unit# ipv3_sad6U [Occ=Once] ->
                                              let {
                                                sat_sad6V [Occ=Once]
                                                  :: (GHC.IO.Handle.Types.Handle__, a_aa4gF)
                                                [LclId] =
                                                    CCCS (,)! [h__sad6Q ipv3_sad6U];
                                              } in  Unit# [sat_sad6V];
                                        };
                              } in 
                                case
                                    GHC.IO.Handle.Internals.$wdo_operation
                                        fun_sad6E wild_sad6I sat_sad6W dt_sad6K GHC.Prim.void#
                                of
                                { Unit# ipv3_sad6Z [Occ=Once!] ->
                                      case ipv3_sad6Z of {
                                        (,) h'_sad71 [Occ=Once] v_sad72 [Occ=Once] ->
                                            case
                                                putMVar# [dt_sad6K h'_sad71 GHC.Prim.void#]
                                            of
                                            s2#_sad73
                                            { (##) -> Unit# [v_sad72];
                                            };
                                      };
                                };
                    } in 
                      case ipv1_sad6N of {
                        __DEFAULT -> io_sad6O GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sad6O GHC.Prim.void#];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sad76
                                           _ [Occ=Dead] ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sad7a [Occ=Once!] ->
                    let {
                      io_sad7b [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa4gF #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [fun_sad6E act_sad6G wild_sad6I dt_sad76] \r [void_0E]
                              let {
                                sat_sad7j [Occ=Once]
                                  :: GHC.IO.Handle.Types.Handle__
                                     -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a_aa4gF)
                                [LclId] =
                                    [act_sad6G] \r [h__sad7d void_0E]
                                        case
                                            GHC.IO.Handle.Internals.wantReadableHandle2
                                                act_sad6G h__sad7d GHC.Prim.void#
                                        of
                                        { Unit# ipv3_sad7h [Occ=Once] ->
                                              let {
                                                sat_sad7i [Occ=Once]
                                                  :: (GHC.IO.Handle.Types.Handle__, a_aa4gF)
                                                [LclId] =
                                                    CCCS (,)! [h__sad7d ipv3_sad7h];
                                              } in  Unit# [sat_sad7i];
                                        };
                              } in 
                                case
                                    GHC.IO.Handle.Internals.$wdo_operation
                                        fun_sad6E wild_sad6I sat_sad7j dt_sad76 GHC.Prim.void#
                                of
                                { Unit# ipv3_sad7m [Occ=Once!] ->
                                      case ipv3_sad7m of {
                                        (,) h'_sad7o [Occ=Once] v_sad7p [Occ=Once] ->
                                            case
                                                putMVar# [dt_sad76 h'_sad7o GHC.Prim.void#]
                                            of
                                            s2#_sad7q
                                            { (##) -> Unit# [v_sad7p];
                                            };
                                      };
                                };
                    } in 
                      case ipv1_sad7a of {
                        __DEFAULT -> io_sad7b GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sad7b GHC.Prim.void#];
                      };
              };
        };

GHC.IO.Handle.Internals.wantReadableHandle_
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Types.IO a
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.Internals.wantReadableHandle_1
            eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.wantSeekableHandle2
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=3, Str=<B,U><B,U><B,U>x, Unf=OtherCon []] =
    [] \r [fun_sad7s h_sad7t void_0E]
        let {
          sat_sad7x [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [fun_sad7s h_sad7t] \u []
                  let {
                    sat_sad7v [Occ=Once] :: GHC.Base.Maybe GHC.IO.Handle.Types.Handle
                    [LclId] =
                        CCCS GHC.Base.Just! [h_sad7t]; } in
                  let {
                    sat_sad7w [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        CCCS GHC.IO.Exception.IOError! [sat_sad7v
                                                        GHC.IO.Exception.IllegalOperation
                                                        fun_sad7s
                                                        GHC.IO.Handle.Internals.wantSeekableHandle5
                                                        GHC.Base.Nothing
                                                        GHC.Base.Nothing];
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sad7w;
        } in  raiseIO# [sat_sad7x GHC.Prim.void#];

GHC.IO.Handle.Internals.wantSeekableHandle1
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [fun_sad7y h_sad7z _act_sad7A void_0E]
        case h_sad7z of wild_sad7C {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sad7E ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sad7H [Occ=Once!] ->
                    let {
                      io_sad7I [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa4gJ #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [fun_sad7y _act_sad7A wild_sad7C dt_sad7E] \r [void_0E]
                              let {
                                sat_sad8g [Occ=Once]
                                  :: GHC.IO.Handle.Types.Handle__
                                     -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a_aa4gJ)
                                [LclId] =
                                    [_act_sad7A] \r [h__sad7K void_0E]
                                        case h__sad7K of wild1_sad7M {
                                          GHC.IO.Handle.Types.Handle__ $dIODevice_sad7N [Occ=Once]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       ds2_sad7Q [Occ=Once]
                                                                       ds3_sad7R [Occ=Once!]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                              case ds3_sad7R of {
                                                __DEFAULT ->
                                                    case
                                                        GHC.IO.Device.isSeekable
                                                            $dIODevice_sad7N
                                                            ds2_sad7Q
                                                            GHC.Prim.void#
                                                    of
                                                    { Unit# ipv3_sad86 [Occ=Once!] ->
                                                          case ipv3_sad86 of {
                                                            GHC.Types.False ->
                                                                raiseIO# [GHC.IO.Handle.Internals.wantSeekableHandle3
                                                                          GHC.Prim.void#];
                                                            GHC.Types.True ->
                                                                case
                                                                    _act_sad7A
                                                                        wild1_sad7M GHC.Prim.void#
                                                                of
                                                                { Unit# ipv5_sad8b [Occ=Once] ->
                                                                      let {
                                                                        sat_sad8c [Occ=Once]
                                                                          :: (GHC.IO.Handle.Types.Handle__,
                                                                              a_aa4gJ)
                                                                        [LclId] =
                                                                            CCCS (,)! [wild1_sad7M
                                                                                       ipv5_sad8b];
                                                                      } in  Unit# [sat_sad8c];
                                                                };
                                                          };
                                                    };
                                                GHC.IO.Handle.Types.ClosedHandle ->
                                                    raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle11
                                                              GHC.Prim.void#];
                                                GHC.IO.Handle.Types.SemiClosedHandle ->
                                                    raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle7
                                                              GHC.Prim.void#];
                                                GHC.IO.Handle.Types.AppendHandle ->
                                                    raiseIO# [GHC.IO.Handle.Internals.wantSeekableHandle3
                                                              GHC.Prim.void#];
                                              };
                                        };
                              } in 
                                case
                                    GHC.IO.Handle.Internals.$wdo_operation
                                        fun_sad7y wild_sad7C sat_sad8g dt_sad7E GHC.Prim.void#
                                of
                                { Unit# ipv3_sad8j [Occ=Once!] ->
                                      case ipv3_sad8j of {
                                        (,) h'_sad8l [Occ=Once] v_sad8m [Occ=Once] ->
                                            case
                                                putMVar# [dt_sad7E h'_sad8l GHC.Prim.void#]
                                            of
                                            s2#_sad8n
                                            { (##) -> Unit# [v_sad8m];
                                            };
                                      };
                                };
                    } in 
                      case ipv1_sad7H of {
                        __DEFAULT -> io_sad7I GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sad7I GHC.Prim.void#];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              GHC.IO.Handle.Internals.wantSeekableHandle2
                  fun_sad7y wild_sad7C GHC.Prim.void#;
        };

GHC.IO.Handle.Internals.wantSeekableHandle
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Types.IO a
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.Internals.wantSeekableHandle1
            eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.$wwantWritableHandle' [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> GHC.Prim.MVar# GHC.Prim.RealWorld GHC.IO.Handle.Types.Handle__
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=5,
 Str=<L,U><L,U><S,U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sad8s w1_sad8t ww_sad8u w2_sad8v void_0E]
        let {
          sat_sadaL [Occ=Once]
            :: GHC.IO.Handle.Types.Handle__
               -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a_sa76M)
          [LclId] =
              [w2_sad8v] \r [h__sad8x void_0E]
                  case h__sad8x of wild_sad8z {
                    GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                                 $dBufferedIO_sad8B [Occ=Once]
                                                 _ [Occ=Dead]
                                                 ds_sad8D [Occ=Once]
                                                 ds1_sad8E [Occ=Once!]
                                                 dt_sad8F
                                                 _ [Occ=Dead]
                                                 dt1_sad8H [Occ=Once]
                                                 dt2_sad8I
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 ds4_sad8L [Occ=Once!]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead] ->
                        case ds1_sad8E of {
                          __DEFAULT ->
                              case w2_sad8v wild_sad8z GHC.Prim.void# of {
                                Unit# ipv1_sad8T [Occ=Once] ->
                                    let {
                                      sat_sad8U [Occ=Once]
                                        :: (GHC.IO.Handle.Types.Handle__, a_sa76M)
                                      [LclId] =
                                          CCCS (,)! [wild_sad8z ipv1_sad8T];
                                    } in  Unit# [sat_sad8U];
                              };
                          GHC.IO.Handle.Types.ClosedHandle ->
                              raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle11
                                        GHC.Prim.void#];
                          GHC.IO.Handle.Types.SemiClosedHandle ->
                              raiseIO# [GHC.IO.Handle.Internals.wantReadableHandle7
                                        GHC.Prim.void#];
                          GHC.IO.Handle.Types.ReadHandle ->
                              raiseIO# [GHC.IO.Handle.Internals.wantWritableHandle2
                                        GHC.Prim.void#];
                          GHC.IO.Handle.Types.ReadWriteHandle ->
                              case readMutVar# [dt2_sad8I GHC.Prim.void#] of {
                                Unit# ipv1_sad90 [Occ=Once!] ->
                                    case ipv1_sad90 of {
                                      GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           ds10_sad94 [Occ=Once!]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead]
                                                           _ [Occ=Dead] ->
                                          case ds10_sad94 of {
                                            GHC.IO.Buffer.ReadBuffer ->
                                                case readMutVar# [dt2_sad8I GHC.Prim.void#] of {
                                                  Unit# ipv3_sad9b [Occ=Once!] ->
                                                      case ipv3_sad9b of {
                                                        GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                             _ [Occ=Dead]
                                                                             ds12_sad9f [Occ=Once!]
                                                                             _ [Occ=Dead]
                                                                             dt12_sad9h [Occ=Once]
                                                                             dt13_sad9i [Occ=Once] ->
                                                            let-no-escape {
                                                              $w$j_sad9j [InlPrag=NOUSERINLINE[0],
                                                                          Occ=Once*!T[1],
                                                                          Dmd=<L,1*C1(U)>]
                                                                :: GHC.Prim.State#
                                                                     GHC.Prim.RealWorld
                                                                   -> (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         (GHC.IO.Handle.Types.Handle__,
                                                                          a_sa76M) #)
                                                              [LclId[JoinId(1)],
                                                               Arity=1,
                                                               Str=<S,U>,
                                                               Unf=OtherCon []] =
                                                                  sat-only [w2_sad8v
                                                                            wild_sad8z
                                                                            $dBufferedIO_sad8B
                                                                            ds_sad8D
                                                                            dt_sad8F
                                                                            dt2_sad8I] \r [void_0E]
                                                                      case
                                                                          GHC.IO.Handle.Internals.flushBuffer2
                                                                              wild_sad8z
                                                                              GHC.Prim.void#
                                                                      of
                                                                      { Unit# _ [Occ=Dead] ->
                                                                            case
                                                                                readMutVar# [dt2_sad8I
                                                                                             GHC.Prim.void#]
                                                                            of
                                                                            { Unit# ipv7_sad9q [Occ=Once!] ->
                                                                                  let {
                                                                                    sat_sad9y [Occ=Once]
                                                                                      :: GHC.IO.Buffer.Buffer
                                                                                           GHC.IO.Buffer.CharBufElem
                                                                                    [LclId] =
                                                                                        [ipv7_sad9q] \u []
                                                                                            case
                                                                                                ipv7_sad9q
                                                                                            of
                                                                                            { GHC.IO.Buffer.Buffer dt14_sad9s [Occ=Once]
                                                                                                                   dt15_sad9t [Occ=Once]
                                                                                                                   _ [Occ=Dead]
                                                                                                                   dt16_sad9v [Occ=Once]
                                                                                                                   dt17_sad9w [Occ=Once]
                                                                                                                   dt18_sad9x [Occ=Once] ->
                                                                                                  GHC.IO.Buffer.Buffer [dt14_sad9s
                                                                                                                        dt15_sad9t
                                                                                                                        GHC.IO.Buffer.WriteBuffer
                                                                                                                        dt16_sad9v
                                                                                                                        dt17_sad9w
                                                                                                                        dt18_sad9x];
                                                                                            };
                                                                                  } in 
                                                                                    case
                                                                                        writeMutVar# [dt2_sad8I
                                                                                                      sat_sad9y
                                                                                                      GHC.Prim.void#]
                                                                                    of
                                                                                    s2#_sad9z
                                                                                    { (##) ->
                                                                                          case
                                                                                              readMutVar# [dt_sad8F
                                                                                                           GHC.Prim.void#]
                                                                                          of
                                                                                          { Unit# ipv9_sad9C [Occ=Once] ->
                                                                                                case
                                                                                                    GHC.IO.BufferedIO.emptyWriteBuffer
                                                                                                        $dBufferedIO_sad8B
                                                                                                        ds_sad8D
                                                                                                        ipv9_sad9C
                                                                                                        GHC.Prim.void#
                                                                                                of
                                                                                                { Unit# ipv11_sad9F [Occ=Once] ->
                                                                                                      case
                                                                                                          writeMutVar# [dt_sad8F
                                                                                                                        ipv11_sad9F
                                                                                                                        GHC.Prim.void#]
                                                                                                      of
                                                                                                      s2#1_sad9G
                                                                                                      { (##) ->
                                                                                                            case
                                                                                                                w2_sad8v
                                                                                                                    wild_sad8z
                                                                                                                    GHC.Prim.void#
                                                                                                            of
                                                                                                            { Unit# ipv13_sad9J [Occ=Once] ->
                                                                                                                  let {
                                                                                                                    sat_sad9K [Occ=Once]
                                                                                                                      :: (GHC.IO.Handle.Types.Handle__,
                                                                                                                          a_sa76M)
                                                                                                                    [LclId] =
                                                                                                                        CCCS (,)! [wild_sad8z
                                                                                                                                   ipv13_sad9J];
                                                                                                                  } in 
                                                                                                                    Unit# [sat_sad9K];
                                                                                                            };
                                                                                                      };
                                                                                                };
                                                                                          };
                                                                                    };
                                                                            };
                                                                      };
                                                            } in 
                                                              case ds12_sad9f of {
                                                                GHC.IO.Buffer.ReadBuffer ->
                                                                    case
                                                                        ==# [dt12_sad9h dt13_sad9i]
                                                                    of
                                                                    { __DEFAULT ->
                                                                          case
                                                                              readMutVar# [dt1_sad8H
                                                                                           GHC.Prim.void#]
                                                                          of
                                                                          { Unit# ipv5_sad9P [Occ=Once!] ->
                                                                                case ipv5_sad9P of {
                                                                                  (,) codec_state_sad9R [Occ=Once]
                                                                                      bbuf0_sad9S [Occ=Once*] ->
                                                                                      case
                                                                                          readMutVar# [dt2_sad8I
                                                                                                       GHC.Prim.void#]
                                                                                      of
                                                                                      { Unit# ipv7_sad9V ->
                                                                                            let {
                                                                                              sat_sada3 [Occ=Once]
                                                                                                :: GHC.IO.Buffer.Buffer
                                                                                                     GHC.IO.Buffer.CharBufElem
                                                                                              [LclId] =
                                                                                                  [ipv7_sad9V] \u []
                                                                                                      case
                                                                                                          ipv7_sad9V
                                                                                                      of
                                                                                                      { GHC.IO.Buffer.Buffer dt14_sad9X [Occ=Once]
                                                                                                                             dt15_sad9Y [Occ=Once]
                                                                                                                             ds15_sad9Z [Occ=Once]
                                                                                                                             dt16_sada0 [Occ=Once]
                                                                                                                             _ [Occ=Dead]
                                                                                                                             _ [Occ=Dead] ->
                                                                                                            GHC.IO.Buffer.Buffer [dt14_sad9X
                                                                                                                                  dt15_sad9Y
                                                                                                                                  ds15_sad9Z
                                                                                                                                  dt16_sada0
                                                                                                                                  0#
                                                                                                                                  0#];
                                                                                                      };
                                                                                            } in 
                                                                                              case
                                                                                                  writeMutVar# [dt2_sad8I
                                                                                                                sat_sada3
                                                                                                                GHC.Prim.void#]
                                                                                              of
                                                                                              s2#_sada4
                                                                                              { (##) ->
                                                                                                    case
                                                                                                        ipv7_sad9V
                                                                                                    of
                                                                                                    { GHC.IO.Buffer.Buffer dt14_sada6 [Occ=Once]
                                                                                                                           dt15_sada7 [Occ=Once]
                                                                                                                           ds15_sada8 [Occ=Once]
                                                                                                                           _ [Occ=Dead]
                                                                                                                           dt17_sadaa [Occ=Once!]
                                                                                                                           _ [Occ=Dead] ->
                                                                                                          case
                                                                                                              dt17_sadaa
                                                                                                          of
                                                                                                          wild8_sadac
                                                                                                          { __DEFAULT ->
                                                                                                                case
                                                                                                                    ds4_sad8L
                                                                                                                of
                                                                                                                { GHC.Base.Nothing ->
                                                                                                                      let {
                                                                                                                        sat_sadam [Occ=Once]
                                                                                                                          :: GHC.IO.Buffer.Buffer
                                                                                                                               GHC.Word.Word8
                                                                                                                        [LclId] =
                                                                                                                            [bbuf0_sad9S
                                                                                                                             wild8_sadac] \u []
                                                                                                                                case
                                                                                                                                    bbuf0_sad9S
                                                                                                                                of
                                                                                                                                { GHC.IO.Buffer.Buffer dt19_sadaf [Occ=Once]
                                                                                                                                                       dt20_sadag [Occ=Once]
                                                                                                                                                       ds16_sadah [Occ=Once]
                                                                                                                                                       dt21_sadai [Occ=Once]
                                                                                                                                                       dt22_sadaj [Occ=Once]
                                                                                                                                                       dt23_sadak [Occ=Once] ->
                                                                                                                                      case
                                                                                                                                          +# [dt22_sadaj
                                                                                                                                              wild8_sadac]
                                                                                                                                      of
                                                                                                                                      sat_sadal
                                                                                                                                      { __DEFAULT ->
                                                                                                                                            GHC.IO.Buffer.Buffer [dt19_sadaf
                                                                                                                                                                  dt20_sadag
                                                                                                                                                                  ds16_sadah
                                                                                                                                                                  dt21_sadai
                                                                                                                                                                  sat_sadal
                                                                                                                                                                  dt23_sadak];
                                                                                                                                      };
                                                                                                                                };
                                                                                                                      } in 
                                                                                                                        case
                                                                                                                            writeMutVar# [dt_sad8F
                                                                                                                                          sat_sadam
                                                                                                                                          GHC.Prim.void#]
                                                                                                                        of
                                                                                                                        s2#1_sadan
                                                                                                                        { (##) ->
                                                                                                                              $w$j_sad9j
                                                                                                                                  GHC.Prim.void#;
                                                                                                                        };
                                                                                                                  GHC.Base.Just decoder_sadao [Occ=Once!] ->
                                                                                                                      case
                                                                                                                          decoder_sadao
                                                                                                                      of
                                                                                                                      { GHC.IO.Encoding.Types.BufferCodec ds16_sadaq [Occ=Once]
                                                                                                                                                          ds17_sadar [Occ=Once]
                                                                                                                                                          _ [Occ=Dead]
                                                                                                                                                          _ [Occ=Dead]
                                                                                                                                                          ds20_sadau [Occ=Once!] ->
                                                                                                                            case
                                                                                                                                ds20_sadau
                                                                                                                                    codec_state_sad9R
                                                                                                                                    GHC.Prim.void#
                                                                                                                            of
                                                                                                                            { Unit# _ [Occ=Dead] ->
                                                                                                                                  let {
                                                                                                                                    sat_saday [Occ=Once]
                                                                                                                                      :: GHC.IO.Buffer.Buffer
                                                                                                                                           GHC.IO.Buffer.CharBufElem
                                                                                                                                    [LclId] =
                                                                                                                                        CCCS GHC.IO.Buffer.Buffer! [dt14_sada6
                                                                                                                                                                    dt15_sada7
                                                                                                                                                                    ds15_sada8
                                                                                                                                                                    wild8_sadac
                                                                                                                                                                    0#
                                                                                                                                                                    0#];
                                                                                                                                  } in 
                                                                                                                                    case
                                                                                                                                        GHC.IO.Handle.Internals.$wstreamEncode
                                                                                                                                            ds16_sadaq
                                                                                                                                            ds17_sadar
                                                                                                                                            bbuf0_sad9S
                                                                                                                                            sat_saday
                                                                                                                                            GHC.Prim.void#
                                                                                                                                    of
                                                                                                                                    { Unit# ipv11_sadaB [Occ=Once!] ->
                                                                                                                                          case
                                                                                                                                              ipv11_sadaB
                                                                                                                                          of
                                                                                                                                          { (,) bbuf1_sadaD [Occ=Once]
                                                                                                                                                _ [Occ=Dead] ->
                                                                                                                                                case
                                                                                                                                                    writeMutVar# [dt_sad8F
                                                                                                                                                                  bbuf1_sadaD
                                                                                                                                                                  GHC.Prim.void#]
                                                                                                                                                of
                                                                                                                                                s2#1_sadaF
                                                                                                                                                { (##) ->
                                                                                                                                                      $w$j_sad9j
                                                                                                                                                          GHC.Prim.void#;
                                                                                                                                                };
                                                                                                                                          };
                                                                                                                                    };
                                                                                                                            };
                                                                                                                      };
                                                                                                                };
                                                                                                            0# ->
                                                                                                                case
                                                                                                                    writeMutVar# [dt_sad8F
                                                                                                                                  bbuf0_sad9S
                                                                                                                                  GHC.Prim.void#]
                                                                                                                of
                                                                                                                s2#1_sadaG
                                                                                                                { (##) ->
                                                                                                                      $w$j_sad9j
                                                                                                                          GHC.Prim.void#;
                                                                                                                };
                                                                                                          };
                                                                                                    };
                                                                                              };
                                                                                      };
                                                                                };
                                                                          };
                                                                      1# ->
                                                                          $w$j_sad9j GHC.Prim.void#;
                                                                    };
                                                                GHC.IO.Buffer.WriteBuffer ->
                                                                    $w$j_sad9j GHC.Prim.void#;
                                                              };
                                                      };
                                                };
                                            GHC.IO.Buffer.WriteBuffer ->
                                                case w2_sad8v wild_sad8z GHC.Prim.void# of {
                                                  Unit# ipv3_sadaJ [Occ=Once] ->
                                                      let {
                                                        sat_sadaK [Occ=Once]
                                                          :: (GHC.IO.Handle.Types.Handle__, a_sa76M)
                                                        [LclId] =
                                                            CCCS (,)! [wild_sad8z ipv3_sadaJ];
                                                      } in  Unit# [sat_sadaK];
                                                };
                                          };
                                    };
                              };
                        };
                  };
        } in 
          GHC.IO.Handle.Internals.$wwithHandle'
              w_sad8s w1_sad8t ww_sad8u sat_sadaL GHC.Prim.void#;

GHC.IO.Handle.Internals.wantWritableHandle1
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [fun_sadaM h_sadaN act_sadaO void_0E]
        case h_sadaN of wild_sadaQ {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sadaS [Occ=Once] ->
              GHC.IO.Handle.Internals.$wwantWritableHandle'
                  fun_sadaM wild_sadaQ dt_sadaS act_sadaO GHC.Prim.void#;
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           dt1_sadaV [Occ=Once] ->
              GHC.IO.Handle.Internals.$wwantWritableHandle'
                  fun_sadaM wild_sadaQ dt1_sadaV act_sadaO GHC.Prim.void#;
        };

GHC.IO.Handle.Internals.wantWritableHandle
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO a)
     -> GHC.Types.IO a
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.Internals.wantWritableHandle1
            eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

withHandle2_ra7PH
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [fun_sadaW h_sadaX act_sadaY void_0E]
        case h_sadaX of wild_sadb0 {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sadb2 ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sadb5 [Occ=Once!] ->
                    let {
                      io_sadb6 [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa4gR #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [fun_sadaW act_sadaY wild_sadb0 dt_sadb2] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      fun_sadaW wild_sadb0 act_sadaY dt_sadb2 GHC.Prim.void#
                              of
                              { Unit# ipv3_sadba [Occ=Once!] ->
                                    case ipv3_sadba of {
                                      (,) h'_sadbc [Occ=Once] v_sadbd [Occ=Once] ->
                                          case
                                              putMVar# [dt_sadb2 h'_sadbc GHC.Prim.void#]
                                          of
                                          s2#_sadbe
                                          { (##) -> Unit# [v_sadbd];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sadb5 of {
                        __DEFAULT -> io_sadb6 GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sadb6 GHC.Prim.void#];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sadbh
                                           _ [Occ=Dead] ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sadbl [Occ=Once!] ->
                    let {
                      io_sadbm [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa4gR #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [fun_sadaW act_sadaY wild_sadb0 dt_sadbh] \r [void_0E]
                              case
                                  GHC.IO.Handle.Internals.$wdo_operation
                                      fun_sadaW wild_sadb0 act_sadaY dt_sadbh GHC.Prim.void#
                              of
                              { Unit# ipv3_sadbq [Occ=Once!] ->
                                    case ipv3_sadbq of {
                                      (,) h'_sadbs [Occ=Once] v_sadbt [Occ=Once] ->
                                          case
                                              putMVar# [dt_sadbh h'_sadbs GHC.Prim.void#]
                                          of
                                          s2#_sadbu
                                          { (##) -> Unit# [v_sadbt];
                                          };
                                    };
                              };
                    } in 
                      case ipv1_sadbl of {
                        __DEFAULT -> io_sadbm GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sadbm GHC.Prim.void#];
                      };
              };
        };

GHC.IO.Handle.Internals.withHandle [InlPrag=INLINE (sat-args=3)]
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a))
     -> GHC.Types.IO a
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><C(S),C(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        withHandle2_ra7PH eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.Internals.wantReadableHandle1
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [fun_sadbw h_sadbx act_sadby void_0E]
        case h_sadbx of wild_sadbA {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sadbC ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sadbF [Occ=Once!] ->
                    let {
                      io_sadbG [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa4gV #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [fun_sadbw act_sadby wild_sadbA dt_sadbC] \r [void_0E]
                              let {
                                sat_sadbI [Occ=Once]
                                  :: GHC.IO.Handle.Types.Handle__
                                     -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a_aa4gV)
                                [LclId] =
                                    [act_sadby] \r [eta_B2 void_0E]
                                        GHC.IO.Handle.Internals.wantReadableHandle2
                                            act_sadby eta_B2 GHC.Prim.void#;
                              } in 
                                case
                                    GHC.IO.Handle.Internals.$wdo_operation
                                        fun_sadbw wild_sadbA sat_sadbI dt_sadbC GHC.Prim.void#
                                of
                                { Unit# ipv3_sadbL [Occ=Once!] ->
                                      case ipv3_sadbL of {
                                        (,) h'_sadbN [Occ=Once] v_sadbO [Occ=Once] ->
                                            case
                                                putMVar# [dt_sadbC h'_sadbN GHC.Prim.void#]
                                            of
                                            s2#_sadbP
                                            { (##) -> Unit# [v_sadbO];
                                            };
                                      };
                                };
                    } in 
                      case ipv1_sadbF of {
                        __DEFAULT -> io_sadbG GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sadbG GHC.Prim.void#];
                      };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           dt_sadbS
                                           _ [Occ=Dead] ->
              case getMaskingState# [GHC.Prim.void#] of {
                Unit# ipv1_sadbW [Occ=Once!] ->
                    let {
                      io_sadbX [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_aa4gV #)
                      [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                          [fun_sadbw act_sadby wild_sadbA dt_sadbS] \r [void_0E]
                              let {
                                sat_sadbZ [Occ=Once]
                                  :: GHC.IO.Handle.Types.Handle__
                                     -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a_aa4gV)
                                [LclId] =
                                    [act_sadby] \r [eta_B2 void_0E]
                                        GHC.IO.Handle.Internals.wantReadableHandle2
                                            act_sadby eta_B2 GHC.Prim.void#;
                              } in 
                                case
                                    GHC.IO.Handle.Internals.$wdo_operation
                                        fun_sadbw wild_sadbA sat_sadbZ dt_sadbS GHC.Prim.void#
                                of
                                { Unit# ipv3_sadc2 [Occ=Once!] ->
                                      case ipv3_sadc2 of {
                                        (,) h'_sadc4 [Occ=Once] v_sadc5 [Occ=Once] ->
                                            case
                                                putMVar# [dt_sadbS h'_sadc4 GHC.Prim.void#]
                                            of
                                            s2#_sadc6
                                            { (##) -> Unit# [v_sadc5];
                                            };
                                      };
                                };
                    } in 
                      case ipv1_sadbW of {
                        __DEFAULT -> io_sadbX GHC.Prim.void#;
                        0# -> maskAsyncExceptions# [io_sadbX GHC.Prim.void#];
                      };
              };
        };

GHC.IO.Handle.Internals.wantReadableHandle
  :: forall a.
     GHC.Base.String
     -> GHC.IO.Handle.Types.Handle
     -> (GHC.IO.Handle.Types.Handle__
         -> GHC.Types.IO (GHC.IO.Handle.Types.Handle__, a))
     -> GHC.Types.IO a
[GblId,
 Arity=4,
 Str=<L,U><S,1*U><L,C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.Internals.wantReadableHandle1
            eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

