
==================== Pre unarise: ====================
2018-03-16 16:06:11.914069701 UTC

GHC.IO.Handle.FD.fdToHandle12
  :: Data.Typeable.Internal.TypeRep GHC.IO.FD.FD
[GblId] =
    [] \u []
        case
            Data.Typeable.Internal.$wmkTrCon
                10838815552519039062##
                15546290101957756376##
                GHC.IO.FD.$trModule
                GHC.IO.FD.$tcFD1
                0#
                GHC.Types.krep$*
                GHC.Types.[]
        of
        { (#,,,,#) ww8_sbfCO [Occ=Once]
                   ww9_sbfCP [Occ=Once]
                   ww10_sbfCQ [Occ=Once]
                   ww11_sbfCR [Occ=Once]
                   ww12_sbfCS [Occ=Once] ->
              Data.Typeable.Internal.TrTyCon [ww8_sbfCO
                                              ww9_sbfCP
                                              ww10_sbfCQ
                                              ww11_sbfCR
                                              ww12_sbfCS];
        };

GHC.IO.Handle.FD.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.Handle.FD.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.FD.$trModule4];

GHC.IO.Handle.FD.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Handle.FD"#;

GHC.IO.Handle.FD.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.FD.$trModule2];

GHC.IO.Handle.FD.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Handle.FD.$trModule3
                                     GHC.IO.Handle.FD.$trModule1];

lvl_rbfCu :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "handleToFd"#;

lvl1_rbfCv :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl_rbfCu;

lvl2_rbfCw :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "not a file descriptor"#;

lvl3_rbfCx :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl2_rbfCw;

GHC.IO.Handle.FD.handleToFd3
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.IO.FD.FD #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    [] \r [h_sbfCT eta_sbfCU]
        let {
          sat_sbfCX [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [h_sbfCT] \u []
                  let {
                    sat_sbfCV [Occ=Once] :: GHC.Base.Maybe GHC.IO.Handle.Types.Handle
                    [LclId] =
                        CCCS GHC.Base.Just! [h_sbfCT]; } in
                  let {
                    sat_sbfCW [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        CCCS GHC.IO.Exception.IOError! [sat_sbfCV
                                                        GHC.IO.Exception.InappropriateType
                                                        lvl1_rbfCv
                                                        lvl3_rbfCx
                                                        GHC.Base.Nothing
                                                        GHC.Base.Nothing];
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sbfCW;
        } in  raiseIO# [sat_sbfCX eta_sbfCU];

lvl4_rbfCy :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "not a file handle"#;

lvl5_rbfCz :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl4_rbfCy;

GHC.IO.Handle.FD.handleToFd2
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.IO.FD.FD #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    [] \r [h_sbfCY eta_sbfCZ]
        let {
          sat_sbfD2 [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [h_sbfCY] \u []
                  let {
                    sat_sbfD0 [Occ=Once] :: GHC.Base.Maybe GHC.IO.Handle.Types.Handle
                    [LclId] =
                        CCCS GHC.Base.Just! [h_sbfCY]; } in
                  let {
                    sat_sbfD1 [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        CCCS GHC.IO.Exception.IOError! [sat_sbfD0
                                                        GHC.IO.Exception.InappropriateType
                                                        lvl1_rbfCv
                                                        lvl5_rbfCz
                                                        GHC.Base.Nothing
                                                        GHC.Base.Nothing];
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sbfD1;
        } in  raiseIO# [sat_sbfD2 eta_sbfCZ];

GHC.IO.Handle.FD.handleToFd1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.IO.FD.FD #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h_sbfD3 eta_sbfD4]
        case h_sbfD3 of wild_sbfD5 {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbfD7 [Occ=Once] ->
              case readMVar# [dt_sbfD7 eta_sbfD4] of {
                (#,#) ipv_sbfD9 [Occ=Once*] ipv1_sbfDa [Occ=Once!] ->
                    case ipv1_sbfDa of {
                      GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   $dTypeable_sbfDe [Occ=Once]
                                                   ds2_sbfDf [Occ=Once]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead] ->
                          case
                              Data.Typeable.Internal.sameTypeRep
                                  $dTypeable_sbfDe GHC.IO.Handle.FD.fdToHandle12
                          of
                          { GHC.Types.False ->
                                GHC.IO.Handle.FD.handleToFd3 wild_sbfD5 ipv_sbfD9;
                            GHC.Types.True -> (#,#) [ipv_sbfD9 ds2_sbfDf];
                          };
                    };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              GHC.IO.Handle.FD.handleToFd2 wild_sbfD5 eta_sbfD4;
        };

GHC.IO.Handle.FD.handleToFd
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.IO.FD.FD
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.FD.handleToFd1 eta_B2 eta_B1;

GHC.IO.Handle.FD.fdToHandle11 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "openFile"#;

GHC.IO.Handle.FD.fdToHandle10 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.FD.fdToHandle11;

GHC.IO.Handle.FD.fdToHandle9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "is a directory"#;

GHC.IO.Handle.FD.fdToHandle8 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.FD.fdToHandle9;

GHC.IO.Handle.FD.fdToHandle7 :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.InappropriateType
                                             GHC.IO.Handle.FD.fdToHandle10
                                             GHC.IO.Handle.FD.fdToHandle8
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Handle.FD.fdToHandle6 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Handle.FD.fdToHandle7;

GHC.IO.Handle.FD.fdToHandle5
  :: GHC.IO.FD.FD
     -> GHC.IO.Device.IODeviceType
     -> GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> GHC.Types.Bool
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId,
 Arity=7,
 Str=<L,U(U,U)><L,1*U><L,U><L,U><S,1*U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [fd0_sbfDw
           fd_type_sbfDx
           filepath_sbfDy
           iomode_sbfDz
           set_non_blocking_sbfDA
           mb_codec_sbfDB
           s_sbfDC]
        let-no-escape {
          $j_sbfDD [Occ=Once*!T[2], Dmd=<L,1*C1(C1(U(U,U)))>]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> GHC.IO.FD.FD
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     GHC.IO.Handle.Types.Handle #)
          [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
              sat-only [fd_type_sbfDx
                        filepath_sbfDy
                        iomode_sbfDz
                        mb_codec_sbfDB] \r [ipv_sbfDE ipv1_sbfDF]
                  let {
                    nl_sbfDG [Dmd=<L,U(U,U)>] :: GHC.IO.Handle.Types.NewlineMode
                    [LclId] =
                        [mb_codec_sbfDB] \u []
                            case mb_codec_sbfDB of {
                              __DEFAULT -> GHC.IO.Handle.Types.nativeNewlineMode;
                            };
                  } in 
                    let-no-escape {
                      fail_sbfDI [Occ=Once*!T[1], Dmd=<L,1*C1(U(U,U))>]
                        :: GHC.Prim.Void#
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 GHC.IO.Handle.Types.Handle #)
                      [LclId[JoinId(1)], Arity=1, Str=<L,A>, Unf=OtherCon []] =
                          sat-only [filepath_sbfDy
                                    iomode_sbfDz
                                    mb_codec_sbfDB
                                    ipv_sbfDE
                                    ipv1_sbfDF
                                    nl_sbfDG] \r [ds_sbfDJ]
                              let {
                                sat_sbfDL [Occ=Once] :: GHC.IO.Handle.Types.HandleType
                                [LclId] =
                                    [iomode_sbfDz] \u []
                                        case iomode_sbfDz of {
                                          GHC.IO.IOMode.ReadMode ->
                                              GHC.IO.Handle.Types.ReadHandle [];
                                          GHC.IO.IOMode.WriteMode ->
                                              GHC.IO.Handle.Types.WriteHandle [];
                                          GHC.IO.IOMode.AppendMode ->
                                              GHC.IO.Handle.Types.AppendHandle [];
                                          GHC.IO.IOMode.ReadWriteMode ->
                                              GHC.IO.Handle.Types.ReadWriteHandle [];
                                        };
                              } in 
                                GHC.IO.Handle.Internals.mkDuplexHandle5
                                    GHC.IO.FD.$fIODeviceFD
                                    GHC.IO.FD.$fBufferedIOFD
                                    GHC.IO.Handle.FD.fdToHandle12
                                    ipv1_sbfDF
                                    filepath_sbfDy
                                    sat_sbfDL
                                    GHC.Types.True
                                    mb_codec_sbfDB
                                    nl_sbfDG
                                    GHC.IO.Handle.Internals.mkDuplexHandle4
                                    GHC.Base.Nothing
                                    ipv_sbfDE;
                    } in 
                      case fd_type_sbfDx of {
                        __DEFAULT -> fail_sbfDI GHC.Prim.void#;
                        GHC.IO.Device.Directory ->
                            raiseIO# [GHC.IO.Handle.FD.fdToHandle6 ipv_sbfDE];
                        GHC.IO.Device.Stream ->
                            case iomode_sbfDz of {
                              __DEFAULT -> fail_sbfDI GHC.Prim.void#;
                              GHC.IO.IOMode.ReadWriteMode ->
                                  GHC.IO.Handle.Internals.mkDuplexHandle1
                                      GHC.IO.FD.$fIODeviceFD
                                      GHC.IO.FD.$fBufferedIOFD
                                      GHC.IO.Handle.FD.fdToHandle12
                                      ipv1_sbfDF
                                      filepath_sbfDy
                                      mb_codec_sbfDB
                                      nl_sbfDG
                                      ipv_sbfDE;
                            };
                      };
        } in 
          case set_non_blocking_sbfDA of {
            GHC.Types.False -> $j_sbfDD s_sbfDC fd0_sbfDw;
            GHC.Types.True ->
                case fd0_sbfDw of {
                  GHC.IO.FD.FD dt_sbfDQ _ [Occ=Dead] ->
                      case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
                        (#,#) _ [Occ=Dead] ds1_sbfDV [Occ=Once] ->
                            let {
                              sat_sbfE4 [Occ=Once] :: GHC.Types.IO Foreign.C.Types.CInt
                              [LclId] =
                                  [dt_sbfDQ ds1_sbfDV] \r [ds2_sbfDW]
                                      case narrow32Int# [ds1_sbfDV] of sat_sbfDY {
                                        __DEFAULT ->
                                            case
                                                __pkg_ccall base-4.11.0.0 [dt_sbfDQ
                                                                           sat_sbfDY
                                                                           ds2_sbfDW]
                                            of
                                            { (#,#) ds3_sbfE0 [Occ=Once] ds4_sbfE1 [Occ=Once] ->
                                                  case narrow32Int# [ds4_sbfE1] of sat_sbfE2 {
                                                    __DEFAULT ->
                                                        let {
                                                          sat_sbfE3 [Occ=Once] :: GHC.Int.Int32
                                                          [LclId] =
                                                              CCCS GHC.Int.I32#! [sat_sbfE2];
                                                        } in  (#,#) [ds3_sbfE0 sat_sbfE3];
                                                  };
                                            };
                                      };
                            } in 
                              case
                                  Foreign.C.Error.throwErrnoIfMinus1Retry2
                                      System.Posix.Internals.fdFileSize_pred
                                      System.Posix.Internals.setNonBlockingFD3
                                      sat_sbfE4
                                      s_sbfDC
                              of
                              { (#,#) ipv_sbfE6 [Occ=Once*] ipv1_sbfE7 [Occ=Once] ->
                                    case ipv1_sbfE7 of {
                                      GHC.Int.I32# x_sbfE9 ->
                                          case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
                                            (#,#) _ [Occ=Dead] ds4_sbfEd [Occ=Once] ->
                                                case narrow32Int# [ds4_sbfEd] of sat_sbfEg {
                                                  __DEFAULT ->
                                                      case int2Word# [sat_sbfEg] of sat_sbfEh {
                                                        __DEFAULT ->
                                                            case int2Word# [x_sbfE9] of sat_sbfEf {
                                                              __DEFAULT ->
                                                                  case
                                                                      or# [sat_sbfEf sat_sbfEh]
                                                                  of
                                                                  sat_sbfEi
                                                                  { __DEFAULT ->
                                                                        case
                                                                            word2Int# [sat_sbfEi]
                                                                        of
                                                                        y_sbfEe [Dmd=<S,U>]
                                                                        { __DEFAULT ->
                                                                              case
                                                                                  /=# [x_sbfE9
                                                                                       y_sbfEe]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_sbfEk [Occ=Once]
                                                                                        :: GHC.IO.FD.FD
                                                                                      [LclId] =
                                                                                          CCCS GHC.IO.FD.FD! [dt_sbfDQ
                                                                                                              1#];
                                                                                    } in 
                                                                                      $j_sbfDD
                                                                                          ipv_sbfE6
                                                                                          sat_sbfEk;
                                                                                1# ->
                                                                                    case
                                                                                        __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#]
                                                                                    of
                                                                                    { (#,#) _ [Occ=Dead]
                                                                                            ds6_sbfEo [Occ=Once] ->
                                                                                          case
                                                                                              narrow32Int# [ds6_sbfEo]
                                                                                          of
                                                                                          sat_sbfEq
                                                                                          { __DEFAULT ->
                                                                                                case
                                                                                                    __pkg_ccall base-4.11.0.0 [dt_sbfDQ
                                                                                                                               sat_sbfEq
                                                                                                                               y_sbfEe
                                                                                                                               ipv_sbfE6]
                                                                                                of
                                                                                                { (#,#) ds7_sbfEs [Occ=Once]
                                                                                                        _ [Occ=Dead] ->
                                                                                                      let {
                                                                                                        sat_sbfEu [Occ=Once]
                                                                                                          :: GHC.IO.FD.FD
                                                                                                        [LclId] =
                                                                                                            CCCS GHC.IO.FD.FD! [dt_sbfDQ
                                                                                                                                1#];
                                                                                                      } in 
                                                                                                        $j_sbfDD
                                                                                                            ds7_sbfEs
                                                                                                            sat_sbfEu;
                                                                                                };
                                                                                          };
                                                                                    };
                                                                              };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                      };
                };
          };

GHC.IO.Handle.FD.mkHandleFromFD
  :: GHC.IO.FD.FD
     -> GHC.IO.Device.IODeviceType
     -> GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> GHC.Types.Bool
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId,
 Arity=7,
 Str=<L,U(U,U)><L,1*U><L,U><L,U><S,1*U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.FD.fdToHandle5
            eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.FD.fdToHandle'2 :: GHC.Word.Word64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W64#! [0##];

GHC.IO.Handle.FD.fdToHandle'1
  :: Foreign.C.Types.CInt
     -> GHC.Base.Maybe GHC.IO.Device.IODeviceType
     -> GHC.Types.Bool
     -> GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> GHC.Types.Bool
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId,
 Arity=7,
 Str=<L,U(U)><S,1*U><L,U><L,U><L,U><L,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [fdint_sbfEv
           mb_type_sbfEw
           is_socket_sbfEx
           filepath_sbfEy
           iomode_sbfEz
           binary_sbfEA
           s_sbfEB]
        let-no-escape {
          $w$j_sbfEC [InlPrag=NOUSERINLINE[0],
                      Occ=Once*!T[3],
                      Dmd=<L,1*C1(C1(C1(U(U,U))))>]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> GHC.IO.FD.FD
               -> GHC.IO.Device.IODeviceType
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     GHC.IO.Handle.Types.Handle #)
          [LclId[JoinId(3)],
           Arity=3,
           Str=<S,U><L,U(U,U)><L,1*U>,
           Unf=OtherCon []] =
              sat-only [is_socket_sbfEx
                        filepath_sbfEy
                        iomode_sbfEz
                        binary_sbfEA] \r [w_sbfED ww_sbfEE ww1_sbfEF]
                  case binary_sbfEA of {
                    GHC.Types.False ->
                        case GHC.IO.Encoding.getLocaleEncoding1 of {
                          (,) getLocaleEncoding3_sbfEI [Occ=Once] _ [Occ=Dead] ->
                              case getLocaleEncoding3_sbfEI w_sbfED of {
                                (#,#) ipv_sbfEL [Occ=Once] ipv1_sbfEM [Occ=Once] ->
                                    let {
                                      sat_sbfEN [Occ=Once]
                                        :: GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
                                      [LclId] =
                                          CCCS GHC.Base.Just! [ipv1_sbfEM];
                                    } in 
                                      GHC.IO.Handle.FD.fdToHandle5
                                          ww_sbfEE
                                          ww1_sbfEF
                                          filepath_sbfEy
                                          iomode_sbfEz
                                          is_socket_sbfEx
                                          sat_sbfEN
                                          ipv_sbfEL;
                              };
                        };
                    GHC.Types.True ->
                        GHC.IO.Handle.FD.fdToHandle5
                            ww_sbfEE
                            ww1_sbfEF
                            filepath_sbfEy
                            iomode_sbfEz
                            is_socket_sbfEx
                            GHC.Base.Nothing
                            w_sbfED;
                  };
        } in 
          case mb_type_sbfEw of {
            GHC.Base.Nothing ->
                case
                    GHC.IO.FD.$wmkFD
                        fdint_sbfEv iomode_sbfEz GHC.Base.Nothing is_socket_sbfEx s_sbfEB
                of
                { (#,#) ipv_sbfEQ [Occ=Once] ipv1_sbfER [Occ=Once!] ->
                      case ipv1_sbfER of {
                        (,) ww1_sbfET [Occ=Once] ww2_sbfEU [Occ=Once] ->
                            $w$j_sbfEC ipv_sbfEQ ww1_sbfET ww2_sbfEU;
                      };
                };
            GHC.Base.Just ds_sbfEV [Occ=Once!] ->
                case ds_sbfEV of wild1_sbfEW {
                  __DEFAULT ->
                      let {
                        sat_sbfEX [Occ=Once]
                          :: (GHC.IO.Device.IODeviceType, System.Posix.Types.CDev,
                              System.Posix.Types.CIno)
                        [LclId] =
                            CCCS (,,)! [wild1_sbfEW
                                        GHC.IO.Handle.FD.fdToHandle'2
                                        GHC.IO.Handle.FD.fdToHandle'2]; } in
                      let {
                        sat_sbfEY [Occ=Once]
                          :: GHC.Base.Maybe
                               (GHC.IO.Device.IODeviceType, System.Posix.Types.CDev,
                                System.Posix.Types.CIno)
                        [LclId] =
                            CCCS GHC.Base.Just! [sat_sbfEX];
                      } in 
                        case
                            GHC.IO.FD.$wmkFD
                                fdint_sbfEv iomode_sbfEz sat_sbfEY is_socket_sbfEx s_sbfEB
                        of
                        { (#,#) ipv_sbfF0 [Occ=Once] ipv1_sbfF1 [Occ=Once!] ->
                              case ipv1_sbfF1 of {
                                (,) ww1_sbfF3 [Occ=Once] ww2_sbfF4 [Occ=Once] ->
                                    $w$j_sbfEC ipv_sbfF0 ww1_sbfF3 ww2_sbfF4;
                              };
                        };
                  GHC.IO.Device.RegularFile ->
                      case
                          GHC.IO.FD.$wmkFD
                              fdint_sbfEv iomode_sbfEz GHC.Base.Nothing is_socket_sbfEx s_sbfEB
                      of
                      { (#,#) ipv_sbfF6 [Occ=Once] ipv1_sbfF7 [Occ=Once!] ->
                            case ipv1_sbfF7 of {
                              (,) ww1_sbfF9 [Occ=Once] ww2_sbfFa [Occ=Once] ->
                                  $w$j_sbfEC ipv_sbfF6 ww1_sbfF9 ww2_sbfFa;
                            };
                      };
                };
          };

GHC.IO.Handle.FD.fdToHandle'
  :: Foreign.C.Types.CInt
     -> GHC.Base.Maybe GHC.IO.Device.IODeviceType
     -> GHC.Types.Bool
     -> GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> GHC.Types.Bool
     -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId,
 Arity=7,
 Str=<L,U(U)><S,1*U><L,U><L,U><L,U><L,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.FD.fdToHandle'1
            eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.FD.fdToHandle4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "<file descriptor: "#;

GHC.IO.Handle.FD.fdToHandle3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ">"#;

GHC.IO.Handle.FD.fdToHandle2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.FD.fdToHandle3;

GHC.IO.Handle.FD.$wfdToHandle [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_sbfFb w_sbfFc]
        case System.Posix.Internals.$wfdGetMode ww_sbfFb w_sbfFc of {
          (#,#) ipv_sbfFe [Occ=Once] ipv1_sbfFf ->
              let {
                sat_sbfFg [Occ=Once] :: Foreign.C.Types.CInt
                [LclId] =
                    CCCS GHC.Int.I32#! [ww_sbfFb];
              } in 
                case
                    GHC.IO.FD.$wmkFD
                        sat_sbfFg ipv1_sbfFf GHC.Base.Nothing GHC.Types.False ipv_sbfFe
                of
                { (#,#) ipv2_sbfFi [Occ=Once] ipv3_sbfFj [Occ=Once!] ->
                      case ipv3_sbfFj of {
                        (,) fd_sbfFl fd_type_sbfFm [Occ=Once] ->
                            let {
                              sat_sbfFv [Occ=Once] :: GHC.IO.FilePath
                              [LclId] =
                                  [fd_sbfFl] \u []
                                      let {
                                        sat_sbfFu [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            [fd_sbfFl] \u []
                                                case fd_sbfFl of {
                                                  GHC.IO.FD.FD dt_sbfFo [Occ=Once] _ [Occ=Dead] ->
                                                      case
                                                          GHC.Show.$wshowSignedInt
                                                              0# dt_sbfFo GHC.Types.[]
                                                      of
                                                      { (#,#) ww5_sbfFr [Occ=Once]
                                                              ww6_sbfFs [Occ=Once] ->
                                                            let {
                                                              sat_sbfFt [Occ=Once]
                                                                :: [GHC.Types.Char]
                                                              [LclId] =
                                                                  CCCS :! [ww5_sbfFr ww6_sbfFs];
                                                            } in 
                                                              GHC.Base.++
                                                                  sat_sbfFt
                                                                  GHC.IO.Handle.FD.fdToHandle2;
                                                      };
                                                };
                                      } in 
                                        GHC.CString.unpackAppendCString#
                                            GHC.IO.Handle.FD.fdToHandle4 sat_sbfFu;
                            } in 
                              GHC.IO.Handle.FD.fdToHandle5
                                  fd_sbfFl
                                  fd_type_sbfFm
                                  sat_sbfFv
                                  ipv1_sbfFf
                                  GHC.Types.False
                                  GHC.Base.Nothing
                                  ipv2_sbfFi;
                      };
                };
        };

GHC.IO.Handle.FD.fdToHandle1 [InlPrag=NOUSERINLINE[0]]
  :: System.Posix.Internals.FD
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [w_sbfFw w1_sbfFx]
        case w_sbfFw of {
          GHC.Int.I32# ww1_sbfFz [Occ=Once] ->
              GHC.IO.Handle.FD.$wfdToHandle ww1_sbfFz w1_sbfFx;
        };

GHC.IO.Handle.FD.fdToHandle
  :: System.Posix.Internals.FD
     -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.FD.fdToHandle1 eta_B2 eta_B1;

GHC.IO.Handle.FD.openBinaryFile5
  :: GHC.Base.String
     -> GHC.IO.IOMode.IOMode
     -> GHC.Types.Bool
     -> GHC.Types.Bool
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId,
 Arity=5,
 Str=<L,U><L,U><L,1*U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [filepath_sbfFA
           iomode_sbfFB
           binary_sbfFC
           non_blocking_sbfFD
           s_sbfFE]
        case
            GHC.IO.FD.openFile1
                filepath_sbfFA iomode_sbfFB non_blocking_sbfFD s_sbfFE
        of
        { (#,#) ipv_sbfFG [Occ=Once*] ipv1_sbfFH [Occ=Once!] ->
              case ipv1_sbfFH of {
                (,) fd_sbfFJ fd_type_sbfFK [Occ=Once] ->
                    let-no-escape {
                      $j_sbfFL [Occ=Once*!T[2], Dmd=<L,1*C1(C1(U(U,U)))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 GHC.IO.Handle.Types.Handle #)
                      [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
                          sat-only [filepath_sbfFA
                                    iomode_sbfFB
                                    fd_sbfFJ
                                    fd_type_sbfFK] \r [ipv2_sbfFM ipv3_sbfFN]
                              let {
                                sat_sbfFX [Occ=Once]
                                  :: GHC.Exception.SomeException
                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           GHC.IO.Handle.Types.Handle #)
                                [LclId] =
                                    [fd_sbfFJ] \r [e_sbfFP s1_sbfFQ]
                                        case fd_sbfFJ of {
                                          GHC.IO.FD.FD ww1_sbfFS [Occ=Once] _ [Occ=Dead] ->
                                              case GHC.IO.FD.$w$cclose ww1_sbfFS s1_sbfFQ of {
                                                (#,#) ipv4_sbfFV [Occ=Once] _ [Occ=Dead] ->
                                                    raiseIO# [e_sbfFP ipv4_sbfFV];
                                              };
                                        }; } in
                              let {
                                sat_sbfFO [Occ=Once]
                                  :: GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           GHC.IO.Handle.Types.Handle #)
                                [LclId] =
                                    [filepath_sbfFA
                                     iomode_sbfFB
                                     fd_sbfFJ
                                     fd_type_sbfFK
                                     ipv3_sbfFN] \r [eta_B1]
                                        GHC.IO.Handle.FD.fdToHandle5
                                            fd_sbfFJ
                                            fd_type_sbfFK
                                            filepath_sbfFA
                                            iomode_sbfFB
                                            GHC.Types.False
                                            ipv3_sbfFN
                                            eta_B1;
                              } in  catch# [sat_sbfFO sat_sbfFX ipv2_sbfFM];
                    } in 
                      case binary_sbfFC of {
                        GHC.Types.False ->
                            case GHC.IO.Encoding.getLocaleEncoding1 of {
                              (,) getLocaleEncoding3_sbfG0 [Occ=Once] _ [Occ=Dead] ->
                                  case getLocaleEncoding3_sbfG0 ipv_sbfFG of {
                                    (#,#) ipv2_sbfG3 [Occ=Once] ipv3_sbfG4 [Occ=Once] ->
                                        let {
                                          sat_sbfG5 [Occ=Once]
                                            :: GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
                                          [LclId] =
                                              CCCS GHC.Base.Just! [ipv3_sbfG4];
                                        } in  $j_sbfFL ipv2_sbfG3 sat_sbfG5;
                                  };
                            };
                        GHC.Types.True -> $j_sbfFL ipv_sbfFG GHC.Base.Nothing;
                      };
              };
        };

GHC.IO.Handle.FD.openFile2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.FilePath
     -> GHC.IO.Exception.IOException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId,
 Arity=3,
 Str=<B,U><B,1*U(U,U,A,U,U,A)><B,U>x,
 Unf=OtherCon []] =
    [] \r [w_sbfG6 w1_sbfG7 w2_sbfG8]
        case w1_sbfG7 of {
          GHC.IO.Exception.IOError ww1_sbfGa [Occ=Once]
                                   ww2_sbfGb [Occ=Once]
                                   _ [Occ=Dead]
                                   ww4_sbfGd [Occ=Once]
                                   ww5_sbfGe [Occ=Once]
                                   _ [Occ=Dead] ->
              let {
                sat_sbfGi [Occ=Once] :: GHC.Exception.SomeException
                [LclId] =
                    [w_sbfG6 ww1_sbfGa ww2_sbfGb ww4_sbfGd ww5_sbfGe] \u []
                        let {
                          sat_sbfGg [Occ=Once] :: GHC.Base.Maybe GHC.IO.FilePath
                          [LclId] =
                              CCCS GHC.Base.Just! [w_sbfG6]; } in
                        let {
                          sat_sbfGh [Occ=Once] :: GHC.IO.Exception.IOException
                          [LclId] =
                              CCCS GHC.IO.Exception.IOError! [ww1_sbfGa
                                                              ww2_sbfGb
                                                              GHC.IO.Handle.FD.fdToHandle10
                                                              ww4_sbfGd
                                                              ww5_sbfGe
                                                              sat_sbfGg];
                        } in 
                          GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sbfGh;
              } in  raiseIO# [sat_sbfGi w2_sbfG8];
        };

GHC.IO.Handle.FD.openFile1
  :: GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [fp_sbfGj im_sbfGk eta_sbfGl]
        let {
          sat_sbfGv [Occ=Once]
            :: GHC.Exception.SomeException
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     GHC.IO.Handle.Types.Handle #)
          [LclId] =
              [fp_sbfGj] \r [e1_sbfGn]
                  case e1_sbfGn of wild_sbfGo {
                    GHC.Exception.SomeException $dException1_sbfGp [Occ=Once]
                                                e3_sbfGq [Occ=Once] ->
                        case GHC.Exception.$p1Exception $dException1_sbfGp of sat_sbfGr {
                          __DEFAULT ->
                              case
                                  Data.Typeable.Internal.sameTypeRep
                                      sat_sbfGr GHC.IO.Exception.$fExceptionIOException4
                              of
                              { GHC.Types.False ->
                                    let {
                                      sat_sbfGt [Occ=OnceT[0]]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                 GHC.IO.Handle.Types.Handle #)
                                      [LclId] =
                                          [wild_sbfGo] \r [eta_B1] raiseIO# [wild_sbfGo eta_B1];
                                    } in  sat_sbfGt;
                                GHC.Types.True -> GHC.IO.Handle.FD.openFile2 fp_sbfGj e3_sbfGq;
                              };
                        };
                  }; } in
        let {
          sat_sbfGm [Occ=Once]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     GHC.IO.Handle.Types.Handle #)
          [LclId] =
              [fp_sbfGj im_sbfGk] \r [eta_B1]
                  GHC.IO.Handle.FD.openBinaryFile5
                      fp_sbfGj im_sbfGk GHC.Types.False GHC.Types.True eta_B1;
        } in  catch# [sat_sbfGm sat_sbfGv eta_sbfGl];

GHC.IO.Handle.FD.openFile
  :: GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.FD.openFile1 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.FD.openFileBlocking1
  :: GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [fp_sbfGw im_sbfGx eta_sbfGy]
        let {
          sat_sbfGI [Occ=Once]
            :: GHC.Exception.SomeException
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     GHC.IO.Handle.Types.Handle #)
          [LclId] =
              [fp_sbfGw] \r [e1_sbfGA]
                  case e1_sbfGA of wild_sbfGB {
                    GHC.Exception.SomeException $dException1_sbfGC [Occ=Once]
                                                e3_sbfGD [Occ=Once] ->
                        case GHC.Exception.$p1Exception $dException1_sbfGC of sat_sbfGE {
                          __DEFAULT ->
                              case
                                  Data.Typeable.Internal.sameTypeRep
                                      sat_sbfGE GHC.IO.Exception.$fExceptionIOException4
                              of
                              { GHC.Types.False ->
                                    let {
                                      sat_sbfGG [Occ=OnceT[0]]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                 GHC.IO.Handle.Types.Handle #)
                                      [LclId] =
                                          [wild_sbfGB] \r [eta_B1] raiseIO# [wild_sbfGB eta_B1];
                                    } in  sat_sbfGG;
                                GHC.Types.True -> GHC.IO.Handle.FD.openFile2 fp_sbfGw e3_sbfGD;
                              };
                        };
                  }; } in
        let {
          sat_sbfGz [Occ=Once]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     GHC.IO.Handle.Types.Handle #)
          [LclId] =
              [fp_sbfGw im_sbfGx] \r [eta_B1]
                  GHC.IO.Handle.FD.openBinaryFile5
                      fp_sbfGw im_sbfGx GHC.Types.False GHC.Types.False eta_B1;
        } in  catch# [sat_sbfGz sat_sbfGI eta_sbfGy];

GHC.IO.Handle.FD.openFileBlocking
  :: GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.FD.openFileBlocking1 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.FD.openBinaryFile4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "openBinaryFile"#;

GHC.IO.Handle.FD.openBinaryFile3 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.FD.openBinaryFile4;

GHC.IO.Handle.FD.openBinaryFile2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.FilePath
     -> GHC.IO.Exception.IOException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId,
 Arity=3,
 Str=<B,U><B,1*U(U,U,A,U,U,A)><B,U>x,
 Unf=OtherCon []] =
    [] \r [w_sbfGJ w1_sbfGK w2_sbfGL]
        case w1_sbfGK of {
          GHC.IO.Exception.IOError ww1_sbfGN [Occ=Once]
                                   ww2_sbfGO [Occ=Once]
                                   _ [Occ=Dead]
                                   ww4_sbfGQ [Occ=Once]
                                   ww5_sbfGR [Occ=Once]
                                   _ [Occ=Dead] ->
              let {
                sat_sbfGV [Occ=Once] :: GHC.Exception.SomeException
                [LclId] =
                    [w_sbfGJ ww1_sbfGN ww2_sbfGO ww4_sbfGQ ww5_sbfGR] \u []
                        let {
                          sat_sbfGT [Occ=Once] :: GHC.Base.Maybe GHC.IO.FilePath
                          [LclId] =
                              CCCS GHC.Base.Just! [w_sbfGJ]; } in
                        let {
                          sat_sbfGU [Occ=Once] :: GHC.IO.Exception.IOException
                          [LclId] =
                              CCCS GHC.IO.Exception.IOError! [ww1_sbfGN
                                                              ww2_sbfGO
                                                              GHC.IO.Handle.FD.openBinaryFile3
                                                              ww4_sbfGQ
                                                              ww5_sbfGR
                                                              sat_sbfGT];
                        } in 
                          GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sbfGU;
              } in  raiseIO# [sat_sbfGV w2_sbfGL];
        };

GHC.IO.Handle.FD.openBinaryFile1
  :: GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [fp_sbfGW m_sbfGX eta_sbfGY]
        let {
          sat_sbfH8 [Occ=Once]
            :: GHC.Exception.SomeException
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     GHC.IO.Handle.Types.Handle #)
          [LclId] =
              [fp_sbfGW] \r [e1_sbfH0]
                  case e1_sbfH0 of wild_sbfH1 {
                    GHC.Exception.SomeException $dException1_sbfH2 [Occ=Once]
                                                e3_sbfH3 [Occ=Once] ->
                        case GHC.Exception.$p1Exception $dException1_sbfH2 of sat_sbfH4 {
                          __DEFAULT ->
                              case
                                  Data.Typeable.Internal.sameTypeRep
                                      sat_sbfH4 GHC.IO.Exception.$fExceptionIOException4
                              of
                              { GHC.Types.False ->
                                    let {
                                      sat_sbfH6 [Occ=OnceT[0]]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                 GHC.IO.Handle.Types.Handle #)
                                      [LclId] =
                                          [wild_sbfH1] \r [eta_B1] raiseIO# [wild_sbfH1 eta_B1];
                                    } in  sat_sbfH6;
                                GHC.Types.True ->
                                    GHC.IO.Handle.FD.openBinaryFile2 fp_sbfGW e3_sbfH3;
                              };
                        };
                  }; } in
        let {
          sat_sbfGZ [Occ=Once]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     GHC.IO.Handle.Types.Handle #)
          [LclId] =
              [fp_sbfGW m_sbfGX] \r [eta_B1]
                  GHC.IO.Handle.FD.openBinaryFile5
                      fp_sbfGW m_sbfGX GHC.Types.True GHC.Types.True eta_B1;
        } in  catch# [sat_sbfGZ sat_sbfH8 eta_sbfGY];

GHC.IO.Handle.FD.openBinaryFile
  :: GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.FD.openBinaryFile1 eta_B3 eta_B2 eta_B1;

$wstdHandleFinalizer_rbfCA
  :: GHC.IO.FilePath
     -> GHC.Prim.MVar# GHC.Prim.RealWorld GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,U><S,U><S,U>, Unf=OtherCon []] =
    sat-only [] \r [w_sbfH9 ww_sbfHa w1_sbfHb]
        case takeMVar# [ww_sbfHa w1_sbfHb] of {
          (#,#) ipv_sbfHd [Occ=Once] ipv1_sbfHe [Occ=Once!] ->
              case ipv1_sbfHe of {
                GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                             $dBufferedIO_sbfHh [Occ=Once]
                                             _ [Occ=Dead]
                                             ds_sbfHj [Occ=Once]
                                             ds2_sbfHk [Occ=Once!]
                                             dt_sbfHl
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             ds4_sbfHq [Occ=Once*!]
                                             ds5_sbfHr [Occ=Once!]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead] ->
                    case readMutVar# [dt_sbfHl ipv_sbfHd] of {
                      (#,#) ipv2_sbfHx [Occ=Once*] ipv3_sbfHy [Occ=Once!] ->
                          case ipv3_sbfHy of {
                            GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 ds11_sbfHC [Occ=Once!]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead] ->
                                let-no-escape {
                                  $w$j_sbfHG [InlPrag=NOUSERINLINE[0],
                                              Occ=Once*!T[1],
                                              Dmd=<L,1*C1(U(U,U))>]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                  [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                      sat-only [w_sbfH9
                                                ww_sbfHa
                                                ds2_sbfHk
                                                ds4_sbfHq
                                                ds5_sbfHr] \r [w2_sbfHH]
                                          case ds2_sbfHk of {
                                            __DEFAULT ->
                                                case ds5_sbfHr of {
                                                  GHC.Base.Nothing ->
                                                      case ds4_sbfHq of {
                                                        GHC.Base.Nothing ->
                                                            let {
                                                              sat_sbfHL [Occ=Once]
                                                                :: GHC.IO.Handle.Types.Handle__
                                                              [LclId] =
                                                                  [w_sbfH9] \u []
                                                                      GHC.IO.Handle.Internals.ioe_finalizedHandle
                                                                          w_sbfH9;
                                                            } in 
                                                              case
                                                                  putMVar# [ww_sbfHa
                                                                            sat_sbfHL
                                                                            w2_sbfHH]
                                                              of
                                                              s2#_sbfHM
                                                              { __DEFAULT ->
                                                                    (#,#) [s2#_sbfHM GHC.Tuple.()];
                                                              };
                                                        GHC.Base.Just d_sbfHN [Occ=Once!] ->
                                                            case d_sbfHN of {
                                                              GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                                _ [Occ=Dead]
                                                                                                ds14_sbfHR [Occ=Once]
                                                                                                _ [Occ=Dead]
                                                                                                _ [Occ=Dead] ->
                                                                  case ds14_sbfHR w2_sbfHH of {
                                                                    (#,#) ipv4_sbfHV [Occ=Once]
                                                                          _ [Occ=Dead] ->
                                                                        let {
                                                                          sat_sbfHX [Occ=Once]
                                                                            :: GHC.IO.Handle.Types.Handle__
                                                                          [LclId] =
                                                                              [w_sbfH9] \u []
                                                                                  GHC.IO.Handle.Internals.ioe_finalizedHandle
                                                                                      w_sbfH9;
                                                                        } in 
                                                                          case
                                                                              putMVar# [ww_sbfHa
                                                                                        sat_sbfHX
                                                                                        ipv4_sbfHV]
                                                                          of
                                                                          s2#_sbfHY
                                                                          { __DEFAULT ->
                                                                                (#,#) [s2#_sbfHY
                                                                                       GHC.Tuple.()];
                                                                          };
                                                                  };
                                                            };
                                                      };
                                                  GHC.Base.Just d_sbfHZ [Occ=Once!] ->
                                                      case d_sbfHZ of {
                                                        GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                          _ [Occ=Dead]
                                                                                          ds14_sbfI3 [Occ=Once]
                                                                                          _ [Occ=Dead]
                                                                                          _ [Occ=Dead] ->
                                                            case ds14_sbfI3 w2_sbfHH of {
                                                              (#,#) ipv4_sbfI7 [Occ=Once*]
                                                                    _ [Occ=Dead] ->
                                                                  case ds4_sbfHq of {
                                                                    GHC.Base.Nothing ->
                                                                        let {
                                                                          sat_sbfIa [Occ=Once]
                                                                            :: GHC.IO.Handle.Types.Handle__
                                                                          [LclId] =
                                                                              [w_sbfH9] \u []
                                                                                  GHC.IO.Handle.Internals.ioe_finalizedHandle
                                                                                      w_sbfH9;
                                                                        } in 
                                                                          case
                                                                              putMVar# [ww_sbfHa
                                                                                        sat_sbfIa
                                                                                        ipv4_sbfI7]
                                                                          of
                                                                          s2#_sbfIb
                                                                          { __DEFAULT ->
                                                                                (#,#) [s2#_sbfIb
                                                                                       GHC.Tuple.()];
                                                                          };
                                                                    GHC.Base.Just d1_sbfIc [Occ=Once!] ->
                                                                        case d1_sbfIc of {
                                                                          GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                                            _ [Occ=Dead]
                                                                                                            ds20_sbfIg [Occ=Once]
                                                                                                            _ [Occ=Dead]
                                                                                                            _ [Occ=Dead] ->
                                                                              case
                                                                                  ds20_sbfIg
                                                                                      ipv4_sbfI7
                                                                              of
                                                                              { (#,#) ipv6_sbfIk [Occ=Once]
                                                                                      _ [Occ=Dead] ->
                                                                                    let {
                                                                                      sat_sbfIm [Occ=Once]
                                                                                        :: GHC.IO.Handle.Types.Handle__
                                                                                      [LclId] =
                                                                                          [w_sbfH9] \u []
                                                                                              GHC.IO.Handle.Internals.ioe_finalizedHandle
                                                                                                  w_sbfH9;
                                                                                    } in 
                                                                                      case
                                                                                          putMVar# [ww_sbfHa
                                                                                                    sat_sbfIm
                                                                                                    ipv6_sbfIk]
                                                                                      of
                                                                                      s2#_sbfIn
                                                                                      { __DEFAULT ->
                                                                                            (#,#) [s2#_sbfIn
                                                                                                   GHC.Tuple.()];
                                                                                      };
                                                                              };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                            GHC.IO.Handle.Types.ClosedHandle ->
                                                let {
                                                  sat_sbfIo [Occ=Once]
                                                    :: GHC.IO.Handle.Types.Handle__
                                                  [LclId] =
                                                      [w_sbfH9] \u []
                                                          GHC.IO.Handle.Internals.ioe_finalizedHandle
                                                              w_sbfH9;
                                                } in 
                                                  case
                                                      putMVar# [ww_sbfHa sat_sbfIo w2_sbfHH]
                                                  of
                                                  s2#_sbfIp
                                                  { __DEFAULT -> (#,#) [s2#_sbfIp GHC.Tuple.()];
                                                  };
                                          };
                                } in 
                                  case ds11_sbfHC of {
                                    GHC.IO.Buffer.ReadBuffer -> $w$j_sbfHG ipv2_sbfHx;
                                    GHC.IO.Buffer.WriteBuffer ->
                                        case readMutVar# [dt_sbfHl ipv2_sbfHx] of {
                                          (#,#) ipv4_sbfIs [Occ=Once*] ipv5_sbfIt [Occ=Once!] ->
                                              case ipv5_sbfIt of wild3_sbfIu {
                                                GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     dt12_sbfIz [Occ=Once]
                                                                     dt13_sbfIA [Occ=Once] ->
                                                    case ==# [dt12_sbfIz dt13_sbfIA] of {
                                                      __DEFAULT ->
                                                          case
                                                              GHC.IO.BufferedIO.flushWriteBuffer
                                                                  $dBufferedIO_sbfHh
                                                                  ds_sbfHj
                                                                  wild3_sbfIu
                                                                  ipv4_sbfIs
                                                          of
                                                          { (#,#) ipv6_sbfID [Occ=Once]
                                                                  ipv7_sbfIE [Occ=Once] ->
                                                                case
                                                                    writeMutVar# [dt_sbfHl
                                                                                  ipv7_sbfIE
                                                                                  ipv6_sbfID]
                                                                of
                                                                s2#_sbfIF
                                                                { __DEFAULT -> $w$j_sbfHG s2#_sbfIF;
                                                                };
                                                          };
                                                      1# -> $w$j_sbfHG ipv4_sbfIs;
                                                    };
                                              };
                                        };
                                  };
                          };
                    };
              };
        };

stdHandleFinalizer_rbfCB
  :: GHC.IO.FilePath
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,U><S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [w_sbfIG w1_sbfIH w2_sbfII]
        case w1_sbfIH of {
          GHC.MVar.MVar ww1_sbfIK [Occ=Once] ->
              $wstdHandleFinalizer_rbfCA w_sbfIG ww1_sbfIK w2_sbfII;
        };

lvl6_rbfCC :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "<stderr>"#;

lvl7_rbfCD :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl6_rbfCC;

lvl8_rbfCE
  :: GHC.Base.Maybe
       (GHC.IO.FilePath
        -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ())
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [stdHandleFinalizer_rbfCB];

lvl9_rbfCF
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [s_sbfIL]
        case noDuplicate# [s_sbfIL] of s'_sbfIM {
          __DEFAULT ->
              case GHC.IO.Encoding.getLocaleEncoding1 of {
                (,) getLocaleEncoding3_sbfIO [Occ=Once] _ [Occ=Dead] ->
                    case getLocaleEncoding3_sbfIO s'_sbfIM of {
                      (#,#) ipv_sbfIR [Occ=Once] ipv1_sbfIS [Occ=Once] ->
                          let {
                            sat_sbfIT [Occ=Once]
                              :: GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
                            [LclId] =
                                CCCS GHC.Base.Just! [ipv1_sbfIS];
                          } in 
                            GHC.IO.Handle.Internals.mkDuplexHandle5
                                GHC.IO.FD.$fIODeviceFD
                                GHC.IO.FD.$fBufferedIOFD
                                GHC.IO.Handle.FD.fdToHandle12
                                GHC.IO.FD.stderr
                                lvl7_rbfCD
                                GHC.IO.Handle.Types.WriteHandle
                                GHC.Types.False
                                sat_sbfIT
                                GHC.IO.Handle.Types.nativeNewlineMode
                                lvl8_rbfCE
                                GHC.Base.Nothing
                                ipv_sbfIR;
                    };
              };
        };

GHC.IO.Handle.FD.stderr [InlPrag=NOINLINE]
  :: GHC.IO.Handle.Types.Handle
[GblId] =
    [] \u []
        case lvl9_rbfCF GHC.Prim.realWorld# of {
          (#,#) _ [Occ=Dead] ipv1_sbfIW [Occ=Once] -> ipv1_sbfIW;
        };

lvl10_rbfCG :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "<stdout>"#;

lvl11_rbfCH :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl10_rbfCG;

lvl12_rbfCI
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [s_sbfIX]
        case noDuplicate# [s_sbfIX] of s'_sbfIY {
          __DEFAULT ->
              case GHC.IO.Encoding.getLocaleEncoding1 of {
                (,) getLocaleEncoding3_sbfJ0 [Occ=Once] _ [Occ=Dead] ->
                    case getLocaleEncoding3_sbfJ0 s'_sbfIY of {
                      (#,#) ipv_sbfJ3 [Occ=Once] ipv1_sbfJ4 [Occ=Once] ->
                          let {
                            sat_sbfJ5 [Occ=Once]
                              :: GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
                            [LclId] =
                                CCCS GHC.Base.Just! [ipv1_sbfJ4];
                          } in 
                            GHC.IO.Handle.Internals.mkDuplexHandle5
                                GHC.IO.FD.$fIODeviceFD
                                GHC.IO.FD.$fBufferedIOFD
                                GHC.IO.Handle.FD.fdToHandle12
                                GHC.IO.FD.stdout
                                lvl11_rbfCH
                                GHC.IO.Handle.Types.WriteHandle
                                GHC.Types.True
                                sat_sbfJ5
                                GHC.IO.Handle.Types.nativeNewlineMode
                                lvl8_rbfCE
                                GHC.Base.Nothing
                                ipv_sbfJ3;
                    };
              };
        };

GHC.IO.Handle.FD.stdout [InlPrag=NOINLINE]
  :: GHC.IO.Handle.Types.Handle
[GblId] =
    [] \u []
        case lvl12_rbfCI GHC.Prim.realWorld# of {
          (#,#) _ [Occ=Dead] ipv1_sbfJ8 [Occ=Once] -> ipv1_sbfJ8;
        };

lvl13_rbfCJ :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "<stdin>"#;

lvl14_rbfCK :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl13_rbfCJ;

lvl15_rbfCL
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [s_sbfJ9]
        case noDuplicate# [s_sbfJ9] of s'_sbfJa {
          __DEFAULT ->
              case GHC.IO.Encoding.getLocaleEncoding1 of {
                (,) getLocaleEncoding3_sbfJc [Occ=Once] _ [Occ=Dead] ->
                    case getLocaleEncoding3_sbfJc s'_sbfJa of {
                      (#,#) ipv_sbfJf [Occ=Once] ipv1_sbfJg [Occ=Once] ->
                          let {
                            sat_sbfJh [Occ=Once]
                              :: GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
                            [LclId] =
                                CCCS GHC.Base.Just! [ipv1_sbfJg];
                          } in 
                            GHC.IO.Handle.Internals.mkDuplexHandle5
                                GHC.IO.FD.$fIODeviceFD
                                GHC.IO.FD.$fBufferedIOFD
                                GHC.IO.Handle.FD.fdToHandle12
                                GHC.IO.FD.stdin
                                lvl14_rbfCK
                                GHC.IO.Handle.Types.ReadHandle
                                GHC.Types.True
                                sat_sbfJh
                                GHC.IO.Handle.Types.nativeNewlineMode
                                lvl8_rbfCE
                                GHC.Base.Nothing
                                ipv_sbfJf;
                    };
              };
        };

GHC.IO.Handle.FD.stdin [InlPrag=NOINLINE]
  :: GHC.IO.Handle.Types.Handle
[GblId] =
    [] \u []
        case lvl15_rbfCL GHC.Prim.realWorld# of {
          (#,#) _ [Occ=Dead] ipv1_sbfJk [Occ=Once] -> ipv1_sbfJk;
        };


==================== STG syntax: ====================
2018-03-16 16:06:11.933115009 UTC

GHC.IO.Handle.FD.fdToHandle12
  :: Data.Typeable.Internal.TypeRep GHC.IO.FD.FD
[GblId] =
    [] \u []
        case
            Data.Typeable.Internal.$wmkTrCon
                10838815552519039062##
                15546290101957756376##
                GHC.IO.FD.$trModule
                GHC.IO.FD.$tcFD1
                0#
                GHC.Types.krep$*
                GHC.Types.[]
        of
        { (#,,,,#) ww8_sbfCO [Occ=Once]
                   ww9_sbfCP [Occ=Once]
                   ww10_sbfCQ [Occ=Once]
                   ww11_sbfCR [Occ=Once]
                   ww12_sbfCS [Occ=Once] ->
              Data.Typeable.Internal.TrTyCon [ww8_sbfCO
                                              ww9_sbfCP
                                              ww10_sbfCQ
                                              ww11_sbfCR
                                              ww12_sbfCS];
        };

GHC.IO.Handle.FD.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.Handle.FD.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.FD.$trModule4];

GHC.IO.Handle.FD.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Handle.FD"#;

GHC.IO.Handle.FD.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.FD.$trModule2];

GHC.IO.Handle.FD.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Handle.FD.$trModule3
                                     GHC.IO.Handle.FD.$trModule1];

lvl_rbfCu :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "handleToFd"#;

lvl1_rbfCv :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl_rbfCu;

lvl2_rbfCw :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "not a file descriptor"#;

lvl3_rbfCx :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl2_rbfCw;

GHC.IO.Handle.FD.handleToFd3
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.IO.FD.FD #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    [] \r [h_sbfCT void_0E]
        let {
          sat_sbfCX [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [h_sbfCT] \u []
                  let {
                    sat_sbfCV [Occ=Once] :: GHC.Base.Maybe GHC.IO.Handle.Types.Handle
                    [LclId] =
                        CCCS GHC.Base.Just! [h_sbfCT]; } in
                  let {
                    sat_sbfCW [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        CCCS GHC.IO.Exception.IOError! [sat_sbfCV
                                                        GHC.IO.Exception.InappropriateType
                                                        lvl1_rbfCv
                                                        lvl3_rbfCx
                                                        GHC.Base.Nothing
                                                        GHC.Base.Nothing];
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sbfCW;
        } in  raiseIO# [sat_sbfCX GHC.Prim.void#];

lvl4_rbfCy :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "not a file handle"#;

lvl5_rbfCz :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl4_rbfCy;

GHC.IO.Handle.FD.handleToFd2
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.IO.FD.FD #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    [] \r [h_sbfCY void_0E]
        let {
          sat_sbfD2 [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [h_sbfCY] \u []
                  let {
                    sat_sbfD0 [Occ=Once] :: GHC.Base.Maybe GHC.IO.Handle.Types.Handle
                    [LclId] =
                        CCCS GHC.Base.Just! [h_sbfCY]; } in
                  let {
                    sat_sbfD1 [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        CCCS GHC.IO.Exception.IOError! [sat_sbfD0
                                                        GHC.IO.Exception.InappropriateType
                                                        lvl1_rbfCv
                                                        lvl5_rbfCz
                                                        GHC.Base.Nothing
                                                        GHC.Base.Nothing];
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sbfD1;
        } in  raiseIO# [sat_sbfD2 GHC.Prim.void#];

GHC.IO.Handle.FD.handleToFd1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.IO.FD.FD #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h_sbfD3 void_0E]
        case h_sbfD3 of wild_sbfD5 {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbfD7 [Occ=Once] ->
              case readMVar# [dt_sbfD7 GHC.Prim.void#] of {
                Unit# ipv1_sbfDa [Occ=Once!] ->
                    case ipv1_sbfDa of {
                      GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   $dTypeable_sbfDe [Occ=Once]
                                                   ds2_sbfDf [Occ=Once]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead] ->
                          case
                              Data.Typeable.Internal.sameTypeRep
                                  $dTypeable_sbfDe GHC.IO.Handle.FD.fdToHandle12
                          of
                          { GHC.Types.False ->
                                GHC.IO.Handle.FD.handleToFd3 wild_sbfD5 GHC.Prim.void#;
                            GHC.Types.True -> Unit# [ds2_sbfDf];
                          };
                    };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              GHC.IO.Handle.FD.handleToFd2 wild_sbfD5 GHC.Prim.void#;
        };

GHC.IO.Handle.FD.handleToFd
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.IO.FD.FD
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.FD.handleToFd1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.FD.fdToHandle11 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "openFile"#;

GHC.IO.Handle.FD.fdToHandle10 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.FD.fdToHandle11;

GHC.IO.Handle.FD.fdToHandle9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "is a directory"#;

GHC.IO.Handle.FD.fdToHandle8 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.FD.fdToHandle9;

GHC.IO.Handle.FD.fdToHandle7 :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.InappropriateType
                                             GHC.IO.Handle.FD.fdToHandle10
                                             GHC.IO.Handle.FD.fdToHandle8
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Handle.FD.fdToHandle6 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Handle.FD.fdToHandle7;

GHC.IO.Handle.FD.fdToHandle5
  :: GHC.IO.FD.FD
     -> GHC.IO.Device.IODeviceType
     -> GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> GHC.Types.Bool
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId,
 Arity=7,
 Str=<L,U(U,U)><L,1*U><L,U><L,U><S,1*U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [fd0_sbfDw
           fd_type_sbfDx
           filepath_sbfDy
           iomode_sbfDz
           set_non_blocking_sbfDA
           mb_codec_sbfDB
           void_0E]
        let-no-escape {
          $j_sbfDD [Occ=Once*!T[2], Dmd=<L,1*C1(C1(U(U,U)))>]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> GHC.IO.FD.FD
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     GHC.IO.Handle.Types.Handle #)
          [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
              sat-only [fd_type_sbfDx
                        filepath_sbfDy
                        iomode_sbfDz
                        mb_codec_sbfDB] \r [void_0E ipv1_sbfDF]
                  let {
                    nl_sbfDG [Dmd=<L,U(U,U)>] :: GHC.IO.Handle.Types.NewlineMode
                    [LclId] =
                        [mb_codec_sbfDB] \u []
                            case mb_codec_sbfDB of {
                              __DEFAULT -> GHC.IO.Handle.Types.nativeNewlineMode;
                            };
                  } in 
                    let-no-escape {
                      fail_sbfDI [Occ=Once*!T[1], Dmd=<L,1*C1(U(U,U))>]
                        :: GHC.Prim.Void#
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 GHC.IO.Handle.Types.Handle #)
                      [LclId[JoinId(1)], Arity=1, Str=<L,A>, Unf=OtherCon []] =
                          sat-only [filepath_sbfDy
                                    iomode_sbfDz
                                    mb_codec_sbfDB
                                    ipv1_sbfDF
                                    nl_sbfDG] \r [void_0E]
                              let {
                                sat_sbfDL [Occ=Once] :: GHC.IO.Handle.Types.HandleType
                                [LclId] =
                                    [iomode_sbfDz] \u []
                                        case iomode_sbfDz of {
                                          GHC.IO.IOMode.ReadMode ->
                                              GHC.IO.Handle.Types.ReadHandle [];
                                          GHC.IO.IOMode.WriteMode ->
                                              GHC.IO.Handle.Types.WriteHandle [];
                                          GHC.IO.IOMode.AppendMode ->
                                              GHC.IO.Handle.Types.AppendHandle [];
                                          GHC.IO.IOMode.ReadWriteMode ->
                                              GHC.IO.Handle.Types.ReadWriteHandle [];
                                        };
                              } in 
                                GHC.IO.Handle.Internals.mkDuplexHandle5
                                    GHC.IO.FD.$fIODeviceFD
                                    GHC.IO.FD.$fBufferedIOFD
                                    GHC.IO.Handle.FD.fdToHandle12
                                    ipv1_sbfDF
                                    filepath_sbfDy
                                    sat_sbfDL
                                    GHC.Types.True
                                    mb_codec_sbfDB
                                    nl_sbfDG
                                    GHC.IO.Handle.Internals.mkDuplexHandle4
                                    GHC.Base.Nothing
                                    GHC.Prim.void#;
                    } in 
                      case fd_type_sbfDx of {
                        __DEFAULT -> fail_sbfDI GHC.Prim.void#;
                        GHC.IO.Device.Directory ->
                            raiseIO# [GHC.IO.Handle.FD.fdToHandle6 GHC.Prim.void#];
                        GHC.IO.Device.Stream ->
                            case iomode_sbfDz of {
                              __DEFAULT -> fail_sbfDI GHC.Prim.void#;
                              GHC.IO.IOMode.ReadWriteMode ->
                                  GHC.IO.Handle.Internals.mkDuplexHandle1
                                      GHC.IO.FD.$fIODeviceFD
                                      GHC.IO.FD.$fBufferedIOFD
                                      GHC.IO.Handle.FD.fdToHandle12
                                      ipv1_sbfDF
                                      filepath_sbfDy
                                      mb_codec_sbfDB
                                      nl_sbfDG
                                      GHC.Prim.void#;
                            };
                      };
        } in 
          case set_non_blocking_sbfDA of {
            GHC.Types.False -> $j_sbfDD GHC.Prim.void# fd0_sbfDw;
            GHC.Types.True ->
                case fd0_sbfDw of {
                  GHC.IO.FD.FD dt_sbfDQ _ [Occ=Dead] ->
                      case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
                        Unit# ds1_sbfDV [Occ=Once] ->
                            let {
                              sat_sbfE4 [Occ=Once] :: GHC.Types.IO Foreign.C.Types.CInt
                              [LclId] =
                                  [dt_sbfDQ ds1_sbfDV] \r [void_0E]
                                      case narrow32Int# [ds1_sbfDV] of sat_sbfDY {
                                        __DEFAULT ->
                                            case
                                                __pkg_ccall base-4.11.0.0 [dt_sbfDQ
                                                                           sat_sbfDY
                                                                           GHC.Prim.void#]
                                            of
                                            { Unit# ds4_sbfE1 [Occ=Once] ->
                                                  case narrow32Int# [ds4_sbfE1] of sat_sbfE2 {
                                                    __DEFAULT ->
                                                        let {
                                                          sat_sbfE3 [Occ=Once] :: GHC.Int.Int32
                                                          [LclId] =
                                                              CCCS GHC.Int.I32#! [sat_sbfE2];
                                                        } in  Unit# [sat_sbfE3];
                                                  };
                                            };
                                      };
                            } in 
                              case
                                  Foreign.C.Error.throwErrnoIfMinus1Retry2
                                      System.Posix.Internals.fdFileSize_pred
                                      System.Posix.Internals.setNonBlockingFD3
                                      sat_sbfE4
                                      GHC.Prim.void#
                              of
                              { Unit# ipv1_sbfE7 [Occ=Once] ->
                                    case ipv1_sbfE7 of {
                                      GHC.Int.I32# x_sbfE9 ->
                                          case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
                                            Unit# ds4_sbfEd [Occ=Once] ->
                                                case narrow32Int# [ds4_sbfEd] of sat_sbfEg {
                                                  __DEFAULT ->
                                                      case int2Word# [sat_sbfEg] of sat_sbfEh {
                                                        __DEFAULT ->
                                                            case int2Word# [x_sbfE9] of sat_sbfEf {
                                                              __DEFAULT ->
                                                                  case
                                                                      or# [sat_sbfEf sat_sbfEh]
                                                                  of
                                                                  sat_sbfEi
                                                                  { __DEFAULT ->
                                                                        case
                                                                            word2Int# [sat_sbfEi]
                                                                        of
                                                                        y_sbfEe [Dmd=<S,U>]
                                                                        { __DEFAULT ->
                                                                              case
                                                                                  /=# [x_sbfE9
                                                                                       y_sbfEe]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_sbfEk [Occ=Once]
                                                                                        :: GHC.IO.FD.FD
                                                                                      [LclId] =
                                                                                          CCCS GHC.IO.FD.FD! [dt_sbfDQ
                                                                                                              1#];
                                                                                    } in 
                                                                                      $j_sbfDD
                                                                                          GHC.Prim.void#
                                                                                          sat_sbfEk;
                                                                                1# ->
                                                                                    case
                                                                                        __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#]
                                                                                    of
                                                                                    { Unit# ds6_sbfEo [Occ=Once] ->
                                                                                          case
                                                                                              narrow32Int# [ds6_sbfEo]
                                                                                          of
                                                                                          sat_sbfEq
                                                                                          { __DEFAULT ->
                                                                                                case
                                                                                                    __pkg_ccall base-4.11.0.0 [dt_sbfDQ
                                                                                                                               sat_sbfEq
                                                                                                                               y_sbfEe
                                                                                                                               GHC.Prim.void#]
                                                                                                of
                                                                                                { Unit# _ [Occ=Dead] ->
                                                                                                      let {
                                                                                                        sat_sbfEu [Occ=Once]
                                                                                                          :: GHC.IO.FD.FD
                                                                                                        [LclId] =
                                                                                                            CCCS GHC.IO.FD.FD! [dt_sbfDQ
                                                                                                                                1#];
                                                                                                      } in 
                                                                                                        $j_sbfDD
                                                                                                            GHC.Prim.void#
                                                                                                            sat_sbfEu;
                                                                                                };
                                                                                          };
                                                                                    };
                                                                              };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                      };
                };
          };

GHC.IO.Handle.FD.mkHandleFromFD
  :: GHC.IO.FD.FD
     -> GHC.IO.Device.IODeviceType
     -> GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> GHC.Types.Bool
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId,
 Arity=7,
 Str=<L,U(U,U)><L,1*U><L,U><L,U><S,1*U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.FD.fdToHandle5
            eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.FD.fdToHandle'2 :: GHC.Word.Word64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W64#! [0##];

GHC.IO.Handle.FD.fdToHandle'1
  :: Foreign.C.Types.CInt
     -> GHC.Base.Maybe GHC.IO.Device.IODeviceType
     -> GHC.Types.Bool
     -> GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> GHC.Types.Bool
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId,
 Arity=7,
 Str=<L,U(U)><S,1*U><L,U><L,U><L,U><L,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [fdint_sbfEv
           mb_type_sbfEw
           is_socket_sbfEx
           filepath_sbfEy
           iomode_sbfEz
           binary_sbfEA
           void_0E]
        let-no-escape {
          $w$j_sbfEC [InlPrag=NOUSERINLINE[0],
                      Occ=Once*!T[3],
                      Dmd=<L,1*C1(C1(C1(U(U,U))))>]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> GHC.IO.FD.FD
               -> GHC.IO.Device.IODeviceType
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     GHC.IO.Handle.Types.Handle #)
          [LclId[JoinId(3)],
           Arity=3,
           Str=<S,U><L,U(U,U)><L,1*U>,
           Unf=OtherCon []] =
              sat-only [is_socket_sbfEx
                        filepath_sbfEy
                        iomode_sbfEz
                        binary_sbfEA] \r [void_0E ww_sbfEE ww1_sbfEF]
                  case binary_sbfEA of {
                    GHC.Types.False ->
                        case GHC.IO.Encoding.getLocaleEncoding1 of {
                          (,) getLocaleEncoding3_sbfEI [Occ=Once] _ [Occ=Dead] ->
                              case getLocaleEncoding3_sbfEI GHC.Prim.void# of {
                                Unit# ipv1_sbfEM [Occ=Once] ->
                                    let {
                                      sat_sbfEN [Occ=Once]
                                        :: GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
                                      [LclId] =
                                          CCCS GHC.Base.Just! [ipv1_sbfEM];
                                    } in 
                                      GHC.IO.Handle.FD.fdToHandle5
                                          ww_sbfEE
                                          ww1_sbfEF
                                          filepath_sbfEy
                                          iomode_sbfEz
                                          is_socket_sbfEx
                                          sat_sbfEN
                                          GHC.Prim.void#;
                              };
                        };
                    GHC.Types.True ->
                        GHC.IO.Handle.FD.fdToHandle5
                            ww_sbfEE
                            ww1_sbfEF
                            filepath_sbfEy
                            iomode_sbfEz
                            is_socket_sbfEx
                            GHC.Base.Nothing
                            GHC.Prim.void#;
                  };
        } in 
          case mb_type_sbfEw of {
            GHC.Base.Nothing ->
                case
                    GHC.IO.FD.$wmkFD
                        fdint_sbfEv
                        iomode_sbfEz
                        GHC.Base.Nothing
                        is_socket_sbfEx
                        GHC.Prim.void#
                of
                { Unit# ipv1_sbfER [Occ=Once!] ->
                      case ipv1_sbfER of {
                        (,) ww1_sbfET [Occ=Once] ww2_sbfEU [Occ=Once] ->
                            $w$j_sbfEC GHC.Prim.void# ww1_sbfET ww2_sbfEU;
                      };
                };
            GHC.Base.Just ds_sbfEV [Occ=Once!] ->
                case ds_sbfEV of wild1_sbfEW {
                  __DEFAULT ->
                      let {
                        sat_sbfEX [Occ=Once]
                          :: (GHC.IO.Device.IODeviceType, System.Posix.Types.CDev,
                              System.Posix.Types.CIno)
                        [LclId] =
                            CCCS (,,)! [wild1_sbfEW
                                        GHC.IO.Handle.FD.fdToHandle'2
                                        GHC.IO.Handle.FD.fdToHandle'2]; } in
                      let {
                        sat_sbfEY [Occ=Once]
                          :: GHC.Base.Maybe
                               (GHC.IO.Device.IODeviceType, System.Posix.Types.CDev,
                                System.Posix.Types.CIno)
                        [LclId] =
                            CCCS GHC.Base.Just! [sat_sbfEX];
                      } in 
                        case
                            GHC.IO.FD.$wmkFD
                                fdint_sbfEv iomode_sbfEz sat_sbfEY is_socket_sbfEx GHC.Prim.void#
                        of
                        { Unit# ipv1_sbfF1 [Occ=Once!] ->
                              case ipv1_sbfF1 of {
                                (,) ww1_sbfF3 [Occ=Once] ww2_sbfF4 [Occ=Once] ->
                                    $w$j_sbfEC GHC.Prim.void# ww1_sbfF3 ww2_sbfF4;
                              };
                        };
                  GHC.IO.Device.RegularFile ->
                      case
                          GHC.IO.FD.$wmkFD
                              fdint_sbfEv
                              iomode_sbfEz
                              GHC.Base.Nothing
                              is_socket_sbfEx
                              GHC.Prim.void#
                      of
                      { Unit# ipv1_sbfF7 [Occ=Once!] ->
                            case ipv1_sbfF7 of {
                              (,) ww1_sbfF9 [Occ=Once] ww2_sbfFa [Occ=Once] ->
                                  $w$j_sbfEC GHC.Prim.void# ww1_sbfF9 ww2_sbfFa;
                            };
                      };
                };
          };

GHC.IO.Handle.FD.fdToHandle'
  :: Foreign.C.Types.CInt
     -> GHC.Base.Maybe GHC.IO.Device.IODeviceType
     -> GHC.Types.Bool
     -> GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> GHC.Types.Bool
     -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId,
 Arity=7,
 Str=<L,U(U)><S,1*U><L,U><L,U><L,U><L,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.FD.fdToHandle'1
            eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.FD.fdToHandle4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "<file descriptor: "#;

GHC.IO.Handle.FD.fdToHandle3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ">"#;

GHC.IO.Handle.FD.fdToHandle2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.FD.fdToHandle3;

GHC.IO.Handle.FD.$wfdToHandle [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_sbfFb void_0E]
        case
            System.Posix.Internals.$wfdGetMode ww_sbfFb GHC.Prim.void#
        of
        { Unit# ipv1_sbfFf ->
              let {
                sat_sbfFg [Occ=Once] :: Foreign.C.Types.CInt
                [LclId] =
                    CCCS GHC.Int.I32#! [ww_sbfFb];
              } in 
                case
                    GHC.IO.FD.$wmkFD
                        sat_sbfFg
                        ipv1_sbfFf
                        GHC.Base.Nothing
                        GHC.Types.False
                        GHC.Prim.void#
                of
                { Unit# ipv3_sbfFj [Occ=Once!] ->
                      case ipv3_sbfFj of {
                        (,) fd_sbfFl fd_type_sbfFm [Occ=Once] ->
                            let {
                              sat_sbfFv [Occ=Once] :: GHC.IO.FilePath
                              [LclId] =
                                  [fd_sbfFl] \u []
                                      let {
                                        sat_sbfFu [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            [fd_sbfFl] \u []
                                                case fd_sbfFl of {
                                                  GHC.IO.FD.FD dt_sbfFo [Occ=Once] _ [Occ=Dead] ->
                                                      case
                                                          GHC.Show.$wshowSignedInt
                                                              0# dt_sbfFo GHC.Types.[]
                                                      of
                                                      { (#,#) ww5_sbfFr [Occ=Once]
                                                              ww6_sbfFs [Occ=Once] ->
                                                            let {
                                                              sat_sbfFt [Occ=Once]
                                                                :: [GHC.Types.Char]
                                                              [LclId] =
                                                                  CCCS :! [ww5_sbfFr ww6_sbfFs];
                                                            } in 
                                                              GHC.Base.++
                                                                  sat_sbfFt
                                                                  GHC.IO.Handle.FD.fdToHandle2;
                                                      };
                                                };
                                      } in 
                                        GHC.CString.unpackAppendCString#
                                            GHC.IO.Handle.FD.fdToHandle4 sat_sbfFu;
                            } in 
                              GHC.IO.Handle.FD.fdToHandle5
                                  fd_sbfFl
                                  fd_type_sbfFm
                                  sat_sbfFv
                                  ipv1_sbfFf
                                  GHC.Types.False
                                  GHC.Base.Nothing
                                  GHC.Prim.void#;
                      };
                };
        };

GHC.IO.Handle.FD.fdToHandle1 [InlPrag=NOUSERINLINE[0]]
  :: System.Posix.Internals.FD
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [w_sbfFw void_0E]
        case w_sbfFw of {
          GHC.Int.I32# ww1_sbfFz [Occ=Once] ->
              GHC.IO.Handle.FD.$wfdToHandle ww1_sbfFz GHC.Prim.void#;
        };

GHC.IO.Handle.FD.fdToHandle
  :: System.Posix.Internals.FD
     -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.FD.fdToHandle1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.FD.openBinaryFile5
  :: GHC.Base.String
     -> GHC.IO.IOMode.IOMode
     -> GHC.Types.Bool
     -> GHC.Types.Bool
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId,
 Arity=5,
 Str=<L,U><L,U><L,1*U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [filepath_sbfFA
           iomode_sbfFB
           binary_sbfFC
           non_blocking_sbfFD
           void_0E]
        case
            GHC.IO.FD.openFile1
                filepath_sbfFA iomode_sbfFB non_blocking_sbfFD GHC.Prim.void#
        of
        { Unit# ipv1_sbfFH [Occ=Once!] ->
              case ipv1_sbfFH of {
                (,) fd_sbfFJ fd_type_sbfFK [Occ=Once] ->
                    let-no-escape {
                      $j_sbfFL [Occ=Once*!T[2], Dmd=<L,1*C1(C1(U(U,U)))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 GHC.IO.Handle.Types.Handle #)
                      [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
                          sat-only [filepath_sbfFA
                                    iomode_sbfFB
                                    fd_sbfFJ
                                    fd_type_sbfFK] \r [void_0E ipv3_sbfFN]
                              let {
                                sat_sbfFX [Occ=Once]
                                  :: GHC.Exception.SomeException
                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           GHC.IO.Handle.Types.Handle #)
                                [LclId] =
                                    [fd_sbfFJ] \r [e_sbfFP void_0E]
                                        case fd_sbfFJ of {
                                          GHC.IO.FD.FD ww1_sbfFS [Occ=Once] _ [Occ=Dead] ->
                                              case GHC.IO.FD.$w$cclose ww1_sbfFS GHC.Prim.void# of {
                                                Unit# _ [Occ=Dead] ->
                                                    raiseIO# [e_sbfFP GHC.Prim.void#];
                                              };
                                        }; } in
                              let {
                                sat_sbfFO [Occ=Once]
                                  :: GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           GHC.IO.Handle.Types.Handle #)
                                [LclId] =
                                    [filepath_sbfFA
                                     iomode_sbfFB
                                     fd_sbfFJ
                                     fd_type_sbfFK
                                     ipv3_sbfFN] \r [void_0E]
                                        GHC.IO.Handle.FD.fdToHandle5
                                            fd_sbfFJ
                                            fd_type_sbfFK
                                            filepath_sbfFA
                                            iomode_sbfFB
                                            GHC.Types.False
                                            ipv3_sbfFN
                                            GHC.Prim.void#;
                              } in  catch# [sat_sbfFO sat_sbfFX GHC.Prim.void#];
                    } in 
                      case binary_sbfFC of {
                        GHC.Types.False ->
                            case GHC.IO.Encoding.getLocaleEncoding1 of {
                              (,) getLocaleEncoding3_sbfG0 [Occ=Once] _ [Occ=Dead] ->
                                  case getLocaleEncoding3_sbfG0 GHC.Prim.void# of {
                                    Unit# ipv3_sbfG4 [Occ=Once] ->
                                        let {
                                          sat_sbfG5 [Occ=Once]
                                            :: GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
                                          [LclId] =
                                              CCCS GHC.Base.Just! [ipv3_sbfG4];
                                        } in  $j_sbfFL GHC.Prim.void# sat_sbfG5;
                                  };
                            };
                        GHC.Types.True -> $j_sbfFL GHC.Prim.void# GHC.Base.Nothing;
                      };
              };
        };

GHC.IO.Handle.FD.openFile2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.FilePath
     -> GHC.IO.Exception.IOException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId,
 Arity=3,
 Str=<B,U><B,1*U(U,U,A,U,U,A)><B,U>x,
 Unf=OtherCon []] =
    [] \r [w_sbfG6 w1_sbfG7 void_0E]
        case w1_sbfG7 of {
          GHC.IO.Exception.IOError ww1_sbfGa [Occ=Once]
                                   ww2_sbfGb [Occ=Once]
                                   _ [Occ=Dead]
                                   ww4_sbfGd [Occ=Once]
                                   ww5_sbfGe [Occ=Once]
                                   _ [Occ=Dead] ->
              let {
                sat_sbfGi [Occ=Once] :: GHC.Exception.SomeException
                [LclId] =
                    [w_sbfG6 ww1_sbfGa ww2_sbfGb ww4_sbfGd ww5_sbfGe] \u []
                        let {
                          sat_sbfGg [Occ=Once] :: GHC.Base.Maybe GHC.IO.FilePath
                          [LclId] =
                              CCCS GHC.Base.Just! [w_sbfG6]; } in
                        let {
                          sat_sbfGh [Occ=Once] :: GHC.IO.Exception.IOException
                          [LclId] =
                              CCCS GHC.IO.Exception.IOError! [ww1_sbfGa
                                                              ww2_sbfGb
                                                              GHC.IO.Handle.FD.fdToHandle10
                                                              ww4_sbfGd
                                                              ww5_sbfGe
                                                              sat_sbfGg];
                        } in 
                          GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sbfGh;
              } in  raiseIO# [sat_sbfGi GHC.Prim.void#];
        };

GHC.IO.Handle.FD.openFile1
  :: GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [fp_sbfGj im_sbfGk void_0E]
        let {
          sat_sbfGv [Occ=Once]
            :: GHC.Exception.SomeException
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     GHC.IO.Handle.Types.Handle #)
          [LclId] =
              [fp_sbfGj] \r [e1_sbfGn]
                  case e1_sbfGn of wild_sbfGo {
                    GHC.Exception.SomeException $dException1_sbfGp [Occ=Once]
                                                e3_sbfGq [Occ=Once] ->
                        case GHC.Exception.$p1Exception $dException1_sbfGp of sat_sbfGr {
                          __DEFAULT ->
                              case
                                  Data.Typeable.Internal.sameTypeRep
                                      sat_sbfGr GHC.IO.Exception.$fExceptionIOException4
                              of
                              { GHC.Types.False ->
                                    let {
                                      sat_sbfGt [Occ=OnceT[0]]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                 GHC.IO.Handle.Types.Handle #)
                                      [LclId] =
                                          [wild_sbfGo] \r [void_0E]
                                              raiseIO# [wild_sbfGo GHC.Prim.void#];
                                    } in  sat_sbfGt;
                                GHC.Types.True -> GHC.IO.Handle.FD.openFile2 fp_sbfGj e3_sbfGq;
                              };
                        };
                  }; } in
        let {
          sat_sbfGm [Occ=Once]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     GHC.IO.Handle.Types.Handle #)
          [LclId] =
              [fp_sbfGj im_sbfGk] \r [void_0E]
                  GHC.IO.Handle.FD.openBinaryFile5
                      fp_sbfGj im_sbfGk GHC.Types.False GHC.Types.True GHC.Prim.void#;
        } in  catch# [sat_sbfGm sat_sbfGv GHC.Prim.void#];

GHC.IO.Handle.FD.openFile
  :: GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.FD.openFile1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.FD.openFileBlocking1
  :: GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [fp_sbfGw im_sbfGx void_0E]
        let {
          sat_sbfGI [Occ=Once]
            :: GHC.Exception.SomeException
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     GHC.IO.Handle.Types.Handle #)
          [LclId] =
              [fp_sbfGw] \r [e1_sbfGA]
                  case e1_sbfGA of wild_sbfGB {
                    GHC.Exception.SomeException $dException1_sbfGC [Occ=Once]
                                                e3_sbfGD [Occ=Once] ->
                        case GHC.Exception.$p1Exception $dException1_sbfGC of sat_sbfGE {
                          __DEFAULT ->
                              case
                                  Data.Typeable.Internal.sameTypeRep
                                      sat_sbfGE GHC.IO.Exception.$fExceptionIOException4
                              of
                              { GHC.Types.False ->
                                    let {
                                      sat_sbfGG [Occ=OnceT[0]]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                 GHC.IO.Handle.Types.Handle #)
                                      [LclId] =
                                          [wild_sbfGB] \r [void_0E]
                                              raiseIO# [wild_sbfGB GHC.Prim.void#];
                                    } in  sat_sbfGG;
                                GHC.Types.True -> GHC.IO.Handle.FD.openFile2 fp_sbfGw e3_sbfGD;
                              };
                        };
                  }; } in
        let {
          sat_sbfGz [Occ=Once]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     GHC.IO.Handle.Types.Handle #)
          [LclId] =
              [fp_sbfGw im_sbfGx] \r [void_0E]
                  GHC.IO.Handle.FD.openBinaryFile5
                      fp_sbfGw im_sbfGx GHC.Types.False GHC.Types.False GHC.Prim.void#;
        } in  catch# [sat_sbfGz sat_sbfGI GHC.Prim.void#];

GHC.IO.Handle.FD.openFileBlocking
  :: GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.FD.openFileBlocking1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.FD.openBinaryFile4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "openBinaryFile"#;

GHC.IO.Handle.FD.openBinaryFile3 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.FD.openBinaryFile4;

GHC.IO.Handle.FD.openBinaryFile2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.FilePath
     -> GHC.IO.Exception.IOException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId,
 Arity=3,
 Str=<B,U><B,1*U(U,U,A,U,U,A)><B,U>x,
 Unf=OtherCon []] =
    [] \r [w_sbfGJ w1_sbfGK void_0E]
        case w1_sbfGK of {
          GHC.IO.Exception.IOError ww1_sbfGN [Occ=Once]
                                   ww2_sbfGO [Occ=Once]
                                   _ [Occ=Dead]
                                   ww4_sbfGQ [Occ=Once]
                                   ww5_sbfGR [Occ=Once]
                                   _ [Occ=Dead] ->
              let {
                sat_sbfGV [Occ=Once] :: GHC.Exception.SomeException
                [LclId] =
                    [w_sbfGJ ww1_sbfGN ww2_sbfGO ww4_sbfGQ ww5_sbfGR] \u []
                        let {
                          sat_sbfGT [Occ=Once] :: GHC.Base.Maybe GHC.IO.FilePath
                          [LclId] =
                              CCCS GHC.Base.Just! [w_sbfGJ]; } in
                        let {
                          sat_sbfGU [Occ=Once] :: GHC.IO.Exception.IOException
                          [LclId] =
                              CCCS GHC.IO.Exception.IOError! [ww1_sbfGN
                                                              ww2_sbfGO
                                                              GHC.IO.Handle.FD.openBinaryFile3
                                                              ww4_sbfGQ
                                                              ww5_sbfGR
                                                              sat_sbfGT];
                        } in 
                          GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sbfGU;
              } in  raiseIO# [sat_sbfGV GHC.Prim.void#];
        };

GHC.IO.Handle.FD.openBinaryFile1
  :: GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [fp_sbfGW m_sbfGX void_0E]
        let {
          sat_sbfH8 [Occ=Once]
            :: GHC.Exception.SomeException
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     GHC.IO.Handle.Types.Handle #)
          [LclId] =
              [fp_sbfGW] \r [e1_sbfH0]
                  case e1_sbfH0 of wild_sbfH1 {
                    GHC.Exception.SomeException $dException1_sbfH2 [Occ=Once]
                                                e3_sbfH3 [Occ=Once] ->
                        case GHC.Exception.$p1Exception $dException1_sbfH2 of sat_sbfH4 {
                          __DEFAULT ->
                              case
                                  Data.Typeable.Internal.sameTypeRep
                                      sat_sbfH4 GHC.IO.Exception.$fExceptionIOException4
                              of
                              { GHC.Types.False ->
                                    let {
                                      sat_sbfH6 [Occ=OnceT[0]]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                 GHC.IO.Handle.Types.Handle #)
                                      [LclId] =
                                          [wild_sbfH1] \r [void_0E]
                                              raiseIO# [wild_sbfH1 GHC.Prim.void#];
                                    } in  sat_sbfH6;
                                GHC.Types.True ->
                                    GHC.IO.Handle.FD.openBinaryFile2 fp_sbfGW e3_sbfH3;
                              };
                        };
                  }; } in
        let {
          sat_sbfGZ [Occ=Once]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     GHC.IO.Handle.Types.Handle #)
          [LclId] =
              [fp_sbfGW m_sbfGX] \r [void_0E]
                  GHC.IO.Handle.FD.openBinaryFile5
                      fp_sbfGW m_sbfGX GHC.Types.True GHC.Types.True GHC.Prim.void#;
        } in  catch# [sat_sbfGZ sat_sbfH8 GHC.Prim.void#];

GHC.IO.Handle.FD.openBinaryFile
  :: GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.FD.openBinaryFile1 eta_B3 eta_B2 GHC.Prim.void#;

$wstdHandleFinalizer_rbfCA
  :: GHC.IO.FilePath
     -> GHC.Prim.MVar# GHC.Prim.RealWorld GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,U><S,U><S,U>, Unf=OtherCon []] =
    sat-only [] \r [w_sbfH9 ww_sbfHa void_0E]
        case takeMVar# [ww_sbfHa GHC.Prim.void#] of {
          Unit# ipv1_sbfHe [Occ=Once!] ->
              case ipv1_sbfHe of {
                GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                             $dBufferedIO_sbfHh [Occ=Once]
                                             _ [Occ=Dead]
                                             ds_sbfHj [Occ=Once]
                                             ds2_sbfHk [Occ=Once!]
                                             dt_sbfHl
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             ds4_sbfHq [Occ=Once*!]
                                             ds5_sbfHr [Occ=Once!]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead] ->
                    case readMutVar# [dt_sbfHl GHC.Prim.void#] of {
                      Unit# ipv3_sbfHy [Occ=Once!] ->
                          case ipv3_sbfHy of {
                            GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 ds11_sbfHC [Occ=Once!]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead] ->
                                let-no-escape {
                                  $w$j_sbfHG [InlPrag=NOUSERINLINE[0],
                                              Occ=Once*!T[1],
                                              Dmd=<L,1*C1(U(U,U))>]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                  [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                      sat-only [w_sbfH9
                                                ww_sbfHa
                                                ds2_sbfHk
                                                ds4_sbfHq
                                                ds5_sbfHr] \r [void_0E]
                                          case ds2_sbfHk of {
                                            __DEFAULT ->
                                                case ds5_sbfHr of {
                                                  GHC.Base.Nothing ->
                                                      case ds4_sbfHq of {
                                                        GHC.Base.Nothing ->
                                                            let {
                                                              sat_sbfHL [Occ=Once]
                                                                :: GHC.IO.Handle.Types.Handle__
                                                              [LclId] =
                                                                  [w_sbfH9] \u []
                                                                      GHC.IO.Handle.Internals.ioe_finalizedHandle
                                                                          w_sbfH9;
                                                            } in 
                                                              case
                                                                  putMVar# [ww_sbfHa
                                                                            sat_sbfHL
                                                                            GHC.Prim.void#]
                                                              of
                                                              s2#_sbfHM
                                                              { (##) -> Unit# [GHC.Tuple.()];
                                                              };
                                                        GHC.Base.Just d_sbfHN [Occ=Once!] ->
                                                            case d_sbfHN of {
                                                              GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                                _ [Occ=Dead]
                                                                                                ds14_sbfHR [Occ=Once]
                                                                                                _ [Occ=Dead]
                                                                                                _ [Occ=Dead] ->
                                                                  case
                                                                      ds14_sbfHR GHC.Prim.void#
                                                                  of
                                                                  { Unit# _ [Occ=Dead] ->
                                                                        let {
                                                                          sat_sbfHX [Occ=Once]
                                                                            :: GHC.IO.Handle.Types.Handle__
                                                                          [LclId] =
                                                                              [w_sbfH9] \u []
                                                                                  GHC.IO.Handle.Internals.ioe_finalizedHandle
                                                                                      w_sbfH9;
                                                                        } in 
                                                                          case
                                                                              putMVar# [ww_sbfHa
                                                                                        sat_sbfHX
                                                                                        GHC.Prim.void#]
                                                                          of
                                                                          s2#_sbfHY
                                                                          { (##) ->
                                                                                Unit# [GHC.Tuple.()];
                                                                          };
                                                                  };
                                                            };
                                                      };
                                                  GHC.Base.Just d_sbfHZ [Occ=Once!] ->
                                                      case d_sbfHZ of {
                                                        GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                          _ [Occ=Dead]
                                                                                          ds14_sbfI3 [Occ=Once]
                                                                                          _ [Occ=Dead]
                                                                                          _ [Occ=Dead] ->
                                                            case ds14_sbfI3 GHC.Prim.void# of {
                                                              Unit# _ [Occ=Dead] ->
                                                                  case ds4_sbfHq of {
                                                                    GHC.Base.Nothing ->
                                                                        let {
                                                                          sat_sbfIa [Occ=Once]
                                                                            :: GHC.IO.Handle.Types.Handle__
                                                                          [LclId] =
                                                                              [w_sbfH9] \u []
                                                                                  GHC.IO.Handle.Internals.ioe_finalizedHandle
                                                                                      w_sbfH9;
                                                                        } in 
                                                                          case
                                                                              putMVar# [ww_sbfHa
                                                                                        sat_sbfIa
                                                                                        GHC.Prim.void#]
                                                                          of
                                                                          s2#_sbfIb
                                                                          { (##) ->
                                                                                Unit# [GHC.Tuple.()];
                                                                          };
                                                                    GHC.Base.Just d1_sbfIc [Occ=Once!] ->
                                                                        case d1_sbfIc of {
                                                                          GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                                            _ [Occ=Dead]
                                                                                                            ds20_sbfIg [Occ=Once]
                                                                                                            _ [Occ=Dead]
                                                                                                            _ [Occ=Dead] ->
                                                                              case
                                                                                  ds20_sbfIg
                                                                                      GHC.Prim.void#
                                                                              of
                                                                              { Unit# _ [Occ=Dead] ->
                                                                                    let {
                                                                                      sat_sbfIm [Occ=Once]
                                                                                        :: GHC.IO.Handle.Types.Handle__
                                                                                      [LclId] =
                                                                                          [w_sbfH9] \u []
                                                                                              GHC.IO.Handle.Internals.ioe_finalizedHandle
                                                                                                  w_sbfH9;
                                                                                    } in 
                                                                                      case
                                                                                          putMVar# [ww_sbfHa
                                                                                                    sat_sbfIm
                                                                                                    GHC.Prim.void#]
                                                                                      of
                                                                                      s2#_sbfIn
                                                                                      { (##) ->
                                                                                            Unit# [GHC.Tuple.()];
                                                                                      };
                                                                              };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                            GHC.IO.Handle.Types.ClosedHandle ->
                                                let {
                                                  sat_sbfIo [Occ=Once]
                                                    :: GHC.IO.Handle.Types.Handle__
                                                  [LclId] =
                                                      [w_sbfH9] \u []
                                                          GHC.IO.Handle.Internals.ioe_finalizedHandle
                                                              w_sbfH9;
                                                } in 
                                                  case
                                                      putMVar# [ww_sbfHa sat_sbfIo GHC.Prim.void#]
                                                  of
                                                  s2#_sbfIp
                                                  { (##) -> Unit# [GHC.Tuple.()];
                                                  };
                                          };
                                } in 
                                  case ds11_sbfHC of {
                                    GHC.IO.Buffer.ReadBuffer -> $w$j_sbfHG GHC.Prim.void#;
                                    GHC.IO.Buffer.WriteBuffer ->
                                        case readMutVar# [dt_sbfHl GHC.Prim.void#] of {
                                          Unit# ipv5_sbfIt [Occ=Once!] ->
                                              case ipv5_sbfIt of wild3_sbfIu {
                                                GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     dt12_sbfIz [Occ=Once]
                                                                     dt13_sbfIA [Occ=Once] ->
                                                    case ==# [dt12_sbfIz dt13_sbfIA] of {
                                                      __DEFAULT ->
                                                          case
                                                              GHC.IO.BufferedIO.flushWriteBuffer
                                                                  $dBufferedIO_sbfHh
                                                                  ds_sbfHj
                                                                  wild3_sbfIu
                                                                  GHC.Prim.void#
                                                          of
                                                          { Unit# ipv7_sbfIE [Occ=Once] ->
                                                                case
                                                                    writeMutVar# [dt_sbfHl
                                                                                  ipv7_sbfIE
                                                                                  GHC.Prim.void#]
                                                                of
                                                                s2#_sbfIF
                                                                { (##) -> $w$j_sbfHG GHC.Prim.void#;
                                                                };
                                                          };
                                                      1# -> $w$j_sbfHG GHC.Prim.void#;
                                                    };
                                              };
                                        };
                                  };
                          };
                    };
              };
        };

stdHandleFinalizer_rbfCB
  :: GHC.IO.FilePath
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,U><S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [w_sbfIG w1_sbfIH void_0E]
        case w1_sbfIH of {
          GHC.MVar.MVar ww1_sbfIK [Occ=Once] ->
              $wstdHandleFinalizer_rbfCA w_sbfIG ww1_sbfIK GHC.Prim.void#;
        };

lvl6_rbfCC :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "<stderr>"#;

lvl7_rbfCD :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl6_rbfCC;

lvl8_rbfCE
  :: GHC.Base.Maybe
       (GHC.IO.FilePath
        -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ())
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [stdHandleFinalizer_rbfCB];

lvl9_rbfCF
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [void_0E]
        case noDuplicate# [GHC.Prim.void#] of s'_sbfIM {
          (##) ->
              case GHC.IO.Encoding.getLocaleEncoding1 of {
                (,) getLocaleEncoding3_sbfIO [Occ=Once] _ [Occ=Dead] ->
                    case getLocaleEncoding3_sbfIO GHC.Prim.void# of {
                      Unit# ipv1_sbfIS [Occ=Once] ->
                          let {
                            sat_sbfIT [Occ=Once]
                              :: GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
                            [LclId] =
                                CCCS GHC.Base.Just! [ipv1_sbfIS];
                          } in 
                            GHC.IO.Handle.Internals.mkDuplexHandle5
                                GHC.IO.FD.$fIODeviceFD
                                GHC.IO.FD.$fBufferedIOFD
                                GHC.IO.Handle.FD.fdToHandle12
                                GHC.IO.FD.stderr
                                lvl7_rbfCD
                                GHC.IO.Handle.Types.WriteHandle
                                GHC.Types.False
                                sat_sbfIT
                                GHC.IO.Handle.Types.nativeNewlineMode
                                lvl8_rbfCE
                                GHC.Base.Nothing
                                GHC.Prim.void#;
                    };
              };
        };

GHC.IO.Handle.FD.stderr [InlPrag=NOINLINE]
  :: GHC.IO.Handle.Types.Handle
[GblId] =
    [] \u []
        case lvl9_rbfCF GHC.Prim.realWorld# of {
          Unit# ipv1_sbfIW [Occ=Once] -> ipv1_sbfIW;
        };

lvl10_rbfCG :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "<stdout>"#;

lvl11_rbfCH :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl10_rbfCG;

lvl12_rbfCI
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [void_0E]
        case noDuplicate# [GHC.Prim.void#] of s'_sbfIY {
          (##) ->
              case GHC.IO.Encoding.getLocaleEncoding1 of {
                (,) getLocaleEncoding3_sbfJ0 [Occ=Once] _ [Occ=Dead] ->
                    case getLocaleEncoding3_sbfJ0 GHC.Prim.void# of {
                      Unit# ipv1_sbfJ4 [Occ=Once] ->
                          let {
                            sat_sbfJ5 [Occ=Once]
                              :: GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
                            [LclId] =
                                CCCS GHC.Base.Just! [ipv1_sbfJ4];
                          } in 
                            GHC.IO.Handle.Internals.mkDuplexHandle5
                                GHC.IO.FD.$fIODeviceFD
                                GHC.IO.FD.$fBufferedIOFD
                                GHC.IO.Handle.FD.fdToHandle12
                                GHC.IO.FD.stdout
                                lvl11_rbfCH
                                GHC.IO.Handle.Types.WriteHandle
                                GHC.Types.True
                                sat_sbfJ5
                                GHC.IO.Handle.Types.nativeNewlineMode
                                lvl8_rbfCE
                                GHC.Base.Nothing
                                GHC.Prim.void#;
                    };
              };
        };

GHC.IO.Handle.FD.stdout [InlPrag=NOINLINE]
  :: GHC.IO.Handle.Types.Handle
[GblId] =
    [] \u []
        case lvl12_rbfCI GHC.Prim.realWorld# of {
          Unit# ipv1_sbfJ8 [Occ=Once] -> ipv1_sbfJ8;
        };

lvl13_rbfCJ :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "<stdin>"#;

lvl14_rbfCK :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl13_rbfCJ;

lvl15_rbfCL
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [void_0E]
        case noDuplicate# [GHC.Prim.void#] of s'_sbfJa {
          (##) ->
              case GHC.IO.Encoding.getLocaleEncoding1 of {
                (,) getLocaleEncoding3_sbfJc [Occ=Once] _ [Occ=Dead] ->
                    case getLocaleEncoding3_sbfJc GHC.Prim.void# of {
                      Unit# ipv1_sbfJg [Occ=Once] ->
                          let {
                            sat_sbfJh [Occ=Once]
                              :: GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
                            [LclId] =
                                CCCS GHC.Base.Just! [ipv1_sbfJg];
                          } in 
                            GHC.IO.Handle.Internals.mkDuplexHandle5
                                GHC.IO.FD.$fIODeviceFD
                                GHC.IO.FD.$fBufferedIOFD
                                GHC.IO.Handle.FD.fdToHandle12
                                GHC.IO.FD.stdin
                                lvl14_rbfCK
                                GHC.IO.Handle.Types.ReadHandle
                                GHC.Types.True
                                sat_sbfJh
                                GHC.IO.Handle.Types.nativeNewlineMode
                                lvl8_rbfCE
                                GHC.Base.Nothing
                                GHC.Prim.void#;
                    };
              };
        };

GHC.IO.Handle.FD.stdin [InlPrag=NOINLINE]
  :: GHC.IO.Handle.Types.Handle
[GblId] =
    [] \u []
        case lvl15_rbfCL GHC.Prim.realWorld# of {
          Unit# ipv1_sbfJk [Occ=Once] -> ipv1_sbfJk;
        };


==================== Pre unarise: ====================
2018-03-16 16:06:13.50199961 UTC

GHC.IO.Handle.FD.fdToHandle12
  :: Data.Typeable.Internal.TypeRep GHC.IO.FD.FD
[GblId] =
    [] \u []
        case
            Data.Typeable.Internal.$wmkTrCon
                10838815552519039062##
                15546290101957756376##
                GHC.IO.FD.$trModule
                GHC.IO.FD.$tcFD1
                0#
                GHC.Types.krep$*
                GHC.Types.[]
        of
        { (#,,,,#) ww8_sbgVK [Occ=Once]
                   ww9_sbgVL [Occ=Once]
                   ww10_sbgVM [Occ=Once]
                   ww11_sbgVN [Occ=Once]
                   ww12_sbgVO [Occ=Once] ->
              Data.Typeable.Internal.TrTyCon [ww8_sbgVK
                                              ww9_sbgVL
                                              ww10_sbgVM
                                              ww11_sbgVN
                                              ww12_sbgVO];
        };

GHC.IO.Handle.FD.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.Handle.FD.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.FD.$trModule4];

GHC.IO.Handle.FD.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Handle.FD"#;

GHC.IO.Handle.FD.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.FD.$trModule2];

GHC.IO.Handle.FD.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Handle.FD.$trModule3
                                     GHC.IO.Handle.FD.$trModule1];

lvl_rbfCu :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "handleToFd"#;

lvl1_rbfCv :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl_rbfCu;

lvl2_rbfCw :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "not a file descriptor"#;

lvl3_rbfCx :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl2_rbfCw;

GHC.IO.Handle.FD.handleToFd3
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.IO.FD.FD #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    [] \r [h_sbgVP eta_sbgVQ]
        let {
          sat_sbgVT [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [h_sbgVP] \u []
                  let {
                    sat_sbgVR [Occ=Once] :: GHC.Base.Maybe GHC.IO.Handle.Types.Handle
                    [LclId] =
                        CCCS GHC.Base.Just! [h_sbgVP]; } in
                  let {
                    sat_sbgVS [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        CCCS GHC.IO.Exception.IOError! [sat_sbgVR
                                                        GHC.IO.Exception.InappropriateType
                                                        lvl1_rbfCv
                                                        lvl3_rbfCx
                                                        GHC.Base.Nothing
                                                        GHC.Base.Nothing];
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sbgVS;
        } in  raiseIO# [sat_sbgVT eta_sbgVQ];

lvl4_rbfCy :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "not a file handle"#;

lvl5_rbfCz :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl4_rbfCy;

GHC.IO.Handle.FD.handleToFd2
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.IO.FD.FD #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    [] \r [h_sbgVU eta_sbgVV]
        let {
          sat_sbgVY [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [h_sbgVU] \u []
                  let {
                    sat_sbgVW [Occ=Once] :: GHC.Base.Maybe GHC.IO.Handle.Types.Handle
                    [LclId] =
                        CCCS GHC.Base.Just! [h_sbgVU]; } in
                  let {
                    sat_sbgVX [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        CCCS GHC.IO.Exception.IOError! [sat_sbgVW
                                                        GHC.IO.Exception.InappropriateType
                                                        lvl1_rbfCv
                                                        lvl5_rbfCz
                                                        GHC.Base.Nothing
                                                        GHC.Base.Nothing];
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sbgVX;
        } in  raiseIO# [sat_sbgVY eta_sbgVV];

GHC.IO.Handle.FD.handleToFd1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.IO.FD.FD #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h_sbgVZ eta_sbgW0]
        case h_sbgVZ of wild_sbgW1 {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbgW3 [Occ=Once] ->
              case readMVar# [dt_sbgW3 eta_sbgW0] of {
                (#,#) ipv_sbgW5 [Occ=Once*] ipv1_sbgW6 [Occ=Once!] ->
                    case ipv1_sbgW6 of {
                      GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   $dTypeable_sbgWa [Occ=Once]
                                                   ds2_sbgWb [Occ=Once]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead] ->
                          case
                              Data.Typeable.Internal.sameTypeRep
                                  $dTypeable_sbgWa GHC.IO.Handle.FD.fdToHandle12
                          of
                          { GHC.Types.False ->
                                GHC.IO.Handle.FD.handleToFd3 wild_sbgW1 ipv_sbgW5;
                            GHC.Types.True -> (#,#) [ipv_sbgW5 ds2_sbgWb];
                          };
                    };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              GHC.IO.Handle.FD.handleToFd2 wild_sbgW1 eta_sbgW0;
        };

GHC.IO.Handle.FD.handleToFd
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.IO.FD.FD
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.FD.handleToFd1 eta_B2 eta_B1;

GHC.IO.Handle.FD.fdToHandle11 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "openFile"#;

GHC.IO.Handle.FD.fdToHandle10 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.FD.fdToHandle11;

GHC.IO.Handle.FD.fdToHandle9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "is a directory"#;

GHC.IO.Handle.FD.fdToHandle8 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.FD.fdToHandle9;

GHC.IO.Handle.FD.fdToHandle7 :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.InappropriateType
                                             GHC.IO.Handle.FD.fdToHandle10
                                             GHC.IO.Handle.FD.fdToHandle8
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Handle.FD.fdToHandle6 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Handle.FD.fdToHandle7;

GHC.IO.Handle.FD.fdToHandle5
  :: GHC.IO.FD.FD
     -> GHC.IO.Device.IODeviceType
     -> GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> GHC.Types.Bool
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId,
 Arity=7,
 Str=<L,U(U,U)><L,1*U><L,U><L,U><S,1*U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [fd0_sbgWs
           fd_type_sbgWt
           filepath_sbgWu
           iomode_sbgWv
           set_non_blocking_sbgWw
           mb_codec_sbgWx
           s_sbgWy]
        let-no-escape {
          $j_sbgWz [Occ=Once*!T[2], Dmd=<L,1*C1(C1(U(U,U)))>]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> GHC.IO.FD.FD
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     GHC.IO.Handle.Types.Handle #)
          [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
              sat-only [fd_type_sbgWt
                        filepath_sbgWu
                        iomode_sbgWv
                        mb_codec_sbgWx] \r [ipv_sbgWA ipv1_sbgWB]
                  let {
                    nl_sbgWC [Dmd=<L,U(U,U)>] :: GHC.IO.Handle.Types.NewlineMode
                    [LclId] =
                        [mb_codec_sbgWx] \u []
                            case mb_codec_sbgWx of {
                              __DEFAULT -> GHC.IO.Handle.Types.nativeNewlineMode;
                            };
                  } in 
                    let-no-escape {
                      fail_sbgWE [Occ=Once*!T[1], Dmd=<L,1*C1(U(U,U))>]
                        :: GHC.Prim.Void#
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 GHC.IO.Handle.Types.Handle #)
                      [LclId[JoinId(1)], Arity=1, Str=<L,A>, Unf=OtherCon []] =
                          sat-only [filepath_sbgWu
                                    iomode_sbgWv
                                    mb_codec_sbgWx
                                    ipv_sbgWA
                                    ipv1_sbgWB
                                    nl_sbgWC] \r [ds_sbgWF]
                              let {
                                sat_sbgWH [Occ=Once] :: GHC.IO.Handle.Types.HandleType
                                [LclId] =
                                    [iomode_sbgWv] \u []
                                        case iomode_sbgWv of {
                                          GHC.IO.IOMode.ReadMode ->
                                              GHC.IO.Handle.Types.ReadHandle [];
                                          GHC.IO.IOMode.WriteMode ->
                                              GHC.IO.Handle.Types.WriteHandle [];
                                          GHC.IO.IOMode.AppendMode ->
                                              GHC.IO.Handle.Types.AppendHandle [];
                                          GHC.IO.IOMode.ReadWriteMode ->
                                              GHC.IO.Handle.Types.ReadWriteHandle [];
                                        };
                              } in 
                                GHC.IO.Handle.Internals.mkDuplexHandle5
                                    GHC.IO.FD.$fIODeviceFD
                                    GHC.IO.FD.$fBufferedIOFD
                                    GHC.IO.Handle.FD.fdToHandle12
                                    ipv1_sbgWB
                                    filepath_sbgWu
                                    sat_sbgWH
                                    GHC.Types.True
                                    mb_codec_sbgWx
                                    nl_sbgWC
                                    GHC.IO.Handle.Internals.mkDuplexHandle4
                                    GHC.Base.Nothing
                                    ipv_sbgWA;
                    } in 
                      case fd_type_sbgWt of {
                        __DEFAULT -> fail_sbgWE GHC.Prim.void#;
                        GHC.IO.Device.Directory ->
                            raiseIO# [GHC.IO.Handle.FD.fdToHandle6 ipv_sbgWA];
                        GHC.IO.Device.Stream ->
                            case iomode_sbgWv of {
                              __DEFAULT -> fail_sbgWE GHC.Prim.void#;
                              GHC.IO.IOMode.ReadWriteMode ->
                                  GHC.IO.Handle.Internals.mkDuplexHandle1
                                      GHC.IO.FD.$fIODeviceFD
                                      GHC.IO.FD.$fBufferedIOFD
                                      GHC.IO.Handle.FD.fdToHandle12
                                      ipv1_sbgWB
                                      filepath_sbgWu
                                      mb_codec_sbgWx
                                      nl_sbgWC
                                      ipv_sbgWA;
                            };
                      };
        } in 
          case set_non_blocking_sbgWw of {
            GHC.Types.False -> $j_sbgWz s_sbgWy fd0_sbgWs;
            GHC.Types.True ->
                case fd0_sbgWs of {
                  GHC.IO.FD.FD dt_sbgWM _ [Occ=Dead] ->
                      case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
                        (#,#) _ [Occ=Dead] ds1_sbgWR [Occ=Once] ->
                            let {
                              sat_sbgX0 [Occ=Once] :: GHC.Types.IO Foreign.C.Types.CInt
                              [LclId] =
                                  [dt_sbgWM ds1_sbgWR] \r [ds2_sbgWS]
                                      case narrow32Int# [ds1_sbgWR] of sat_sbgWU {
                                        __DEFAULT ->
                                            case
                                                __pkg_ccall base-4.11.0.0 [dt_sbgWM
                                                                           sat_sbgWU
                                                                           ds2_sbgWS]
                                            of
                                            { (#,#) ds3_sbgWW [Occ=Once] ds4_sbgWX [Occ=Once] ->
                                                  case narrow32Int# [ds4_sbgWX] of sat_sbgWY {
                                                    __DEFAULT ->
                                                        let {
                                                          sat_sbgWZ [Occ=Once] :: GHC.Int.Int32
                                                          [LclId] =
                                                              CCCS GHC.Int.I32#! [sat_sbgWY];
                                                        } in  (#,#) [ds3_sbgWW sat_sbgWZ];
                                                  };
                                            };
                                      };
                            } in 
                              case
                                  Foreign.C.Error.throwErrnoIfMinus1Retry2
                                      System.Posix.Internals.fdFileSize_pred
                                      System.Posix.Internals.setNonBlockingFD3
                                      sat_sbgX0
                                      s_sbgWy
                              of
                              { (#,#) ipv_sbgX2 [Occ=Once*] ipv1_sbgX3 [Occ=Once] ->
                                    case ipv1_sbgX3 of {
                                      GHC.Int.I32# x_sbgX5 ->
                                          case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
                                            (#,#) _ [Occ=Dead] ds4_sbgX9 [Occ=Once] ->
                                                case narrow32Int# [ds4_sbgX9] of sat_sbgXc {
                                                  __DEFAULT ->
                                                      case int2Word# [sat_sbgXc] of sat_sbgXd {
                                                        __DEFAULT ->
                                                            case int2Word# [x_sbgX5] of sat_sbgXb {
                                                              __DEFAULT ->
                                                                  case
                                                                      or# [sat_sbgXb sat_sbgXd]
                                                                  of
                                                                  sat_sbgXe
                                                                  { __DEFAULT ->
                                                                        case
                                                                            word2Int# [sat_sbgXe]
                                                                        of
                                                                        y_sbgXa [Dmd=<S,U>]
                                                                        { __DEFAULT ->
                                                                              case
                                                                                  /=# [x_sbgX5
                                                                                       y_sbgXa]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_sbgXg [Occ=Once]
                                                                                        :: GHC.IO.FD.FD
                                                                                      [LclId] =
                                                                                          CCCS GHC.IO.FD.FD! [dt_sbgWM
                                                                                                              1#];
                                                                                    } in 
                                                                                      $j_sbgWz
                                                                                          ipv_sbgX2
                                                                                          sat_sbgXg;
                                                                                1# ->
                                                                                    case
                                                                                        __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#]
                                                                                    of
                                                                                    { (#,#) _ [Occ=Dead]
                                                                                            ds6_sbgXk [Occ=Once] ->
                                                                                          case
                                                                                              narrow32Int# [ds6_sbgXk]
                                                                                          of
                                                                                          sat_sbgXm
                                                                                          { __DEFAULT ->
                                                                                                case
                                                                                                    __pkg_ccall base-4.11.0.0 [dt_sbgWM
                                                                                                                               sat_sbgXm
                                                                                                                               y_sbgXa
                                                                                                                               ipv_sbgX2]
                                                                                                of
                                                                                                { (#,#) ds7_sbgXo [Occ=Once]
                                                                                                        _ [Occ=Dead] ->
                                                                                                      let {
                                                                                                        sat_sbgXq [Occ=Once]
                                                                                                          :: GHC.IO.FD.FD
                                                                                                        [LclId] =
                                                                                                            CCCS GHC.IO.FD.FD! [dt_sbgWM
                                                                                                                                1#];
                                                                                                      } in 
                                                                                                        $j_sbgWz
                                                                                                            ds7_sbgXo
                                                                                                            sat_sbgXq;
                                                                                                };
                                                                                          };
                                                                                    };
                                                                              };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                      };
                };
          };

GHC.IO.Handle.FD.mkHandleFromFD
  :: GHC.IO.FD.FD
     -> GHC.IO.Device.IODeviceType
     -> GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> GHC.Types.Bool
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId,
 Arity=7,
 Str=<L,U(U,U)><L,1*U><L,U><L,U><S,1*U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.FD.fdToHandle5
            eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.FD.fdToHandle'2 :: GHC.Word.Word64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W64#! [0##];

GHC.IO.Handle.FD.fdToHandle'1
  :: Foreign.C.Types.CInt
     -> GHC.Base.Maybe GHC.IO.Device.IODeviceType
     -> GHC.Types.Bool
     -> GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> GHC.Types.Bool
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId,
 Arity=7,
 Str=<L,U(U)><S,1*U><L,U><L,U><L,U><L,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [fdint_sbgXr
           mb_type_sbgXs
           is_socket_sbgXt
           filepath_sbgXu
           iomode_sbgXv
           binary_sbgXw
           s_sbgXx]
        let-no-escape {
          $w$j_sbgXy [InlPrag=NOUSERINLINE[0],
                      Occ=Once*!T[3],
                      Dmd=<L,1*C1(C1(C1(U(U,U))))>]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> GHC.IO.FD.FD
               -> GHC.IO.Device.IODeviceType
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     GHC.IO.Handle.Types.Handle #)
          [LclId[JoinId(3)],
           Arity=3,
           Str=<S,U><L,U(U,U)><L,1*U>,
           Unf=OtherCon []] =
              sat-only [is_socket_sbgXt
                        filepath_sbgXu
                        iomode_sbgXv
                        binary_sbgXw] \r [w_sbgXz ww_sbgXA ww1_sbgXB]
                  case binary_sbgXw of {
                    GHC.Types.False ->
                        case GHC.IO.Encoding.getLocaleEncoding1 of {
                          (,) getLocaleEncoding3_sbgXE [Occ=Once] _ [Occ=Dead] ->
                              case getLocaleEncoding3_sbgXE w_sbgXz of {
                                (#,#) ipv_sbgXH [Occ=Once] ipv1_sbgXI [Occ=Once] ->
                                    let {
                                      sat_sbgXJ [Occ=Once]
                                        :: GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
                                      [LclId] =
                                          CCCS GHC.Base.Just! [ipv1_sbgXI];
                                    } in 
                                      GHC.IO.Handle.FD.fdToHandle5
                                          ww_sbgXA
                                          ww1_sbgXB
                                          filepath_sbgXu
                                          iomode_sbgXv
                                          is_socket_sbgXt
                                          sat_sbgXJ
                                          ipv_sbgXH;
                              };
                        };
                    GHC.Types.True ->
                        GHC.IO.Handle.FD.fdToHandle5
                            ww_sbgXA
                            ww1_sbgXB
                            filepath_sbgXu
                            iomode_sbgXv
                            is_socket_sbgXt
                            GHC.Base.Nothing
                            w_sbgXz;
                  };
        } in 
          case mb_type_sbgXs of {
            GHC.Base.Nothing ->
                case
                    GHC.IO.FD.$wmkFD
                        fdint_sbgXr iomode_sbgXv GHC.Base.Nothing is_socket_sbgXt s_sbgXx
                of
                { (#,#) ipv_sbgXM [Occ=Once] ipv1_sbgXN [Occ=Once!] ->
                      case ipv1_sbgXN of {
                        (,) ww1_sbgXP [Occ=Once] ww2_sbgXQ [Occ=Once] ->
                            $w$j_sbgXy ipv_sbgXM ww1_sbgXP ww2_sbgXQ;
                      };
                };
            GHC.Base.Just ds_sbgXR [Occ=Once!] ->
                case ds_sbgXR of wild1_sbgXS {
                  __DEFAULT ->
                      let {
                        sat_sbgXT [Occ=Once]
                          :: (GHC.IO.Device.IODeviceType, System.Posix.Types.CDev,
                              System.Posix.Types.CIno)
                        [LclId] =
                            CCCS (,,)! [wild1_sbgXS
                                        GHC.IO.Handle.FD.fdToHandle'2
                                        GHC.IO.Handle.FD.fdToHandle'2]; } in
                      let {
                        sat_sbgXU [Occ=Once]
                          :: GHC.Base.Maybe
                               (GHC.IO.Device.IODeviceType, System.Posix.Types.CDev,
                                System.Posix.Types.CIno)
                        [LclId] =
                            CCCS GHC.Base.Just! [sat_sbgXT];
                      } in 
                        case
                            GHC.IO.FD.$wmkFD
                                fdint_sbgXr iomode_sbgXv sat_sbgXU is_socket_sbgXt s_sbgXx
                        of
                        { (#,#) ipv_sbgXW [Occ=Once] ipv1_sbgXX [Occ=Once!] ->
                              case ipv1_sbgXX of {
                                (,) ww1_sbgXZ [Occ=Once] ww2_sbgY0 [Occ=Once] ->
                                    $w$j_sbgXy ipv_sbgXW ww1_sbgXZ ww2_sbgY0;
                              };
                        };
                  GHC.IO.Device.RegularFile ->
                      case
                          GHC.IO.FD.$wmkFD
                              fdint_sbgXr iomode_sbgXv GHC.Base.Nothing is_socket_sbgXt s_sbgXx
                      of
                      { (#,#) ipv_sbgY2 [Occ=Once] ipv1_sbgY3 [Occ=Once!] ->
                            case ipv1_sbgY3 of {
                              (,) ww1_sbgY5 [Occ=Once] ww2_sbgY6 [Occ=Once] ->
                                  $w$j_sbgXy ipv_sbgY2 ww1_sbgY5 ww2_sbgY6;
                            };
                      };
                };
          };

GHC.IO.Handle.FD.fdToHandle'
  :: Foreign.C.Types.CInt
     -> GHC.Base.Maybe GHC.IO.Device.IODeviceType
     -> GHC.Types.Bool
     -> GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> GHC.Types.Bool
     -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId,
 Arity=7,
 Str=<L,U(U)><S,1*U><L,U><L,U><L,U><L,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.FD.fdToHandle'1
            eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.FD.fdToHandle4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "<file descriptor: "#;

GHC.IO.Handle.FD.fdToHandle3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ">"#;

GHC.IO.Handle.FD.fdToHandle2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.FD.fdToHandle3;

GHC.IO.Handle.FD.$wfdToHandle [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_sbgY7 w_sbgY8]
        case System.Posix.Internals.$wfdGetMode ww_sbgY7 w_sbgY8 of {
          (#,#) ipv_sbgYa [Occ=Once] ipv1_sbgYb ->
              let {
                sat_sbgYc [Occ=Once] :: Foreign.C.Types.CInt
                [LclId] =
                    CCCS GHC.Int.I32#! [ww_sbgY7];
              } in 
                case
                    GHC.IO.FD.$wmkFD
                        sat_sbgYc ipv1_sbgYb GHC.Base.Nothing GHC.Types.False ipv_sbgYa
                of
                { (#,#) ipv2_sbgYe [Occ=Once] ipv3_sbgYf [Occ=Once!] ->
                      case ipv3_sbgYf of {
                        (,) fd_sbgYh fd_type_sbgYi [Occ=Once] ->
                            let {
                              sat_sbgYr [Occ=Once] :: GHC.IO.FilePath
                              [LclId] =
                                  [fd_sbgYh] \u []
                                      let {
                                        sat_sbgYq [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            [fd_sbgYh] \u []
                                                case fd_sbgYh of {
                                                  GHC.IO.FD.FD dt_sbgYk [Occ=Once] _ [Occ=Dead] ->
                                                      case
                                                          GHC.Show.$wshowSignedInt
                                                              0# dt_sbgYk GHC.Types.[]
                                                      of
                                                      { (#,#) ww5_sbgYn [Occ=Once]
                                                              ww6_sbgYo [Occ=Once] ->
                                                            let {
                                                              sat_sbgYp [Occ=Once]
                                                                :: [GHC.Types.Char]
                                                              [LclId] =
                                                                  CCCS :! [ww5_sbgYn ww6_sbgYo];
                                                            } in 
                                                              GHC.Base.++
                                                                  sat_sbgYp
                                                                  GHC.IO.Handle.FD.fdToHandle2;
                                                      };
                                                };
                                      } in 
                                        GHC.CString.unpackAppendCString#
                                            GHC.IO.Handle.FD.fdToHandle4 sat_sbgYq;
                            } in 
                              GHC.IO.Handle.FD.fdToHandle5
                                  fd_sbgYh
                                  fd_type_sbgYi
                                  sat_sbgYr
                                  ipv1_sbgYb
                                  GHC.Types.False
                                  GHC.Base.Nothing
                                  ipv2_sbgYe;
                      };
                };
        };

GHC.IO.Handle.FD.fdToHandle1 [InlPrag=NOUSERINLINE[0]]
  :: System.Posix.Internals.FD
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [w_sbgYs w1_sbgYt]
        case w_sbgYs of {
          GHC.Int.I32# ww1_sbgYv [Occ=Once] ->
              GHC.IO.Handle.FD.$wfdToHandle ww1_sbgYv w1_sbgYt;
        };

GHC.IO.Handle.FD.fdToHandle
  :: System.Posix.Internals.FD
     -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.IO.Handle.FD.fdToHandle1 eta_B2 eta_B1;

GHC.IO.Handle.FD.openBinaryFile5
  :: GHC.Base.String
     -> GHC.IO.IOMode.IOMode
     -> GHC.Types.Bool
     -> GHC.Types.Bool
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId,
 Arity=5,
 Str=<L,U><L,U><L,1*U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [filepath_sbgYw
           iomode_sbgYx
           binary_sbgYy
           non_blocking_sbgYz
           s_sbgYA]
        case
            GHC.IO.FD.openFile1
                filepath_sbgYw iomode_sbgYx non_blocking_sbgYz s_sbgYA
        of
        { (#,#) ipv_sbgYC [Occ=Once*] ipv1_sbgYD [Occ=Once!] ->
              case ipv1_sbgYD of {
                (,) fd_sbgYF fd_type_sbgYG [Occ=Once] ->
                    let-no-escape {
                      $j_sbgYH [Occ=Once*!T[2], Dmd=<L,1*C1(C1(U(U,U)))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 GHC.IO.Handle.Types.Handle #)
                      [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
                          sat-only [filepath_sbgYw
                                    iomode_sbgYx
                                    fd_sbgYF
                                    fd_type_sbgYG] \r [ipv2_sbgYI ipv3_sbgYJ]
                              let {
                                sat_sbgYT [Occ=Once]
                                  :: GHC.Exception.SomeException
                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           GHC.IO.Handle.Types.Handle #)
                                [LclId] =
                                    [fd_sbgYF] \r [e_sbgYL s1_sbgYM]
                                        case fd_sbgYF of {
                                          GHC.IO.FD.FD ww1_sbgYO [Occ=Once] _ [Occ=Dead] ->
                                              case GHC.IO.FD.$w$cclose ww1_sbgYO s1_sbgYM of {
                                                (#,#) ipv4_sbgYR [Occ=Once] _ [Occ=Dead] ->
                                                    raiseIO# [e_sbgYL ipv4_sbgYR];
                                              };
                                        }; } in
                              let {
                                sat_sbgYK [Occ=Once]
                                  :: GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           GHC.IO.Handle.Types.Handle #)
                                [LclId] =
                                    [filepath_sbgYw
                                     iomode_sbgYx
                                     fd_sbgYF
                                     fd_type_sbgYG
                                     ipv3_sbgYJ] \r [eta_B1]
                                        GHC.IO.Handle.FD.fdToHandle5
                                            fd_sbgYF
                                            fd_type_sbgYG
                                            filepath_sbgYw
                                            iomode_sbgYx
                                            GHC.Types.False
                                            ipv3_sbgYJ
                                            eta_B1;
                              } in  catch# [sat_sbgYK sat_sbgYT ipv2_sbgYI];
                    } in 
                      case binary_sbgYy of {
                        GHC.Types.False ->
                            case GHC.IO.Encoding.getLocaleEncoding1 of {
                              (,) getLocaleEncoding3_sbgYW [Occ=Once] _ [Occ=Dead] ->
                                  case getLocaleEncoding3_sbgYW ipv_sbgYC of {
                                    (#,#) ipv2_sbgYZ [Occ=Once] ipv3_sbgZ0 [Occ=Once] ->
                                        let {
                                          sat_sbgZ1 [Occ=Once]
                                            :: GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
                                          [LclId] =
                                              CCCS GHC.Base.Just! [ipv3_sbgZ0];
                                        } in  $j_sbgYH ipv2_sbgYZ sat_sbgZ1;
                                  };
                            };
                        GHC.Types.True -> $j_sbgYH ipv_sbgYC GHC.Base.Nothing;
                      };
              };
        };

GHC.IO.Handle.FD.openFile2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.FilePath
     -> GHC.IO.Exception.IOException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId,
 Arity=3,
 Str=<B,U><B,1*U(U,U,A,U,U,A)><B,U>x,
 Unf=OtherCon []] =
    [] \r [w_sbgZ2 w1_sbgZ3 w2_sbgZ4]
        case w1_sbgZ3 of {
          GHC.IO.Exception.IOError ww1_sbgZ6 [Occ=Once]
                                   ww2_sbgZ7 [Occ=Once]
                                   _ [Occ=Dead]
                                   ww4_sbgZ9 [Occ=Once]
                                   ww5_sbgZa [Occ=Once]
                                   _ [Occ=Dead] ->
              let {
                sat_sbgZe [Occ=Once] :: GHC.Exception.SomeException
                [LclId] =
                    [w_sbgZ2 ww1_sbgZ6 ww2_sbgZ7 ww4_sbgZ9 ww5_sbgZa] \u []
                        let {
                          sat_sbgZc [Occ=Once] :: GHC.Base.Maybe GHC.IO.FilePath
                          [LclId] =
                              CCCS GHC.Base.Just! [w_sbgZ2]; } in
                        let {
                          sat_sbgZd [Occ=Once] :: GHC.IO.Exception.IOException
                          [LclId] =
                              CCCS GHC.IO.Exception.IOError! [ww1_sbgZ6
                                                              ww2_sbgZ7
                                                              GHC.IO.Handle.FD.fdToHandle10
                                                              ww4_sbgZ9
                                                              ww5_sbgZa
                                                              sat_sbgZc];
                        } in 
                          GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sbgZd;
              } in  raiseIO# [sat_sbgZe w2_sbgZ4];
        };

GHC.IO.Handle.FD.openFile1
  :: GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [fp_sbgZf im_sbgZg eta_sbgZh]
        let {
          sat_sbgZr [Occ=Once]
            :: GHC.Exception.SomeException
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     GHC.IO.Handle.Types.Handle #)
          [LclId] =
              [fp_sbgZf] \r [e1_sbgZj]
                  case e1_sbgZj of wild_sbgZk {
                    GHC.Exception.SomeException $dException1_sbgZl [Occ=Once]
                                                e3_sbgZm [Occ=Once] ->
                        case GHC.Exception.$p1Exception $dException1_sbgZl of sat_sbgZn {
                          __DEFAULT ->
                              case
                                  Data.Typeable.Internal.sameTypeRep
                                      sat_sbgZn GHC.IO.Exception.$fExceptionIOException4
                              of
                              { GHC.Types.False ->
                                    let {
                                      sat_sbgZp [Occ=OnceT[0]]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                 GHC.IO.Handle.Types.Handle #)
                                      [LclId] =
                                          [wild_sbgZk] \r [eta_B1] raiseIO# [wild_sbgZk eta_B1];
                                    } in  sat_sbgZp;
                                GHC.Types.True -> GHC.IO.Handle.FD.openFile2 fp_sbgZf e3_sbgZm;
                              };
                        };
                  }; } in
        let {
          sat_sbgZi [Occ=Once]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     GHC.IO.Handle.Types.Handle #)
          [LclId] =
              [fp_sbgZf im_sbgZg] \r [eta_B1]
                  GHC.IO.Handle.FD.openBinaryFile5
                      fp_sbgZf im_sbgZg GHC.Types.False GHC.Types.True eta_B1;
        } in  catch# [sat_sbgZi sat_sbgZr eta_sbgZh];

GHC.IO.Handle.FD.openFile
  :: GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.FD.openFile1 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.FD.openFileBlocking1
  :: GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [fp_sbgZs im_sbgZt eta_sbgZu]
        let {
          sat_sbgZE [Occ=Once]
            :: GHC.Exception.SomeException
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     GHC.IO.Handle.Types.Handle #)
          [LclId] =
              [fp_sbgZs] \r [e1_sbgZw]
                  case e1_sbgZw of wild_sbgZx {
                    GHC.Exception.SomeException $dException1_sbgZy [Occ=Once]
                                                e3_sbgZz [Occ=Once] ->
                        case GHC.Exception.$p1Exception $dException1_sbgZy of sat_sbgZA {
                          __DEFAULT ->
                              case
                                  Data.Typeable.Internal.sameTypeRep
                                      sat_sbgZA GHC.IO.Exception.$fExceptionIOException4
                              of
                              { GHC.Types.False ->
                                    let {
                                      sat_sbgZC [Occ=OnceT[0]]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                 GHC.IO.Handle.Types.Handle #)
                                      [LclId] =
                                          [wild_sbgZx] \r [eta_B1] raiseIO# [wild_sbgZx eta_B1];
                                    } in  sat_sbgZC;
                                GHC.Types.True -> GHC.IO.Handle.FD.openFile2 fp_sbgZs e3_sbgZz;
                              };
                        };
                  }; } in
        let {
          sat_sbgZv [Occ=Once]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     GHC.IO.Handle.Types.Handle #)
          [LclId] =
              [fp_sbgZs im_sbgZt] \r [eta_B1]
                  GHC.IO.Handle.FD.openBinaryFile5
                      fp_sbgZs im_sbgZt GHC.Types.False GHC.Types.False eta_B1;
        } in  catch# [sat_sbgZv sat_sbgZE eta_sbgZu];

GHC.IO.Handle.FD.openFileBlocking
  :: GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.FD.openFileBlocking1 eta_B3 eta_B2 eta_B1;

GHC.IO.Handle.FD.openBinaryFile4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "openBinaryFile"#;

GHC.IO.Handle.FD.openBinaryFile3 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.FD.openBinaryFile4;

GHC.IO.Handle.FD.openBinaryFile2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.FilePath
     -> GHC.IO.Exception.IOException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId,
 Arity=3,
 Str=<B,U><B,1*U(U,U,A,U,U,A)><B,U>x,
 Unf=OtherCon []] =
    [] \r [w_sbgZF w1_sbgZG w2_sbgZH]
        case w1_sbgZG of {
          GHC.IO.Exception.IOError ww1_sbgZJ [Occ=Once]
                                   ww2_sbgZK [Occ=Once]
                                   _ [Occ=Dead]
                                   ww4_sbgZM [Occ=Once]
                                   ww5_sbgZN [Occ=Once]
                                   _ [Occ=Dead] ->
              let {
                sat_sbgZR [Occ=Once] :: GHC.Exception.SomeException
                [LclId] =
                    [w_sbgZF ww1_sbgZJ ww2_sbgZK ww4_sbgZM ww5_sbgZN] \u []
                        let {
                          sat_sbgZP [Occ=Once] :: GHC.Base.Maybe GHC.IO.FilePath
                          [LclId] =
                              CCCS GHC.Base.Just! [w_sbgZF]; } in
                        let {
                          sat_sbgZQ [Occ=Once] :: GHC.IO.Exception.IOException
                          [LclId] =
                              CCCS GHC.IO.Exception.IOError! [ww1_sbgZJ
                                                              ww2_sbgZK
                                                              GHC.IO.Handle.FD.openBinaryFile3
                                                              ww4_sbgZM
                                                              ww5_sbgZN
                                                              sat_sbgZP];
                        } in 
                          GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sbgZQ;
              } in  raiseIO# [sat_sbgZR w2_sbgZH];
        };

GHC.IO.Handle.FD.openBinaryFile1
  :: GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [fp_sbgZS m_sbgZT eta_sbgZU]
        let {
          sat_sbh04 [Occ=Once]
            :: GHC.Exception.SomeException
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     GHC.IO.Handle.Types.Handle #)
          [LclId] =
              [fp_sbgZS] \r [e1_sbgZW]
                  case e1_sbgZW of wild_sbgZX {
                    GHC.Exception.SomeException $dException1_sbgZY [Occ=Once]
                                                e3_sbgZZ [Occ=Once] ->
                        case GHC.Exception.$p1Exception $dException1_sbgZY of sat_sbh00 {
                          __DEFAULT ->
                              case
                                  Data.Typeable.Internal.sameTypeRep
                                      sat_sbh00 GHC.IO.Exception.$fExceptionIOException4
                              of
                              { GHC.Types.False ->
                                    let {
                                      sat_sbh02 [Occ=OnceT[0]]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                 GHC.IO.Handle.Types.Handle #)
                                      [LclId] =
                                          [wild_sbgZX] \r [eta_B1] raiseIO# [wild_sbgZX eta_B1];
                                    } in  sat_sbh02;
                                GHC.Types.True ->
                                    GHC.IO.Handle.FD.openBinaryFile2 fp_sbgZS e3_sbgZZ;
                              };
                        };
                  }; } in
        let {
          sat_sbgZV [Occ=Once]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     GHC.IO.Handle.Types.Handle #)
          [LclId] =
              [fp_sbgZS m_sbgZT] \r [eta_B1]
                  GHC.IO.Handle.FD.openBinaryFile5
                      fp_sbgZS m_sbgZT GHC.Types.True GHC.Types.True eta_B1;
        } in  catch# [sat_sbgZV sat_sbh04 eta_sbgZU];

GHC.IO.Handle.FD.openBinaryFile
  :: GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Handle.FD.openBinaryFile1 eta_B3 eta_B2 eta_B1;

$wstdHandleFinalizer_rbfCA
  :: GHC.IO.FilePath
     -> GHC.Prim.MVar# GHC.Prim.RealWorld GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,U><S,U><S,U>, Unf=OtherCon []] =
    sat-only [] \r [w_sbh05 ww_sbh06 w1_sbh07]
        case takeMVar# [ww_sbh06 w1_sbh07] of {
          (#,#) ipv_sbh09 [Occ=Once] ipv1_sbh0a [Occ=Once!] ->
              case ipv1_sbh0a of {
                GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                             $dBufferedIO_sbh0d [Occ=Once]
                                             _ [Occ=Dead]
                                             ds_sbh0f [Occ=Once]
                                             ds2_sbh0g [Occ=Once!]
                                             dt_sbh0h
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             ds4_sbh0m [Occ=Once*!]
                                             ds5_sbh0n [Occ=Once!]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead] ->
                    case readMutVar# [dt_sbh0h ipv_sbh09] of {
                      (#,#) ipv2_sbh0t [Occ=Once*] ipv3_sbh0u [Occ=Once!] ->
                          case ipv3_sbh0u of {
                            GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 ds11_sbh0y [Occ=Once!]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead] ->
                                let-no-escape {
                                  $w$j_sbh0C [InlPrag=NOUSERINLINE[0],
                                              Occ=Once*!T[1],
                                              Dmd=<L,1*C1(U(U,U))>]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                  [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                      sat-only [w_sbh05
                                                ww_sbh06
                                                ds2_sbh0g
                                                ds4_sbh0m
                                                ds5_sbh0n] \r [w2_sbh0D]
                                          case ds2_sbh0g of {
                                            __DEFAULT ->
                                                case ds5_sbh0n of {
                                                  GHC.Base.Nothing ->
                                                      case ds4_sbh0m of {
                                                        GHC.Base.Nothing ->
                                                            let {
                                                              sat_sbh0H [Occ=Once]
                                                                :: GHC.IO.Handle.Types.Handle__
                                                              [LclId] =
                                                                  [w_sbh05] \u []
                                                                      GHC.IO.Handle.Internals.ioe_finalizedHandle
                                                                          w_sbh05;
                                                            } in 
                                                              case
                                                                  putMVar# [ww_sbh06
                                                                            sat_sbh0H
                                                                            w2_sbh0D]
                                                              of
                                                              s2#_sbh0I
                                                              { __DEFAULT ->
                                                                    (#,#) [s2#_sbh0I GHC.Tuple.()];
                                                              };
                                                        GHC.Base.Just d_sbh0J [Occ=Once!] ->
                                                            case d_sbh0J of {
                                                              GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                                _ [Occ=Dead]
                                                                                                ds14_sbh0N [Occ=Once]
                                                                                                _ [Occ=Dead]
                                                                                                _ [Occ=Dead] ->
                                                                  case ds14_sbh0N w2_sbh0D of {
                                                                    (#,#) ipv4_sbh0R [Occ=Once]
                                                                          _ [Occ=Dead] ->
                                                                        let {
                                                                          sat_sbh0T [Occ=Once]
                                                                            :: GHC.IO.Handle.Types.Handle__
                                                                          [LclId] =
                                                                              [w_sbh05] \u []
                                                                                  GHC.IO.Handle.Internals.ioe_finalizedHandle
                                                                                      w_sbh05;
                                                                        } in 
                                                                          case
                                                                              putMVar# [ww_sbh06
                                                                                        sat_sbh0T
                                                                                        ipv4_sbh0R]
                                                                          of
                                                                          s2#_sbh0U
                                                                          { __DEFAULT ->
                                                                                (#,#) [s2#_sbh0U
                                                                                       GHC.Tuple.()];
                                                                          };
                                                                  };
                                                            };
                                                      };
                                                  GHC.Base.Just d_sbh0V [Occ=Once!] ->
                                                      case d_sbh0V of {
                                                        GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                          _ [Occ=Dead]
                                                                                          ds14_sbh0Z [Occ=Once]
                                                                                          _ [Occ=Dead]
                                                                                          _ [Occ=Dead] ->
                                                            case ds14_sbh0Z w2_sbh0D of {
                                                              (#,#) ipv4_sbh13 [Occ=Once*]
                                                                    _ [Occ=Dead] ->
                                                                  case ds4_sbh0m of {
                                                                    GHC.Base.Nothing ->
                                                                        let {
                                                                          sat_sbh16 [Occ=Once]
                                                                            :: GHC.IO.Handle.Types.Handle__
                                                                          [LclId] =
                                                                              [w_sbh05] \u []
                                                                                  GHC.IO.Handle.Internals.ioe_finalizedHandle
                                                                                      w_sbh05;
                                                                        } in 
                                                                          case
                                                                              putMVar# [ww_sbh06
                                                                                        sat_sbh16
                                                                                        ipv4_sbh13]
                                                                          of
                                                                          s2#_sbh17
                                                                          { __DEFAULT ->
                                                                                (#,#) [s2#_sbh17
                                                                                       GHC.Tuple.()];
                                                                          };
                                                                    GHC.Base.Just d1_sbh18 [Occ=Once!] ->
                                                                        case d1_sbh18 of {
                                                                          GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                                            _ [Occ=Dead]
                                                                                                            ds20_sbh1c [Occ=Once]
                                                                                                            _ [Occ=Dead]
                                                                                                            _ [Occ=Dead] ->
                                                                              case
                                                                                  ds20_sbh1c
                                                                                      ipv4_sbh13
                                                                              of
                                                                              { (#,#) ipv6_sbh1g [Occ=Once]
                                                                                      _ [Occ=Dead] ->
                                                                                    let {
                                                                                      sat_sbh1i [Occ=Once]
                                                                                        :: GHC.IO.Handle.Types.Handle__
                                                                                      [LclId] =
                                                                                          [w_sbh05] \u []
                                                                                              GHC.IO.Handle.Internals.ioe_finalizedHandle
                                                                                                  w_sbh05;
                                                                                    } in 
                                                                                      case
                                                                                          putMVar# [ww_sbh06
                                                                                                    sat_sbh1i
                                                                                                    ipv6_sbh1g]
                                                                                      of
                                                                                      s2#_sbh1j
                                                                                      { __DEFAULT ->
                                                                                            (#,#) [s2#_sbh1j
                                                                                                   GHC.Tuple.()];
                                                                                      };
                                                                              };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                            GHC.IO.Handle.Types.ClosedHandle ->
                                                let {
                                                  sat_sbh1k [Occ=Once]
                                                    :: GHC.IO.Handle.Types.Handle__
                                                  [LclId] =
                                                      [w_sbh05] \u []
                                                          GHC.IO.Handle.Internals.ioe_finalizedHandle
                                                              w_sbh05;
                                                } in 
                                                  case
                                                      putMVar# [ww_sbh06 sat_sbh1k w2_sbh0D]
                                                  of
                                                  s2#_sbh1l
                                                  { __DEFAULT -> (#,#) [s2#_sbh1l GHC.Tuple.()];
                                                  };
                                          };
                                } in 
                                  case ds11_sbh0y of {
                                    GHC.IO.Buffer.ReadBuffer -> $w$j_sbh0C ipv2_sbh0t;
                                    GHC.IO.Buffer.WriteBuffer ->
                                        case readMutVar# [dt_sbh0h ipv2_sbh0t] of {
                                          (#,#) ipv4_sbh1o [Occ=Once*] ipv5_sbh1p [Occ=Once!] ->
                                              case ipv5_sbh1p of wild3_sbh1q {
                                                GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     dt12_sbh1v [Occ=Once]
                                                                     dt13_sbh1w [Occ=Once] ->
                                                    case ==# [dt12_sbh1v dt13_sbh1w] of {
                                                      __DEFAULT ->
                                                          case
                                                              GHC.IO.BufferedIO.flushWriteBuffer
                                                                  $dBufferedIO_sbh0d
                                                                  ds_sbh0f
                                                                  wild3_sbh1q
                                                                  ipv4_sbh1o
                                                          of
                                                          { (#,#) ipv6_sbh1z [Occ=Once]
                                                                  ipv7_sbh1A [Occ=Once] ->
                                                                case
                                                                    writeMutVar# [dt_sbh0h
                                                                                  ipv7_sbh1A
                                                                                  ipv6_sbh1z]
                                                                of
                                                                s2#_sbh1B
                                                                { __DEFAULT -> $w$j_sbh0C s2#_sbh1B;
                                                                };
                                                          };
                                                      1# -> $w$j_sbh0C ipv4_sbh1o;
                                                    };
                                              };
                                        };
                                  };
                          };
                    };
              };
        };

stdHandleFinalizer_rbfCB
  :: GHC.IO.FilePath
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,U><S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [w_sbh1C w1_sbh1D w2_sbh1E]
        case w1_sbh1D of {
          GHC.MVar.MVar ww1_sbh1G [Occ=Once] ->
              $wstdHandleFinalizer_rbfCA w_sbh1C ww1_sbh1G w2_sbh1E;
        };

lvl6_rbfCC :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "<stderr>"#;

lvl7_rbfCD :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl6_rbfCC;

lvl8_rbfCE
  :: GHC.Base.Maybe
       (GHC.IO.FilePath
        -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ())
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [stdHandleFinalizer_rbfCB];

lvl9_rbfCF
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [s_sbh1H]
        case noDuplicate# [s_sbh1H] of s'_sbh1I {
          __DEFAULT ->
              case GHC.IO.Encoding.getLocaleEncoding1 of {
                (,) getLocaleEncoding3_sbh1K [Occ=Once] _ [Occ=Dead] ->
                    case getLocaleEncoding3_sbh1K s'_sbh1I of {
                      (#,#) ipv_sbh1N [Occ=Once] ipv1_sbh1O [Occ=Once] ->
                          let {
                            sat_sbh1P [Occ=Once]
                              :: GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
                            [LclId] =
                                CCCS GHC.Base.Just! [ipv1_sbh1O];
                          } in 
                            GHC.IO.Handle.Internals.mkDuplexHandle5
                                GHC.IO.FD.$fIODeviceFD
                                GHC.IO.FD.$fBufferedIOFD
                                GHC.IO.Handle.FD.fdToHandle12
                                GHC.IO.FD.stderr
                                lvl7_rbfCD
                                GHC.IO.Handle.Types.WriteHandle
                                GHC.Types.False
                                sat_sbh1P
                                GHC.IO.Handle.Types.nativeNewlineMode
                                lvl8_rbfCE
                                GHC.Base.Nothing
                                ipv_sbh1N;
                    };
              };
        };

GHC.IO.Handle.FD.stderr [InlPrag=NOINLINE]
  :: GHC.IO.Handle.Types.Handle
[GblId] =
    [] \u []
        case lvl9_rbfCF GHC.Prim.realWorld# of {
          (#,#) _ [Occ=Dead] ipv1_sbh1S [Occ=Once] -> ipv1_sbh1S;
        };

lvl10_rbfCG :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "<stdout>"#;

lvl11_rbfCH :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl10_rbfCG;

lvl12_rbfCI
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [s_sbh1T]
        case noDuplicate# [s_sbh1T] of s'_sbh1U {
          __DEFAULT ->
              case GHC.IO.Encoding.getLocaleEncoding1 of {
                (,) getLocaleEncoding3_sbh1W [Occ=Once] _ [Occ=Dead] ->
                    case getLocaleEncoding3_sbh1W s'_sbh1U of {
                      (#,#) ipv_sbh1Z [Occ=Once] ipv1_sbh20 [Occ=Once] ->
                          let {
                            sat_sbh21 [Occ=Once]
                              :: GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
                            [LclId] =
                                CCCS GHC.Base.Just! [ipv1_sbh20];
                          } in 
                            GHC.IO.Handle.Internals.mkDuplexHandle5
                                GHC.IO.FD.$fIODeviceFD
                                GHC.IO.FD.$fBufferedIOFD
                                GHC.IO.Handle.FD.fdToHandle12
                                GHC.IO.FD.stdout
                                lvl11_rbfCH
                                GHC.IO.Handle.Types.WriteHandle
                                GHC.Types.True
                                sat_sbh21
                                GHC.IO.Handle.Types.nativeNewlineMode
                                lvl8_rbfCE
                                GHC.Base.Nothing
                                ipv_sbh1Z;
                    };
              };
        };

GHC.IO.Handle.FD.stdout [InlPrag=NOINLINE]
  :: GHC.IO.Handle.Types.Handle
[GblId] =
    [] \u []
        case lvl12_rbfCI GHC.Prim.realWorld# of {
          (#,#) _ [Occ=Dead] ipv1_sbh24 [Occ=Once] -> ipv1_sbh24;
        };

lvl13_rbfCJ :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "<stdin>"#;

lvl14_rbfCK :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl13_rbfCJ;

lvl15_rbfCL
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [s_sbh25]
        case noDuplicate# [s_sbh25] of s'_sbh26 {
          __DEFAULT ->
              case GHC.IO.Encoding.getLocaleEncoding1 of {
                (,) getLocaleEncoding3_sbh28 [Occ=Once] _ [Occ=Dead] ->
                    case getLocaleEncoding3_sbh28 s'_sbh26 of {
                      (#,#) ipv_sbh2b [Occ=Once] ipv1_sbh2c [Occ=Once] ->
                          let {
                            sat_sbh2d [Occ=Once]
                              :: GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
                            [LclId] =
                                CCCS GHC.Base.Just! [ipv1_sbh2c];
                          } in 
                            GHC.IO.Handle.Internals.mkDuplexHandle5
                                GHC.IO.FD.$fIODeviceFD
                                GHC.IO.FD.$fBufferedIOFD
                                GHC.IO.Handle.FD.fdToHandle12
                                GHC.IO.FD.stdin
                                lvl14_rbfCK
                                GHC.IO.Handle.Types.ReadHandle
                                GHC.Types.True
                                sat_sbh2d
                                GHC.IO.Handle.Types.nativeNewlineMode
                                lvl8_rbfCE
                                GHC.Base.Nothing
                                ipv_sbh2b;
                    };
              };
        };

GHC.IO.Handle.FD.stdin [InlPrag=NOINLINE]
  :: GHC.IO.Handle.Types.Handle
[GblId] =
    [] \u []
        case lvl15_rbfCL GHC.Prim.realWorld# of {
          (#,#) _ [Occ=Dead] ipv1_sbh2g [Occ=Once] -> ipv1_sbh2g;
        };


==================== STG syntax: ====================
2018-03-16 16:06:13.522024965 UTC

GHC.IO.Handle.FD.fdToHandle12
  :: Data.Typeable.Internal.TypeRep GHC.IO.FD.FD
[GblId] =
    [] \u []
        case
            Data.Typeable.Internal.$wmkTrCon
                10838815552519039062##
                15546290101957756376##
                GHC.IO.FD.$trModule
                GHC.IO.FD.$tcFD1
                0#
                GHC.Types.krep$*
                GHC.Types.[]
        of
        { (#,,,,#) ww8_sbgVK [Occ=Once]
                   ww9_sbgVL [Occ=Once]
                   ww10_sbgVM [Occ=Once]
                   ww11_sbgVN [Occ=Once]
                   ww12_sbgVO [Occ=Once] ->
              Data.Typeable.Internal.TrTyCon [ww8_sbgVK
                                              ww9_sbgVL
                                              ww10_sbgVM
                                              ww11_sbgVN
                                              ww12_sbgVO];
        };

GHC.IO.Handle.FD.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.Handle.FD.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.FD.$trModule4];

GHC.IO.Handle.FD.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Handle.FD"#;

GHC.IO.Handle.FD.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Handle.FD.$trModule2];

GHC.IO.Handle.FD.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Handle.FD.$trModule3
                                     GHC.IO.Handle.FD.$trModule1];

lvl_rbfCu :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "handleToFd"#;

lvl1_rbfCv :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl_rbfCu;

lvl2_rbfCw :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "not a file descriptor"#;

lvl3_rbfCx :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl2_rbfCw;

GHC.IO.Handle.FD.handleToFd3
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.IO.FD.FD #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    [] \r [h_sbgVP void_0E]
        let {
          sat_sbgVT [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [h_sbgVP] \u []
                  let {
                    sat_sbgVR [Occ=Once] :: GHC.Base.Maybe GHC.IO.Handle.Types.Handle
                    [LclId] =
                        CCCS GHC.Base.Just! [h_sbgVP]; } in
                  let {
                    sat_sbgVS [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        CCCS GHC.IO.Exception.IOError! [sat_sbgVR
                                                        GHC.IO.Exception.InappropriateType
                                                        lvl1_rbfCv
                                                        lvl3_rbfCx
                                                        GHC.Base.Nothing
                                                        GHC.Base.Nothing];
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sbgVS;
        } in  raiseIO# [sat_sbgVT GHC.Prim.void#];

lvl4_rbfCy :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "not a file handle"#;

lvl5_rbfCz :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl4_rbfCy;

GHC.IO.Handle.FD.handleToFd2
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.IO.FD.FD #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    [] \r [h_sbgVU void_0E]
        let {
          sat_sbgVY [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [h_sbgVU] \u []
                  let {
                    sat_sbgVW [Occ=Once] :: GHC.Base.Maybe GHC.IO.Handle.Types.Handle
                    [LclId] =
                        CCCS GHC.Base.Just! [h_sbgVU]; } in
                  let {
                    sat_sbgVX [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        CCCS GHC.IO.Exception.IOError! [sat_sbgVW
                                                        GHC.IO.Exception.InappropriateType
                                                        lvl1_rbfCv
                                                        lvl5_rbfCz
                                                        GHC.Base.Nothing
                                                        GHC.Base.Nothing];
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sbgVX;
        } in  raiseIO# [sat_sbgVY GHC.Prim.void#];

GHC.IO.Handle.FD.handleToFd1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.IO.FD.FD #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h_sbgVZ void_0E]
        case h_sbgVZ of wild_sbgW1 {
          GHC.IO.Handle.Types.FileHandle _ [Occ=Dead] dt_sbgW3 [Occ=Once] ->
              case readMVar# [dt_sbgW3 GHC.Prim.void#] of {
                Unit# ipv1_sbgW6 [Occ=Once!] ->
                    case ipv1_sbgW6 of {
                      GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   $dTypeable_sbgWa [Occ=Once]
                                                   ds2_sbgWb [Occ=Once]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead]
                                                   _ [Occ=Dead] ->
                          case
                              Data.Typeable.Internal.sameTypeRep
                                  $dTypeable_sbgWa GHC.IO.Handle.FD.fdToHandle12
                          of
                          { GHC.Types.False ->
                                GHC.IO.Handle.FD.handleToFd3 wild_sbgW1 GHC.Prim.void#;
                            GHC.Types.True -> Unit# [ds2_sbgWb];
                          };
                    };
              };
          GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                           _ [Occ=Dead]
                                           _ [Occ=Dead] ->
              GHC.IO.Handle.FD.handleToFd2 wild_sbgW1 GHC.Prim.void#;
        };

GHC.IO.Handle.FD.handleToFd
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.IO.FD.FD
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.FD.handleToFd1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.FD.fdToHandle11 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "openFile"#;

GHC.IO.Handle.FD.fdToHandle10 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.FD.fdToHandle11;

GHC.IO.Handle.FD.fdToHandle9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "is a directory"#;

GHC.IO.Handle.FD.fdToHandle8 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.FD.fdToHandle9;

GHC.IO.Handle.FD.fdToHandle7 :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.InappropriateType
                                             GHC.IO.Handle.FD.fdToHandle10
                                             GHC.IO.Handle.FD.fdToHandle8
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

GHC.IO.Handle.FD.fdToHandle6 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            GHC.IO.Handle.FD.fdToHandle7;

GHC.IO.Handle.FD.fdToHandle5
  :: GHC.IO.FD.FD
     -> GHC.IO.Device.IODeviceType
     -> GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> GHC.Types.Bool
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId,
 Arity=7,
 Str=<L,U(U,U)><L,1*U><L,U><L,U><S,1*U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [fd0_sbgWs
           fd_type_sbgWt
           filepath_sbgWu
           iomode_sbgWv
           set_non_blocking_sbgWw
           mb_codec_sbgWx
           void_0E]
        let-no-escape {
          $j_sbgWz [Occ=Once*!T[2], Dmd=<L,1*C1(C1(U(U,U)))>]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> GHC.IO.FD.FD
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     GHC.IO.Handle.Types.Handle #)
          [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
              sat-only [fd_type_sbgWt
                        filepath_sbgWu
                        iomode_sbgWv
                        mb_codec_sbgWx] \r [void_0E ipv1_sbgWB]
                  let {
                    nl_sbgWC [Dmd=<L,U(U,U)>] :: GHC.IO.Handle.Types.NewlineMode
                    [LclId] =
                        [mb_codec_sbgWx] \u []
                            case mb_codec_sbgWx of {
                              __DEFAULT -> GHC.IO.Handle.Types.nativeNewlineMode;
                            };
                  } in 
                    let-no-escape {
                      fail_sbgWE [Occ=Once*!T[1], Dmd=<L,1*C1(U(U,U))>]
                        :: GHC.Prim.Void#
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 GHC.IO.Handle.Types.Handle #)
                      [LclId[JoinId(1)], Arity=1, Str=<L,A>, Unf=OtherCon []] =
                          sat-only [filepath_sbgWu
                                    iomode_sbgWv
                                    mb_codec_sbgWx
                                    ipv1_sbgWB
                                    nl_sbgWC] \r [void_0E]
                              let {
                                sat_sbgWH [Occ=Once] :: GHC.IO.Handle.Types.HandleType
                                [LclId] =
                                    [iomode_sbgWv] \u []
                                        case iomode_sbgWv of {
                                          GHC.IO.IOMode.ReadMode ->
                                              GHC.IO.Handle.Types.ReadHandle [];
                                          GHC.IO.IOMode.WriteMode ->
                                              GHC.IO.Handle.Types.WriteHandle [];
                                          GHC.IO.IOMode.AppendMode ->
                                              GHC.IO.Handle.Types.AppendHandle [];
                                          GHC.IO.IOMode.ReadWriteMode ->
                                              GHC.IO.Handle.Types.ReadWriteHandle [];
                                        };
                              } in 
                                GHC.IO.Handle.Internals.mkDuplexHandle5
                                    GHC.IO.FD.$fIODeviceFD
                                    GHC.IO.FD.$fBufferedIOFD
                                    GHC.IO.Handle.FD.fdToHandle12
                                    ipv1_sbgWB
                                    filepath_sbgWu
                                    sat_sbgWH
                                    GHC.Types.True
                                    mb_codec_sbgWx
                                    nl_sbgWC
                                    GHC.IO.Handle.Internals.mkDuplexHandle4
                                    GHC.Base.Nothing
                                    GHC.Prim.void#;
                    } in 
                      case fd_type_sbgWt of {
                        __DEFAULT -> fail_sbgWE GHC.Prim.void#;
                        GHC.IO.Device.Directory ->
                            raiseIO# [GHC.IO.Handle.FD.fdToHandle6 GHC.Prim.void#];
                        GHC.IO.Device.Stream ->
                            case iomode_sbgWv of {
                              __DEFAULT -> fail_sbgWE GHC.Prim.void#;
                              GHC.IO.IOMode.ReadWriteMode ->
                                  GHC.IO.Handle.Internals.mkDuplexHandle1
                                      GHC.IO.FD.$fIODeviceFD
                                      GHC.IO.FD.$fBufferedIOFD
                                      GHC.IO.Handle.FD.fdToHandle12
                                      ipv1_sbgWB
                                      filepath_sbgWu
                                      mb_codec_sbgWx
                                      nl_sbgWC
                                      GHC.Prim.void#;
                            };
                      };
        } in 
          case set_non_blocking_sbgWw of {
            GHC.Types.False -> $j_sbgWz GHC.Prim.void# fd0_sbgWs;
            GHC.Types.True ->
                case fd0_sbgWs of {
                  GHC.IO.FD.FD dt_sbgWM _ [Occ=Dead] ->
                      case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
                        Unit# ds1_sbgWR [Occ=Once] ->
                            let {
                              sat_sbgX0 [Occ=Once] :: GHC.Types.IO Foreign.C.Types.CInt
                              [LclId] =
                                  [dt_sbgWM ds1_sbgWR] \r [void_0E]
                                      case narrow32Int# [ds1_sbgWR] of sat_sbgWU {
                                        __DEFAULT ->
                                            case
                                                __pkg_ccall base-4.11.0.0 [dt_sbgWM
                                                                           sat_sbgWU
                                                                           GHC.Prim.void#]
                                            of
                                            { Unit# ds4_sbgWX [Occ=Once] ->
                                                  case narrow32Int# [ds4_sbgWX] of sat_sbgWY {
                                                    __DEFAULT ->
                                                        let {
                                                          sat_sbgWZ [Occ=Once] :: GHC.Int.Int32
                                                          [LclId] =
                                                              CCCS GHC.Int.I32#! [sat_sbgWY];
                                                        } in  Unit# [sat_sbgWZ];
                                                  };
                                            };
                                      };
                            } in 
                              case
                                  Foreign.C.Error.throwErrnoIfMinus1Retry2
                                      System.Posix.Internals.fdFileSize_pred
                                      System.Posix.Internals.setNonBlockingFD3
                                      sat_sbgX0
                                      GHC.Prim.void#
                              of
                              { Unit# ipv1_sbgX3 [Occ=Once] ->
                                    case ipv1_sbgX3 of {
                                      GHC.Int.I32# x_sbgX5 ->
                                          case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
                                            Unit# ds4_sbgX9 [Occ=Once] ->
                                                case narrow32Int# [ds4_sbgX9] of sat_sbgXc {
                                                  __DEFAULT ->
                                                      case int2Word# [sat_sbgXc] of sat_sbgXd {
                                                        __DEFAULT ->
                                                            case int2Word# [x_sbgX5] of sat_sbgXb {
                                                              __DEFAULT ->
                                                                  case
                                                                      or# [sat_sbgXb sat_sbgXd]
                                                                  of
                                                                  sat_sbgXe
                                                                  { __DEFAULT ->
                                                                        case
                                                                            word2Int# [sat_sbgXe]
                                                                        of
                                                                        y_sbgXa [Dmd=<S,U>]
                                                                        { __DEFAULT ->
                                                                              case
                                                                                  /=# [x_sbgX5
                                                                                       y_sbgXa]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_sbgXg [Occ=Once]
                                                                                        :: GHC.IO.FD.FD
                                                                                      [LclId] =
                                                                                          CCCS GHC.IO.FD.FD! [dt_sbgWM
                                                                                                              1#];
                                                                                    } in 
                                                                                      $j_sbgWz
                                                                                          GHC.Prim.void#
                                                                                          sat_sbgXg;
                                                                                1# ->
                                                                                    case
                                                                                        __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#]
                                                                                    of
                                                                                    { Unit# ds6_sbgXk [Occ=Once] ->
                                                                                          case
                                                                                              narrow32Int# [ds6_sbgXk]
                                                                                          of
                                                                                          sat_sbgXm
                                                                                          { __DEFAULT ->
                                                                                                case
                                                                                                    __pkg_ccall base-4.11.0.0 [dt_sbgWM
                                                                                                                               sat_sbgXm
                                                                                                                               y_sbgXa
                                                                                                                               GHC.Prim.void#]
                                                                                                of
                                                                                                { Unit# _ [Occ=Dead] ->
                                                                                                      let {
                                                                                                        sat_sbgXq [Occ=Once]
                                                                                                          :: GHC.IO.FD.FD
                                                                                                        [LclId] =
                                                                                                            CCCS GHC.IO.FD.FD! [dt_sbgWM
                                                                                                                                1#];
                                                                                                      } in 
                                                                                                        $j_sbgWz
                                                                                                            GHC.Prim.void#
                                                                                                            sat_sbgXq;
                                                                                                };
                                                                                          };
                                                                                    };
                                                                              };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                      };
                };
          };

GHC.IO.Handle.FD.mkHandleFromFD
  :: GHC.IO.FD.FD
     -> GHC.IO.Device.IODeviceType
     -> GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> GHC.Types.Bool
     -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
     -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId,
 Arity=7,
 Str=<L,U(U,U)><L,1*U><L,U><L,U><S,1*U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.FD.fdToHandle5
            eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.FD.fdToHandle'2 :: GHC.Word.Word64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W64#! [0##];

GHC.IO.Handle.FD.fdToHandle'1
  :: Foreign.C.Types.CInt
     -> GHC.Base.Maybe GHC.IO.Device.IODeviceType
     -> GHC.Types.Bool
     -> GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> GHC.Types.Bool
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId,
 Arity=7,
 Str=<L,U(U)><S,1*U><L,U><L,U><L,U><L,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [fdint_sbgXr
           mb_type_sbgXs
           is_socket_sbgXt
           filepath_sbgXu
           iomode_sbgXv
           binary_sbgXw
           void_0E]
        let-no-escape {
          $w$j_sbgXy [InlPrag=NOUSERINLINE[0],
                      Occ=Once*!T[3],
                      Dmd=<L,1*C1(C1(C1(U(U,U))))>]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> GHC.IO.FD.FD
               -> GHC.IO.Device.IODeviceType
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     GHC.IO.Handle.Types.Handle #)
          [LclId[JoinId(3)],
           Arity=3,
           Str=<S,U><L,U(U,U)><L,1*U>,
           Unf=OtherCon []] =
              sat-only [is_socket_sbgXt
                        filepath_sbgXu
                        iomode_sbgXv
                        binary_sbgXw] \r [void_0E ww_sbgXA ww1_sbgXB]
                  case binary_sbgXw of {
                    GHC.Types.False ->
                        case GHC.IO.Encoding.getLocaleEncoding1 of {
                          (,) getLocaleEncoding3_sbgXE [Occ=Once] _ [Occ=Dead] ->
                              case getLocaleEncoding3_sbgXE GHC.Prim.void# of {
                                Unit# ipv1_sbgXI [Occ=Once] ->
                                    let {
                                      sat_sbgXJ [Occ=Once]
                                        :: GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
                                      [LclId] =
                                          CCCS GHC.Base.Just! [ipv1_sbgXI];
                                    } in 
                                      GHC.IO.Handle.FD.fdToHandle5
                                          ww_sbgXA
                                          ww1_sbgXB
                                          filepath_sbgXu
                                          iomode_sbgXv
                                          is_socket_sbgXt
                                          sat_sbgXJ
                                          GHC.Prim.void#;
                              };
                        };
                    GHC.Types.True ->
                        GHC.IO.Handle.FD.fdToHandle5
                            ww_sbgXA
                            ww1_sbgXB
                            filepath_sbgXu
                            iomode_sbgXv
                            is_socket_sbgXt
                            GHC.Base.Nothing
                            GHC.Prim.void#;
                  };
        } in 
          case mb_type_sbgXs of {
            GHC.Base.Nothing ->
                case
                    GHC.IO.FD.$wmkFD
                        fdint_sbgXr
                        iomode_sbgXv
                        GHC.Base.Nothing
                        is_socket_sbgXt
                        GHC.Prim.void#
                of
                { Unit# ipv1_sbgXN [Occ=Once!] ->
                      case ipv1_sbgXN of {
                        (,) ww1_sbgXP [Occ=Once] ww2_sbgXQ [Occ=Once] ->
                            $w$j_sbgXy GHC.Prim.void# ww1_sbgXP ww2_sbgXQ;
                      };
                };
            GHC.Base.Just ds_sbgXR [Occ=Once!] ->
                case ds_sbgXR of wild1_sbgXS {
                  __DEFAULT ->
                      let {
                        sat_sbgXT [Occ=Once]
                          :: (GHC.IO.Device.IODeviceType, System.Posix.Types.CDev,
                              System.Posix.Types.CIno)
                        [LclId] =
                            CCCS (,,)! [wild1_sbgXS
                                        GHC.IO.Handle.FD.fdToHandle'2
                                        GHC.IO.Handle.FD.fdToHandle'2]; } in
                      let {
                        sat_sbgXU [Occ=Once]
                          :: GHC.Base.Maybe
                               (GHC.IO.Device.IODeviceType, System.Posix.Types.CDev,
                                System.Posix.Types.CIno)
                        [LclId] =
                            CCCS GHC.Base.Just! [sat_sbgXT];
                      } in 
                        case
                            GHC.IO.FD.$wmkFD
                                fdint_sbgXr iomode_sbgXv sat_sbgXU is_socket_sbgXt GHC.Prim.void#
                        of
                        { Unit# ipv1_sbgXX [Occ=Once!] ->
                              case ipv1_sbgXX of {
                                (,) ww1_sbgXZ [Occ=Once] ww2_sbgY0 [Occ=Once] ->
                                    $w$j_sbgXy GHC.Prim.void# ww1_sbgXZ ww2_sbgY0;
                              };
                        };
                  GHC.IO.Device.RegularFile ->
                      case
                          GHC.IO.FD.$wmkFD
                              fdint_sbgXr
                              iomode_sbgXv
                              GHC.Base.Nothing
                              is_socket_sbgXt
                              GHC.Prim.void#
                      of
                      { Unit# ipv1_sbgY3 [Occ=Once!] ->
                            case ipv1_sbgY3 of {
                              (,) ww1_sbgY5 [Occ=Once] ww2_sbgY6 [Occ=Once] ->
                                  $w$j_sbgXy GHC.Prim.void# ww1_sbgY5 ww2_sbgY6;
                            };
                      };
                };
          };

GHC.IO.Handle.FD.fdToHandle'
  :: Foreign.C.Types.CInt
     -> GHC.Base.Maybe GHC.IO.Device.IODeviceType
     -> GHC.Types.Bool
     -> GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> GHC.Types.Bool
     -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId,
 Arity=7,
 Str=<L,U(U)><S,1*U><L,U><L,U><L,U><L,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.FD.fdToHandle'1
            eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.FD.fdToHandle4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "<file descriptor: "#;

GHC.IO.Handle.FD.fdToHandle3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ">"#;

GHC.IO.Handle.FD.fdToHandle2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Handle.FD.fdToHandle3;

GHC.IO.Handle.FD.$wfdToHandle [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_sbgY7 void_0E]
        case
            System.Posix.Internals.$wfdGetMode ww_sbgY7 GHC.Prim.void#
        of
        { Unit# ipv1_sbgYb ->
              let {
                sat_sbgYc [Occ=Once] :: Foreign.C.Types.CInt
                [LclId] =
                    CCCS GHC.Int.I32#! [ww_sbgY7];
              } in 
                case
                    GHC.IO.FD.$wmkFD
                        sat_sbgYc
                        ipv1_sbgYb
                        GHC.Base.Nothing
                        GHC.Types.False
                        GHC.Prim.void#
                of
                { Unit# ipv3_sbgYf [Occ=Once!] ->
                      case ipv3_sbgYf of {
                        (,) fd_sbgYh fd_type_sbgYi [Occ=Once] ->
                            let {
                              sat_sbgYr [Occ=Once] :: GHC.IO.FilePath
                              [LclId] =
                                  [fd_sbgYh] \u []
                                      let {
                                        sat_sbgYq [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            [fd_sbgYh] \u []
                                                case fd_sbgYh of {
                                                  GHC.IO.FD.FD dt_sbgYk [Occ=Once] _ [Occ=Dead] ->
                                                      case
                                                          GHC.Show.$wshowSignedInt
                                                              0# dt_sbgYk GHC.Types.[]
                                                      of
                                                      { (#,#) ww5_sbgYn [Occ=Once]
                                                              ww6_sbgYo [Occ=Once] ->
                                                            let {
                                                              sat_sbgYp [Occ=Once]
                                                                :: [GHC.Types.Char]
                                                              [LclId] =
                                                                  CCCS :! [ww5_sbgYn ww6_sbgYo];
                                                            } in 
                                                              GHC.Base.++
                                                                  sat_sbgYp
                                                                  GHC.IO.Handle.FD.fdToHandle2;
                                                      };
                                                };
                                      } in 
                                        GHC.CString.unpackAppendCString#
                                            GHC.IO.Handle.FD.fdToHandle4 sat_sbgYq;
                            } in 
                              GHC.IO.Handle.FD.fdToHandle5
                                  fd_sbgYh
                                  fd_type_sbgYi
                                  sat_sbgYr
                                  ipv1_sbgYb
                                  GHC.Types.False
                                  GHC.Base.Nothing
                                  GHC.Prim.void#;
                      };
                };
        };

GHC.IO.Handle.FD.fdToHandle1 [InlPrag=NOUSERINLINE[0]]
  :: System.Posix.Internals.FD
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [w_sbgYs void_0E]
        case w_sbgYs of {
          GHC.Int.I32# ww1_sbgYv [Occ=Once] ->
              GHC.IO.Handle.FD.$wfdToHandle ww1_sbgYv GHC.Prim.void#;
        };

GHC.IO.Handle.FD.fdToHandle
  :: System.Posix.Internals.FD
     -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Handle.FD.fdToHandle1 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.FD.openBinaryFile5
  :: GHC.Base.String
     -> GHC.IO.IOMode.IOMode
     -> GHC.Types.Bool
     -> GHC.Types.Bool
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId,
 Arity=5,
 Str=<L,U><L,U><L,1*U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [filepath_sbgYw
           iomode_sbgYx
           binary_sbgYy
           non_blocking_sbgYz
           void_0E]
        case
            GHC.IO.FD.openFile1
                filepath_sbgYw iomode_sbgYx non_blocking_sbgYz GHC.Prim.void#
        of
        { Unit# ipv1_sbgYD [Occ=Once!] ->
              case ipv1_sbgYD of {
                (,) fd_sbgYF fd_type_sbgYG [Occ=Once] ->
                    let-no-escape {
                      $j_sbgYH [Occ=Once*!T[2], Dmd=<L,1*C1(C1(U(U,U)))>]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 GHC.IO.Handle.Types.Handle #)
                      [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
                          sat-only [filepath_sbgYw
                                    iomode_sbgYx
                                    fd_sbgYF
                                    fd_type_sbgYG] \r [void_0E ipv3_sbgYJ]
                              let {
                                sat_sbgYT [Occ=Once]
                                  :: GHC.Exception.SomeException
                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           GHC.IO.Handle.Types.Handle #)
                                [LclId] =
                                    [fd_sbgYF] \r [e_sbgYL void_0E]
                                        case fd_sbgYF of {
                                          GHC.IO.FD.FD ww1_sbgYO [Occ=Once] _ [Occ=Dead] ->
                                              case GHC.IO.FD.$w$cclose ww1_sbgYO GHC.Prim.void# of {
                                                Unit# _ [Occ=Dead] ->
                                                    raiseIO# [e_sbgYL GHC.Prim.void#];
                                              };
                                        }; } in
                              let {
                                sat_sbgYK [Occ=Once]
                                  :: GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           GHC.IO.Handle.Types.Handle #)
                                [LclId] =
                                    [filepath_sbgYw
                                     iomode_sbgYx
                                     fd_sbgYF
                                     fd_type_sbgYG
                                     ipv3_sbgYJ] \r [void_0E]
                                        GHC.IO.Handle.FD.fdToHandle5
                                            fd_sbgYF
                                            fd_type_sbgYG
                                            filepath_sbgYw
                                            iomode_sbgYx
                                            GHC.Types.False
                                            ipv3_sbgYJ
                                            GHC.Prim.void#;
                              } in  catch# [sat_sbgYK sat_sbgYT GHC.Prim.void#];
                    } in 
                      case binary_sbgYy of {
                        GHC.Types.False ->
                            case GHC.IO.Encoding.getLocaleEncoding1 of {
                              (,) getLocaleEncoding3_sbgYW [Occ=Once] _ [Occ=Dead] ->
                                  case getLocaleEncoding3_sbgYW GHC.Prim.void# of {
                                    Unit# ipv3_sbgZ0 [Occ=Once] ->
                                        let {
                                          sat_sbgZ1 [Occ=Once]
                                            :: GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
                                          [LclId] =
                                              CCCS GHC.Base.Just! [ipv3_sbgZ0];
                                        } in  $j_sbgYH GHC.Prim.void# sat_sbgZ1;
                                  };
                            };
                        GHC.Types.True -> $j_sbgYH GHC.Prim.void# GHC.Base.Nothing;
                      };
              };
        };

GHC.IO.Handle.FD.openFile2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.FilePath
     -> GHC.IO.Exception.IOException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId,
 Arity=3,
 Str=<B,U><B,1*U(U,U,A,U,U,A)><B,U>x,
 Unf=OtherCon []] =
    [] \r [w_sbgZ2 w1_sbgZ3 void_0E]
        case w1_sbgZ3 of {
          GHC.IO.Exception.IOError ww1_sbgZ6 [Occ=Once]
                                   ww2_sbgZ7 [Occ=Once]
                                   _ [Occ=Dead]
                                   ww4_sbgZ9 [Occ=Once]
                                   ww5_sbgZa [Occ=Once]
                                   _ [Occ=Dead] ->
              let {
                sat_sbgZe [Occ=Once] :: GHC.Exception.SomeException
                [LclId] =
                    [w_sbgZ2 ww1_sbgZ6 ww2_sbgZ7 ww4_sbgZ9 ww5_sbgZa] \u []
                        let {
                          sat_sbgZc [Occ=Once] :: GHC.Base.Maybe GHC.IO.FilePath
                          [LclId] =
                              CCCS GHC.Base.Just! [w_sbgZ2]; } in
                        let {
                          sat_sbgZd [Occ=Once] :: GHC.IO.Exception.IOException
                          [LclId] =
                              CCCS GHC.IO.Exception.IOError! [ww1_sbgZ6
                                                              ww2_sbgZ7
                                                              GHC.IO.Handle.FD.fdToHandle10
                                                              ww4_sbgZ9
                                                              ww5_sbgZa
                                                              sat_sbgZc];
                        } in 
                          GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sbgZd;
              } in  raiseIO# [sat_sbgZe GHC.Prim.void#];
        };

GHC.IO.Handle.FD.openFile1
  :: GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [fp_sbgZf im_sbgZg void_0E]
        let {
          sat_sbgZr [Occ=Once]
            :: GHC.Exception.SomeException
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     GHC.IO.Handle.Types.Handle #)
          [LclId] =
              [fp_sbgZf] \r [e1_sbgZj]
                  case e1_sbgZj of wild_sbgZk {
                    GHC.Exception.SomeException $dException1_sbgZl [Occ=Once]
                                                e3_sbgZm [Occ=Once] ->
                        case GHC.Exception.$p1Exception $dException1_sbgZl of sat_sbgZn {
                          __DEFAULT ->
                              case
                                  Data.Typeable.Internal.sameTypeRep
                                      sat_sbgZn GHC.IO.Exception.$fExceptionIOException4
                              of
                              { GHC.Types.False ->
                                    let {
                                      sat_sbgZp [Occ=OnceT[0]]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                 GHC.IO.Handle.Types.Handle #)
                                      [LclId] =
                                          [wild_sbgZk] \r [void_0E]
                                              raiseIO# [wild_sbgZk GHC.Prim.void#];
                                    } in  sat_sbgZp;
                                GHC.Types.True -> GHC.IO.Handle.FD.openFile2 fp_sbgZf e3_sbgZm;
                              };
                        };
                  }; } in
        let {
          sat_sbgZi [Occ=Once]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     GHC.IO.Handle.Types.Handle #)
          [LclId] =
              [fp_sbgZf im_sbgZg] \r [void_0E]
                  GHC.IO.Handle.FD.openBinaryFile5
                      fp_sbgZf im_sbgZg GHC.Types.False GHC.Types.True GHC.Prim.void#;
        } in  catch# [sat_sbgZi sat_sbgZr GHC.Prim.void#];

GHC.IO.Handle.FD.openFile
  :: GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.FD.openFile1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.FD.openFileBlocking1
  :: GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [fp_sbgZs im_sbgZt void_0E]
        let {
          sat_sbgZE [Occ=Once]
            :: GHC.Exception.SomeException
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     GHC.IO.Handle.Types.Handle #)
          [LclId] =
              [fp_sbgZs] \r [e1_sbgZw]
                  case e1_sbgZw of wild_sbgZx {
                    GHC.Exception.SomeException $dException1_sbgZy [Occ=Once]
                                                e3_sbgZz [Occ=Once] ->
                        case GHC.Exception.$p1Exception $dException1_sbgZy of sat_sbgZA {
                          __DEFAULT ->
                              case
                                  Data.Typeable.Internal.sameTypeRep
                                      sat_sbgZA GHC.IO.Exception.$fExceptionIOException4
                              of
                              { GHC.Types.False ->
                                    let {
                                      sat_sbgZC [Occ=OnceT[0]]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                 GHC.IO.Handle.Types.Handle #)
                                      [LclId] =
                                          [wild_sbgZx] \r [void_0E]
                                              raiseIO# [wild_sbgZx GHC.Prim.void#];
                                    } in  sat_sbgZC;
                                GHC.Types.True -> GHC.IO.Handle.FD.openFile2 fp_sbgZs e3_sbgZz;
                              };
                        };
                  }; } in
        let {
          sat_sbgZv [Occ=Once]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     GHC.IO.Handle.Types.Handle #)
          [LclId] =
              [fp_sbgZs im_sbgZt] \r [void_0E]
                  GHC.IO.Handle.FD.openBinaryFile5
                      fp_sbgZs im_sbgZt GHC.Types.False GHC.Types.False GHC.Prim.void#;
        } in  catch# [sat_sbgZv sat_sbgZE GHC.Prim.void#];

GHC.IO.Handle.FD.openFileBlocking
  :: GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.FD.openFileBlocking1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Handle.FD.openBinaryFile4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "openBinaryFile"#;

GHC.IO.Handle.FD.openBinaryFile3 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Handle.FD.openBinaryFile4;

GHC.IO.Handle.FD.openBinaryFile2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.FilePath
     -> GHC.IO.Exception.IOException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId,
 Arity=3,
 Str=<B,U><B,1*U(U,U,A,U,U,A)><B,U>x,
 Unf=OtherCon []] =
    [] \r [w_sbgZF w1_sbgZG void_0E]
        case w1_sbgZG of {
          GHC.IO.Exception.IOError ww1_sbgZJ [Occ=Once]
                                   ww2_sbgZK [Occ=Once]
                                   _ [Occ=Dead]
                                   ww4_sbgZM [Occ=Once]
                                   ww5_sbgZN [Occ=Once]
                                   _ [Occ=Dead] ->
              let {
                sat_sbgZR [Occ=Once] :: GHC.Exception.SomeException
                [LclId] =
                    [w_sbgZF ww1_sbgZJ ww2_sbgZK ww4_sbgZM ww5_sbgZN] \u []
                        let {
                          sat_sbgZP [Occ=Once] :: GHC.Base.Maybe GHC.IO.FilePath
                          [LclId] =
                              CCCS GHC.Base.Just! [w_sbgZF]; } in
                        let {
                          sat_sbgZQ [Occ=Once] :: GHC.IO.Exception.IOException
                          [LclId] =
                              CCCS GHC.IO.Exception.IOError! [ww1_sbgZJ
                                                              ww2_sbgZK
                                                              GHC.IO.Handle.FD.openBinaryFile3
                                                              ww4_sbgZM
                                                              ww5_sbgZN
                                                              sat_sbgZP];
                        } in 
                          GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sbgZQ;
              } in  raiseIO# [sat_sbgZR GHC.Prim.void#];
        };

GHC.IO.Handle.FD.openBinaryFile1
  :: GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [fp_sbgZS m_sbgZT void_0E]
        let {
          sat_sbh04 [Occ=Once]
            :: GHC.Exception.SomeException
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     GHC.IO.Handle.Types.Handle #)
          [LclId] =
              [fp_sbgZS] \r [e1_sbgZW]
                  case e1_sbgZW of wild_sbgZX {
                    GHC.Exception.SomeException $dException1_sbgZY [Occ=Once]
                                                e3_sbgZZ [Occ=Once] ->
                        case GHC.Exception.$p1Exception $dException1_sbgZY of sat_sbh00 {
                          __DEFAULT ->
                              case
                                  Data.Typeable.Internal.sameTypeRep
                                      sat_sbh00 GHC.IO.Exception.$fExceptionIOException4
                              of
                              { GHC.Types.False ->
                                    let {
                                      sat_sbh02 [Occ=OnceT[0]]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                 GHC.IO.Handle.Types.Handle #)
                                      [LclId] =
                                          [wild_sbgZX] \r [void_0E]
                                              raiseIO# [wild_sbgZX GHC.Prim.void#];
                                    } in  sat_sbh02;
                                GHC.Types.True ->
                                    GHC.IO.Handle.FD.openBinaryFile2 fp_sbgZS e3_sbgZZ;
                              };
                        };
                  }; } in
        let {
          sat_sbgZV [Occ=Once]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     GHC.IO.Handle.Types.Handle #)
          [LclId] =
              [fp_sbgZS m_sbgZT] \r [void_0E]
                  GHC.IO.Handle.FD.openBinaryFile5
                      fp_sbgZS m_sbgZT GHC.Types.True GHC.Types.True GHC.Prim.void#;
        } in  catch# [sat_sbgZV sat_sbh04 GHC.Prim.void#];

GHC.IO.Handle.FD.openBinaryFile
  :: GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode -> GHC.Types.IO GHC.IO.Handle.Types.Handle
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Handle.FD.openBinaryFile1 eta_B3 eta_B2 GHC.Prim.void#;

$wstdHandleFinalizer_rbfCA
  :: GHC.IO.FilePath
     -> GHC.Prim.MVar# GHC.Prim.RealWorld GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,U><S,U><S,U>, Unf=OtherCon []] =
    sat-only [] \r [w_sbh05 ww_sbh06 void_0E]
        case takeMVar# [ww_sbh06 GHC.Prim.void#] of {
          Unit# ipv1_sbh0a [Occ=Once!] ->
              case ipv1_sbh0a of {
                GHC.IO.Handle.Types.Handle__ _ [Occ=Dead]
                                             $dBufferedIO_sbh0d [Occ=Once]
                                             _ [Occ=Dead]
                                             ds_sbh0f [Occ=Once]
                                             ds2_sbh0g [Occ=Once!]
                                             dt_sbh0h
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             ds4_sbh0m [Occ=Once*!]
                                             ds5_sbh0n [Occ=Once!]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead]
                                             _ [Occ=Dead] ->
                    case readMutVar# [dt_sbh0h GHC.Prim.void#] of {
                      Unit# ipv3_sbh0u [Occ=Once!] ->
                          case ipv3_sbh0u of {
                            GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 ds11_sbh0y [Occ=Once!]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead]
                                                 _ [Occ=Dead] ->
                                let-no-escape {
                                  $w$j_sbh0C [InlPrag=NOUSERINLINE[0],
                                              Occ=Once*!T[1],
                                              Dmd=<L,1*C1(U(U,U))>]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                  [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                      sat-only [w_sbh05
                                                ww_sbh06
                                                ds2_sbh0g
                                                ds4_sbh0m
                                                ds5_sbh0n] \r [void_0E]
                                          case ds2_sbh0g of {
                                            __DEFAULT ->
                                                case ds5_sbh0n of {
                                                  GHC.Base.Nothing ->
                                                      case ds4_sbh0m of {
                                                        GHC.Base.Nothing ->
                                                            let {
                                                              sat_sbh0H [Occ=Once]
                                                                :: GHC.IO.Handle.Types.Handle__
                                                              [LclId] =
                                                                  [w_sbh05] \u []
                                                                      GHC.IO.Handle.Internals.ioe_finalizedHandle
                                                                          w_sbh05;
                                                            } in 
                                                              case
                                                                  putMVar# [ww_sbh06
                                                                            sat_sbh0H
                                                                            GHC.Prim.void#]
                                                              of
                                                              s2#_sbh0I
                                                              { (##) -> Unit# [GHC.Tuple.()];
                                                              };
                                                        GHC.Base.Just d_sbh0J [Occ=Once!] ->
                                                            case d_sbh0J of {
                                                              GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                                _ [Occ=Dead]
                                                                                                ds14_sbh0N [Occ=Once]
                                                                                                _ [Occ=Dead]
                                                                                                _ [Occ=Dead] ->
                                                                  case
                                                                      ds14_sbh0N GHC.Prim.void#
                                                                  of
                                                                  { Unit# _ [Occ=Dead] ->
                                                                        let {
                                                                          sat_sbh0T [Occ=Once]
                                                                            :: GHC.IO.Handle.Types.Handle__
                                                                          [LclId] =
                                                                              [w_sbh05] \u []
                                                                                  GHC.IO.Handle.Internals.ioe_finalizedHandle
                                                                                      w_sbh05;
                                                                        } in 
                                                                          case
                                                                              putMVar# [ww_sbh06
                                                                                        sat_sbh0T
                                                                                        GHC.Prim.void#]
                                                                          of
                                                                          s2#_sbh0U
                                                                          { (##) ->
                                                                                Unit# [GHC.Tuple.()];
                                                                          };
                                                                  };
                                                            };
                                                      };
                                                  GHC.Base.Just d_sbh0V [Occ=Once!] ->
                                                      case d_sbh0V of {
                                                        GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                          _ [Occ=Dead]
                                                                                          ds14_sbh0Z [Occ=Once]
                                                                                          _ [Occ=Dead]
                                                                                          _ [Occ=Dead] ->
                                                            case ds14_sbh0Z GHC.Prim.void# of {
                                                              Unit# _ [Occ=Dead] ->
                                                                  case ds4_sbh0m of {
                                                                    GHC.Base.Nothing ->
                                                                        let {
                                                                          sat_sbh16 [Occ=Once]
                                                                            :: GHC.IO.Handle.Types.Handle__
                                                                          [LclId] =
                                                                              [w_sbh05] \u []
                                                                                  GHC.IO.Handle.Internals.ioe_finalizedHandle
                                                                                      w_sbh05;
                                                                        } in 
                                                                          case
                                                                              putMVar# [ww_sbh06
                                                                                        sat_sbh16
                                                                                        GHC.Prim.void#]
                                                                          of
                                                                          s2#_sbh17
                                                                          { (##) ->
                                                                                Unit# [GHC.Tuple.()];
                                                                          };
                                                                    GHC.Base.Just d1_sbh18 [Occ=Once!] ->
                                                                        case d1_sbh18 of {
                                                                          GHC.IO.Encoding.Types.BufferCodec _ [Occ=Dead]
                                                                                                            _ [Occ=Dead]
                                                                                                            ds20_sbh1c [Occ=Once]
                                                                                                            _ [Occ=Dead]
                                                                                                            _ [Occ=Dead] ->
                                                                              case
                                                                                  ds20_sbh1c
                                                                                      GHC.Prim.void#
                                                                              of
                                                                              { Unit# _ [Occ=Dead] ->
                                                                                    let {
                                                                                      sat_sbh1i [Occ=Once]
                                                                                        :: GHC.IO.Handle.Types.Handle__
                                                                                      [LclId] =
                                                                                          [w_sbh05] \u []
                                                                                              GHC.IO.Handle.Internals.ioe_finalizedHandle
                                                                                                  w_sbh05;
                                                                                    } in 
                                                                                      case
                                                                                          putMVar# [ww_sbh06
                                                                                                    sat_sbh1i
                                                                                                    GHC.Prim.void#]
                                                                                      of
                                                                                      s2#_sbh1j
                                                                                      { (##) ->
                                                                                            Unit# [GHC.Tuple.()];
                                                                                      };
                                                                              };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                            GHC.IO.Handle.Types.ClosedHandle ->
                                                let {
                                                  sat_sbh1k [Occ=Once]
                                                    :: GHC.IO.Handle.Types.Handle__
                                                  [LclId] =
                                                      [w_sbh05] \u []
                                                          GHC.IO.Handle.Internals.ioe_finalizedHandle
                                                              w_sbh05;
                                                } in 
                                                  case
                                                      putMVar# [ww_sbh06 sat_sbh1k GHC.Prim.void#]
                                                  of
                                                  s2#_sbh1l
                                                  { (##) -> Unit# [GHC.Tuple.()];
                                                  };
                                          };
                                } in 
                                  case ds11_sbh0y of {
                                    GHC.IO.Buffer.ReadBuffer -> $w$j_sbh0C GHC.Prim.void#;
                                    GHC.IO.Buffer.WriteBuffer ->
                                        case readMutVar# [dt_sbh0h GHC.Prim.void#] of {
                                          Unit# ipv5_sbh1p [Occ=Once!] ->
                                              case ipv5_sbh1p of wild3_sbh1q {
                                                GHC.IO.Buffer.Buffer _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     _ [Occ=Dead]
                                                                     dt12_sbh1v [Occ=Once]
                                                                     dt13_sbh1w [Occ=Once] ->
                                                    case ==# [dt12_sbh1v dt13_sbh1w] of {
                                                      __DEFAULT ->
                                                          case
                                                              GHC.IO.BufferedIO.flushWriteBuffer
                                                                  $dBufferedIO_sbh0d
                                                                  ds_sbh0f
                                                                  wild3_sbh1q
                                                                  GHC.Prim.void#
                                                          of
                                                          { Unit# ipv7_sbh1A [Occ=Once] ->
                                                                case
                                                                    writeMutVar# [dt_sbh0h
                                                                                  ipv7_sbh1A
                                                                                  GHC.Prim.void#]
                                                                of
                                                                s2#_sbh1B
                                                                { (##) -> $w$j_sbh0C GHC.Prim.void#;
                                                                };
                                                          };
                                                      1# -> $w$j_sbh0C GHC.Prim.void#;
                                                    };
                                              };
                                        };
                                  };
                          };
                    };
              };
        };

stdHandleFinalizer_rbfCB
  :: GHC.IO.FilePath
     -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,U><S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [w_sbh1C w1_sbh1D void_0E]
        case w1_sbh1D of {
          GHC.MVar.MVar ww1_sbh1G [Occ=Once] ->
              $wstdHandleFinalizer_rbfCA w_sbh1C ww1_sbh1G GHC.Prim.void#;
        };

lvl6_rbfCC :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "<stderr>"#;

lvl7_rbfCD :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl6_rbfCC;

lvl8_rbfCE
  :: GHC.Base.Maybe
       (GHC.IO.FilePath
        -> GHC.MVar.MVar GHC.IO.Handle.Types.Handle__ -> GHC.Types.IO ())
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [stdHandleFinalizer_rbfCB];

lvl9_rbfCF
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [void_0E]
        case noDuplicate# [GHC.Prim.void#] of s'_sbh1I {
          (##) ->
              case GHC.IO.Encoding.getLocaleEncoding1 of {
                (,) getLocaleEncoding3_sbh1K [Occ=Once] _ [Occ=Dead] ->
                    case getLocaleEncoding3_sbh1K GHC.Prim.void# of {
                      Unit# ipv1_sbh1O [Occ=Once] ->
                          let {
                            sat_sbh1P [Occ=Once]
                              :: GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
                            [LclId] =
                                CCCS GHC.Base.Just! [ipv1_sbh1O];
                          } in 
                            GHC.IO.Handle.Internals.mkDuplexHandle5
                                GHC.IO.FD.$fIODeviceFD
                                GHC.IO.FD.$fBufferedIOFD
                                GHC.IO.Handle.FD.fdToHandle12
                                GHC.IO.FD.stderr
                                lvl7_rbfCD
                                GHC.IO.Handle.Types.WriteHandle
                                GHC.Types.False
                                sat_sbh1P
                                GHC.IO.Handle.Types.nativeNewlineMode
                                lvl8_rbfCE
                                GHC.Base.Nothing
                                GHC.Prim.void#;
                    };
              };
        };

GHC.IO.Handle.FD.stderr [InlPrag=NOINLINE]
  :: GHC.IO.Handle.Types.Handle
[GblId] =
    [] \u []
        case lvl9_rbfCF GHC.Prim.realWorld# of {
          Unit# ipv1_sbh1S [Occ=Once] -> ipv1_sbh1S;
        };

lvl10_rbfCG :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "<stdout>"#;

lvl11_rbfCH :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl10_rbfCG;

lvl12_rbfCI
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [void_0E]
        case noDuplicate# [GHC.Prim.void#] of s'_sbh1U {
          (##) ->
              case GHC.IO.Encoding.getLocaleEncoding1 of {
                (,) getLocaleEncoding3_sbh1W [Occ=Once] _ [Occ=Dead] ->
                    case getLocaleEncoding3_sbh1W GHC.Prim.void# of {
                      Unit# ipv1_sbh20 [Occ=Once] ->
                          let {
                            sat_sbh21 [Occ=Once]
                              :: GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
                            [LclId] =
                                CCCS GHC.Base.Just! [ipv1_sbh20];
                          } in 
                            GHC.IO.Handle.Internals.mkDuplexHandle5
                                GHC.IO.FD.$fIODeviceFD
                                GHC.IO.FD.$fBufferedIOFD
                                GHC.IO.Handle.FD.fdToHandle12
                                GHC.IO.FD.stdout
                                lvl11_rbfCH
                                GHC.IO.Handle.Types.WriteHandle
                                GHC.Types.True
                                sat_sbh21
                                GHC.IO.Handle.Types.nativeNewlineMode
                                lvl8_rbfCE
                                GHC.Base.Nothing
                                GHC.Prim.void#;
                    };
              };
        };

GHC.IO.Handle.FD.stdout [InlPrag=NOINLINE]
  :: GHC.IO.Handle.Types.Handle
[GblId] =
    [] \u []
        case lvl12_rbfCI GHC.Prim.realWorld# of {
          Unit# ipv1_sbh24 [Occ=Once] -> ipv1_sbh24;
        };

lvl13_rbfCJ :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "<stdin>"#;

lvl14_rbfCK :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl13_rbfCJ;

lvl15_rbfCL
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Handle.Types.Handle #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [void_0E]
        case noDuplicate# [GHC.Prim.void#] of s'_sbh26 {
          (##) ->
              case GHC.IO.Encoding.getLocaleEncoding1 of {
                (,) getLocaleEncoding3_sbh28 [Occ=Once] _ [Occ=Dead] ->
                    case getLocaleEncoding3_sbh28 GHC.Prim.void# of {
                      Unit# ipv1_sbh2c [Occ=Once] ->
                          let {
                            sat_sbh2d [Occ=Once]
                              :: GHC.Base.Maybe GHC.IO.Encoding.Types.TextEncoding
                            [LclId] =
                                CCCS GHC.Base.Just! [ipv1_sbh2c];
                          } in 
                            GHC.IO.Handle.Internals.mkDuplexHandle5
                                GHC.IO.FD.$fIODeviceFD
                                GHC.IO.FD.$fBufferedIOFD
                                GHC.IO.Handle.FD.fdToHandle12
                                GHC.IO.FD.stdin
                                lvl14_rbfCK
                                GHC.IO.Handle.Types.ReadHandle
                                GHC.Types.True
                                sat_sbh2d
                                GHC.IO.Handle.Types.nativeNewlineMode
                                lvl8_rbfCE
                                GHC.Base.Nothing
                                GHC.Prim.void#;
                    };
              };
        };

GHC.IO.Handle.FD.stdin [InlPrag=NOINLINE]
  :: GHC.IO.Handle.Types.Handle
[GblId] =
    [] \u []
        case lvl15_rbfCL GHC.Prim.realWorld# of {
          Unit# ipv1_sbh2g [Occ=Once] -> ipv1_sbh2g;
        };

