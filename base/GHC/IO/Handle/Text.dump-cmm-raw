
==================== Raw Cmm ====================
2018-03-16 16:06:03.303426557 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:06:03.304568734 UTC

[section ""cstring" . lvl_rb6WB_bytes" {
     lvl_rb6WB_bytes:
         I8[] [105,108,108,101,103,97,108,32,98,117,102,102,101,114,32,115,105,122,101,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.308641405 UTC

[section ""data" . GHC.IO.Handle.Text.$willegalBufferSize_closure" {
     GHC.IO.Handle.Text.$willegalBufferSize_closure:
         const GHC.IO.Handle.Text.$willegalBufferSize_info;
         const 0;
 },
 sat_sb6Xn_entry() //  [R1]
         { []
         }
     {offset
       cb9YN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cb9YO; else goto cb9YP;
       cb9YO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cb9YP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cb9YK_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 9;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sb6Xn_info" {
     sat_sb6Xn_info:
         const sat_sb6Xn_entry;
         const 4294967296;
         const 17;
 },
 _cb9YK() //  [R1, R2]
         { []
         }
     {offset
       cb9YK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cb9YS; else goto cb9YR;
       cb9YS: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cb9YR: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cb9YK_info" {
     block_cb9YK_info:
         const _cb9YK;
         const 0;
         const 30;
 },
 sat_sb6Xo_entry() //  [R1]
         { []
         }
     {offset
       cb9YT: // global
           _sb6Xo::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cb9YU; else goto cb9YV;
       cb9YV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cb9YX; else goto cb9YW;
       cb9YX: // global
           HpAlloc = 24;
           goto cb9YU;
       cb9YU: // global
           R1 = _sb6Xo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cb9YW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sb6Xo::P64;
           _sb6Xh::I64 = I64[_sb6Xo::P64 + 16];
           I64[Hp - 16] = sat_sb6Xn_info;
           I64[Hp] = _sb6Xh::I64;
           R3 = Hp - 16;
           R2 = lvl_rb6WB_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sb6Xo_info" {
     sat_sb6Xo_info:
         const sat_sb6Xo_entry;
         const 4294967296;
         const 17;
 },
 sat_sb6Xq_entry() //  [R1]
         { []
         }
     {offset
       cb9Z0: // global
           _sb6Xq::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cb9Z1; else goto cb9Z2;
       cb9Z2: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cb9Z4; else goto cb9Z3;
       cb9Z4: // global
           HpAlloc = 96;
           goto cb9Z1;
       cb9Z1: // global
           R1 = _sb6Xq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cb9Z3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sb6Xq::P64;
           _sb6Xf::P64 = P64[_sb6Xq::P64 + 16];
           _sb6Xg::P64 = P64[_sb6Xq::P64 + 24];
           _sb6Xh::I64 = I64[_sb6Xq::P64 + 32];
           I64[Hp - 88] = sat_sb6Xo_info;
           I64[Hp - 72] = _sb6Xh::I64;
           I64[Hp - 64] = GHC.Base.Just_con_info;
           P64[Hp - 56] = _sb6Xf::P64;
           I64[Hp - 48] = GHC.IO.Exception.IOError_con_info;
           P64[Hp - 40] = Hp - 62;
           P64[Hp - 32] = GHC.IO.Exception.InvalidArgument_closure+1;
           P64[Hp - 24] = _sb6Xg::P64;
           P64[Hp - 16] = Hp - 88;
           P64[Hp - 8] = GHC.Base.Nothing_closure+1;
           P64[Hp] = GHC.Base.Nothing_closure+1;
           R2 = Hp - 47;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sb6Xq_info" {
     sat_sb6Xq_info:
         const sat_sb6Xq_entry;
         const 4294967298;
         const 4294967311;
         const Sb7vQ_srt;
 },
 GHC.IO.Handle.Text.$willegalBufferSize_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cb9Z5: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cb9Z9; else goto cb9Z8;
       cb9Z9: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.$willegalBufferSize_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cb9Z8: // global
           I64[Hp - 32] = sat_sb6Xq_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           I64[Hp] = R4;
           R1 = Hp - 32;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.$willegalBufferSize_info" {
     GHC.IO.Handle.Text.$willegalBufferSize_info:
         const GHC.IO.Handle.Text.$willegalBufferSize_entry;
         const 0;
         const 12884901902;
         const 17179869206;
         const Sb7vQ_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.318855731 UTC

[section ""cstring" . GHC.IO.Handle.Text.$trModule4_bytes" {
     GHC.IO.Handle.Text.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.32051176 UTC

[section ""data" . GHC.IO.Handle.Text.$trModule3_closure" {
     GHC.IO.Handle.Text.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Text.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.322325532 UTC

[section ""cstring" . GHC.IO.Handle.Text.$trModule2_bytes" {
     GHC.IO.Handle.Text.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,46,72,97,110,100,108,101,46,84,101,120,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.323945269 UTC

[section ""data" . GHC.IO.Handle.Text.$trModule1_closure" {
     GHC.IO.Handle.Text.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Text.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.325551642 UTC

[section ""data" . GHC.IO.Handle.Text.$trModule_closure" {
     GHC.IO.Handle.Text.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.Handle.Text.$trModule3_closure+1;
         const GHC.IO.Handle.Text.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.33074772 UTC

[section ""data" . memcpy1_rb6WC_closure" {
     memcpy1_rb6WC_closure:
         const memcpy1_rb6WC_info;
 },
 memcpy1_rb6WC_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cb9ZI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cba00; else goto cba01;
       cba00: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = memcpy1_rb6WC_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cba01: // global
           I64[Sp - 24] = block_cb9ZF_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uba08; else goto cb9ZG;
       uba08: // global
           call _cb9ZF(R1) args: 0, res: 0, upd: 0;
       cb9ZG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . memcpy1_rb6WC_info" {
     memcpy1_rb6WC_info:
         const memcpy1_rb6WC_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _cb9ZF() //  [R1]
         { []
         }
     {offset
       cb9ZF: // global
           I64[Sp] = block_cb9ZL_info;
           _sb6Xw::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sb6Xw::I64;
           if (R1 & 7 != 0) goto uba07; else goto cb9ZM;
       uba07: // global
           call _cb9ZL(R1) args: 0, res: 0, upd: 0;
       cb9ZM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cb9ZF_info" {
     block_cb9ZF_info:
         const _cb9ZF;
         const 2;
         const 30;
 },
 _cb9ZL() //  [R1]
         { []
         }
     {offset
       cb9ZL: // global
           I64[Sp] = block_cb9ZQ_info;
           _sb6Xy::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _sb6Xy::I64;
           if (R1 & 7 != 0) goto uba09; else goto cb9ZR;
       uba09: // global
           call _cb9ZQ(R1) args: 0, res: 0, upd: 0;
       cb9ZR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cb9ZL_info" {
     block_cb9ZL_info:
         const _cb9ZL;
         const 66;
         const 30;
 },
 _cb9ZQ() //  [R1]
         { []
         }
     {offset
       cb9ZQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cba06; else goto cba05;
       cba06: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cba05: // global
           (_sb6XE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memcpy(I64[Sp + 8], I64[Sp + 16], I64[R1 + 7]);
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sb6XE::I64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cb9ZQ_info" {
     block_cb9ZQ_info:
         const _cb9ZQ;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.339163559 UTC

[section ""data" . GHC.IO.Handle.Text.memcpy_closure" {
     GHC.IO.Handle.Text.memcpy_closure:
         const GHC.IO.Handle.Text.memcpy_info;
 },
 GHC.IO.Handle.Text.memcpy_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cba0w: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call memcpy1_rb6WC_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.memcpy_info" {
     GHC.IO.Handle.Text.memcpy_info:
         const GHC.IO.Handle.Text.memcpy_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.350134968 UTC

[section ""data" . GHC.IO.Handle.Text.$wcommitBuffer'_closure" {
     GHC.IO.Handle.Text.$wcommitBuffer'_closure:
         const GHC.IO.Handle.Text.$wcommitBuffer'_info;
 },
 GHC.IO.Handle.Text.$wcommitBuffer'_slow() //  [R1]
         { []
         }
     {offset
       cba0E: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.Handle.Text.$wcommitBuffer'_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2,
                                                         R1) args: 24, res: 0, upd: 8;
     }
 },
 GHC.IO.Handle.Text.$wcommitBuffer'_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cba0L: // global
           if ((Sp + -96) < SpLim) (likely: False) goto cba0M; else goto cba0N;
       cba0M: // global
           R1 = GHC.IO.Handle.Text.$wcommitBuffer'_closure;
           I64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cba0N: // global
           I64[Sp - 40] = block_cba0I_info;
           R1 = P64[Sp + 8];
           P64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           I64[Sp + 8] = R2;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uba3g; else goto cba0J;
       uba3g: // global
           call _cba0I(R1) args: 0, res: 0, upd: 0;
       cba0J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.$wcommitBuffer'_info" {
     GHC.IO.Handle.Text.$wcommitBuffer'_info:
         const GHC.IO.Handle.Text.$wcommitBuffer'_entry;
         const 0;
         const 14;
         const 34359738368;
         const 0;
         const 839;
         const GHC.IO.Handle.Text.$wcommitBuffer'_slow;
 },
 _cba0I() //  [R1]
         { []
         }
     {offset
       cba0I: // global
           I64[Sp - 40] = block_cba0Q_info;
           R6 = I64[Sp + 16];
           R5 = GHC.IO.Buffer.WriteBuffer_closure+2;
           R4 = P64[Sp + 8];
           R3 = I64[Sp + 48];
           R2 = R1;
           I64[Sp - 56] = 0;
           I64[Sp - 48] = I64[Sp + 24];
           P64[Sp - 32] = P64[R1 + 31];
           P64[Sp - 24] = P64[R1 + 47];
           P64[Sp - 16] = P64[R1 + 71];
           P64[Sp - 8] = P64[R1 + 79];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 56;
           call GHC.IO.Handle.Internals.$wwriteCharBuffer_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cba0I_info" {
     block_cba0I_info:
         const _cba0I;
         const 2438;
         const 30;
 },
 _cba0Q() //  []
         { []
         }
     {offset
       cba0Q: // global
           I64[Sp] = block_cba0S_info;
           R1 = P64[Sp + 72];
           if (R1 & 7 != 0) goto uba3h; else goto cba0V;
       uba3h: // global
           call _cba0S(R1) args: 0, res: 0, upd: 0;
       cba0V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cba0Q_info" {
     block_cba0Q_info:
         const _cba0Q;
         const 77835;
         const 30;
 },
 _cba0S() //  [R1]
         { []
         }
     {offset
       cba0S: // global
           if (R1 & 7 == 1) goto cba12; else goto cba1H;
       cba12: // global
           I64[Sp + 16] = block_cba0Z_info;
           R1 = P64[Sp + 80];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uba3i; else goto cba13;
       uba3i: // global
           call _cba0Z(R1) args: 0, res: 0, upd: 0;
       cba13: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cba1H: // global
           _sb6Yw::P64 = P64[P64[Sp + 16] + 8];
           I64[Sp] = block_cba1F_info;
           R1 = _sb6Yw::P64;
           if (R1 & 7 != 0) goto uba3j; else goto cba1I;
       uba3j: // global
           call _cba1F(R1) args: 0, res: 0, upd: 0;
       cba1I: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cba0S_info" {
     block_cba0S_info:
         const _cba0S;
         const 94219;
         const 30;
 },
 _cba0Z() //  [R1]
         { []
         }
     {offset
       cba0Z: // global
           if (R1 & 7 == 1) goto cba19; else goto cba1h;
       cba19: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cba1c; else goto cba1b;
       cba1c: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cba1b: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = GHC.IO.Buffer.WriteBuffer_closure+2;
           I64[Hp - 24] = I64[Sp + 72];
           I64[Hp - 16] = I64[Sp + 40];
           I64[Hp - 8] = 0;
           I64[Hp] = I64[Sp + 48];
           R1 = Hp - 47;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cba1h: // global
           _sb6Yd::P64 = P64[P64[Sp + 8] + 8];
           I64[Sp + 8] = block_cba1f_info;
           R1 = _sb6Yd::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uba3k; else goto cba1i;
       uba3k: // global
           call _cba1f(R1) args: 0, res: 0, upd: 0;
       cba1i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cba0Z_info" {
     block_cba0Z_info:
         const _cba0Z;
         const 32009;
         const 30;
 },
 _cba1f() //  [R1]
         { []
         }
     {offset
       cba1f: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cba1o; else goto cba1n;
       cba1o: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cba1n: // global
           _sb6XG::I64 = I64[Sp + 64];
           _sb6XH::P64 = P64[Sp + 24];
           _sb6XI::I64 = I64[Sp + 32];
           _sb6XJ::I64 = I64[Sp + 40];
           if (_sb6XI::I64 == I64[R1 + 31]) goto cba1C; else goto cba1u;
       cba1C: // global
           _sb6XY::P64 = P64[Sp + 8];
           _sb6Yp::P64 = P64[_sb6XY::P64 + 8];
           I64[Hp - 96] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 88] = _sb6XH::P64;
           I64[Hp - 80] = _sb6XG::I64;
           I64[Hp - 72] = GHC.IO.Handle.Types.BufferListCons_con_info;
           P64[Hp - 64] = Hp - 95;
           P64[Hp - 56] = _sb6Yp::P64;
           call MO_WriteBarrier();
           P64[_sb6XY::P64 + 8] = Hp - 70;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb6XY::P64);
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sb6XH::P64;
           P64[Hp - 32] = GHC.IO.Buffer.WriteBuffer_closure+2;
           I64[Hp - 24] = _sb6XG::I64;
           I64[Hp - 16] = _sb6XI::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = _sb6XJ::I64;
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cba1u: // global
           I64[Hp - 96] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 88] = _sb6XH::P64;
           P64[Hp - 80] = GHC.IO.Buffer.WriteBuffer_closure+2;
           I64[Hp - 72] = _sb6XG::I64;
           I64[Hp - 64] = _sb6XI::I64;
           I64[Hp - 56] = 0;
           I64[Hp - 48] = _sb6XJ::I64;
           _cba1s::P64 = Hp - 95;
           Hp = Hp - 48;
           R1 = _cba1s::P64;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cba1f_info" {
     block_cba1f_info:
         const _cba1f;
         const 16008;
         const 30;
 },
 _cba1F() //  [R1]
         { []
         }
     {offset
       cba1F: // global
           if (I64[R1 + 39] == I64[R1 + 47]) goto cba2B; else goto cba1X;
       cba2B: // global
           I64[Sp + 16] = block_cba2A_info;
           R1 = P64[Sp + 80];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uba3l; else goto cba2C;
       uba3l: // global
           call _cba2A(R1) args: 0, res: 0, upd: 0;
       cba2C: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cba1X: // global
           _sb6XS::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cba1Q_info;
           R2 = P64[Sp + 40];
           I64[Sp - 16] = stg_ap_ppv_info;
           P64[Sp - 8] = _sb6XS::P64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.IO.BufferedIO.flushWriteBuffer_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cba1F_info" {
     block_cba1F_info:
         const _cba1F;
         const 94219;
         const 30;
 },
 _cba2A() //  [R1]
         { []
         }
     {offset
       cba2A: // global
           if (R1 & 7 == 1) goto cba2I; else goto cba2Q;
       cba2I: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cba2L; else goto cba2K;
       cba2L: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cba2K: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = GHC.IO.Buffer.WriteBuffer_closure+2;
           I64[Hp - 24] = I64[Sp + 72];
           I64[Hp - 16] = I64[Sp + 40];
           I64[Hp - 8] = 0;
           I64[Hp] = I64[Sp + 48];
           R1 = Hp - 47;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cba2Q: // global
           _sb6Z8::P64 = P64[P64[Sp + 8] + 8];
           I64[Sp + 8] = block_cba2O_info;
           R1 = _sb6Z8::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uba3o; else goto cba2R;
       uba3o: // global
           call _cba2O(R1) args: 0, res: 0, upd: 0;
       cba2R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cba2A_info" {
     block_cba2A_info:
         const _cba2A;
         const 32009;
         const 30;
 },
 _cba2O() //  [R1]
         { []
         }
     {offset
       cba2O: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cba2X; else goto cba2W;
       cba2X: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cba2W: // global
           _sb6XG::I64 = I64[Sp + 64];
           _sb6XH::P64 = P64[Sp + 24];
           _sb6XI::I64 = I64[Sp + 32];
           _sb6XJ::I64 = I64[Sp + 40];
           if (_sb6XI::I64 == I64[R1 + 31]) goto cba3b; else goto cba33;
       cba3b: // global
           _sb6XY::P64 = P64[Sp + 8];
           _sb6Zk::P64 = P64[_sb6XY::P64 + 8];
           I64[Hp - 96] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 88] = _sb6XH::P64;
           I64[Hp - 80] = _sb6XG::I64;
           I64[Hp - 72] = GHC.IO.Handle.Types.BufferListCons_con_info;
           P64[Hp - 64] = Hp - 95;
           P64[Hp - 56] = _sb6Zk::P64;
           call MO_WriteBarrier();
           P64[_sb6XY::P64 + 8] = Hp - 70;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb6XY::P64);
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sb6XH::P64;
           P64[Hp - 32] = GHC.IO.Buffer.WriteBuffer_closure+2;
           I64[Hp - 24] = _sb6XG::I64;
           I64[Hp - 16] = _sb6XI::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = _sb6XJ::I64;
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cba33: // global
           I64[Hp - 96] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 88] = _sb6XH::P64;
           P64[Hp - 80] = GHC.IO.Buffer.WriteBuffer_closure+2;
           I64[Hp - 72] = _sb6XG::I64;
           I64[Hp - 64] = _sb6XI::I64;
           I64[Hp - 56] = 0;
           I64[Hp - 48] = _sb6XJ::I64;
           _cba31::P64 = Hp - 95;
           Hp = Hp - 48;
           R1 = _cba31::P64;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cba2O_info" {
     block_cba2O_info:
         const _cba2O;
         const 16008;
         const 30;
 },
 _cba1Q() //  [R1]
         { []
         }
     {offset
       cba1Q: // global
           _sb6XL::P64 = P64[Sp + 72];
           _sb6XU::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_sb6XU::P64 + 8] = R1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb6XU::P64);
           I64[Sp + 8] = block_cba1V_info;
           R1 = _sb6XL::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uba3m; else goto cba1Z;
       uba3m: // global
           call _cba1V(R1) args: 0, res: 0, upd: 0;
       cba1Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cba1Q_info" {
     block_cba1Q_info:
         const _cba1Q;
         const 47626;
         const 30;
 },
 _cba1V() //  [R1]
         { []
         }
     {offset
       cba1V: // global
           if (R1 & 7 == 1) goto cba25; else goto cba2d;
       cba25: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cba28; else goto cba27;
       cba28: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cba27: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = GHC.IO.Buffer.WriteBuffer_closure+2;
           I64[Hp - 24] = I64[Sp + 72];
           I64[Hp - 16] = I64[Sp + 40];
           I64[Hp - 8] = 0;
           I64[Hp] = I64[Sp + 48];
           R1 = Hp - 47;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cba2d: // global
           _sb6YN::P64 = P64[P64[Sp + 8] + 8];
           I64[Sp + 8] = block_cba2b_info;
           R1 = _sb6YN::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uba3n; else goto cba2e;
       uba3n: // global
           call _cba2b(R1) args: 0, res: 0, upd: 0;
       cba2e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cba1V_info" {
     block_cba1V_info:
         const _cba1V;
         const 32009;
         const 30;
 },
 _cba2b() //  [R1]
         { []
         }
     {offset
       cba2b: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cba2k; else goto cba2j;
       cba2k: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cba2j: // global
           _sb6XG::I64 = I64[Sp + 64];
           _sb6XH::P64 = P64[Sp + 24];
           _sb6XI::I64 = I64[Sp + 32];
           _sb6XJ::I64 = I64[Sp + 40];
           if (_sb6XI::I64 == I64[R1 + 31]) goto cba2y; else goto cba2q;
       cba2y: // global
           _sb6XY::P64 = P64[Sp + 8];
           _sb6YZ::P64 = P64[_sb6XY::P64 + 8];
           I64[Hp - 96] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 88] = _sb6XH::P64;
           I64[Hp - 80] = _sb6XG::I64;
           I64[Hp - 72] = GHC.IO.Handle.Types.BufferListCons_con_info;
           P64[Hp - 64] = Hp - 95;
           P64[Hp - 56] = _sb6YZ::P64;
           call MO_WriteBarrier();
           P64[_sb6XY::P64 + 8] = Hp - 70;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb6XY::P64);
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sb6XH::P64;
           P64[Hp - 32] = GHC.IO.Buffer.WriteBuffer_closure+2;
           I64[Hp - 24] = _sb6XG::I64;
           I64[Hp - 16] = _sb6XI::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = _sb6XJ::I64;
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cba2q: // global
           I64[Hp - 96] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 88] = _sb6XH::P64;
           P64[Hp - 80] = GHC.IO.Buffer.WriteBuffer_closure+2;
           I64[Hp - 72] = _sb6XG::I64;
           I64[Hp - 64] = _sb6XI::I64;
           I64[Hp - 56] = 0;
           I64[Hp - 48] = _sb6XJ::I64;
           _cba2o::P64 = Hp - 95;
           Hp = Hp - 48;
           R1 = _cba2o::P64;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cba2b_info" {
     block_cba2b_info:
         const _cba2b;
         const 16008;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.379498796 UTC

[section ""data" . GHC.IO.Handle.Text.commitBuffer'1_closure" {
     GHC.IO.Handle.Text.commitBuffer'1_closure:
         const GHC.IO.Handle.Text.commitBuffer'1_info;
 },
 GHC.IO.Handle.Text.commitBuffer'1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cba57: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cba5g; else goto cba5h;
       cba5g: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.commitBuffer'1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cba5h: // global
           I64[Sp - 40] = block_cba54_info;
           R1 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uba5q; else goto cba55;
       uba5q: // global
           call _cba54(R1) args: 0, res: 0, upd: 0;
       cba55: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.commitBuffer'1_info" {
     GHC.IO.Handle.Text.commitBuffer'1_info:
         const GHC.IO.Handle.Text.commitBuffer'1_entry;
         const 0;
         const 14;
         const 30064771098;
 },
 _cba54() //  [R1]
         { []
         }
     {offset
       cba54: // global
           I64[Sp - 8] = block_cba5a_info;
           _sb6Zy::P64 = P64[R1 + 7];
           _sb6Zx::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _sb6Zy::P64;
           I64[Sp + 8] = _sb6Zx::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uba5p; else goto cba5b;
       uba5p: // global
           call _cba5a(R1) args: 0, res: 0, upd: 0;
       cba5b: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cba54_info" {
     block_cba54_info:
         const _cba54;
         const 5;
         const 30;
 },
 _cba5a() //  [R1]
         { []
         }
     {offset
       cba5a: // global
           I64[Sp] = block_cba5f_info;
           _sb6ZA::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _sb6ZA::I64;
           if (R1 & 7 != 0) goto uba5r; else goto cba5k;
       uba5r: // global
           call _cba5f(R1) args: 0, res: 0, upd: 0;
       cba5k: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cba5a_info" {
     block_cba5a_info:
         const _cba5a;
         const 134;
         const 30;
 },
 _cba5f() //  [R1]
         { []
         }
     {offset
       cba5f: // global
           R6 = P64[Sp + 32];
           R5 = I64[R1 + 7];
           R4 = I64[Sp + 24];
           R3 = P64[Sp + 8];
           R2 = I64[Sp + 16];
           Sp = Sp + 40;
           call GHC.IO.Handle.Text.$wcommitBuffer'_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cba5f_info" {
     block_cba5f_info:
         const _cba5f;
         const 390;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.388163702 UTC

[section ""data" . GHC.IO.Handle.Text.commitBuffer'_closure" {
     GHC.IO.Handle.Text.commitBuffer'_closure:
         const GHC.IO.Handle.Text.commitBuffer'_info;
 },
 GHC.IO.Handle.Text.commitBuffer'_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cba5N: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.Text.commitBuffer'1_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.commitBuffer'_info" {
     GHC.IO.Handle.Text.commitBuffer'_info:
         const GHC.IO.Handle.Text.commitBuffer'_entry;
         const 0;
         const 14;
         const 30064771098;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.39120277 UTC

[section ""cstring" . lvl1_rb6WD_bytes" {
     lvl1_rb6WD_bytes:
         I8[] [99,111,109,109,105,116,66,117,102,102,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.393437884 UTC

[section ""data" . lvl2_rb6WE_closure" {
     lvl2_rb6WE_closure:
         const lvl2_rb6WE_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_rb6WE_entry() //  [R1]
         { []
         }
     {offset
       cba61: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cba62; else goto cba63;
       cba62: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cba63: // global
           (_cba5Y::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cba5Y::I64 == 0) goto cba60; else goto cba5Z;
       cba60: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cba5Z: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cba5Y::I64;
           R2 = lvl1_rb6WD_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_rb6WE_info" {
     lvl2_rb6WE_info:
         const lvl2_rb6WE_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.396739385 UTC

[section ""cstring" . GHC.IO.Handle.Text.hPutChar3_bytes" {
     GHC.IO.Handle.Text.hPutChar3_bytes:
         I8[] [104,80,117,116,67,104,97,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.39919239 UTC

[section ""data" . GHC.IO.Handle.Text.hPutChar2_closure" {
     GHC.IO.Handle.Text.hPutChar2_closure:
         const GHC.IO.Handle.Text.hPutChar2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Text.hPutChar2_entry() //  [R1]
         { []
         }
     {offset
       cba6i: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cba6j; else goto cba6k;
       cba6j: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cba6k: // global
           (_cba6f::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cba6f::I64 == 0) goto cba6h; else goto cba6g;
       cba6h: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cba6g: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cba6f::I64;
           R2 = GHC.IO.Handle.Text.hPutChar3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hPutChar2_info" {
     GHC.IO.Handle.Text.hPutChar2_info:
         const GHC.IO.Handle.Text.hPutChar2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.408633476 UTC

[section ""data" . GHC.IO.Handle.Text.$whPutChar_closure" {
     GHC.IO.Handle.Text.$whPutChar_closure:
         const GHC.IO.Handle.Text.$whPutChar_info;
         const 0;
 },
 act_sb6ZG_entry() //  [R1, R2]
         { []
         }
     {offset
       cba6E: // global
           if ((Sp + -88) < SpLim) (likely: False) goto cba6F; else goto cba6G;
       cba6F: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cba6G: // global
           I64[Sp - 16] = block_cba6B_info;
           _sb6ZE::I64 = I64[R1 + 6];
           R1 = R2;
           I64[Sp - 8] = _sb6ZE::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uba8k; else goto cba6C;
       uba8k: // global
           call _cba6B(R1) args: 0, res: 0, upd: 0;
       cba6C: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . act_sb6ZG_info" {
     act_sb6ZG_info:
         const act_sb6ZG_entry;
         const 4294967296;
         const 10;
         const 8589934597;
 },
 _cba6B() //  [R1]
         { []
         }
     {offset
       cba6B: // global
           _sb702::P64 = P64[P64[R1 + 71] + 8];
           _sb703::I64 = I64[Sp + 8];
           if (_sb703::I64 == 10) goto cba7D; else goto cba6X;
       cba7D: // global
           I64[Sp - 40] = block_cba74_info;
           _sb6ZJ::P64 = R1;
           _sb6ZL::P64 = P64[R1 + 15];
           _sb6ZN::P64 = P64[R1 + 31];
           _sb6ZP::P64 = P64[R1 + 47];
           _sb6ZQ::P64 = P64[R1 + 55];
           R1 = P64[R1 + 119];
           P64[Sp - 32] = _sb6ZN::P64;
           P64[Sp - 24] = _sb6ZP::P64;
           P64[Sp - 16] = _sb6ZQ::P64;
           P64[Sp - 8] = _sb702::P64;
           P64[Sp] = _sb6ZL::P64;
           P64[Sp + 8] = _sb6ZJ::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uba8j; else goto cba7E;
       uba8j: // global
           call _cba74(R1) args: 0, res: 0, upd: 0;
       cba7E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cba6X: // global
           I64[Sp - 8] = block_cba6M_info;
           _sb6ZJ::P64 = R1;
           R1 = _sb702::P64;
           I64[Sp] = _sb703::I64;
           P64[Sp + 8] = _sb6ZJ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uba8i; else goto cba6N;
       uba8i: // global
           call _cba6M(R1) args: 0, res: 0, upd: 0;
       cba6N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cba6B_info" {
     block_cba6B_info:
         const _cba6B;
         const 65;
         const 30;
 },
 _cba74() //  [R1]
         { []
         }
     {offset
       cba74: // global
           _sb702::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cba7L; else goto cba7V;
       cba7L: // global
           I64[Sp] = block_cba7I_info;
           R1 = _sb702::P64;
           if (R1 & 7 != 0) goto uba8l; else goto cba7M;
       uba8l: // global
           call _cba7I(R1) args: 0, res: 0, upd: 0;
       cba7M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cba7V: // global
           I64[Sp] = block_cba7T_info;
           R1 = _sb702::P64;
           if (R1 & 7 != 0) goto uba8m; else goto cba7W;
       uba8m: // global
           call _cba7T(R1) args: 0, res: 0, upd: 0;
       cba7W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cba74_info" {
     block_cba74_info:
         const _cba74;
         const 6;
         const 30;
 },
 _cba7I() //  [R1]
         { []
         }
     {offset
       cba7I: // global
           _sb70L::P64 = P64[R1 + 7];
           _sb70M::P64 = P64[R1 + 15];
           _sb70K::I64 = I64[R1 + 23];
           _sb70N::I64 = I64[R1 + 31];
           _sb70O::I64 = I64[R1 + 39];
           _sb70P::I64 = I64[R1 + 47];
           I32[_sb70K::I64 + (_sb70P::I64 << 2)] = 10 :: W32;
           call MO_Touch(_sb70L::P64);
           I64[Sp + 32] = _sb70K::I64;
           P64[Sp] = _sb70L::P64;
           P64[Sp - 32] = _sb70M::P64;
           I64[Sp - 24] = _sb70N::I64;
           I64[Sp - 16] = _sb70O::I64;
           I64[Sp - 8] = _sb70P::I64 + 1;
           Sp = Sp - 32;
           call _sb70h() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cba7I_info" {
     block_cba7I_info:
         const _cba7I;
         const 518;
         const 30;
 },
 _cba7T() //  [R1]
         { []
         }
     {offset
       cba7T: // global
           _sb70V::P64 = P64[R1 + 7];
           _sb70W::P64 = P64[R1 + 15];
           _sb70U::I64 = I64[R1 + 23];
           _sb70X::I64 = I64[R1 + 31];
           _sb70Y::I64 = I64[R1 + 39];
           _sb70Z::I64 = I64[R1 + 47];
           I32[_sb70U::I64 + (_sb70Z::I64 << 2)] = 13 :: W32;
           call MO_Touch(_sb70V::P64);
           _sb712::I64 = _sb70Z::I64 + 1;
           I32[_sb70U::I64 + (_sb712::I64 << 2)] = 10 :: W32;
           call MO_Touch(_sb70V::P64);
           P64[Sp - 32] = _sb70W::P64;
           I64[Sp - 24] = _sb70X::I64;
           I64[Sp - 16] = _sb70Y::I64;
           I64[Sp - 8] = _sb712::I64 + 1;
           P64[Sp] = _sb70V::P64;
           I64[Sp + 32] = _sb70U::I64;
           Sp = Sp - 32;
           call _sb70h() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cba7T_info" {
     block_cba7T_info:
         const _cba7T;
         const 518;
         const 30;
 },
 _sb70h() //  []
         { []
         }
     {offset
       sb70h: // global
           _sb70k::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_cba78_info;
           R6 = I64[Sp + 8];
           R5 = P64[Sp];
           R4 = _sb70k::P64;
           R3 = I64[Sp + 64];
           R2 = P64[Sp + 80];
           Sp = Sp + 16;
           call GHC.IO.Handle.Internals.$wwriteCharBuffer_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 24, res: 8, upd: 8;
     }
 },
 _cba78() //  []
         { []
         }
     {offset
       cba78: // global
           I64[Sp] = block_cba7a_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto uba8n; else goto cba7d;
       uba8n: // global
           call _cba7a(R1) args: 0, res: 0, upd: 0;
       cba7d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cba78_info" {
     block_cba78_info:
         const _cba78;
         const 2566;
         const 30;
 },
 _cba7a() //  [R1]
         { []
         }
     {offset
       cba7a: // global
           if (R1 & 7 == 2) goto cba7o; else goto uba8g;
       cba7o: // global
           _sb70v::P64 = P64[P64[Sp + 16] + 8];
           I64[Sp] = block_cba7m_info;
           R1 = _sb70v::P64;
           if (R1 & 7 != 0) goto uba8o; else goto cba7p;
       uba8o: // global
           call _cba7m(R1) args: 0, res: 0, upd: 0;
       cba7p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       uba8g: // global
           Sp = Sp + 56;
           call _cba7C() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cba7a_info" {
     block_cba7a_info:
         const _cba7a;
         const 2822;
         const 30;
 },
 _cba7m() //  [R1]
         { []
         }
     {offset
       cba7m: // global
           if (I64[R1 + 39] == I64[R1 + 47]) goto uba8h; else goto cba7z;
       uba8h: // global
           Sp = Sp + 56;
           call _cba7C() args: 0, res: 0, upd: 0;
       cba7z: // global
           _sb6ZN::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cba7x_info;
           R2 = P64[Sp + 40];
           I64[Sp - 16] = stg_ap_ppv_info;
           P64[Sp - 8] = _sb6ZN::P64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.IO.BufferedIO.flushWriteBuffer_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cba7m_info" {
     block_cba7m_info:
         const _cba7m;
         const 2822;
         const 30;
 },
 _cba7x() //  [R1]
         { []
         }
     {offset
       cba7x: // global
           _sb6ZP::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_sb6ZP::P64 + 8] = R1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb6ZP::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cba7x_info" {
     block_cba7x_info:
         const _cba7x;
         const 1925;
         const 30;
 },
 _cba7C() //  []
         { []
         }
     {offset
       cba7C: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cba6M() //  [R1]
         { []
         }
     {offset
       cba6M: // global
           _sb6ZJ::P64 = P64[Sp + 16];
           _sb706::P64 = P64[R1 + 7];
           _sb707::P64 = P64[R1 + 15];
           _sb705::I64 = I64[R1 + 23];
           _sb708::I64 = I64[R1 + 31];
           _sb709::I64 = I64[R1 + 39];
           _sb70a::I64 = I64[R1 + 47];
           I32[_sb705::I64 + (_sb70a::I64 << 2)] = %MO_UU_Conv_W64_W32(I64[Sp + 8]);
           call MO_Touch(_sb706::P64);
           I64[Sp + 16] = block_cba6V_info;
           R6 = _sb708::I64;
           R5 = _sb707::P64;
           R4 = _sb706::P64;
           R3 = _sb705::I64;
           R2 = _sb6ZJ::P64;
           I64[Sp] = _sb709::I64;
           I64[Sp + 8] = _sb70a::I64 + 1;
           call GHC.IO.Handle.Internals.$wwriteCharBuffer_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cba6M_info" {
     block_cba6M_info:
         const _cba6M;
         const 66;
         const 30;
 },
 _cba6V() //  []
         { []
         }
     {offset
       cba6V: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cba6V_info" {
     block_cba6V_info:
         const _cba6V;
         const 0;
         const 30;
 },
 GHC.IO.Handle.Text.$whPutChar_entry() //  [R2, R3]
         { []
         }
     {offset
       cba8A: // global
           _sb6ZE::I64 = R3;
           _sb6ZD::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cba8B; else goto cba8C;
       cba8C: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cba8E; else goto cba8D;
       cba8E: // global
           HpAlloc = 16;
           goto cba8B;
       cba8B: // global
           R3 = _sb6ZE::I64;
           R2 = _sb6ZD::P64;
           R1 = GHC.IO.Handle.Text.$whPutChar_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cba8D: // global
           I64[Hp - 8] = act_sb6ZG_info;
           I64[Hp] = _sb6ZE::I64;
           I64[Sp - 16] = block_cba8t_info;
           R1 = _sb6ZD::P64;
           P64[Sp - 8] = Hp - 6;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uba8L; else goto cba8u;
       uba8L: // global
           call _cba8t(R1) args: 0, res: 0, upd: 0;
       cba8u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.$whPutChar_info" {
     GHC.IO.Handle.Text.$whPutChar_info:
         const GHC.IO.Handle.Text.$whPutChar_entry;
         const 0;
         const 30064771086;
         const 12884901902;
         const Sb7vQ_srt+16;
 },
 _cba8t() //  [R1]
         { []
         }
     {offset
       cba8t: // global
           _cba6w::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cba8x; else goto cba8y;
       cba8x: // global
           R5 = _cba6w::P64;
           R4 = P64[R1 + 15];
           R3 = R1;
           R2 = GHC.IO.Handle.Text.hPutChar2_closure;
           Sp = Sp + 16;
           call GHC.IO.Handle.Internals.$wwantWritableHandle'_entry(R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
       cba8y: // global
           R5 = _cba6w::P64;
           R4 = P64[R1 + 22];
           R3 = R1;
           R2 = GHC.IO.Handle.Text.hPutChar2_closure;
           Sp = Sp + 16;
           call GHC.IO.Handle.Internals.$wwantWritableHandle'_entry(R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cba8t_info" {
     block_cba8t_info:
         const _cba8t;
         const 1;
         const 21474836510;
         const Sb7vQ_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.4355804 UTC

[section ""data" . GHC.IO.Handle.Text.hPutChar1_closure" {
     GHC.IO.Handle.Text.hPutChar1_closure:
         const GHC.IO.Handle.Text.hPutChar1_info;
         const 0;
 },
 GHC.IO.Handle.Text.hPutChar1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbaa3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbaa4; else goto cbaa5;
       cbaa4: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hPutChar1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbaa5: // global
           I64[Sp - 16] = block_cbaa0_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubaa9; else goto cbaa1;
       ubaa9: // global
           call _cbaa0(R1) args: 0, res: 0, upd: 0;
       cbaa1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hPutChar1_info" {
     GHC.IO.Handle.Text.hPutChar1_info:
         const GHC.IO.Handle.Text.hPutChar1_entry;
         const 0;
         const 21474836494;
         const 12884901903;
         const Sb7vQ_srt+24;
 },
 _cbaa0() //  [R1]
         { []
         }
     {offset
       cbaa0: // global
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.IO.Handle.Text.$whPutChar_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaa0_info" {
     block_cbaa0_info:
         const _cbaa0;
         const 1;
         const 4294967326;
         const Sb7vQ_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.440506817 UTC

[section ""data" . GHC.IO.Handle.Text.hPutChar_closure" {
     GHC.IO.Handle.Text.hPutChar_closure:
         const GHC.IO.Handle.Text.hPutChar_info;
         const 0;
 },
 GHC.IO.Handle.Text.hPutChar_entry() //  [R2, R3]
         { []
         }
     {offset
       cbaan: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.Text.hPutChar1_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hPutChar_info" {
     GHC.IO.Handle.Text.hPutChar_info:
         const GHC.IO.Handle.Text.hPutChar_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const Sb7vQ_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.445433032 UTC

[section ""data" . GHC.IO.Handle.Text.hPutStr7_closure" {
     GHC.IO.Handle.Text.hPutStr7_closure:
         const GHC.IO.Handle.Text.hPutStr7_info;
         const 0;
 },
 GHC.IO.Handle.Text.hPutStr7_entry() //  [R2, R3]
         { []
         }
     {offset
       cbaaF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbaaG; else goto ubaaX;
       cbaaG: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hPutStr7_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ubaaX: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cbaav() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hPutStr7_info" {
     GHC.IO.Handle.Text.hPutStr7_info:
         const GHC.IO.Handle.Text.hPutStr7_entry;
         const 0;
         const 38654705678;
         const 12884901903;
         const Sb7vQ_srt+24;
 },
 _cbaav() //  []
         { []
         }
     {offset
       cbaav: // global
           I64[Sp - 8] = block_cbaay_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubaaZ; else goto cbaaz;
       ubaaZ: // global
           call _cbaay(R1) args: 0, res: 0, upd: 0;
       cbaaz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbaay() //  [R1]
         { []
         }
     {offset
       cbaay: // global
           if (R1 & 7 == 1) goto cbaaC; else goto cbaaD;
       cbaaC: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbaaD: // global
           I64[Sp] = block_cbaaN_info;
           _sb71m::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 16] = _sb71m::P64;
           if (R1 & 7 != 0) goto ubab0; else goto cbaaP;
       ubab0: // global
           call _cbaaN(R1) args: 0, res: 0, upd: 0;
       cbaaP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaay_info" {
     block_cbaay_info:
         const _cbaay;
         const 130;
         const 4294967326;
         const Sb7vQ_srt+24;
 },
 _cbaaN() //  [R1]
         { []
         }
     {offset
       cbaaN: // global
           I64[Sp] = block_cbaaT_info;
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           call GHC.IO.Handle.Text.$whPutChar_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaaN_info" {
     block_cbaaN_info:
         const _cbaaN;
         const 2;
         const 4294967326;
         const Sb7vQ_srt+24;
 },
 _cbaaT() //  []
         { []
         }
     {offset
       cbaaT: // global
           P64[Sp + 8] = P64[Sp + 8];
           P64[Sp + 16] = P64[Sp + 16];
           Sp = Sp + 8;
           call _cbaav() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbaaT_info" {
     block_cbaaT_info:
         const _cbaaT;
         const 2;
         const 4294967326;
         const Sb7vQ_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.456939626 UTC

[section ""data" . GHC.IO.Handle.Text.hGetChar3_closure" {
     GHC.IO.Handle.Text.hGetChar3_closure:
         const GHC.IO.Handle.Text.hGetChar3_info;
         const 0;
 },
 sat_sb71H_entry() //  [R1]
         { []
         }
     {offset
       cbabV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbabW; else goto cbabX;
       cbabW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbabX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sb71H_info" {
     sat_sb71H_info:
         const sat_sb71H_entry;
         const 1;
         const 4294967312;
         const Sb7vQ_srt;
 },
 GHC.IO.Handle.Text.hGetChar3_entry() //  [R2]
         { []
         }
     {offset
       cbabY: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbabZ; else goto cbac0;
       cbabZ: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hGetChar3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbac0: // global
           I64[Sp - 8] = block_cbabu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubacm; else goto cbabv;
       ubacm: // global
           call _cbabu(R1) args: 0, res: 0, upd: 0;
       cbabv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetChar3_info" {
     GHC.IO.Handle.Text.hGetChar3_info:
         const GHC.IO.Handle.Text.hGetChar3_entry;
         const 0;
         const 3852585664526;
         const 8589934597;
         const Sb7vQ_srt;
 },
 _cbabu() //  [R1]
         { []
         }
     {offset
       cbabu: // global
           I64[Sp - 16] = block_cbabz_info;
           R2 = P64[R1 + 7];
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbabu_info" {
     block_cbabu_info:
         const _cbabu;
         const 0;
         const 1653562408990;
         const Sb7vQ_srt;
 },
 _cbabz() //  [R1]
         { []
         }
     {offset
       cbabz: // global
           I64[Sp] = block_cbabD_info;
           R3 = GHC.IO.Exception.$fExceptionIOException4_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbabz_info" {
     block_cbabz_info:
         const _cbabz;
         const 2;
         const 1653562408990;
         const Sb7vQ_srt;
 },
 _cbabD() //  [R1]
         { []
         }
     {offset
       cbabD: // global
           if (R1 & 7 == 1) goto cbac6; else goto cbac8;
       cbac6: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       cbac8: // global
           I64[Sp + 16] = block_cbabI_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbabD_info" {
     block_cbabD_info:
         const _cbabD;
         const 2;
         const 4294967326;
         const Sb7vQ_srt;
 },
 _cbabI() //  [R1]
         { []
         }
     {offset
       cbabI: // global
           I64[Sp - 8] = block_cbabM_info;
           _sb71z::P64 = R1;
           R1 = P64[R1 + 15];
           P64[Sp] = _sb71z::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubacl; else goto cbabN;
       ubacl: // global
           call _cbabM(R1) args: 0, res: 0, upd: 0;
       cbabN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbabI_info" {
     block_cbabI_info:
         const _cbabI;
         const 0;
         const 4294967326;
         const Sb7vQ_srt;
 },
 _cbabM() //  [R1]
         { []
         }
     {offset
       cbabM: // global
           if (I32[I64[R1 - 1] + 20] == 4 :: W32) goto cbaci; else goto cbacb;
       cbaci: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbacb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbace; else goto cbacd;
       cbace: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbacd: // global
           I64[Hp - 16] = sat_sb71H_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 16;
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbabM_info" {
     block_cbabM_info:
         const _cbabM;
         const 1;
         const 4294967326;
         const Sb7vQ_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.469458637 UTC

[section ""cstring" . GHC.IO.Handle.Text.hGetChar7_bytes" {
     GHC.IO.Handle.Text.hGetChar7_bytes:
         I8[] [104,71,101,116,67,104,97,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.471776149 UTC

[section ""data" . GHC.IO.Handle.Text.hGetChar6_closure" {
     GHC.IO.Handle.Text.hGetChar6_closure:
         const GHC.IO.Handle.Text.hGetChar6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Text.hGetChar6_entry() //  [R1]
         { []
         }
     {offset
       cbad0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbad1; else goto cbad2;
       cbad1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbad2: // global
           (_cbacX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbacX::I64 == 0) goto cbacZ; else goto cbacY;
       cbacZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbacY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbacX::I64;
           R2 = GHC.IO.Handle.Text.hGetChar7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetChar6_info" {
     GHC.IO.Handle.Text.hGetChar6_info:
         const GHC.IO.Handle.Text.hGetChar6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.475285513 UTC

[section ""data" . GHC.IO.Handle.Text.hGetChar5_closure" {
     GHC.IO.Handle.Text.hGetChar5_closure:
         const GHC.Types.C#_con_info;
         const 13;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.476895225 UTC

[section ""data" . GHC.IO.Handle.Text.hGetChar4_closure" {
     GHC.IO.Handle.Text.hGetChar4_closure:
         const GHC.Types.C#_con_info;
         const 10;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.492413098 UTC

[section ""data" . GHC.IO.Handle.Text.hGetChar2_closure" {
     GHC.IO.Handle.Text.hGetChar2_closure:
         const GHC.IO.Handle.Text.hGetChar2_info;
         const 0;
 },
 sat_sb72q_entry() //  [R1]
         { []
         }
     {offset
       cbae0: // global
           _sb72q::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbae1; else goto cbae2;
       cbae2: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbae4; else goto cbae3;
       cbae4: // global
           HpAlloc = 56;
           goto cbae1;
       cbae1: // global
           R1 = _sb72q::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbae3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sb72q::P64;
           _sb72e::P64 = P64[_sb72q::P64 + 16];
           _sb72f::P64 = P64[_sb72q::P64 + 24];
           _sb72d::I64 = I64[_sb72q::P64 + 32];
           _sb72g::I64 = I64[_sb72q::P64 + 40];
           _sb72i::I64 = I64[_sb72q::P64 + 48];
           _sb72n::I64 = I64[_sb72q::P64 + 56];
           if (_sb72n::I64 == _sb72i::I64) goto cbadZ; else goto cbadY;
       cbadZ: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sb72e::P64;
           P64[Hp - 32] = _sb72f::P64;
           I64[Hp - 24] = _sb72d::I64;
           I64[Hp - 16] = _sb72g::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cbadY: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sb72e::P64;
           P64[Hp - 32] = _sb72f::P64;
           I64[Hp - 24] = _sb72d::I64;
           I64[Hp - 16] = _sb72g::I64;
           I64[Hp - 8] = _sb72n::I64;
           I64[Hp] = _sb72i::I64;
           R1 = Hp - 47;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sb72q_info" {
     sat_sb72q_info:
         const sat_sb72q_entry;
         const 17179869186;
         const 15;
 },
 sat_sb72v_entry() //  [R1]
         { []
         }
     {offset
       cbaei: // global
           _sb72v::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbaej; else goto cbaek;
       cbaek: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbaem; else goto cbael;
       cbaem: // global
           HpAlloc = 56;
           goto cbaej;
       cbaej: // global
           R1 = _sb72v::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbael: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sb72v::P64;
           _sb72e::P64 = P64[_sb72v::P64 + 16];
           _sb72f::P64 = P64[_sb72v::P64 + 24];
           _sb72d::I64 = I64[_sb72v::P64 + 32];
           _sb72g::I64 = I64[_sb72v::P64 + 40];
           _sb72i::I64 = I64[_sb72v::P64 + 48];
           _sb72n::I64 = I64[_sb72v::P64 + 56];
           if (_sb72n::I64 == _sb72i::I64) goto cbaeh; else goto cbaeg;
       cbaeh: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sb72e::P64;
           P64[Hp - 32] = _sb72f::P64;
           I64[Hp - 24] = _sb72d::I64;
           I64[Hp - 16] = _sb72g::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cbaeg: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sb72e::P64;
           P64[Hp - 32] = _sb72f::P64;
           I64[Hp - 24] = _sb72d::I64;
           I64[Hp - 16] = _sb72g::I64;
           I64[Hp - 8] = _sb72n::I64;
           I64[Hp] = _sb72i::I64;
           R1 = Hp - 47;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sb72v_info" {
     sat_sb72v_info:
         const sat_sb72v_entry;
         const 17179869186;
         const 15;
 },
 sat_sb72P_entry() //  [R1]
         { []
         }
     {offset
       cbaeH: // global
           _sb72P::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbaeI; else goto cbaeJ;
       cbaeJ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbaeL; else goto cbaeK;
       cbaeL: // global
           HpAlloc = 56;
           goto cbaeI;
       cbaeI: // global
           R1 = _sb72P::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbaeK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sb72P::P64;
           _sb72A::P64 = P64[_sb72P::P64 + 16];
           _sb72B::P64 = P64[_sb72P::P64 + 24];
           _sb72z::I64 = I64[_sb72P::P64 + 32];
           _sb72C::I64 = I64[_sb72P::P64 + 40];
           _sb72E::I64 = I64[_sb72P::P64 + 56];
           _sb72N::I64 = I64[_sb72P::P64 + 48] + 1;
           if (_sb72N::I64 == _sb72E::I64) goto cbaeV; else goto cbaeS;
       cbaeV: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sb72A::P64;
           P64[Hp - 32] = _sb72B::P64;
           I64[Hp - 24] = _sb72z::I64;
           I64[Hp - 16] = _sb72C::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cbaeS: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sb72A::P64;
           P64[Hp - 32] = _sb72B::P64;
           I64[Hp - 24] = _sb72z::I64;
           I64[Hp - 16] = _sb72C::I64;
           I64[Hp - 8] = _sb72N::I64;
           I64[Hp] = _sb72E::I64;
           R1 = Hp - 47;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sb72P_info" {
     sat_sb72P_info:
         const sat_sb72P_entry;
         const 17179869186;
         const 15;
 },
 sat_sb73b_entry() //  [R1]
         { []
         }
     {offset
       cbaf8: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cbaf9; else goto cbafa;
       cbaf9: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbafa: // global
           _sb71K::P64 = P64[R1 + 7];
           _sb72F::P64 = P64[R1 + 31];
           _sb72D::I64 = I64[R1 + 55];
           _sb72S::I64 = I64[R1 + 63] - _sb72D::I64;
           if (_sb72S::I64 != 0) goto ubafR; else goto cbaf6;
       ubafR: // global
           if (_sb72S::I64 != 1) goto ubafT; else goto ubafS;
       ubafT: // global
           P64[Sp - 16] = _sb72F::P64;
           I64[Sp - 8] = _sb72S::I64;
           Sp = Sp - 16;
           call _cbafd() args: 0, res: 0, upd: 0;
       ubafS: // global
           P64[Sp - 64] = _sb71K::P64;
           I64[Sp - 56] = I64[R1 + 39];
           P64[Sp - 48] = P64[R1 + 15];
           P64[Sp - 40] = P64[R1 + 23];
           I64[Sp - 32] = I64[R1 + 47];
           I64[Sp - 24] = _sb72D::I64;
           P64[Sp - 16] = _sb72F::P64;
           I64[Sp - 8] = _sb72S::I64;
           Sp = Sp - 64;
           call _cbafw() args: 0, res: 0, upd: 0;
       cbaf6: // global
           I64[Sp - 8] = block_cbafn_info;
           R3 = _sb72F::P64;
           R2 = _sb71K::P64;
           Sp = Sp - 8;
           call GHC.IO.Handle.Internals.hLookAhead_2_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sb73b_info" {
     sat_sb73b_info:
         const sat_sb73b_entry;
         const 17179869188;
         const 4294967304;
         const 4294967299;
         const Sb7vQ_srt+80;
 },
 _cbafd() //  []
         { []
         }
     {offset
       cbafd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbafi; else goto cbafh;
       cbafi: // global
           HpAlloc = 16;
           I64[Sp - 8] = block_cbafc_info;
           R1 = I64[Sp + 8];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbafh: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cbafc() //  [R1]
         { []
         }
     {offset
       cbafc: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _cbafd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbafc_info" {
     block_cbafc_info:
         const _cbafc;
         const 130;
         const 30;
 },
 _cbafw() //  []
         { []
         }
     {offset
       cbafw: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbafA; else goto cbafz;
       cbafA: // global
           HpAlloc = 56;
           I64[Sp - 8] = block_cbafv_info;
           R1 = I64[Sp + 56];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbafz: // global
           _sb71K::P64 = P64[Sp];
           _sb72z::I64 = I64[Sp + 8];
           _sb72A::P64 = P64[Sp + 16];
           _sb72B::P64 = P64[Sp + 24];
           _sb72C::I64 = I64[Sp + 32];
           _sb72F::P64 = P64[Sp + 48];
           _sb730::I64 = %MO_UU_Conv_W32_W64(I32[_sb72z::I64 + (I64[Sp + 40] << 2)]);
           call MO_Touch(_sb72A::P64);
           if (_sb730::I64 == 13) goto cbafN; else goto cbafG;
       cbafN: // global
           I32[_sb72z::I64] = 13 :: W32;
           call MO_Touch(_sb72A::P64);
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sb72A::P64;
           P64[Hp - 32] = _sb72B::P64;
           I64[Hp - 24] = _sb72z::I64;
           I64[Hp - 16] = _sb72C::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 1;
           I64[Sp + 56] = block_cbafK_info;
           R3 = Hp - 47;
           R2 = _sb71K::P64;
           Sp = Sp + 56;
           call GHC.IO.Handle.Internals.hLookAhead_2_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
       cbafG: // global
           I64[Hp - 48] = GHC.Base.Just_con_info;
           P64[Hp - 40] = _sb72F::P64;
           _cbafE::P64 = Hp - 46;
           Hp = Hp - 40;
           R1 = _cbafE::P64;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cbafv() //  [R1]
         { []
         }
     {offset
       cbafv: // global
           I64[Sp + 64] = R1;
           Sp = Sp + 8;
           call _cbafw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbafv_info" {
     block_cbafv_info:
         const _cbafv;
         const 11400;
         const 4294967326;
         const Sb7vQ_srt+80;
 },
 _cbafK() //  [R1]
         { []
         }
     {offset
       cbafK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbafQ; else goto cbafP;
       cbafQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbafP: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbafK_info" {
     block_cbafK_info:
         const _cbafK;
         const 0;
         const 30;
 },
 _cbafn() //  [R1]
         { []
         }
     {offset
       cbafn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbaft; else goto cbafs;
       cbaft: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbafs: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbafn_info" {
     block_cbafn_info:
         const _cbafn;
         const 0;
         const 30;
 },
 sat_sb73x_entry() //  [R1]
         { []
         }
     {offset
       cbagj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbagk; else goto cbagl;
       cbagk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbagl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbagg_info;
           _sb72D::I64 = I64[R1 + 24];
           R1 = P64[R1 + 16];
           I64[Sp - 24] = _sb72D::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubagD; else goto cbagh;
       ubagD: // global
           call _cbagg(R1) args: 0, res: 0, upd: 0;
       cbagh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sb73x_info" {
     sat_sb73x_info:
         const sat_sb73x_entry;
         const 4294967297;
         const 19;
 },
 _cbagg() //  [R1]
         { []
         }
     {offset
       cbagg: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbagq; else goto cbagp;
       cbagq: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbagp: // global
           _sb73q::P64 = P64[R1 + 7];
           _sb73r::P64 = P64[R1 + 15];
           _sb73p::I64 = I64[R1 + 23];
           _sb73s::I64 = I64[R1 + 31];
           _sb73u::I64 = I64[R1 + 47];
           _sb73v::I64 = I64[Sp + 8] + 1;
           if (_sb73v::I64 == _sb73u::I64) goto cbagC; else goto cbagz;
       cbagC: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sb73q::P64;
           P64[Hp - 32] = _sb73r::P64;
           I64[Hp - 24] = _sb73p::I64;
           I64[Hp - 16] = _sb73s::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cbagz: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sb73q::P64;
           P64[Hp - 32] = _sb73r::P64;
           I64[Hp - 24] = _sb73p::I64;
           I64[Hp - 16] = _sb73s::I64;
           I64[Hp - 8] = _sb73v::I64;
           I64[Hp] = _sb73u::I64;
           R1 = Hp - 47;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbagg_info" {
     block_cbagg_info:
         const _cbagg;
         const 65;
         const 30;
 },
 GHC.IO.Handle.Text.hGetChar2_entry() //  [R2]
         { []
         }
     {offset
       cbagE: // global
           if ((Sp + -80) < SpLim) (likely: False) goto cbagF; else goto cbagG;
       cbagF: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hGetChar2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbagG: // global
           I64[Sp - 8] = block_cbadg_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubai8; else goto cbadh;
       ubai8: // global
           call _cbadg(R1) args: 0, res: 0, upd: 0;
       cbadh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetChar2_info" {
     GHC.IO.Handle.Text.hGetChar2_info:
         const GHC.IO.Handle.Text.hGetChar2_entry;
         const 0;
         const 30064771086;
         const 8589934597;
         const Sb7vQ_srt+72;
 },
 _cbadg() //  [R1]
         { []
         }
     {offset
       cbadg: // global
           I64[Sp - 24] = block_cbadl_info;
           _sb71K::P64 = R1;
           _sb71T::P64 = P64[R1 + 71];
           _sb71Y::P64 = P64[R1 + 111];
           R1 = P64[_sb71T::P64 + 8];
           P64[Sp - 16] = _sb71T::P64;
           P64[Sp - 8] = _sb71Y::P64;
           P64[Sp] = _sb71K::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubai3; else goto cbadm;
       ubai3: // global
           call _cbadl(R1) args: 0, res: 0, upd: 0;
       cbadm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbadg_info" {
     block_cbadg_info:
         const _cbadg;
         const 0;
         const 12884901918;
         const Sb7vQ_srt+72;
 },
 _cbadl() //  [R1]
         { []
         }
     {offset
       cbadl: // global
           _sb729::I64 = I64[R1 + 39];
           _sb72a::I64 = I64[R1 + 47];
           if (_sb729::I64 == _sb72a::I64) goto cbahB; else goto cbahv;
       cbahB: // global
           I64[Sp] = block_cbahy_info;
           R3 = R1;
           R2 = P64[Sp + 24];
           call GHC.IO.Handle.Internals.hLookAhead_2_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
       cbahv: // global
           P64[Sp - 40] = P64[R1 + 7];
           P64[Sp - 32] = P64[R1 + 15];
           I64[Sp - 24] = I64[R1 + 31];
           I64[Sp - 16] = _sb729::I64;
           I64[Sp - 8] = _sb72a::I64;
           I64[Sp] = I64[R1 + 23];
           Sp = Sp - 40;
           call _sb72b() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbadl_info" {
     block_cbadl_info:
         const _cbadl;
         const 3;
         const 12884901918;
         const Sb7vQ_srt+72;
 },
 _cbahy() //  [R1]
         { []
         }
     {offset
       cbahy: // global
           I64[Sp] = block_cbahA_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubai9; else goto cbahD;
       ubai9: // global
           call _cbahA(R1) args: 0, res: 0, upd: 0;
       cbahD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbahy_info" {
     block_cbahy_info:
         const _cbahy;
         const 3;
         const 12884901918;
         const Sb7vQ_srt+72;
 },
 _cbahA() //  [R1]
         { []
         }
     {offset
       cbahA: // global
           I64[Sp] = I64[R1 + 23];
           P64[Sp - 40] = P64[R1 + 7];
           P64[Sp - 32] = P64[R1 + 15];
           I64[Sp - 24] = I64[R1 + 31];
           I64[Sp - 16] = I64[R1 + 39];
           I64[Sp - 8] = I64[R1 + 47];
           Sp = Sp - 40;
           call _sb72b() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbahA_info" {
     block_cbahA_info:
         const _cbahA;
         const 3;
         const 12884901918;
         const Sb7vQ_srt+72;
 },
 _sb72b() //  []
         { []
         }
     {offset
       sb72b: // global
           _sb71Y::P64 = P64[Sp + 56];
           _sb72h::I64 = I64[Sp + 24];
           _sb72l::I64 = %MO_UU_Conv_W32_W64(I32[I64[Sp + 40] + (_sb72h::I64 << 2)]);
           call MO_Touch(P64[Sp]);
           I64[Sp - 8] = block_cbadz_info;
           R1 = _sb71Y::P64;
           I64[Sp + 24] = _sb72h::I64 + 1;
           I64[Sp + 56] = _sb72l::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubaib; else goto cbadA;
       ubaib: // global
           call _cbadz(R1) args: 0, res: 0, upd: 0;
       cbadA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbadz() //  [R1]
         { []
         }
     {offset
       cbadz: // global
           _sb71T::P64 = P64[Sp + 56];
           _sb72d::I64 = I64[Sp + 48];
           _sb72e::P64 = P64[Sp + 8];
           _sb72f::P64 = P64[Sp + 16];
           _sb72g::I64 = I64[Sp + 24];
           _sb72i::I64 = I64[Sp + 40];
           _sb72l::I64 = I64[Sp + 64];
           _sb72n::I64 = I64[Sp + 32];
           if (R1 & 7 == 1) goto cbagP; else goto cbagT;
       cbagP: // global
           Hp = Hp + 80;
           _sb72o::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbagW; else goto cbagR;
       cbagR: // global
           I64[Hp - 72] = sat_sb72q_info;
           P64[Hp - 56] = _sb72e::P64;
           P64[Hp - 48] = _sb72f::P64;
           I64[Hp - 40] = _sb72d::I64;
           I64[Hp - 32] = _sb72g::I64;
           I64[Hp - 24] = _sb72i::I64;
           I64[Hp - 16] = _sb72n::I64;
           call MO_WriteBarrier();
           P64[_sb71T::P64 + 8] = Hp - 72;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb71T::P64);
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _sb72l::I64;
           R1 = Hp - 7;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbagT: // global
           Hp = Hp + 80;
           _sb72o::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbagW; else goto cbagV;
       cbagW: // global
           HpAlloc = 80;
           R1 = _sb72o::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbagV: // global
           if (_sb72l::I64 == 13) goto cbahr; else goto cbah2;
       cbahr: // global
           if (_sb72n::I64 == _sb72i::I64) goto cbahq; else goto cbahp;
       cbahq: // global
           I64[Hp - 72] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 64] = _sb72e::P64;
           P64[Hp - 56] = _sb72f::P64;
           I64[Hp - 48] = _sb72d::I64;
           I64[Hp - 40] = _sb72g::I64;
           I64[Hp - 32] = 0;
           I64[Hp - 24] = 0;
           _cbadP::P64 = Hp - 71;
           Hp = Hp - 24;
           I64[Sp + 64] = _sb72d::I64;
           P64[Sp + 48] = _sb72e::P64;
           P64[Sp + 40] = _sb72f::P64;
           I64[Sp + 32] = _sb72g::I64;
           I64[Sp + 24] = 0;
           I64[Sp + 16] = 0;
           P64[Sp + 8] = _cbadP::P64;
           goto ubai6;
       cbahp: // global
           I64[Hp - 72] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 64] = _sb72e::P64;
           P64[Hp - 56] = _sb72f::P64;
           I64[Hp - 48] = _sb72d::I64;
           I64[Hp - 40] = _sb72g::I64;
           I64[Hp - 32] = _sb72n::I64;
           I64[Hp - 24] = _sb72i::I64;
           _cbadN::P64 = Hp - 71;
           Hp = Hp - 24;
           P64[Sp + 8] = _cbadN::P64;
           I64[Sp + 16] = _sb72i::I64;
           I64[Sp + 24] = _sb72n::I64;
           I64[Sp + 32] = _sb72g::I64;
           P64[Sp + 40] = _sb72f::P64;
           P64[Sp + 48] = _sb72e::P64;
           I64[Sp + 64] = _sb72d::I64;
           goto ubai6;
       ubai6: // global
           call _cbaer() args: 0, res: 0, upd: 0;
       cbah2: // global
           I64[Hp - 72] = sat_sb72v_info;
           P64[Hp - 56] = _sb72e::P64;
           P64[Hp - 48] = _sb72f::P64;
           I64[Hp - 40] = _sb72d::I64;
           I64[Hp - 32] = _sb72g::I64;
           I64[Hp - 24] = _sb72i::I64;
           I64[Hp - 16] = _sb72n::I64;
           call MO_WriteBarrier();
           P64[_sb71T::P64 + 8] = Hp - 72;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb71T::P64);
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _sb72l::I64;
           R1 = Hp - 7;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbadz_info" {
     block_cbadz_info:
         const _cbadz;
         const 12041;
         const 12884901918;
         const Sb7vQ_srt+72;
 },
 _cbaer() //  []
         { []
         }
     {offset
       cbaer: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cbah5; else goto cbah4;
       cbah5: // global
           HpAlloc = 72;
           I64[Sp] = block_cbaer_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cbah4: // global
           _sb72z::I64 = I64[Sp + 64];
           _sb72A::P64 = P64[Sp + 48];
           _sb72B::P64 = P64[Sp + 40];
           _sb72C::I64 = I64[Sp + 32];
           _sb72D::I64 = I64[Sp + 24];
           _sb72E::I64 = I64[Sp + 16];
           _sb72F::P64 = P64[Sp + 8];
           if (_sb72D::I64 == _sb72E::I64) goto cbahb; else goto cbaha;
       cbahb: // global
           I64[Hp - 64] = sat_sb73b_info;
           P64[Hp - 56] = P64[Sp + 72];
           P64[Hp - 48] = _sb72A::P64;
           P64[Hp - 40] = _sb72B::P64;
           P64[Hp - 32] = _sb72F::P64;
           I64[Hp - 24] = _sb72z::I64;
           I64[Hp - 16] = _sb72C::I64;
           I64[Hp - 8] = _sb72D::I64;
           I64[Hp] = _sb72E::I64;
           I64[Sp] = block_cbag0_info;
           R2 = GHC.IO.Handle.Text.hGetChar3_closure+2;
           R1 = Hp - 63;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
       cbaha: // global
           _sb71T::P64 = P64[Sp + 56];
           _sb72J::I64 = %MO_UU_Conv_W32_W64(I32[_sb72z::I64 + (_sb72D::I64 << 2)]);
           call MO_Touch(_sb72A::P64);
           if (_sb72J::I64 == 10) goto cbah8; else goto cbah7;
       cbah8: // global
           I64[Hp - 64] = sat_sb72P_info;
           P64[Hp - 48] = _sb72A::P64;
           P64[Hp - 40] = _sb72B::P64;
           I64[Hp - 32] = _sb72z::I64;
           I64[Hp - 24] = _sb72C::I64;
           I64[Hp - 16] = _sb72D::I64;
           I64[Hp - 8] = _sb72E::I64;
           call MO_WriteBarrier();
           P64[_sb71T::P64 + 8] = Hp - 64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb71T::P64);
           Hp = Hp - 8;
           R1 = GHC.IO.Handle.Text.hGetChar4_closure+1;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbah7: // global
           call MO_WriteBarrier();
           P64[_sb71T::P64 + 8] = _sb72F::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb71T::P64);
           Hp = Hp - 72;
           R1 = GHC.IO.Handle.Text.hGetChar5_closure+1;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaer_info" {
     block_cbaer_info:
         const _cbaer;
         const 9097;
         const 12884901918;
         const Sb7vQ_srt+72;
 },
 _cbag0() //  [R1]
         { []
         }
     {offset
       cbag0: // global
           I64[Sp] = block_cbag2_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubai7; else goto cbag3;
       ubai7: // global
           call _cbag2(R1) args: 0, res: 0, upd: 0;
       cbag3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbag0_info" {
     block_cbag0_info:
         const _cbag0;
         const 26505;
         const 30;
 },
 _cbag2() //  [R1]
         { []
         }
     {offset
       cbag2: // global
           _sb71T::P64 = P64[Sp + 56];
           if (R1 & 7 == 1) goto cbahg; else goto cbahh;
       cbahg: // global
           _sb72F::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_sb71T::P64 + 8] = _sb72F::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb71T::P64);
           R1 = GHC.IO.Handle.Text.hGetChar5_closure+1;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbahh: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbahk; else goto cbahj;
       cbahk: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbahj: // global
           _sb72D::I64 = I64[Sp + 24];
           _sb73h::P64 = P64[R1 + 6];
           _sb73k::I64 = %MO_UU_Conv_W32_W64(I32[I64[Sp + 64] + (_sb72D::I64 << 2)]);
           call MO_Touch(P64[Sp + 48]);
           if (_sb73k::I64 == 10) goto cbahn; else goto cbahm;
       cbahn: // global
           I64[Hp - 24] = sat_sb73x_info;
           P64[Hp - 8] = _sb73h::P64;
           I64[Hp] = _sb72D::I64;
           call MO_WriteBarrier();
           P64[_sb71T::P64 + 8] = Hp - 24;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb71T::P64);
           R1 = GHC.IO.Handle.Text.hGetChar4_closure+1;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbahm: // global
           call MO_WriteBarrier();
           P64[_sb71T::P64 + 8] = _sb73h::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb71T::P64);
           Hp = Hp - 32;
           R1 = GHC.IO.Handle.Text.hGetChar5_closure+1;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbag2_info" {
     block_cbag2_info:
         const _cbag2;
         const 26505;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.535258026 UTC

[section ""data" . GHC.IO.Handle.Text.hGetChar1_closure" {
     GHC.IO.Handle.Text.hGetChar1_closure:
         const GHC.IO.Handle.Text.hGetChar1_info;
         const 0;
 },
 GHC.IO.Handle.Text.hGetChar1_entry() //  [R2]
         { []
         }
     {offset
       cbakp: // global
           R4 = GHC.IO.Handle.Text.hGetChar2_closure+2;
           R3 = R2;
           R2 = GHC.IO.Handle.Text.hGetChar6_closure;
           call GHC.IO.Handle.Internals.wantReadableHandle_1_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetChar1_info" {
     GHC.IO.Handle.Text.hGetChar1_info:
         const GHC.IO.Handle.Text.hGetChar1_entry;
         const 0;
         const 30064771086;
         const 8589934597;
         const Sb7vQ_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.538625811 UTC

[section ""data" . GHC.IO.Handle.Text.hGetChar_closure" {
     GHC.IO.Handle.Text.hGetChar_closure:
         const GHC.IO.Handle.Text.hGetChar_info;
         const 0;
 },
 GHC.IO.Handle.Text.hGetChar_entry() //  [R2]
         { []
         }
     {offset
       cbakA: // global
           R2 = R2;
           call GHC.IO.Handle.Text.hGetChar1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetChar_info" {
     GHC.IO.Handle.Text.hGetChar_info:
         const GHC.IO.Handle.Text.hGetChar_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const Sb7vQ_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.542128748 UTC

[section ""data" . GHC.IO.Handle.Text.hGetBuf3_closure" {
     GHC.IO.Handle.Text.hGetBuf3_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.547891669 UTC

[section ""data" . $wunpack_nl_rb6WF_closure" {
     $wunpack_nl_rb6WF_closure:
         const $wunpack_nl_rb6WF_info;
 },
 $wunpack_nl_rb6WF_slow() //  [R1]
         { []
         }
     {offset
       cbakJ: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call $wunpack_nl_rb6WF_entry(R6,
                                        R5,
                                        R4,
                                        R3,
                                        R2,
                                        R1) args: 8, res: 0, upd: 8;
     }
 },
 $wunpackRB_sb73Z_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbaly: // global
           _sb741::I64 = R3;
           _sb740::P64 = R2;
           _sb73Z::P64 = R1;
           goto cbakV;
       cbakV: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbalC; else goto cbalB;
       cbalC: // global
           HpAlloc = 40;
           R3 = _sb741::I64;
           R2 = _sb740::P64;
           R1 = _sb73Z::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbalB: // global
           _sb73Q::I64 = I64[_sb73Z::P64 + 13];
           if (%MO_S_Ge_W64(_sb741::I64,
                            _sb73Q::I64)) goto cbalw; else goto cbalx;
       cbalw: // global
           _sb73O::I64 = I64[_sb73Z::P64 + 5];
           _sb747::I64 = %MO_UU_Conv_W32_W64(I32[_sb73O::I64 + (_sb741::I64 << 2)]);
           if (_sb747::I64 != 10) goto cbalE; else goto cbalL;
       cbalE: // global
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = _sb747::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _sb740::P64;
           _sb741::I64 = _sb741::I64 - 1;
           _sb740::P64 = Hp - 14;
           goto cbakV;
       cbalL: // global
           if (%MO_S_Le_W64(_sb741::I64,
                            _sb73Q::I64)) goto cbalG; else goto cbalK;
       cbalG: // global
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = GHC.IO.Handle.Text.hGetChar4_closure+1;
           P64[Hp - 16] = _sb740::P64;
           _cbalf::P64 = Hp - 30;
           Hp = Hp - 16;
           _sb741::I64 = _sb741::I64 - 1;
           _sb740::P64 = _cbalf::P64;
           goto cbakV;
       cbalK: // global
           if (I32[_sb73O::I64 + ((_sb741::I64 + -1) << 2)] == 13 :: W32) goto cbalJ; else goto cbalI;
       cbalJ: // global
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = GHC.IO.Handle.Text.hGetChar4_closure+1;
           P64[Hp - 16] = _sb740::P64;
           _cbalu::P64 = Hp - 30;
           Hp = Hp - 16;
           _sb741::I64 = _sb741::I64 - 2;
           _sb740::P64 = _cbalu::P64;
           goto cbakV;
       cbalI: // global
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = GHC.IO.Handle.Text.hGetChar4_closure+1;
           P64[Hp - 16] = _sb740::P64;
           _cbalp::P64 = Hp - 30;
           Hp = Hp - 16;
           _sb741::I64 = _sb741::I64 - 1;
           _sb740::P64 = _cbalp::P64;
           goto cbakV;
       cbalx: // global
           Hp = Hp - 40;
           R1 = _sb740::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wunpackRB_sb73Z_info" {
     $wunpackRB_sb73Z_info:
         const $wunpackRB_sb73Z_entry;
         const 8589934592;
         const 13;
         const 12884901902;
 },
 $wunpack_nl_rb6WF_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cbalP: // global
           _sb73S::P64 = R6;
           _sb73R::I64 = R5;
           _sb73Q::I64 = R4;
           _sb73P::P64 = R3;
           _sb73O::I64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cbalQ; else goto cbalR;
       cbalR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbalT; else goto cbalS;
       cbalT: // global
           HpAlloc = 24;
           goto cbalQ;
       cbalQ: // global
           R1 = $wunpack_nl_rb6WF_closure;
           I64[Sp - 40] = _sb73O::I64;
           P64[Sp - 32] = _sb73P::P64;
           I64[Sp - 24] = _sb73Q::I64;
           I64[Sp - 16] = _sb73R::I64;
           P64[Sp - 8] = _sb73S::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       cbalS: // global
           if (_sb73Q::I64 == _sb73R::I64) goto cbalO; else goto cbalN;
       cbalO: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _sb73S::P64;
           P64[Hp] = GHC.IO.Handle.Text.hGetBuf3_closure+1;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbalN: // global
           _sb73Y::I64 = %MO_UU_Conv_W32_W64(I32[_sb73O::I64 + ((_sb73R::I64 + -1) << 2)]);
           I64[Hp - 16] = $wunpackRB_sb73Z_info;
           I64[Hp - 8] = _sb73O::I64;
           I64[Hp] = _sb73Q::I64;
           _cbakT::P64 = Hp - 13;
           if (_sb73Y::I64 == 13) goto cbaml; else goto cbam5;
       cbaml: // global
           I64[Sp - 24] = block_cbamd_info;
           R3 = _sb73R::I64 - 2;
           R2 = _sb73S::P64;
           R1 = _cbakT::P64;
           P64[Sp - 16] = _sb73P::P64;
           I64[Sp - 8] = _sb73R::I64;
           Sp = Sp - 24;
           call $wunpackRB_sb73Z_entry(R3, R2, R1) args: 8, res: 8, upd: 8;
       cbam5: // global
           I64[Sp - 24] = block_cbalZ_info;
           R3 = _sb73R::I64 - 1;
           R2 = _sb73S::P64;
           R1 = _cbakT::P64;
           P64[Sp - 16] = _sb73P::P64;
           I64[Sp - 8] = _sb73R::I64;
           Sp = Sp - 24;
           call $wunpackRB_sb73Z_entry(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wunpack_nl_rb6WF_info" {
     $wunpack_nl_rb6WF_info:
         const $wunpack_nl_rb6WF_entry;
         const 0;
         const 14;
         const 25769803776;
         const 0;
         const 837;
         const $wunpack_nl_rb6WF_slow;
 },
 _cbamd() //  [R1]
         { []
         }
     {offset
       cbamd: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbamo; else goto cbamn;
       cbamo: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbamn: // global
           _sb73R::I64 = I64[Sp + 16];
           call MO_Touch(P64[Sp + 8]);
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _sb73R::I64 - 1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 31;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbamd_info" {
     block_cbamd_info:
         const _cbamd;
         const 130;
         const 30;
 },
 _cbalZ() //  [R1]
         { []
         }
     {offset
       cbalZ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbam8; else goto cbam7;
       cbam8: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbam7: // global
           _sb73R::I64 = I64[Sp + 16];
           call MO_Touch(P64[Sp + 8]);
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _sb73R::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 31;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbalZ_info" {
     block_cbalZ_info:
         const _cbalZ;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.559440302 UTC

[section ""cstring" . GHC.IO.Handle.Text.hGetContents4_bytes" {
     GHC.IO.Handle.Text.hGetContents4_bytes:
         I8[] [104,71,101,116,67,111,110,116,101,110,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.561758288 UTC

[section ""data" . GHC.IO.Handle.Text.hGetContents3_closure" {
     GHC.IO.Handle.Text.hGetContents3_closure:
         const GHC.IO.Handle.Text.hGetContents3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Text.hGetContents3_entry() //  [R1]
         { []
         }
     {offset
       cban2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cban3; else goto cban4;
       cban3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cban4: // global
           (_cbamZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbamZ::I64 == 0) goto cban1; else goto cban0;
       cban1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cban0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbamZ::I64;
           R2 = GHC.IO.Handle.Text.hGetContents4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetContents3_info" {
     GHC.IO.Handle.Text.hGetContents3_info:
         const GHC.IO.Handle.Text.hGetContents3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.5653641 UTC

[section ""cstring" . lvl3_rb6WG_bytes" {
     lvl3_rb6WG_bytes:
         I8[] [13]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.567459844 UTC

[section ""data" . lvl4_rb6WH_closure" {
     lvl4_rb6WH_closure:
         const lvl4_rb6WH_info;
         const 0;
         const 0;
         const 0;
 },
 lvl4_rb6WH_entry() //  [R1]
         { []
         }
     {offset
       cbanj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbank; else goto cbanl;
       cbank: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbanl: // global
           (_cbang::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbang::I64 == 0) goto cbani; else goto cbanh;
       cbani: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbanh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbang::I64;
           R2 = lvl3_rb6WG_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_rb6WH_info" {
     lvl4_rb6WH_info:
         const lvl4_rb6WH_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.573216027 UTC

[section ""data" . $wlvl_rb6WI_closure" {
     $wlvl_rb6WI_closure:
         const $wlvl_rb6WI_info;
         const 0;
 },
 sat_sb74S_entry() //  [R1]
         { []
         }
     {offset
       cbanI: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbanJ; else goto cbanK;
       cbanJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbanK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbanB_info;
           _sb74E::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sb74E::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubaob; else goto cbanC;
       ubaob: // global
           call _cbanB(R1) args: 0, res: 0, upd: 0;
       cbanC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sb74S_info" {
     sat_sb74S_info:
         const sat_sb74S_entry;
         const 2;
         const 18;
 },
 _cbanB() //  [R1]
         { []
         }
     {offset
       cbanB: // global
           if (R1 & 7 == 1) goto cbanF; else goto cbanG;
       cbanF: // global
           _sb74E::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cbanN_info;
           R1 = _sb74E::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ubaoa; else goto cbanP;
       ubaoa: // global
           call _cbanN(R1) args: 0, res: 0, upd: 0;
       cbanP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       cbanG: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbanB_info" {
     block_cbanB_info:
         const _cbanB;
         const 1;
         const 30;
 },
 _cbanN() //  [R1]
         { []
         }
     {offset
       cbanN: // global
           if (R1 & 7 == 1) goto cbanV; else goto cbao2;
       cbanV: // global
           Hp = Hp + 16;
           _sb74L::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbao5; else goto cbanX;
       cbanX: // global
           _sb74M::P64 = P64[_sb74L::P64 + 7];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _sb74M::P64;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cbao2: // global
           Hp = Hp + 16;
           _sb74L::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbao5; else goto cbao4;
       cbao5: // global
           HpAlloc = 16;
           R1 = _sb74L::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbao4: // global
           _sb74O::P64 = P64[_sb74L::P64 + 6];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _sb74O::P64;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbanN_info" {
     block_cbanN_info:
         const _cbanN;
         const 0;
         const 30;
 },
 $wlvl_rb6WI_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cbaoe: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cbaoi; else goto cbaoh;
       cbaoi: // global
           HpAlloc = 104;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $wlvl_rb6WI_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbaoh: // global
           I64[Hp - 96] = sat_sb74S_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R6;
           I64[Hp - 64] = GHC.Base.Just_con_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = GHC.IO.Exception.IOError_con_info;
           P64[Hp - 40] = Hp - 62;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = GHC.IO.Handle.Text.hGetContents3_closure;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           P64[Hp] = Hp - 96;
           R3 = Hp - 47;
           R2 = GHC.IO.Exception.$fExceptionIOException_closure;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wlvl_rb6WI_info" {
     $wlvl_rb6WI_info:
         const $wlvl_rb6WI_entry;
         const 0;
         const 30064771086;
         const 21474836505;
         const Sb7vQ_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.582995019 UTC

[section ""cstring" . lvl5_rb6WJ_bytes" {
     lvl5_rb6WJ_bytes:
         I8[] [100,101,108,97,121,101,100,32,114,101,97,100,32,111,110,32,99,108,111,115,101,100,32,104,97,110,100,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.585294589 UTC

[section ""data" . lvl6_rb6WK_closure" {
     lvl6_rb6WK_closure:
         const lvl6_rb6WK_info;
         const 0;
         const 0;
         const 0;
 },
 lvl6_rb6WK_entry() //  [R1]
         { []
         }
     {offset
       cbaoQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbaoR; else goto cbaoS;
       cbaoR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbaoS: // global
           (_cbaoN::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbaoN::I64 == 0) goto cbaoP; else goto cbaoO;
       cbaoP: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbaoO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbaoN::I64;
           R2 = lvl5_rb6WJ_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl6_rb6WK_info" {
     lvl6_rb6WK_info:
         const lvl6_rb6WK_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.589794523 UTC

[section ""data" . lvl7_rb6WL_closure" {
     lvl7_rb6WL_closure:
         const lvl7_rb6WL_info;
         const 0;
 },
 sat_sb74Y_entry() //  [R1]
         { []
         }
     {offset
       cbapa: // global
           _sb74Y::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbapb; else goto cbapc;
       cbapc: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cbape; else goto cbapd;
       cbape: // global
           HpAlloc = 72;
           goto cbapb;
       cbapb: // global
           R1 = _sb74Y::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbapd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sb74Y::P64;
           _sb74U::P64 = P64[_sb74Y::P64 + 16];
           I64[Hp - 64] = GHC.Base.Just_con_info;
           P64[Hp - 56] = _sb74U::P64;
           I64[Hp - 48] = GHC.IO.Exception.IOError_con_info;
           P64[Hp - 40] = Hp - 62;
           P64[Hp - 32] = GHC.IO.Exception.IllegalOperation_closure+1;
           P64[Hp - 24] = GHC.IO.Handle.Text.hGetContents3_closure;
           P64[Hp - 16] = lvl6_rb6WK_closure;
           P64[Hp - 8] = GHC.Base.Nothing_closure+1;
           P64[Hp] = GHC.Base.Nothing_closure+1;
           R2 = Hp - 47;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sb74Y_info" {
     sat_sb74Y_info:
         const sat_sb74Y_entry;
         const 1;
         const 1407379178520592;
         const Sb7vQ_srt;
 },
 lvl7_rb6WL_entry() //  [R2]
         { []
         }
     {offset
       cbapf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbapj; else goto cbapi;
       cbapj: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = lvl7_rb6WL_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbapi: // global
           I64[Hp - 16] = sat_sb74Y_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl7_rb6WL_info" {
     lvl7_rb6WL_info:
         const lvl7_rb6WL_entry;
         const 0;
         const 3659178992205838;
         const 8589934597;
         const Sb7vQ_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.595182133 UTC

[section ""cstring" . lvl8_rb6WM_bytes" {
     lvl8_rb6WM_bytes:
         I8[] [105,108,108,101,103,97,108,32,104,97,110,100,108,101,32,116,121,112,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.597361573 UTC

[section ""data" . lvl9_rb6WN_closure" {
     lvl9_rb6WN_closure:
         const lvl9_rb6WN_info;
         const 0;
         const 0;
         const 0;
 },
 lvl9_rb6WN_entry() //  [R1]
         { []
         }
     {offset
       cbapA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbapB; else goto cbapC;
       cbapB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbapC: // global
           (_cbapx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbapx::I64 == 0) goto cbapz; else goto cbapy;
       cbapz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbapy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbapx::I64;
           R2 = lvl8_rb6WM_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl9_rb6WN_info" {
     lvl9_rb6WN_info:
         const lvl9_rb6WN_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.601725668 UTC

[section ""data" . lvl10_rb6WO_closure" {
     lvl10_rb6WO_closure:
         const lvl10_rb6WO_info;
         const 0;
 },
 sat_sb753_entry() //  [R1]
         { []
         }
     {offset
       cbapU: // global
           _sb753::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbapV; else goto cbapW;
       cbapW: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cbapY; else goto cbapX;
       cbapY: // global
           HpAlloc = 72;
           goto cbapV;
       cbapV: // global
           R1 = _sb753::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbapX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sb753::P64;
           _sb74Z::P64 = P64[_sb753::P64 + 16];
           I64[Hp - 64] = GHC.Base.Just_con_info;
           P64[Hp - 56] = _sb74Z::P64;
           I64[Hp - 48] = GHC.IO.Exception.IOError_con_info;
           P64[Hp - 40] = Hp - 62;
           P64[Hp - 32] = GHC.IO.Exception.IllegalOperation_closure+1;
           P64[Hp - 24] = GHC.IO.Handle.Text.hGetContents3_closure;
           P64[Hp - 16] = lvl9_rb6WN_closure;
           P64[Hp - 8] = GHC.Base.Nothing_closure+1;
           P64[Hp] = GHC.Base.Nothing_closure+1;
           R2 = Hp - 47;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sb753_info" {
     sat_sb753_info:
         const sat_sb753_entry;
         const 1;
         const 4785078899048464;
         const Sb7vQ_srt;
 },
 lvl10_rb6WO_entry() //  [R2]
         { []
         }
     {offset
       cbapZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbaq3; else goto cbaq2;
       cbaq3: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = lvl10_rb6WO_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbaq2: // global
           I64[Hp - 16] = sat_sb753_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl10_rb6WO_info" {
     lvl10_rb6WO_info:
         const lvl10_rb6WO_entry;
         const 0;
         const 13792278153789454;
         const 8589934597;
         const Sb7vQ_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.62346984 UTC

[section ""data" . GHC.IO.Handle.Text.hGetContents2_closure" {
     GHC.IO.Handle.Text.hGetContents2_closure:
         const GHC.IO.Handle.Text.hGetContents2_info;
         const 0;
 },
 sat_sb77n_entry() //  [R1]
         { []
         }
     {offset
       cbarb: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cbarc; else goto cbard;
       cbarc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbard: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cbar9_info;
           _sb754::P64 = P64[R1 + 16];
           _sb75v::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _sb754::P64;
           P64[Sp - 24] = _sb75v::P64;
           Sp = Sp - 40;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sb77n_info" {
     sat_sb77n_info:
         const sat_sb77n_entry;
         const 3;
         const 141733920783;
         const Sb7vQ_srt+136;
 },
 _cbar9() //  [R1]
         { []
         }
     {offset
       cbar9: // global
           I64[Sp - 24] = block_cbarg_info;
           _sb77b::P64 = P64[R1 + 31];
           _sb77c::P64 = P64[R1 + 39];
           _sb77d::P64 = P64[R1 + 47];
           R1 = P64[R1 + 15];
           P64[Sp - 16] = _sb77c::P64;
           P64[Sp - 8] = _sb77d::P64;
           P64[Sp] = _sb77b::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubarF; else goto cbari;
       ubarF: // global
           call _cbarg(R1) args: 0, res: 0, upd: 0;
       cbari: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cbar9_info" {
     block_cbar9_info:
         const _cbar9;
         const 2;
         const 141733920798;
         const Sb7vQ_srt+136;
 },
 _cbarg() //  [R1]
         { []
         }
     {offset
       cbarg: // global
           if (I32[I64[R1 - 1] + 20] == 4 :: W32) goto cbart; else goto cbaro;
       cbart: // global
           _sb75v::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_cbarr_info;
           R1 = _sb75v::P64;
           Sp = Sp + 40;
           if (R1 & 7 != 0) goto ubarG; else goto cbaru;
       ubarG: // global
           call _cbarr(R1) args: 0, res: 0, upd: 0;
       cbaru: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       cbaro: // global
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 24];
           R3 = R1;
           R2 = P64[Sp + 32];
           Sp = Sp + 48;
           call $wlvl_rb6WI_entry(R6,
                                  R5,
                                  R4,
                                  R3,
                                  R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbarg_info" {
     block_cbarg_info:
         const _cbarg;
         const 5;
         const 141733920798;
         const Sb7vQ_srt+136;
 },
 _cbarr() //  [R1]
         { []
         }
     {offset
       cbarr: // global
           if (I64[R1 + 39] == I64[R1 + 47]) goto cbarD; else goto cbarC;
       cbarD: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cbarC: // global
           R1 = lvl4_rb6WH_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbarr_info" {
     block_cbarr_info:
         const _cbarr;
         const 0;
         const 4294967326;
         const Sb7vQ_srt+176;
 },
 sat_sb77p_entry() //  [R1, R2]
         { []
         }
     {offset
       cbarH: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbarI; else goto cbarJ;
       cbarI: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbarJ: // global
           I64[Sp - 32] = block_cbaqK_info;
           _sb754::P64 = P64[R1 + 6];
           _sb75b::P64 = P64[R1 + 14];
           _sb75v::P64 = P64[R1 + 22];
           R1 = R2;
           P64[Sp - 24] = _sb754::P64;
           P64[Sp - 16] = _sb75b::P64;
           P64[Sp - 8] = _sb75v::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubarZ; else goto cbaqL;
       ubarZ: // global
           call _cbaqK(R1) args: 0, res: 0, upd: 0;
       cbaqL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sb77p_info" {
     sat_sb77p_info:
         const sat_sb77p_entry;
         const 3;
         const 426623396478984;
         const 8589934597;
         const Sb7vQ_srt+56;
 },
 _cbaqK() //  [R1]
         { []
         }
     {offset
       cbaqK: // global
           I64[Sp - 16] = block_cbaqP_info;
           R2 = P64[R1 + 7];
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaqK_info" {
     block_cbaqK_info:
         const _cbaqK;
         const 3;
         const 426623396479006;
         const Sb7vQ_srt+56;
 },
 _cbaqP() //  [R1]
         { []
         }
     {offset
       cbaqP: // global
           I64[Sp] = block_cbaqT_info;
           R3 = GHC.IO.Exception.$fExceptionIOException4_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaqP_info" {
     block_cbaqP_info:
         const _cbaqP;
         const 5;
         const 426623396479006;
         const Sb7vQ_srt+56;
 },
 _cbaqT() //  [R1]
         { []
         }
     {offset
       cbaqT: // global
           if (R1 & 7 == 1) goto cbarP; else goto cbarS;
       cbarP: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 48;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       cbarS: // global
           I64[Sp] = block_cbaqY_info;
           R2 = P64[Sp + 32];
           call GHC.IO.Handle.Internals.hClose_help1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaqT_info" {
     block_cbaqT_info:
         const _cbaqT;
         const 5;
         const 416611827742;
         const Sb7vQ_srt+136;
 },
 _cbaqY() //  [R1]
         { []
         }
     {offset
       cbaqY: // global
           I64[Sp] = block_cbar0_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubarY; else goto cbar1;
       ubarY: // global
           call _cbar0(R1) args: 0, res: 0, upd: 0;
       cbar1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaqY_info" {
     block_cbaqY_info:
         const _cbaqY;
         const 645;
         const 141733920798;
         const Sb7vQ_srt+136;
 },
 _cbar0() //  [R1]
         { []
         }
     {offset
       cbar0: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cbarW; else goto cbarV;
       cbarW: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbarV: // global
           _sb775::P64 = P64[R1 + 7];
           I64[Hp - 56] = sat_sb77n_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _sb775::P64;
           P64[Hp] = Hp - 56;
           R1 = Hp - 15;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbar0_info" {
     block_cbar0_info:
         const _cbar0;
         const 645;
         const 141733920798;
         const Sb7vQ_srt+136;
 },
 sat_sb76m_entry() //  [R1]
         { []
         }
     {offset
       cbasX: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cbasY; else goto cbasZ;
       cbasY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbasZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 64] = block_cbasU_info;
           _sb75H::P64 = P64[R1 + 16];
           _sb75I::P64 = P64[R1 + 24];
           _sb75G::I64 = I64[R1 + 40];
           _sb75J::I64 = I64[R1 + 48];
           _sb75L::I64 = I64[R1 + 56];
           R1 = P64[R1 + 32];
           I64[Sp - 56] = _sb75G::I64;
           P64[Sp - 48] = _sb75H::P64;
           P64[Sp - 40] = _sb75I::P64;
           I64[Sp - 32] = _sb75J::I64;
           I64[Sp - 24] = _sb75L::I64;
           Sp = Sp - 64;
           if (R1 & 7 != 0) goto ubate; else goto cbasV;
       ubate: // global
           call _cbasU(R1) args: 0, res: 0, upd: 0;
       cbasV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sb76m_info" {
     sat_sb76m_info:
         const sat_sb76m_entry;
         const 12884901891;
         const 15;
 },
 _cbasU() //  [R1]
         { []
         }
     {offset
       cbasU: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbat4; else goto cbat3;
       cbat4: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbat3: // global
           _sb75G::I64 = I64[Sp + 8];
           _sb75H::P64 = P64[Sp + 16];
           _sb75I::P64 = P64[Sp + 24];
           _sb75J::I64 = I64[Sp + 32];
           _sb75L::I64 = I64[Sp + 40];
           _sb76k::I64 = I64[R1 + 7];
           if (_sb76k::I64 == _sb75L::I64) goto cbatd; else goto cbata;
       cbatd: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sb75H::P64;
           P64[Hp - 32] = _sb75I::P64;
           I64[Hp - 24] = _sb75G::I64;
           I64[Hp - 16] = _sb75J::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cbata: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sb75H::P64;
           P64[Hp - 32] = _sb75I::P64;
           I64[Hp - 24] = _sb75G::I64;
           I64[Hp - 16] = _sb75J::I64;
           I64[Hp - 8] = _sb76k::I64;
           I64[Hp] = _sb75L::I64;
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbasU_info" {
     block_cbasU_info:
         const _cbasU;
         const 1605;
         const 30;
 },
 sat_sb76T_entry() //  [R1]
         { []
         }
     {offset
       cbatf: // global
           if ((Sp + -88) < SpLim) (likely: False) goto cbatg; else goto cbath;
       cbatg: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbath: // global
           I64[Sp - 40] = block_cbas5_info;
           _sb754::P64 = P64[R1 + 7];
           _sb75b::P64 = P64[R1 + 15];
           _sb75k::P64 = P64[R1 + 23];
           _sb75p::P64 = P64[R1 + 31];
           R1 = P64[R1 + 39];
           P64[Sp - 32] = _sb754::P64;
           P64[Sp - 24] = _sb75b::P64;
           P64[Sp - 16] = _sb75k::P64;
           P64[Sp - 8] = _sb75p::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubavl; else goto cbas6;
       ubavl: // global
           call _cbas5(R1) args: 0, res: 0, upd: 0;
       cbas6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sb76T_info" {
     sat_sb76T_info:
         const sat_sb76T_entry;
         const 5;
         const 70373039144968;
         const 4294967299;
         const Sb7vQ_srt+80;
 },
 _cbas5() //  [R1]
         { []
         }
     {offset
       cbas5: // global
           _sb75C::I64 = I64[R1 + 39];
           _sb75D::I64 = I64[R1 + 47];
           _sb76p::I64 = _sb75D::I64 - _sb75C::I64;
           if (_sb76p::I64 == 0) goto cbauh; else goto ubav3;
       cbauh: // global
           I64[Sp] = block_cbaue_info;
           R3 = R1;
           R2 = P64[Sp + 16];
           call GHC.IO.Handle.Internals.hLookAhead_2_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
       ubav3: // global
           _sb75z::P64 = P64[R1 + 7];
           _sb75A::P64 = P64[R1 + 15];
           _sb75y::I64 = I64[R1 + 23];
           _sb75B::I64 = I64[R1 + 31];
           if (_sb76p::I64 != 1) goto ubav4; else goto cbauu;
       ubav4: // global
           P64[Sp - 40] = _sb75z::P64;
           P64[Sp - 32] = _sb75A::P64;
           I64[Sp - 24] = _sb75B::I64;
           I64[Sp - 16] = _sb75C::I64;
           I64[Sp - 8] = _sb75D::I64;
           I64[Sp] = _sb75y::I64;
           Sp = Sp - 40;
           call _cbauC() args: 0, res: 0, upd: 0;
       cbauu: // global
           I64[Sp - 48] = block_cbaut_info;
           R1 = P64[Sp + 32];
           P64[Sp - 40] = _sb75z::P64;
           P64[Sp - 32] = _sb75A::P64;
           I64[Sp - 24] = _sb75B::I64;
           I64[Sp - 16] = _sb75C::I64;
           I64[Sp - 8] = _sb75D::I64;
           I64[Sp] = _sb75y::I64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto ubave; else goto cbauw;
       ubave: // global
           call _cbaut(R1) args: 0, res: 0, upd: 0;
       cbauw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbas5_info" {
     block_cbas5_info:
         const _cbas5;
         const 4;
         const 70373039144990;
         const Sb7vQ_srt+80;
 },
 _cbaue() //  [R1]
         { []
         }
     {offset
       cbaue: // global
           I64[Sp] = block_cbaug_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubavn; else goto cbauk;
       ubavn: // global
           call _cbaug(R1) args: 0, res: 0, upd: 0;
       cbauk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaue_info" {
     block_cbaue_info:
         const _cbaue;
         const 4;
         const 4294967326;
         const Sb7vQ_srt+192;
 },
 _cbaug() //  [R1]
         { []
         }
     {offset
       cbaug: // global
           I64[Sp] = I64[R1 + 23];
           P64[Sp - 8] = P64[R1 + 7];
           P64[Sp - 16] = P64[R1 + 15];
           I64[Sp - 24] = I64[R1 + 31];
           I64[Sp - 32] = I64[R1 + 39];
           I64[Sp - 40] = I64[R1 + 47];
           Sp = Sp - 40;
           call _sb75E() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbaug_info" {
     block_cbaug_info:
         const _cbaug;
         const 4;
         const 4294967326;
         const Sb7vQ_srt+192;
 },
 _cbaut() //  [R1]
         { []
         }
     {offset
       cbaut: // global
           if (R1 & 7 == 1) goto ubav5; else goto cbauD;
       ubav5: // global
           Sp = Sp + 8;
           call _cbauC() args: 0, res: 0, upd: 0;
       cbauD: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbauI; else goto cbauH;
       cbauI: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbauH: // global
           _sb75b::P64 = P64[Sp + 64];
           _sb75y::I64 = I64[Sp + 48];
           _sb75z::P64 = P64[Sp + 8];
           _sb75A::P64 = P64[Sp + 16];
           _sb75B::I64 = I64[Sp + 24];
           _sb75C::I64 = I64[Sp + 32];
           _sb75D::I64 = I64[Sp + 40];
           _sb76D::I64 = %MO_UU_Conv_W32_W64(I32[_sb75y::I64 + (_sb75C::I64 << 2)]);
           call MO_Touch(_sb75z::P64);
           if (_sb76D::I64 == 13) goto cbauU; else goto cbauM;
       cbauU: // global
           I32[_sb75y::I64] = 13 :: W32;
           call MO_Touch(_sb75z::P64);
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sb75z::P64;
           P64[Hp - 32] = _sb75A::P64;
           I64[Hp - 24] = _sb75y::I64;
           I64[Hp - 16] = _sb75B::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 1;
           I64[Sp + 48] = block_cbauR_info;
           R3 = Hp - 47;
           R2 = _sb75b::P64;
           Sp = Sp + 48;
           call GHC.IO.Handle.Internals.hLookAhead_2_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
       cbauM: // global
           Hp = Hp - 56;
           I64[Sp + 8] = _sb75D::I64;
           I64[Sp + 16] = _sb75C::I64;
           I64[Sp + 24] = _sb75B::I64;
           P64[Sp + 32] = _sb75A::P64;
           P64[Sp + 40] = _sb75z::P64;
           I64[Sp + 48] = _sb75y::I64;
           Sp = Sp + 8;
           call _sb75E() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbaut_info" {
     block_cbaut_info:
         const _cbaut;
         const 3850;
         const 70373039144990;
         const Sb7vQ_srt+80;
 },
 _cbauC() //  []
         { []
         }
     {offset
       cbauC: // global
           I64[Sp + 40] = I64[Sp + 40];
           _sb75L::I64 = I64[Sp + 32];
           P64[Sp + 32] = P64[Sp];
           _sb75K::I64 = I64[Sp + 24];
           P64[Sp + 24] = P64[Sp + 8];
           I64[Sp + 16] = I64[Sp + 16];
           I64[Sp + 8] = _sb75K::I64;
           I64[Sp] = _sb75L::I64;
           call _sb75E() args: 0, res: 0, upd: 0;
     }
 },
 _cbauR() //  [R1]
         { []
         }
     {offset
       cbauR: // global
           I64[Sp] = block_cbauT_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubavs; else goto cbauW;
       ubavs: // global
           call _cbauT(R1) args: 0, res: 0, upd: 0;
       cbauW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbauR_info" {
     block_cbauR_info:
         const _cbauR;
         const 4;
         const 4294967326;
         const Sb7vQ_srt+192;
 },
 _cbauT() //  [R1]
         { []
         }
     {offset
       cbauT: // global
           I64[Sp] = I64[R1 + 23];
           P64[Sp - 8] = P64[R1 + 7];
           P64[Sp - 16] = P64[R1 + 15];
           I64[Sp - 24] = I64[R1 + 31];
           I64[Sp - 32] = I64[R1 + 39];
           I64[Sp - 40] = I64[R1 + 47];
           Sp = Sp - 40;
           call _sb75E() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbauT_info" {
     block_cbauT_info:
         const _cbauT;
         const 4;
         const 4294967326;
         const Sb7vQ_srt+192;
 },
 _sb75E() //  []
         { []
         }
     {offset
       sb75E: // global
           I64[Sp - 8] = block_cbasf_info;
           R2 = P64[Sp + 48];
           Sp = Sp - 8;
           call GHC.IO.Handle.Text.hGetContents2_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _cbasf() //  [R1]
         { []
         }
     {offset
       cbasf: // global
           I64[Sp] = block_cbash_info;
           _sb75O::P64 = R1;
           R1 = P64[Sp + 80];
           P64[Sp + 80] = _sb75O::P64;
           if (R1 & 7 != 0) goto ubavg; else goto cbasi;
       ubavg: // global
           call _cbash(R1) args: 0, res: 0, upd: 0;
       cbasi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbasf_info" {
     block_cbasf_info:
         const _cbasf;
         const 6602;
         const 30;
 },
 _cbash() //  [R1]
         { []
         }
     {offset
       cbash: // global
           _sb75G::I64 = I64[Sp + 48];
           _sb75H::P64 = P64[Sp + 40];
           _sb75K::I64 = I64[Sp + 16];
           _sb75L::I64 = I64[Sp + 8];
           _sb75O::P64 = P64[Sp + 80];
           if (R1 & 7 == 1) goto cbatm; else goto cbatW;
       cbatm: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cbatp; else goto cbato;
       cbatp: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbato: // global
           if (_sb75K::I64 == _sb75L::I64) goto cbatQ; else goto cbatJ;
       cbatQ: // global
           I64[Hp - 72] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 64] = _sb75H::P64;
           P64[Hp - 56] = P64[Sp + 32];
           I64[Hp - 48] = _sb75G::I64;
           I64[Hp - 40] = I64[Sp + 24];
           I64[Hp - 32] = 0;
           I64[Hp - 24] = 0;
           _sb75b::P64 = P64[Sp + 64];
           _sb75k::P64 = P64[Sp + 72];
           call MO_WriteBarrier();
           P64[_sb75k::P64 + 8] = Hp - 71;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb75k::P64);
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _sb75b::P64;
           P64[Hp] = _sb75O::P64;
           R1 = Hp - 15;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbatJ: // global
           Hp = Hp - 80;
           I64[Sp + 56] = _sb75L::I64 - 1;
           P64[Sp + 80] = _sb75O::P64;
           Sp = Sp + 8;
           call _cbasw() args: 0, res: 0, upd: 0;
       cbatW: // global
           I64[Sp] = block_cbasJ_info;
           R6 = _sb75O::P64;
           R5 = _sb75L::I64;
           R4 = _sb75K::I64;
           R3 = _sb75H::P64;
           R2 = _sb75G::I64;
           call $wunpack_nl_rb6WF_entry(R6,
                                        R5,
                                        R4,
                                        R3,
                                        R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbash_info" {
     block_cbash_info:
         const _cbash;
         const 6602;
         const 30;
 },
 _cbasw() //  []
         { []
         }
     {offset
       cbasw: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbatE; else goto cbatD;
       cbatE: // global
           HpAlloc = 40;
           I64[Sp] = block_cbasw_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cbatD: // global
           _sb75Z::P64 = P64[Sp + 72];
           _sb760::I64 = I64[Sp + 48];
           if (%MO_S_Ge_W64(_sb760::I64,
                            I64[Sp + 8])) goto cbatG; else goto cbatH;
       cbatG: // global
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = %MO_UU_Conv_W32_W64(I32[I64[Sp + 40] + (_sb760::I64 << 2)]);
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _sb75Z::P64;
           P64[Sp + 72] = Hp - 14;
           I64[Sp + 48] = _sb760::I64 - 1;
           call _cbasw() args: 0, res: 0, upd: 0;
       cbatH: // global
           Hp = Hp - 40;
           P64[Sp + 72] = _sb75Z::P64;
           Sp = Sp + 16;
           call _cbatr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbasw_info" {
     block_cbasw_info:
         const _cbasw;
         const 3273;
         const 30;
 },
 _cbatr() //  []
         { []
         }
     {offset
       cbatr: // global
           Hp = Hp + 80;
           _sb75T::P64 = P64[Sp + 56];
           if (Hp > HpLim) (likely: False) goto cbatB; else goto cbatA;
       cbatB: // global
           HpAlloc = 80;
           I64[Sp - 8] = block_cbatq_info;
           R1 = _sb75T::P64;
           Sp = Sp - 8;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbatA: // global
           _sb75b::P64 = P64[Sp + 40];
           _sb75k::P64 = P64[Sp + 48];
           _sb75G::I64 = I64[Sp + 24];
           _sb75H::P64 = P64[Sp + 16];
           _sb75I::P64 = P64[Sp + 8];
           _sb75J::I64 = I64[Sp];
           call MO_Touch(_sb75H::P64);
           I64[Hp - 72] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 64] = _sb75H::P64;
           P64[Hp - 56] = _sb75I::P64;
           I64[Hp - 48] = _sb75G::I64;
           I64[Hp - 40] = _sb75J::I64;
           I64[Hp - 32] = 0;
           I64[Hp - 24] = 0;
           call MO_WriteBarrier();
           P64[_sb75k::P64 + 8] = Hp - 71;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb75k::P64);
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _sb75b::P64;
           P64[Hp] = _sb75T::P64;
           R1 = Hp - 15;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cbatq() //  [R1]
         { []
         }
     {offset
       cbatq: // global
           P64[Sp + 64] = R1;
           Sp = Sp + 8;
           call _cbatr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbatq_info" {
     block_cbatq_info:
         const _cbatq;
         const 9800;
         const 30;
 },
 _cbasJ() //  [R1]
         { []
         }
     {offset
       cbasJ: // global
           I64[Sp] = block_cbasL_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubavk; else goto cbasM;
       ubavk: // global
           call _cbasL(R1) args: 0, res: 0, upd: 0;
       cbasM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbasJ_info" {
     block_cbasJ_info:
         const _cbasJ;
         const 39370;
         const 30;
 },
 _cbasL() //  [R1]
         { []
         }
     {offset
       cbasL: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cbau0; else goto cbatZ;
       cbau0: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbatZ: // global
           _sb76h::P64 = P64[R1 + 7];
           _sb76i::P64 = P64[R1 + 15];
           I64[Hp - 80] = sat_sb76m_info;
           P64[Hp - 64] = P64[Sp + 40];
           P64[Hp - 56] = P64[Sp + 32];
           P64[Hp - 48] = _sb76i::P64;
           I64[Hp - 40] = I64[Sp + 48];
           I64[Hp - 32] = I64[Sp + 24];
           I64[Hp - 24] = I64[Sp + 8];
           _sb75b::P64 = P64[Sp + 64];
           _sb75k::P64 = P64[Sp + 72];
           call MO_WriteBarrier();
           P64[_sb75k::P64 + 8] = Hp - 80;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb75k::P64);
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _sb75b::P64;
           P64[Hp] = _sb76h::P64;
           R1 = Hp - 15;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbasL_info" {
     block_cbasL_info:
         const _cbasL;
         const 39370;
         const 30;
 },
 act_sb758_entry() //  [R1, R2]
         { []
         }
     {offset
       cbavu: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbavv; else goto cbavw;
       cbavv: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbavw: // global
           I64[Sp - 16] = block_cbaqt_info;
           _sb754::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _sb754::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubavM; else goto cbaqu;
       ubavM: // global
           call _cbaqt(R1) args: 0, res: 0, upd: 0;
       cbaqu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . act_sb758_info" {
     act_sb758_info:
         const act_sb758_entry;
         const 1;
         const 1077568639860745;
         const 8589934597;
         const Sb7vQ_srt+56;
 },
 _cbaqt() //  [R1]
         { []
         }
     {offset
       cbaqt: // global
           I64[Sp - 24] = block_cbaqy_info;
           _sb75b::P64 = R1;
           _sb75k::P64 = P64[R1 + 71];
           _sb75p::P64 = P64[R1 + 111];
           R1 = P64[R1 + 39];
           P64[Sp - 16] = _sb75k::P64;
           P64[Sp - 8] = _sb75p::P64;
           P64[Sp] = _sb75b::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubavL; else goto cbaqz;
       ubavL: // global
           call _cbaqy(R1) args: 0, res: 0, upd: 0;
       cbaqz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaqt_info" {
     block_cbaqt_info:
         const _cbaqt;
         const 1;
         const 1077568639860766;
         const Sb7vQ_srt+56;
 },
 _cbaqy() //  [R1]
         { []
         }
     {offset
       cbaqy: // global
           _sb754::P64 = P64[Sp + 32];
           _cbavJ::P64 = R1 & 7;
           if (_cbavJ::P64 == 1) goto cbavE; else goto ubavK;
       cbavE: // global
           R2 = _sb754::P64;
           Sp = Sp + 40;
           call lvl7_rb6WL_entry(R2) args: 8, res: 0, upd: 8;
       ubavK: // global
           if (_cbavJ::P64 == 2) goto cbavF; else goto cbavB;
       cbavF: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cbavI; else goto cbavH;
       cbavI: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbavH: // global
           _sb75k::P64 = P64[Sp + 8];
           _sb75v::P64 = P64[_sb75k::P64 + 8];
           I64[Hp - 72] = sat_sb77p_info;
           P64[Hp - 64] = _sb754::P64;
           _sb75b::P64 = P64[Sp + 24];
           P64[Hp - 56] = _sb75b::P64;
           P64[Hp - 48] = _sb75v::P64;
           I64[Hp - 40] = sat_sb76T_info;
           P64[Hp - 32] = _sb754::P64;
           P64[Hp - 24] = _sb75b::P64;
           P64[Hp - 16] = _sb75k::P64;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _sb75v::P64;
           R2 = Hp - 70;
           R1 = Hp - 39;
           Sp = Sp + 40;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
       cbavB: // global
           R2 = _sb754::P64;
           Sp = Sp + 40;
           call lvl10_rb6WO_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaqy_info" {
     block_cbaqy_info:
         const _cbaqy;
         const 4;
         const 1077568639860766;
         const Sb7vQ_srt+56;
 },
 sat_sb77w_entry() //  [R1]
         { []
         }
     {offset
       cbavU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbavV; else goto cbavW;
       cbavV: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbavW: // global
           I64[Sp - 16] = block_cbaqm_info;
           P64[Sp - 8] = P64[R1 + 7];
           Sp = Sp - 16;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sb77w_info" {
     sat_sb77w_info:
         const sat_sb77w_entry;
         const 1;
         const 2205667569958921;
         const 4294967299;
         const Sb7vQ_srt+56;
 },
 _cbaqm() //  []
         { []
         }
     {offset
       cbaqm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbavZ; else goto cbavY;
       cbavZ: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cbavY: // global
           I64[Hp - 8] = act_sb758_info;
           _sb754::P64 = P64[Sp + 8];
           P64[Hp] = _sb754::P64;
           I64[Sp] = block_cbavN_info;
           R1 = _sb754::P64;
           P64[Sp + 8] = Hp - 6;
           if (R1 & 7 != 0) goto ubaw6; else goto cbavO;
       ubaw6: // global
           call _cbavN(R1) args: 0, res: 0, upd: 0;
       cbavO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaqm_info" {
     block_cbaqm_info:
         const _cbaqm;
         const 1;
         const 2205667569958942;
         const Sb7vQ_srt+56;
 },
 _cbavN() //  [R1]
         { []
         }
     {offset
       cbavN: // global
           _cbaqo::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cbavR; else goto cbavS;
       cbavR: // global
           R5 = _cbaqo::P64;
           R4 = P64[R1 + 15];
           R3 = R1;
           R2 = GHC.IO.Handle.Text.hGetContents3_closure;
           Sp = Sp + 16;
           call GHC.IO.Handle.Internals.$wwithHandle'_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
       cbavS: // global
           R5 = _cbaqo::P64;
           R4 = P64[R1 + 14];
           R3 = R1;
           R2 = GHC.IO.Handle.Text.hGetContents3_closure;
           Sp = Sp + 16;
           call GHC.IO.Handle.Internals.$wwithHandle'_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbavN_info" {
     block_cbavN_info:
         const _cbavN;
         const 1;
         const 2203318222878;
         const Sb7vQ_srt+128;
 },
 GHC.IO.Handle.Text.hGetContents2_entry() //  [R2]
         { []
         }
     {offset
       cbaw7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbawb; else goto cbawa;
       cbawb: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hGetContents2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbawa: // global
           I64[Hp - 8] = sat_sb77w_info;
           P64[Hp] = R2;
           R2 = Hp - 7;
           call GHC.IO.Unsafe.unsafeDupableInterleaveIO_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetContents2_info" {
     GHC.IO.Handle.Text.hGetContents2_info:
         const GHC.IO.Handle.Text.hGetContents2_entry;
         const 0;
         const 2205667569958926;
         const 8589934597;
         const Sb7vQ_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.687793542 UTC

[section ""data" . GHC.IO.Handle.Text.hGetContents1_closure" {
     GHC.IO.Handle.Text.hGetContents1_closure:
         const GHC.IO.Handle.Text.hGetContents1_info;
         const 0;
 },
 sat_sb77V_entry() //  [R1]
         { []
         }
     {offset
       cbazu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbazy; else goto cbazz;
       cbazy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbazz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbazr_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubazD; else goto cbazs;
       ubazD: // global
           call _cbazr(R1) args: 0, res: 0, upd: 0;
       cbazs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sb77V_info" {
     sat_sb77V_info:
         const sat_sb77V_entry;
         const 1;
         const 16;
 },
 _cbazr() //  [R1]
         { []
         }
     {offset
       cbazr: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cbazC; else goto cbazB;
       cbazC: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbazB: // global
           _sb77F::P64 = P64[R1 + 7];
           _sb77G::P64 = P64[R1 + 15];
           _sb77H::P64 = P64[R1 + 23];
           _sb77I::P64 = P64[R1 + 31];
           _sb77K::P64 = P64[R1 + 47];
           _sb77L::P64 = P64[R1 + 55];
           _sb77M::P64 = P64[R1 + 63];
           _sb77N::P64 = P64[R1 + 71];
           _sb77O::P64 = P64[R1 + 79];
           _sb77P::P64 = P64[R1 + 87];
           _sb77Q::P64 = P64[R1 + 95];
           _sb77R::P64 = P64[R1 + 103];
           _sb77S::P64 = P64[R1 + 111];
           _sb77T::P64 = P64[R1 + 119];
           _sb77U::P64 = P64[R1 + 127];
           I64[Hp - 128] = GHC.IO.Handle.Types.Handle___con_info;
           P64[Hp - 120] = _sb77F::P64;
           P64[Hp - 112] = _sb77G::P64;
           P64[Hp - 104] = _sb77H::P64;
           P64[Hp - 96] = _sb77I::P64;
           P64[Hp - 88] = GHC.IO.Handle.Types.SemiClosedHandle_closure+2;
           P64[Hp - 80] = _sb77K::P64;
           P64[Hp - 72] = _sb77L::P64;
           P64[Hp - 64] = _sb77M::P64;
           P64[Hp - 56] = _sb77N::P64;
           P64[Hp - 48] = _sb77O::P64;
           P64[Hp - 40] = _sb77P::P64;
           P64[Hp - 32] = _sb77Q::P64;
           P64[Hp - 24] = _sb77R::P64;
           P64[Hp - 16] = _sb77S::P64;
           P64[Hp - 8] = _sb77T::P64;
           P64[Hp] = _sb77U::P64;
           R1 = Hp - 127;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbazr_info" {
     block_cbazr_info:
         const _cbazr;
         const 0;
         const 30;
 },
 sat_sb77X_entry() //  [R1, R2]
         { []
         }
     {offset
       cbazF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbazG; else goto cbazH;
       cbazG: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbazH: // global
           I64[Sp - 16] = block_cbazl_info;
           _sb77z::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 8] = _sb77z::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Text.hGetContents2_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sb77X_info" {
     sat_sb77X_info:
         const sat_sb77X_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const Sb7vQ_srt+192;
 },
 _cbazl() //  [R1]
         { []
         }
     {offset
       cbazl: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbazK; else goto cbazJ;
       cbazK: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbazJ: // global
           I64[Hp - 40] = sat_sb77V_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbazl_info" {
     block_cbazl_info:
         const _cbazl;
         const 1;
         const 30;
 },
 GHC.IO.Handle.Text.hGetContents1_entry() //  [R2]
         { []
         }
     {offset
       cbazL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbazP; else goto cbazO;
       cbazP: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hGetContents1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbazO: // global
           I64[Hp - 8] = sat_sb77X_info;
           P64[Hp] = R2;
           R4 = Hp - 6;
           R3 = R2;
           R2 = GHC.IO.Handle.Text.hGetContents3_closure;
           call GHC.IO.Handle.Internals.wantReadableHandle1_entry(R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetContents1_info" {
     GHC.IO.Handle.Text.hGetContents1_info:
         const GHC.IO.Handle.Text.hGetContents1_entry;
         const 0;
         const 14297946128398;
         const 8589934597;
         const Sb7vQ_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.698793297 UTC

[section ""data" . GHC.IO.Handle.Text.hGetContents_closure" {
     GHC.IO.Handle.Text.hGetContents_closure:
         const GHC.IO.Handle.Text.hGetContents_info;
         const 0;
 },
 GHC.IO.Handle.Text.hGetContents_entry() //  [R2]
         { []
         }
     {offset
       cbaAh: // global
           R2 = R2;
           call GHC.IO.Handle.Text.hGetContents1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetContents_info" {
     GHC.IO.Handle.Text.hGetContents_info:
         const GHC.IO.Handle.Text.hGetContents_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const Sb7vQ_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.702993283 UTC

[section ""data" . go_rb6WP_closure" {
     go_rb6WP_closure:
         const go_rb6WP_info;
 },
 sat_sb782_entry() //  [R1]
         { []
         }
     {offset
       cbaAC: // global
           R2 = P64[R1 + 16];
           call go_rb6WP_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sb782_info" {
     sat_sb782_info:
         const sat_sb782_entry;
         const 1;
         const 16;
 },
 go_rb6WP_entry() //  [R2]
         { []
         }
     {offset
       cbaAJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbaAK; else goto cbaAL;
       cbaAK: // global
           R2 = R2;
           R1 = go_rb6WP_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbaAL: // global
           I64[Sp - 8] = block_cbaAs_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubaAR; else goto cbaAt;
       ubaAR: // global
           call _cbaAs(R1) args: 0, res: 0, upd: 0;
       cbaAt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_rb6WP_info" {
     go_rb6WP_info:
         const go_rb6WP_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cbaAs() //  [R1]
         { []
         }
     {offset
       cbaAs: // global
           if (R1 & 7 == 1) goto cbaAG; else goto cbaAH;
       cbaAG: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbaAH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbaAQ; else goto cbaAP;
       cbaAQ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbaAP: // global
           _sb780::P64 = P64[R1 + 6];
           _sb781::P64 = P64[R1 + 14];
           I64[Hp - 16] = sat_sb782_info;
           P64[Hp] = _sb781::P64;
           R3 = Hp - 16;
           R2 = _sb780::P64;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaAs_info" {
     block_cbaAs_info:
         const _cbaAs;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.71106025 UTC

[section ""data" . go1_rb6WQ_closure" {
     go1_rb6WQ_closure:
         const go1_rb6WQ_info;
 },
 sat_sb787_entry() //  [R1]
         { []
         }
     {offset
       cbaBl: // global
           R2 = P64[R1 + 16];
           call go1_rb6WQ_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sb787_info" {
     sat_sb787_info:
         const sat_sb787_entry;
         const 1;
         const 16;
 },
 go1_rb6WQ_entry() //  [R2]
         { []
         }
     {offset
       cbaBs: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbaBt; else goto cbaBu;
       cbaBt: // global
           R2 = R2;
           R1 = go1_rb6WQ_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbaBu: // global
           I64[Sp - 8] = block_cbaBb_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubaBA; else goto cbaBc;
       ubaBA: // global
           call _cbaBb(R1) args: 0, res: 0, upd: 0;
       cbaBc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_rb6WQ_info" {
     go1_rb6WQ_info:
         const go1_rb6WQ_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cbaBb() //  [R1]
         { []
         }
     {offset
       cbaBb: // global
           if (R1 & 7 == 1) goto cbaBp; else goto cbaBq;
       cbaBp: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbaBq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbaBz; else goto cbaBy;
       cbaBz: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbaBy: // global
           _sb785::P64 = P64[R1 + 6];
           _sb786::P64 = P64[R1 + 14];
           I64[Hp - 16] = sat_sb787_info;
           P64[Hp] = _sb786::P64;
           R3 = Hp - 16;
           R2 = _sb785::P64;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaBb_info" {
     block_cbaBb_info:
         const _cbaBb;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.735216277 UTC

[section ""data" . GHC.IO.Handle.Text.$whGetLineBufferedLoop_closure" {
     GHC.IO.Handle.Text.$whGetLineBufferedLoop_closure:
         const GHC.IO.Handle.Text.$whGetLineBufferedLoop_info;
         const 0;
 },
 GHC.IO.Handle.Text.$whGetLineBufferedLoop_slow() //  [R1]
         { []
         }
     {offset
       cbaBR: // global
           R6 = I64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.Handle.Text.$whGetLineBufferedLoop_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2,
                                                                R1) args: 32, res: 0, upd: 8;
     }
 },
 buf1_sb78H_entry() //  [R1]
         { []
         }
     {offset
       cbaDa: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cbaDb; else goto cbaDc;
       cbaDb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbaDc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 64] = block_cbaD7_info;
           _sb78a::P64 = P64[R1 + 16];
           _sb78b::P64 = P64[R1 + 24];
           _sb789::I64 = I64[R1 + 40];
           _sb78c::I64 = I64[R1 + 48];
           _sb78e::I64 = I64[R1 + 56];
           R1 = P64[R1 + 32];
           I64[Sp - 56] = _sb789::I64;
           P64[Sp - 48] = _sb78a::P64;
           P64[Sp - 40] = _sb78b::P64;
           I64[Sp - 32] = _sb78c::I64;
           I64[Sp - 24] = _sb78e::I64;
           Sp = Sp - 64;
           if (R1 & 7 != 0) goto ubaDr; else goto cbaD8;
       ubaDr: // global
           call _cbaD7(R1) args: 0, res: 0, upd: 0;
       cbaD8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . buf1_sb78H_info" {
     buf1_sb78H_info:
         const buf1_sb78H_entry;
         const 12884901891;
         const 15;
 },
 _cbaD7() //  [R1]
         { []
         }
     {offset
       cbaD7: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbaDh; else goto cbaDg;
       cbaDh: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbaDg: // global
           _sb789::I64 = I64[Sp + 8];
           _sb78a::P64 = P64[Sp + 16];
           _sb78b::P64 = P64[Sp + 24];
           _sb78c::I64 = I64[Sp + 32];
           _sb78e::I64 = I64[Sp + 40];
           _sb78J::I64 = I64[R1 + 7];
           if (_sb78J::I64 == _sb78e::I64) goto cbaDq; else goto cbaDn;
       cbaDq: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sb78a::P64;
           P64[Hp - 32] = _sb78b::P64;
           I64[Hp - 24] = _sb789::I64;
           I64[Hp - 16] = _sb78c::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cbaDn: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sb78a::P64;
           P64[Hp - 32] = _sb78b::P64;
           I64[Hp - 24] = _sb789::I64;
           I64[Hp - 16] = _sb78c::I64;
           I64[Hp - 8] = _sb78J::I64;
           I64[Hp] = _sb78e::I64;
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbaD7_info" {
     block_cbaD7_info:
         const _cbaD7;
         const 1605;
         const 30;
 },
 sat_sb79e_entry() //  [R1]
         { []
         }
     {offset
       cbaDy: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cbaDz; else goto cbaDA;
       cbaDz: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbaDA: // global
           I64[Sp - 24] = block_cbaDv_info;
           _sb78h::P64 = P64[R1 + 7];
           _sb78v::P64 = P64[R1 + 15];
           R1 = P64[R1 + 23];
           P64[Sp - 16] = _sb78h::P64;
           P64[Sp - 8] = _sb78v::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubaEL; else goto cbaDw;
       ubaEL: // global
           call _cbaDv(R1) args: 0, res: 0, upd: 0;
       cbaDw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sb79e_info" {
     sat_sb79e_info:
         const sat_sb79e_entry;
         const 3;
         const 4294967304;
         const 4294967299;
         const Sb7vQ_srt+80;
 },
 _cbaDv() //  [R1]
         { []
         }
     {offset
       cbaDv: // global
           _sb78R::I64 = I64[R1 + 39];
           _sb78T::I64 = I64[R1 + 47] - _sb78R::I64;
           if (_sb78T::I64 == 0) goto cbaDX; else goto ubaEG;
       cbaDX: // global
           I64[Sp + 16] = block_cbaDU_info;
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.IO.Handle.Internals.hLookAhead_2_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
       ubaEG: // global
           if (_sb78T::I64 == 1) goto cbaE7; else goto ubaEH;
       cbaE7: // global
           I64[Sp - 40] = block_cbaE6_info;
           _sb78M::P64 = R1;
           _sb78O::P64 = P64[R1 + 7];
           _sb78P::P64 = P64[R1 + 15];
           _sb78N::I64 = I64[R1 + 23];
           _sb78Q::I64 = I64[R1 + 31];
           R1 = P64[Sp + 16];
           P64[Sp - 32] = _sb78O::P64;
           P64[Sp - 24] = _sb78P::P64;
           I64[Sp - 16] = _sb78Q::I64;
           I64[Sp - 8] = _sb78R::I64;
           I64[Sp] = _sb78N::I64;
           P64[Sp + 16] = _sb78M::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubaEJ; else goto cbaE9;
       ubaEJ: // global
           call _cbaE6(R1) args: 0, res: 0, upd: 0;
       cbaE9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ubaEH: // global
           I64[Sp + 8] = _sb78T::I64;
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _cbaDI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbaDv_info" {
     block_cbaDv_info:
         const _cbaDv;
         const 2;
         const 4294967326;
         const Sb7vQ_srt+80;
 },
 _cbaDU() //  [R1]
         { []
         }
     {offset
       cbaDU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbaE1; else goto cbaE0;
       cbaE1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbaE0: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaDU_info" {
     block_cbaDU_info:
         const _cbaDU;
         const 0;
         const 30;
 },
 _cbaE6() //  [R1]
         { []
         }
     {offset
       cbaE6: // global
           _sb78M::P64 = P64[Sp + 56];
           if (R1 & 7 == 1) goto cbaEf; else goto cbaEj;
       cbaEf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbaEi; else goto cbaEh;
       cbaEi: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbaEh: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _sb78M::P64;
           R1 = Hp - 6;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbaEj: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbaEo; else goto cbaEn;
       cbaEo: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbaEn: // global
           _sb78h::P64 = P64[Sp + 48];
           _sb78N::I64 = I64[Sp + 40];
           _sb78O::P64 = P64[Sp + 8];
           _sb78P::P64 = P64[Sp + 16];
           _sb78Q::I64 = I64[Sp + 24];
           _sb793::I64 = %MO_UU_Conv_W32_W64(I32[_sb78N::I64 + (I64[Sp + 32] << 2)]);
           call MO_Touch(_sb78O::P64);
           if (_sb793::I64 == 13) goto cbaEB; else goto cbaEu;
       cbaEB: // global
           I32[_sb78N::I64] = 13 :: W32;
           call MO_Touch(_sb78O::P64);
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sb78O::P64;
           P64[Hp - 32] = _sb78P::P64;
           I64[Hp - 24] = _sb78N::I64;
           I64[Hp - 16] = _sb78Q::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 1;
           I64[Sp + 56] = block_cbaEy_info;
           R3 = Hp - 47;
           R2 = _sb78h::P64;
           Sp = Sp + 56;
           call GHC.IO.Handle.Internals.hLookAhead_2_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
       cbaEu: // global
           I64[Hp - 48] = GHC.Base.Just_con_info;
           P64[Hp - 40] = _sb78M::P64;
           _cbaEs::P64 = Hp - 46;
           Hp = Hp - 40;
           R1 = _cbaEs::P64;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaE6_info" {
     block_cbaE6_info:
         const _cbaE6;
         const 1799;
         const 4294967326;
         const Sb7vQ_srt+80;
 },
 _cbaEy() //  [R1]
         { []
         }
     {offset
       cbaEy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbaEE; else goto cbaED;
       cbaEE: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbaED: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaEy_info" {
     block_cbaEy_info:
         const _cbaEy;
         const 0;
         const 30;
 },
 _cbaDI() //  []
         { []
         }
     {offset
       cbaDI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbaDP; else goto cbaDO;
       cbaDP: // global
           HpAlloc = 16;
           _sb78T::I64 = I64[Sp];
           I64[Sp] = block_cbaDH_info;
           R1 = _sb78T::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbaDO: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cbaDH() //  [R1]
         { []
         }
     {offset
       cbaDH: // global
           I64[Sp] = R1;
           call _cbaDI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbaDH_info" {
     block_cbaDH_info:
         const _cbaDH;
         const 1;
         const 30;
 },
 sat_sb79q_entry() //  [R1]
         { []
         }
     {offset
       cbaEV: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbaEZ; else goto cbaF0;
       cbaEZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbaF0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbaES_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubaF4; else goto cbaET;
       ubaF4: // global
           call _cbaES(R1) args: 0, res: 0, upd: 0;
       cbaET: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sb79q_info" {
     sat_sb79q_info:
         const sat_sb79q_entry;
         const 1;
         const 16;
 },
 _cbaES() //  [R1]
         { []
         }
     {offset
       cbaES: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbaF3; else goto cbaF2;
       cbaF3: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbaF2: // global
           _sb79l::P64 = P64[R1 + 7];
           _sb79m::P64 = P64[R1 + 15];
           _sb79k::I64 = I64[R1 + 23];
           _sb79n::I64 = I64[R1 + 31];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sb79l::P64;
           P64[Hp - 32] = _sb79m::P64;
           I64[Hp - 24] = _sb79k::I64;
           I64[Hp - 16] = _sb79n::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbaES_info" {
     block_cbaES_info:
         const _cbaES;
         const 0;
         const 30;
 },
 sat_sb79A_entry() //  [R1]
         { []
         }
     {offset
       cbaFg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbaFh; else goto cbaFi;
       cbaFh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbaFi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbaFd_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubaFr; else goto cbaFe;
       ubaFr: // global
           call _cbaFd(R1) args: 0, res: 0, upd: 0;
       cbaFe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sb79A_info" {
     sat_sb79A_info:
         const sat_sb79A_entry;
         const 1;
         const 4294967312;
         const Sb7vQ_srt+176;
 },
 _cbaFd() //  [R1]
         { []
         }
     {offset
       cbaFd: // global
           if (I64[R1 + 39] == I64[R1 + 47]) goto cbaFq; else goto cbaFp;
       cbaFq: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cbaFp: // global
           R1 = lvl4_rb6WH_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbaFd_info" {
     block_cbaFd_info:
         const _cbaFd;
         const 0;
         const 4294967326;
         const Sb7vQ_srt+176;
 },
 sat_sb79S_entry() //  [R1]
         { []
         }
     {offset
       cbaFA: // global
           _sb79S::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbaFB; else goto cbaFC;
       cbaFC: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbaFE; else goto cbaFD;
       cbaFE: // global
           HpAlloc = 56;
           goto cbaFB;
       cbaFB: // global
           R1 = _sb79S::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbaFD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sb79S::P64;
           _sb78a::P64 = P64[_sb79S::P64 + 16];
           _sb78b::P64 = P64[_sb79S::P64 + 24];
           _sb789::I64 = I64[_sb79S::P64 + 32];
           _sb78c::I64 = I64[_sb79S::P64 + 40];
           _sb78e::I64 = I64[_sb79S::P64 + 48];
           _sb79Q::I64 = I64[_sb79S::P64 + 56] + 1;
           if (_sb79Q::I64 == _sb78e::I64) goto cbaFO; else goto cbaFL;
       cbaFO: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sb78a::P64;
           P64[Hp - 32] = _sb78b::P64;
           I64[Hp - 24] = _sb789::I64;
           I64[Hp - 16] = _sb78c::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cbaFL: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sb78a::P64;
           P64[Hp - 32] = _sb78b::P64;
           I64[Hp - 24] = _sb789::I64;
           I64[Hp - 16] = _sb78c::I64;
           I64[Hp - 8] = _sb79Q::I64;
           I64[Hp] = _sb78e::I64;
           R1 = Hp - 47;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sb79S_info" {
     sat_sb79S_info:
         const sat_sb79S_entry;
         const 17179869186;
         const 15;
 },
 sat_sb79W_entry() //  [R1]
         { []
         }
     {offset
       cbaFZ: // global
           _sb79W::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cbaG0; else goto cbaG1;
       cbaG1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbaG3; else goto cbaG2;
       cbaG3: // global
           HpAlloc = 24;
           goto cbaG0;
       cbaG0: // global
           R1 = _sb79W::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbaG2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sb79W::P64;
           _sb78f::P64 = P64[_sb79W::P64 + 16];
           _sb78E::P64 = P64[_sb79W::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sb78E::P64;
           P64[Hp] = _sb78f::P64;
           I64[Sp - 24] = block_cbaFX_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = Hp - 14;
           Sp = Sp - 24;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sb79W_info" {
     sat_sb79W_info:
         const sat_sb79W_entry;
         const 2;
         const 18;
 },
 _cbaFX() //  [R1]
         { []
         }
     {offset
       cbaFX: // global
           R2 = R1;
           Sp = Sp + 8;
           call go_rb6WP_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbaFX_info" {
     block_cbaFX_info:
         const _cbaFX;
         const 0;
         const 30;
 },
 GHC.IO.Handle.Text.$whGetLineBufferedLoop_entry() //  [R2, R3, R4,
                                                        R5, R6]
         { []
         }
     {offset
       cbaG7: // global
           if ((Sp + -96) < SpLim) (likely: False) goto cbaG8; else goto ubaHZ;
       cbaG8: // global
           R1 = GHC.IO.Handle.Text.$whGetLineBufferedLoop_closure;
           P64[Sp - 40] = R2;
           I64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       ubaHZ: // global
           P64[Sp - 40] = R2;
           I64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call _cbaBS() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.$whGetLineBufferedLoop_info" {
     GHC.IO.Handle.Text.$whGetLineBufferedLoop_info:
         const GHC.IO.Handle.Text.$whGetLineBufferedLoop_entry;
         const 0;
         const 6790596698046478;
         const 38654705664;
         const Sb7vQ_srt+72;
         const 7304;
         const GHC.IO.Handle.Text.$whGetLineBufferedLoop_slow;
 },
 _cbaBS() //  []
         { []
         }
     {offset
       cbaBS: // global
           _sb788::P64 = P64[Sp];
           I64[Sp] = block_cbaBV_info;
           R1 = _sb788::P64;
           if (R1 & 7 != 0) goto ubaIc; else goto cbaBW;
       ubaIc: // global
           call _cbaBV(R1) args: 0, res: 0, upd: 0;
       cbaBW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbaBV() //  [R1]
         { []
         }
     {offset
       cbaBV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbaGc; else goto cbaGb;
       cbaGc: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbaGb: // global
           _sb78q::P64 = P64[R1 + 71];
           _sb78v::P64 = P64[R1 + 111];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           I64[Hp] = I64[Sp + 8];
           P64[Sp - 32] = _sb78q::P64;
           P64[Sp - 24] = _sb78v::P64;
           P64[Sp - 16] = Hp - 15;
           I64[Sp - 8] = I64[Sp + 40];
           P64[Sp] = R1;
           Sp = Sp - 32;
           call _cbaHy() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbaBV_info" {
     block_cbaBV_info:
         const _cbaBV;
         const 3655;
         const 2286997070675998;
         const Sb7vQ_srt+72;
 },
 _cbaHy() //  []
         { []
         }
     {offset
       cbaHy: // global
           _sb78e::I64 = I64[Sp + 80];
           if (I64[Sp + 24] == _sb78e::I64) goto cbaHS; else goto cbaHH;
       cbaHS: // global
           P64[Sp + 24] = GHC.Types.False_closure+1;
           I64[Sp + 16] = _sb78e::I64;
           call _sb78y() args: 0, res: 0, upd: 0;
       cbaHH: // global
           I64[Sp - 8] = block_cbaHF_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubaIq; else goto cbaHI;
       ubaIq: // global
           call _cbaHF(R1) args: 0, res: 0, upd: 0;
       cbaHI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbaHF() //  [R1]
         { []
         }
     {offset
       cbaHF: // global
           _sb7au::I64 = I64[Sp + 32];
           _sb7aC::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 + 15] + (_sb7au::I64 << 2)]);
           call MO_Touch(P64[R1 + 7]);
           if (_sb7aC::I64 == 10) goto cbaHR; else goto cbaHQ;
       cbaHR: // global
           I64[Sp + 24] = _sb7au::I64;
           P64[Sp + 32] = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call _sb78y() args: 0, res: 0, upd: 0;
       cbaHQ: // global
           P64[Sp + 24] = R1;
           I64[Sp + 32] = _sb7au::I64 + 1;
           Sp = Sp + 8;
           call _cbaHy() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbaHF_info" {
     block_cbaHF_info:
         const _cbaHF;
         const 117516;
         const 2286997070675998;
         const Sb7vQ_srt+72;
 },
 _sb78y() //  []
         { []
         }
     {offset
       sb78y: // global
           I64[Sp - 8] = block_cbaC8_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubaIu; else goto cbaC9;
       ubaIu: // global
           call _cbaC8(R1) args: 0, res: 0, upd: 0;
       cbaC9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbaC8() //  [R1]
         { []
         }
     {offset
       cbaC8: // global
           _sb78d::I64 = I64[Sp + 80];
           _sb78B::I64 = I64[Sp + 24];
           if (R1 & 7 == 1) goto cbaGR; else goto cbaHd;
       cbaGR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbaGU; else goto cbaGT;
       cbaGU: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbaGT: // global
           if (_sb78d::I64 == _sb78B::I64) goto cbaH6; else goto cbaH5;
       cbaH6: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sb78B::I64;
           P64[Sp + 80] = GHC.Types.[]_closure+1;
           P64[Sp] = Hp - 7;
           call _sb78C() args: 0, res: 0, upd: 0;
       cbaH5: // global
           Hp = Hp - 16;
           I64[Sp - 8] = _sb78B::I64 - 1;
           P64[Sp] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call _cbaCU() args: 0, res: 0, upd: 0;
       cbaHd: // global
           I64[Sp] = block_cbaH9_info;
           R6 = GHC.Types.[]_closure+1;
           R5 = _sb78B::I64;
           R4 = _sb78d::I64;
           R3 = P64[Sp + 56];
           R2 = I64[Sp + 48];
           call $wunpack_nl_rb6WF_entry(R6,
                                        R5,
                                        R4,
                                        R3,
                                        R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaC8_info" {
     block_cbaC8_info:
         const _cbaC8;
         const 117004;
         const 2286997070675998;
         const Sb7vQ_srt+72;
 },
 _cbaCU() //  []
         { []
         }
     {offset
       cbaCU: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbaH0; else goto cbaGZ;
       cbaH0: // global
           HpAlloc = 40;
           I64[Sp] = block_cbaCU_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cbaGZ: // global
           _sb7a5::P64 = P64[Sp + 16];
           _sb7a6::I64 = I64[Sp + 8];
           if (%MO_S_Ge_W64(_sb7a6::I64,
                            I64[Sp + 96])) goto cbaH2; else goto cbaH3;
       cbaH2: // global
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = %MO_UU_Conv_W32_W64(I32[I64[Sp + 64] + (_sb7a6::I64 << 2)]);
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _sb7a5::P64;
           P64[Sp + 16] = Hp - 14;
           I64[Sp + 8] = _sb7a6::I64 - 1;
           call _cbaCU() args: 0, res: 0, upd: 0;
       cbaH3: // global
           Hp = Hp - 40;
           P64[Sp + 96] = _sb7a5::P64;
           Sp = Sp + 24;
           call _cbaCO() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbaCU_info" {
     block_cbaCU_info:
         const _cbaCU;
         const 468046;
         const 2286997070675998;
         const Sb7vQ_srt+72;
 },
 _cbaCO() //  []
         { []
         }
     {offset
       cbaCO: // global
           Hp = Hp + 16;
           _sb7a1::P64 = P64[Sp + 72];
           if (Hp > HpLim) (likely: False) goto cbaGX; else goto cbaGW;
       cbaGX: // global
           HpAlloc = 16;
           I64[Sp - 8] = block_cbaCN_info;
           R1 = _sb7a1::P64;
           Sp = Sp - 8;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbaGW: // global
           _sb78B::I64 = I64[Sp + 16];
           call MO_Touch(P64[Sp + 48]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sb78B::I64;
           P64[Sp + 72] = _sb7a1::P64;
           P64[Sp - 8] = Hp - 7;
           Sp = Sp - 8;
           call _sb78C() args: 0, res: 0, upd: 0;
     }
 },
 _cbaCN() //  [R1]
         { []
         }
     {offset
       cbaCN: // global
           P64[Sp + 80] = R1;
           Sp = Sp + 8;
           call _cbaCO() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbaCN_info" {
     block_cbaCN_info:
         const _cbaCN;
         const 117004;
         const 2286997070675998;
         const Sb7vQ_srt+72;
 },
 _cbaH9() //  [R1]
         { []
         }
     {offset
       cbaH9: // global
           I64[Sp] = block_cbaHb_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubaIo; else goto cbaHf;
       ubaIo: // global
           call _cbaHb(R1) args: 0, res: 0, upd: 0;
       cbaHf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaH9_info" {
     block_cbaH9_info:
         const _cbaH9;
         const 117004;
         const 2286997070675998;
         const Sb7vQ_srt+72;
 },
 _cbaHb() //  [R1]
         { []
         }
     {offset
       cbaHb: // global
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 80] = P64[R1 + 7];
           call _sb78C() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbaHb_info" {
     block_cbaHb_info:
         const _cbaHb;
         const 117004;
         const 2286997070675998;
         const Sb7vQ_srt+72;
 },
 _sb78C() //  []
         { []
         }
     {offset
       sb78C: // global
           I64[Sp - 8] = block_cbaCl_info;
           R1 = P64[Sp + 32];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubaIv; else goto cbaCm;
       ubaIv: // global
           call _cbaCl(R1) args: 0, res: 0, upd: 0;
       cbaCm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbaCl() //  [R1]
         { []
         }
     {offset
       cbaCl: // global
           _sb789::I64 = I64[Sp + 56];
           _sb78a::P64 = P64[Sp + 64];
           _sb78b::P64 = P64[Sp + 72];
           _sb78c::I64 = I64[Sp + 80];
           _sb78e::I64 = I64[Sp + 96];
           if (R1 & 7 == 1) goto cbaGg; else goto cbaGM;
       cbaGg: // global
           Hp = Hp + 96;
           _sb78G::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbaGP; else goto cbaGi;
       cbaGi: // global
           I64[Hp - 88] = buf1_sb78H_info;
           P64[Hp - 72] = _sb78a::P64;
           P64[Hp - 64] = _sb78b::P64;
           P64[Hp - 56] = P64[Sp + 8];
           I64[Hp - 48] = _sb789::I64;
           I64[Hp - 40] = _sb78c::I64;
           I64[Hp - 32] = _sb78e::I64;
           I64[Hp - 24] = sat_sb79e_info;
           P64[Hp - 16] = P64[Sp + 48];
           P64[Hp - 8] = P64[Sp + 24];
           _cbaCq::P64 = Hp - 88;
           P64[Hp] = _cbaCq::P64;
           I64[Sp + 8] = block_cbaCu_info;
           R2 = GHC.IO.Handle.Text.hGetChar3_closure+2;
           R1 = Hp - 23;
           P64[Sp + 96] = _cbaCq::P64;
           Sp = Sp + 8;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
       cbaGM: // global
           Hp = Hp + 96;
           _sb78G::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbaGP; else goto cbaGO;
       cbaGP: // global
           HpAlloc = 96;
           R1 = _sb78G::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbaGO: // global
           I64[Hp - 88] = sat_sb79S_info;
           P64[Hp - 72] = _sb78a::P64;
           P64[Hp - 64] = _sb78b::P64;
           I64[Hp - 56] = _sb789::I64;
           I64[Hp - 48] = _sb78c::I64;
           I64[Hp - 40] = _sb78e::I64;
           I64[Hp - 32] = I64[Sp + 32];
           _sb78f::P64 = P64[Sp + 104];
           _sb78q::P64 = P64[Sp + 16];
           _sb78E::P64 = P64[Sp + 88];
           call MO_WriteBarrier();
           P64[_sb78q::P64 + 8] = Hp - 88;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb78q::P64);
           I64[Hp - 24] = sat_sb79W_info;
           P64[Hp - 8] = _sb78f::P64;
           P64[Hp] = _sb78E::P64;
           R1 = Hp - 24;
           Sp = Sp + 112;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaCl_info" {
     block_cbaCl_info:
         const _cbaCl;
         const 169485;
         const 2286997070675998;
         const Sb7vQ_srt+72;
 },
 _cbaCu() //  [R1]
         { []
         }
     {offset
       cbaCu: // global
           I64[Sp] = block_cbaCw_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubaIg; else goto cbaCx;
       ubaIg: // global
           call _cbaCw(R1) args: 0, res: 0, upd: 0;
       cbaCx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaCu_info" {
     block_cbaCu_info:
         const _cbaCu;
         const 31628;
         const 2286997070675998;
         const Sb7vQ_srt+72;
 },
 _cbaCw() //  [R1]
         { []
         }
     {offset
       cbaCw: // global
           if (R1 & 7 == 1) goto cbaGo; else goto cbaGI;
       cbaGo: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cbaGr; else goto cbaGq;
       cbaGr: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbaGq: // global
           I64[Hp - 88] = sat_sb79q_info;
           _cbaCq::P64 = P64[Sp + 88];
           P64[Hp - 72] = _cbaCq::P64;
           _sb78f::P64 = P64[Sp + 96];
           _sb78q::P64 = P64[Sp + 8];
           _sb78E::P64 = P64[Sp + 80];
           call MO_WriteBarrier();
           P64[_sb78q::P64 + 8] = Hp - 88;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb78q::P64);
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = _sb78E::P64;
           P64[Hp - 48] = _sb78f::P64;
           I64[Hp - 40] = sat_sb79A_info;
           P64[Hp - 24] = _cbaCq::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 62;
           I64[Sp + 96] = block_cbaGm_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = Hp - 14;
           Sp = Sp + 96;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 8;
       cbaGI: // global
           I64[Sp + 32] = block_cbaCC_info;
           R1 = P64[R1 + 6];
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto ubaIh; else goto cbaCD;
       ubaIh: // global
           call _cbaCC(R1) args: 0, res: 0, upd: 0;
       cbaCD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaCw_info" {
     block_cbaCw_info:
         const _cbaCw;
         const 31628;
         const 2286997070675998;
         const Sb7vQ_srt+72;
 },
 _cbaGm() //  [R1]
         { []
         }
     {offset
       cbaGm: // global
           I64[Sp] = block_cbaGv_info;
           R2 = R1;
           call go1_rb6WQ_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaGm_info" {
     block_cbaGm_info:
         const _cbaGm;
         const 0;
         const 4294967326;
         const Sb7vQ_srt+224;
 },
 _cbaGv() //  [R1]
         { []
         }
     {offset
       cbaGv: // global
           if (R1 & 7 == 1) goto cbaGC; else goto cbaGG;
       cbaGC: // global
           Sp = Sp + 8;
           call GHC.IO.Handle.Internals.ioe_EOF1_entry() args: 8, res: 0, upd: 8;
       cbaGG: // global
           R1 = R1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaGv_info" {
     block_cbaGv_info:
         const _cbaGv;
         const 0;
         const 4294967326;
         const Sb7vQ_srt+224;
 },
 _cbaCC() //  [R1]
         { []
         }
     {offset
       cbaCC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbaGL; else goto cbaGK;
       cbaGL: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbaGK: // global
           _sb79K::P64 = P64[R1 + 7];
           _sb79L::P64 = P64[R1 + 15];
           _sb79J::I64 = I64[R1 + 23];
           _sb79M::I64 = I64[R1 + 31];
           _sb79N::I64 = I64[R1 + 39];
           _sb79O::I64 = I64[R1 + 47];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = P64[Sp + 64];
           P64[Sp + 8] = P64[Sp + 8];
           I64[Sp + 16] = _sb79J::I64;
           P64[Sp + 24] = _sb79K::P64;
           P64[Sp + 32] = _sb79L::P64;
           I64[Sp + 40] = _sb79M::I64;
           I64[Sp + 48] = _sb79N::I64;
           I64[Sp + 56] = _sb79O::I64;
           P64[Sp + 64] = Hp - 14;
           Sp = Sp + 8;
           call _cbaBS() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbaCC_info" {
     block_cbaCC_info:
         const _cbaCC;
         const 6024;
         const 2286997070675998;
         const Sb7vQ_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.796767204 UTC

[section ""data" . GHC.IO.Handle.Text.hGetLine3_closure" {
     GHC.IO.Handle.Text.hGetLine3_closure:
         const GHC.IO.Handle.Text.hGetLine3_info;
         const 0;
 },
 GHC.IO.Handle.Text.hGetLine3_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbaLx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbaLy; else goto cbaLz;
       cbaLy: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hGetLine3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbaLz: // global
           I64[Sp - 24] = block_cbaLu_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubaLD; else goto cbaLv;
       ubaLD: // global
           call _cbaLu(R1) args: 0, res: 0, upd: 0;
       cbaLv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetLine3_info" {
     GHC.IO.Handle.Text.hGetLine3_info:
         const GHC.IO.Handle.Text.hGetLine3_entry;
         const 0;
         const 12884901902;
         const 17179869207;
         const Sb7vQ_srt+232;
 },
 _cbaLu() //  [R1]
         { []
         }
     {offset
       cbaLu: // global
           R6 = I64[R1 + 31];
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = I64[R1 + 23];
           R2 = P64[Sp + 8];
           I64[Sp] = I64[R1 + 39];
           I64[Sp + 8] = I64[R1 + 47];
           call GHC.IO.Handle.Text.$whGetLineBufferedLoop_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaLu_info" {
     block_cbaLu_info:
         const _cbaLu;
         const 2;
         const 4294967326;
         const Sb7vQ_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.802491887 UTC

[section ""cstring" . GHC.IO.Handle.Text.hGetLine5_bytes" {
     GHC.IO.Handle.Text.hGetLine5_bytes:
         I8[] [104,71,101,116,76,105,110,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.80468922 UTC

[section ""data" . GHC.IO.Handle.Text.hGetLine4_closure" {
     GHC.IO.Handle.Text.hGetLine4_closure:
         const GHC.IO.Handle.Text.hGetLine4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Text.hGetLine4_entry() //  [R1]
         { []
         }
     {offset
       cbaLW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbaLX; else goto cbaLY;
       cbaLX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbaLY: // global
           (_cbaLT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbaLT::I64 == 0) goto cbaLV; else goto cbaLU;
       cbaLV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbaLU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbaLT::I64;
           R2 = GHC.IO.Handle.Text.hGetLine5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetLine4_info" {
     GHC.IO.Handle.Text.hGetLine4_info:
         const GHC.IO.Handle.Text.hGetLine4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.809729001 UTC

[section ""data" . GHC.IO.Handle.Text.hGetLine2_closure" {
     GHC.IO.Handle.Text.hGetLine2_closure:
         const GHC.IO.Handle.Text.hGetLine2_info;
         const 0;
 },
 GHC.IO.Handle.Text.hGetLine2_entry() //  [R2]
         { []
         }
     {offset
       cbaMd: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbaMh; else goto cbaMi;
       cbaMh: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hGetLine2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbaMi: // global
           I64[Sp - 8] = block_cbaMa_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubaMq; else goto cbaMb;
       ubaMq: // global
           call _cbaMa(R1) args: 0, res: 0, upd: 0;
       cbaMb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetLine2_info" {
     GHC.IO.Handle.Text.hGetLine2_info:
         const GHC.IO.Handle.Text.hGetLine2_entry;
         const 0;
         const 21474836494;
         const 8589934597;
         const Sb7vQ_srt+232;
 },
 _cbaMa() //  [R1]
         { []
         }
     {offset
       cbaMa: // global
           _sb7bd::P64 = P64[P64[R1 + 71] + 8];
           I64[Sp - 8] = block_cbaMg_info;
           _sb7aU::P64 = R1;
           R1 = _sb7bd::P64;
           P64[Sp] = _sb7aU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubaMp; else goto cbaMk;
       ubaMp: // global
           call _cbaMg(R1) args: 0, res: 0, upd: 0;
       cbaMk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaMa_info" {
     block_cbaMa_info:
         const _cbaMa;
         const 0;
         const 4294967326;
         const Sb7vQ_srt+232;
 },
 _cbaMg() //  [R1]
         { []
         }
     {offset
       cbaMg: // global
           R6 = I64[R1 + 31];
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = I64[R1 + 23];
           R2 = P64[Sp + 8];
           I64[Sp - 8] = I64[R1 + 39];
           I64[Sp] = I64[R1 + 47];
           P64[Sp + 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 8;
           call GHC.IO.Handle.Text.$whGetLineBufferedLoop_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaMg_info" {
     block_cbaMg_info:
         const _cbaMg;
         const 1;
         const 4294967326;
         const Sb7vQ_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.816529163 UTC

[section ""data" . GHC.IO.Handle.Text.hGetLine1_closure" {
     GHC.IO.Handle.Text.hGetLine1_closure:
         const GHC.IO.Handle.Text.hGetLine1_info;
         const 0;
 },
 GHC.IO.Handle.Text.hGetLine1_entry() //  [R2]
         { []
         }
     {offset
       cbaML: // global
           R4 = GHC.IO.Handle.Text.hGetLine2_closure+2;
           R3 = R2;
           R2 = GHC.IO.Handle.Text.hGetLine4_closure;
           call GHC.IO.Handle.Internals.wantReadableHandle_1_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetLine1_info" {
     GHC.IO.Handle.Text.hGetLine1_info:
         const GHC.IO.Handle.Text.hGetLine1_entry;
         const 0;
         const 6755403736023054;
         const 8589934597;
         const Sb7vQ_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.819942021 UTC

[section ""data" . GHC.IO.Handle.Text.hGetLine_closure" {
     GHC.IO.Handle.Text.hGetLine_closure:
         const GHC.IO.Handle.Text.hGetLine_info;
         const 0;
 },
 GHC.IO.Handle.Text.hGetLine_entry() //  [R2]
         { []
         }
     {offset
       cbaMW: // global
           R2 = R2;
           call GHC.IO.Handle.Text.hGetLine1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetLine_info" {
     GHC.IO.Handle.Text.hGetLine_info:
         const GHC.IO.Handle.Text.hGetLine_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const Sb7vQ_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.824321136 UTC

[section ""data" . lvl11_rb6WR_closure" {
     lvl11_rb6WR_closure:
         const lvl11_rb6WR_info;
         const 0;
         const 0;
         const 0;
 },
 lvl11_rb6WR_entry() //  [R1]
         { []
         }
     {offset
       cbaNe: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cbaNf; else goto cbaNg;
       cbaNf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbaNg: // global
           (_cbaN6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbaN6::I64 == 0) goto cbaN8; else goto cbaN7;
       cbaN8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbaN7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbaN6::I64;
           I64[Sp - 24] = block_cbaN9_info;
           R6 = 0;
           R5 = GHC.IO.FD.$tcFD1_closure;
           R4 = GHC.IO.FD.$trModule_closure;
           R3 = 15546290101957756376;
           R2 = 10838815552519039062;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl11_rb6WR_info" {
     lvl11_rb6WR_info:
         const lvl11_rb6WR_entry;
         const 0;
         const 4294967317;
         const Sb7vQ_srt+272;
 },
 _cbaN9() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cbaN9: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _cbaNa() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbaN9_info" {
     block_cbaN9_info:
         const _cbaN9;
         const 0;
         const 30;
 },
 _cbaNa() //  []
         { []
         }
     {offset
       cbaNa: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbaNj; else goto cbaNi;
       cbaNj: // global
           HpAlloc = 48;
           I64[Sp] = block_cbaNa_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       cbaNi: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbaNa_info" {
     block_cbaNa_info:
         const _cbaNa;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.84433028 UTC

[section ""data" . GHC.IO.Handle.Text.hGetBufNonBlocking2_closure" {
     GHC.IO.Handle.Text.hGetBufNonBlocking2_closure:
         const GHC.IO.Handle.Text.hGetBufNonBlocking2_info;
         const 0;
 },
 sat_sb7ch_entry() //  [R1]
         { []
         }
     {offset
       cbaOy: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbaOF; else goto cbaOG;
       cbaOF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbaOG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbaOv_info;
           _sb7bY::I64 = I64[R1 + 24];
           R1 = P64[R1 + 16];
           I64[Sp - 24] = _sb7bY::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubaOK; else goto cbaOw;
       ubaOK: // global
           call _cbaOv(R1) args: 0, res: 0, upd: 0;
       cbaOw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sb7ch_info" {
     sat_sb7ch_info:
         const sat_sb7ch_entry;
         const 4294967297;
         const 19;
 },
 _cbaOv() //  [R1]
         { []
         }
     {offset
       cbaOv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbaOJ; else goto cbaOI;
       cbaOJ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbaOI: // global
           _sb7cg::I64 = I64[R1 + 7] + I64[Sp + 8];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sb7cg::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbaOv_info" {
     block_cbaOv_info:
         const _cbaOv;
         const 65;
         const 30;
 },
 sat_sb7cl_entry() //  [R1]
         { []
         }
     {offset
       cbaOT: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbaP0; else goto cbaP1;
       cbaP0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbaP1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbaOQ_info;
           _sb7bY::I64 = I64[R1 + 24];
           R1 = P64[R1 + 16];
           I64[Sp - 24] = _sb7bY::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubaP5; else goto cbaOR;
       ubaP5: // global
           call _cbaOQ(R1) args: 0, res: 0, upd: 0;
       cbaOR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sb7cl_info" {
     sat_sb7cl_info:
         const sat_sb7cl_entry;
         const 4294967297;
         const 19;
 },
 _cbaOQ() //  [R1]
         { []
         }
     {offset
       cbaOQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbaP4; else goto cbaP3;
       cbaP4: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbaP3: // global
           _sb7ck::I64 = I64[R1 + 7] + I64[Sp + 8];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sb7ck::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbaOQ_info" {
     block_cbaOQ_info:
         const _cbaOQ;
         const 65;
         const 30;
 },
 sat_sb7cB_entry() //  [R1]
         { []
         }
     {offset
       cbaPB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbaPI; else goto cbaPJ;
       cbaPI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbaPJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbaPy_info;
           _sb7bX::I64 = I64[R1 + 24];
           R1 = P64[R1 + 16];
           I64[Sp - 24] = _sb7bX::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubaPN; else goto cbaPz;
       ubaPN: // global
           call _cbaPy(R1) args: 0, res: 0, upd: 0;
       cbaPz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sb7cB_info" {
     sat_sb7cB_info:
         const sat_sb7cB_entry;
         const 4294967297;
         const 19;
 },
 _cbaPy() //  [R1]
         { []
         }
     {offset
       cbaPy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbaPM; else goto cbaPL;
       cbaPM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbaPL: // global
           _sb7cA::I64 = I64[R1 + 7] + I64[Sp + 8];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sb7cA::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbaPy_info" {
     block_cbaPy_info:
         const _cbaPy;
         const 65;
         const 30;
 },
 GHC.IO.Handle.Text.hGetBufNonBlocking2_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       cbaPO: // global
           if ((Sp + -88) < SpLim) (likely: False) goto cbaPP; else goto cbaPQ;
       cbaPP: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hGetBufNonBlocking2_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbaPQ: // global
           I64[Sp - 40] = block_cbaNJ_info;
           R1 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubaQe; else goto cbaNK;
       ubaQe: // global
           call _cbaNJ(R1) args: 0, res: 0, upd: 0;
       cbaNK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetBufNonBlocking2_info" {
     GHC.IO.Handle.Text.hGetBufNonBlocking2_info:
         const GHC.IO.Handle.Text.hGetBufNonBlocking2_entry;
         const 0;
         const 12884901902;
         const 25769803801;
         const Sb7vQ_srt+280;
 },
 _cbaNJ() //  [R1]
         { []
         }
     {offset
       cbaNJ: // global
           I64[Sp - 8] = block_cbaNO_info;
           _sb7by::P64 = R1;
           _sb7bE::P64 = P64[R1 + 47];
           R1 = P64[Sp + 8];
           P64[Sp] = _sb7bE::P64;
           P64[Sp + 8] = _sb7by::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubaQa; else goto cbaNP;
       ubaQa: // global
           call _cbaNO(R1) args: 0, res: 0, upd: 0;
       cbaNP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaNJ_info" {
     block_cbaNJ_info:
         const _cbaNJ;
         const 4;
         const 4294967326;
         const Sb7vQ_srt+280;
 },
 _cbaNO() //  [R1]
         { []
         }
     {offset
       cbaNO: // global
           I64[Sp - 40] = block_cbaNT_info;
           _sb7bR::P64 = P64[R1 + 7];
           _sb7bS::P64 = P64[R1 + 15];
           _sb7bQ::I64 = I64[R1 + 23];
           _sb7bT::I64 = I64[R1 + 31];
           _sb7bU::I64 = I64[R1 + 39];
           _sb7bV::I64 = I64[R1 + 47];
           R1 = P64[Sp + 40];
           P64[Sp - 32] = _sb7bS::P64;
           I64[Sp - 24] = _sb7bT::I64;
           I64[Sp - 16] = _sb7bU::I64;
           I64[Sp - 8] = _sb7bV::I64;
           P64[Sp] = _sb7bR::P64;
           I64[Sp + 40] = _sb7bQ::I64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubaQb; else goto cbaNU;
       ubaQb: // global
           call _cbaNT(R1) args: 0, res: 0, upd: 0;
       cbaNU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaNO_info" {
     block_cbaNO_info:
         const _cbaNO;
         const 5;
         const 4294967326;
         const Sb7vQ_srt+280;
 },
 _cbaNT() //  [R1]
         { []
         }
     {offset
       cbaNT: // global
           _sb7bu::P64 = P64[Sp + 64];
           _sb7bX::I64 = I64[R1 + 7];
           _sb7bY::I64 = I64[Sp + 32] - I64[Sp + 24];
           if (%MO_S_Ge_W64(_sb7bX::I64,
                            _sb7bY::I64)) goto cbaPV; else goto cbaQ6;
       cbaPV: // global
           I64[Sp] = block_cbaO4_info;
           R1 = _sb7bu::P64;
           I64[Sp + 32] = _sb7bY::I64;
           I64[Sp + 64] = _sb7bX::I64;
           if (R1 & 7 != 0) goto ubaQc; else goto cbaO5;
       ubaQc: // global
           call _cbaO4(R1) args: 0, res: 0, upd: 0;
       cbaO5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbaQ6: // global
           I64[Sp] = block_cbaP7_info;
           R1 = _sb7bu::P64;
           I64[Sp + 64] = _sb7bX::I64;
           if (R1 & 7 != 0) goto ubaQd; else goto cbaP8;
       ubaQd: // global
           call _cbaP7(R1) args: 0, res: 0, upd: 0;
       cbaP8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaNT_info" {
     block_cbaNT_info:
         const _cbaNT;
         const 33674;
         const 4294967326;
         const Sb7vQ_srt+280;
 },
 _cbaO4() //  [R1]
         { []
         }
     {offset
       cbaO4: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cbaPY; else goto cbaPX;
       cbaPY: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbaPX: // global
           _sb7bv::P64 = P64[Sp + 72];
           _sb7by::P64 = P64[Sp + 56];
           _sb7bE::P64 = P64[Sp + 48];
           _sb7bQ::I64 = I64[Sp + 80];
           _sb7bR::P64 = P64[Sp + 40];
           _sb7bS::P64 = P64[Sp + 8];
           _sb7bT::I64 = I64[Sp + 16];
           _sb7bX::I64 = I64[Sp + 64];
           _sb7bY::I64 = I64[Sp + 32];
           _sb7c1::I64 = I64[R1 + 7];
           (_sb7c7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memcpy(_sb7c1::I64, _sb7bQ::I64 + I64[Sp + 24], _sb7bY::I64);
           call MO_Touch(_sb7bR::P64);
           I64[Hp - 96] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 88] = _sb7bR::P64;
           P64[Hp - 80] = _sb7bS::P64;
           I64[Hp - 72] = _sb7bQ::I64;
           I64[Hp - 64] = _sb7bT::I64;
           I64[Hp - 56] = 0;
           I64[Hp - 48] = 0;
           call MO_WriteBarrier();
           P64[_sb7bE::P64 + 8] = Hp - 95;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb7bE::P64);
           _sb7cb::I64 = _sb7bX::I64 - _sb7bY::I64;
           if (_sb7cb::I64 != 0) goto cbaQ4; else goto cbaQ5;
       cbaQ4: // global
           I64[Hp - 40] = sat_sb7ch_info;
           P64[Hp - 24] = _sb7bv::P64;
           I64[Hp - 16] = _sb7bY::I64;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sb7c1::I64 + _sb7bY::I64;
           R6 = _sb7cb::I64;
           R5 = Hp - 40;
           R4 = Hp - 7;
           R3 = _sb7bT::I64;
           R2 = _sb7by::P64;
           Sp = Sp + 88;
           call GHC.IO.Handle.Text.$wbufReadNBEmpty_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
       cbaQ5: // global
           I64[Hp - 40] = sat_sb7cl_info;
           P64[Hp - 24] = _sb7bv::P64;
           I64[Hp - 16] = _sb7bY::I64;
           _cbaOM::P64 = Hp - 40;
           Hp = Hp - 16;
           R1 = _cbaOM::P64;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaO4_info" {
     block_cbaO4_info:
         const _cbaO4;
         const 41866;
         const 4294967326;
         const Sb7vQ_srt+280;
 },
 _cbaP7() //  [R1]
         { []
         }
     {offset
       cbaP7: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cbaQ9; else goto cbaQ8;
       cbaQ9: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbaQ8: // global
           _sb7bv::P64 = P64[Sp + 72];
           _sb7bE::P64 = P64[Sp + 48];
           _sb7bQ::I64 = I64[Sp + 80];
           _sb7bR::P64 = P64[Sp + 40];
           _sb7bS::P64 = P64[Sp + 8];
           _sb7bT::I64 = I64[Sp + 16];
           _sb7bU::I64 = I64[Sp + 24];
           _sb7bV::I64 = I64[Sp + 32];
           _sb7bX::I64 = I64[Sp + 64];
           (_sb7ct::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memcpy(I64[R1 + 7], _sb7bQ::I64 + _sb7bU::I64, _sb7bX::I64);
           call MO_Touch(_sb7bR::P64);
           I64[Hp - 80] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 72] = _sb7bR::P64;
           P64[Hp - 64] = _sb7bS::P64;
           I64[Hp - 56] = _sb7bQ::I64;
           I64[Hp - 48] = _sb7bT::I64;
           I64[Hp - 40] = _sb7bU::I64 + _sb7bX::I64;
           I64[Hp - 32] = _sb7bV::I64;
           call MO_WriteBarrier();
           P64[_sb7bE::P64 + 8] = Hp - 79;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb7bE::P64);
           I64[Hp - 24] = sat_sb7cB_info;
           P64[Hp - 8] = _sb7bv::P64;
           I64[Hp] = _sb7bX::I64;
           R1 = Hp - 24;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaP7_info" {
     block_cbaP7_info:
         const _cbaP7;
         const 45962;
         const 30;
 },
 section ""data" . GHC.IO.Handle.Text.$wbufReadNBEmpty_closure" {
     GHC.IO.Handle.Text.$wbufReadNBEmpty_closure:
         const GHC.IO.Handle.Text.$wbufReadNBEmpty_info;
         const 0;
 },
 GHC.IO.Handle.Text.$wbufReadNBEmpty_slow() //  [R1]
         { []
         }
     {offset
       cbaQg: // global
           R6 = I64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.Handle.Text.$wbufReadNBEmpty_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2,
                                                          R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sb7dz_entry() //  [R1]
         { []
         }
     {offset
       cbaR2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbaR9; else goto cbaRa;
       cbaR9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbaRa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbaQZ_info;
           _sb7dv::I64 = I64[R1 + 24];
           R1 = P64[R1 + 16];
           I64[Sp - 24] = _sb7dv::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubaRe; else goto cbaR0;
       ubaRe: // global
           call _cbaQZ(R1) args: 0, res: 0, upd: 0;
       cbaR0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sb7dz_info" {
     sat_sb7dz_info:
         const sat_sb7dz_entry;
         const 4294967297;
         const 19;
 },
 _cbaQZ() //  [R1]
         { []
         }
     {offset
       cbaQZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbaRd; else goto cbaRc;
       cbaRd: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbaRc: // global
           _sb7dy::I64 = I64[R1 + 7] + I64[Sp + 8];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sb7dy::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbaQZ_info" {
     block_cbaQZ_info:
         const _cbaQZ;
         const 65;
         const 30;
 },
 section ""relreadonly" . ubaSA_srtd" {
     ubaSA_srtd:
         const Sb7vQ_srt+56;
         const 33;
         const 8321499137;
 },
 GHC.IO.Handle.Text.$wbufReadNBEmpty_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       cbaRf: // global
           if ((Sp + -80) < SpLim) (likely: False) goto cbaRg; else goto cbaRh;
       cbaRg: // global
           R1 = GHC.IO.Handle.Text.$wbufReadNBEmpty_closure;
           P64[Sp - 40] = R2;
           I64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       cbaRh: // global
           I64[Sp - 40] = block_cbaQk_info;
           R1 = R2;
           I64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubaSw; else goto cbaQl;
       ubaSw: // global
           call _cbaQk(R1) args: 0, res: 0, upd: 0;
       cbaQl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.$wbufReadNBEmpty_info" {
     GHC.IO.Handle.Text.$wbufReadNBEmpty_info:
         const GHC.IO.Handle.Text.$wbufReadNBEmpty_entry;
         const 0;
         const 18446744069414584334;
         const 25769803776;
         const ubaSA_srtd;
         const 1157;
         const GHC.IO.Handle.Text.$wbufReadNBEmpty_slow;
 },
 section ""relreadonly" . ubaSB_srtd" {
     ubaSB_srtd:
         const Sb7vQ_srt+56;
         const 33;
         const 8053063681;
 },
 _cbaQk() //  [R1]
         { []
         }
     {offset
       cbaQk: // global
           I64[Sp - 32] = block_cbaQp_info;
           _sb7cI::P64 = R1;
           _sb7cK::P64 = P64[R1 + 15];
           _sb7cL::P64 = P64[R1 + 23];
           _sb7cO::P64 = P64[R1 + 47];
           R1 = P64[R1 + 31];
           P64[Sp - 24] = _sb7cK::P64;
           P64[Sp - 16] = _sb7cL::P64;
           P64[Sp - 8] = _sb7cO::P64;
           P64[Sp] = _sb7cI::P64;
           Sp = Sp - 32;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaQk_info" {
     block_cbaQk_info:
         const _cbaQk;
         const 580;
         const 18446744069414584350;
         const ubaSB_srtd;
 },
 section ""relreadonly" . ubaSC_srtd" {
     ubaSC_srtd:
         const Sb7vQ_srt+56;
         const 33;
         const 8053063681;
 },
 _cbaQp() //  [R1]
         { []
         }
     {offset
       cbaQp: // global
           if (%MO_S_Le_W64(I64[Sp + 64],
                            I64[Sp + 40])) goto ubaSq; else goto cbaS9;
       ubaSq: // global
           P64[Sp + 40] = R1;
           Sp = Sp + 8;
           call _sb7d2() args: 0, res: 0, upd: 0;
       cbaS9: // global
           I64[Sp - 8] = block_cbaQz_info;
           R3 = lvl11_rb6WR_closure;
           R2 = P64[Sp + 16];
           I64[Sp] = I64[R1 + 15];
           I64[Sp + 16] = I64[R1 + 7];
           P64[Sp + 40] = R1;
           Sp = Sp - 8;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaQp_info" {
     block_cbaQp_info:
         const _cbaQp;
         const 9224;
         const 18446744069414584350;
         const ubaSC_srtd;
 },
 _cbaQz() //  [R1]
         { []
         }
     {offset
       cbaQz: // global
           if (R1 & 7 == 1) goto ubaSr; else goto cbaSf;
       ubaSr: // global
           Sp = Sp + 16;
           call _sb7d2() args: 0, res: 0, upd: 0;
       cbaSf: // global
           I64[Sp] = block_cbaQE_info;
           R1 = P64[Sp + 56];
           if (R1 & 7 != 0) goto ubaSt; else goto cbaQF;
       ubaSt: // global
           call _cbaQE(R1) args: 0, res: 0, upd: 0;
       cbaQF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaQz_info" {
     block_cbaQz_info:
         const _cbaQz;
         const 16713;
         const 30064771102;
         const Sb7vQ_srt+288;
 },
 _sb7d2() //  []
         { []
         }
     {offset
       sb7d2: // global
           _sb7d6::P64 = P64[P64[Sp + 16] + 8];
           I64[Sp + 8] = block_cbaRn_info;
           R2 = P64[Sp];
           I64[Sp - 16] = stg_ap_ppv_info;
           P64[Sp - 8] = P64[Sp + 32];
           P64[Sp] = _sb7d6::P64;
           Sp = Sp - 16;
           call GHC.IO.BufferedIO.fillReadBuffer0_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _cbaRn() //  [R1]
         { []
         }
     {offset
       cbaRn: // global
           I64[Sp] = block_cbaRp_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubaSx; else goto cbaRs;
       ubaSx: // global
           call _cbaRp(R1) args: 0, res: 0, upd: 0;
       cbaRs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaRn_info" {
     block_cbaRn_info:
         const _cbaRn;
         const 2310;
         const 4294967326;
         const Sb7vQ_srt+288;
 },
 _cbaRp() //  [R1]
         { []
         }
     {offset
       cbaRp: // global
           I64[Sp] = block_cbaRw_info;
           _sb7dc::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp + 24] = _sb7dc::P64;
           if (R1 & 7 != 0) goto ubaSy; else goto cbaRy;
       ubaSy: // global
           call _cbaRw(R1) args: 0, res: 0, upd: 0;
       cbaRy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaRp_info" {
     block_cbaRp_info:
         const _cbaRp;
         const 2310;
         const 4294967326;
         const Sb7vQ_srt+288;
 },
 _cbaRw() //  [R1]
         { []
         }
     {offset
       cbaRw: // global
           if (R1 & 7 == 1) goto cbaRE; else goto cbaRJ;
       cbaRE: // global
           R1 = P64[Sp + 40];
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbaRJ: // global
           I64[Sp] = block_cbaRH_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubaSz; else goto cbaRK;
       ubaSz: // global
           call _cbaRH(R1) args: 0, res: 0, upd: 0;
       cbaRK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaRw_info" {
     block_cbaRw_info:
         const _cbaRw;
         const 2054;
         const 4294967326;
         const Sb7vQ_srt+288;
 },
 _cbaRH() //  [R1]
         { []
         }
     {offset
       cbaRH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbaRQ; else goto cbaRP;
       cbaRQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbaRP: // global
           _sb7cF::P64 = P64[Sp + 40];
           _sb7dh::I64 = I64[R1 + 7];
           if (_sb7dh::I64 == 0) goto cbaS6; else goto cbaS5;
       cbaS6: // global
           Hp = Hp - 16;
           R1 = _sb7cF::P64;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbaS5: // global
           _sb7cE::P64 = P64[Sp + 32];
           _sb7cG::I64 = I64[Sp + 48];
           _sb7cI::P64 = P64[Sp + 16];
           _sb7cO::P64 = P64[Sp + 8];
           _sb7dc::P64 = P64[Sp + 24];
           call MO_WriteBarrier();
           P64[_sb7cO::P64 + 8] = _sb7dc::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb7cO::P64);
           if (%MO_S_Gt_W64(_sb7cG::I64,
                            _sb7dh::I64)) goto cbaRZ; else goto cbaS3;
       cbaRZ: // global
           Hp = Hp - 16;
           R6 = R1;
           R5 = _sb7cF::P64;
           R4 = _sb7cE::P64;
           R3 = _sb7dc::P64;
           R2 = _sb7cI::P64;
           Sp = Sp + 56;
           call GHC.IO.Handle.Text.hGetBufNonBlocking2_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
       cbaS3: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sb7cG::I64;
           R6 = Hp - 7;
           R5 = _sb7cF::P64;
           R4 = _sb7cE::P64;
           R3 = _sb7dc::P64;
           R2 = _sb7cI::P64;
           Sp = Sp + 56;
           call GHC.IO.Handle.Text.hGetBufNonBlocking2_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaRH_info" {
     block_cbaRH_info:
         const _cbaRH;
         const 2054;
         const 4294967326;
         const Sb7vQ_srt+288;
 },
 _cbaQE() //  [R1]
         { []
         }
     {offset
       cbaQE: // global
           I64[Sp + 56] = block_cbaQM_info;
           R6 = 0;
           R5 = I64[R1 + 7];
           R4 = I64[Sp + 8];
           R3 = I64[Sp + 24];
           R2 = GHC.IO.FD.$fBufferedIOFD8_closure;
           I64[Sp + 48] = I64[Sp + 72];
           Sp = Sp + 48;
           call GHC.IO.FD.$wreadRawBufferPtrNoBlock_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaQE_info" {
     block_cbaQE_info:
         const _cbaQE;
         const 24521;
         const 12884901918;
         const Sb7vQ_srt+296;
 },
 _cbaQM() //  [R1]
         { []
         }
     {offset
       cbaQM: // global
           I64[Sp] = block_cbaQO_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubaSv; else goto cbaQP;
       ubaSv: // global
           call _cbaQO(R1) args: 0, res: 0, upd: 0;
       cbaQP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaQM_info" {
     block_cbaQM_info:
         const _cbaQM;
         const 130;
         const 30;
 },
 _cbaQO() //  [R1]
         { []
         }
     {offset
       cbaQO: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbaSk; else goto cbaSj;
       cbaSk: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbaSj: // global
           _sb7cF::P64 = P64[Sp + 8];
           _sb7dv::I64 = I64[R1 + 7];
           if (_sb7dv::I64 != (-1)) goto cbaSm; else goto cbaSn;
       cbaSm: // global
           I64[Hp - 24] = sat_sb7dz_info;
           P64[Hp - 8] = _sb7cF::P64;
           I64[Hp] = _sb7dv::I64;
           R1 = Hp - 24;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbaSn: // global
           Hp = Hp - 32;
           R1 = _sb7cF::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaQO_info" {
     block_cbaQO_info:
         const _cbaQO;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.89590096 UTC

[section ""cstring" . GHC.IO.Handle.Text.hGetBufNonBlocking4_bytes" {
     GHC.IO.Handle.Text.hGetBufNonBlocking4_bytes:
         I8[] [104,71,101,116,66,117,102,78,111,110,66,108,111,99,107,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.898261356 UTC

[section ""data" . GHC.IO.Handle.Text.hGetBufNonBlocking3_closure" {
     GHC.IO.Handle.Text.hGetBufNonBlocking3_closure:
         const GHC.IO.Handle.Text.hGetBufNonBlocking3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Text.hGetBufNonBlocking3_entry() //  [R1]
         { []
         }
     {offset
       cbaV5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbaV6; else goto cbaV7;
       cbaV6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbaV7: // global
           (_cbaV2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbaV2::I64 == 0) goto cbaV4; else goto cbaV3;
       cbaV4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbaV3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbaV2::I64;
           R2 = GHC.IO.Handle.Text.hGetBufNonBlocking4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetBufNonBlocking3_info" {
     GHC.IO.Handle.Text.hGetBufNonBlocking3_info:
         const GHC.IO.Handle.Text.hGetBufNonBlocking3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.911115607 UTC

[section ""data" . GHC.IO.Handle.Text.$whGetBufNonBlocking_closure" {
     GHC.IO.Handle.Text.$whGetBufNonBlocking_closure:
         const GHC.IO.Handle.Text.$whGetBufNonBlocking_info;
         const 0;
 },
 sat_sb7eF_entry() //  [R1]
         { []
         }
     {offset
       cbaW0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbaW4; else goto cbaW5;
       cbaW4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbaW5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbaVX_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubaW9; else goto cbaVY;
       ubaW9: // global
           call _cbaVX(R1) args: 0, res: 0, upd: 0;
       cbaVY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sb7eF_info" {
     sat_sb7eF_info:
         const sat_sb7eF_entry;
         const 1;
         const 16;
 },
 _cbaVX() //  [R1]
         { []
         }
     {offset
       cbaVX: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbaW8; else goto cbaW7;
       cbaW8: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbaW7: // global
           _sb7eA::P64 = P64[R1 + 7];
           _sb7eB::P64 = P64[R1 + 15];
           _sb7ez::I64 = I64[R1 + 23];
           _sb7eC::I64 = I64[R1 + 31];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sb7eA::P64;
           P64[Hp - 32] = _sb7eB::P64;
           I64[Hp - 24] = _sb7ez::I64;
           I64[Hp - 16] = _sb7eC::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbaVX_info" {
     block_cbaVX_info:
         const _cbaVX;
         const 0;
         const 30;
 },
 sat_sb7eY_entry() //  [R1]
         { []
         }
     {offset
       cbaWw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbaWD; else goto cbaWE;
       cbaWD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbaWE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbaWt_info;
           _sb7eO::I64 = I64[R1 + 24];
           R1 = P64[R1 + 16];
           I64[Sp - 24] = _sb7eO::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubaWI; else goto cbaWu;
       ubaWI: // global
           call _cbaWt(R1) args: 0, res: 0, upd: 0;
       cbaWu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sb7eY_info" {
     sat_sb7eY_info:
         const sat_sb7eY_entry;
         const 4294967297;
         const 19;
 },
 _cbaWt() //  [R1]
         { []
         }
     {offset
       cbaWt: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbaWH; else goto cbaWG;
       cbaWH: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbaWG: // global
           _sb7eS::P64 = P64[R1 + 7];
           _sb7eT::P64 = P64[R1 + 15];
           _sb7eR::I64 = I64[R1 + 23];
           _sb7eU::I64 = I64[R1 + 31];
           _sb7eW::I64 = I64[R1 + 47];
           _sb7eX::I64 = I64[R1 + 39] + I64[Sp + 8];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sb7eS::P64;
           P64[Hp - 32] = _sb7eT::P64;
           I64[Hp - 24] = _sb7eR::I64;
           I64[Hp - 16] = _sb7eU::I64;
           I64[Hp - 8] = _sb7eX::I64;
           I64[Hp] = _sb7eW::I64;
           R1 = Hp - 47;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbaWt_info" {
     block_cbaWt_info:
         const _cbaWt;
         const 65;
         const 30;
 },
 sat_sb7fj_entry() //  [R1, R2]
         { []
         }
     {offset
       cbaWJ: // global
           if ((Sp + -104) < SpLim) (likely: False) goto cbaWK; else goto cbaWL;
       cbaWK: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbaWL: // global
           I64[Sp - 32] = block_cbaVu_info;
           _sb7dB::P64 = P64[R1 + 6];
           _sb7dG::P64 = P64[R1 + 14];
           _sb7dE::I64 = I64[R1 + 22];
           R1 = R2;
           P64[Sp - 24] = _sb7dB::P64;
           I64[Sp - 16] = _sb7dE::I64;
           P64[Sp - 8] = _sb7dG::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubaYf; else goto cbaVv;
       ubaYf: // global
           call _cbaVu(R1) args: 0, res: 0, upd: 0;
       cbaVv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sb7fj_info" {
     sat_sb7fj_info:
         const sat_sb7fj_entry;
         const 4294967298;
         const 12884901896;
         const 8589934597;
         const Sb7vQ_srt+280;
 },
 _cbaVu() //  [R1]
         { []
         }
     {offset
       cbaVu: // global
           I64[Sp - 40] = block_cbaVz_info;
           _sb7dJ::P64 = R1;
           _sb7dP::P64 = P64[R1 + 47];
           _sb7dR::P64 = P64[R1 + 63];
           _sb7dS::P64 = P64[R1 + 71];
           _sb7dV::P64 = P64[R1 + 95];
           R1 = P64[_sb7dS::P64 + 8];
           P64[Sp - 32] = _sb7dP::P64;
           P64[Sp - 24] = _sb7dR::P64;
           P64[Sp - 16] = _sb7dS::P64;
           P64[Sp - 8] = _sb7dV::P64;
           P64[Sp] = _sb7dJ::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubaY5; else goto cbaVA;
       ubaY5: // global
           call _cbaVz(R1) args: 0, res: 0, upd: 0;
       cbaVA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaVu_info" {
     block_cbaVu_info:
         const _cbaVu;
         const 131;
         const 12884901918;
         const Sb7vQ_srt+280;
 },
 _cbaVz() //  [R1]
         { []
         }
     {offset
       cbaVz: // global
           I64[Sp - 16] = block_cbaVG_info;
           _sb7e8::I64 = I64[R1 + 39];
           _sb7e9::I64 = I64[R1 + 47];
           R1 = P64[R1 + 15];
           I64[Sp - 8] = _sb7e9::I64;
           I64[Sp] = _sb7e8::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubaY6; else goto cbaVH;
       ubaY6: // global
           call _cbaVG(R1) args: 0, res: 0, upd: 0;
       cbaVH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaVz_info" {
     block_cbaVz_info:
         const _cbaVz;
         const 4104;
         const 12884901918;
         const Sb7vQ_srt+280;
 },
 _cbaVG() //  [R1]
         { []
         }
     {offset
       cbaVG: // global
           if (R1 & 7 == 1) goto cbaXJ; else goto ubaY0;
       cbaXJ: // global
           if (I64[Sp + 16] == I64[Sp + 8]) goto ubaY1; else goto cbaX5;
       ubaY1: // global
           Sp = Sp + 24;
           goto ubaY9;
       cbaX5: // global
           _sb7er::P64 = P64[P64[Sp + 32] + 8];
           I64[Sp + 16] = block_cbaVO_info;
           R1 = _sb7er::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto ubaY7; else goto cbaVP;
       ubaY7: // global
           call _cbaVO(R1) args: 0, res: 0, upd: 0;
       cbaVP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ubaY0: // global
           Sp = Sp + 24;
           goto ubaY9;
       ubaY9: // global
           call _sb7ea() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbaVG_info" {
     block_cbaVG_info:
         const _cbaVG;
         const 16586;
         const 12884901918;
         const Sb7vQ_srt+280;
 },
 _cbaVO() //  [R1]
         { []
         }
     {offset
       cbaVO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbaX8; else goto cbaX7;
       cbaX8: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbaX7: // global
           _sb7dS::P64 = P64[Sp + 24];
           _sb7et::P64 = P64[R1 + 7];
           _sb7eu::P64 = P64[R1 + 15];
           _sb7ex::P64 = P64[_sb7dS::P64 + 8];
           I64[Hp - 16] = sat_sb7eF_info;
           P64[Hp] = _sb7ex::P64;
           call MO_WriteBarrier();
           P64[_sb7dS::P64 + 8] = Hp - 16;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb7dS::P64);
           I64[Sp] = block_cbaWd_info;
           R1 = _sb7ex::P64;
           P64[Sp + 16] = _sb7eu::P64;
           P64[Sp + 24] = _sb7et::P64;
           if (R1 & 7 != 0) goto ubaYa; else goto cbaWe;
       ubaYa: // global
           call _cbaWd(R1) args: 0, res: 0, upd: 0;
       cbaWe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaVO_info" {
     block_cbaVO_info:
         const _cbaVO;
         const 4232;
         const 12884901918;
         const Sb7vQ_srt+280;
 },
 _cbaWd() //  [R1]
         { []
         }
     {offset
       cbaWd: // global
           _sb7eO::I64 = I64[R1 + 39];
           if (_sb7eO::I64 != 0) goto cbaXb; else goto cbaXG;
       cbaXb: // global
           I64[Sp - 24] = block_cbaWk_info;
           _sb7eJ::P64 = P64[R1 + 7];
           _sb7eK::P64 = P64[R1 + 15];
           _sb7eI::I64 = I64[R1 + 23];
           R1 = P64[Sp + 32];
           P64[Sp - 16] = _sb7eK::P64;
           I64[Sp - 8] = _sb7eO::I64;
           P64[Sp] = _sb7eJ::P64;
           I64[Sp + 32] = _sb7eI::I64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubaYb; else goto cbaWl;
       ubaYb: // global
           call _cbaWk(R1) args: 0, res: 0, upd: 0;
       cbaWl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbaXG: // global
           _sb7dP::P64 = P64[Sp + 8];
           _sb7eu::P64 = P64[Sp + 16];
           call MO_WriteBarrier();
           P64[_sb7dP::P64 + 8] = _sb7eu::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb7dP::P64);
           Sp = Sp + 8;
           call _sb7ea() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbaWd_info" {
     block_cbaWd_info:
         const _cbaWd;
         const 4104;
         const 12884901918;
         const Sb7vQ_srt+280;
 },
 _cbaWk() //  [R1]
         { []
         }
     {offset
       cbaWk: // global
           if (R1 & 7 == 1) goto cbaXd; else goto cbaXv;
       cbaXd: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbaXg; else goto cbaXf;
       cbaXg: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbaXf: // global
           I64[Hp - 24] = sat_sb7eY_info;
           P64[Hp - 8] = P64[Sp + 40];
           I64[Hp] = I64[Sp + 16];
           _sb7dP::P64 = P64[Sp + 32];
           call MO_WriteBarrier();
           P64[_sb7dP::P64 + 8] = Hp - 24;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb7dP::P64);
           Sp = Sp + 32;
           call _sb7ea() args: 0, res: 0, upd: 0;
       cbaXv: // global
           I64[Sp] = block_cbaXj_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubaYd; else goto cbaXk;
       ubaYd: // global
           call _cbaXj(R1) args: 0, res: 0, upd: 0;
       cbaXk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaWk_info" {
     block_cbaWk_info:
         const _cbaWk;
         const 37003;
         const 12884901918;
         const Sb7vQ_srt+280;
 },
 _cbaXj() //  [R1]
         { []
         }
     {offset
       cbaXj: // global
           I64[Sp - 8] = block_cbaXo_info;
           R2 = P64[Sp + 48];
           _sb7f2::P64 = P64[R1 + 7];
           _sb7f3::P64 = P64[R1 + 15];
           R1 = P64[R1 + 39];
           P64[Sp] = _sb7f3::P64;
           P64[Sp + 48] = _sb7f2::P64;
           Sp = Sp - 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaXj_info" {
     block_cbaXj_info:
         const _cbaXj;
         const 37003;
         const 12884901918;
         const Sb7vQ_srt+280;
 },
 _cbaXo() //  [R1]
         { []
         }
     {offset
       cbaXo: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbaXz; else goto cbaXy;
       cbaXz: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbaXy: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = P64[Sp + 16];
           I64[Hp - 24] = I64[Sp + 64];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           I64[Sp + 32] = block_cbaXr_info;
           R5 = Hp - 47;
           R4 = P64[Sp + 48];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 56];
           Sp = Sp + 32;
           call GHC.IO.Handle.Internals.$wstreamEncode_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaXo_info" {
     block_cbaXo_info:
         const _cbaXo;
         const 73996;
         const 12884901918;
         const Sb7vQ_srt+280;
 },
 _cbaXr() //  [R1]
         { []
         }
     {offset
       cbaXr: // global
           I64[Sp] = block_cbaXt_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubaYg; else goto cbaXB;
       ubaYg: // global
           call _cbaXt(R1) args: 0, res: 0, upd: 0;
       cbaXB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaXr_info" {
     block_cbaXr_info:
         const _cbaXr;
         const 5000;
         const 12884901918;
         const Sb7vQ_srt+280;
 },
 _cbaXt() //  [R1]
         { []
         }
     {offset
       cbaXt: // global
           _sb7dP::P64 = P64[Sp + 8];
           _sb7ff::P64 = P64[R1 + 7];
           call MO_WriteBarrier();
           P64[_sb7dP::P64 + 8] = _sb7ff::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb7dP::P64);
           Sp = Sp + 8;
           call _sb7ea() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbaXt_info" {
     block_cbaXt_info:
         const _cbaXt;
         const 5000;
         const 12884901918;
         const Sb7vQ_srt+280;
 },
 _sb7ea() //  []
         { []
         }
     {offset
       sb7ea: // global
           _sb7ee::P64 = P64[P64[Sp] + 8];
           I64[Sp + 24] = block_cbaWR_info;
           R1 = _sb7ee::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto ubaYi; else goto cbaWT;
       ubaYi: // global
           call _cbaWR(R1) args: 0, res: 0, upd: 0;
       cbaWT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbaWR() //  [R1]
         { []
         }
     {offset
       cbaWR: // global
           _sb7dB::P64 = P64[Sp + 16];
           _sb7dJ::P64 = P64[Sp + 8];
           if (I64[R1 + 39] == I64[R1 + 47]) goto cbaX2; else goto cbaX1;
       cbaX2: // global
           R6 = I64[Sp + 24];
           R5 = GHC.IO.Handle.Text.hGetBuf3_closure+1;
           R4 = _sb7dB::P64;
           R3 = I64[R1 + 31];
           R2 = _sb7dJ::P64;
           Sp = Sp + 40;
           call GHC.IO.Handle.Text.$wbufReadNBEmpty_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
       cbaX1: // global
           R6 = P64[Sp + 32];
           R5 = GHC.IO.Handle.Text.hGetBuf3_closure+1;
           R4 = _sb7dB::P64;
           R3 = R1;
           R2 = _sb7dJ::P64;
           Sp = Sp + 40;
           call GHC.IO.Handle.Text.hGetBufNonBlocking2_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaWR_info" {
     block_cbaWR_info:
         const _cbaWR;
         const 260;
         const 12884901918;
         const Sb7vQ_srt+280;
 },
 section ""relreadonly" . ubaYu_srtd" {
     ubaYu_srtd:
         const Sb7vQ_srt+8;
         const 41;
         const 1700807051265;
 },
 GHC.IO.Handle.Text.$whGetBufNonBlocking_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbaYm: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbaYq; else goto cbaYp;
       cbaYq: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.$whGetBufNonBlocking_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbaYp: // global
           if (R4 == 0) goto cbaYl; else goto cbaYk;
       cbaYl: // global
           Hp = Hp - 48;
           R1 = GHC.IO.Handle.Text.hGetBuf3_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbaYk: // global
           if (%MO_S_Ge_W64(R4, 0)) goto cbaYs; else goto cbaYt;
       cbaYs: // global
           I64[Hp - 40] = GHC.Types.I#_con_info;
           I64[Hp - 32] = R4;
           I64[Hp - 24] = sat_sb7fj_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = Hp - 39;
           I64[Hp] = R4;
           R4 = Hp - 22;
           R3 = R2;
           R2 = GHC.IO.Handle.Text.hGetBufNonBlocking3_closure;
           call GHC.IO.Handle.Internals.wantReadableHandle_1_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
       cbaYt: // global
           Hp = Hp - 48;
           R4 = R4;
           R3 = GHC.IO.Handle.Text.hGetBufNonBlocking3_closure;
           R2 = R2;
           call GHC.IO.Handle.Text.$willegalBufferSize_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.$whGetBufNonBlocking_info" {
     GHC.IO.Handle.Text.$whGetBufNonBlocking_info:
         const GHC.IO.Handle.Text.$whGetBufNonBlocking_entry;
         const 0;
         const 18446744069414584334;
         const 17179869206;
         const ubaYu_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.945390689 UTC

[section ""data" . GHC.IO.Handle.Text.hGetBufNonBlocking1_closure" {
     GHC.IO.Handle.Text.hGetBufNonBlocking1_closure:
         const GHC.IO.Handle.Text.hGetBufNonBlocking1_info;
         const 0;
 },
 GHC.IO.Handle.Text.hGetBufNonBlocking1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbb08: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbb09; else goto cbb0a;
       cbb09: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hGetBufNonBlocking1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbb0a: // global
           I64[Sp - 24] = block_cbb05_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubb0e; else goto cbb06;
       ubb0e: // global
           call _cbb05(R1) args: 0, res: 0, upd: 0;
       cbb06: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetBufNonBlocking1_info" {
     GHC.IO.Handle.Text.hGetBufNonBlocking1_info:
         const GHC.IO.Handle.Text.hGetBufNonBlocking1_entry;
         const 0;
         const 21474836494;
         const 17179869207;
         const Sb7vQ_srt+320;
 },
 _cbb05() //  [R1]
         { []
         }
     {offset
       cbb05: // global
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.IO.Handle.Text.$whGetBufNonBlocking_entry(R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbb05_info" {
     block_cbb05_info:
         const _cbb05;
         const 2;
         const 4294967326;
         const Sb7vQ_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.950478354 UTC

[section ""data" . GHC.IO.Handle.Text.hGetBufNonBlocking_closure" {
     GHC.IO.Handle.Text.hGetBufNonBlocking_closure:
         const GHC.IO.Handle.Text.hGetBufNonBlocking_info;
         const 0;
 },
 GHC.IO.Handle.Text.hGetBufNonBlocking_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbb0s: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.Text.hGetBufNonBlocking1_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetBufNonBlocking_info" {
     GHC.IO.Handle.Text.hGetBufNonBlocking_info:
         const GHC.IO.Handle.Text.hGetBufNonBlocking_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const Sb7vQ_srt+336;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.953450768 UTC

[section ""cstring" . lvl12_rb6WS_bytes" {
     lvl12_rb6WS_bytes:
         I8[] [104,71,101,116,66,117,102,83,111,109,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.955615861 UTC

[section ""data" . lvl13_rb6WT_closure" {
     lvl13_rb6WT_closure:
         const lvl13_rb6WT_info;
         const 0;
         const 0;
         const 0;
 },
 lvl13_rb6WT_entry() //  [R1]
         { []
         }
     {offset
       cbb0G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbb0H; else goto cbb0I;
       cbb0H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbb0I: // global
           (_cbb0D::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbb0D::I64 == 0) goto cbb0F; else goto cbb0E;
       cbb0F: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbb0E: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbb0D::I64;
           R2 = lvl12_rb6WS_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl13_rb6WT_info" {
     lvl13_rb6WT_info:
         const lvl13_rb6WT_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:03.971449054 UTC

[section ""data" . GHC.IO.Handle.Text.$whGetBufSome_closure" {
     GHC.IO.Handle.Text.$whGetBufSome_closure:
         const GHC.IO.Handle.Text.$whGetBufSome_info;
         const 0;
 },
 sat_sb7gT_entry() //  [R1]
         { []
         }
     {offset
       cbb1F: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbb1J; else goto cbb1K;
       cbb1J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbb1K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbb1C_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubb1O; else goto cbb1D;
       ubb1O: // global
           call _cbb1C(R1) args: 0, res: 0, upd: 0;
       cbb1D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sb7gT_info" {
     sat_sb7gT_info:
         const sat_sb7gT_entry;
         const 1;
         const 16;
 },
 _cbb1C() //  [R1]
         { []
         }
     {offset
       cbb1C: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbb1N; else goto cbb1M;
       cbb1N: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbb1M: // global
           _sb7gO::P64 = P64[R1 + 7];
           _sb7gP::P64 = P64[R1 + 15];
           _sb7gN::I64 = I64[R1 + 23];
           _sb7gQ::I64 = I64[R1 + 31];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sb7gO::P64;
           P64[Hp - 32] = _sb7gP::P64;
           I64[Hp - 24] = _sb7gN::I64;
           I64[Hp - 16] = _sb7gQ::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbb1C_info" {
     block_cbb1C_info:
         const _cbb1C;
         const 0;
         const 30;
 },
 sat_sb7hc_entry() //  [R1]
         { []
         }
     {offset
       cbb2b: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbb2i; else goto cbb2j;
       cbb2i: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbb2j: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbb28_info;
           _sb7h2::I64 = I64[R1 + 24];
           R1 = P64[R1 + 16];
           I64[Sp - 24] = _sb7h2::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubb2n; else goto cbb29;
       ubb2n: // global
           call _cbb28(R1) args: 0, res: 0, upd: 0;
       cbb29: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sb7hc_info" {
     sat_sb7hc_info:
         const sat_sb7hc_entry;
         const 4294967297;
         const 19;
 },
 _cbb28() //  [R1]
         { []
         }
     {offset
       cbb28: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbb2m; else goto cbb2l;
       cbb2m: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbb2l: // global
           _sb7h6::P64 = P64[R1 + 7];
           _sb7h7::P64 = P64[R1 + 15];
           _sb7h5::I64 = I64[R1 + 23];
           _sb7h8::I64 = I64[R1 + 31];
           _sb7ha::I64 = I64[R1 + 47];
           _sb7hb::I64 = I64[R1 + 39] + I64[Sp + 8];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sb7h6::P64;
           P64[Hp - 32] = _sb7h7::P64;
           I64[Hp - 24] = _sb7h5::I64;
           I64[Hp - 16] = _sb7h8::I64;
           I64[Hp - 8] = _sb7hb::I64;
           I64[Hp] = _sb7ha::I64;
           R1 = Hp - 47;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbb28_info" {
     block_cbb28_info:
         const _cbb28;
         const 65;
         const 30;
 },
 section ""relreadonly" . ubb5t_srtd" {
     ubb5t_srtd:
         const Sb7vQ_srt+56;
         const 38;
         const 210990268417;
 },
 sat_sb7hx_entry() //  [R1, R2]
         { []
         }
     {offset
       cbb2o: // global
           if ((Sp + -144) < SpLim) (likely: False) goto cbb2p; else goto cbb2q;
       cbb2p: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbb2q: // global
           I64[Sp - 32] = block_cbb15_info;
           _sb7fr::P64 = P64[R1 + 6];
           _sb7fw::P64 = P64[R1 + 14];
           _sb7fu::I64 = I64[R1 + 22];
           R1 = R2;
           P64[Sp - 24] = _sb7fr::P64;
           I64[Sp - 16] = _sb7fu::I64;
           P64[Sp - 8] = _sb7fw::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubb59; else goto cbb16;
       ubb59: // global
           call _cbb15(R1) args: 0, res: 0, upd: 0;
       cbb16: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sb7hx_info" {
     sat_sb7hx_info:
         const sat_sb7hx_entry;
         const 4294967298;
         const 18446744069414584328;
         const 8589934597;
         const ubb5t_srtd;
 },
 section ""relreadonly" . ubb5u_srtd" {
     ubb5u_srtd:
         const Sb7vQ_srt+56;
         const 38;
         const 210990268417;
 },
 _cbb15() //  [R1]
         { []
         }
     {offset
       cbb15: // global
           I64[Sp - 56] = block_cbb1a_info;
           _sb7fz::P64 = R1;
           _sb7fB::P64 = P64[R1 + 15];
           _sb7fC::P64 = P64[R1 + 23];
           _sb7fF::P64 = P64[R1 + 47];
           _sb7fH::P64 = P64[R1 + 63];
           _sb7fI::P64 = P64[R1 + 71];
           _sb7fL::P64 = P64[R1 + 95];
           R1 = P64[R1 + 31];
           P64[Sp - 48] = _sb7fB::P64;
           P64[Sp - 40] = _sb7fC::P64;
           P64[Sp - 32] = _sb7fF::P64;
           P64[Sp - 24] = _sb7fH::P64;
           P64[Sp - 16] = _sb7fI::P64;
           P64[Sp - 8] = _sb7fL::P64;
           P64[Sp] = _sb7fz::P64;
           Sp = Sp - 56;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbb15_info" {
     block_cbb15_info:
         const _cbb15;
         const 131;
         const 18446744069414584350;
         const ubb5u_srtd;
 },
 section ""relreadonly" . ubb5v_srtd" {
     ubb5v_srtd:
         const Sb7vQ_srt+56;
         const 38;
         const 210990268417;
 },
 _cbb1a() //  [R1]
         { []
         }
     {offset
       cbb1a: // global
           _sb7fV::P64 = P64[P64[Sp + 40] + 8];
           I64[Sp - 24] = block_cbb1e_info;
           _sb7fQ::P64 = R1;
           _sb7fR::I64 = I64[R1 + 7];
           _sb7fS::I64 = I64[R1 + 15];
           R1 = _sb7fV::P64;
           I64[Sp - 16] = _sb7fR::I64;
           I64[Sp - 8] = _sb7fS::I64;
           P64[Sp] = _sb7fQ::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubb4Z; else goto cbb1f;
       ubb4Z: // global
           call _cbb1e(R1) args: 0, res: 0, upd: 0;
       cbb1f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbb1a_info" {
     block_cbb1a_info:
         const _cbb1a;
         const 16394;
         const 18446744069414584350;
         const ubb5v_srtd;
 },
 section ""relreadonly" . ubb5w_srtd" {
     ubb5w_srtd:
         const Sb7vQ_srt+56;
         const 38;
         const 210990268417;
 },
 _cbb1e() //  [R1]
         { []
         }
     {offset
       cbb1e: // global
           I64[Sp - 16] = block_cbb1l_info;
           _sb7g1::I64 = I64[R1 + 39];
           _sb7g2::I64 = I64[R1 + 47];
           R1 = P64[R1 + 15];
           I64[Sp - 8] = _sb7g2::I64;
           I64[Sp] = _sb7g1::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubb50; else goto cbb1m;
       ubb50: // global
           call _cbb1l(R1) args: 0, res: 0, upd: 0;
       cbb1m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbb1e_info" {
     block_cbb1e_info:
         const _cbb1e;
         const 131277;
         const 18446744069414584350;
         const ubb5w_srtd;
 },
 section ""relreadonly" . ubb5x_srtd" {
     ubb5x_srtd:
         const Sb7vQ_srt+56;
         const 38;
         const 210990268417;
 },
 _cbb1l() //  [R1]
         { []
         }
     {offset
       cbb1l: // global
           if (R1 & 7 == 1) goto cbb4z; else goto ubb4S;
       cbb4z: // global
           if (I64[Sp + 16] == I64[Sp + 8]) goto ubb4T; else goto cbb3V;
       ubb4T: // global
           Sp = Sp + 24;
           goto ubb53;
       cbb3V: // global
           _sb7gF::P64 = P64[P64[Sp + 72] + 8];
           I64[Sp + 16] = block_cbb1t_info;
           R1 = _sb7gF::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto ubb51; else goto cbb1u;
       ubb51: // global
           call _cbb1t(R1) args: 0, res: 0, upd: 0;
       cbb1u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ubb4S: // global
           Sp = Sp + 24;
           goto ubb53;
       ubb53: // global
           call _sb7g3() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbb1l_info" {
     block_cbb1l_info:
         const _cbb1l;
         const 525263;
         const 18446744069414584350;
         const ubb5x_srtd;
 },
 section ""relreadonly" . ubb5y_srtd" {
     ubb5y_srtd:
         const Sb7vQ_srt+56;
         const 38;
         const 210990268417;
 },
 _cbb1t() //  [R1]
         { []
         }
     {offset
       cbb1t: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbb3Y; else goto cbb3X;
       cbb3Y: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbb3X: // global
           _sb7fI::P64 = P64[Sp + 64];
           _sb7gH::P64 = P64[R1 + 7];
           _sb7gI::P64 = P64[R1 + 15];
           _sb7gL::P64 = P64[_sb7fI::P64 + 8];
           I64[Hp - 16] = sat_sb7gT_info;
           P64[Hp] = _sb7gL::P64;
           call MO_WriteBarrier();
           P64[_sb7fI::P64 + 8] = Hp - 16;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb7fI::P64);
           I64[Sp] = block_cbb1S_info;
           R1 = _sb7gL::P64;
           P64[Sp + 56] = _sb7gI::P64;
           P64[Sp + 64] = _sb7gH::P64;
           if (R1 & 7 != 0) goto ubb54; else goto cbb1T;
       ubb54: // global
           call _cbb1S(R1) args: 0, res: 0, upd: 0;
       cbb1T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbb1t_info" {
     block_cbb1t_info:
         const _cbb1t;
         const 135373;
         const 18446744069414584350;
         const ubb5y_srtd;
 },
 section ""relreadonly" . ubb5z_srtd" {
     ubb5z_srtd:
         const Sb7vQ_srt+56;
         const 38;
         const 210990268417;
 },
 _cbb1S() //  [R1]
         { []
         }
     {offset
       cbb1S: // global
           _sb7h2::I64 = I64[R1 + 39];
           if (_sb7h2::I64 != 0) goto cbb41; else goto cbb4w;
       cbb41: // global
           I64[Sp - 24] = block_cbb1Z_info;
           _sb7gX::P64 = P64[R1 + 7];
           _sb7gY::P64 = P64[R1 + 15];
           _sb7gW::I64 = I64[R1 + 23];
           R1 = P64[Sp + 72];
           P64[Sp - 16] = _sb7gY::P64;
           I64[Sp - 8] = _sb7h2::I64;
           P64[Sp] = _sb7gX::P64;
           I64[Sp + 72] = _sb7gW::I64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubb55; else goto cbb20;
       ubb55: // global
           call _cbb1Z(R1) args: 0, res: 0, upd: 0;
       cbb20: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbb4w: // global
           _sb7fF::P64 = P64[Sp + 48];
           _sb7gI::P64 = P64[Sp + 56];
           call MO_WriteBarrier();
           P64[_sb7fF::P64 + 8] = _sb7gI::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb7fF::P64);
           Sp = Sp + 8;
           call _sb7g3() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbb1S_info" {
     block_cbb1S_info:
         const _cbb1S;
         const 131277;
         const 18446744069414584350;
         const ubb5z_srtd;
 },
 section ""relreadonly" . ubb5A_srtd" {
     ubb5A_srtd:
         const Sb7vQ_srt+56;
         const 38;
         const 210990268417;
 },
 _cbb1Z() //  [R1]
         { []
         }
     {offset
       cbb1Z: // global
           if (R1 & 7 == 1) goto cbb43; else goto cbb4l;
       cbb43: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbb46; else goto cbb45;
       cbb46: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbb45: // global
           I64[Hp - 24] = sat_sb7hc_info;
           P64[Hp - 8] = P64[Sp + 80];
           I64[Hp] = I64[Sp + 16];
           _sb7fF::P64 = P64[Sp + 72];
           call MO_WriteBarrier();
           P64[_sb7fF::P64 + 8] = Hp - 24;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb7fF::P64);
           Sp = Sp + 32;
           call _sb7g3() args: 0, res: 0, upd: 0;
       cbb4l: // global
           I64[Sp] = block_cbb49_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubb57; else goto cbb4a;
       ubb57: // global
           call _cbb49(R1) args: 0, res: 0, upd: 0;
       cbb4a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbb1Z_info" {
     block_cbb1Z_info:
         const _cbb1Z;
         const 1181328;
         const 18446744069414584350;
         const ubb5A_srtd;
 },
 section ""relreadonly" . ubb5B_srtd" {
     ubb5B_srtd:
         const Sb7vQ_srt+56;
         const 38;
         const 210990268417;
 },
 _cbb49() //  [R1]
         { []
         }
     {offset
       cbb49: // global
           I64[Sp - 8] = block_cbb4e_info;
           R2 = P64[Sp + 88];
           _sb7hg::P64 = P64[R1 + 7];
           _sb7hh::P64 = P64[R1 + 15];
           R1 = P64[R1 + 39];
           P64[Sp] = _sb7hh::P64;
           P64[Sp + 88] = _sb7hg::P64;
           Sp = Sp - 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbb49_info" {
     block_cbb49_info:
         const _cbb49;
         const 1181328;
         const 18446744069414584350;
         const ubb5B_srtd;
 },
 section ""relreadonly" . ubb5C_srtd" {
     ubb5C_srtd:
         const Sb7vQ_srt+56;
         const 38;
         const 210990268417;
 },
 _cbb4e() //  [R1]
         { []
         }
     {offset
       cbb4e: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbb4p; else goto cbb4o;
       cbb4p: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbb4o: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = P64[Sp + 16];
           I64[Hp - 24] = I64[Sp + 104];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           I64[Sp + 32] = block_cbb4h_info;
           R5 = Hp - 47;
           R4 = P64[Sp + 88];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 96];
           Sp = Sp + 32;
           call GHC.IO.Handle.Internals.$wstreamEncode_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbb4e_info" {
     block_cbb4e_info:
         const _cbb4e;
         const 2362641;
         const 18446744069414584350;
         const ubb5C_srtd;
 },
 section ""relreadonly" . ubb5D_srtd" {
     ubb5D_srtd:
         const Sb7vQ_srt+56;
         const 38;
         const 210990268417;
 },
 _cbb4h() //  [R1]
         { []
         }
     {offset
       cbb4h: // global
           I64[Sp] = block_cbb4j_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubb5f; else goto cbb4r;
       ubb5f: // global
           call _cbb4j(R1) args: 0, res: 0, upd: 0;
       cbb4r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbb4h_info" {
     block_cbb4h_info:
         const _cbb4h;
         const 159949;
         const 18446744069414584350;
         const ubb5D_srtd;
 },
 section ""relreadonly" . ubb5E_srtd" {
     ubb5E_srtd:
         const Sb7vQ_srt+56;
         const 38;
         const 210990268417;
 },
 _cbb4j() //  [R1]
         { []
         }
     {offset
       cbb4j: // global
           _sb7fF::P64 = P64[Sp + 48];
           _sb7ht::P64 = P64[R1 + 7];
           call MO_WriteBarrier();
           P64[_sb7fF::P64 + 8] = _sb7ht::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb7fF::P64);
           Sp = Sp + 8;
           call _sb7g3() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbb4j_info" {
     block_cbb4j_info:
         const _cbb4j;
         const 159949;
         const 18446744069414584350;
         const ubb5E_srtd;
 },
 _sb7g3() //  []
         { []
         }
     {offset
       sb7g3: // global
           _sb7g7::P64 = P64[P64[Sp + 40] + 8];
           I64[Sp - 8] = block_cbb2x_info;
           R1 = _sb7g7::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubb5h; else goto cbb2z;
       ubb5h: // global
           call _cbb2x(R1) args: 0, res: 0, upd: 0;
       cbb2z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . ubb5F_srtd" {
     ubb5F_srtd:
         const Sb7vQ_srt+56;
         const 38;
         const 210990268417;
 },
 _cbb2x() //  [R1]
         { []
         }
     {offset
       cbb2x: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbb2F; else goto cbb2E;
       cbb2F: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbb2E: // global
           _sb7fu::I64 = I64[Sp + 96];
           _sb7gd::I64 = I64[R1 + 39];
           _sb7ge::I64 = I64[R1 + 47];
           if (_sb7gd::I64 == _sb7ge::I64) goto cbb3S; else goto cbb2U;
       cbb3S: // global
           if (%MO_S_Le_W64(_sb7fu::I64,
                            I64[R1 + 31])) goto cbb3x; else goto cbb3B;
       cbb3x: // global
           Hp = Hp - 16;
           P64[Sp + 72] = R1;
           Sp = Sp + 24;
           call _sb7gj() args: 0, res: 0, upd: 0;
       cbb3B: // global
           Hp = Hp - 16;
           I64[Sp] = block_cbb3A_info;
           R3 = lvl11_rb6WR_closure;
           R2 = P64[Sp + 40];
           P64[Sp + 72] = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
       cbb2U: // global
           _sb7fr::P64 = P64[Sp + 88];
           _sb7fz::P64 = P64[Sp + 80];
           _sb7gg::I64 = _sb7ge::I64 - _sb7gd::I64;
           if (%MO_S_Gt_W64(_sb7fu::I64,
                            _sb7gg::I64)) goto cbb2R; else goto cbb2S;
       cbb2R: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sb7gg::I64;
           R6 = Hp - 7;
           R5 = GHC.IO.Handle.Text.hGetBuf3_closure+1;
           R4 = _sb7fr::P64;
           R3 = R1;
           R2 = _sb7fz::P64;
           Sp = Sp + 112;
           call GHC.IO.Handle.Text.hGetBufNonBlocking2_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
       cbb2S: // global
           Hp = Hp - 16;
           R6 = P64[Sp + 104];
           R5 = GHC.IO.Handle.Text.hGetBuf3_closure+1;
           R4 = _sb7fr::P64;
           R3 = R1;
           R2 = _sb7fz::P64;
           Sp = Sp + 112;
           call GHC.IO.Handle.Text.hGetBufNonBlocking2_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbb2x_info" {
     block_cbb2x_info:
         const _cbb2x;
         const 159949;
         const 18446744069414584350;
         const ubb5F_srtd;
 },
 _cbb3A() //  [R1]
         { []
         }
     {offset
       cbb3A: // global
           if (R1 & 7 == 1) goto ubb4Y; else goto cbb3M;
       ubb4Y: // global
           Sp = Sp + 24;
           call _sb7gj() args: 0, res: 0, upd: 0;
       cbb3M: // global
           I64[Sp] = block_cbb3K_info;
           R1 = P64[Sp + 88];
           if (R1 & 7 != 0) goto ubb5d; else goto cbb3N;
       ubb5d: // global
           call _cbb3K(R1) args: 0, res: 0, upd: 0;
       cbb3N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbb3A_info" {
     block_cbb3A_info:
         const _cbb3A;
         const 144589;
         const 1653562408990;
         const Sb7vQ_srt+288;
 },
 _sb7gj() //  []
         { []
         }
     {offset
       sb7gj: // global
           I64[Sp + 16] = block_cbb31_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_ppv_info;
           P64[Sp + 8] = P64[Sp + 48];
           Sp = Sp - 8;
           call GHC.IO.BufferedIO.fillReadBuffer_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _cbb31() //  [R1]
         { []
         }
     {offset
       cbb31: // global
           I64[Sp] = block_cbb33_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubb5b; else goto cbb34;
       ubb5b: // global
           call _cbb33(R1) args: 0, res: 0, upd: 0;
       cbb34: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbb31_info" {
     block_cbb31_info:
         const _cbb31;
         const 5000;
         const 4294967326;
         const Sb7vQ_srt+288;
 },
 _cbb33() //  [R1]
         { []
         }
     {offset
       cbb33: // global
           I64[Sp] = block_cbb38_info;
           _sb7gq::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp + 32] = _sb7gq::P64;
           if (R1 & 7 != 0) goto ubb5c; else goto cbb3c;
       ubb5c: // global
           call _cbb38(R1) args: 0, res: 0, upd: 0;
       cbb3c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbb33_info" {
     block_cbb33_info:
         const _cbb33;
         const 5000;
         const 4294967326;
         const Sb7vQ_srt+288;
 },
 _cbb38() //  [R1]
         { []
         }
     {offset
       cbb38: // global
           _sb7gt::I64 = I64[R1 + 7];
           if (_sb7gt::I64 == 0) goto cbb3t; else goto cbb3s;
       cbb3t: // global
           R1 = GHC.IO.Handle.Text.hGetBuf3_closure+1;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbb3s: // global
           _sb7fr::P64 = P64[Sp + 48];
           _sb7fu::I64 = I64[Sp + 56];
           _sb7fw::P64 = P64[Sp + 64];
           _sb7fz::P64 = P64[Sp + 40];
           _sb7fF::P64 = P64[Sp + 8];
           _sb7gq::P64 = P64[Sp + 32];
           call MO_WriteBarrier();
           P64[_sb7fF::P64 + 8] = _sb7gq::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb7fF::P64);
           if (%MO_S_Gt_W64(_sb7gt::I64,
                            _sb7fu::I64)) goto cbb3p; else goto cbb3q;
       cbb3p: // global
           R6 = _sb7fw::P64;
           R5 = GHC.IO.Handle.Text.hGetBuf3_closure+1;
           R4 = _sb7fr::P64;
           R3 = _sb7gq::P64;
           R2 = _sb7fz::P64;
           Sp = Sp + 72;
           call GHC.IO.Handle.Text.hGetBufNonBlocking2_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
       cbb3q: // global
           R6 = R1;
           R5 = GHC.IO.Handle.Text.hGetBuf3_closure+1;
           R4 = _sb7fr::P64;
           R3 = _sb7gq::P64;
           R2 = _sb7fz::P64;
           Sp = Sp + 72;
           call GHC.IO.Handle.Text.hGetBufNonBlocking2_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbb38_info" {
     block_cbb38_info:
         const _cbb38;
         const 4488;
         const 4294967326;
         const Sb7vQ_srt+288;
 },
 _cbb3K() //  [R1]
         { []
         }
     {offset
       cbb3K: // global
           R6 = 0;
           R5 = I64[R1 + 7];
           R4 = I64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = GHC.IO.FD.$fBufferedIOFD12_closure;
           I64[Sp + 104] = I64[Sp + 96];
           Sp = Sp + 104;
           call GHC.IO.FD.$wreadRawBufferPtr_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbb3K_info" {
     block_cbb3K_info:
         const _cbb3K;
         const 524237;
         const 12884901918;
         const Sb7vQ_srt+344;
 },
 section ""relreadonly" . ubb5G_srtd" {
     ubb5G_srtd:
         const Sb7vQ_srt+8;
         const 46;
         const 66279935313985;
 },
 GHC.IO.Handle.Text.$whGetBufSome_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbb5l: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbb5p; else goto cbb5o;
       cbb5p: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.$whGetBufSome_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbb5o: // global
           if (R4 == 0) goto cbb5k; else goto cbb5j;
       cbb5k: // global
           Hp = Hp - 48;
           R1 = GHC.IO.Handle.Text.hGetBuf3_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbb5j: // global
           if (%MO_S_Ge_W64(R4, 0)) goto cbb5r; else goto cbb5s;
       cbb5r: // global
           I64[Hp - 40] = GHC.Types.I#_con_info;
           I64[Hp - 32] = R4;
           I64[Hp - 24] = sat_sb7hx_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = Hp - 39;
           I64[Hp] = R4;
           R4 = Hp - 22;
           R3 = R2;
           R2 = lvl13_rb6WT_closure;
           call GHC.IO.Handle.Internals.wantReadableHandle_1_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
       cbb5s: // global
           Hp = Hp - 48;
           R4 = R4;
           R3 = lvl13_rb6WT_closure;
           R2 = R2;
           call GHC.IO.Handle.Text.$willegalBufferSize_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.$whGetBufSome_info" {
     GHC.IO.Handle.Text.$whGetBufSome_info:
         const GHC.IO.Handle.Text.$whGetBufSome_entry;
         const 0;
         const 18446744069414584334;
         const 17179869206;
         const ubb5G_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.025924269 UTC

[section ""data" . GHC.IO.Handle.Text.hGetBufSome1_closure" {
     GHC.IO.Handle.Text.hGetBufSome1_closure:
         const GHC.IO.Handle.Text.hGetBufSome1_info;
         const 0;
 },
 GHC.IO.Handle.Text.hGetBufSome1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbb81: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbb82; else goto cbb83;
       cbb82: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hGetBufSome1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbb83: // global
           I64[Sp - 24] = block_cbb7Y_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubb87; else goto cbb7Z;
       ubb87: // global
           call _cbb7Y(R1) args: 0, res: 0, upd: 0;
       cbb7Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetBufSome1_info" {
     GHC.IO.Handle.Text.hGetBufSome1_info:
         const GHC.IO.Handle.Text.hGetBufSome1_entry;
         const 0;
         const 21474836494;
         const 17179869207;
         const Sb7vQ_srt+360;
 },
 _cbb7Y() //  [R1]
         { []
         }
     {offset
       cbb7Y: // global
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.IO.Handle.Text.$whGetBufSome_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbb7Y_info" {
     block_cbb7Y_info:
         const _cbb7Y;
         const 2;
         const 4294967326;
         const Sb7vQ_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.030910553 UTC

[section ""data" . GHC.IO.Handle.Text.hGetBufSome_closure" {
     GHC.IO.Handle.Text.hGetBufSome_closure:
         const GHC.IO.Handle.Text.hGetBufSome_info;
         const 0;
 },
 GHC.IO.Handle.Text.hGetBufSome_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbb8l: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.Text.hGetBufSome1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetBufSome_info" {
     GHC.IO.Handle.Text.hGetBufSome_info:
         const GHC.IO.Handle.Text.hGetBufSome_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const Sb7vQ_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.046840514 UTC

[section ""data" . GHC.IO.Handle.Text.hGetBuf4_closure" {
     GHC.IO.Handle.Text.hGetBuf4_closure:
         const GHC.IO.Handle.Text.hGetBuf4_info;
         const 0;
 },
 GHC.IO.Handle.Text.hGetBuf4_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cbb8z: // global
           if ((Sp + -88) < SpLim) (likely: False) goto cbb8N; else goto cbb8O;
       cbb8N: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hGetBuf4_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbb8O: // global
           I64[Sp - 40] = block_cbb8w_info;
           R1 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubbaj; else goto cbb8x;
       ubbaj: // global
           call _cbb8w(R1) args: 0, res: 0, upd: 0;
       cbb8x: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetBuf4_info" {
     GHC.IO.Handle.Text.hGetBuf4_info:
         const GHC.IO.Handle.Text.hGetBuf4_entry;
         const 0;
         const 12884901902;
         const 25769803801;
         const Sb7vQ_srt+384;
 },
 _cbb8w() //  [R1]
         { []
         }
     {offset
       cbb8w: // global
           I64[Sp - 8] = block_cbb8C_info;
           _sb7hK::P64 = R1;
           _sb7hQ::P64 = P64[R1 + 47];
           R1 = P64[Sp + 8];
           P64[Sp] = _sb7hQ::P64;
           P64[Sp + 8] = _sb7hK::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubbai; else goto cbb8D;
       ubbai: // global
           call _cbb8C(R1) args: 0, res: 0, upd: 0;
       cbb8D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbb8w_info" {
     block_cbb8w_info:
         const _cbb8w;
         const 4;
         const 4294967326;
         const Sb7vQ_srt+384;
 },
 _cbb8C() //  [R1]
         { []
         }
     {offset
       cbb8C: // global
           I64[Sp - 40] = block_cbb8H_info;
           _sb7i3::P64 = P64[R1 + 7];
           _sb7i4::P64 = P64[R1 + 15];
           _sb7i2::I64 = I64[R1 + 23];
           _sb7i5::I64 = I64[R1 + 31];
           _sb7i6::I64 = I64[R1 + 39];
           _sb7i7::I64 = I64[R1 + 47];
           R1 = P64[Sp + 32];
           P64[Sp - 32] = _sb7i4::P64;
           I64[Sp - 24] = _sb7i5::I64;
           I64[Sp - 16] = _sb7i6::I64;
           I64[Sp - 8] = _sb7i7::I64;
           P64[Sp] = _sb7i3::P64;
           I64[Sp + 32] = _sb7i2::I64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubbak; else goto cbb8I;
       ubbak: // global
           call _cbb8H(R1) args: 0, res: 0, upd: 0;
       cbb8I: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbb8C_info" {
     block_cbb8C_info:
         const _cbb8C;
         const 5;
         const 4294967326;
         const Sb7vQ_srt+384;
 },
 _cbb8H() //  [R1]
         { []
         }
     {offset
       cbb8H: // global
           I64[Sp] = block_cbb8M_info;
           _sb7i9::I64 = I64[R1 + 7];
           R1 = P64[Sp + 80];
           I64[Sp + 80] = _sb7i9::I64;
           if (R1 & 7 != 0) goto ubbal; else goto cbb8S;
       ubbal: // global
           call _cbb8M(R1) args: 0, res: 0, upd: 0;
       cbb8S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbb8H_info" {
     block_cbb8H_info:
         const _cbb8H;
         const 17290;
         const 4294967326;
         const Sb7vQ_srt+384;
 },
 _cbb8M() //  [R1]
         { []
         }
     {offset
       cbb8M: // global
           _sb7hG::P64 = P64[Sp + 64];
           _sb7ib::I64 = I64[R1 + 7];
           _sb7ic::I64 = I64[Sp + 32] - I64[Sp + 24];
           if (%MO_S_Ge_W64(_sb7ib::I64,
                            _sb7ic::I64)) goto cbb95; else goto cbbae;
       cbb95: // global
           I64[Sp] = block_cbb93_info;
           R1 = _sb7hG::P64;
           I64[Sp + 32] = _sb7ic::I64;
           I64[Sp + 64] = _sb7ib::I64;
           if (R1 & 7 != 0) goto ubbam; else goto cbb96;
       ubbam: // global
           call _cbb93(R1) args: 0, res: 0, upd: 0;
       cbb96: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbbae: // global
           I64[Sp] = block_cbb9N_info;
           R1 = _sb7hG::P64;
           I64[Sp + 64] = _sb7ib::I64;
           if (R1 & 7 != 0) goto ubban; else goto cbb9O;
       ubban: // global
           call _cbb9N(R1) args: 0, res: 0, upd: 0;
       cbb9O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbb8M_info" {
     block_cbb8M_info:
         const _cbb8M;
         const 50058;
         const 4294967326;
         const Sb7vQ_srt+384;
 },
 _cbb93() //  [R1]
         { []
         }
     {offset
       cbb93: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cbb9c; else goto cbb9b;
       cbb9c: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbb9b: // global
           _sb7hK::P64 = P64[Sp + 56];
           _sb7hQ::P64 = P64[Sp + 48];
           _sb7i2::I64 = I64[Sp + 72];
           _sb7i3::P64 = P64[Sp + 40];
           _sb7i4::P64 = P64[Sp + 8];
           _sb7i5::I64 = I64[Sp + 16];
           _sb7i9::I64 = I64[Sp + 80];
           _sb7ib::I64 = I64[Sp + 64];
           _sb7ic::I64 = I64[Sp + 32];
           _sb7if::I64 = I64[R1 + 7];
           (_sb7il::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memcpy(_sb7if::I64, _sb7i2::I64 + I64[Sp + 24], _sb7ic::I64);
           call MO_Touch(_sb7i3::P64);
           I64[Hp - 96] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 88] = _sb7i3::P64;
           P64[Hp - 80] = _sb7i4::P64;
           I64[Hp - 72] = _sb7i2::I64;
           I64[Hp - 64] = _sb7i5::I64;
           I64[Hp - 56] = 0;
           I64[Hp - 48] = 0;
           call MO_WriteBarrier();
           _cbb9o::P64 = Hp - 95;
           P64[_sb7hQ::P64 + 8] = _cbb9o::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb7hQ::P64);
           _sb7ip::I64 = _sb7ib::I64 - _sb7ic::I64;
           if (_sb7ip::I64 != 0) goto cbb9F; else goto cbb9L;
       cbb9F: // global
           I64[Hp - 40] = GHC.Types.I#_con_info;
           I64[Hp - 32] = _sb7ip::I64;
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _sb7i9::I64 + _sb7ic::I64;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sb7if::I64 + _sb7ic::I64;
           R6 = Hp - 39;
           R5 = Hp - 23;
           R4 = Hp - 7;
           R3 = _cbb9o::P64;
           R2 = _sb7hK::P64;
           Sp = Sp + 88;
           call GHC.IO.Handle.Text.hGetBuf2_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
       cbb9L: // global
           I64[Hp - 40] = GHC.Types.I#_con_info;
           I64[Hp - 32] = _sb7i9::I64 + _sb7ic::I64;
           _cbb9K::P64 = Hp - 39;
           Hp = Hp - 32;
           R1 = _cbb9K::P64;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbb93_info" {
     block_cbb93_info:
         const _cbb93;
         const 58250;
         const 4294967326;
         const Sb7vQ_srt+384;
 },
 _cbb9N() //  [R1]
         { []
         }
     {offset
       cbb9N: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cbbah; else goto cbbag;
       cbbah: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbbag: // global
           _sb7hQ::P64 = P64[Sp + 48];
           _sb7i2::I64 = I64[Sp + 72];
           _sb7i3::P64 = P64[Sp + 40];
           _sb7i4::P64 = P64[Sp + 8];
           _sb7i5::I64 = I64[Sp + 16];
           _sb7i6::I64 = I64[Sp + 24];
           _sb7i7::I64 = I64[Sp + 32];
           _sb7i9::I64 = I64[Sp + 80];
           _sb7ib::I64 = I64[Sp + 64];
           (_sb7iE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memcpy(I64[R1 + 7], _sb7i2::I64 + _sb7i6::I64, _sb7ib::I64);
           call MO_Touch(_sb7i3::P64);
           I64[Hp - 64] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 56] = _sb7i3::P64;
           P64[Hp - 48] = _sb7i4::P64;
           I64[Hp - 40] = _sb7i2::I64;
           I64[Hp - 32] = _sb7i5::I64;
           I64[Hp - 24] = _sb7i6::I64 + _sb7ib::I64;
           I64[Hp - 16] = _sb7i7::I64;
           call MO_WriteBarrier();
           P64[_sb7hQ::P64 + 8] = Hp - 63;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb7hQ::P64);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sb7i9::I64 + _sb7ib::I64;
           R1 = Hp - 7;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbb9N_info" {
     block_cbb9N_info:
         const _cbb9N;
         const 62346;
         const 30;
 },
 section ""data" . GHC.IO.Handle.Text.hGetBuf2_closure" {
     GHC.IO.Handle.Text.hGetBuf2_closure:
         const GHC.IO.Handle.Text.hGetBuf2_info;
         const 0;
 },
 sat_sb7jB_entry() //  [R1]
         { []
         }
     {offset
       cbbbP: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbbbW; else goto cbbbX;
       cbbbW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbbbX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbbbM_info;
           _sb7jw::I64 = I64[R1 + 24];
           R1 = P64[R1 + 16];
           I64[Sp - 24] = _sb7jw::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubbc1; else goto cbbbN;
       ubbc1: // global
           call _cbbbM(R1) args: 0, res: 0, upd: 0;
       cbbbN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sb7jB_info" {
     sat_sb7jB_info:
         const sat_sb7jB_entry;
         const 4294967297;
         const 19;
 },
 _cbbbM() //  [R1]
         { []
         }
     {offset
       cbbbM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbbc0; else goto cbbbZ;
       cbbc0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbbbZ: // global
           _sb7jA::I64 = I64[R1 + 7] + I64[Sp + 8];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sb7jA::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbbbM_info" {
     block_cbbbM_info:
         const _cbbbM;
         const 65;
         const 30;
 },
 sat_sb7jF_entry() //  [R1]
         { []
         }
     {offset
       cbbc9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbbca; else goto cbbcb;
       cbbca: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbbcb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.$fNumInt_$c+_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sb7jF_info" {
     sat_sb7jF_info:
         const sat_sb7jF_entry;
         const 2;
         const 18;
 },
 section ""relreadonly" . ubbdC_srtd" {
     ubbdC_srtd:
         const Sb7vQ_srt+56;
         const 43;
         const 6807523164161;
 },
 GHC.IO.Handle.Text.hGetBuf2_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cbbcc: // global
           if ((Sp + -96) < SpLim) (likely: False) goto cbbcd; else goto cbbce;
       cbbcd: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hGetBuf2_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbbce: // global
           I64[Sp - 40] = block_cbbas_info;
           R1 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubbdz; else goto cbbat;
       ubbdz: // global
           call _cbbas(R1) args: 0, res: 0, upd: 0;
       cbbat: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetBuf2_info" {
     GHC.IO.Handle.Text.hGetBuf2_info:
         const GHC.IO.Handle.Text.hGetBuf2_entry;
         const 0;
         const 18446744069414584334;
         const 25769803801;
         const ubbdC_srtd;
 },
 section ""relreadonly" . ubbdD_srtd" {
     ubbdD_srtd:
         const Sb7vQ_srt+56;
         const 43;
         const 4608499908609;
 },
 _cbbas() //  [R1]
         { []
         }
     {offset
       cbbas: // global
           I64[Sp - 32] = block_cbbax_info;
           _sb7iR::P64 = R1;
           _sb7iT::P64 = P64[R1 + 15];
           _sb7iU::P64 = P64[R1 + 23];
           _sb7iV::P64 = P64[R1 + 31];
           _sb7iX::P64 = P64[R1 + 47];
           R1 = P64[Sp + 8];
           P64[Sp - 24] = _sb7iU::P64;
           P64[Sp - 16] = _sb7iV::P64;
           P64[Sp - 8] = _sb7iX::P64;
           P64[Sp] = _sb7iT::P64;
           P64[Sp + 8] = _sb7iR::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubbdl; else goto cbbay;
       ubbdl: // global
           call _cbbax(R1) args: 0, res: 0, upd: 0;
       cbbay: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbas_info" {
     block_cbbas_info:
         const _cbbas;
         const 4;
         const 18446744069414584350;
         const ubbdD_srtd;
 },
 section ""relreadonly" . ubbdE_srtd" {
     ubbdE_srtd:
         const Sb7vQ_srt+56;
         const 43;
         const 4608499908609;
 },
 _cbbax() //  [R1]
         { []
         }
     {offset
       cbbax: // global
           I64[Sp - 8] = block_cbbaC_info;
           _sb7j8::P64 = R1;
           _sb7jc::I64 = I64[R1 + 31];
           R1 = P64[Sp + 64];
           I64[Sp] = _sb7jc::I64;
           P64[Sp + 64] = _sb7j8::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubbdm; else goto cbbaD;
       ubbdm: // global
           call _cbbaC(R1) args: 0, res: 0, upd: 0;
       cbbaD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbax_info" {
     block_cbbax_info:
         const _cbbax;
         const 8;
         const 18446744069414584350;
         const ubbdE_srtd;
 },
 section ""relreadonly" . ubbdF_srtd" {
     ubbdF_srtd:
         const Sb7vQ_srt+56;
         const 43;
         const 4608499908609;
 },
 _cbbaC() //  [R1]
         { []
         }
     {offset
       cbbaC: // global
           _sb7jg::I64 = I64[R1 + 7];
           if (%MO_S_Le_W64(_sb7jg::I64,
                            I64[Sp + 8])) goto ubbdd; else goto cbbcH;
       ubbdd: // global
           P64[Sp + 16] = R1;
           Sp = Sp + 16;
           call _sb7jh() args: 0, res: 0, upd: 0;
       cbbcH: // global
           I64[Sp] = block_cbbaN_info;
           R3 = lvl11_rb6WR_closure;
           R2 = P64[Sp + 16];
           I64[Sp + 8] = _sb7jg::I64;
           P64[Sp + 16] = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbaC_info" {
     block_cbbaC_info:
         const _cbbaC;
         const 73;
         const 18446744069414584350;
         const ubbdF_srtd;
 },
 _cbbaN() //  [R1]
         { []
         }
     {offset
       cbbaN: // global
           if (R1 & 7 == 1) goto ubbde; else goto cbbd7;
       ubbde: // global
           Sp = Sp + 16;
           call _sb7jh() args: 0, res: 0, upd: 0;
       cbbd7: // global
           I64[Sp + 40] = I64[Sp + 8];
           P64[Sp + 48] = GHC.IO.Handle.Text.hGetBuf3_closure+1;
           P64[Sp + 72] = P64[Sp + 24];
           Sp = Sp + 40;
           call _cbbaY() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbbaN_info" {
     block_cbbaN_info:
         const _cbbaN;
         const 73;
         const 287762808862;
         const Sb7vQ_srt+344;
 },
 _sb7jh() //  []
         { []
         }
     {offset
       sb7jh: // global
           I64[Sp - 8] = block_cbbcl_info;
           R2 = P64[Sp + 24];
           I64[Sp - 32] = stg_ap_ppv_info;
           P64[Sp - 24] = P64[Sp + 8];
           P64[Sp - 16] = P64[Sp + 56];
           Sp = Sp - 32;
           call GHC.IO.BufferedIO.fillReadBuffer_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _cbbcl() //  [R1]
         { []
         }
     {offset
       cbbcl: // global
           I64[Sp] = block_cbbcn_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubbdA; else goto cbbco;
       ubbdA: // global
           call _cbbcn(R1) args: 0, res: 0, upd: 0;
       cbbco: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbcl_info" {
     block_cbbcl_info:
         const _cbbcl;
         const 8840;
         const 4294967326;
         const Sb7vQ_srt+392;
 },
 _cbbcn() //  [R1]
         { []
         }
     {offset
       cbbcn: // global
           I64[Sp] = block_cbbcs_info;
           _sb7jo::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp + 64] = _sb7jo::P64;
           if (R1 & 7 != 0) goto ubbdB; else goto cbbcw;
       ubbdB: // global
           call _cbbcs(R1) args: 0, res: 0, upd: 0;
       cbbcw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbcn_info" {
     block_cbbcn_info:
         const _cbbcn;
         const 8840;
         const 4294967326;
         const Sb7vQ_srt+392;
 },
 _cbbcs() //  [R1]
         { []
         }
     {offset
       cbbcs: // global
           _sb7iO::P64 = P64[Sp + 56];
           if (I64[R1 + 7] == 0) goto cbbcE; else goto cbbcD;
       cbbcE: // global
           R1 = _sb7iO::P64;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbbcD: // global
           _sb7iN::P64 = P64[Sp + 48];
           _sb7iR::P64 = P64[Sp + 40];
           _sb7iX::P64 = P64[Sp + 24];
           _sb7jf::P64 = P64[Sp + 8];
           _sb7jo::P64 = P64[Sp + 64];
           call MO_WriteBarrier();
           P64[_sb7iX::P64 + 8] = _sb7jo::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb7iX::P64);
           R6 = _sb7jf::P64;
           R5 = _sb7iO::P64;
           R4 = _sb7iN::P64;
           R3 = _sb7jo::P64;
           R2 = _sb7iR::P64;
           Sp = Sp + 72;
           call GHC.IO.Handle.Text.hGetBuf4_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbcs_info" {
     block_cbbcs_info:
         const _cbbcs;
         const 648;
         const 4294967326;
         const Sb7vQ_srt+392;
 },
 _cbbaY() //  []
         { []
         }
     {offset
       cbbaY: // global
           if (%MO_S_Gt_W64(I64[Sp], 0)) goto cbbcV; else goto cbbd6;
       cbbcV: // global
           I64[Sp - 8] = block_cbbb4_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubbdq; else goto cbbb5;
       ubbdq: // global
           call _cbbb4(R1) args: 0, res: 0, upd: 0;
       cbbb5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbbd6: // global
           P64[Sp + 32] = P64[Sp + 8];
           Sp = Sp + 24;
           call _cbbc3() args: 0, res: 0, upd: 0;
     }
 },
 _cbbb4() //  [R1]
         { []
         }
     {offset
       cbbb4: // global
           I64[Sp] = block_cbbb9_info;
           _sb7jN::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _sb7jN::I64;
           if (R1 & 7 != 0) goto ubbds; else goto cbbba;
       ubbds: // global
           call _cbbb9(R1) args: 0, res: 0, upd: 0;
       cbbba: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbb4_info" {
     block_cbbb4_info:
         const _cbbb4;
         const 69;
         const 12884901918;
         const Sb7vQ_srt+344;
 },
 _cbbb9() //  [R1]
         { []
         }
     {offset
       cbbb9: // global
           I64[Sp] = block_cbbbe_info;
           _sb7jP::I64 = I64[R1 + 7];
           R1 = P64[Sp + 40];
           I64[Sp + 40] = _sb7jP::I64;
           if (R1 & 7 != 0) goto ubbdt; else goto cbbbf;
       ubbdt: // global
           call _cbbbe(R1) args: 0, res: 0, upd: 0;
       cbbbf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbb9_info" {
     block_cbbb9_info:
         const _cbbb9;
         const 197;
         const 12884901918;
         const Sb7vQ_srt+344;
 },
 _cbbbe() //  [R1]
         { []
         }
     {offset
       cbbbe: // global
           _sb7jT::I64 = I64[Sp + 16] + I64[Sp + 40];
           I64[Sp] = block_cbbbp_info;
           R6 = 0;
           R5 = _sb7jT::I64;
           R4 = I64[R1 + 15];
           R3 = I64[R1 + 7];
           R2 = GHC.IO.FD.$fBufferedIOFD12_closure;
           I64[Sp - 8] = I64[Sp + 8];
           P64[Sp + 16] = R1;
           Sp = Sp - 8;
           call GHC.IO.FD.$wreadRawBufferPtr_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbbe_info" {
     block_cbbbe_info:
         const _cbbbe;
         const 1221;
         const 12884901918;
         const Sb7vQ_srt+344;
 },
 _cbbbp() //  [R1]
         { []
         }
     {offset
       cbbbp: // global
           I64[Sp] = block_cbbbr_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubbdu; else goto cbbbs;
       ubbdu: // global
           call _cbbbr(R1) args: 0, res: 0, upd: 0;
       cbbbs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbbp_info" {
     block_cbbbp_info:
         const _cbbbp;
         const 1093;
         const 12884901918;
         const Sb7vQ_srt+344;
 },
 _cbbbr() //  [R1]
         { []
         }
     {offset
       cbbbr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbbd2; else goto cbbd1;
       cbbd2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbbd1: // global
           _sb7jP::I64 = I64[Sp + 40];
           _sb7k0::I64 = I64[R1 + 7];
           if (_sb7k0::I64 != 0) goto cbbd4; else goto cbbd5;
       cbbd4: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sb7jP::I64 + _sb7k0::I64;
           P64[Sp + 40] = P64[Sp + 16];
           P64[Sp + 16] = Hp - 7;
           I64[Sp + 8] = I64[Sp + 8] - _sb7k0::I64;
           Sp = Sp + 8;
           call _cbbaY() args: 0, res: 0, upd: 0;
       cbbd5: // global
           Hp = Hp - 16;
           I64[Sp + 40] = _sb7jP::I64;
           Sp = Sp + 32;
           call _cbbbG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbbbr_info" {
     block_cbbbr_info:
         const _cbbbr;
         const 1093;
         const 12884901918;
         const Sb7vQ_srt+344;
 },
 _cbbbG() //  []
         { []
         }
     {offset
       cbbbG: // global
           Hp = Hp + 32;
           _sb7jw::I64 = I64[Sp + 8];
           if (Hp > HpLim) (likely: False) goto cbbcP; else goto cbbcO;
       cbbcP: // global
           HpAlloc = 32;
           I64[Sp - 8] = block_cbbbF_info;
           R1 = _sb7jw::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbbcO: // global
           I64[Hp - 24] = sat_sb7jB_info;
           P64[Hp - 8] = P64[Sp];
           I64[Hp] = _sb7jw::I64;
           R1 = Hp - 24;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cbbbF() //  [R1]
         { []
         }
     {offset
       cbbbF: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _cbbbG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbbbF_info" {
     block_cbbbF_info:
         const _cbbbF;
         const 130;
         const 30;
 },
 _cbbc3() //  []
         { []
         }
     {offset
       cbbc3: // global
           Hp = Hp + 32;
           _sb7jD::P64 = P64[Sp + 8];
           if (Hp > HpLim) (likely: False) goto cbbcS; else goto cbbcR;
       cbbcS: // global
           HpAlloc = 32;
           I64[Sp - 8] = block_cbbc2_info;
           R1 = _sb7jD::P64;
           Sp = Sp - 8;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbbcR: // global
           I64[Hp - 24] = sat_sb7jF_info;
           P64[Hp - 8] = P64[Sp];
           P64[Hp] = _sb7jD::P64;
           R1 = Hp - 24;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cbbc2() //  [R1]
         { []
         }
     {offset
       cbbc2: // global
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _cbbc3() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbbc2_info" {
     block_cbbc2_info:
         const _cbbc2;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.099082965 UTC

[section ""cstring" . GHC.IO.Handle.Text.hGetBuf6_bytes" {
     GHC.IO.Handle.Text.hGetBuf6_bytes:
         I8[] [104,71,101,116,66,117,102]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.10140487 UTC

[section ""data" . GHC.IO.Handle.Text.hGetBuf5_closure" {
     GHC.IO.Handle.Text.hGetBuf5_closure:
         const GHC.IO.Handle.Text.hGetBuf5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Text.hGetBuf5_entry() //  [R1]
         { []
         }
     {offset
       cbbgh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbbgi; else goto cbbgj;
       cbbgi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbbgj: // global
           (_cbbge::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbbge::I64 == 0) goto cbbgg; else goto cbbgf;
       cbbgg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbbgf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbbge::I64;
           R2 = GHC.IO.Handle.Text.hGetBuf6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetBuf5_info" {
     GHC.IO.Handle.Text.hGetBuf5_info:
         const GHC.IO.Handle.Text.hGetBuf5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.113601975 UTC

[section ""data" . GHC.IO.Handle.Text.$whGetBuf_closure" {
     GHC.IO.Handle.Text.$whGetBuf_closure:
         const GHC.IO.Handle.Text.$whGetBuf_info;
         const 0;
 },
 sat_sb7l9_entry() //  [R1]
         { []
         }
     {offset
       cbbhc: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbbhg; else goto cbbhh;
       cbbhg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbbhh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbbh9_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubbhl; else goto cbbha;
       ubbhl: // global
           call _cbbh9(R1) args: 0, res: 0, upd: 0;
       cbbha: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sb7l9_info" {
     sat_sb7l9_info:
         const sat_sb7l9_entry;
         const 1;
         const 16;
 },
 _cbbh9() //  [R1]
         { []
         }
     {offset
       cbbh9: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbbhk; else goto cbbhj;
       cbbhk: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbbhj: // global
           _sb7l4::P64 = P64[R1 + 7];
           _sb7l5::P64 = P64[R1 + 15];
           _sb7l3::I64 = I64[R1 + 23];
           _sb7l6::I64 = I64[R1 + 31];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sb7l4::P64;
           P64[Hp - 32] = _sb7l5::P64;
           I64[Hp - 24] = _sb7l3::I64;
           I64[Hp - 16] = _sb7l6::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbbh9_info" {
     block_cbbh9_info:
         const _cbbh9;
         const 0;
         const 30;
 },
 sat_sb7ls_entry() //  [R1]
         { []
         }
     {offset
       cbbhI: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbbhP; else goto cbbhQ;
       cbbhP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbbhQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbbhF_info;
           _sb7li::I64 = I64[R1 + 24];
           R1 = P64[R1 + 16];
           I64[Sp - 24] = _sb7li::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubbhU; else goto cbbhG;
       ubbhU: // global
           call _cbbhF(R1) args: 0, res: 0, upd: 0;
       cbbhG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sb7ls_info" {
     sat_sb7ls_info:
         const sat_sb7ls_entry;
         const 4294967297;
         const 19;
 },
 _cbbhF() //  [R1]
         { []
         }
     {offset
       cbbhF: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbbhT; else goto cbbhS;
       cbbhT: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbbhS: // global
           _sb7lm::P64 = P64[R1 + 7];
           _sb7ln::P64 = P64[R1 + 15];
           _sb7ll::I64 = I64[R1 + 23];
           _sb7lo::I64 = I64[R1 + 31];
           _sb7lq::I64 = I64[R1 + 47];
           _sb7lr::I64 = I64[R1 + 39] + I64[Sp + 8];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sb7lm::P64;
           P64[Hp - 32] = _sb7ln::P64;
           I64[Hp - 24] = _sb7ll::I64;
           I64[Hp - 16] = _sb7lo::I64;
           I64[Hp - 8] = _sb7lr::I64;
           I64[Hp] = _sb7lq::I64;
           R1 = Hp - 47;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbbhF_info" {
     block_cbbhF_info:
         const _cbbhF;
         const 65;
         const 30;
 },
 sat_sb7lN_entry() //  [R1, R2]
         { []
         }
     {offset
       cbbhV: // global
           if ((Sp + -96) < SpLim) (likely: False) goto cbbhW; else goto cbbhX;
       cbbhW: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbbhX: // global
           I64[Sp - 24] = block_cbbgG_info;
           _sb7k5::P64 = P64[R1 + 6];
           _sb7ka::P64 = P64[R1 + 14];
           R1 = R2;
           P64[Sp - 16] = _sb7k5::P64;
           P64[Sp - 8] = _sb7ka::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubbjr; else goto cbbgH;
       ubbjr: // global
           call _cbbgG(R1) args: 0, res: 0, upd: 0;
       cbbgH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sb7lN_info" {
     sat_sb7lN_info:
         const sat_sb7lN_entry;
         const 2;
         const 12884901899;
         const 8589934597;
         const Sb7vQ_srt+384;
 },
 _cbbgG() //  [R1]
         { []
         }
     {offset
       cbbgG: // global
           I64[Sp - 40] = block_cbbgL_info;
           _sb7kd::P64 = R1;
           _sb7kj::P64 = P64[R1 + 47];
           _sb7kl::P64 = P64[R1 + 63];
           _sb7km::P64 = P64[R1 + 71];
           _sb7kp::P64 = P64[R1 + 95];
           R1 = P64[_sb7km::P64 + 8];
           P64[Sp - 32] = _sb7kj::P64;
           P64[Sp - 24] = _sb7kl::P64;
           P64[Sp - 16] = _sb7km::P64;
           P64[Sp - 8] = _sb7kp::P64;
           P64[Sp] = _sb7kd::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubbjh; else goto cbbgM;
       ubbjh: // global
           call _cbbgL(R1) args: 0, res: 0, upd: 0;
       cbbgM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbgG_info" {
     block_cbbgG_info:
         const _cbbgG;
         const 2;
         const 12884901918;
         const Sb7vQ_srt+384;
 },
 _cbbgL() //  [R1]
         { []
         }
     {offset
       cbbgL: // global
           I64[Sp - 16] = block_cbbgS_info;
           _sb7kC::I64 = I64[R1 + 39];
           _sb7kD::I64 = I64[R1 + 47];
           R1 = P64[R1 + 15];
           I64[Sp - 8] = _sb7kD::I64;
           I64[Sp] = _sb7kC::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubbji; else goto cbbgT;
       ubbji: // global
           call _cbbgS(R1) args: 0, res: 0, upd: 0;
       cbbgT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbgL_info" {
     block_cbbgL_info:
         const _cbbgL;
         const 7;
         const 12884901918;
         const Sb7vQ_srt+384;
 },
 _cbbgS() //  [R1]
         { []
         }
     {offset
       cbbgS: // global
           if (R1 & 7 == 1) goto cbbiV; else goto ubbjc;
       cbbiV: // global
           if (I64[Sp + 16] == I64[Sp + 8]) goto ubbjd; else goto cbbih;
       ubbjd: // global
           Sp = Sp + 24;
           goto ubbjl;
       cbbih: // global
           _sb7kV::P64 = P64[P64[Sp + 32] + 8];
           I64[Sp + 16] = block_cbbh0_info;
           R1 = _sb7kV::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto ubbjj; else goto cbbh1;
       ubbjj: // global
           call _cbbh0(R1) args: 0, res: 0, upd: 0;
       cbbh1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ubbjc: // global
           Sp = Sp + 24;
           goto ubbjl;
       ubbjl: // global
           call _sb7kE() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbbgS_info" {
     block_cbbgS_info:
         const _cbbgS;
         const 201;
         const 12884901918;
         const Sb7vQ_srt+384;
 },
 _cbbh0() //  [R1]
         { []
         }
     {offset
       cbbh0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbbik; else goto cbbij;
       cbbik: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbbij: // global
           _sb7km::P64 = P64[Sp + 24];
           _sb7kX::P64 = P64[R1 + 7];
           _sb7kY::P64 = P64[R1 + 15];
           _sb7l1::P64 = P64[_sb7km::P64 + 8];
           I64[Hp - 16] = sat_sb7l9_info;
           P64[Hp] = _sb7l1::P64;
           call MO_WriteBarrier();
           P64[_sb7km::P64 + 8] = Hp - 16;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb7km::P64);
           I64[Sp] = block_cbbhp_info;
           R1 = _sb7l1::P64;
           P64[Sp + 16] = _sb7kY::P64;
           P64[Sp + 24] = _sb7kX::P64;
           if (R1 & 7 != 0) goto ubbjm; else goto cbbhq;
       ubbjm: // global
           call _cbbhp(R1) args: 0, res: 0, upd: 0;
       cbbhq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbh0_info" {
     block_cbbh0_info:
         const _cbbh0;
         const 135;
         const 12884901918;
         const Sb7vQ_srt+384;
 },
 _cbbhp() //  [R1]
         { []
         }
     {offset
       cbbhp: // global
           _sb7li::I64 = I64[R1 + 39];
           if (_sb7li::I64 != 0) goto cbbin; else goto cbbiS;
       cbbin: // global
           I64[Sp - 24] = block_cbbhw_info;
           _sb7ld::P64 = P64[R1 + 7];
           _sb7le::P64 = P64[R1 + 15];
           _sb7lc::I64 = I64[R1 + 23];
           R1 = P64[Sp + 32];
           P64[Sp - 16] = _sb7le::P64;
           I64[Sp - 8] = _sb7li::I64;
           P64[Sp] = _sb7ld::P64;
           I64[Sp + 32] = _sb7lc::I64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubbjn; else goto cbbhx;
       ubbjn: // global
           call _cbbhw(R1) args: 0, res: 0, upd: 0;
       cbbhx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbbiS: // global
           _sb7kj::P64 = P64[Sp + 8];
           _sb7kY::P64 = P64[Sp + 16];
           call MO_WriteBarrier();
           P64[_sb7kj::P64 + 8] = _sb7kY::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb7kj::P64);
           Sp = Sp + 8;
           call _sb7kE() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbbhp_info" {
     block_cbbhp_info:
         const _cbbhp;
         const 7;
         const 12884901918;
         const Sb7vQ_srt+384;
 },
 _cbbhw() //  [R1]
         { []
         }
     {offset
       cbbhw: // global
           if (R1 & 7 == 1) goto cbbip; else goto cbbiH;
       cbbip: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbbis; else goto cbbir;
       cbbis: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbbir: // global
           I64[Hp - 24] = sat_sb7ls_info;
           P64[Hp - 8] = P64[Sp + 40];
           I64[Hp] = I64[Sp + 16];
           _sb7kj::P64 = P64[Sp + 32];
           call MO_WriteBarrier();
           P64[_sb7kj::P64 + 8] = Hp - 24;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb7kj::P64);
           Sp = Sp + 32;
           call _sb7kE() args: 0, res: 0, upd: 0;
       cbbiH: // global
           I64[Sp] = block_cbbiv_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubbjp; else goto cbbiw;
       ubbjp: // global
           call _cbbiv(R1) args: 0, res: 0, upd: 0;
       cbbiw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbhw_info" {
     block_cbbhw_info:
         const _cbbhw;
         const 4234;
         const 12884901918;
         const Sb7vQ_srt+384;
 },
 _cbbiv() //  [R1]
         { []
         }
     {offset
       cbbiv: // global
           I64[Sp - 8] = block_cbbiA_info;
           R2 = P64[Sp + 48];
           _sb7lw::P64 = P64[R1 + 7];
           _sb7lx::P64 = P64[R1 + 15];
           R1 = P64[R1 + 39];
           P64[Sp] = _sb7lx::P64;
           P64[Sp + 48] = _sb7lw::P64;
           Sp = Sp - 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbiv_info" {
     block_cbbiv_info:
         const _cbbiv;
         const 4234;
         const 12884901918;
         const Sb7vQ_srt+384;
 },
 _cbbiA() //  [R1]
         { []
         }
     {offset
       cbbiA: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbbiL; else goto cbbiK;
       cbbiL: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbbiK: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = P64[Sp + 16];
           I64[Hp - 24] = I64[Sp + 64];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           I64[Sp + 32] = block_cbbiD_info;
           R5 = Hp - 47;
           R4 = P64[Sp + 48];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 56];
           Sp = Sp + 32;
           call GHC.IO.Handle.Internals.$wstreamEncode_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbiA_info" {
     block_cbbiA_info:
         const _cbbiA;
         const 8459;
         const 12884901918;
         const Sb7vQ_srt+384;
 },
 _cbbiD() //  [R1]
         { []
         }
     {offset
       cbbiD: // global
           I64[Sp] = block_cbbiF_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubbjs; else goto cbbiN;
       ubbjs: // global
           call _cbbiF(R1) args: 0, res: 0, upd: 0;
       cbbiN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbiD_info" {
     block_cbbiD_info:
         const _cbbiD;
         const 903;
         const 12884901918;
         const Sb7vQ_srt+384;
 },
 _cbbiF() //  [R1]
         { []
         }
     {offset
       cbbiF: // global
           _sb7kj::P64 = P64[Sp + 8];
           _sb7lJ::P64 = P64[R1 + 7];
           call MO_WriteBarrier();
           P64[_sb7kj::P64 + 8] = _sb7lJ::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb7kj::P64);
           Sp = Sp + 8;
           call _sb7kE() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbbiF_info" {
     block_cbbiF_info:
         const _cbbiF;
         const 903;
         const 12884901918;
         const Sb7vQ_srt+384;
 },
 _sb7kE() //  []
         { []
         }
     {offset
       sb7kE: // global
           _sb7kI::P64 = P64[P64[Sp] + 8];
           I64[Sp + 24] = block_cbbi3_info;
           R1 = _sb7kI::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto ubbju; else goto cbbi5;
       ubbju: // global
           call _cbbi3(R1) args: 0, res: 0, upd: 0;
       cbbi5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbbi3() //  [R1]
         { []
         }
     {offset
       cbbi3: // global
           _sb7k5::P64 = P64[Sp + 16];
           _sb7ka::P64 = P64[Sp + 24];
           _sb7kd::P64 = P64[Sp + 8];
           if (I64[R1 + 39] == I64[R1 + 47]) goto cbbie; else goto cbbid;
       cbbie: // global
           R6 = _sb7ka::P64;
           R5 = GHC.IO.Handle.Text.hGetBuf3_closure+1;
           R4 = _sb7k5::P64;
           R3 = R1;
           R2 = _sb7kd::P64;
           Sp = Sp + 32;
           call GHC.IO.Handle.Text.hGetBuf2_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
       cbbid: // global
           R6 = _sb7ka::P64;
           R5 = GHC.IO.Handle.Text.hGetBuf3_closure+1;
           R4 = _sb7k5::P64;
           R3 = R1;
           R2 = _sb7kd::P64;
           Sp = Sp + 32;
           call GHC.IO.Handle.Text.hGetBuf4_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbi3_info" {
     block_cbbi3_info:
         const _cbbi3;
         const 3;
         const 12884901918;
         const Sb7vQ_srt+384;
 },
 section ""relreadonly" . ubbjG_srtd" {
     ubbjG_srtd:
         const Sb7vQ_srt+8;
         const 51;
         const 2111062325331969;
 },
 GHC.IO.Handle.Text.$whGetBuf_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbbjy: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbbjC; else goto cbbjB;
       cbbjC: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.$whGetBuf_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbbjB: // global
           if (R4 == 0) goto cbbjx; else goto cbbjw;
       cbbjx: // global
           Hp = Hp - 40;
           R1 = GHC.IO.Handle.Text.hGetBuf3_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbbjw: // global
           if (%MO_S_Ge_W64(R4, 0)) goto cbbjE; else goto cbbjF;
       cbbjE: // global
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = R4;
           I64[Hp - 16] = sat_sb7lN_info;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 31;
           R4 = Hp - 14;
           R3 = R2;
           R2 = GHC.IO.Handle.Text.hGetBuf5_closure;
           call GHC.IO.Handle.Internals.wantReadableHandle_1_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
       cbbjF: // global
           Hp = Hp - 40;
           R4 = R4;
           R3 = GHC.IO.Handle.Text.hGetBuf5_closure;
           R2 = R2;
           call GHC.IO.Handle.Text.$willegalBufferSize_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.$whGetBuf_info" {
     GHC.IO.Handle.Text.$whGetBuf_info:
         const GHC.IO.Handle.Text.$whGetBuf_entry;
         const 0;
         const 18446744069414584334;
         const 17179869206;
         const ubbjG_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.147777091 UTC

[section ""data" . GHC.IO.Handle.Text.hGetBuf1_closure" {
     GHC.IO.Handle.Text.hGetBuf1_closure:
         const GHC.IO.Handle.Text.hGetBuf1_info;
         const 0;
 },
 GHC.IO.Handle.Text.hGetBuf1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbblk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbbll; else goto cbblm;
       cbbll: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hGetBuf1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbblm: // global
           I64[Sp - 24] = block_cbblh_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubblq; else goto cbbli;
       ubblq: // global
           call _cbblh(R1) args: 0, res: 0, upd: 0;
       cbbli: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetBuf1_info" {
     GHC.IO.Handle.Text.hGetBuf1_info:
         const GHC.IO.Handle.Text.hGetBuf1_entry;
         const 0;
         const 21474836494;
         const 17179869207;
         const Sb7vQ_srt+400;
 },
 _cbblh() //  [R1]
         { []
         }
     {offset
       cbblh: // global
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.IO.Handle.Text.$whGetBuf_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbblh_info" {
     block_cbblh_info:
         const _cbblh;
         const 2;
         const 4294967326;
         const Sb7vQ_srt+400;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.153204105 UTC

[section ""data" . GHC.IO.Handle.Text.hGetBuf_closure" {
     GHC.IO.Handle.Text.hGetBuf_closure:
         const GHC.IO.Handle.Text.hGetBuf_info;
         const 0;
 },
 GHC.IO.Handle.Text.hGetBuf_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbblE: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.Text.hGetBuf1_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetBuf_info" {
     GHC.IO.Handle.Text.hGetBuf_info:
         const GHC.IO.Handle.Text.hGetBuf_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const Sb7vQ_srt+416;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.156175316 UTC

[section ""cstring" . lvl14_rb6WU_bytes" {
     lvl14_rb6WU_bytes:
         I8[] [101,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.158326121 UTC

[section ""data" . lvl15_rb6WV_closure" {
     lvl15_rb6WV_closure:
         const lvl15_rb6WV_info;
         const 0;
         const 0;
         const 0;
 },
 lvl15_rb6WV_entry() //  [R1]
         { []
         }
     {offset
       cbblS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbblT; else goto cbblU;
       cbblT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbblU: // global
           (_cbblP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbblP::I64 == 0) goto cbblR; else goto cbblQ;
       cbblR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbblQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbblP::I64;
           R2 = lvl14_rb6WU_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl15_rb6WV_info" {
     lvl15_rb6WV_info:
         const lvl15_rb6WV_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.162518751 UTC

[section ""data" . lvl16_rb6WW_closure" {
     lvl16_rb6WW_closure:
         const lvl16_rb6WW_info;
         const 0;
         const 0;
         const 0;
 },
 lvl16_rb6WW_entry() //  [R1]
         { []
         }
     {offset
       cbbm8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbbm9; else goto cbbma;
       cbbm9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbbma: // global
           (_cbbm5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbbm5::I64 == 0) goto cbbm7; else goto cbbm6;
       cbbm7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbbm6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbbm5::I64;
           R2 = GHC.IO.Handle.Text.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl16_rb6WW_info" {
     lvl16_rb6WW_info:
         const lvl16_rb6WW_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.166444755 UTC

[section ""data" . lvl17_rb6WX_closure" {
     lvl17_rb6WX_closure:
         const lvl17_rb6WX_info;
         const 0;
         const 0;
         const 0;
 },
 lvl17_rb6WX_entry() //  [R1]
         { []
         }
     {offset
       cbbmo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbbmp; else goto cbbmq;
       cbbmp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbbmq: // global
           (_cbbml::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbbml::I64 == 0) goto cbbmn; else goto cbbmm;
       cbbmn: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbbmm: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbbml::I64;
           R2 = GHC.IO.Handle.Text.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl17_rb6WX_info" {
     lvl17_rb6WX_info:
         const lvl17_rb6WX_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.169759171 UTC

[section ""cstring" . lvl18_rb6WY_bytes" {
     lvl18_rb6WY_bytes:
         I8[] [46,47,71,72,67,47,73,79,47,72,97,110,100,108,101,47,84,101,120,116,46,104,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.171917195 UTC

[section ""data" . lvl19_rb6WZ_closure" {
     lvl19_rb6WZ_closure:
         const lvl19_rb6WZ_info;
         const 0;
         const 0;
         const 0;
 },
 lvl19_rb6WZ_entry() //  [R1]
         { []
         }
     {offset
       cbbmF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbbmG; else goto cbbmH;
       cbbmG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbbmH: // global
           (_cbbmC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbbmC::I64 == 0) goto cbbmE; else goto cbbmD;
       cbbmE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbbmD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbbmC::I64;
           R2 = lvl18_rb6WY_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl19_rb6WZ_info" {
     lvl19_rb6WZ_info:
         const lvl19_rb6WZ_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.176287022 UTC

[section ""data" . lvl20_rb6X0_closure" {
     lvl20_rb6X0_closure:
         const GHC.Types.I#_con_info;
         const 785;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.177967384 UTC

[section ""data" . lvl21_rb6X1_closure" {
     lvl21_rb6X1_closure:
         const GHC.Types.I#_con_info;
         const 17;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.179628759 UTC

[section ""data" . lvl22_rb6X2_closure" {
     lvl22_rb6X2_closure:
         const GHC.Types.I#_con_info;
         const 38;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.18157821 UTC

[section ""data" . lvl23_rb6X3_closure" {
     lvl23_rb6X3_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl16_rb6WW_closure;
         const lvl17_rb6WX_closure;
         const lvl19_rb6WZ_closure;
         const lvl20_rb6X0_closure+1;
         const lvl21_rb6X1_closure+1;
         const lvl20_rb6X0_closure+1;
         const lvl22_rb6X2_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.183327272 UTC

[section ""data" . lvl24_rb6X4_closure" {
     lvl24_rb6X4_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl15_rb6WV_closure;
         const lvl23_rb6X3_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.184965433 UTC

[section ""cstring" . lvl25_rb6X5_bytes" {
     lvl25_rb6X5_bytes:
         I8[] [84,111,100,111,58,32,104,80,117,116,66,117,102]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.187472353 UTC

[section ""data" . lvl26_rb6X6_closure" {
     lvl26_rb6X6_closure:
         const lvl26_rb6X6_info;
         const 0;
         const 0;
         const 0;
 },
 lvl26_rb6X6_entry() //  [R1]
         { []
         }
     {offset
       cbbn3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbbn4; else goto cbbn5;
       cbbn4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbbn5: // global
           (_cbbmY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbbmY::I64 == 0) goto cbbn0; else goto cbbmZ;
       cbbn0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbbmZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbbmY::I64;
           I64[Sp - 24] = block_cbbn1_info;
           R2 = lvl25_rb6X5_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl26_rb6X6_info" {
     lvl26_rb6X6_info:
         const lvl26_rb6X6_entry;
         const 0;
         const 12884901909;
         const Sb7vQ_srt+424;
 },
 _cbbn1() //  [R1]
         { []
         }
     {offset
       cbbn1: // global
           R3 = R1;
           R2 = lvl24_rb6X4_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbbn1_info" {
     block_cbbn1_info:
         const _cbbn1;
         const 0;
         const 12884901918;
         const Sb7vQ_srt+424;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.192335211 UTC

[section ""data" . lvl27_rb6X7_closure" {
     lvl27_rb6X7_closure:
         const GHC.Types.I#_con_info;
         const 790;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.194010897 UTC

[section ""data" . lvl28_rb6X8_closure" {
     lvl28_rb6X8_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl16_rb6WW_closure;
         const lvl17_rb6WX_closure;
         const lvl19_rb6WZ_closure;
         const lvl27_rb6X7_closure+1;
         const lvl21_rb6X1_closure+1;
         const lvl27_rb6X7_closure+1;
         const lvl22_rb6X2_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.195706907 UTC

[section ""data" . lvl29_rb6X9_closure" {
     lvl29_rb6X9_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl15_rb6WV_closure;
         const lvl28_rb6X8_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.202242972 UTC

[section ""data" . lvl30_rb6Xa_closure" {
     lvl30_rb6Xa_closure:
         const lvl30_rb6Xa_info;
         const 0;
         const 0;
         const 0;
 },
 lvl30_rb6Xa_entry() //  [R1]
         { []
         }
     {offset
       cbbnu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbbnv; else goto cbbnw;
       cbbnv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbbnw: // global
           (_cbbnp::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbbnp::I64 == 0) goto cbbnr; else goto cbbnq;
       cbbnr: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbbnq: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbbnp::I64;
           I64[Sp - 24] = block_cbbns_info;
           R2 = lvl25_rb6X5_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl30_rb6Xa_info" {
     lvl30_rb6Xa_info:
         const lvl30_rb6Xa_entry;
         const 0;
         const 21474836501;
         const Sb7vQ_srt+424;
 },
 _cbbns() //  [R1]
         { []
         }
     {offset
       cbbns: // global
           R3 = R1;
           R2 = lvl29_rb6X9_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbbns_info" {
     block_cbbns_info:
         const _cbbns;
         const 0;
         const 21474836510;
         const Sb7vQ_srt+424;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.216828646 UTC

[section ""data" . GHC.IO.Handle.Text.$wbufWrite_closure" {
     GHC.IO.Handle.Text.$wbufWrite_closure:
         const GHC.IO.Handle.Text.$wbufWrite_info;
         const 0;
 },
 GHC.IO.Handle.Text.$wbufWrite_slow() //  [R1]
         { []
         }
     {offset
       cbbnL: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.IO.Handle.Text.$wbufWrite_entry(R5,
                                                    R4,
                                                    R3,
                                                    R2,
                                                    R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ubbqM_srtd" {
     ubbqM_srtd:
         const Sb7vQ_srt+56;
         const 54;
         const 17451452851027969;
 },
 GHC.IO.Handle.Text.$wbufWrite_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cbbnS: // global
           if ((Sp + -112) < SpLim) (likely: False) goto cbbo0; else goto ubbqy;
       cbbo0: // global
           R1 = GHC.IO.Handle.Text.$wbufWrite_closure;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       ubbqy: // global
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call _cbbnM() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.$wbufWrite_info" {
     GHC.IO.Handle.Text.$wbufWrite_info:
         const GHC.IO.Handle.Text.$wbufWrite_entry;
         const 0;
         const 18446744069414584334;
         const 21474836480;
         const ubbqM_srtd;
         const 260;
         const GHC.IO.Handle.Text.$wbufWrite_slow;
 },
 _cbbnM() //  []
         { []
         }
     {offset
       cbbnM: // global
           _sb7lW::P64 = P64[Sp];
           I64[Sp] = block_cbbnP_info;
           R1 = _sb7lW::P64;
           if (R1 & 7 != 0) goto ubbqC; else goto cbbnQ;
       ubbqC: // global
           call _cbbnP(R1) args: 0, res: 0, upd: 0;
       cbbnQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . ubbqN_srtd" {
     ubbqN_srtd:
         const Sb7vQ_srt+56;
         const 54;
         const 15199653037342721;
 },
 _cbbnP() //  [R1]
         { []
         }
     {offset
       cbbnP: // global
           I64[Sp - 32] = block_cbbnV_info;
           _sb7m1::P64 = R1;
           _sb7m3::P64 = P64[R1 + 15];
           _sb7m4::P64 = P64[R1 + 23];
           _sb7m7::P64 = P64[R1 + 47];
           R1 = P64[R1 + 31];
           P64[Sp - 24] = _sb7m3::P64;
           P64[Sp - 16] = _sb7m4::P64;
           P64[Sp - 8] = _sb7m7::P64;
           P64[Sp] = _sb7m1::P64;
           Sp = Sp - 32;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbnP_info" {
     block_cbbnP_info:
         const _cbbnP;
         const 131;
         const 18446744069414584350;
         const ubbqN_srtd;
 },
 section ""relreadonly" . ubbqO_srtd" {
     ubbqO_srtd:
         const Sb7vQ_srt+56;
         const 54;
         const 15199653037342721;
 },
 _cbbnV() //  [R1]
         { []
         }
     {offset
       cbbnV: // global
           _sb7mn::P64 = P64[P64[Sp + 24] + 8];
           I64[Sp - 24] = block_cbbnZ_info;
           _sb7mi::P64 = R1;
           _sb7mj::I64 = I64[R1 + 7];
           _sb7mk::I64 = I64[R1 + 15];
           R1 = _sb7mn::P64;
           I64[Sp - 16] = _sb7mj::I64;
           I64[Sp - 8] = _sb7mk::I64;
           P64[Sp] = _sb7mi::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubbqE; else goto cbbo4;
       ubbqE: // global
           call _cbbnZ(R1) args: 0, res: 0, upd: 0;
       cbbo4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbnV_info" {
     block_cbbnV_info:
         const _cbbnV;
         const 2055;
         const 18446744069414584350;
         const ubbqO_srtd;
 },
 section ""relreadonly" . ubbqP_srtd" {
     ubbqP_srtd:
         const Sb7vQ_srt+56;
         const 54;
         const 15199653037342721;
 },
 _cbbnZ() //  [R1]
         { []
         }
     {offset
       cbbnZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbboa; else goto cbbo9;
       cbboa: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbbo9: // global
           _sb7mq::P64 = P64[R1 + 7];
           _sb7mr::P64 = P64[R1 + 15];
           _sb7mp::I64 = I64[R1 + 23];
           _sb7ms::I64 = I64[R1 + 31];
           _sb7mt::I64 = I64[R1 + 39];
           _sb7mu::I64 = I64[R1 + 47];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           _sb7lY::I64 = I64[Sp + 72];
           I64[Hp] = _sb7lY::I64;
           _sb7m3::P64 = P64[Sp + 32];
           _sb7mi::P64 = P64[Sp + 24];
           _sb7mo::P64 = R1;
           _cbbob::P64 = Hp - 7;
           if (%MO_S_Ge_W64(_sb7lY::I64,
                            _sb7ms::I64)) goto sb7mw; else goto cbbqh;
       cbbqh: // global
           if (%MO_S_Gt_W64(_sb7lY::I64,
                            _sb7ms::I64 - _sb7mu::I64)) goto sb7mw; else goto cbbpH;
       sb7mw: // global
           if (%MO_S_Le_W64(_sb7mu::I64, 0)) goto ubbqz; else goto cbbpo;
       ubbqz: // global
           I64[Sp + 32] = _sb7ms::I64;
           P64[Sp + 48] = _cbbob::P64;
           Sp = Sp + 8;
           call _sb7mx() args: 0, res: 0, upd: 0;
       cbbpo: // global
           I64[Sp] = block_cbbpn_info;
           R2 = _sb7m3::P64;
           I64[Sp - 24] = stg_ap_ppv_info;
           P64[Sp - 16] = _sb7mi::P64;
           P64[Sp - 8] = _sb7mo::P64;
           I64[Sp + 24] = _sb7ms::I64;
           P64[Sp + 32] = _cbbob::P64;
           Sp = Sp - 24;
           call GHC.IO.BufferedIO.flushWriteBuffer_entry(R2) args: 32, res: 8, upd: 8;
       cbbpH: // global
           I64[Sp - 8] = block_cbbpG_info;
           R1 = P64[Sp + 64];
           I64[Sp] = _sb7mu::I64;
           I64[Sp + 8] = _sb7mt::I64;
           I64[Sp + 16] = _sb7ms::I64;
           P64[Sp + 40] = _sb7mr::P64;
           P64[Sp + 56] = _sb7mq::P64;
           I64[Sp + 64] = _sb7mp::I64;
           P64[Sp + 80] = _cbbob::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubbqF; else goto cbbpI;
       ubbqF: // global
           call _cbbpG(R1) args: 0, res: 0, upd: 0;
       cbbpI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbnZ_info" {
     block_cbbnZ_info:
         const _cbbnZ;
         const 16586;
         const 18446744069414584350;
         const ubbqP_srtd;
 },
 section ""relreadonly" . ubbqQ_srtd" {
     ubbqQ_srtd:
         const Sb7vQ_srt+56;
         const 54;
         const 15199653037342721;
 },
 _cbbpn() //  [R1]
         { []
         }
     {offset
       cbbpn: // global
           _cbbob::P64 = P64[Sp + 32];
           _sb7m7::P64 = P64[Sp + 48];
           _sb7ms::I64 = I64[Sp + 24];
           call MO_WriteBarrier();
           P64[_sb7m7::P64 + 8] = R1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb7m7::P64);
           P64[Sp + 48] = _cbbob::P64;
           I64[Sp + 32] = _sb7ms::I64;
           Sp = Sp + 8;
           call _sb7mx() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbbpn_info" {
     block_cbbpn_info:
         const _cbbpn;
         const 16842;
         const 18446744069414584350;
         const ubbqQ_srtd;
 },
 _sb7mx() //  []
         { []
         }
     {offset
       sb7mx: // global
           _sb7lY::I64 = I64[Sp + 64];
           _sb7lZ::P64 = P64[Sp + 72];
           if (%MO_S_Ge_W64(_sb7lY::I64,
                            I64[Sp + 24])) goto cbbot; else goto cbbpg;
       cbbot: // global
           I64[Sp - 8] = block_cbbor_info;
           R1 = _sb7lZ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubbqK; else goto cbbou;
       ubbqK: // global
           call _cbbor(R1) args: 0, res: 0, upd: 0;
       cbbou: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbbpg: // global
           P64[Sp + 48] = P64[Sp + 48];
           P64[Sp + 56] = P64[Sp + 56];
           I64[Sp + 64] = _sb7lY::I64;
           P64[Sp + 72] = _sb7lZ::P64;
           Sp = Sp + 48;
           call _cbbnM() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . ubbqR_srtd" {
     ubbqR_srtd:
         const Sb7vQ_srt+56;
         const 54;
         const 15199653037342721;
 },
 _cbbor() //  [R1]
         { []
         }
     {offset
       cbbor: // global
           _sb7m4::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto cbboB; else goto cbboW;
       cbboB: // global
           I64[Sp] = block_cbboy_info;
           R3 = lvl11_rb6WR_closure;
           R2 = _sb7m4::P64;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
       cbboW: // global
           I64[Sp] = block_cbboU_info;
           R3 = lvl11_rb6WR_closure;
           R2 = _sb7m4::P64;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbor_info" {
     block_cbbor_info:
         const _cbbor;
         const 54218;
         const 18446744069414584350;
         const ubbqR_srtd;
 },
 _cbboy() //  [R1]
         { []
         }
     {offset
       cbboy: // global
           if (R1 & 7 == 1) goto cbboH; else goto cbboM;
       cbboH: // global
           R1 = lvl30_rb6Xa_closure;
           Sp = Sp + 88;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cbboM: // global
           I64[Sp] = block_cbboK_info;
           R1 = P64[Sp + 64];
           if (R1 & 7 != 0) goto ubbqH; else goto cbboN;
       ubbqH: // global
           call _cbboK(R1) args: 0, res: 0, upd: 0;
       cbboN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbboy_info" {
     block_cbboy_info:
         const _cbboy;
         const 57290;
         const 73014444062;
         const Sb7vQ_srt+448;
 },
 _cbboK() //  [R1]
         { []
         }
     {offset
       cbboK: // global
           R5 = I64[Sp + 72];
           R4 = I64[R1 + 7];
           R3 = I64[Sp + 16];
           R2 = I64[Sp + 8];
           Sp = Sp + 88;
           call GHC.IO.FD.$w$cwriteNonBlocking_entry(R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbboK_info" {
     block_cbboK_info:
         const _cbboK;
         const 65482;
         const 4294967326;
         const Sb7vQ_srt+448;
 },
 _cbboU() //  [R1]
         { []
         }
     {offset
       cbboU: // global
           if (R1 & 7 == 1) goto cbbp2; else goto cbbpc;
       cbbp2: // global
           R1 = lvl26_rb6X6_closure;
           Sp = Sp + 88;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cbbpc: // global
           I64[Sp] = block_cbbp5_info;
           R1 = P64[Sp + 64];
           if (R1 & 7 != 0) goto ubbqI; else goto cbbp6;
       ubbqI: // global
           call _cbbp5(R1) args: 0, res: 0, upd: 0;
       cbbp6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbboU_info" {
     block_cbboU_info:
         const _cbboU;
         const 55242;
         const 21474836510;
         const Sb7vQ_srt+456;
 },
 _cbbp5() //  [R1]
         { []
         }
     {offset
       cbbp5: // global
           I64[Sp + 40] = block_cbbpa_info;
           R5 = I64[Sp + 72];
           R4 = I64[R1 + 7];
           R3 = I64[Sp + 16];
           R2 = I64[Sp + 8];
           Sp = Sp + 40;
           call GHC.IO.FD.$wfdWrite_entry(R5,
                                          R4,
                                          R3,
                                          R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbp5_info" {
     block_cbbp5_info:
         const _cbbp5;
         const 63434;
         const 4294967326;
         const Sb7vQ_srt+456;
 },
 _cbbpa() //  []
         { []
         }
     {offset
       cbbpa: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbpa_info" {
     block_cbbpa_info:
         const _cbbpa;
         const 1925;
         const 30;
 },
 _cbbpG() //  [R1]
         { []
         }
     {offset
       cbbpG: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbbpO; else goto cbbpN;
       cbbpO: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbbpN: // global
           _cbbob::P64 = P64[Sp + 88];
           _sb7lY::I64 = I64[Sp + 80];
           _sb7m3::P64 = P64[Sp + 40];
           _sb7m7::P64 = P64[Sp + 56];
           _sb7mp::I64 = I64[Sp + 72];
           _sb7mq::P64 = P64[Sp + 64];
           _sb7mr::P64 = P64[Sp + 48];
           _sb7ms::I64 = I64[Sp + 24];
           _sb7mt::I64 = I64[Sp + 16];
           _sb7mu::I64 = I64[Sp + 8];
           (_sb7n1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memcpy(_sb7mp::I64 + _sb7mu::I64, I64[R1 + 7], _sb7lY::I64);
           call MO_Touch(_sb7mq::P64);
           if (_sb7lY::I64 == _sb7ms::I64 - _sb7mu::I64) goto cbbqe; else goto cbbq6;
       cbbqe: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sb7mq::P64;
           P64[Hp - 32] = _sb7mr::P64;
           I64[Hp - 24] = _sb7mp::I64;
           I64[Hp - 16] = _sb7ms::I64;
           I64[Hp - 8] = _sb7mt::I64;
           I64[Hp] = _sb7mu::I64 + _sb7lY::I64;
           I64[Sp + 48] = block_cbbqd_info;
           R2 = _sb7m3::P64;
           I64[Sp + 24] = stg_ap_ppv_info;
           P64[Sp + 40] = Hp - 47;
           Sp = Sp + 24;
           call GHC.IO.BufferedIO.flushWriteBuffer_entry(R2) args: 32, res: 8, upd: 8;
       cbbq6: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sb7mq::P64;
           P64[Hp - 32] = _sb7mr::P64;
           I64[Hp - 24] = _sb7mp::I64;
           I64[Hp - 16] = _sb7ms::I64;
           I64[Hp - 8] = _sb7mt::I64;
           I64[Hp] = _sb7mu::I64 + _sb7lY::I64;
           call MO_WriteBarrier();
           P64[_sb7m7::P64 + 8] = Hp - 47;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb7m7::P64);
           R1 = _cbbob::P64;
           Sp = Sp + 96;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbpG_info" {
     block_cbbpG_info:
         const _cbbpG;
         const 49611;
         const 30;
 },
 _cbbqd() //  [R1]
         { []
         }
     {offset
       cbbqd: // global
           _cbbob::P64 = P64[Sp + 40];
           _sb7m7::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_sb7m7::P64 + 8] = R1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb7m7::P64);
           R1 = _cbbob::P64;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbqd_info" {
     block_cbbqd_info:
         const _cbbqd;
         const 901;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.251246265 UTC

[section ""cstring" . GHC.IO.Handle.Text.hPutBuf4_bytes" {
     GHC.IO.Handle.Text.hPutBuf4_bytes:
         I8[] [104,80,117,116,66,117,102]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.254438406 UTC

[section ""data" . GHC.IO.Handle.Text.hPutBuf3_closure" {
     GHC.IO.Handle.Text.hPutBuf3_closure:
         const GHC.IO.Handle.Text.hPutBuf3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Text.hPutBuf3_entry() //  [R1]
         { []
         }
     {offset
       cbbso: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbbsp; else goto cbbsq;
       cbbsp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbbsq: // global
           (_cbbsl::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbbsl::I64 == 0) goto cbbsn; else goto cbbsm;
       cbbsn: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbbsm: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbbsl::I64;
           R2 = GHC.IO.Handle.Text.hPutBuf4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hPutBuf3_info" {
     GHC.IO.Handle.Text.hPutBuf3_info:
         const GHC.IO.Handle.Text.hPutBuf3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.262946826 UTC

[section ""data" . GHC.IO.Handle.Text.$whPutBuf'_closure" {
     GHC.IO.Handle.Text.$whPutBuf'_closure:
         const GHC.IO.Handle.Text.$whPutBuf'_info;
         const 0;
 },
 GHC.IO.Handle.Text.$whPutBuf'_slow() //  [R1]
         { []
         }
     {offset
       cbbsz: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.IO.Handle.Text.$whPutBuf'_entry(R5,
                                                    R4,
                                                    R3,
                                                    R2,
                                                    R1) args: 8, res: 0, upd: 8;
     }
 },
 act_sb7nl_entry() //  [R1, R2]
         { []
         }
     {offset
       cbbsQ: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cbbsR; else goto cbbsS;
       cbbsR: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbbsS: // global
           I64[Sp - 32] = block_cbbsN_info;
           _sb7nf::P64 = P64[R1 + 6];
           _sb7nh::P64 = P64[R1 + 14];
           _sb7nj::I64 = I64[R1 + 22];
           R1 = R2;
           P64[Sp - 24] = _sb7nf::P64;
           P64[Sp - 16] = _sb7nh::P64;
           I64[Sp - 8] = _sb7nj::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubbtQ; else goto cbbsO;
       ubbtQ: // global
           call _cbbsN(R1) args: 0, res: 0, upd: 0;
       cbbsO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . act_sb7nl_info" {
     act_sb7nl_info:
         const act_sb7nl_entry;
         const 4294967298;
         const 4294967304;
         const 8589934597;
         const Sb7vQ_srt+464;
 },
 _cbbsN() //  [R1]
         { []
         }
     {offset
       cbbsN: // global
           I64[Sp - 8] = block_cbbsV_info;
           R5 = P64[Sp + 16];
           R4 = I64[Sp + 24];
           R3 = P64[Sp + 8];
           R2 = R1;
           P64[Sp] = P64[R1 + 55];
           P64[Sp + 8] = P64[R1 + 47];
           P64[Sp + 16] = P64[R1 + 31];
           P64[Sp + 24] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.IO.Handle.Text.$wbufWrite_entry(R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbsN_info" {
     block_cbbsN_info:
         const _cbbsN;
         const 259;
         const 4294967326;
         const Sb7vQ_srt+464;
 },
 _cbbsV() //  [R1]
         { []
         }
     {offset
       cbbsV: // global
           I64[Sp] = block_cbbsX_info;
           _sb7nH::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sb7nH::P64;
           if (R1 & 7 != 0) goto ubbtR; else goto cbbt0;
       ubbtR: // global
           call _cbbsX(R1) args: 0, res: 0, upd: 0;
       cbbt0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbsV_info" {
     block_cbbsV_info:
         const _cbbsV;
         const 4;
         const 30;
 },
 _cbbsX() //  [R1]
         { []
         }
     {offset
       cbbsX: // global
           if (R1 & 7 == 3) goto ubbtN; else goto cbbt7;
       ubbtN: // global
           Sp = Sp + 8;
           call _cbbtH() args: 0, res: 0, upd: 0;
       cbbt7: // global
           _sb7nL::P64 = P64[P64[Sp + 16] + 8];
           I64[Sp] = block_cbbt4_info;
           R1 = _sb7nL::P64;
           if (R1 & 7 != 0) goto ubbtS; else goto cbbt8;
       ubbtS: // global
           call _cbbt4(R1) args: 0, res: 0, upd: 0;
       cbbt8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbsX_info" {
     block_cbbsX_info:
         const _cbbsX;
         const 4;
         const 30;
 },
 _cbbt4() //  [R1]
         { []
         }
     {offset
       cbbt4: // global
           I64[Sp] = block_cbbtc_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto ubbtU; else goto cbbte;
       ubbtU: // global
           call _cbbtc(R1) args: 0, res: 0, upd: 0;
       cbbte: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbt4_info" {
     block_cbbt4_info:
         const _cbbt4;
         const 4;
         const 30;
 },
 _cbbtc() //  [R1]
         { []
         }
     {offset
       cbbtc: // global
           if (R1 & 7 == 1) goto ubbtO; else goto cbbtp;
       ubbtO: // global
           Sp = Sp + 8;
           call _cbbtH() args: 0, res: 0, upd: 0;
       cbbtp: // global
           _sb7nW::P64 = P64[P64[Sp + 16] + 8];
           I64[Sp] = block_cbbtn_info;
           R1 = _sb7nW::P64;
           if (R1 & 7 != 0) goto ubbtV; else goto cbbtq;
       ubbtV: // global
           call _cbbtn(R1) args: 0, res: 0, upd: 0;
       cbbtq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbtc_info" {
     block_cbbtc_info:
         const _cbbtc;
         const 4;
         const 30;
 },
 _cbbtn() //  [R1]
         { []
         }
     {offset
       cbbtn: // global
           if (I64[R1 + 39] == I64[R1 + 47]) goto ubbtP; else goto cbbtA;
       ubbtP: // global
           Sp = Sp + 8;
           call _cbbtH() args: 0, res: 0, upd: 0;
       cbbtA: // global
           I64[Sp] = block_cbbty_info;
           R2 = P64[Sp + 32];
           I64[Sp - 24] = stg_ap_ppv_info;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp - 8] = R1;
           Sp = Sp - 24;
           call GHC.IO.BufferedIO.flushWriteBuffer_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbtn_info" {
     block_cbbtn_info:
         const _cbbtn;
         const 4;
         const 30;
 },
 _cbbtH() //  []
         { []
         }
     {offset
       cbbtH: // global
           R1 = P64[Sp];
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cbbty() //  [R1]
         { []
         }
     {offset
       cbbty: // global
           _sb7nu::P64 = P64[Sp + 16];
           _sb7nH::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_sb7nu::P64 + 8] = R1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb7nu::P64);
           R1 = _sb7nH::P64;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbty_info" {
     block_cbbty_info:
         const _cbbty;
         const 772;
         const 30;
 },
 section ""relreadonly" . ubbun_srtd" {
     ubbun_srtd:
         const Sb7vQ_srt+8;
         const 62;
         const 3602879701896396803;
 },
 GHC.IO.Handle.Text.$whPutBuf'_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cbbu1: // global
           _sb7nh::P64 = R5;
           _sb7ng::I64 = R4;
           _sb7nf::P64 = R3;
           _sb7ne::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cbbu2; else goto cbbu3;
       cbbu3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbbu5; else goto cbbu4;
       cbbu5: // global
           HpAlloc = 32;
           goto cbbu2;
       cbbu2: // global
           R1 = GHC.IO.Handle.Text.$whPutBuf'_closure;
           P64[Sp - 32] = _sb7ne::P64;
           P64[Sp - 24] = _sb7nf::P64;
           I64[Sp - 16] = _sb7ng::I64;
           P64[Sp - 8] = _sb7nh::P64;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       cbbu4: // global
           if (_sb7ng::I64 == 0) goto cbbu0; else goto cbbtZ;
       cbbu0: // global
           Hp = Hp - 32;
           R1 = GHC.IO.Handle.Text.hGetBuf3_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbbtZ: // global
           if (%MO_S_Ge_W64(_sb7ng::I64, 0)) goto cbbu8; else goto cbbuk;
       cbbu8: // global
           I64[Hp - 24] = act_sb7nl_info;
           P64[Hp - 16] = _sb7nf::P64;
           P64[Hp - 8] = _sb7nh::P64;
           I64[Hp] = _sb7ng::I64;
           I64[Sp - 16] = block_cbbu6_info;
           R1 = _sb7ne::P64;
           P64[Sp - 8] = Hp - 22;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubbum; else goto cbbu9;
       ubbum: // global
           call _cbbu6(R1) args: 0, res: 0, upd: 0;
       cbbu9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbbuk: // global
           Hp = Hp - 32;
           R4 = _sb7ng::I64;
           R3 = GHC.IO.Handle.Text.hPutBuf3_closure;
           R2 = _sb7ne::P64;
           call GHC.IO.Handle.Text.$willegalBufferSize_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.$whPutBuf'_info" {
     GHC.IO.Handle.Text.$whPutBuf'_info:
         const GHC.IO.Handle.Text.$whPutBuf'_entry;
         const 0;
         const 18446744069414584334;
         const 21474836480;
         const ubbun_srtd;
         const 260;
         const GHC.IO.Handle.Text.$whPutBuf'_slow;
 },
 section ""relreadonly" . ubbuo_srtd" {
     ubbuo_srtd:
         const Sb7vQ_srt+16;
         const 61;
         const 1152921504606846977;
 },
 _cbbu6() //  [R1]
         { []
         }
     {offset
       cbbu6: // global
           _cbbsI::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cbbuf; else goto cbbuj;
       cbbuf: // global
           R5 = _cbbsI::P64;
           R4 = P64[R1 + 15];
           R3 = R1;
           R2 = GHC.IO.Handle.Text.hPutBuf3_closure;
           Sp = Sp + 16;
           call GHC.IO.Handle.Internals.$wwantWritableHandle'_entry(R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
       cbbuj: // global
           R5 = _cbbsI::P64;
           R4 = P64[R1 + 22];
           R3 = R1;
           R2 = GHC.IO.Handle.Text.hPutBuf3_closure;
           Sp = Sp + 16;
           call GHC.IO.Handle.Internals.$wwantWritableHandle'_entry(R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbu6_info" {
     block_cbbu6_info:
         const _cbbu6;
         const 1;
         const 18446744069414584350;
         const ubbuo_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.28474207 UTC

[section ""data" . GHC.IO.Handle.Text.hPutBuf2_closure" {
     GHC.IO.Handle.Text.hPutBuf2_closure:
         const GHC.IO.Handle.Text.hPutBuf2_info;
         const 0;
 },
 GHC.IO.Handle.Text.hPutBuf2_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cbbvy: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbbvz; else goto cbbvA;
       cbbvz: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hPutBuf2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbbvA: // global
           I64[Sp - 32] = block_cbbvv_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubbvE; else goto cbbvw;
       ubbvE: // global
           call _cbbvv(R1) args: 0, res: 0, upd: 0;
       cbbvw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hPutBuf2_info" {
     GHC.IO.Handle.Text.hPutBuf2_info:
         const GHC.IO.Handle.Text.hPutBuf2_entry;
         const 0;
         const 21474836494;
         const 21474836504;
         const Sb7vQ_srt+488;
 },
 _cbbvv() //  [R1]
         { []
         }
     {offset
       cbbvv: // global
           R5 = P64[Sp + 24];
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call GHC.IO.Handle.Text.$whPutBuf'_entry(R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbvv_info" {
     block_cbbvv_info:
         const _cbbvv;
         const 3;
         const 4294967326;
         const Sb7vQ_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.290554775 UTC

[section ""data" . GHC.IO.Handle.Text.hPutBufNonBlocking1_closure" {
     GHC.IO.Handle.Text.hPutBufNonBlocking1_closure:
         const GHC.IO.Handle.Text.hPutBufNonBlocking1_info;
         const 0;
 },
 GHC.IO.Handle.Text.hPutBufNonBlocking1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbbvV: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbbvW; else goto cbbvX;
       cbbvW: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hPutBufNonBlocking1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbbvX: // global
           I64[Sp - 24] = block_cbbvS_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubbw1; else goto cbbvT;
       ubbw1: // global
           call _cbbvS(R1) args: 0, res: 0, upd: 0;
       cbbvT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hPutBufNonBlocking1_info" {
     GHC.IO.Handle.Text.hPutBufNonBlocking1_info:
         const GHC.IO.Handle.Text.hPutBufNonBlocking1_entry;
         const 0;
         const 38654705678;
         const 17179869207;
         const Sb7vQ_srt+488;
 },
 _cbbvS() //  [R1]
         { []
         }
     {offset
       cbbvS: // global
           R5 = GHC.Types.False_closure+1;
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.IO.Handle.Text.$whPutBuf'_entry(R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbvS_info" {
     block_cbbvS_info:
         const _cbbvS;
         const 2;
         const 4294967326;
         const Sb7vQ_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.296180793 UTC

[section ""data" . GHC.IO.Handle.Text.hPutBufNonBlocking_closure" {
     GHC.IO.Handle.Text.hPutBufNonBlocking_closure:
         const GHC.IO.Handle.Text.hPutBufNonBlocking_info;
         const 0;
 },
 GHC.IO.Handle.Text.hPutBufNonBlocking_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbbwf: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.Text.hPutBufNonBlocking1_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hPutBufNonBlocking_info" {
     GHC.IO.Handle.Text.hPutBufNonBlocking_info:
         const GHC.IO.Handle.Text.hPutBufNonBlocking_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const Sb7vQ_srt+512;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.300160088 UTC

[section ""data" . GHC.IO.Handle.Text.hPutBuf1_closure" {
     GHC.IO.Handle.Text.hPutBuf1_closure:
         const GHC.IO.Handle.Text.hPutBuf1_info;
         const 0;
 },
 GHC.IO.Handle.Text.hPutBuf1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbbwt: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbbwx; else goto cbbwy;
       cbbwx: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hPutBuf1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbbwy: // global
           I64[Sp - 24] = block_cbbwq_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubbwC; else goto cbbwr;
       ubbwC: // global
           call _cbbwq(R1) args: 0, res: 0, upd: 0;
       cbbwr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hPutBuf1_info" {
     GHC.IO.Handle.Text.hPutBuf1_info:
         const GHC.IO.Handle.Text.hPutBuf1_entry;
         const 0;
         const 73014444046;
         const 17179869207;
         const Sb7vQ_srt+488;
 },
 _cbbwq() //  [R1]
         { []
         }
     {offset
       cbbwq: // global
           _sb7ou::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cbbww_info;
           R5 = GHC.Types.True_closure+2;
           R4 = I64[R1 + 7];
           R3 = _sb7ou::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.IO.Handle.Text.$whPutBuf'_entry(R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbwq_info" {
     block_cbbwq_info:
         const _cbbwq;
         const 2;
         const 4294967326;
         const Sb7vQ_srt+488;
 },
 _cbbww() //  []
         { []
         }
     {offset
       cbbww: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbww_info" {
     block_cbbww_info:
         const _cbbww;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.306950026 UTC

[section ""data" . GHC.IO.Handle.Text.hPutBuf_closure" {
     GHC.IO.Handle.Text.hPutBuf_closure:
         const GHC.IO.Handle.Text.hPutBuf_info;
         const 0;
 },
 GHC.IO.Handle.Text.hPutBuf_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbbwU: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.Text.hPutBuf1_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hPutBuf_info" {
     GHC.IO.Handle.Text.hPutBuf_info:
         const GHC.IO.Handle.Text.hPutBuf_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const Sb7vQ_srt+520;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.309989074 UTC

[section ""cstring" . lvl31_rb6Xb_bytes" {
     lvl31_rb6Xb_bytes:
         I8[] [10]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.312111195 UTC

[section ""data" . lvl32_rb6Xc_closure" {
     lvl32_rb6Xc_closure:
         const lvl32_rb6Xc_info;
         const 0;
         const 0;
         const 0;
 },
 lvl32_rb6Xc_entry() //  [R1]
         { []
         }
     {offset
       cbbx8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbbx9; else goto cbbxa;
       cbbx9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbbxa: // global
           (_cbbx5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbbx5::I64 == 0) goto cbbx7; else goto cbbx6;
       cbbx7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbbx6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbbx5::I64;
           R2 = lvl31_rb6Xb_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl32_rb6Xc_info" {
     lvl32_rb6Xc_info:
         const lvl32_rb6Xc_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.327565742 UTC

[section ""data" . GHC.IO.Handle.Text.$wwriteBlocks_closure" {
     GHC.IO.Handle.Text.$wwriteBlocks_closure:
         const GHC.IO.Handle.Text.$wwriteBlocks_info;
         const 0;
 },
 GHC.IO.Handle.Text.$wwriteBlocks_slow() //  [R1]
         { []
         }
     {offset
       cbbxj: // global
           R6 = I64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.Handle.Text.$wwriteBlocks_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2,
                                                       R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_sb7r5_entry() //  [R1]
         { []
         }
     {offset
       cbbxy: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbbxz; else goto cbbxA;
       cbbxz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbbxA: // global
           I64[Sp - 8] = block_cbbxr_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubbxH; else goto cbbxs;
       ubbxH: // global
           call _cbbxr(R1) args: 0, res: 0, upd: 0;
       cbbxs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sb7r5_info" {
     sat_sb7r5_info:
         const sat_sb7r5_entry;
         const 1;
         const 4294967312;
         const Sb7vQ_srt+528;
 },
 _cbbxr() //  [R1]
         { []
         }
     {offset
       cbbxr: // global
           if (R1 & 7 == 1) goto cbbxv; else goto cbbxw;
       cbbxv: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbbxw: // global
           R1 = lvl32_rb6Xc_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbxr_info" {
     block_cbbxr_info:
         const _cbbxr;
         const 0;
         const 4294967326;
         const Sb7vQ_srt+528;
 },
 sat_sb7pr_entry() //  [R1, R2]
         { []
         }
     {offset
       cbbxW: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cbby2; else goto cbby3;
       cbby2: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbby3: // global
           I64[Sp - 48] = block_cbbxT_info;
           _sb7oH::P64 = P64[R1 + 6];
           _sb7oO::P64 = P64[R1 + 14];
           _sb7oG::I64 = I64[R1 + 22];
           _sb7oI::I64 = I64[R1 + 30];
           _sb7oM::I64 = I64[R1 + 38];
           R1 = R2;
           I64[Sp - 40] = _sb7oG::I64;
           P64[Sp - 32] = _sb7oH::P64;
           I64[Sp - 24] = _sb7oI::I64;
           I64[Sp - 16] = _sb7oM::I64;
           P64[Sp - 8] = _sb7oO::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto ubbyo; else goto cbbxU;
       ubbyo: // global
           call _cbbxT(R1) args: 0, res: 0, upd: 0;
       cbbxU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sb7pr_info" {
     sat_sb7pr_info:
         const sat_sb7pr_entry;
         const 12884901890;
         const 8;
         const 8589934597;
 },
 _cbbxT() //  [R1]
         { []
         }
     {offset
       cbbxT: // global
           _sb7oG::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_cbbxZ_info;
           R6 = I64[Sp + 24];
           R5 = GHC.IO.Buffer.WriteBuffer_closure+2;
           R4 = P64[Sp + 16];
           R3 = _sb7oG::I64;
           R2 = R1;
           I64[Sp - 8] = 0;
           I64[Sp] = I64[Sp + 32];
           P64[Sp + 16] = P64[R1 + 79];
           P64[Sp + 32] = P64[R1 + 71];
           Sp = Sp - 8;
           call GHC.IO.Handle.Internals.$wwriteCharBuffer_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbxT_info" {
     block_cbbxT_info:
         const _cbbxT;
         const 837;
         const 30;
 },
 _cbbxZ() //  []
         { []
         }
     {offset
       cbbxZ: // global
           _sb7pd::P64 = P64[P64[Sp + 24] + 8];
           I64[Sp] = block_cbby1_info;
           R1 = _sb7pd::P64;
           if (R1 & 7 != 0) goto ubbyp; else goto cbby6;
       ubbyp: // global
           call _cbby1(R1) args: 0, res: 0, upd: 0;
       cbby6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbxZ_info" {
     block_cbbxZ_info:
         const _cbbxZ;
         const 132;
         const 30;
 },
 _cbby1() //  [R1]
         { []
         }
     {offset
       cbby1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbbyc; else goto cbbyb;
       cbbyc: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbbyb: // global
           if (I64[Sp + 16] == I64[R1 + 31]) goto cbbyh; else goto cbbyg;
       cbbyh: // global
           _sb7p1::P64 = P64[Sp + 8];
           _sb7po::P64 = P64[_sb7p1::P64 + 8];
           I64[Hp - 16] = GHC.IO.Handle.Types.BufferListCons_con_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _sb7po::P64;
           call MO_WriteBarrier();
           P64[_sb7p1::P64 + 8] = Hp - 14;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb7p1::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbbyg: // global
           Hp = Hp - 24;
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbby1_info" {
     block_cbby1_info:
         const _cbby1;
         const 388;
         const 30;
 },
 sat_sb7qq_entry() //  [R1, R2]
         { []
         }
     {offset
       cbbz8: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cbbze; else goto cbbzf;
       cbbze: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbbzf: // global
           I64[Sp - 40] = block_cbbz5_info;
           _sb7oH::P64 = P64[R1 + 6];
           _sb7oG::I64 = I64[R1 + 14];
           _sb7oI::I64 = I64[R1 + 22];
           _sb7pN::I64 = I64[R1 + 30];
           R1 = R2;
           I64[Sp - 32] = _sb7oG::I64;
           P64[Sp - 24] = _sb7oH::P64;
           I64[Sp - 16] = _sb7oI::I64;
           I64[Sp - 8] = _sb7pN::I64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubbzz; else goto cbbz6;
       ubbzz: // global
           call _cbbz5(R1) args: 0, res: 0, upd: 0;
       cbbz6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sb7qq_info" {
     sat_sb7qq_info:
         const sat_sb7qq_entry;
         const 12884901889;
         const 8;
         const 8589934597;
 },
 _cbbz5() //  [R1]
         { []
         }
     {offset
       cbbz5: // global
           _sb7oG::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_cbbzb_info;
           R6 = I64[Sp + 24];
           R5 = GHC.IO.Buffer.WriteBuffer_closure+2;
           R4 = P64[Sp + 16];
           R3 = _sb7oG::I64;
           R2 = R1;
           I64[Sp - 8] = 0;
           I64[Sp] = I64[Sp + 32];
           P64[Sp + 16] = P64[R1 + 47];
           P64[Sp + 24] = P64[R1 + 31];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.IO.Handle.Internals.$wwriteCharBuffer_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbz5_info" {
     block_cbbz5_info:
         const _cbbz5;
         const 836;
         const 30;
 },
 _cbbzb() //  []
         { []
         }
     {offset
       cbbzb: // global
           _sb7qd::P64 = P64[P64[Sp + 8] + 8];
           I64[Sp] = block_cbbzd_info;
           R1 = _sb7qd::P64;
           if (R1 & 7 != 0) goto ubbzA; else goto cbbzi;
       ubbzA: // global
           call _cbbzd(R1) args: 0, res: 0, upd: 0;
       cbbzi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbzb_info" {
     block_cbbzb_info:
         const _cbbzb;
         const 3;
         const 30;
 },
 _cbbzd() //  [R1]
         { []
         }
     {offset
       cbbzd: // global
           if (I64[R1 + 39] == I64[R1 + 47]) goto cbbzv; else goto cbbzs;
       cbbzv: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbbzs: // global
           I64[Sp] = block_cbbzq_info;
           R2 = P64[Sp + 24];
           I64[Sp - 24] = stg_ap_ppv_info;
           P64[Sp - 16] = P64[Sp + 16];
           P64[Sp - 8] = R1;
           Sp = Sp - 24;
           call GHC.IO.BufferedIO.flushWriteBuffer_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbzd_info" {
     block_cbbzd_info:
         const _cbbzd;
         const 3;
         const 30;
 },
 _cbbzq() //  [R1]
         { []
         }
     {offset
       cbbzq: // global
           _sb7pX::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_sb7pX::P64 + 8] = R1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb7pX::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbzq_info" {
     block_cbbzq_info:
         const _cbbzq;
         const 387;
         const 30;
 },
 sat_sb7r0_entry() //  [R1, R2]
         { []
         }
     {offset
       cbbzK: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbbzO; else goto cbbzP;
       cbbzO: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbbzP: // global
           I64[Sp - 40] = block_cbbzH_info;
           _sb7oH::P64 = P64[R1 + 6];
           _sb7oG::I64 = I64[R1 + 14];
           _sb7oI::I64 = I64[R1 + 22];
           _sb7pt::I64 = I64[R1 + 30];
           R1 = R2;
           I64[Sp - 32] = _sb7oG::I64;
           P64[Sp - 24] = _sb7oH::P64;
           I64[Sp - 16] = _sb7oI::I64;
           I64[Sp - 8] = _sb7pt::I64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubbzT; else goto cbbzI;
       ubbzT: // global
           call _cbbzH(R1) args: 0, res: 0, upd: 0;
       cbbzI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sb7r0_info" {
     sat_sb7r0_info:
         const sat_sb7r0_entry;
         const 12884901889;
         const 8;
         const 8589934597;
 },
 _cbbzH() //  [R1]
         { []
         }
     {offset
       cbbzH: // global
           _sb7pt::I64 = I64[Sp + 32];
           I64[Sp + 32] = block_cbbzN_info;
           R6 = I64[Sp + 24];
           R5 = GHC.IO.Buffer.WriteBuffer_closure+2;
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = R1;
           I64[Sp + 16] = 0;
           I64[Sp + 24] = _sb7pt::I64;
           Sp = Sp + 16;
           call GHC.IO.Handle.Internals.$wwriteCharBuffer_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbzH_info" {
     block_cbbzH_info:
         const _cbbzH;
         const 836;
         const 30;
 },
 _cbbzN() //  []
         { []
         }
     {offset
       cbbzN: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbzN_info" {
     block_cbbzN_info:
         const _cbbzN;
         const 0;
         const 30;
 },
 GHC.IO.Handle.Text.$wwriteBlocks_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cbbzU: // global
           _sb7oG::I64 = R6;
           _sb7oF::P64 = R5;
           _sb7oE::P64 = R4;
           _sb7oD::P64 = R3;
           _sb7oC::P64 = R2;
           if ((Sp + -56) < SpLim) (likely: False) goto cbbzV; else goto cbbzW;
       cbbzW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbbzY; else goto cbbzX;
       cbbzY: // global
           HpAlloc = 24;
           goto cbbzV;
       cbbzV: // global
           R1 = GHC.IO.Handle.Text.$wwriteBlocks_closure;
           P64[Sp - 40] = _sb7oC::P64;
           P64[Sp - 32] = _sb7oD::P64;
           P64[Sp - 24] = _sb7oE::P64;
           P64[Sp - 16] = _sb7oF::P64;
           I64[Sp - 8] = _sb7oG::I64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       cbbzX: // global
           I64[Hp - 16] = sat_sb7r5_info;
           P64[Hp] = _sb7oE::P64;
           P64[Sp - 48] = _sb7oD::P64;
           P64[Sp - 40] = _sb7oF::P64;
           I64[Sp - 32] = _sb7oG::I64;
           I64[Sp - 24] = 0;
           P64[Sp - 16] = P64[Sp + 16];
           P64[Sp - 8] = Hp - 16;
           P64[Sp + 16] = _sb7oC::P64;
           Sp = Sp - 48;
           call _cbbys() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.$wwriteBlocks_info" {
     GHC.IO.Handle.Text.$wwriteBlocks_info:
         const GHC.IO.Handle.Text.$wwriteBlocks_entry;
         const 0;
         const 64424509454;
         const 38654705664;
         const Sb7vQ_srt+528;
         const 5128;
         const GHC.IO.Handle.Text.$wwriteBlocks_slow;
 },
 _cbbys() //  []
         { []
         }
     {offset
       cbbys: // global
           I64[Sp - 8] = block_cbbyv_info;
           R1 = P64[Sp + 32];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubbBi; else goto cbbyw;
       ubbBi: // global
           call _cbbyv(R1) args: 0, res: 0, upd: 0;
       cbbyw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbbyv() //  [R1]
         { []
         }
     {offset
       cbbyv: // global
           if (R1 & 7 == 1) goto cbbA7; else goto cbbAj;
       cbbA7: // global
           I64[Sp] = block_cbbA4_info;
           R1 = P64[Sp + 48];
           if (R1 & 7 != 0) goto ubbBj; else goto cbbA8;
       ubbBj: // global
           call _cbbA4(R1) args: 0, res: 0, upd: 0;
       cbbA8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbbAj: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbbAm; else goto cbbAl;
       cbbAm: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbbAl: // global
           _sb7oI::I64 = I64[Sp + 64];
           _sb7pt::I64 = I64[Sp + 32];
           if (%MO_S_Lt_W64(_sb7pt::I64 + 1,
                            _sb7oI::I64)) goto cbbAo; else goto cbbAS;
       cbbAo: // global
           _sb7pB::P64 = P64[R1 + 6];
           _sb7pC::P64 = P64[R1 + 14];
           Hp = Hp - 40;
           I64[Sp] = block_cbbyH_info;
           R1 = _sb7pB::P64;
           P64[Sp + 40] = _sb7pC::P64;
           if (R1 & 7 != 0) goto ubbBk; else goto cbbyI;
       ubbBk: // global
           call _cbbyH(R1) args: 0, res: 0, upd: 0;
       cbbyI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbbAS: // global
           I64[Hp - 32] = sat_sb7r0_info;
           P64[Hp - 24] = P64[Sp + 56];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = _sb7oI::I64;
           I64[Hp] = _sb7pt::I64;
           I64[Sp] = block_cbbAR_info;
           R4 = Hp - 30;
           R3 = P64[Sp + 72];
           R2 = lvl2_rb6WE_closure;
           P64[Sp + 40] = R1;
           call GHC.IO.Handle.Internals.wantWritableHandle1_entry(R4,
                                                                  R3,
                                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbyv_info" {
     block_cbbyv_info:
         const _cbbyv;
         const 9993;
         const 21474836510;
         const Sb7vQ_srt+536;
 },
 _cbbA4() //  [R1]
         { []
         }
     {offset
       cbbA4: // global
           _sb7pt::I64 = I64[Sp + 32];
           if (R1 & 7 == 1) goto cbbAe; else goto cbbAi;
       cbbAe: // global
           I64[Sp + 48] = _sb7pt::I64;
           Sp = Sp + 24;
           call _cbbxL() args: 0, res: 0, upd: 0;
       cbbAi: // global
           I64[Sp + 32] = _sb7pt::I64;
           P64[Sp + 40] = R1;
           P64[Sp + 48] = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call _cbbys() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbbA4_info" {
     block_cbbA4_info:
         const _cbbA4;
         const 12041;
         const 21474836510;
         const Sb7vQ_srt+536;
 },
 _cbbxL() //  []
         { []
         }
     {offset
       cbbxL: // global
           Hp = Hp + 72;
           _sb7oM::I64 = I64[Sp + 24];
           if (Hp > HpLim) (likely: False) goto cbbA1; else goto cbbA0;
       cbbA1: // global
           HpAlloc = 72;
           I64[Sp - 8] = block_cbbxK_info;
           R1 = _sb7oM::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbbA0: // global
           I64[Hp - 64] = GHC.ForeignPtr.ForeignPtr_con_info;
           _sb7oH::P64 = P64[Sp + 32];
           P64[Hp - 56] = _sb7oH::P64;
           _sb7oG::I64 = I64[Sp];
           I64[Hp - 48] = _sb7oG::I64;
           I64[Hp - 40] = sat_sb7pr_info;
           P64[Hp - 32] = _sb7oH::P64;
           P64[Hp - 24] = Hp - 63;
           I64[Hp - 16] = _sb7oG::I64;
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = _sb7oM::I64;
           R4 = Hp - 38;
           R3 = P64[Sp + 48];
           R2 = lvl2_rb6WE_closure;
           Sp = Sp + 56;
           call GHC.IO.Handle.Internals.wantWritableHandle1_entry(R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 _cbbxK() //  [R1]
         { []
         }
     {offset
       cbbxK: // global
           I64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _cbbxL() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbbxK_info" {
     block_cbbxK_info:
         const _cbbxK;
         const 3015;
         const 21474836510;
         const Sb7vQ_srt+536;
 },
 _cbbyH() //  [R1]
         { []
         }
     {offset
       cbbyH: // global
           _sb7pH::I64 = I64[R1 + 7];
           if (_sb7pH::I64 != 10) goto cbbAr; else goto cbbAF;
       cbbAr: // global
           _sb7oH::P64 = P64[Sp + 56];
           _sb7pt::I64 = I64[Sp + 32];
           _sb7pv::P64 = P64[Sp + 48];
           _sb7pC::P64 = P64[Sp + 40];
           I32[I64[Sp + 24] + (_sb7pt::I64 << 2)] = %MO_UU_Conv_W64_W32(_sb7pH::I64);
           call MO_Touch(_sb7oH::P64);
           I64[Sp + 32] = _sb7pt::I64 + 1;
           P64[Sp + 40] = _sb7pC::P64;
           P64[Sp + 48] = _sb7pv::P64;
           Sp = Sp + 8;
           call _cbbys() args: 0, res: 0, upd: 0;
       cbbAF: // global
           I64[Sp] = block_cbbAs_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto ubbBl; else goto cbbAG;
       ubbBl: // global
           call _cbbAs(R1) args: 0, res: 0, upd: 0;
       cbbAG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbyH_info" {
     block_cbbyH_info:
         const _cbbyH;
         const 8969;
         const 21474836510;
         const Sb7vQ_srt+536;
 },
 _cbbAs() //  [R1]
         { []
         }
     {offset
       cbbAs: // global
           _sb7oD::P64 = P64[Sp + 8];
           _sb7oG::I64 = I64[Sp + 24];
           _sb7oH::P64 = P64[Sp + 56];
           _sb7pt::I64 = I64[Sp + 32];
           if (R1 & 7 == 1) goto cbbAM; else goto cbbAQ;
       cbbAM: // global
           I32[_sb7oG::I64 + (_sb7pt::I64 << 2)] = 10 :: W32;
           call MO_Touch(_sb7oH::P64);
           _sb7pN::I64 = _sb7pt::I64 + 1;
           goto sb7pL;
       cbbAQ: // global
           I32[_sb7oG::I64 + (_sb7pt::I64 << 2)] = 13 :: W32;
           call MO_Touch(_sb7oH::P64);
           _sb7qA::I64 = _sb7pt::I64 + 1;
           I32[_sb7oG::I64 + (_sb7qA::I64 << 2)] = 10 :: W32;
           call MO_Touch(_sb7oH::P64);
           _sb7pN::I64 = _sb7qA::I64 + 1;
           goto sb7pL;
       sb7pL: // global
           I64[Sp] = block_cbbyU_info;
           R1 = _sb7oD::P64;
           I64[Sp + 32] = _sb7pN::I64;
           if (R1 & 7 != 0) goto ubbBr; else goto cbbyV;
       ubbBr: // global
           call _cbbyU(R1) args: 0, res: 0, upd: 0;
       cbbyV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbAs_info" {
     block_cbbAs_info:
         const _cbbAs;
         const 8969;
         const 21474836510;
         const Sb7vQ_srt+536;
 },
 _cbbyU() //  [R1]
         { []
         }
     {offset
       cbbyU: // global
           _sb7pN::I64 = I64[Sp + 32];
           if (R1 & 7 == 1) goto cbbAx; else goto cbbAz;
       cbbAx: // global
           I64[Sp + 32] = _sb7pN::I64;
           P64[Sp + 40] = P64[Sp + 40];
           P64[Sp + 48] = P64[Sp + 48];
           Sp = Sp + 8;
           call _cbbys() args: 0, res: 0, upd: 0;
       cbbAz: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbbAC; else goto cbbAB;
       cbbAC: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbbAB: // global
           I64[Hp - 32] = sat_sb7qq_info;
           P64[Hp - 24] = P64[Sp + 56];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 64];
           I64[Hp] = _sb7pN::I64;
           I64[Sp] = block_cbbAy_info;
           R4 = Hp - 30;
           R3 = P64[Sp + 72];
           R2 = lvl2_rb6WE_closure;
           call GHC.IO.Handle.Internals.wantWritableHandle1_entry(R4,
                                                                  R3,
                                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbyU_info" {
     block_cbbyU_info:
         const _cbbyU;
         const 8969;
         const 21474836510;
         const Sb7vQ_srt+536;
 },
 _cbbAy() //  []
         { []
         }
     {offset
       cbbAy: // global
           I64[Sp + 32] = 0;
           P64[Sp + 40] = P64[Sp + 40];
           P64[Sp + 48] = P64[Sp + 48];
           Sp = Sp + 8;
           call _cbbys() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbbAy_info" {
     block_cbbAy_info:
         const _cbbAy;
         const 8969;
         const 21474836510;
         const Sb7vQ_srt+536;
 },
 _cbbAR() //  []
         { []
         }
     {offset
       cbbAR: // global
           I64[Sp + 32] = 0;
           P64[Sp + 40] = P64[Sp + 40];
           P64[Sp + 48] = P64[Sp + 48];
           Sp = Sp + 8;
           call _cbbys() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbbAR_info" {
     block_cbbAR_info:
         const _cbbAR;
         const 8969;
         const 21474836510;
         const Sb7vQ_srt+536;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.373310521 UTC

[section ""cstring" . lvl33_rb6Xd_bytes" {
     lvl33_rb6Xd_bytes:
         I8[] [110,111,32,98,117,102,102,101,114,33]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.376405495 UTC

[section ""data" . GHC.IO.Handle.Text.hPutStr4_closure" {
     GHC.IO.Handle.Text.hPutStr4_closure:
         const GHC.IO.Handle.Text.hPutStr4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Text.hPutStr4_entry() //  [R1]
         { []
         }
     {offset
       cbbDW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbbDX; else goto cbbDY;
       cbbDX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbbDY: // global
           (_cbbDR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbbDR::I64 == 0) goto cbbDT; else goto cbbDS;
       cbbDT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbbDS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbbDR::I64;
           I64[Sp - 24] = block_cbbDU_info;
           R2 = lvl33_rb6Xd_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hPutStr4_info" {
     GHC.IO.Handle.Text.hPutStr4_info:
         const GHC.IO.Handle.Text.hPutStr4_entry;
         const 0;
         const 4294967317;
         const Sb7vQ_srt+560;
 },
 _cbbDU() //  [R1]
         { []
         }
     {offset
       cbbDU: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbbDU_info" {
     block_cbbDU_info:
         const _cbbDU;
         const 0;
         const 4294967326;
         const Sb7vQ_srt+560;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.381457167 UTC

[section ""data" . GHC.IO.Handle.Text.hPutStr3_closure" {
     GHC.IO.Handle.Text.hPutStr3_closure:
         const (,)_con_info;
         const GHC.IO.Handle.Types.NoBuffering_closure+1;
         const GHC.IO.Handle.Text.hPutStr4_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.388233862 UTC

[section ""data" . GHC.IO.Handle.Text.hPutStr2_closure" {
     GHC.IO.Handle.Text.hPutStr2_closure:
         const GHC.IO.Handle.Text.hPutStr2_info;
         const 0;
 },
 sat_sb7s6_entry() //  [R1]
         { []
         }
     {offset
       cbbEH: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbbEQ; else goto cbbER;
       cbbEQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbbER: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbbEE_info;
           _sb7rw::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sb7rw::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubbEX; else goto cbbEF;
       ubbEX: // global
           call _cbbEE(R1) args: 0, res: 0, upd: 0;
       cbbEF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sb7s6_info" {
     sat_sb7s6_info:
         const sat_sb7s6_entry;
         const 2;
         const 18;
 },
 _cbbEE() //  [R1]
         { []
         }
     {offset
       cbbEE: // global
           I64[Sp - 8] = block_cbbEK_info;
           _sb7rY::P64 = P64[R1 + 7];
           _sb7rX::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _sb7rY::P64;
           I64[Sp + 8] = _sb7rX::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubbEW; else goto cbbEL;
       ubbEW: // global
           call _cbbEK(R1) args: 0, res: 0, upd: 0;
       cbbEL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cbbEE_info" {
     block_cbbEE_info:
         const _cbbEE;
         const 1;
         const 30;
 },
 _cbbEK() //  [R1]
         { []
         }
     {offset
       cbbEK: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbbEV; else goto cbbEU;
       cbbEV: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbbEU: // global
           _sb7s3::I64 = I64[R1 + 31];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = GHC.IO.Buffer.WriteBuffer_closure+2;
           I64[Hp - 24] = I64[Sp + 16];
           I64[Hp - 16] = _sb7s3::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbbEK_info" {
     block_cbbEK_info:
         const _cbbEK;
         const 130;
         const 30;
 },
 GHC.IO.Handle.Text.hPutStr2_entry() //  [R2]
         { []
         }
     {offset
       cbbEY: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbbEZ; else goto cbbF0;
       cbbEZ: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hPutStr2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbbF0: // global
           I64[Sp - 8] = block_cbbEh_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubbFV; else goto cbbEi;
       ubbFV: // global
           call _cbbEh(R1) args: 0, res: 0, upd: 0;
       cbbEi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hPutStr2_info" {
     GHC.IO.Handle.Text.hPutStr2_info:
         const GHC.IO.Handle.Text.hPutStr2_entry;
         const 0;
         const 30064771086;
         const 8589934597;
         const Sb7vQ_srt+568;
 },
 _cbbEh() //  [R1]
         { []
         }
     {offset
       cbbEh: // global
           I64[Sp - 24] = block_cbbEm_info;
           _sb7ri::P64 = P64[R1 + 71];
           _sb7rj::P64 = P64[R1 + 79];
           _sb7ro::P64 = P64[R1 + 119];
           R1 = P64[R1 + 55];
           P64[Sp - 16] = _sb7rj::P64;
           P64[Sp - 8] = _sb7ro::P64;
           P64[Sp] = _sb7ri::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubbFS; else goto cbbEn;
       ubbFS: // global
           call _cbbEm(R1) args: 0, res: 0, upd: 0;
       cbbEn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbEh_info" {
     block_cbbEh_info:
         const _cbbEh;
         const 0;
         const 21474836510;
         const Sb7vQ_srt+568;
 },
 _cbbEm() //  [R1]
         { []
         }
     {offset
       cbbEm: // global
           if (R1 & 7 == 1) goto cbbFM; else goto cbbF4;
       cbbFM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbbFP; else goto cbbFO;
       cbbFP: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbbFO: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = GHC.IO.Handle.Text.hPutStr3_closure+1;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbbF4: // global
           _sb7rt::P64 = P64[P64[Sp + 8] + 8];
           _sb7rw::P64 = P64[P64[Sp + 24] + 8];
           I64[Sp - 8] = block_cbbEr_info;
           _sb7rq::P64 = R1;
           R1 = _sb7rt::P64;
           P64[Sp] = _sb7rw::P64;
           P64[Sp + 24] = _sb7rq::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubbFT; else goto cbbEs;
       ubbFT: // global
           call _cbbEr(R1) args: 0, res: 0, upd: 0;
       cbbEs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbEm_info" {
     block_cbbEm_info:
         const _cbbEm;
         const 3;
         const 21474836510;
         const Sb7vQ_srt+568;
 },
 _cbbEr() //  [R1]
         { []
         }
     {offset
       cbbEr: // global
           _sb7rw::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cbbF9; else goto cbbFF;
       cbbF9: // global
           I64[Sp + 16] = block_cbbF6_info;
           R1 = _sb7rw::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto ubbFU; else goto cbbFa;
       ubbFU: // global
           call _cbbF6(R1) args: 0, res: 0, upd: 0;
       cbbFa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbbFF: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cbbFI; else goto cbbFH;
       cbbFI: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbbFH: // global
           _sb7rj::P64 = P64[Sp + 16];
           _sb7ro::P64 = P64[Sp + 24];
           _sb7rq::P64 = P64[Sp + 32];
           _sb7rT::P64 = P64[R1 + 6];
           _sb7rU::P64 = P64[R1 + 14];
           call MO_WriteBarrier();
           P64[_sb7rj::P64 + 8] = _sb7rU::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb7rj::P64);
           I64[Hp - 72] = sat_sb7s6_info;
           P64[Hp - 56] = _sb7rw::P64;
           P64[Hp - 48] = _sb7rT::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _sb7rq::P64;
           P64[Hp - 24] = Hp - 72;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = _sb7ro::P64;
           R1 = Hp - 15;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbEr_info" {
     block_cbbEr_info:
         const _cbbEr;
         const 4;
         const 4294967326;
         const Sb7vQ_srt+568;
 },
 _cbbF6() //  [R1]
         { []
         }
     {offset
       cbbF6: // global
           _sb7rC::I64 = I64[R1 + 31];
           _sb7rF::I64 = _sb7rC::I64 << 2;
           if (%MO_S_Ge_W64(_sb7rF::I64, 0)) goto cbbFx; else goto cbbFC;
       cbbFx: // global
           I64[Sp - 16] = block_cbbFl_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp - 8] = _sb7rF::I64;
           I64[Sp] = _sb7rC::I64;
           Sp = Sp - 16;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       cbbFC: // global
           R1 = GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbF6_info" {
     block_cbbF6_info:
         const _cbbF6;
         const 2;
         const 4294967326;
         const Sb7vQ_srt+568;
 },
 _cbbFl() //  [R1]
         { []
         }
     {offset
       cbbFl: // global
           I64[Sp] = block_cbbFn_info;
           _sb7rJ::P64 = R1;
           R1 = I64[Sp + 8];
           P64[Sp + 8] = _sb7rJ::P64;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbFl_info" {
     block_cbbFl_info:
         const _cbbFl;
         const 196;
         const 30;
 },
 _cbbFn() //  [R1]
         { []
         }
     {offset
       cbbFn: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cbbFB; else goto cbbFA;
       cbbFB: // global
           HpAlloc = 128;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbbFA: // global
           I64[Hp - 120] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 112] = R1;
           P64[Hp - 104] = P64[Sp + 8];
           I64[Hp - 96] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 88] = Hp - 118;
           P64[Hp - 80] = GHC.IO.Buffer.WriteBuffer_closure+2;
           P64[Hp - 72] = R1 + 16;
           I64[Hp - 64] = I64[Sp + 16];
           I64[Hp - 56] = 0;
           I64[Hp - 48] = 0;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = Hp - 95;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 15;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbFn_info" {
     block_cbbFn_info:
         const _cbbFn;
         const 132;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.407873843 UTC

[section ""cstring" . GHC.IO.Handle.Text.hPutStr6_bytes" {
     GHC.IO.Handle.Text.hPutStr6_bytes:
         I8[] [104,80,117,116,83,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.410497849 UTC

[section ""data" . GHC.IO.Handle.Text.hPutStr5_closure" {
     GHC.IO.Handle.Text.hPutStr5_closure:
         const GHC.IO.Handle.Text.hPutStr5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Text.hPutStr5_entry() //  [R1]
         { []
         }
     {offset
       cbbH4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbbH5; else goto cbbH6;
       cbbH5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbbH6: // global
           (_cbbH1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbbH1::I64 == 0) goto cbbH3; else goto cbbH2;
       cbbH3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbbH2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbbH1::I64;
           R2 = GHC.IO.Handle.Text.hPutStr6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hPutStr5_info" {
     GHC.IO.Handle.Text.hPutStr5_info:
         const GHC.IO.Handle.Text.hPutStr5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.41881231 UTC

[section ""data" . GHC.IO.Handle.Text.hPutStr1_closure" {
     GHC.IO.Handle.Text.hPutStr1_closure:
         const GHC.IO.Handle.Text.hPutStr1_info;
         const 0;
 },
 section ""relreadonly" . ubbJ5_srtd" {
     ubbJ5_srtd:
         const Sb7vQ_srt+16;
         const 74;
         const 19;
         const 836;
 },
 GHC.IO.Handle.Text.hPutStr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbbHr: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cbbHs; else goto cbbHt;
       cbbHs: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hPutStr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbbHt: // global
           I64[Sp - 32] = block_cbbHk_info;
           R1 = R2;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubbIU; else goto cbbHl;
       ubbIU: // global
           call _cbbHk(R1) args: 0, res: 0, upd: 0;
       cbbHl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hPutStr1_info" {
     GHC.IO.Handle.Text.hPutStr1_info:
         const GHC.IO.Handle.Text.hPutStr1_entry;
         const 0;
         const 18446744069414584334;
         const 17179869207;
         const ubbJ5_srtd;
 },
 section ""relreadonly" . ubbJ6_srtd" {
     ubbJ6_srtd:
         const Sb7vQ_srt+16;
         const 74;
         const 19;
         const 580;
 },
 _cbbHk() //  [R1]
         { []
         }
     {offset
       cbbHk: // global
           if (R1 & 7 == 1) goto cbbHo; else goto cbbHp;
       cbbHo: // global
           I64[Sp] = block_cbbIh_info;
           R5 = GHC.IO.Handle.Text.hPutStr2_closure+2;
           R4 = P64[R1 + 15];
           R3 = R1;
           R2 = GHC.IO.Handle.Text.hPutStr5_closure;
           call GHC.IO.Handle.Internals.$wwantWritableHandle'_entry(R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 8, res: 8, upd: 8;
       cbbHp: // global
           I64[Sp] = block_cbbIz_info;
           R5 = GHC.IO.Handle.Text.hPutStr2_closure+2;
           R4 = P64[R1 + 22];
           R3 = R1;
           R2 = GHC.IO.Handle.Text.hPutStr5_closure;
           call GHC.IO.Handle.Internals.$wwantWritableHandle'_entry(R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbHk_info" {
     block_cbbHk_info:
         const _cbbHk;
         const 3;
         const 18446744069414584350;
         const ubbJ6_srtd;
 },
 section ""relreadonly" . ubbJ7_srtd" {
     ubbJ7_srtd:
         const Sb7vQ_srt+24;
         const 66;
         const 9;
         const 2;
 },
 _cbbIh() //  [R1]
         { []
         }
     {offset
       cbbIh: // global
           I64[Sp] = block_cbbIj_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubbIY; else goto cbbIk;
       ubbIY: // global
           call _cbbIj(R1) args: 0, res: 0, upd: 0;
       cbbIk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbIh_info" {
     block_cbbIh_info:
         const _cbbIh;
         const 3;
         const 18446744069414584350;
         const ubbJ7_srtd;
 },
 section ""relreadonly" . ubbJ8_srtd" {
     ubbJ8_srtd:
         const Sb7vQ_srt+24;
         const 66;
         const 9;
         const 2;
 },
 _cbbIj() //  [R1]
         { []
         }
     {offset
       cbbIj: // global
           I64[Sp - 8] = block_cbbIo_info;
           _sb7sL::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sb7sL::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubbIZ; else goto cbbIs;
       ubbIZ: // global
           call _cbbIo(R1) args: 0, res: 0, upd: 0;
       cbbIs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbIj_info" {
     block_cbbIj_info:
         const _cbbIj;
         const 3;
         const 18446744069414584350;
         const ubbJ8_srtd;
 },
 section ""relreadonly" . ubbJ9_srtd" {
     ubbJ9_srtd:
         const Sb7vQ_srt+24;
         const 66;
         const 9;
         const 2;
 },
 _cbbIo() //  [R1]
         { []
         }
     {offset
       cbbIo: // global
           _sb7si::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           P64[Sp - 8] = _sb7si::P64;
           Sp = Sp - 8;
           call _sb7se() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbbIo_info" {
     block_cbbIo_info:
         const _cbbIo;
         const 4;
         const 18446744069414584350;
         const ubbJ9_srtd;
 },
 section ""relreadonly" . ubbJa_srtd" {
     ubbJa_srtd:
         const Sb7vQ_srt+24;
         const 66;
         const 9;
         const 2;
 },
 _cbbIz() //  [R1]
         { []
         }
     {offset
       cbbIz: // global
           I64[Sp] = block_cbbIB_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubbJ1; else goto cbbIC;
       ubbJ1: // global
           call _cbbIB(R1) args: 0, res: 0, upd: 0;
       cbbIC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbIz_info" {
     block_cbbIz_info:
         const _cbbIz;
         const 3;
         const 18446744069414584350;
         const ubbJa_srtd;
 },
 section ""relreadonly" . ubbJb_srtd" {
     ubbJb_srtd:
         const Sb7vQ_srt+24;
         const 66;
         const 9;
         const 2;
 },
 _cbbIB() //  [R1]
         { []
         }
     {offset
       cbbIB: // global
           I64[Sp - 8] = block_cbbIG_info;
           _sb7sX::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sb7sX::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubbJ2; else goto cbbIK;
       ubbJ2: // global
           call _cbbIG(R1) args: 0, res: 0, upd: 0;
       cbbIK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbIB_info" {
     block_cbbIB_info:
         const _cbbIB;
         const 3;
         const 18446744069414584350;
         const ubbJb_srtd;
 },
 section ""relreadonly" . ubbJc_srtd" {
     ubbJc_srtd:
         const Sb7vQ_srt+24;
         const 66;
         const 9;
         const 2;
 },
 _cbbIG() //  [R1]
         { []
         }
     {offset
       cbbIG: // global
           P64[Sp - 8] = P64[Sp + 8];
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 8] = P64[R1 + 7];
           Sp = Sp - 8;
           call _sb7se() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbbIG_info" {
     block_cbbIG_info:
         const _cbbIG;
         const 4;
         const 18446744069414584350;
         const ubbJc_srtd;
 },
 _sb7se() //  []
         { []
         }
     {offset
       sb7se: // global
           I64[Sp - 8] = block_cbbHx_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubbJ4; else goto cbbHz;
       ubbJ4: // global
           call _cbbHx(R1) args: 0, res: 0, upd: 0;
       cbbHz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . ubbJd_srtd" {
     ubbJd_srtd:
         const Sb7vQ_srt+24;
         const 66;
         const 9;
         const 2;
 },
 _cbbHx() //  [R1]
         { []
         }
     {offset
       cbbHx: // global
           _sb7sh::P64 = P64[Sp + 16];
           _cbbIP::P64 = R1 & 7;
           if (_cbbIP::P64 < 3) goto ubbIR; else goto cbbI9;
       ubbIR: // global
           if (_cbbIP::P64 < 2) goto cbbHI; else goto cbbHZ;
       cbbHI: // global
           I64[Sp + 24] = block_cbbHD_info;
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 32];
           Sp = Sp + 24;
           call GHC.IO.Handle.Text.hPutStr7_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       cbbHZ: // global
           I64[Sp] = block_cbbHX_info;
           R1 = _sb7sh::P64;
           if (R1 & 7 != 0) goto ubbIV; else goto cbbI0;
       ubbIV: // global
           call _cbbHX(R1) args: 0, res: 0, upd: 0;
       cbbI0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbbI9: // global
           I64[Sp] = block_cbbI7_info;
           R1 = _sb7sh::P64;
           if (R1 & 7 != 0) goto ubbIW; else goto cbbIa;
       ubbIW: // global
           call _cbbI7(R1) args: 0, res: 0, upd: 0;
       cbbIa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbHx_info" {
     block_cbbHx_info:
         const _cbbHx;
         const 262;
         const 18446744069414584350;
         const ubbJd_srtd;
 },
 _cbbHD() //  []
         { []
         }
     {offset
       cbbHD: // global
           I64[Sp] = block_cbbHF_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto ubbIX; else goto cbbHK;
       ubbIX: // global
           call _cbbHF(R1) args: 0, res: 0, upd: 0;
       cbbHK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbHD_info" {
     block_cbbHD_info:
         const _cbbHD;
         const 131;
         const 4294967326;
         const Sb7vQ_srt+608;
 },
 _cbbHF() //  [R1]
         { []
         }
     {offset
       cbbHF: // global
           if (R1 & 7 == 1) goto cbbHQ; else goto cbbHU;
       cbbHQ: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbbHU: // global
           R3 = 10;
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call GHC.IO.Handle.Text.$whPutChar_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbHF_info" {
     block_cbbHF_info:
         const _cbbHF;
         const 387;
         const 4294967326;
         const Sb7vQ_srt+608;
 },
 _cbbHX() //  [R1]
         { []
         }
     {offset
       cbbHX: // global
           R6 = I64[R1 + 23];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 48];
           R3 = GHC.Types.True_closure+2;
           R2 = P64[Sp + 32];
           P64[Sp + 32] = P64[R1 + 7];
           _sb7sb::P64 = P64[Sp + 40];
           I64[Sp + 40] = I64[R1 + 31];
           P64[Sp + 48] = _sb7sb::P64;
           Sp = Sp + 32;
           call GHC.IO.Handle.Text.$wwriteBlocks_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbHX_info" {
     block_cbbHX_info:
         const _cbbHX;
         const 390;
         const 4294967326;
         const Sb7vQ_srt+544;
 },
 _cbbI7() //  [R1]
         { []
         }
     {offset
       cbbI7: // global
           R6 = I64[R1 + 23];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 48];
           R3 = GHC.Types.False_closure+1;
           R2 = P64[Sp + 32];
           P64[Sp + 32] = P64[R1 + 7];
           _sb7sb::P64 = P64[Sp + 40];
           I64[Sp + 40] = I64[R1 + 31];
           P64[Sp + 48] = _sb7sb::P64;
           Sp = Sp + 32;
           call GHC.IO.Handle.Text.$wwriteBlocks_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbI7_info" {
     block_cbbI7_info:
         const _cbbI7;
         const 390;
         const 4294967326;
         const Sb7vQ_srt+544;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.447914038 UTC

[section ""data" . GHC.IO.Handle.Text.hPutStr'_closure" {
     GHC.IO.Handle.Text.hPutStr'_closure:
         const GHC.IO.Handle.Text.hPutStr'_info;
         const 0;
 },
 GHC.IO.Handle.Text.hPutStr'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbbKw: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.Text.hPutStr1_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hPutStr'_info" {
     GHC.IO.Handle.Text.hPutStr'_info:
         const GHC.IO.Handle.Text.hPutStr'_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const Sb7vQ_srt+592;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.452085227 UTC

[section ""data" . GHC.IO.Handle.Text.hPutStr_closure" {
     GHC.IO.Handle.Text.hPutStr_closure:
         const GHC.IO.Handle.Text.hPutStr_info;
         const 0;
 },
 GHC.IO.Handle.Text.hPutStr_entry() //  [R2, R3]
         { []
         }
     {offset
       cbbKH: // global
           R4 = GHC.Types.False_closure+1;
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.Text.hPutStr'_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hPutStr_info" {
     GHC.IO.Handle.Text.hPutStr_info:
         const GHC.IO.Handle.Text.hPutStr_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const Sb7vQ_srt+616;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.455438398 UTC

[section ""data" . GHC.IO.Handle.Text.hPutStrLn_closure" {
     GHC.IO.Handle.Text.hPutStrLn_closure:
         const GHC.IO.Handle.Text.hPutStrLn_info;
         const 0;
 },
 GHC.IO.Handle.Text.hPutStrLn_entry() //  [R2, R3]
         { []
         }
     {offset
       cbbKS: // global
           R4 = GHC.Types.True_closure+2;
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.Text.hPutStr'_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hPutStrLn_info" {
     GHC.IO.Handle.Text.hPutStrLn_info:
         const GHC.IO.Handle.Text.hPutStrLn_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const Sb7vQ_srt+616;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.458491412 UTC

[section ""cstring" . GHC.IO.Handle.Text.hWaitForInput3_bytes" {
     GHC.IO.Handle.Text.hWaitForInput3_bytes:
         I8[] [104,87,97,105,116,70,111,114,73,110,112,117,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.460686629 UTC

[section ""data" . GHC.IO.Handle.Text.hWaitForInput2_closure" {
     GHC.IO.Handle.Text.hWaitForInput2_closure:
         const GHC.IO.Handle.Text.hWaitForInput2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Text.hWaitForInput2_entry() //  [R1]
         { []
         }
     {offset
       cbbL6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbbL7; else goto cbbL8;
       cbbL7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbbL8: // global
           (_cbbL3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbbL3::I64 == 0) goto cbbL5; else goto cbbL4;
       cbbL5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbbL4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbbL3::I64;
           R2 = GHC.IO.Handle.Text.hWaitForInput3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hWaitForInput2_info" {
     GHC.IO.Handle.Text.hWaitForInput2_info:
         const GHC.IO.Handle.Text.hWaitForInput2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.474599417 UTC

[section ""data" . GHC.IO.Handle.Text.hWaitForInput1_closure" {
     GHC.IO.Handle.Text.hWaitForInput1_closure:
         const GHC.IO.Handle.Text.hWaitForInput1_info;
         const 0;
 },
 lvl34_sb7t8_entry() //  [R1]
         { []
         }
     {offset
       cbbLr: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbbLs; else goto cbbLt;
       cbbLs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbbLt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbbLo_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubbLy; else goto cbbLp;
       ubbLy: // global
           call _cbbLo(R1) args: 0, res: 0, upd: 0;
       cbbLp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl34_sb7t8_info" {
     lvl34_sb7t8_info:
         const lvl34_sb7t8_entry;
         const 1;
         const 16;
 },
 _cbbLo() //  [R1]
         { []
         }
     {offset
       cbbLo: // global
           R1 = I64[(%MO_S_Lt_W64(I64[R1 + 7],
                                  0) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbbLo_info" {
     block_cbbLo_info:
         const _cbbLo;
         const 0;
         const 30;
 },
 sat_sb7v9_entry() //  [R1, R2]
         { []
         }
     {offset
       cbbLH: // global
           if ((Sp + -96) < SpLim) (likely: False) goto cbbLL; else goto cbbLM;
       cbbLL: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbbLM: // global
           I64[Sp - 24] = block_cbbLE_info;
           _sb7t6::P64 = P64[R1 + 6];
           _sb7t8::P64 = P64[R1 + 14];
           R1 = R2;
           P64[Sp - 16] = _sb7t6::P64;
           P64[Sp - 8] = _sb7t8::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubbOt; else goto cbbLF;
       ubbOt: // global
           call _cbbLE(R1) args: 0, res: 0, upd: 0;
       cbbLF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sb7v9_info" {
     sat_sb7v9_info:
         const sat_sb7v9_entry;
         const 2;
         const 12884901899;
         const 8589934597;
         const Sb7vQ_srt+624;
 },
 _cbbLE() //  [R1]
         { []
         }
     {offset
       cbbLE: // global
           I64[Sp - 56] = block_cbbLK_info;
           _sb7te::P64 = R1;
           _sb7tf::P64 = P64[R1 + 7];
           _sb7ti::P64 = P64[R1 + 31];
           _sb7tk::P64 = P64[R1 + 47];
           _sb7tm::P64 = P64[R1 + 63];
           _sb7tn::P64 = P64[R1 + 71];
           _sb7tq::P64 = P64[R1 + 95];
           R1 = P64[_sb7tn::P64 + 8];
           P64[Sp - 48] = _sb7tf::P64;
           P64[Sp - 40] = _sb7ti::P64;
           P64[Sp - 32] = _sb7tk::P64;
           P64[Sp - 24] = _sb7tm::P64;
           P64[Sp - 16] = _sb7tn::P64;
           P64[Sp - 8] = _sb7tq::P64;
           P64[Sp] = _sb7te::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto ubbOs; else goto cbbLO;
       ubbOs: // global
           call _cbbLK(R1) args: 0, res: 0, upd: 0;
       cbbLO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbLE_info" {
     block_cbbLE_info:
         const _cbbLE;
         const 2;
         const 12884901918;
         const Sb7vQ_srt+624;
 },
 _cbbLK() //  [R1]
         { []
         }
     {offset
       cbbLK: // global
           if (I64[R1 + 39] == I64[R1 + 47]) goto cbbM0; else goto ubbOo;
       cbbM0: // global
           I64[Sp] = block_cbbLZ_info;
           _sb7ty::P64 = R1;
           R1 = P64[Sp + 72];
           P64[Sp + 72] = _sb7ty::P64;
           if (R1 & 7 != 0) goto ubbOu; else goto cbbM1;
       ubbOu: // global
           call _cbbLZ(R1) args: 0, res: 0, upd: 0;
       cbbM1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ubbOo: // global
           Sp = Sp + 80;
           call _cbbMm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbbLK_info" {
     block_cbbLK_info:
         const _cbbLK;
         const 9;
         const 12884901918;
         const Sb7vQ_srt+624;
 },
 _cbbLZ() //  [R1]
         { []
         }
     {offset
       cbbLZ: // global
           if (R1 & 7 == 1) goto cbbMW; else goto cbbO7;
       cbbMW: // global
           _sb7tJ::P64 = P64[P64[Sp + 24] + 8];
           I64[Sp] = block_cbbM7_info;
           R1 = P64[Sp + 48];
           P64[Sp + 48] = _sb7tJ::P64;
           if (R1 & 7 != 0) goto ubbOw; else goto cbbMX;
       ubbOw: // global
           call _cbbM7(R1) args: 0, res: 0, upd: 0;
       cbbMX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbbO7: // global
           I64[Sp + 32] = block_cbbO5_info;
           R3 = P64[Sp + 72];
           R2 = P64[Sp + 56];
           Sp = Sp + 32;
           call GHC.IO.Handle.Internals.hLookAhead_2_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbLZ_info" {
     block_cbbLZ_info:
         const _cbbLZ;
         const 9;
         const 12884901918;
         const Sb7vQ_srt+624;
 },
 _cbbM7() //  [R1]
         { []
         }
     {offset
       cbbM7: // global
           if (R1 & 7 == 1) goto cbbNh; else goto cbbNR;
       cbbNh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbbNk; else goto cbbNj;
       cbbNk: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbbNj: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = GHC.IO.Handle.Internals.decodeByteBuf2_closure;
           _sb7tJ::P64 = P64[Sp + 48];
           P64[Hp] = _sb7tJ::P64;
           _sb7tm::P64 = P64[Sp + 32];
           _sb7ty::P64 = P64[Sp + 72];
           call MO_WriteBarrier();
           P64[_sb7tm::P64 + 8] = Hp - 15;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb7tm::P64);
           I64[Sp] = block_cbbN5_info;
           R3 = _sb7ty::P64;
           R2 = _sb7tJ::P64;
           call GHC.IO.Encoding.Latin1.latin5_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
       cbbNR: // global
           I64[Sp] = block_cbbNu_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubbOx; else goto cbbNv;
       ubbOx: // global
           call _cbbNu(R1) args: 0, res: 0, upd: 0;
       cbbNv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbM7_info" {
     block_cbbM7_info:
         const _cbbM7;
         const 9;
         const 12884901918;
         const Sb7vQ_srt+624;
 },
 _cbbN5() //  [R1]
         { []
         }
     {offset
       cbbN5: // global
           I64[Sp] = block_cbbN7_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubbOB; else goto cbbN8;
       ubbOB: // global
           call _cbbN7(R1) args: 0, res: 0, upd: 0;
       cbbN8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbN5_info" {
     block_cbbN5_info:
         const _cbbN5;
         const 18953;
         const 4294967326;
         const Sb7vQ_srt+632;
 },
 _cbbN7() //  [R1]
         { []
         }
     {offset
       cbbN7: // global
           _sb7tk::P64 = P64[Sp + 24];
           _sb7uv::P64 = P64[R1 + 15];
           _sb7uw::P64 = P64[R1 + 23];
           call MO_WriteBarrier();
           P64[_sb7tk::P64 + 8] = _sb7uv::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb7tk::P64);
           I64[Sp] = block_cbbNf_info;
           R1 = _sb7uw::P64;
           if (R1 & 7 != 0) goto ubbOC; else goto cbbNn;
       ubbOC: // global
           call _cbbNf(R1) args: 0, res: 0, upd: 0;
       cbbNn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbN7_info" {
     block_cbbN7_info:
         const _cbbN7;
         const 18953;
         const 4294967326;
         const Sb7vQ_srt+632;
 },
 _cbbNf() //  [R1]
         { []
         }
     {offset
       cbbNf: // global
           I64[Sp + 72] = I64[R1 + 23];
           P64[Sp + 48] = P64[R1 + 7];
           P64[Sp + 32] = P64[R1 + 15];
           I64[Sp + 24] = I64[R1 + 31];
           I64[Sp] = I64[R1 + 39];
           I64[Sp - 8] = I64[R1 + 47];
           Sp = Sp - 16;
           call _cbbM9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbbNf_info" {
     block_cbbNf_info:
         const _cbbNf;
         const 19209;
         const 4294967326;
         const Sb7vQ_srt+632;
 },
 _cbbNu() //  [R1]
         { []
         }
     {offset
       cbbNu: // global
           I64[Sp - 16] = block_cbbNz_info;
           _sb7uH::P64 = P64[R1 + 7];
           _sb7uI::P64 = P64[R1 + 15];
           R1 = P64[R1 + 31];
           P64[Sp - 8] = _sb7uI::P64;
           P64[Sp] = _sb7uH::P64;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbNu_info" {
     block_cbbNu_info:
         const _cbbNu;
         const 9;
         const 4294967326;
         const Sb7vQ_srt+632;
 },
 _cbbNz() //  [R1]
         { []
         }
     {offset
       cbbNz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbbNV; else goto cbbNU;
       cbbNV: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbbNU: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           _sb7tJ::P64 = P64[Sp + 64];
           P64[Hp] = _sb7tJ::P64;
           _sb7tm::P64 = P64[Sp + 48];
           _sb7ty::P64 = P64[Sp + 88];
           _sb7uH::P64 = P64[Sp + 16];
           _sb7uI::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_sb7tm::P64 + 8] = Hp - 15;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb7tm::P64);
           I64[Sp + 16] = block_cbbNF_info;
           R5 = _sb7ty::P64;
           R4 = _sb7tJ::P64;
           R3 = _sb7uI::P64;
           R2 = _sb7uH::P64;
           Sp = Sp + 16;
           call GHC.IO.Handle.Internals.$wstreamEncode_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbNz_info" {
     block_cbbNz_info:
         const _cbbNz;
         const 11;
         const 4294967326;
         const Sb7vQ_srt+632;
 },
 _cbbNF() //  [R1]
         { []
         }
     {offset
       cbbNF: // global
           I64[Sp] = block_cbbNH_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubbOE; else goto cbbNI;
       ubbOE: // global
           call _cbbNH(R1) args: 0, res: 0, upd: 0;
       cbbNI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbNF_info" {
     block_cbbNF_info:
         const _cbbNF;
         const 18953;
         const 4294967326;
         const Sb7vQ_srt+632;
 },
 _cbbNH() //  [R1]
         { []
         }
     {offset
       cbbNH: // global
           _sb7tk::P64 = P64[Sp + 24];
           _sb7uV::P64 = P64[R1 + 7];
           _sb7uW::P64 = P64[R1 + 15];
           call MO_WriteBarrier();
           P64[_sb7tk::P64 + 8] = _sb7uV::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb7tk::P64);
           I64[Sp] = block_cbbNP_info;
           R1 = _sb7uW::P64;
           if (R1 & 7 != 0) goto ubbOF; else goto cbbNY;
       ubbOF: // global
           call _cbbNP(R1) args: 0, res: 0, upd: 0;
       cbbNY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbNH_info" {
     block_cbbNH_info:
         const _cbbNH;
         const 18953;
         const 4294967326;
         const Sb7vQ_srt+632;
 },
 _cbbNP() //  [R1]
         { []
         }
     {offset
       cbbNP: // global
           I64[Sp - 8] = I64[R1 + 47];
           I64[Sp] = I64[R1 + 39];
           I64[Sp + 24] = I64[R1 + 31];
           P64[Sp + 32] = P64[R1 + 15];
           P64[Sp + 48] = P64[R1 + 7];
           I64[Sp + 72] = I64[R1 + 23];
           Sp = Sp - 16;
           call _cbbM9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbbNP_info" {
     block_cbbNP_info:
         const _cbbNP;
         const 19209;
         const 4294967326;
         const Sb7vQ_srt+632;
 },
 _cbbM9() //  []
         { []
         }
     {offset
       cbbM9: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbbMe; else goto cbbMd;
       cbbMe: // global
           HpAlloc = 56;
           I64[Sp] = block_cbbM9_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cbbMd: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 64];
           P64[Hp - 32] = P64[Sp + 48];
           I64[Hp - 24] = I64[Sp + 88];
           I64[Hp - 16] = I64[Sp + 40];
           _sb7tQ::I64 = I64[Sp + 16];
           I64[Hp - 8] = _sb7tQ::I64;
           _sb7tR::I64 = I64[Sp + 8];
           I64[Hp] = _sb7tR::I64;
           _sb7t6::P64 = P64[Sp + 80];
           _sb7tf::P64 = P64[Sp + 24];
           _sb7ti::P64 = P64[Sp + 32];
           _sb7tn::P64 = P64[Sp + 56];
           call MO_WriteBarrier();
           P64[_sb7tn::P64 + 8] = Hp - 47;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb7tn::P64);
           if (_sb7tQ::I64 == _sb7tR::I64) goto cbbMs; else goto ubbOr;
       cbbMs: // global
           I64[Sp + 48] = block_cbbMp_info;
           R2 = _sb7tf::P64;
           I64[Sp + 16] = stg_ap_pppv_info;
           P64[Sp + 24] = _sb7ti::P64;
           P64[Sp + 32] = GHC.Types.False_closure+1;
           P64[Sp + 40] = _sb7t6::P64;
           Sp = Sp + 16;
           call GHC.IO.Device.ready_entry(R2) args: 40, res: 8, upd: 8;
       ubbOr: // global
           Sp = Sp + 96;
           call _cbbMm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbbM9_info" {
     block_cbbM9_info:
         const _cbbM9;
         const 66763;
         const 4294967326;
         const Sb7vQ_srt+632;
 },
 _cbbMp() //  [R1]
         { []
         }
     {offset
       cbbMp: // global
           I64[Sp] = block_cbbMr_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubbOz; else goto cbbMu;
       ubbOz: // global
           call _cbbMr(R1) args: 0, res: 0, upd: 0;
       cbbMu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbMp_info" {
     block_cbbMp_info:
         const _cbbMp;
         const 1669;
         const 4294967326;
         const Sb7vQ_srt+632;
 },
 _cbbMr() //  [R1]
         { []
         }
     {offset
       cbbMr: // global
           if (R1 & 7 == 1) goto cbbMA; else goto cbbMF;
       cbbMA: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbbMF: // global
           _sb7u1::P64 = P64[P64[Sp + 8] + 8];
           I64[Sp] = block_cbbMD_info;
           R1 = _sb7u1::P64;
           if (R1 & 7 != 0) goto ubbOA; else goto cbbMG;
       ubbOA: // global
           call _cbbMD(R1) args: 0, res: 0, upd: 0;
       cbbMG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbMr_info" {
     block_cbbMr_info:
         const _cbbMr;
         const 1669;
         const 4294967326;
         const Sb7vQ_srt+632;
 },
 _cbbMD() //  [R1]
         { []
         }
     {offset
       cbbMD: // global
           _sb7u4::P64 = P64[R1 + 7];
           _sb7u3::I64 = I64[R1 + 23];
           _sb7u7::I64 = I64[R1 + 39];
           if (_sb7u7::I64 == I64[R1 + 47]) goto cbbMS; else goto cbbMO;
       cbbMS: // global
           I64[Sp] = block_cbbMR_info;
           R3 = R1;
           R2 = P64[Sp + 24];
           I64[Sp + 24] = _sb7u7::I64;
           P64[Sp + 32] = _sb7u4::P64;
           I64[Sp + 40] = _sb7u3::I64;
           call GHC.IO.Handle.Internals.hLookAhead_2_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
       cbbMO: // global
           _sb7tn::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_sb7tn::P64 + 8] = R1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb7tn::P64);
           call MO_Touch(_sb7u4::P64);
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbMD_info" {
     block_cbbMD_info:
         const _cbbMD;
         const 1669;
         const 4294967326;
         const Sb7vQ_srt+632;
 },
 _cbbMR() //  [R1]
         { []
         }
     {offset
       cbbMR: // global
           _sb7tn::P64 = P64[Sp + 8];
           _sb7u3::I64 = I64[Sp + 40];
           _sb7u4::P64 = P64[Sp + 32];
           _sb7u7::I64 = I64[Sp + 24];
           call MO_WriteBarrier();
           P64[_sb7tn::P64 + 8] = R1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb7tn::P64);
           call MO_Touch(_sb7u4::P64);
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbMR_info" {
     block_cbbMR_info:
         const _cbbMR;
         const 1413;
         const 30;
 },
 _cbbO5() //  [R1]
         { []
         }
     {offset
       cbbO5: // global
           _sb7tn::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_sb7tn::P64 + 8] = R1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sb7tn::P64);
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbO5_info" {
     block_cbbO5_info:
         const _cbbO5;
         const 1925;
         const 30;
 },
 _cbbMm() //  []
         { []
         }
     {offset
       cbbMm: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ubbOM_srtd" {
     ubbOM_srtd:
         const Sb7vQ_srt+96;
         const 70;
         const 1;
         const 60;
 },
 GHC.IO.Handle.Text.hWaitForInput1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbbOH: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbbOL; else goto cbbOK;
       cbbOL: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hWaitForInput1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbbOK: // global
           I64[Hp - 40] = lvl34_sb7t8_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sb7v9_info;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 40;
           R4 = Hp - 14;
           R3 = R2;
           R2 = GHC.IO.Handle.Text.hWaitForInput2_closure;
           call GHC.IO.Handle.Internals.wantReadableHandle_1_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hWaitForInput1_info" {
     GHC.IO.Handle.Text.hWaitForInput1_info:
         const GHC.IO.Handle.Text.hWaitForInput1_entry;
         const 0;
         const 18446744069414584334;
         const 12884901903;
         const ubbOM_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.515208477 UTC

[section ""data" . GHC.IO.Handle.Text.hWaitForInput_closure" {
     GHC.IO.Handle.Text.hWaitForInput_closure:
         const GHC.IO.Handle.Text.hWaitForInput_info;
         const 0;
 },
 GHC.IO.Handle.Text.hWaitForInput_entry() //  [R2, R3]
         { []
         }
     {offset
       cbbQW: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.Text.hWaitForInput1_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hWaitForInput_info" {
     GHC.IO.Handle.Text.hWaitForInput_info:
         const GHC.IO.Handle.Text.hWaitForInput_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const Sb7vQ_srt+640;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:04.519125727 UTC

[section ""relreadonly" . Sb7vQ_srt" {
     Sb7vQ_srt:
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
         const GHC.IO.Handle.Text.$willegalBufferSize_closure;
         const GHC.IO.Handle.Internals.$wwantWritableHandle'_closure;
         const GHC.IO.Handle.Text.$whPutChar_closure;
         const GHC.IO.Handle.Text.hPutChar2_closure;
         const GHC.IO.Handle.Text.hPutChar1_closure;
         const GHC.IO.Handle.Text.hPutStr7_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const GHC.IO.Exception.$fExceptionIOException4_closure;
         const GHC.IO.Handle.Text.hGetChar3_closure;
         const GHC.IO.Handle.Internals.hLookAhead_2_closure;
         const GHC.IO.Handle.Text.hGetChar2_closure;
         const GHC.IO.Handle.Internals.wantReadableHandle_1_closure;
         const GHC.IO.Handle.Text.hGetChar6_closure;
         const GHC.IO.Handle.Text.hGetChar1_closure;
         const GHC.IO.Exception.$fExceptionIOException_closure;
         const GHC.IO.Handle.Text.hGetContents3_closure;
         const $wlvl_rb6WI_closure;
         const lvl6_rb6WK_closure;
         const lvl7_rb6WL_closure;
         const lvl9_rb6WN_closure;
         const lvl10_rb6WO_closure;
         const lvl4_rb6WH_closure;
         const GHC.IO.Handle.Internals.hClose_help1_closure;
         const GHC.IO.Handle.Text.hGetContents2_closure;
         const GHC.IO.Handle.Internals.$wwithHandle'_closure;
         const GHC.IO.Handle.Internals.wantReadableHandle1_closure;
         const GHC.IO.Handle.Text.hGetContents1_closure;
         const GHC.IO.Handle.Internals.ioe_EOF1_closure;
         const GHC.IO.Handle.Text.$whGetLineBufferedLoop_closure;
         const GHC.IO.Handle.Text.hGetLine3_closure;
         const GHC.IO.Handle.Text.hGetLine2_closure;
         const GHC.IO.Handle.Text.hGetLine4_closure;
         const GHC.IO.Handle.Text.hGetLine1_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const GHC.IO.Handle.Text.$wbufReadNBEmpty_closure;
         const GHC.IO.Handle.Text.hGetBufNonBlocking2_closure;
         const GHC.IO.FD.$fBufferedIOFD8_closure;
         const GHC.IO.FD.$wreadRawBufferPtrNoBlock_closure;
         const lvl11_rb6WR_closure;
         const GHC.IO.Handle.Text.$whGetBufNonBlocking_closure;
         const GHC.IO.Handle.Text.hGetBufNonBlocking3_closure;
         const GHC.IO.Handle.Text.hGetBufNonBlocking1_closure;
         const GHC.IO.FD.$fBufferedIOFD12_closure;
         const GHC.IO.FD.$wreadRawBufferPtr_closure;
         const GHC.IO.Handle.Text.$whGetBufSome_closure;
         const lvl13_rb6WT_closure;
         const GHC.IO.Handle.Text.hGetBufSome1_closure;
         const GHC.IO.Handle.Text.hGetBuf2_closure;
         const GHC.IO.Handle.Text.hGetBuf4_closure;
         const GHC.IO.Handle.Text.$whGetBuf_closure;
         const GHC.IO.Handle.Text.hGetBuf5_closure;
         const GHC.IO.Handle.Text.hGetBuf1_closure;
         const GHC.Err.error_closure;
         const lvl24_rb6X4_closure;
         const lvl29_rb6X9_closure;
         const GHC.IO.FD.$w$cwriteNonBlocking_closure;
         const GHC.IO.FD.$wfdWrite_closure;
         const GHC.IO.Handle.Text.$wbufWrite_closure;
         const lvl26_rb6X6_closure;
         const lvl30_rb6Xa_closure;
         const GHC.IO.Handle.Text.$whPutBuf'_closure;
         const GHC.IO.Handle.Text.hPutBuf3_closure;
         const GHC.IO.Handle.Text.hPutBuf2_closure;
         const GHC.IO.Handle.Text.hPutBufNonBlocking1_closure;
         const GHC.IO.Handle.Text.hPutBuf1_closure;
         const lvl32_rb6Xc_closure;
         const GHC.IO.Handle.Internals.wantWritableHandle1_closure;
         const GHC.IO.Handle.Text.$wwriteBlocks_closure;
         const lvl2_rb6WE_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
         const GHC.IO.Handle.Text.hPutStr2_closure;
         const GHC.IO.Handle.Text.hPutStr3_closure;
         const GHC.IO.Handle.Text.hPutStr1_closure;
         const GHC.IO.Handle.Text.hPutStr5_closure;
         const GHC.IO.Handle.Text.$whPutChar_closure;
         const GHC.IO.Handle.Text.hPutStr'_closure;
         const GHC.IO.Handle.Internals.decodeByteBuf2_closure;
         const GHC.IO.Handle.Internals.hLookAhead_2_closure;
         const GHC.IO.Handle.Text.hWaitForInput1_closure;
         const GHC.IO.Handle.Text.hWaitForInput2_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.489455918 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:06:10.49052155 UTC

[section ""cstring" . lvl_rb6WB_bytes" {
     lvl_rb6WB_bytes:
         I8[] [105,108,108,101,103,97,108,32,98,117,102,102,101,114,32,115,105,122,101,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.494730014 UTC

[section ""data" . GHC.IO.Handle.Text.$willegalBufferSize_closure" {
     GHC.IO.Handle.Text.$willegalBufferSize_closure:
         const GHC.IO.Handle.Text.$willegalBufferSize_info;
         const 0;
 },
 sat_sbbRc_entry() //  [R1]
         { []
         }
     {offset
       cbcpj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbcpk; else goto cbcpl;
       cbcpk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbcpl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbcpg_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 9;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbbRc_info" {
     sat_sbbRc_info:
         const sat_sbbRc_entry;
         const 4294967296;
         const 17;
 },
 _cbcpg() //  [R1, R2]
         { []
         }
     {offset
       cbcpg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbcpo; else goto cbcpn;
       cbcpo: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cbcpn: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbcpg_info" {
     block_cbcpg_info:
         const _cbcpg;
         const 0;
         const 30;
 },
 sat_sbbRd_entry() //  [R1]
         { []
         }
     {offset
       cbcpp: // global
           _sbbRd::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbcpq; else goto cbcpr;
       cbcpr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbcpt; else goto cbcps;
       cbcpt: // global
           HpAlloc = 24;
           goto cbcpq;
       cbcpq: // global
           R1 = _sbbRd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbcps: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbbRd::P64;
           _sbbR6::I64 = I64[_sbbRd::P64 + 16];
           I64[Hp - 16] = sat_sbbRc_info;
           I64[Hp] = _sbbR6::I64;
           R3 = Hp - 16;
           R2 = lvl_rb6WB_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbbRd_info" {
     sat_sbbRd_info:
         const sat_sbbRd_entry;
         const 4294967296;
         const 17;
 },
 sat_sbbRf_entry() //  [R1]
         { []
         }
     {offset
       cbcpw: // global
           _sbbRf::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbcpx; else goto cbcpy;
       cbcpy: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cbcpA; else goto cbcpz;
       cbcpA: // global
           HpAlloc = 96;
           goto cbcpx;
       cbcpx: // global
           R1 = _sbbRf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbcpz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbbRf::P64;
           _sbbR4::P64 = P64[_sbbRf::P64 + 16];
           _sbbR5::P64 = P64[_sbbRf::P64 + 24];
           _sbbR6::I64 = I64[_sbbRf::P64 + 32];
           I64[Hp - 88] = sat_sbbRd_info;
           I64[Hp - 72] = _sbbR6::I64;
           I64[Hp - 64] = GHC.Base.Just_con_info;
           P64[Hp - 56] = _sbbR4::P64;
           I64[Hp - 48] = GHC.IO.Exception.IOError_con_info;
           P64[Hp - 40] = Hp - 62;
           P64[Hp - 32] = GHC.IO.Exception.InvalidArgument_closure+1;
           P64[Hp - 24] = _sbbR5::P64;
           P64[Hp - 16] = Hp - 88;
           P64[Hp - 8] = GHC.Base.Nothing_closure+1;
           P64[Hp] = GHC.Base.Nothing_closure+1;
           R2 = Hp - 47;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbbRf_info" {
     sat_sbbRf_info:
         const sat_sbbRf_entry;
         const 4294967298;
         const 4294967311;
         const SbcpG_srt;
 },
 GHC.IO.Handle.Text.$willegalBufferSize_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbcpB: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbcpF; else goto cbcpE;
       cbcpF: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.$willegalBufferSize_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbcpE: // global
           I64[Hp - 32] = sat_sbbRf_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           I64[Hp] = R4;
           R1 = Hp - 32;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.$willegalBufferSize_info" {
     GHC.IO.Handle.Text.$willegalBufferSize_info:
         const GHC.IO.Handle.Text.$willegalBufferSize_entry;
         const 0;
         const 12884901902;
         const 17179869206;
         const SbcpG_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.505277867 UTC

[section ""cstring" . GHC.IO.Handle.Text.$trModule4_bytes" {
     GHC.IO.Handle.Text.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.506974683 UTC

[section ""data" . GHC.IO.Handle.Text.$trModule3_closure" {
     GHC.IO.Handle.Text.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Text.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.508653302 UTC

[section ""cstring" . GHC.IO.Handle.Text.$trModule2_bytes" {
     GHC.IO.Handle.Text.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,46,72,97,110,100,108,101,46,84,101,120,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.510330878 UTC

[section ""data" . GHC.IO.Handle.Text.$trModule1_closure" {
     GHC.IO.Handle.Text.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Text.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.51206752 UTC

[section ""data" . GHC.IO.Handle.Text.$trModule_closure" {
     GHC.IO.Handle.Text.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.Handle.Text.$trModule3_closure+1;
         const GHC.IO.Handle.Text.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.515841441 UTC

[section ""data" . memcpy1_rb6WC_closure" {
     memcpy1_rb6WC_closure:
         const memcpy1_rb6WC_info;
 },
 memcpy1_rb6WC_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbcqw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbcqO; else goto cbcqP;
       cbcqO: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = memcpy1_rb6WC_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbcqP: // global
           I64[Sp - 24] = block_cbcqt_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubcqW; else goto cbcqu;
       ubcqW: // global
           call _cbcqt(R1) args: 0, res: 0, upd: 0;
       cbcqu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . memcpy1_rb6WC_info" {
     memcpy1_rb6WC_info:
         const memcpy1_rb6WC_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _cbcqt() //  [R1]
         { []
         }
     {offset
       cbcqt: // global
           I64[Sp] = block_cbcqz_info;
           _sbbRl::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sbbRl::I64;
           if (R1 & 7 != 0) goto ubcqV; else goto cbcqA;
       ubcqV: // global
           call _cbcqz(R1) args: 0, res: 0, upd: 0;
       cbcqA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcqt_info" {
     block_cbcqt_info:
         const _cbcqt;
         const 2;
         const 30;
 },
 _cbcqz() //  [R1]
         { []
         }
     {offset
       cbcqz: // global
           I64[Sp] = block_cbcqE_info;
           _sbbRn::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _sbbRn::I64;
           if (R1 & 7 != 0) goto ubcqX; else goto cbcqF;
       ubcqX: // global
           call _cbcqE(R1) args: 0, res: 0, upd: 0;
       cbcqF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcqz_info" {
     block_cbcqz_info:
         const _cbcqz;
         const 66;
         const 30;
 },
 _cbcqE() //  [R1]
         { []
         }
     {offset
       cbcqE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbcqU; else goto cbcqT;
       cbcqU: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbcqT: // global
           (_sbbRt::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memcpy(I64[Sp + 8], I64[Sp + 16], I64[R1 + 7]);
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sbbRt::I64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcqE_info" {
     block_cbcqE_info:
         const _cbcqE;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.525478922 UTC

[section ""data" . GHC.IO.Handle.Text.memcpy_closure" {
     GHC.IO.Handle.Text.memcpy_closure:
         const GHC.IO.Handle.Text.memcpy_info;
 },
 GHC.IO.Handle.Text.memcpy_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbcro: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call memcpy1_rb6WC_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.memcpy_info" {
     GHC.IO.Handle.Text.memcpy_info:
         const GHC.IO.Handle.Text.memcpy_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.536807355 UTC

[section ""data" . GHC.IO.Handle.Text.$wcommitBuffer'_closure" {
     GHC.IO.Handle.Text.$wcommitBuffer'_closure:
         const GHC.IO.Handle.Text.$wcommitBuffer'_info;
 },
 GHC.IO.Handle.Text.$wcommitBuffer'_slow() //  [R1]
         { []
         }
     {offset
       cbcrw: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.Handle.Text.$wcommitBuffer'_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2,
                                                         R1) args: 24, res: 0, upd: 8;
     }
 },
 GHC.IO.Handle.Text.$wcommitBuffer'_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cbcrD: // global
           if ((Sp + -96) < SpLim) (likely: False) goto cbcrE; else goto cbcrF;
       cbcrE: // global
           R1 = GHC.IO.Handle.Text.$wcommitBuffer'_closure;
           I64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cbcrF: // global
           I64[Sp - 40] = block_cbcrA_info;
           R1 = P64[Sp + 8];
           P64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           I64[Sp + 8] = R2;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubcu8; else goto cbcrB;
       ubcu8: // global
           call _cbcrA(R1) args: 0, res: 0, upd: 0;
       cbcrB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.$wcommitBuffer'_info" {
     GHC.IO.Handle.Text.$wcommitBuffer'_info:
         const GHC.IO.Handle.Text.$wcommitBuffer'_entry;
         const 0;
         const 14;
         const 34359738368;
         const 0;
         const 839;
         const GHC.IO.Handle.Text.$wcommitBuffer'_slow;
 },
 _cbcrA() //  [R1]
         { []
         }
     {offset
       cbcrA: // global
           I64[Sp - 40] = block_cbcrI_info;
           R6 = I64[Sp + 16];
           R5 = GHC.IO.Buffer.WriteBuffer_closure+2;
           R4 = P64[Sp + 8];
           R3 = I64[Sp + 48];
           R2 = R1;
           I64[Sp - 56] = 0;
           I64[Sp - 48] = I64[Sp + 24];
           P64[Sp - 32] = P64[R1 + 31];
           P64[Sp - 24] = P64[R1 + 47];
           P64[Sp - 16] = P64[R1 + 71];
           P64[Sp - 8] = P64[R1 + 79];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 56;
           call GHC.IO.Handle.Internals.$wwriteCharBuffer_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcrA_info" {
     block_cbcrA_info:
         const _cbcrA;
         const 2438;
         const 30;
 },
 _cbcrI() //  []
         { []
         }
     {offset
       cbcrI: // global
           I64[Sp] = block_cbcrK_info;
           R1 = P64[Sp + 72];
           if (R1 & 7 != 0) goto ubcu9; else goto cbcrN;
       ubcu9: // global
           call _cbcrK(R1) args: 0, res: 0, upd: 0;
       cbcrN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcrI_info" {
     block_cbcrI_info:
         const _cbcrI;
         const 77835;
         const 30;
 },
 _cbcrK() //  [R1]
         { []
         }
     {offset
       cbcrK: // global
           if (R1 & 7 == 1) goto cbcrU; else goto cbcsz;
       cbcrU: // global
           I64[Sp + 16] = block_cbcrR_info;
           R1 = P64[Sp + 80];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto ubcua; else goto cbcrV;
       ubcua: // global
           call _cbcrR(R1) args: 0, res: 0, upd: 0;
       cbcrV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbcsz: // global
           _sbbSl::P64 = P64[P64[Sp + 16] + 8];
           I64[Sp] = block_cbcsx_info;
           R1 = _sbbSl::P64;
           if (R1 & 7 != 0) goto ubcub; else goto cbcsA;
       ubcub: // global
           call _cbcsx(R1) args: 0, res: 0, upd: 0;
       cbcsA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcrK_info" {
     block_cbcrK_info:
         const _cbcrK;
         const 94219;
         const 30;
 },
 _cbcrR() //  [R1]
         { []
         }
     {offset
       cbcrR: // global
           if (R1 & 7 == 1) goto cbcs1; else goto cbcs9;
       cbcs1: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbcs4; else goto cbcs3;
       cbcs4: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbcs3: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = GHC.IO.Buffer.WriteBuffer_closure+2;
           I64[Hp - 24] = I64[Sp + 72];
           I64[Hp - 16] = I64[Sp + 40];
           I64[Hp - 8] = 0;
           I64[Hp] = I64[Sp + 48];
           R1 = Hp - 47;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbcs9: // global
           _sbbS2::P64 = P64[P64[Sp + 8] + 8];
           I64[Sp + 8] = block_cbcs7_info;
           R1 = _sbbS2::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ubcuc; else goto cbcsa;
       ubcuc: // global
           call _cbcs7(R1) args: 0, res: 0, upd: 0;
       cbcsa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcrR_info" {
     block_cbcrR_info:
         const _cbcrR;
         const 32009;
         const 30;
 },
 _cbcs7() //  [R1]
         { []
         }
     {offset
       cbcs7: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cbcsg; else goto cbcsf;
       cbcsg: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbcsf: // global
           _sbbRv::I64 = I64[Sp + 64];
           _sbbRw::P64 = P64[Sp + 24];
           _sbbRx::I64 = I64[Sp + 32];
           _sbbRy::I64 = I64[Sp + 40];
           if (_sbbRx::I64 == I64[R1 + 31]) goto cbcsu; else goto cbcsm;
       cbcsu: // global
           _sbbRN::P64 = P64[Sp + 8];
           _sbbSe::P64 = P64[_sbbRN::P64 + 8];
           I64[Hp - 96] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 88] = _sbbRw::P64;
           I64[Hp - 80] = _sbbRv::I64;
           I64[Hp - 72] = GHC.IO.Handle.Types.BufferListCons_con_info;
           P64[Hp - 64] = Hp - 95;
           P64[Hp - 56] = _sbbSe::P64;
           call MO_WriteBarrier();
           P64[_sbbRN::P64 + 8] = Hp - 70;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbbRN::P64);
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbbRw::P64;
           P64[Hp - 32] = GHC.IO.Buffer.WriteBuffer_closure+2;
           I64[Hp - 24] = _sbbRv::I64;
           I64[Hp - 16] = _sbbRx::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = _sbbRy::I64;
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbcsm: // global
           I64[Hp - 96] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 88] = _sbbRw::P64;
           P64[Hp - 80] = GHC.IO.Buffer.WriteBuffer_closure+2;
           I64[Hp - 72] = _sbbRv::I64;
           I64[Hp - 64] = _sbbRx::I64;
           I64[Hp - 56] = 0;
           I64[Hp - 48] = _sbbRy::I64;
           _cbcsk::P64 = Hp - 95;
           Hp = Hp - 48;
           R1 = _cbcsk::P64;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcs7_info" {
     block_cbcs7_info:
         const _cbcs7;
         const 16008;
         const 30;
 },
 _cbcsx() //  [R1]
         { []
         }
     {offset
       cbcsx: // global
           if (I64[R1 + 39] == I64[R1 + 47]) goto cbctt; else goto cbcsP;
       cbctt: // global
           I64[Sp + 16] = block_cbcts_info;
           R1 = P64[Sp + 80];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto ubcud; else goto cbctu;
       ubcud: // global
           call _cbcts(R1) args: 0, res: 0, upd: 0;
       cbctu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbcsP: // global
           _sbbRH::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cbcsI_info;
           R2 = P64[Sp + 40];
           I64[Sp - 16] = stg_ap_ppv_info;
           P64[Sp - 8] = _sbbRH::P64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.IO.BufferedIO.flushWriteBuffer_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcsx_info" {
     block_cbcsx_info:
         const _cbcsx;
         const 94219;
         const 30;
 },
 _cbcts() //  [R1]
         { []
         }
     {offset
       cbcts: // global
           if (R1 & 7 == 1) goto cbctA; else goto cbctI;
       cbctA: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbctD; else goto cbctC;
       cbctD: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbctC: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = GHC.IO.Buffer.WriteBuffer_closure+2;
           I64[Hp - 24] = I64[Sp + 72];
           I64[Hp - 16] = I64[Sp + 40];
           I64[Hp - 8] = 0;
           I64[Hp] = I64[Sp + 48];
           R1 = Hp - 47;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbctI: // global
           _sbbSX::P64 = P64[P64[Sp + 8] + 8];
           I64[Sp + 8] = block_cbctG_info;
           R1 = _sbbSX::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ubcug; else goto cbctJ;
       ubcug: // global
           call _cbctG(R1) args: 0, res: 0, upd: 0;
       cbctJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcts_info" {
     block_cbcts_info:
         const _cbcts;
         const 32009;
         const 30;
 },
 _cbctG() //  [R1]
         { []
         }
     {offset
       cbctG: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cbctP; else goto cbctO;
       cbctP: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbctO: // global
           _sbbRv::I64 = I64[Sp + 64];
           _sbbRw::P64 = P64[Sp + 24];
           _sbbRx::I64 = I64[Sp + 32];
           _sbbRy::I64 = I64[Sp + 40];
           if (_sbbRx::I64 == I64[R1 + 31]) goto cbcu3; else goto cbctV;
       cbcu3: // global
           _sbbRN::P64 = P64[Sp + 8];
           _sbbT9::P64 = P64[_sbbRN::P64 + 8];
           I64[Hp - 96] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 88] = _sbbRw::P64;
           I64[Hp - 80] = _sbbRv::I64;
           I64[Hp - 72] = GHC.IO.Handle.Types.BufferListCons_con_info;
           P64[Hp - 64] = Hp - 95;
           P64[Hp - 56] = _sbbT9::P64;
           call MO_WriteBarrier();
           P64[_sbbRN::P64 + 8] = Hp - 70;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbbRN::P64);
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbbRw::P64;
           P64[Hp - 32] = GHC.IO.Buffer.WriteBuffer_closure+2;
           I64[Hp - 24] = _sbbRv::I64;
           I64[Hp - 16] = _sbbRx::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = _sbbRy::I64;
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbctV: // global
           I64[Hp - 96] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 88] = _sbbRw::P64;
           P64[Hp - 80] = GHC.IO.Buffer.WriteBuffer_closure+2;
           I64[Hp - 72] = _sbbRv::I64;
           I64[Hp - 64] = _sbbRx::I64;
           I64[Hp - 56] = 0;
           I64[Hp - 48] = _sbbRy::I64;
           _cbctT::P64 = Hp - 95;
           Hp = Hp - 48;
           R1 = _cbctT::P64;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbctG_info" {
     block_cbctG_info:
         const _cbctG;
         const 16008;
         const 30;
 },
 _cbcsI() //  [R1]
         { []
         }
     {offset
       cbcsI: // global
           _sbbRA::P64 = P64[Sp + 72];
           _sbbRJ::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_sbbRJ::P64 + 8] = R1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbbRJ::P64);
           I64[Sp + 8] = block_cbcsN_info;
           R1 = _sbbRA::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ubcue; else goto cbcsR;
       ubcue: // global
           call _cbcsN(R1) args: 0, res: 0, upd: 0;
       cbcsR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcsI_info" {
     block_cbcsI_info:
         const _cbcsI;
         const 47626;
         const 30;
 },
 _cbcsN() //  [R1]
         { []
         }
     {offset
       cbcsN: // global
           if (R1 & 7 == 1) goto cbcsX; else goto cbct5;
       cbcsX: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbct0; else goto cbcsZ;
       cbct0: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbcsZ: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = GHC.IO.Buffer.WriteBuffer_closure+2;
           I64[Hp - 24] = I64[Sp + 72];
           I64[Hp - 16] = I64[Sp + 40];
           I64[Hp - 8] = 0;
           I64[Hp] = I64[Sp + 48];
           R1 = Hp - 47;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbct5: // global
           _sbbSC::P64 = P64[P64[Sp + 8] + 8];
           I64[Sp + 8] = block_cbct3_info;
           R1 = _sbbSC::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ubcuf; else goto cbct6;
       ubcuf: // global
           call _cbct3(R1) args: 0, res: 0, upd: 0;
       cbct6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcsN_info" {
     block_cbcsN_info:
         const _cbcsN;
         const 32009;
         const 30;
 },
 _cbct3() //  [R1]
         { []
         }
     {offset
       cbct3: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cbctc; else goto cbctb;
       cbctc: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbctb: // global
           _sbbRv::I64 = I64[Sp + 64];
           _sbbRw::P64 = P64[Sp + 24];
           _sbbRx::I64 = I64[Sp + 32];
           _sbbRy::I64 = I64[Sp + 40];
           if (_sbbRx::I64 == I64[R1 + 31]) goto cbctq; else goto cbcti;
       cbctq: // global
           _sbbRN::P64 = P64[Sp + 8];
           _sbbSO::P64 = P64[_sbbRN::P64 + 8];
           I64[Hp - 96] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 88] = _sbbRw::P64;
           I64[Hp - 80] = _sbbRv::I64;
           I64[Hp - 72] = GHC.IO.Handle.Types.BufferListCons_con_info;
           P64[Hp - 64] = Hp - 95;
           P64[Hp - 56] = _sbbSO::P64;
           call MO_WriteBarrier();
           P64[_sbbRN::P64 + 8] = Hp - 70;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbbRN::P64);
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbbRw::P64;
           P64[Hp - 32] = GHC.IO.Buffer.WriteBuffer_closure+2;
           I64[Hp - 24] = _sbbRv::I64;
           I64[Hp - 16] = _sbbRx::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = _sbbRy::I64;
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbcti: // global
           I64[Hp - 96] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 88] = _sbbRw::P64;
           P64[Hp - 80] = GHC.IO.Buffer.WriteBuffer_closure+2;
           I64[Hp - 72] = _sbbRv::I64;
           I64[Hp - 64] = _sbbRx::I64;
           I64[Hp - 56] = 0;
           I64[Hp - 48] = _sbbRy::I64;
           _cbctg::P64 = Hp - 95;
           Hp = Hp - 48;
           R1 = _cbctg::P64;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbct3_info" {
     block_cbct3_info:
         const _cbct3;
         const 16008;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.566465101 UTC

[section ""data" . GHC.IO.Handle.Text.commitBuffer'1_closure" {
     GHC.IO.Handle.Text.commitBuffer'1_closure:
         const GHC.IO.Handle.Text.commitBuffer'1_info;
 },
 GHC.IO.Handle.Text.commitBuffer'1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cbcwJ: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbcwS; else goto cbcwT;
       cbcwS: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.commitBuffer'1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cbcwT: // global
           I64[Sp - 40] = block_cbcwG_info;
           R1 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubcx2; else goto cbcwH;
       ubcx2: // global
           call _cbcwG(R1) args: 0, res: 0, upd: 0;
       cbcwH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.commitBuffer'1_info" {
     GHC.IO.Handle.Text.commitBuffer'1_info:
         const GHC.IO.Handle.Text.commitBuffer'1_entry;
         const 0;
         const 14;
         const 30064771098;
 },
 _cbcwG() //  [R1]
         { []
         }
     {offset
       cbcwG: // global
           I64[Sp - 8] = block_cbcwM_info;
           _sbbTn::P64 = P64[R1 + 7];
           _sbbTm::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _sbbTn::P64;
           I64[Sp + 8] = _sbbTm::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubcx1; else goto cbcwN;
       ubcx1: // global
           call _cbcwM(R1) args: 0, res: 0, upd: 0;
       cbcwN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcwG_info" {
     block_cbcwG_info:
         const _cbcwG;
         const 5;
         const 30;
 },
 _cbcwM() //  [R1]
         { []
         }
     {offset
       cbcwM: // global
           I64[Sp] = block_cbcwR_info;
           _sbbTp::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _sbbTp::I64;
           if (R1 & 7 != 0) goto ubcx3; else goto cbcwW;
       ubcx3: // global
           call _cbcwR(R1) args: 0, res: 0, upd: 0;
       cbcwW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcwM_info" {
     block_cbcwM_info:
         const _cbcwM;
         const 134;
         const 30;
 },
 _cbcwR() //  [R1]
         { []
         }
     {offset
       cbcwR: // global
           R6 = P64[Sp + 32];
           R5 = I64[R1 + 7];
           R4 = I64[Sp + 24];
           R3 = P64[Sp + 8];
           R2 = I64[Sp + 16];
           Sp = Sp + 40;
           call GHC.IO.Handle.Text.$wcommitBuffer'_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcwR_info" {
     block_cbcwR_info:
         const _cbcwR;
         const 390;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.575353861 UTC

[section ""data" . GHC.IO.Handle.Text.commitBuffer'_closure" {
     GHC.IO.Handle.Text.commitBuffer'_closure:
         const GHC.IO.Handle.Text.commitBuffer'_info;
 },
 GHC.IO.Handle.Text.commitBuffer'_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cbcxs: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.Text.commitBuffer'1_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.commitBuffer'_info" {
     GHC.IO.Handle.Text.commitBuffer'_info:
         const GHC.IO.Handle.Text.commitBuffer'_entry;
         const 0;
         const 14;
         const 30064771098;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.578440094 UTC

[section ""cstring" . lvl1_rb6WD_bytes" {
     lvl1_rb6WD_bytes:
         I8[] [99,111,109,109,105,116,66,117,102,102,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.580584239 UTC

[section ""data" . lvl2_rb6WE_closure" {
     lvl2_rb6WE_closure:
         const lvl2_rb6WE_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_rb6WE_entry() //  [R1]
         { []
         }
     {offset
       cbcxG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbcxH; else goto cbcxI;
       cbcxH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbcxI: // global
           (_cbcxD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbcxD::I64 == 0) goto cbcxF; else goto cbcxE;
       cbcxF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbcxE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbcxD::I64;
           R2 = lvl1_rb6WD_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_rb6WE_info" {
     lvl2_rb6WE_info:
         const lvl2_rb6WE_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.584462706 UTC

[section ""cstring" . GHC.IO.Handle.Text.hPutChar3_bytes" {
     GHC.IO.Handle.Text.hPutChar3_bytes:
         I8[] [104,80,117,116,67,104,97,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.586616438 UTC

[section ""data" . GHC.IO.Handle.Text.hPutChar2_closure" {
     GHC.IO.Handle.Text.hPutChar2_closure:
         const GHC.IO.Handle.Text.hPutChar2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Text.hPutChar2_entry() //  [R1]
         { []
         }
     {offset
       cbcxY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbcxZ; else goto cbcy0;
       cbcxZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbcy0: // global
           (_cbcxV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbcxV::I64 == 0) goto cbcxX; else goto cbcxW;
       cbcxX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbcxW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbcxV::I64;
           R2 = GHC.IO.Handle.Text.hPutChar3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hPutChar2_info" {
     GHC.IO.Handle.Text.hPutChar2_info:
         const GHC.IO.Handle.Text.hPutChar2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.596553635 UTC

[section ""data" . GHC.IO.Handle.Text.$whPutChar_closure" {
     GHC.IO.Handle.Text.$whPutChar_closure:
         const GHC.IO.Handle.Text.$whPutChar_info;
         const 0;
 },
 act_sbbTv_entry() //  [R1, R2]
         { []
         }
     {offset
       cbcyl: // global
           if ((Sp + -88) < SpLim) (likely: False) goto cbcym; else goto cbcyn;
       cbcym: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbcyn: // global
           I64[Sp - 16] = block_cbcyi_info;
           _sbbTt::I64 = I64[R1 + 6];
           R1 = R2;
           I64[Sp - 8] = _sbbTt::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubcA1; else goto cbcyj;
       ubcA1: // global
           call _cbcyi(R1) args: 0, res: 0, upd: 0;
       cbcyj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . act_sbbTv_info" {
     act_sbbTv_info:
         const act_sbbTv_entry;
         const 4294967296;
         const 10;
         const 8589934597;
 },
 _cbcyi() //  [R1]
         { []
         }
     {offset
       cbcyi: // global
           _sbbTR::P64 = P64[P64[R1 + 71] + 8];
           _sbbTS::I64 = I64[Sp + 8];
           if (_sbbTS::I64 == 10) goto cbczk; else goto cbcyE;
       cbczk: // global
           I64[Sp - 40] = block_cbcyL_info;
           _sbbTy::P64 = R1;
           _sbbTA::P64 = P64[R1 + 15];
           _sbbTC::P64 = P64[R1 + 31];
           _sbbTE::P64 = P64[R1 + 47];
           _sbbTF::P64 = P64[R1 + 55];
           R1 = P64[R1 + 119];
           P64[Sp - 32] = _sbbTC::P64;
           P64[Sp - 24] = _sbbTE::P64;
           P64[Sp - 16] = _sbbTF::P64;
           P64[Sp - 8] = _sbbTR::P64;
           P64[Sp] = _sbbTA::P64;
           P64[Sp + 8] = _sbbTy::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubcA0; else goto cbczl;
       ubcA0: // global
           call _cbcyL(R1) args: 0, res: 0, upd: 0;
       cbczl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbcyE: // global
           I64[Sp - 8] = block_cbcyt_info;
           _sbbTy::P64 = R1;
           R1 = _sbbTR::P64;
           I64[Sp] = _sbbTS::I64;
           P64[Sp + 8] = _sbbTy::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubczZ; else goto cbcyu;
       ubczZ: // global
           call _cbcyt(R1) args: 0, res: 0, upd: 0;
       cbcyu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcyi_info" {
     block_cbcyi_info:
         const _cbcyi;
         const 65;
         const 30;
 },
 _cbcyL() //  [R1]
         { []
         }
     {offset
       cbcyL: // global
           _sbbTR::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cbczs; else goto cbczC;
       cbczs: // global
           I64[Sp] = block_cbczp_info;
           R1 = _sbbTR::P64;
           if (R1 & 7 != 0) goto ubcA2; else goto cbczt;
       ubcA2: // global
           call _cbczp(R1) args: 0, res: 0, upd: 0;
       cbczt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbczC: // global
           I64[Sp] = block_cbczA_info;
           R1 = _sbbTR::P64;
           if (R1 & 7 != 0) goto ubcA3; else goto cbczD;
       ubcA3: // global
           call _cbczA(R1) args: 0, res: 0, upd: 0;
       cbczD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcyL_info" {
     block_cbcyL_info:
         const _cbcyL;
         const 6;
         const 30;
 },
 _cbczp() //  [R1]
         { []
         }
     {offset
       cbczp: // global
           _sbbUA::P64 = P64[R1 + 7];
           _sbbUB::P64 = P64[R1 + 15];
           _sbbUz::I64 = I64[R1 + 23];
           _sbbUC::I64 = I64[R1 + 31];
           _sbbUD::I64 = I64[R1 + 39];
           _sbbUE::I64 = I64[R1 + 47];
           I32[_sbbUz::I64 + (_sbbUE::I64 << 2)] = 10 :: W32;
           call MO_Touch(_sbbUA::P64);
           I64[Sp + 32] = _sbbUz::I64;
           P64[Sp] = _sbbUA::P64;
           P64[Sp - 32] = _sbbUB::P64;
           I64[Sp - 24] = _sbbUC::I64;
           I64[Sp - 16] = _sbbUD::I64;
           I64[Sp - 8] = _sbbUE::I64 + 1;
           Sp = Sp - 32;
           call _sbbU6() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbczp_info" {
     block_cbczp_info:
         const _cbczp;
         const 518;
         const 30;
 },
 _cbczA() //  [R1]
         { []
         }
     {offset
       cbczA: // global
           _sbbUK::P64 = P64[R1 + 7];
           _sbbUL::P64 = P64[R1 + 15];
           _sbbUJ::I64 = I64[R1 + 23];
           _sbbUM::I64 = I64[R1 + 31];
           _sbbUN::I64 = I64[R1 + 39];
           _sbbUO::I64 = I64[R1 + 47];
           I32[_sbbUJ::I64 + (_sbbUO::I64 << 2)] = 13 :: W32;
           call MO_Touch(_sbbUK::P64);
           _sbbUR::I64 = _sbbUO::I64 + 1;
           I32[_sbbUJ::I64 + (_sbbUR::I64 << 2)] = 10 :: W32;
           call MO_Touch(_sbbUK::P64);
           P64[Sp - 32] = _sbbUL::P64;
           I64[Sp - 24] = _sbbUM::I64;
           I64[Sp - 16] = _sbbUN::I64;
           I64[Sp - 8] = _sbbUR::I64 + 1;
           P64[Sp] = _sbbUK::P64;
           I64[Sp + 32] = _sbbUJ::I64;
           Sp = Sp - 32;
           call _sbbU6() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbczA_info" {
     block_cbczA_info:
         const _cbczA;
         const 518;
         const 30;
 },
 _sbbU6() //  []
         { []
         }
     {offset
       sbbU6: // global
           _sbbU9::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_cbcyP_info;
           R6 = I64[Sp + 8];
           R5 = P64[Sp];
           R4 = _sbbU9::P64;
           R3 = I64[Sp + 64];
           R2 = P64[Sp + 80];
           Sp = Sp + 16;
           call GHC.IO.Handle.Internals.$wwriteCharBuffer_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 24, res: 8, upd: 8;
     }
 },
 _cbcyP() //  []
         { []
         }
     {offset
       cbcyP: // global
           I64[Sp] = block_cbcyR_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto ubcA4; else goto cbcyU;
       ubcA4: // global
           call _cbcyR(R1) args: 0, res: 0, upd: 0;
       cbcyU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcyP_info" {
     block_cbcyP_info:
         const _cbcyP;
         const 2566;
         const 30;
 },
 _cbcyR() //  [R1]
         { []
         }
     {offset
       cbcyR: // global
           if (R1 & 7 == 2) goto cbcz5; else goto ubczX;
       cbcz5: // global
           _sbbUk::P64 = P64[P64[Sp + 16] + 8];
           I64[Sp] = block_cbcz3_info;
           R1 = _sbbUk::P64;
           if (R1 & 7 != 0) goto ubcA5; else goto cbcz6;
       ubcA5: // global
           call _cbcz3(R1) args: 0, res: 0, upd: 0;
       cbcz6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ubczX: // global
           Sp = Sp + 56;
           call _cbczj() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbcyR_info" {
     block_cbcyR_info:
         const _cbcyR;
         const 2822;
         const 30;
 },
 _cbcz3() //  [R1]
         { []
         }
     {offset
       cbcz3: // global
           if (I64[R1 + 39] == I64[R1 + 47]) goto ubczY; else goto cbczg;
       ubczY: // global
           Sp = Sp + 56;
           call _cbczj() args: 0, res: 0, upd: 0;
       cbczg: // global
           _sbbTC::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cbcze_info;
           R2 = P64[Sp + 40];
           I64[Sp - 16] = stg_ap_ppv_info;
           P64[Sp - 8] = _sbbTC::P64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.IO.BufferedIO.flushWriteBuffer_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcz3_info" {
     block_cbcz3_info:
         const _cbcz3;
         const 2822;
         const 30;
 },
 _cbcze() //  [R1]
         { []
         }
     {offset
       cbcze: // global
           _sbbTE::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_sbbTE::P64 + 8] = R1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbbTE::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcze_info" {
     block_cbcze_info:
         const _cbcze;
         const 1925;
         const 30;
 },
 _cbczj() //  []
         { []
         }
     {offset
       cbczj: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cbcyt() //  [R1]
         { []
         }
     {offset
       cbcyt: // global
           _sbbTy::P64 = P64[Sp + 16];
           _sbbTV::P64 = P64[R1 + 7];
           _sbbTW::P64 = P64[R1 + 15];
           _sbbTU::I64 = I64[R1 + 23];
           _sbbTX::I64 = I64[R1 + 31];
           _sbbTY::I64 = I64[R1 + 39];
           _sbbTZ::I64 = I64[R1 + 47];
           I32[_sbbTU::I64 + (_sbbTZ::I64 << 2)] = %MO_UU_Conv_W64_W32(I64[Sp + 8]);
           call MO_Touch(_sbbTV::P64);
           I64[Sp + 16] = block_cbcyC_info;
           R6 = _sbbTX::I64;
           R5 = _sbbTW::P64;
           R4 = _sbbTV::P64;
           R3 = _sbbTU::I64;
           R2 = _sbbTy::P64;
           I64[Sp] = _sbbTY::I64;
           I64[Sp + 8] = _sbbTZ::I64 + 1;
           call GHC.IO.Handle.Internals.$wwriteCharBuffer_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcyt_info" {
     block_cbcyt_info:
         const _cbcyt;
         const 66;
         const 30;
 },
 _cbcyC() //  []
         { []
         }
     {offset
       cbcyC: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcyC_info" {
     block_cbcyC_info:
         const _cbcyC;
         const 0;
         const 30;
 },
 GHC.IO.Handle.Text.$whPutChar_entry() //  [R2, R3]
         { []
         }
     {offset
       cbcAh: // global
           _sbbTt::I64 = R3;
           _sbbTs::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cbcAi; else goto cbcAj;
       cbcAj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbcAl; else goto cbcAk;
       cbcAl: // global
           HpAlloc = 16;
           goto cbcAi;
       cbcAi: // global
           R3 = _sbbTt::I64;
           R2 = _sbbTs::P64;
           R1 = GHC.IO.Handle.Text.$whPutChar_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbcAk: // global
           I64[Hp - 8] = act_sbbTv_info;
           I64[Hp] = _sbbTt::I64;
           I64[Sp - 16] = block_cbcAa_info;
           R1 = _sbbTs::P64;
           P64[Sp - 8] = Hp - 6;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubcAs; else goto cbcAb;
       ubcAs: // global
           call _cbcAa(R1) args: 0, res: 0, upd: 0;
       cbcAb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.$whPutChar_info" {
     GHC.IO.Handle.Text.$whPutChar_info:
         const GHC.IO.Handle.Text.$whPutChar_entry;
         const 0;
         const 30064771086;
         const 12884901902;
         const SbcpG_srt+16;
 },
 _cbcAa() //  [R1]
         { []
         }
     {offset
       cbcAa: // global
           _cbcyd::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cbcAe; else goto cbcAf;
       cbcAe: // global
           R5 = _cbcyd::P64;
           R4 = P64[R1 + 15];
           R3 = R1;
           R2 = GHC.IO.Handle.Text.hPutChar2_closure;
           Sp = Sp + 16;
           call GHC.IO.Handle.Internals.$wwantWritableHandle'_entry(R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
       cbcAf: // global
           R5 = _cbcyd::P64;
           R4 = P64[R1 + 22];
           R3 = R1;
           R2 = GHC.IO.Handle.Text.hPutChar2_closure;
           Sp = Sp + 16;
           call GHC.IO.Handle.Internals.$wwantWritableHandle'_entry(R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcAa_info" {
     block_cbcAa_info:
         const _cbcAa;
         const 1;
         const 21474836510;
         const SbcpG_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.623780056 UTC

[section ""data" . GHC.IO.Handle.Text.hPutChar1_closure" {
     GHC.IO.Handle.Text.hPutChar1_closure:
         const GHC.IO.Handle.Text.hPutChar1_info;
         const 0;
 },
 GHC.IO.Handle.Text.hPutChar1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbcC0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbcC1; else goto cbcC2;
       cbcC1: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hPutChar1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbcC2: // global
           I64[Sp - 16] = block_cbcBX_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubcC6; else goto cbcBY;
       ubcC6: // global
           call _cbcBX(R1) args: 0, res: 0, upd: 0;
       cbcBY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hPutChar1_info" {
     GHC.IO.Handle.Text.hPutChar1_info:
         const GHC.IO.Handle.Text.hPutChar1_entry;
         const 0;
         const 21474836494;
         const 12884901903;
         const SbcpG_srt+24;
 },
 _cbcBX() //  [R1]
         { []
         }
     {offset
       cbcBX: // global
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.IO.Handle.Text.$whPutChar_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcBX_info" {
     block_cbcBX_info:
         const _cbcBX;
         const 1;
         const 4294967326;
         const SbcpG_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.629255573 UTC

[section ""data" . GHC.IO.Handle.Text.hPutChar_closure" {
     GHC.IO.Handle.Text.hPutChar_closure:
         const GHC.IO.Handle.Text.hPutChar_info;
         const 0;
 },
 GHC.IO.Handle.Text.hPutChar_entry() //  [R2, R3]
         { []
         }
     {offset
       cbcCl: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.Text.hPutChar1_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hPutChar_info" {
     GHC.IO.Handle.Text.hPutChar_info:
         const GHC.IO.Handle.Text.hPutChar_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SbcpG_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.633870179 UTC

[section ""data" . GHC.IO.Handle.Text.hPutStr7_closure" {
     GHC.IO.Handle.Text.hPutStr7_closure:
         const GHC.IO.Handle.Text.hPutStr7_info;
         const 0;
 },
 GHC.IO.Handle.Text.hPutStr7_entry() //  [R2, R3]
         { []
         }
     {offset
       cbcCD: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbcCE; else goto ubcCV;
       cbcCE: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hPutStr7_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ubcCV: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cbcCt() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hPutStr7_info" {
     GHC.IO.Handle.Text.hPutStr7_info:
         const GHC.IO.Handle.Text.hPutStr7_entry;
         const 0;
         const 38654705678;
         const 12884901903;
         const SbcpG_srt+24;
 },
 _cbcCt() //  []
         { []
         }
     {offset
       cbcCt: // global
           I64[Sp - 8] = block_cbcCw_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubcCX; else goto cbcCx;
       ubcCX: // global
           call _cbcCw(R1) args: 0, res: 0, upd: 0;
       cbcCx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbcCw() //  [R1]
         { []
         }
     {offset
       cbcCw: // global
           if (R1 & 7 == 1) goto cbcCA; else goto cbcCB;
       cbcCA: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbcCB: // global
           I64[Sp] = block_cbcCL_info;
           _sbbVb::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 16] = _sbbVb::P64;
           if (R1 & 7 != 0) goto ubcCY; else goto cbcCN;
       ubcCY: // global
           call _cbcCL(R1) args: 0, res: 0, upd: 0;
       cbcCN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcCw_info" {
     block_cbcCw_info:
         const _cbcCw;
         const 130;
         const 4294967326;
         const SbcpG_srt+24;
 },
 _cbcCL() //  [R1]
         { []
         }
     {offset
       cbcCL: // global
           I64[Sp] = block_cbcCR_info;
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           call GHC.IO.Handle.Text.$whPutChar_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcCL_info" {
     block_cbcCL_info:
         const _cbcCL;
         const 2;
         const 4294967326;
         const SbcpG_srt+24;
 },
 _cbcCR() //  []
         { []
         }
     {offset
       cbcCR: // global
           P64[Sp + 8] = P64[Sp + 8];
           P64[Sp + 16] = P64[Sp + 16];
           Sp = Sp + 8;
           call _cbcCt() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbcCR_info" {
     block_cbcCR_info:
         const _cbcCR;
         const 2;
         const 4294967326;
         const SbcpG_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.645198161 UTC

[section ""data" . GHC.IO.Handle.Text.hGetChar3_closure" {
     GHC.IO.Handle.Text.hGetChar3_closure:
         const GHC.IO.Handle.Text.hGetChar3_info;
         const 0;
 },
 sat_sbbVw_entry() //  [R1]
         { []
         }
     {offset
       cbcDX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbcDY; else goto cbcDZ;
       cbcDY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbcDZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbbVw_info" {
     sat_sbbVw_info:
         const sat_sbbVw_entry;
         const 1;
         const 4294967312;
         const SbcpG_srt;
 },
 GHC.IO.Handle.Text.hGetChar3_entry() //  [R2]
         { []
         }
     {offset
       cbcE0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbcE1; else goto cbcE2;
       cbcE1: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hGetChar3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbcE2: // global
           I64[Sp - 8] = block_cbcDw_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubcEo; else goto cbcDx;
       ubcEo: // global
           call _cbcDw(R1) args: 0, res: 0, upd: 0;
       cbcDx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetChar3_info" {
     GHC.IO.Handle.Text.hGetChar3_info:
         const GHC.IO.Handle.Text.hGetChar3_entry;
         const 0;
         const 3852585664526;
         const 8589934597;
         const SbcpG_srt;
 },
 _cbcDw() //  [R1]
         { []
         }
     {offset
       cbcDw: // global
           I64[Sp - 16] = block_cbcDB_info;
           R2 = P64[R1 + 7];
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcDw_info" {
     block_cbcDw_info:
         const _cbcDw;
         const 0;
         const 1653562408990;
         const SbcpG_srt;
 },
 _cbcDB() //  [R1]
         { []
         }
     {offset
       cbcDB: // global
           I64[Sp] = block_cbcDF_info;
           R3 = GHC.IO.Exception.$fExceptionIOException4_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcDB_info" {
     block_cbcDB_info:
         const _cbcDB;
         const 2;
         const 1653562408990;
         const SbcpG_srt;
 },
 _cbcDF() //  [R1]
         { []
         }
     {offset
       cbcDF: // global
           if (R1 & 7 == 1) goto cbcE8; else goto cbcEa;
       cbcE8: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       cbcEa: // global
           I64[Sp + 16] = block_cbcDK_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcDF_info" {
     block_cbcDF_info:
         const _cbcDF;
         const 2;
         const 4294967326;
         const SbcpG_srt;
 },
 _cbcDK() //  [R1]
         { []
         }
     {offset
       cbcDK: // global
           I64[Sp - 8] = block_cbcDO_info;
           _sbbVo::P64 = R1;
           R1 = P64[R1 + 15];
           P64[Sp] = _sbbVo::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubcEn; else goto cbcDP;
       ubcEn: // global
           call _cbcDO(R1) args: 0, res: 0, upd: 0;
       cbcDP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcDK_info" {
     block_cbcDK_info:
         const _cbcDK;
         const 0;
         const 4294967326;
         const SbcpG_srt;
 },
 _cbcDO() //  [R1]
         { []
         }
     {offset
       cbcDO: // global
           if (I32[I64[R1 - 1] + 20] == 4 :: W32) goto cbcEk; else goto cbcEd;
       cbcEk: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbcEd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbcEg; else goto cbcEf;
       cbcEg: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbcEf: // global
           I64[Hp - 16] = sat_sbbVw_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 16;
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcDO_info" {
     block_cbcDO_info:
         const _cbcDO;
         const 1;
         const 4294967326;
         const SbcpG_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.658963973 UTC

[section ""cstring" . GHC.IO.Handle.Text.hGetChar7_bytes" {
     GHC.IO.Handle.Text.hGetChar7_bytes:
         I8[] [104,71,101,116,67,104,97,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.661279513 UTC

[section ""data" . GHC.IO.Handle.Text.hGetChar6_closure" {
     GHC.IO.Handle.Text.hGetChar6_closure:
         const GHC.IO.Handle.Text.hGetChar6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Text.hGetChar6_entry() //  [R1]
         { []
         }
     {offset
       cbcFa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbcFb; else goto cbcFc;
       cbcFb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbcFc: // global
           (_cbcF7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbcF7::I64 == 0) goto cbcF9; else goto cbcF8;
       cbcF9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbcF8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbcF7::I64;
           R2 = GHC.IO.Handle.Text.hGetChar7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetChar6_info" {
     GHC.IO.Handle.Text.hGetChar6_info:
         const GHC.IO.Handle.Text.hGetChar6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.66485985 UTC

[section ""data" . GHC.IO.Handle.Text.hGetChar5_closure" {
     GHC.IO.Handle.Text.hGetChar5_closure:
         const GHC.Types.C#_con_info;
         const 13;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.666497258 UTC

[section ""data" . GHC.IO.Handle.Text.hGetChar4_closure" {
     GHC.IO.Handle.Text.hGetChar4_closure:
         const GHC.Types.C#_con_info;
         const 10;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.68188009 UTC

[section ""data" . GHC.IO.Handle.Text.hGetChar2_closure" {
     GHC.IO.Handle.Text.hGetChar2_closure:
         const GHC.IO.Handle.Text.hGetChar2_info;
         const 0;
 },
 sat_sbbWf_entry() //  [R1]
         { []
         }
     {offset
       cbcGb: // global
           _sbbWf::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbcGc; else goto cbcGd;
       cbcGd: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbcGf; else goto cbcGe;
       cbcGf: // global
           HpAlloc = 56;
           goto cbcGc;
       cbcGc: // global
           R1 = _sbbWf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbcGe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbbWf::P64;
           _sbbW3::P64 = P64[_sbbWf::P64 + 16];
           _sbbW4::P64 = P64[_sbbWf::P64 + 24];
           _sbbW2::I64 = I64[_sbbWf::P64 + 32];
           _sbbW5::I64 = I64[_sbbWf::P64 + 40];
           _sbbW7::I64 = I64[_sbbWf::P64 + 48];
           _sbbWc::I64 = I64[_sbbWf::P64 + 56];
           if (_sbbWc::I64 == _sbbW7::I64) goto cbcGa; else goto cbcG9;
       cbcGa: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbbW3::P64;
           P64[Hp - 32] = _sbbW4::P64;
           I64[Hp - 24] = _sbbW2::I64;
           I64[Hp - 16] = _sbbW5::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cbcG9: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbbW3::P64;
           P64[Hp - 32] = _sbbW4::P64;
           I64[Hp - 24] = _sbbW2::I64;
           I64[Hp - 16] = _sbbW5::I64;
           I64[Hp - 8] = _sbbWc::I64;
           I64[Hp] = _sbbW7::I64;
           R1 = Hp - 47;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbbWf_info" {
     sat_sbbWf_info:
         const sat_sbbWf_entry;
         const 17179869186;
         const 15;
 },
 sat_sbbWk_entry() //  [R1]
         { []
         }
     {offset
       cbcGt: // global
           _sbbWk::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbcGu; else goto cbcGv;
       cbcGv: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbcGx; else goto cbcGw;
       cbcGx: // global
           HpAlloc = 56;
           goto cbcGu;
       cbcGu: // global
           R1 = _sbbWk::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbcGw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbbWk::P64;
           _sbbW3::P64 = P64[_sbbWk::P64 + 16];
           _sbbW4::P64 = P64[_sbbWk::P64 + 24];
           _sbbW2::I64 = I64[_sbbWk::P64 + 32];
           _sbbW5::I64 = I64[_sbbWk::P64 + 40];
           _sbbW7::I64 = I64[_sbbWk::P64 + 48];
           _sbbWc::I64 = I64[_sbbWk::P64 + 56];
           if (_sbbWc::I64 == _sbbW7::I64) goto cbcGs; else goto cbcGr;
       cbcGs: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbbW3::P64;
           P64[Hp - 32] = _sbbW4::P64;
           I64[Hp - 24] = _sbbW2::I64;
           I64[Hp - 16] = _sbbW5::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cbcGr: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbbW3::P64;
           P64[Hp - 32] = _sbbW4::P64;
           I64[Hp - 24] = _sbbW2::I64;
           I64[Hp - 16] = _sbbW5::I64;
           I64[Hp - 8] = _sbbWc::I64;
           I64[Hp] = _sbbW7::I64;
           R1 = Hp - 47;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbbWk_info" {
     sat_sbbWk_info:
         const sat_sbbWk_entry;
         const 17179869186;
         const 15;
 },
 sat_sbbWE_entry() //  [R1]
         { []
         }
     {offset
       cbcGS: // global
           _sbbWE::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbcGT; else goto cbcGU;
       cbcGU: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbcGW; else goto cbcGV;
       cbcGW: // global
           HpAlloc = 56;
           goto cbcGT;
       cbcGT: // global
           R1 = _sbbWE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbcGV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbbWE::P64;
           _sbbWp::P64 = P64[_sbbWE::P64 + 16];
           _sbbWq::P64 = P64[_sbbWE::P64 + 24];
           _sbbWo::I64 = I64[_sbbWE::P64 + 32];
           _sbbWr::I64 = I64[_sbbWE::P64 + 40];
           _sbbWt::I64 = I64[_sbbWE::P64 + 56];
           _sbbWC::I64 = I64[_sbbWE::P64 + 48] + 1;
           if (_sbbWC::I64 == _sbbWt::I64) goto cbcH6; else goto cbcH3;
       cbcH6: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbbWp::P64;
           P64[Hp - 32] = _sbbWq::P64;
           I64[Hp - 24] = _sbbWo::I64;
           I64[Hp - 16] = _sbbWr::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cbcH3: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbbWp::P64;
           P64[Hp - 32] = _sbbWq::P64;
           I64[Hp - 24] = _sbbWo::I64;
           I64[Hp - 16] = _sbbWr::I64;
           I64[Hp - 8] = _sbbWC::I64;
           I64[Hp] = _sbbWt::I64;
           R1 = Hp - 47;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbbWE_info" {
     sat_sbbWE_info:
         const sat_sbbWE_entry;
         const 17179869186;
         const 15;
 },
 sat_sbbX0_entry() //  [R1]
         { []
         }
     {offset
       cbcHj: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cbcHk; else goto cbcHl;
       cbcHk: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbcHl: // global
           _sbbVz::P64 = P64[R1 + 7];
           _sbbWu::P64 = P64[R1 + 31];
           _sbbWs::I64 = I64[R1 + 55];
           _sbbWH::I64 = I64[R1 + 63] - _sbbWs::I64;
           if (_sbbWH::I64 != 0) goto ubcI2; else goto cbcHh;
       ubcI2: // global
           if (_sbbWH::I64 != 1) goto ubcI4; else goto ubcI3;
       ubcI4: // global
           P64[Sp - 16] = _sbbWu::P64;
           I64[Sp - 8] = _sbbWH::I64;
           Sp = Sp - 16;
           call _cbcHo() args: 0, res: 0, upd: 0;
       ubcI3: // global
           P64[Sp - 64] = _sbbVz::P64;
           I64[Sp - 56] = I64[R1 + 39];
           P64[Sp - 48] = P64[R1 + 15];
           P64[Sp - 40] = P64[R1 + 23];
           I64[Sp - 32] = I64[R1 + 47];
           I64[Sp - 24] = _sbbWs::I64;
           P64[Sp - 16] = _sbbWu::P64;
           I64[Sp - 8] = _sbbWH::I64;
           Sp = Sp - 64;
           call _cbcHH() args: 0, res: 0, upd: 0;
       cbcHh: // global
           I64[Sp - 8] = block_cbcHy_info;
           R3 = _sbbWu::P64;
           R2 = _sbbVz::P64;
           Sp = Sp - 8;
           call GHC.IO.Handle.Internals.hLookAhead_2_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbbX0_info" {
     sat_sbbX0_info:
         const sat_sbbX0_entry;
         const 17179869188;
         const 4294967304;
         const 4294967299;
         const SbcpG_srt+80;
 },
 _cbcHo() //  []
         { []
         }
     {offset
       cbcHo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbcHt; else goto cbcHs;
       cbcHt: // global
           HpAlloc = 16;
           I64[Sp - 8] = block_cbcHn_info;
           R1 = I64[Sp + 8];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbcHs: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cbcHn() //  [R1]
         { []
         }
     {offset
       cbcHn: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _cbcHo() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbcHn_info" {
     block_cbcHn_info:
         const _cbcHn;
         const 130;
         const 30;
 },
 _cbcHH() //  []
         { []
         }
     {offset
       cbcHH: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbcHL; else goto cbcHK;
       cbcHL: // global
           HpAlloc = 56;
           I64[Sp - 8] = block_cbcHG_info;
           R1 = I64[Sp + 56];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbcHK: // global
           _sbbVz::P64 = P64[Sp];
           _sbbWo::I64 = I64[Sp + 8];
           _sbbWp::P64 = P64[Sp + 16];
           _sbbWq::P64 = P64[Sp + 24];
           _sbbWr::I64 = I64[Sp + 32];
           _sbbWu::P64 = P64[Sp + 48];
           _sbbWP::I64 = %MO_UU_Conv_W32_W64(I32[_sbbWo::I64 + (I64[Sp + 40] << 2)]);
           call MO_Touch(_sbbWp::P64);
           if (_sbbWP::I64 == 13) goto cbcHY; else goto cbcHR;
       cbcHY: // global
           I32[_sbbWo::I64] = 13 :: W32;
           call MO_Touch(_sbbWp::P64);
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbbWp::P64;
           P64[Hp - 32] = _sbbWq::P64;
           I64[Hp - 24] = _sbbWo::I64;
           I64[Hp - 16] = _sbbWr::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 1;
           I64[Sp + 56] = block_cbcHV_info;
           R3 = Hp - 47;
           R2 = _sbbVz::P64;
           Sp = Sp + 56;
           call GHC.IO.Handle.Internals.hLookAhead_2_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
       cbcHR: // global
           I64[Hp - 48] = GHC.Base.Just_con_info;
           P64[Hp - 40] = _sbbWu::P64;
           _cbcHP::P64 = Hp - 46;
           Hp = Hp - 40;
           R1 = _cbcHP::P64;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cbcHG() //  [R1]
         { []
         }
     {offset
       cbcHG: // global
           I64[Sp + 64] = R1;
           Sp = Sp + 8;
           call _cbcHH() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbcHG_info" {
     block_cbcHG_info:
         const _cbcHG;
         const 11400;
         const 4294967326;
         const SbcpG_srt+80;
 },
 _cbcHV() //  [R1]
         { []
         }
     {offset
       cbcHV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbcI1; else goto cbcI0;
       cbcI1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbcI0: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcHV_info" {
     block_cbcHV_info:
         const _cbcHV;
         const 0;
         const 30;
 },
 _cbcHy() //  [R1]
         { []
         }
     {offset
       cbcHy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbcHE; else goto cbcHD;
       cbcHE: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbcHD: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcHy_info" {
     block_cbcHy_info:
         const _cbcHy;
         const 0;
         const 30;
 },
 sat_sbbXm_entry() //  [R1]
         { []
         }
     {offset
       cbcIu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbcIv; else goto cbcIw;
       cbcIv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbcIw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbcIr_info;
           _sbbWs::I64 = I64[R1 + 24];
           R1 = P64[R1 + 16];
           I64[Sp - 24] = _sbbWs::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubcIO; else goto cbcIs;
       ubcIO: // global
           call _cbcIr(R1) args: 0, res: 0, upd: 0;
       cbcIs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbbXm_info" {
     sat_sbbXm_info:
         const sat_sbbXm_entry;
         const 4294967297;
         const 19;
 },
 _cbcIr() //  [R1]
         { []
         }
     {offset
       cbcIr: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbcIB; else goto cbcIA;
       cbcIB: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbcIA: // global
           _sbbXf::P64 = P64[R1 + 7];
           _sbbXg::P64 = P64[R1 + 15];
           _sbbXe::I64 = I64[R1 + 23];
           _sbbXh::I64 = I64[R1 + 31];
           _sbbXj::I64 = I64[R1 + 47];
           _sbbXk::I64 = I64[Sp + 8] + 1;
           if (_sbbXk::I64 == _sbbXj::I64) goto cbcIN; else goto cbcIK;
       cbcIN: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbbXf::P64;
           P64[Hp - 32] = _sbbXg::P64;
           I64[Hp - 24] = _sbbXe::I64;
           I64[Hp - 16] = _sbbXh::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cbcIK: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbbXf::P64;
           P64[Hp - 32] = _sbbXg::P64;
           I64[Hp - 24] = _sbbXe::I64;
           I64[Hp - 16] = _sbbXh::I64;
           I64[Hp - 8] = _sbbXk::I64;
           I64[Hp] = _sbbXj::I64;
           R1 = Hp - 47;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbcIr_info" {
     block_cbcIr_info:
         const _cbcIr;
         const 65;
         const 30;
 },
 GHC.IO.Handle.Text.hGetChar2_entry() //  [R2]
         { []
         }
     {offset
       cbcIP: // global
           if ((Sp + -80) < SpLim) (likely: False) goto cbcIQ; else goto cbcIR;
       cbcIQ: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hGetChar2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbcIR: // global
           I64[Sp - 8] = block_cbcFr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubcKj; else goto cbcFs;
       ubcKj: // global
           call _cbcFr(R1) args: 0, res: 0, upd: 0;
       cbcFs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetChar2_info" {
     GHC.IO.Handle.Text.hGetChar2_info:
         const GHC.IO.Handle.Text.hGetChar2_entry;
         const 0;
         const 30064771086;
         const 8589934597;
         const SbcpG_srt+72;
 },
 _cbcFr() //  [R1]
         { []
         }
     {offset
       cbcFr: // global
           I64[Sp - 24] = block_cbcFw_info;
           _sbbVz::P64 = R1;
           _sbbVI::P64 = P64[R1 + 71];
           _sbbVN::P64 = P64[R1 + 111];
           R1 = P64[_sbbVI::P64 + 8];
           P64[Sp - 16] = _sbbVI::P64;
           P64[Sp - 8] = _sbbVN::P64;
           P64[Sp] = _sbbVz::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubcKe; else goto cbcFx;
       ubcKe: // global
           call _cbcFw(R1) args: 0, res: 0, upd: 0;
       cbcFx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcFr_info" {
     block_cbcFr_info:
         const _cbcFr;
         const 0;
         const 12884901918;
         const SbcpG_srt+72;
 },
 _cbcFw() //  [R1]
         { []
         }
     {offset
       cbcFw: // global
           _sbbVY::I64 = I64[R1 + 39];
           _sbbVZ::I64 = I64[R1 + 47];
           if (_sbbVY::I64 == _sbbVZ::I64) goto cbcJM; else goto cbcJG;
       cbcJM: // global
           I64[Sp] = block_cbcJJ_info;
           R3 = R1;
           R2 = P64[Sp + 24];
           call GHC.IO.Handle.Internals.hLookAhead_2_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
       cbcJG: // global
           P64[Sp - 40] = P64[R1 + 7];
           P64[Sp - 32] = P64[R1 + 15];
           I64[Sp - 24] = I64[R1 + 31];
           I64[Sp - 16] = _sbbVY::I64;
           I64[Sp - 8] = _sbbVZ::I64;
           I64[Sp] = I64[R1 + 23];
           Sp = Sp - 40;
           call _sbbW0() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbcFw_info" {
     block_cbcFw_info:
         const _cbcFw;
         const 3;
         const 12884901918;
         const SbcpG_srt+72;
 },
 _cbcJJ() //  [R1]
         { []
         }
     {offset
       cbcJJ: // global
           I64[Sp] = block_cbcJL_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubcKk; else goto cbcJO;
       ubcKk: // global
           call _cbcJL(R1) args: 0, res: 0, upd: 0;
       cbcJO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcJJ_info" {
     block_cbcJJ_info:
         const _cbcJJ;
         const 3;
         const 12884901918;
         const SbcpG_srt+72;
 },
 _cbcJL() //  [R1]
         { []
         }
     {offset
       cbcJL: // global
           I64[Sp] = I64[R1 + 23];
           P64[Sp - 40] = P64[R1 + 7];
           P64[Sp - 32] = P64[R1 + 15];
           I64[Sp - 24] = I64[R1 + 31];
           I64[Sp - 16] = I64[R1 + 39];
           I64[Sp - 8] = I64[R1 + 47];
           Sp = Sp - 40;
           call _sbbW0() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbcJL_info" {
     block_cbcJL_info:
         const _cbcJL;
         const 3;
         const 12884901918;
         const SbcpG_srt+72;
 },
 _sbbW0() //  []
         { []
         }
     {offset
       sbbW0: // global
           _sbbVN::P64 = P64[Sp + 56];
           _sbbW6::I64 = I64[Sp + 24];
           _sbbWa::I64 = %MO_UU_Conv_W32_W64(I32[I64[Sp + 40] + (_sbbW6::I64 << 2)]);
           call MO_Touch(P64[Sp]);
           I64[Sp - 8] = block_cbcFK_info;
           R1 = _sbbVN::P64;
           I64[Sp + 24] = _sbbW6::I64 + 1;
           I64[Sp + 56] = _sbbWa::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubcKm; else goto cbcFL;
       ubcKm: // global
           call _cbcFK(R1) args: 0, res: 0, upd: 0;
       cbcFL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbcFK() //  [R1]
         { []
         }
     {offset
       cbcFK: // global
           _sbbVI::P64 = P64[Sp + 56];
           _sbbW2::I64 = I64[Sp + 48];
           _sbbW3::P64 = P64[Sp + 8];
           _sbbW4::P64 = P64[Sp + 16];
           _sbbW5::I64 = I64[Sp + 24];
           _sbbW7::I64 = I64[Sp + 40];
           _sbbWa::I64 = I64[Sp + 64];
           _sbbWc::I64 = I64[Sp + 32];
           if (R1 & 7 == 1) goto cbcJ0; else goto cbcJ4;
       cbcJ0: // global
           Hp = Hp + 80;
           _sbbWd::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbcJ7; else goto cbcJ2;
       cbcJ2: // global
           I64[Hp - 72] = sat_sbbWf_info;
           P64[Hp - 56] = _sbbW3::P64;
           P64[Hp - 48] = _sbbW4::P64;
           I64[Hp - 40] = _sbbW2::I64;
           I64[Hp - 32] = _sbbW5::I64;
           I64[Hp - 24] = _sbbW7::I64;
           I64[Hp - 16] = _sbbWc::I64;
           call MO_WriteBarrier();
           P64[_sbbVI::P64 + 8] = Hp - 72;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbbVI::P64);
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _sbbWa::I64;
           R1 = Hp - 7;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbcJ4: // global
           Hp = Hp + 80;
           _sbbWd::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbcJ7; else goto cbcJ6;
       cbcJ7: // global
           HpAlloc = 80;
           R1 = _sbbWd::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbcJ6: // global
           if (_sbbWa::I64 == 13) goto cbcJC; else goto cbcJd;
       cbcJC: // global
           if (_sbbWc::I64 == _sbbW7::I64) goto cbcJB; else goto cbcJA;
       cbcJB: // global
           I64[Hp - 72] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 64] = _sbbW3::P64;
           P64[Hp - 56] = _sbbW4::P64;
           I64[Hp - 48] = _sbbW2::I64;
           I64[Hp - 40] = _sbbW5::I64;
           I64[Hp - 32] = 0;
           I64[Hp - 24] = 0;
           _cbcG0::P64 = Hp - 71;
           Hp = Hp - 24;
           I64[Sp + 64] = _sbbW2::I64;
           P64[Sp + 48] = _sbbW3::P64;
           P64[Sp + 40] = _sbbW4::P64;
           I64[Sp + 32] = _sbbW5::I64;
           I64[Sp + 24] = 0;
           I64[Sp + 16] = 0;
           P64[Sp + 8] = _cbcG0::P64;
           goto ubcKh;
       cbcJA: // global
           I64[Hp - 72] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 64] = _sbbW3::P64;
           P64[Hp - 56] = _sbbW4::P64;
           I64[Hp - 48] = _sbbW2::I64;
           I64[Hp - 40] = _sbbW5::I64;
           I64[Hp - 32] = _sbbWc::I64;
           I64[Hp - 24] = _sbbW7::I64;
           _cbcFY::P64 = Hp - 71;
           Hp = Hp - 24;
           P64[Sp + 8] = _cbcFY::P64;
           I64[Sp + 16] = _sbbW7::I64;
           I64[Sp + 24] = _sbbWc::I64;
           I64[Sp + 32] = _sbbW5::I64;
           P64[Sp + 40] = _sbbW4::P64;
           P64[Sp + 48] = _sbbW3::P64;
           I64[Sp + 64] = _sbbW2::I64;
           goto ubcKh;
       ubcKh: // global
           call _cbcGC() args: 0, res: 0, upd: 0;
       cbcJd: // global
           I64[Hp - 72] = sat_sbbWk_info;
           P64[Hp - 56] = _sbbW3::P64;
           P64[Hp - 48] = _sbbW4::P64;
           I64[Hp - 40] = _sbbW2::I64;
           I64[Hp - 32] = _sbbW5::I64;
           I64[Hp - 24] = _sbbW7::I64;
           I64[Hp - 16] = _sbbWc::I64;
           call MO_WriteBarrier();
           P64[_sbbVI::P64 + 8] = Hp - 72;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbbVI::P64);
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _sbbWa::I64;
           R1 = Hp - 7;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcFK_info" {
     block_cbcFK_info:
         const _cbcFK;
         const 12041;
         const 12884901918;
         const SbcpG_srt+72;
 },
 _cbcGC() //  []
         { []
         }
     {offset
       cbcGC: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cbcJg; else goto cbcJf;
       cbcJg: // global
           HpAlloc = 72;
           I64[Sp] = block_cbcGC_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cbcJf: // global
           _sbbWo::I64 = I64[Sp + 64];
           _sbbWp::P64 = P64[Sp + 48];
           _sbbWq::P64 = P64[Sp + 40];
           _sbbWr::I64 = I64[Sp + 32];
           _sbbWs::I64 = I64[Sp + 24];
           _sbbWt::I64 = I64[Sp + 16];
           _sbbWu::P64 = P64[Sp + 8];
           if (_sbbWs::I64 == _sbbWt::I64) goto cbcJm; else goto cbcJl;
       cbcJm: // global
           I64[Hp - 64] = sat_sbbX0_info;
           P64[Hp - 56] = P64[Sp + 72];
           P64[Hp - 48] = _sbbWp::P64;
           P64[Hp - 40] = _sbbWq::P64;
           P64[Hp - 32] = _sbbWu::P64;
           I64[Hp - 24] = _sbbWo::I64;
           I64[Hp - 16] = _sbbWr::I64;
           I64[Hp - 8] = _sbbWs::I64;
           I64[Hp] = _sbbWt::I64;
           I64[Sp] = block_cbcIb_info;
           R2 = GHC.IO.Handle.Text.hGetChar3_closure+2;
           R1 = Hp - 63;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
       cbcJl: // global
           _sbbVI::P64 = P64[Sp + 56];
           _sbbWy::I64 = %MO_UU_Conv_W32_W64(I32[_sbbWo::I64 + (_sbbWs::I64 << 2)]);
           call MO_Touch(_sbbWp::P64);
           if (_sbbWy::I64 == 10) goto cbcJj; else goto cbcJi;
       cbcJj: // global
           I64[Hp - 64] = sat_sbbWE_info;
           P64[Hp - 48] = _sbbWp::P64;
           P64[Hp - 40] = _sbbWq::P64;
           I64[Hp - 32] = _sbbWo::I64;
           I64[Hp - 24] = _sbbWr::I64;
           I64[Hp - 16] = _sbbWs::I64;
           I64[Hp - 8] = _sbbWt::I64;
           call MO_WriteBarrier();
           P64[_sbbVI::P64 + 8] = Hp - 64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbbVI::P64);
           Hp = Hp - 8;
           R1 = GHC.IO.Handle.Text.hGetChar4_closure+1;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbcJi: // global
           call MO_WriteBarrier();
           P64[_sbbVI::P64 + 8] = _sbbWu::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbbVI::P64);
           Hp = Hp - 72;
           R1 = GHC.IO.Handle.Text.hGetChar5_closure+1;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcGC_info" {
     block_cbcGC_info:
         const _cbcGC;
         const 9097;
         const 12884901918;
         const SbcpG_srt+72;
 },
 _cbcIb() //  [R1]
         { []
         }
     {offset
       cbcIb: // global
           I64[Sp] = block_cbcId_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubcKi; else goto cbcIe;
       ubcKi: // global
           call _cbcId(R1) args: 0, res: 0, upd: 0;
       cbcIe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcIb_info" {
     block_cbcIb_info:
         const _cbcIb;
         const 26505;
         const 30;
 },
 _cbcId() //  [R1]
         { []
         }
     {offset
       cbcId: // global
           _sbbVI::P64 = P64[Sp + 56];
           if (R1 & 7 == 1) goto cbcJr; else goto cbcJs;
       cbcJr: // global
           _sbbWu::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_sbbVI::P64 + 8] = _sbbWu::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbbVI::P64);
           R1 = GHC.IO.Handle.Text.hGetChar5_closure+1;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbcJs: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbcJv; else goto cbcJu;
       cbcJv: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbcJu: // global
           _sbbWs::I64 = I64[Sp + 24];
           _sbbX6::P64 = P64[R1 + 6];
           _sbbX9::I64 = %MO_UU_Conv_W32_W64(I32[I64[Sp + 64] + (_sbbWs::I64 << 2)]);
           call MO_Touch(P64[Sp + 48]);
           if (_sbbX9::I64 == 10) goto cbcJy; else goto cbcJx;
       cbcJy: // global
           I64[Hp - 24] = sat_sbbXm_info;
           P64[Hp - 8] = _sbbX6::P64;
           I64[Hp] = _sbbWs::I64;
           call MO_WriteBarrier();
           P64[_sbbVI::P64 + 8] = Hp - 24;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbbVI::P64);
           R1 = GHC.IO.Handle.Text.hGetChar4_closure+1;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbcJx: // global
           call MO_WriteBarrier();
           P64[_sbbVI::P64 + 8] = _sbbX6::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbbVI::P64);
           Hp = Hp - 32;
           R1 = GHC.IO.Handle.Text.hGetChar5_closure+1;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcId_info" {
     block_cbcId_info:
         const _cbcId;
         const 26505;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.72617745 UTC

[section ""data" . GHC.IO.Handle.Text.hGetChar1_closure" {
     GHC.IO.Handle.Text.hGetChar1_closure:
         const GHC.IO.Handle.Text.hGetChar1_info;
         const 0;
 },
 GHC.IO.Handle.Text.hGetChar1_entry() //  [R2]
         { []
         }
     {offset
       cbcNd: // global
           R4 = GHC.IO.Handle.Text.hGetChar2_closure+2;
           R3 = R2;
           R2 = GHC.IO.Handle.Text.hGetChar6_closure;
           call GHC.IO.Handle.Internals.wantReadableHandle_1_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetChar1_info" {
     GHC.IO.Handle.Text.hGetChar1_info:
         const GHC.IO.Handle.Text.hGetChar1_entry;
         const 0;
         const 30064771086;
         const 8589934597;
         const SbcpG_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.729825375 UTC

[section ""data" . GHC.IO.Handle.Text.hGetChar_closure" {
     GHC.IO.Handle.Text.hGetChar_closure:
         const GHC.IO.Handle.Text.hGetChar_info;
         const 0;
 },
 GHC.IO.Handle.Text.hGetChar_entry() //  [R2]
         { []
         }
     {offset
       cbcNo: // global
           R2 = R2;
           call GHC.IO.Handle.Text.hGetChar1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetChar_info" {
     GHC.IO.Handle.Text.hGetChar_info:
         const GHC.IO.Handle.Text.hGetChar_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbcpG_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.732841974 UTC

[section ""data" . GHC.IO.Handle.Text.hGetBuf3_closure" {
     GHC.IO.Handle.Text.hGetBuf3_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.73831658 UTC

[section ""data" . $wunpack_nl_rb6WF_closure" {
     $wunpack_nl_rb6WF_closure:
         const $wunpack_nl_rb6WF_info;
 },
 $wunpack_nl_rb6WF_slow() //  [R1]
         { []
         }
     {offset
       cbcNx: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call $wunpack_nl_rb6WF_entry(R6,
                                        R5,
                                        R4,
                                        R3,
                                        R2,
                                        R1) args: 8, res: 0, upd: 8;
     }
 },
 $wunpackRB_sbbXO_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbcOm: // global
           _sbbXQ::I64 = R3;
           _sbbXP::P64 = R2;
           _sbbXO::P64 = R1;
           goto cbcNJ;
       cbcNJ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbcOq; else goto cbcOp;
       cbcOq: // global
           HpAlloc = 40;
           R3 = _sbbXQ::I64;
           R2 = _sbbXP::P64;
           R1 = _sbbXO::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbcOp: // global
           _sbbXF::I64 = I64[_sbbXO::P64 + 13];
           if (%MO_S_Ge_W64(_sbbXQ::I64,
                            _sbbXF::I64)) goto cbcOk; else goto cbcOl;
       cbcOk: // global
           _sbbXD::I64 = I64[_sbbXO::P64 + 5];
           _sbbXW::I64 = %MO_UU_Conv_W32_W64(I32[_sbbXD::I64 + (_sbbXQ::I64 << 2)]);
           if (_sbbXW::I64 != 10) goto cbcOs; else goto cbcOz;
       cbcOs: // global
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = _sbbXW::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _sbbXP::P64;
           _sbbXQ::I64 = _sbbXQ::I64 - 1;
           _sbbXP::P64 = Hp - 14;
           goto cbcNJ;
       cbcOz: // global
           if (%MO_S_Le_W64(_sbbXQ::I64,
                            _sbbXF::I64)) goto cbcOu; else goto cbcOy;
       cbcOu: // global
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = GHC.IO.Handle.Text.hGetChar4_closure+1;
           P64[Hp - 16] = _sbbXP::P64;
           _cbcO3::P64 = Hp - 30;
           Hp = Hp - 16;
           _sbbXQ::I64 = _sbbXQ::I64 - 1;
           _sbbXP::P64 = _cbcO3::P64;
           goto cbcNJ;
       cbcOy: // global
           if (I32[_sbbXD::I64 + ((_sbbXQ::I64 + -1) << 2)] == 13 :: W32) goto cbcOx; else goto cbcOw;
       cbcOx: // global
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = GHC.IO.Handle.Text.hGetChar4_closure+1;
           P64[Hp - 16] = _sbbXP::P64;
           _cbcOi::P64 = Hp - 30;
           Hp = Hp - 16;
           _sbbXQ::I64 = _sbbXQ::I64 - 2;
           _sbbXP::P64 = _cbcOi::P64;
           goto cbcNJ;
       cbcOw: // global
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = GHC.IO.Handle.Text.hGetChar4_closure+1;
           P64[Hp - 16] = _sbbXP::P64;
           _cbcOd::P64 = Hp - 30;
           Hp = Hp - 16;
           _sbbXQ::I64 = _sbbXQ::I64 - 1;
           _sbbXP::P64 = _cbcOd::P64;
           goto cbcNJ;
       cbcOl: // global
           Hp = Hp - 40;
           R1 = _sbbXP::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wunpackRB_sbbXO_info" {
     $wunpackRB_sbbXO_info:
         const $wunpackRB_sbbXO_entry;
         const 8589934592;
         const 13;
         const 12884901902;
 },
 $wunpack_nl_rb6WF_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cbcOD: // global
           _sbbXH::P64 = R6;
           _sbbXG::I64 = R5;
           _sbbXF::I64 = R4;
           _sbbXE::P64 = R3;
           _sbbXD::I64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cbcOE; else goto cbcOF;
       cbcOF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbcOH; else goto cbcOG;
       cbcOH: // global
           HpAlloc = 24;
           goto cbcOE;
       cbcOE: // global
           R1 = $wunpack_nl_rb6WF_closure;
           I64[Sp - 40] = _sbbXD::I64;
           P64[Sp - 32] = _sbbXE::P64;
           I64[Sp - 24] = _sbbXF::I64;
           I64[Sp - 16] = _sbbXG::I64;
           P64[Sp - 8] = _sbbXH::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       cbcOG: // global
           if (_sbbXF::I64 == _sbbXG::I64) goto cbcOC; else goto cbcOB;
       cbcOC: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _sbbXH::P64;
           P64[Hp] = GHC.IO.Handle.Text.hGetBuf3_closure+1;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbcOB: // global
           _sbbXN::I64 = %MO_UU_Conv_W32_W64(I32[_sbbXD::I64 + ((_sbbXG::I64 + -1) << 2)]);
           I64[Hp - 16] = $wunpackRB_sbbXO_info;
           I64[Hp - 8] = _sbbXD::I64;
           I64[Hp] = _sbbXF::I64;
           _cbcNH::P64 = Hp - 13;
           if (_sbbXN::I64 == 13) goto cbcP9; else goto cbcOT;
       cbcP9: // global
           I64[Sp - 24] = block_cbcP1_info;
           R3 = _sbbXG::I64 - 2;
           R2 = _sbbXH::P64;
           R1 = _cbcNH::P64;
           P64[Sp - 16] = _sbbXE::P64;
           I64[Sp - 8] = _sbbXG::I64;
           Sp = Sp - 24;
           call $wunpackRB_sbbXO_entry(R3, R2, R1) args: 8, res: 8, upd: 8;
       cbcOT: // global
           I64[Sp - 24] = block_cbcON_info;
           R3 = _sbbXG::I64 - 1;
           R2 = _sbbXH::P64;
           R1 = _cbcNH::P64;
           P64[Sp - 16] = _sbbXE::P64;
           I64[Sp - 8] = _sbbXG::I64;
           Sp = Sp - 24;
           call $wunpackRB_sbbXO_entry(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wunpack_nl_rb6WF_info" {
     $wunpack_nl_rb6WF_info:
         const $wunpack_nl_rb6WF_entry;
         const 0;
         const 14;
         const 25769803776;
         const 0;
         const 837;
         const $wunpack_nl_rb6WF_slow;
 },
 _cbcP1() //  [R1]
         { []
         }
     {offset
       cbcP1: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbcPc; else goto cbcPb;
       cbcPc: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbcPb: // global
           _sbbXG::I64 = I64[Sp + 16];
           call MO_Touch(P64[Sp + 8]);
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _sbbXG::I64 - 1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 31;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcP1_info" {
     block_cbcP1_info:
         const _cbcP1;
         const 130;
         const 30;
 },
 _cbcON() //  [R1]
         { []
         }
     {offset
       cbcON: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbcOW; else goto cbcOV;
       cbcOW: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbcOV: // global
           _sbbXG::I64 = I64[Sp + 16];
           call MO_Touch(P64[Sp + 8]);
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _sbbXG::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 31;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcON_info" {
     block_cbcON_info:
         const _cbcON;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.750822674 UTC

[section ""cstring" . GHC.IO.Handle.Text.hGetContents4_bytes" {
     GHC.IO.Handle.Text.hGetContents4_bytes:
         I8[] [104,71,101,116,67,111,110,116,101,110,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.75316503 UTC

[section ""data" . GHC.IO.Handle.Text.hGetContents3_closure" {
     GHC.IO.Handle.Text.hGetContents3_closure:
         const GHC.IO.Handle.Text.hGetContents3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Text.hGetContents3_entry() //  [R1]
         { []
         }
     {offset
       cbcQ7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbcQ8; else goto cbcQ9;
       cbcQ8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbcQ9: // global
           (_cbcQ4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbcQ4::I64 == 0) goto cbcQ6; else goto cbcQ5;
       cbcQ6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbcQ5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbcQ4::I64;
           R2 = GHC.IO.Handle.Text.hGetContents4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetContents3_info" {
     GHC.IO.Handle.Text.hGetContents3_info:
         const GHC.IO.Handle.Text.hGetContents3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.756619798 UTC

[section ""cstring" . lvl3_rb6WG_bytes" {
     lvl3_rb6WG_bytes:
         I8[] [13]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.758826209 UTC

[section ""data" . lvl4_rb6WH_closure" {
     lvl4_rb6WH_closure:
         const lvl4_rb6WH_info;
         const 0;
         const 0;
         const 0;
 },
 lvl4_rb6WH_entry() //  [R1]
         { []
         }
     {offset
       cbcQp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbcQq; else goto cbcQr;
       cbcQq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbcQr: // global
           (_cbcQm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbcQm::I64 == 0) goto cbcQo; else goto cbcQn;
       cbcQo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbcQn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbcQm::I64;
           R2 = lvl3_rb6WG_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_rb6WH_info" {
     lvl4_rb6WH_info:
         const lvl4_rb6WH_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.764827558 UTC

[section ""data" . $wlvl_rb6WI_closure" {
     $wlvl_rb6WI_closure:
         const $wlvl_rb6WI_info;
         const 0;
 },
 sat_sbbYH_entry() //  [R1]
         { []
         }
     {offset
       cbcQP: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbcQQ; else goto cbcQR;
       cbcQQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbcQR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbcQI_info;
           _sbbYt::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sbbYt::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubcRi; else goto cbcQJ;
       ubcRi: // global
           call _cbcQI(R1) args: 0, res: 0, upd: 0;
       cbcQJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbbYH_info" {
     sat_sbbYH_info:
         const sat_sbbYH_entry;
         const 2;
         const 18;
 },
 _cbcQI() //  [R1]
         { []
         }
     {offset
       cbcQI: // global
           if (R1 & 7 == 1) goto cbcQM; else goto cbcQN;
       cbcQM: // global
           _sbbYt::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cbcQU_info;
           R1 = _sbbYt::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ubcRh; else goto cbcQW;
       ubcRh: // global
           call _cbcQU(R1) args: 0, res: 0, upd: 0;
       cbcQW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       cbcQN: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbcQI_info" {
     block_cbcQI_info:
         const _cbcQI;
         const 1;
         const 30;
 },
 _cbcQU() //  [R1]
         { []
         }
     {offset
       cbcQU: // global
           if (R1 & 7 == 1) goto cbcR2; else goto cbcR9;
       cbcR2: // global
           Hp = Hp + 16;
           _sbbYA::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbcRc; else goto cbcR4;
       cbcR4: // global
           _sbbYB::P64 = P64[_sbbYA::P64 + 7];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _sbbYB::P64;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cbcR9: // global
           Hp = Hp + 16;
           _sbbYA::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbcRc; else goto cbcRb;
       cbcRc: // global
           HpAlloc = 16;
           R1 = _sbbYA::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbcRb: // global
           _sbbYD::P64 = P64[_sbbYA::P64 + 6];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _sbbYD::P64;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbcQU_info" {
     block_cbcQU_info:
         const _cbcQU;
         const 0;
         const 30;
 },
 $wlvl_rb6WI_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cbcRl: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cbcRp; else goto cbcRo;
       cbcRp: // global
           HpAlloc = 104;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $wlvl_rb6WI_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbcRo: // global
           I64[Hp - 96] = sat_sbbYH_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R6;
           I64[Hp - 64] = GHC.Base.Just_con_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = GHC.IO.Exception.IOError_con_info;
           P64[Hp - 40] = Hp - 62;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = GHC.IO.Handle.Text.hGetContents3_closure;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           P64[Hp] = Hp - 96;
           R3 = Hp - 47;
           R2 = GHC.IO.Exception.$fExceptionIOException_closure;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wlvl_rb6WI_info" {
     $wlvl_rb6WI_info:
         const $wlvl_rb6WI_entry;
         const 0;
         const 30064771086;
         const 21474836505;
         const SbcpG_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.773581104 UTC

[section ""cstring" . lvl5_rb6WJ_bytes" {
     lvl5_rb6WJ_bytes:
         I8[] [100,101,108,97,121,101,100,32,114,101,97,100,32,111,110,32,99,108,111,115,101,100,32,104,97,110,100,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.775855476 UTC

[section ""data" . lvl6_rb6WK_closure" {
     lvl6_rb6WK_closure:
         const lvl6_rb6WK_info;
         const 0;
         const 0;
         const 0;
 },
 lvl6_rb6WK_entry() //  [R1]
         { []
         }
     {offset
       cbcS6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbcS7; else goto cbcS8;
       cbcS7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbcS8: // global
           (_cbcS3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbcS3::I64 == 0) goto cbcS5; else goto cbcS4;
       cbcS5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbcS4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbcS3::I64;
           R2 = lvl5_rb6WJ_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl6_rb6WK_info" {
     lvl6_rb6WK_info:
         const lvl6_rb6WK_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.781317872 UTC

[section ""data" . lvl7_rb6WL_closure" {
     lvl7_rb6WL_closure:
         const lvl7_rb6WL_info;
         const 0;
 },
 sat_sbbYN_entry() //  [R1]
         { []
         }
     {offset
       cbcSr: // global
           _sbbYN::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbcSs; else goto cbcSt;
       cbcSt: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cbcSv; else goto cbcSu;
       cbcSv: // global
           HpAlloc = 72;
           goto cbcSs;
       cbcSs: // global
           R1 = _sbbYN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbcSu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbbYN::P64;
           _sbbYJ::P64 = P64[_sbbYN::P64 + 16];
           I64[Hp - 64] = GHC.Base.Just_con_info;
           P64[Hp - 56] = _sbbYJ::P64;
           I64[Hp - 48] = GHC.IO.Exception.IOError_con_info;
           P64[Hp - 40] = Hp - 62;
           P64[Hp - 32] = GHC.IO.Exception.IllegalOperation_closure+1;
           P64[Hp - 24] = GHC.IO.Handle.Text.hGetContents3_closure;
           P64[Hp - 16] = lvl6_rb6WK_closure;
           P64[Hp - 8] = GHC.Base.Nothing_closure+1;
           P64[Hp] = GHC.Base.Nothing_closure+1;
           R2 = Hp - 47;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbbYN_info" {
     sat_sbbYN_info:
         const sat_sbbYN_entry;
         const 1;
         const 1407379178520592;
         const SbcpG_srt;
 },
 lvl7_rb6WL_entry() //  [R2]
         { []
         }
     {offset
       cbcSw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbcSA; else goto cbcSz;
       cbcSA: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = lvl7_rb6WL_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbcSz: // global
           I64[Hp - 16] = sat_sbbYN_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl7_rb6WL_info" {
     lvl7_rb6WL_info:
         const lvl7_rb6WL_entry;
         const 0;
         const 3659178992205838;
         const 8589934597;
         const SbcpG_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.786629616 UTC

[section ""cstring" . lvl8_rb6WM_bytes" {
     lvl8_rb6WM_bytes:
         I8[] [105,108,108,101,103,97,108,32,104,97,110,100,108,101,32,116,121,112,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.78884047 UTC

[section ""data" . lvl9_rb6WN_closure" {
     lvl9_rb6WN_closure:
         const lvl9_rb6WN_info;
         const 0;
         const 0;
         const 0;
 },
 lvl9_rb6WN_entry() //  [R1]
         { []
         }
     {offset
       cbcT3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbcT4; else goto cbcT5;
       cbcT4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbcT5: // global
           (_cbcT0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbcT0::I64 == 0) goto cbcT2; else goto cbcT1;
       cbcT2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbcT1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbcT0::I64;
           R2 = lvl8_rb6WM_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl9_rb6WN_info" {
     lvl9_rb6WN_info:
         const lvl9_rb6WN_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.793836229 UTC

[section ""data" . lvl10_rb6WO_closure" {
     lvl10_rb6WO_closure:
         const lvl10_rb6WO_info;
         const 0;
 },
 sat_sbbYS_entry() //  [R1]
         { []
         }
     {offset
       cbcTo: // global
           _sbbYS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbcTp; else goto cbcTq;
       cbcTq: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cbcTs; else goto cbcTr;
       cbcTs: // global
           HpAlloc = 72;
           goto cbcTp;
       cbcTp: // global
           R1 = _sbbYS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbcTr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbbYS::P64;
           _sbbYO::P64 = P64[_sbbYS::P64 + 16];
           I64[Hp - 64] = GHC.Base.Just_con_info;
           P64[Hp - 56] = _sbbYO::P64;
           I64[Hp - 48] = GHC.IO.Exception.IOError_con_info;
           P64[Hp - 40] = Hp - 62;
           P64[Hp - 32] = GHC.IO.Exception.IllegalOperation_closure+1;
           P64[Hp - 24] = GHC.IO.Handle.Text.hGetContents3_closure;
           P64[Hp - 16] = lvl9_rb6WN_closure;
           P64[Hp - 8] = GHC.Base.Nothing_closure+1;
           P64[Hp] = GHC.Base.Nothing_closure+1;
           R2 = Hp - 47;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbbYS_info" {
     sat_sbbYS_info:
         const sat_sbbYS_entry;
         const 1;
         const 4785078899048464;
         const SbcpG_srt;
 },
 lvl10_rb6WO_entry() //  [R2]
         { []
         }
     {offset
       cbcTt: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbcTx; else goto cbcTw;
       cbcTx: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = lvl10_rb6WO_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbcTw: // global
           I64[Hp - 16] = sat_sbbYS_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl10_rb6WO_info" {
     lvl10_rb6WO_info:
         const lvl10_rb6WO_entry;
         const 0;
         const 13792278153789454;
         const 8589934597;
         const SbcpG_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.815105504 UTC

[section ""data" . GHC.IO.Handle.Text.hGetContents2_closure" {
     GHC.IO.Handle.Text.hGetContents2_closure:
         const GHC.IO.Handle.Text.hGetContents2_info;
         const 0;
 },
 sat_sbc1c_entry() //  [R1]
         { []
         }
     {offset
       cbcUR: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cbcUS; else goto cbcUT;
       cbcUS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbcUT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cbcUP_info;
           _sbbYT::P64 = P64[R1 + 16];
           _sbbZk::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _sbbYT::P64;
           P64[Sp - 24] = _sbbZk::P64;
           Sp = Sp - 40;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbc1c_info" {
     sat_sbc1c_info:
         const sat_sbc1c_entry;
         const 3;
         const 141733920783;
         const SbcpG_srt+136;
 },
 _cbcUP() //  [R1]
         { []
         }
     {offset
       cbcUP: // global
           I64[Sp - 24] = block_cbcUW_info;
           _sbc10::P64 = P64[R1 + 31];
           _sbc11::P64 = P64[R1 + 39];
           _sbc12::P64 = P64[R1 + 47];
           R1 = P64[R1 + 15];
           P64[Sp - 16] = _sbc11::P64;
           P64[Sp - 8] = _sbc12::P64;
           P64[Sp] = _sbc10::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubcVl; else goto cbcUY;
       ubcVl: // global
           call _cbcUW(R1) args: 0, res: 0, upd: 0;
       cbcUY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cbcUP_info" {
     block_cbcUP_info:
         const _cbcUP;
         const 2;
         const 141733920798;
         const SbcpG_srt+136;
 },
 _cbcUW() //  [R1]
         { []
         }
     {offset
       cbcUW: // global
           if (I32[I64[R1 - 1] + 20] == 4 :: W32) goto cbcV9; else goto cbcV4;
       cbcV9: // global
           _sbbZk::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_cbcV7_info;
           R1 = _sbbZk::P64;
           Sp = Sp + 40;
           if (R1 & 7 != 0) goto ubcVm; else goto cbcVa;
       ubcVm: // global
           call _cbcV7(R1) args: 0, res: 0, upd: 0;
       cbcVa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       cbcV4: // global
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 24];
           R3 = R1;
           R2 = P64[Sp + 32];
           Sp = Sp + 48;
           call $wlvl_rb6WI_entry(R6,
                                  R5,
                                  R4,
                                  R3,
                                  R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbcUW_info" {
     block_cbcUW_info:
         const _cbcUW;
         const 5;
         const 141733920798;
         const SbcpG_srt+136;
 },
 _cbcV7() //  [R1]
         { []
         }
     {offset
       cbcV7: // global
           if (I64[R1 + 39] == I64[R1 + 47]) goto cbcVj; else goto cbcVi;
       cbcVj: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cbcVi: // global
           R1 = lvl4_rb6WH_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbcV7_info" {
     block_cbcV7_info:
         const _cbcV7;
         const 0;
         const 4294967326;
         const SbcpG_srt+176;
 },
 sat_sbc1e_entry() //  [R1, R2]
         { []
         }
     {offset
       cbcVn: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbcVo; else goto cbcVp;
       cbcVo: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbcVp: // global
           I64[Sp - 32] = block_cbcUq_info;
           _sbbYT::P64 = P64[R1 + 6];
           _sbbZ0::P64 = P64[R1 + 14];
           _sbbZk::P64 = P64[R1 + 22];
           R1 = R2;
           P64[Sp - 24] = _sbbYT::P64;
           P64[Sp - 16] = _sbbZ0::P64;
           P64[Sp - 8] = _sbbZk::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubcVF; else goto cbcUr;
       ubcVF: // global
           call _cbcUq(R1) args: 0, res: 0, upd: 0;
       cbcUr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbc1e_info" {
     sat_sbc1e_info:
         const sat_sbc1e_entry;
         const 3;
         const 426623396478984;
         const 8589934597;
         const SbcpG_srt+56;
 },
 _cbcUq() //  [R1]
         { []
         }
     {offset
       cbcUq: // global
           I64[Sp - 16] = block_cbcUv_info;
           R2 = P64[R1 + 7];
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcUq_info" {
     block_cbcUq_info:
         const _cbcUq;
         const 3;
         const 426623396479006;
         const SbcpG_srt+56;
 },
 _cbcUv() //  [R1]
         { []
         }
     {offset
       cbcUv: // global
           I64[Sp] = block_cbcUz_info;
           R3 = GHC.IO.Exception.$fExceptionIOException4_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcUv_info" {
     block_cbcUv_info:
         const _cbcUv;
         const 5;
         const 426623396479006;
         const SbcpG_srt+56;
 },
 _cbcUz() //  [R1]
         { []
         }
     {offset
       cbcUz: // global
           if (R1 & 7 == 1) goto cbcVv; else goto cbcVy;
       cbcVv: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 48;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       cbcVy: // global
           I64[Sp] = block_cbcUE_info;
           R2 = P64[Sp + 32];
           call GHC.IO.Handle.Internals.hClose_help1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcUz_info" {
     block_cbcUz_info:
         const _cbcUz;
         const 5;
         const 416611827742;
         const SbcpG_srt+136;
 },
 _cbcUE() //  [R1]
         { []
         }
     {offset
       cbcUE: // global
           I64[Sp] = block_cbcUG_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubcVE; else goto cbcUH;
       ubcVE: // global
           call _cbcUG(R1) args: 0, res: 0, upd: 0;
       cbcUH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcUE_info" {
     block_cbcUE_info:
         const _cbcUE;
         const 645;
         const 141733920798;
         const SbcpG_srt+136;
 },
 _cbcUG() //  [R1]
         { []
         }
     {offset
       cbcUG: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cbcVC; else goto cbcVB;
       cbcVC: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbcVB: // global
           _sbc0U::P64 = P64[R1 + 7];
           I64[Hp - 56] = sat_sbc1c_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _sbc0U::P64;
           P64[Hp] = Hp - 56;
           R1 = Hp - 15;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcUG_info" {
     block_cbcUG_info:
         const _cbcUG;
         const 645;
         const 141733920798;
         const SbcpG_srt+136;
 },
 sat_sbc0b_entry() //  [R1]
         { []
         }
     {offset
       cbcWD: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cbcWE; else goto cbcWF;
       cbcWE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbcWF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 64] = block_cbcWA_info;
           _sbbZw::P64 = P64[R1 + 16];
           _sbbZx::P64 = P64[R1 + 24];
           _sbbZv::I64 = I64[R1 + 40];
           _sbbZy::I64 = I64[R1 + 48];
           _sbbZA::I64 = I64[R1 + 56];
           R1 = P64[R1 + 32];
           I64[Sp - 56] = _sbbZv::I64;
           P64[Sp - 48] = _sbbZw::P64;
           P64[Sp - 40] = _sbbZx::P64;
           I64[Sp - 32] = _sbbZy::I64;
           I64[Sp - 24] = _sbbZA::I64;
           Sp = Sp - 64;
           if (R1 & 7 != 0) goto ubcWU; else goto cbcWB;
       ubcWU: // global
           call _cbcWA(R1) args: 0, res: 0, upd: 0;
       cbcWB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbc0b_info" {
     sat_sbc0b_info:
         const sat_sbc0b_entry;
         const 12884901891;
         const 15;
 },
 _cbcWA() //  [R1]
         { []
         }
     {offset
       cbcWA: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbcWK; else goto cbcWJ;
       cbcWK: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbcWJ: // global
           _sbbZv::I64 = I64[Sp + 8];
           _sbbZw::P64 = P64[Sp + 16];
           _sbbZx::P64 = P64[Sp + 24];
           _sbbZy::I64 = I64[Sp + 32];
           _sbbZA::I64 = I64[Sp + 40];
           _sbc09::I64 = I64[R1 + 7];
           if (_sbc09::I64 == _sbbZA::I64) goto cbcWT; else goto cbcWQ;
       cbcWT: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbbZw::P64;
           P64[Hp - 32] = _sbbZx::P64;
           I64[Hp - 24] = _sbbZv::I64;
           I64[Hp - 16] = _sbbZy::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cbcWQ: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbbZw::P64;
           P64[Hp - 32] = _sbbZx::P64;
           I64[Hp - 24] = _sbbZv::I64;
           I64[Hp - 16] = _sbbZy::I64;
           I64[Hp - 8] = _sbc09::I64;
           I64[Hp] = _sbbZA::I64;
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbcWA_info" {
     block_cbcWA_info:
         const _cbcWA;
         const 1605;
         const 30;
 },
 sat_sbc0I_entry() //  [R1]
         { []
         }
     {offset
       cbcWV: // global
           if ((Sp + -88) < SpLim) (likely: False) goto cbcWW; else goto cbcWX;
       cbcWW: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbcWX: // global
           I64[Sp - 40] = block_cbcVL_info;
           _sbbYT::P64 = P64[R1 + 7];
           _sbbZ0::P64 = P64[R1 + 15];
           _sbbZ9::P64 = P64[R1 + 23];
           _sbbZe::P64 = P64[R1 + 31];
           R1 = P64[R1 + 39];
           P64[Sp - 32] = _sbbYT::P64;
           P64[Sp - 24] = _sbbZ0::P64;
           P64[Sp - 16] = _sbbZ9::P64;
           P64[Sp - 8] = _sbbZe::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubcZ1; else goto cbcVM;
       ubcZ1: // global
           call _cbcVL(R1) args: 0, res: 0, upd: 0;
       cbcVM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbc0I_info" {
     sat_sbc0I_info:
         const sat_sbc0I_entry;
         const 5;
         const 70373039144968;
         const 4294967299;
         const SbcpG_srt+80;
 },
 _cbcVL() //  [R1]
         { []
         }
     {offset
       cbcVL: // global
           _sbbZr::I64 = I64[R1 + 39];
           _sbbZs::I64 = I64[R1 + 47];
           _sbc0e::I64 = _sbbZs::I64 - _sbbZr::I64;
           if (_sbc0e::I64 == 0) goto cbcXX; else goto ubcYJ;
       cbcXX: // global
           I64[Sp] = block_cbcXU_info;
           R3 = R1;
           R2 = P64[Sp + 16];
           call GHC.IO.Handle.Internals.hLookAhead_2_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
       ubcYJ: // global
           _sbbZo::P64 = P64[R1 + 7];
           _sbbZp::P64 = P64[R1 + 15];
           _sbbZn::I64 = I64[R1 + 23];
           _sbbZq::I64 = I64[R1 + 31];
           if (_sbc0e::I64 != 1) goto ubcYK; else goto cbcYa;
       ubcYK: // global
           P64[Sp - 40] = _sbbZo::P64;
           P64[Sp - 32] = _sbbZp::P64;
           I64[Sp - 24] = _sbbZq::I64;
           I64[Sp - 16] = _sbbZr::I64;
           I64[Sp - 8] = _sbbZs::I64;
           I64[Sp] = _sbbZn::I64;
           Sp = Sp - 40;
           call _cbcYi() args: 0, res: 0, upd: 0;
       cbcYa: // global
           I64[Sp - 48] = block_cbcY9_info;
           R1 = P64[Sp + 32];
           P64[Sp - 40] = _sbbZo::P64;
           P64[Sp - 32] = _sbbZp::P64;
           I64[Sp - 24] = _sbbZq::I64;
           I64[Sp - 16] = _sbbZr::I64;
           I64[Sp - 8] = _sbbZs::I64;
           I64[Sp] = _sbbZn::I64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto ubcYU; else goto cbcYc;
       ubcYU: // global
           call _cbcY9(R1) args: 0, res: 0, upd: 0;
       cbcYc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcVL_info" {
     block_cbcVL_info:
         const _cbcVL;
         const 4;
         const 70373039144990;
         const SbcpG_srt+80;
 },
 _cbcXU() //  [R1]
         { []
         }
     {offset
       cbcXU: // global
           I64[Sp] = block_cbcXW_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubcZ3; else goto cbcY0;
       ubcZ3: // global
           call _cbcXW(R1) args: 0, res: 0, upd: 0;
       cbcY0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcXU_info" {
     block_cbcXU_info:
         const _cbcXU;
         const 4;
         const 4294967326;
         const SbcpG_srt+192;
 },
 _cbcXW() //  [R1]
         { []
         }
     {offset
       cbcXW: // global
           I64[Sp] = I64[R1 + 23];
           P64[Sp - 8] = P64[R1 + 7];
           P64[Sp - 16] = P64[R1 + 15];
           I64[Sp - 24] = I64[R1 + 31];
           I64[Sp - 32] = I64[R1 + 39];
           I64[Sp - 40] = I64[R1 + 47];
           Sp = Sp - 40;
           call _sbbZt() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbcXW_info" {
     block_cbcXW_info:
         const _cbcXW;
         const 4;
         const 4294967326;
         const SbcpG_srt+192;
 },
 _cbcY9() //  [R1]
         { []
         }
     {offset
       cbcY9: // global
           if (R1 & 7 == 1) goto ubcYL; else goto cbcYj;
       ubcYL: // global
           Sp = Sp + 8;
           call _cbcYi() args: 0, res: 0, upd: 0;
       cbcYj: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbcYo; else goto cbcYn;
       cbcYo: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbcYn: // global
           _sbbZ0::P64 = P64[Sp + 64];
           _sbbZn::I64 = I64[Sp + 48];
           _sbbZo::P64 = P64[Sp + 8];
           _sbbZp::P64 = P64[Sp + 16];
           _sbbZq::I64 = I64[Sp + 24];
           _sbbZr::I64 = I64[Sp + 32];
           _sbbZs::I64 = I64[Sp + 40];
           _sbc0s::I64 = %MO_UU_Conv_W32_W64(I32[_sbbZn::I64 + (_sbbZr::I64 << 2)]);
           call MO_Touch(_sbbZo::P64);
           if (_sbc0s::I64 == 13) goto cbcYA; else goto cbcYs;
       cbcYA: // global
           I32[_sbbZn::I64] = 13 :: W32;
           call MO_Touch(_sbbZo::P64);
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbbZo::P64;
           P64[Hp - 32] = _sbbZp::P64;
           I64[Hp - 24] = _sbbZn::I64;
           I64[Hp - 16] = _sbbZq::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 1;
           I64[Sp + 48] = block_cbcYx_info;
           R3 = Hp - 47;
           R2 = _sbbZ0::P64;
           Sp = Sp + 48;
           call GHC.IO.Handle.Internals.hLookAhead_2_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
       cbcYs: // global
           Hp = Hp - 56;
           I64[Sp + 8] = _sbbZs::I64;
           I64[Sp + 16] = _sbbZr::I64;
           I64[Sp + 24] = _sbbZq::I64;
           P64[Sp + 32] = _sbbZp::P64;
           P64[Sp + 40] = _sbbZo::P64;
           I64[Sp + 48] = _sbbZn::I64;
           Sp = Sp + 8;
           call _sbbZt() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbcY9_info" {
     block_cbcY9_info:
         const _cbcY9;
         const 3850;
         const 70373039144990;
         const SbcpG_srt+80;
 },
 _cbcYi() //  []
         { []
         }
     {offset
       cbcYi: // global
           I64[Sp + 40] = I64[Sp + 40];
           _sbbZA::I64 = I64[Sp + 32];
           P64[Sp + 32] = P64[Sp];
           _sbbZz::I64 = I64[Sp + 24];
           P64[Sp + 24] = P64[Sp + 8];
           I64[Sp + 16] = I64[Sp + 16];
           I64[Sp + 8] = _sbbZz::I64;
           I64[Sp] = _sbbZA::I64;
           call _sbbZt() args: 0, res: 0, upd: 0;
     }
 },
 _cbcYx() //  [R1]
         { []
         }
     {offset
       cbcYx: // global
           I64[Sp] = block_cbcYz_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubcZ8; else goto cbcYC;
       ubcZ8: // global
           call _cbcYz(R1) args: 0, res: 0, upd: 0;
       cbcYC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcYx_info" {
     block_cbcYx_info:
         const _cbcYx;
         const 4;
         const 4294967326;
         const SbcpG_srt+192;
 },
 _cbcYz() //  [R1]
         { []
         }
     {offset
       cbcYz: // global
           I64[Sp] = I64[R1 + 23];
           P64[Sp - 8] = P64[R1 + 7];
           P64[Sp - 16] = P64[R1 + 15];
           I64[Sp - 24] = I64[R1 + 31];
           I64[Sp - 32] = I64[R1 + 39];
           I64[Sp - 40] = I64[R1 + 47];
           Sp = Sp - 40;
           call _sbbZt() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbcYz_info" {
     block_cbcYz_info:
         const _cbcYz;
         const 4;
         const 4294967326;
         const SbcpG_srt+192;
 },
 _sbbZt() //  []
         { []
         }
     {offset
       sbbZt: // global
           I64[Sp - 8] = block_cbcVV_info;
           R2 = P64[Sp + 48];
           Sp = Sp - 8;
           call GHC.IO.Handle.Text.hGetContents2_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _cbcVV() //  [R1]
         { []
         }
     {offset
       cbcVV: // global
           I64[Sp] = block_cbcVX_info;
           _sbbZD::P64 = R1;
           R1 = P64[Sp + 80];
           P64[Sp + 80] = _sbbZD::P64;
           if (R1 & 7 != 0) goto ubcYW; else goto cbcVY;
       ubcYW: // global
           call _cbcVX(R1) args: 0, res: 0, upd: 0;
       cbcVY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcVV_info" {
     block_cbcVV_info:
         const _cbcVV;
         const 6602;
         const 30;
 },
 _cbcVX() //  [R1]
         { []
         }
     {offset
       cbcVX: // global
           _sbbZv::I64 = I64[Sp + 48];
           _sbbZw::P64 = P64[Sp + 40];
           _sbbZz::I64 = I64[Sp + 16];
           _sbbZA::I64 = I64[Sp + 8];
           _sbbZD::P64 = P64[Sp + 80];
           if (R1 & 7 == 1) goto cbcX2; else goto cbcXC;
       cbcX2: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cbcX5; else goto cbcX4;
       cbcX5: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbcX4: // global
           if (_sbbZz::I64 == _sbbZA::I64) goto cbcXw; else goto cbcXp;
       cbcXw: // global
           I64[Hp - 72] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 64] = _sbbZw::P64;
           P64[Hp - 56] = P64[Sp + 32];
           I64[Hp - 48] = _sbbZv::I64;
           I64[Hp - 40] = I64[Sp + 24];
           I64[Hp - 32] = 0;
           I64[Hp - 24] = 0;
           _sbbZ0::P64 = P64[Sp + 64];
           _sbbZ9::P64 = P64[Sp + 72];
           call MO_WriteBarrier();
           P64[_sbbZ9::P64 + 8] = Hp - 71;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbbZ9::P64);
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _sbbZ0::P64;
           P64[Hp] = _sbbZD::P64;
           R1 = Hp - 15;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbcXp: // global
           Hp = Hp - 80;
           I64[Sp + 56] = _sbbZA::I64 - 1;
           P64[Sp + 80] = _sbbZD::P64;
           Sp = Sp + 8;
           call _cbcWc() args: 0, res: 0, upd: 0;
       cbcXC: // global
           I64[Sp] = block_cbcWp_info;
           R6 = _sbbZD::P64;
           R5 = _sbbZA::I64;
           R4 = _sbbZz::I64;
           R3 = _sbbZw::P64;
           R2 = _sbbZv::I64;
           call $wunpack_nl_rb6WF_entry(R6,
                                        R5,
                                        R4,
                                        R3,
                                        R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcVX_info" {
     block_cbcVX_info:
         const _cbcVX;
         const 6602;
         const 30;
 },
 _cbcWc() //  []
         { []
         }
     {offset
       cbcWc: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbcXk; else goto cbcXj;
       cbcXk: // global
           HpAlloc = 40;
           I64[Sp] = block_cbcWc_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cbcXj: // global
           _sbbZO::P64 = P64[Sp + 72];
           _sbbZP::I64 = I64[Sp + 48];
           if (%MO_S_Ge_W64(_sbbZP::I64,
                            I64[Sp + 8])) goto cbcXm; else goto cbcXn;
       cbcXm: // global
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = %MO_UU_Conv_W32_W64(I32[I64[Sp + 40] + (_sbbZP::I64 << 2)]);
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _sbbZO::P64;
           P64[Sp + 72] = Hp - 14;
           I64[Sp + 48] = _sbbZP::I64 - 1;
           call _cbcWc() args: 0, res: 0, upd: 0;
       cbcXn: // global
           Hp = Hp - 40;
           P64[Sp + 72] = _sbbZO::P64;
           Sp = Sp + 16;
           call _cbcX7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbcWc_info" {
     block_cbcWc_info:
         const _cbcWc;
         const 3273;
         const 30;
 },
 _cbcX7() //  []
         { []
         }
     {offset
       cbcX7: // global
           Hp = Hp + 80;
           _sbbZI::P64 = P64[Sp + 56];
           if (Hp > HpLim) (likely: False) goto cbcXh; else goto cbcXg;
       cbcXh: // global
           HpAlloc = 80;
           I64[Sp - 8] = block_cbcX6_info;
           R1 = _sbbZI::P64;
           Sp = Sp - 8;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbcXg: // global
           _sbbZ0::P64 = P64[Sp + 40];
           _sbbZ9::P64 = P64[Sp + 48];
           _sbbZv::I64 = I64[Sp + 24];
           _sbbZw::P64 = P64[Sp + 16];
           _sbbZx::P64 = P64[Sp + 8];
           _sbbZy::I64 = I64[Sp];
           call MO_Touch(_sbbZw::P64);
           I64[Hp - 72] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 64] = _sbbZw::P64;
           P64[Hp - 56] = _sbbZx::P64;
           I64[Hp - 48] = _sbbZv::I64;
           I64[Hp - 40] = _sbbZy::I64;
           I64[Hp - 32] = 0;
           I64[Hp - 24] = 0;
           call MO_WriteBarrier();
           P64[_sbbZ9::P64 + 8] = Hp - 71;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbbZ9::P64);
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _sbbZ0::P64;
           P64[Hp] = _sbbZI::P64;
           R1 = Hp - 15;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cbcX6() //  [R1]
         { []
         }
     {offset
       cbcX6: // global
           P64[Sp + 64] = R1;
           Sp = Sp + 8;
           call _cbcX7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbcX6_info" {
     block_cbcX6_info:
         const _cbcX6;
         const 9800;
         const 30;
 },
 _cbcWp() //  [R1]
         { []
         }
     {offset
       cbcWp: // global
           I64[Sp] = block_cbcWr_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubcZ0; else goto cbcWs;
       ubcZ0: // global
           call _cbcWr(R1) args: 0, res: 0, upd: 0;
       cbcWs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcWp_info" {
     block_cbcWp_info:
         const _cbcWp;
         const 39370;
         const 30;
 },
 _cbcWr() //  [R1]
         { []
         }
     {offset
       cbcWr: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cbcXG; else goto cbcXF;
       cbcXG: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbcXF: // global
           _sbc06::P64 = P64[R1 + 7];
           _sbc07::P64 = P64[R1 + 15];
           I64[Hp - 80] = sat_sbc0b_info;
           P64[Hp - 64] = P64[Sp + 40];
           P64[Hp - 56] = P64[Sp + 32];
           P64[Hp - 48] = _sbc07::P64;
           I64[Hp - 40] = I64[Sp + 48];
           I64[Hp - 32] = I64[Sp + 24];
           I64[Hp - 24] = I64[Sp + 8];
           _sbbZ0::P64 = P64[Sp + 64];
           _sbbZ9::P64 = P64[Sp + 72];
           call MO_WriteBarrier();
           P64[_sbbZ9::P64 + 8] = Hp - 80;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbbZ9::P64);
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _sbbZ0::P64;
           P64[Hp] = _sbc06::P64;
           R1 = Hp - 15;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcWr_info" {
     block_cbcWr_info:
         const _cbcWr;
         const 39370;
         const 30;
 },
 act_sbbYX_entry() //  [R1, R2]
         { []
         }
     {offset
       cbcZa: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbcZb; else goto cbcZc;
       cbcZb: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbcZc: // global
           I64[Sp - 16] = block_cbcU9_info;
           _sbbYT::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _sbbYT::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubcZs; else goto cbcUa;
       ubcZs: // global
           call _cbcU9(R1) args: 0, res: 0, upd: 0;
       cbcUa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . act_sbbYX_info" {
     act_sbbYX_info:
         const act_sbbYX_entry;
         const 1;
         const 1077568639860745;
         const 8589934597;
         const SbcpG_srt+56;
 },
 _cbcU9() //  [R1]
         { []
         }
     {offset
       cbcU9: // global
           I64[Sp - 24] = block_cbcUe_info;
           _sbbZ0::P64 = R1;
           _sbbZ9::P64 = P64[R1 + 71];
           _sbbZe::P64 = P64[R1 + 111];
           R1 = P64[R1 + 39];
           P64[Sp - 16] = _sbbZ9::P64;
           P64[Sp - 8] = _sbbZe::P64;
           P64[Sp] = _sbbZ0::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubcZr; else goto cbcUf;
       ubcZr: // global
           call _cbcUe(R1) args: 0, res: 0, upd: 0;
       cbcUf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcU9_info" {
     block_cbcU9_info:
         const _cbcU9;
         const 1;
         const 1077568639860766;
         const SbcpG_srt+56;
 },
 _cbcUe() //  [R1]
         { []
         }
     {offset
       cbcUe: // global
           _sbbYT::P64 = P64[Sp + 32];
           _cbcZp::P64 = R1 & 7;
           if (_cbcZp::P64 == 1) goto cbcZk; else goto ubcZq;
       cbcZk: // global
           R2 = _sbbYT::P64;
           Sp = Sp + 40;
           call lvl7_rb6WL_entry(R2) args: 8, res: 0, upd: 8;
       ubcZq: // global
           if (_cbcZp::P64 == 2) goto cbcZl; else goto cbcZh;
       cbcZl: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cbcZo; else goto cbcZn;
       cbcZo: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbcZn: // global
           _sbbZ9::P64 = P64[Sp + 8];
           _sbbZk::P64 = P64[_sbbZ9::P64 + 8];
           I64[Hp - 72] = sat_sbc1e_info;
           P64[Hp - 64] = _sbbYT::P64;
           _sbbZ0::P64 = P64[Sp + 24];
           P64[Hp - 56] = _sbbZ0::P64;
           P64[Hp - 48] = _sbbZk::P64;
           I64[Hp - 40] = sat_sbc0I_info;
           P64[Hp - 32] = _sbbYT::P64;
           P64[Hp - 24] = _sbbZ0::P64;
           P64[Hp - 16] = _sbbZ9::P64;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _sbbZk::P64;
           R2 = Hp - 70;
           R1 = Hp - 39;
           Sp = Sp + 40;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
       cbcZh: // global
           R2 = _sbbYT::P64;
           Sp = Sp + 40;
           call lvl10_rb6WO_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcUe_info" {
     block_cbcUe_info:
         const _cbcUe;
         const 4;
         const 1077568639860766;
         const SbcpG_srt+56;
 },
 sat_sbc1l_entry() //  [R1]
         { []
         }
     {offset
       cbcZA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbcZB; else goto cbcZC;
       cbcZB: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbcZC: // global
           I64[Sp - 16] = block_cbcU2_info;
           P64[Sp - 8] = P64[R1 + 7];
           Sp = Sp - 16;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbc1l_info" {
     sat_sbc1l_info:
         const sat_sbc1l_entry;
         const 1;
         const 2205667569958921;
         const 4294967299;
         const SbcpG_srt+56;
 },
 _cbcU2() //  []
         { []
         }
     {offset
       cbcU2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbcZF; else goto cbcZE;
       cbcZF: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cbcZE: // global
           I64[Hp - 8] = act_sbbYX_info;
           _sbbYT::P64 = P64[Sp + 8];
           P64[Hp] = _sbbYT::P64;
           I64[Sp] = block_cbcZt_info;
           R1 = _sbbYT::P64;
           P64[Sp + 8] = Hp - 6;
           if (R1 & 7 != 0) goto ubcZM; else goto cbcZu;
       ubcZM: // global
           call _cbcZt(R1) args: 0, res: 0, upd: 0;
       cbcZu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcU2_info" {
     block_cbcU2_info:
         const _cbcU2;
         const 1;
         const 2205667569958942;
         const SbcpG_srt+56;
 },
 _cbcZt() //  [R1]
         { []
         }
     {offset
       cbcZt: // global
           _cbcU4::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cbcZx; else goto cbcZy;
       cbcZx: // global
           R5 = _cbcU4::P64;
           R4 = P64[R1 + 15];
           R3 = R1;
           R2 = GHC.IO.Handle.Text.hGetContents3_closure;
           Sp = Sp + 16;
           call GHC.IO.Handle.Internals.$wwithHandle'_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
       cbcZy: // global
           R5 = _cbcU4::P64;
           R4 = P64[R1 + 14];
           R3 = R1;
           R2 = GHC.IO.Handle.Text.hGetContents3_closure;
           Sp = Sp + 16;
           call GHC.IO.Handle.Internals.$wwithHandle'_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcZt_info" {
     block_cbcZt_info:
         const _cbcZt;
         const 1;
         const 2203318222878;
         const SbcpG_srt+128;
 },
 GHC.IO.Handle.Text.hGetContents2_entry() //  [R2]
         { []
         }
     {offset
       cbcZN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbcZR; else goto cbcZQ;
       cbcZR: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hGetContents2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbcZQ: // global
           I64[Hp - 8] = sat_sbc1l_info;
           P64[Hp] = R2;
           R2 = Hp - 7;
           call GHC.IO.Unsafe.unsafeDupableInterleaveIO_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetContents2_info" {
     GHC.IO.Handle.Text.hGetContents2_info:
         const GHC.IO.Handle.Text.hGetContents2_entry;
         const 0;
         const 2205667569958926;
         const 8589934597;
         const SbcpG_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.88067409 UTC

[section ""data" . GHC.IO.Handle.Text.hGetContents1_closure" {
     GHC.IO.Handle.Text.hGetContents1_closure:
         const GHC.IO.Handle.Text.hGetContents1_info;
         const 0;
 },
 sat_sbc1K_entry() //  [R1]
         { []
         }
     {offset
       cbd3T: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbd3X; else goto cbd3Y;
       cbd3X: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbd3Y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbd3Q_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubd42; else goto cbd3R;
       ubd42: // global
           call _cbd3Q(R1) args: 0, res: 0, upd: 0;
       cbd3R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbc1K_info" {
     sat_sbc1K_info:
         const sat_sbc1K_entry;
         const 1;
         const 16;
 },
 _cbd3Q() //  [R1]
         { []
         }
     {offset
       cbd3Q: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cbd41; else goto cbd40;
       cbd41: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbd40: // global
           _sbc1u::P64 = P64[R1 + 7];
           _sbc1v::P64 = P64[R1 + 15];
           _sbc1w::P64 = P64[R1 + 23];
           _sbc1x::P64 = P64[R1 + 31];
           _sbc1z::P64 = P64[R1 + 47];
           _sbc1A::P64 = P64[R1 + 55];
           _sbc1B::P64 = P64[R1 + 63];
           _sbc1C::P64 = P64[R1 + 71];
           _sbc1D::P64 = P64[R1 + 79];
           _sbc1E::P64 = P64[R1 + 87];
           _sbc1F::P64 = P64[R1 + 95];
           _sbc1G::P64 = P64[R1 + 103];
           _sbc1H::P64 = P64[R1 + 111];
           _sbc1I::P64 = P64[R1 + 119];
           _sbc1J::P64 = P64[R1 + 127];
           I64[Hp - 128] = GHC.IO.Handle.Types.Handle___con_info;
           P64[Hp - 120] = _sbc1u::P64;
           P64[Hp - 112] = _sbc1v::P64;
           P64[Hp - 104] = _sbc1w::P64;
           P64[Hp - 96] = _sbc1x::P64;
           P64[Hp - 88] = GHC.IO.Handle.Types.SemiClosedHandle_closure+2;
           P64[Hp - 80] = _sbc1z::P64;
           P64[Hp - 72] = _sbc1A::P64;
           P64[Hp - 64] = _sbc1B::P64;
           P64[Hp - 56] = _sbc1C::P64;
           P64[Hp - 48] = _sbc1D::P64;
           P64[Hp - 40] = _sbc1E::P64;
           P64[Hp - 32] = _sbc1F::P64;
           P64[Hp - 24] = _sbc1G::P64;
           P64[Hp - 16] = _sbc1H::P64;
           P64[Hp - 8] = _sbc1I::P64;
           P64[Hp] = _sbc1J::P64;
           R1 = Hp - 127;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbd3Q_info" {
     block_cbd3Q_info:
         const _cbd3Q;
         const 0;
         const 30;
 },
 sat_sbc1M_entry() //  [R1, R2]
         { []
         }
     {offset
       cbd44: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbd45; else goto cbd46;
       cbd45: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbd46: // global
           I64[Sp - 16] = block_cbd3K_info;
           _sbc1o::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 8] = _sbc1o::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Text.hGetContents2_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbc1M_info" {
     sat_sbc1M_info:
         const sat_sbc1M_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const SbcpG_srt+192;
 },
 _cbd3K() //  [R1]
         { []
         }
     {offset
       cbd3K: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbd49; else goto cbd48;
       cbd49: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbd48: // global
           I64[Hp - 40] = sat_sbc1K_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbd3K_info" {
     block_cbd3K_info:
         const _cbd3K;
         const 1;
         const 30;
 },
 GHC.IO.Handle.Text.hGetContents1_entry() //  [R2]
         { []
         }
     {offset
       cbd4a: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbd4e; else goto cbd4d;
       cbd4e: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hGetContents1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbd4d: // global
           I64[Hp - 8] = sat_sbc1M_info;
           P64[Hp] = R2;
           R4 = Hp - 6;
           R3 = R2;
           R2 = GHC.IO.Handle.Text.hGetContents3_closure;
           call GHC.IO.Handle.Internals.wantReadableHandle1_entry(R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetContents1_info" {
     GHC.IO.Handle.Text.hGetContents1_info:
         const GHC.IO.Handle.Text.hGetContents1_entry;
         const 0;
         const 14297946128398;
         const 8589934597;
         const SbcpG_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.891539843 UTC

[section ""data" . GHC.IO.Handle.Text.hGetContents_closure" {
     GHC.IO.Handle.Text.hGetContents_closure:
         const GHC.IO.Handle.Text.hGetContents_info;
         const 0;
 },
 GHC.IO.Handle.Text.hGetContents_entry() //  [R2]
         { []
         }
     {offset
       cbd4P: // global
           R2 = R2;
           call GHC.IO.Handle.Text.hGetContents1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetContents_info" {
     GHC.IO.Handle.Text.hGetContents_info:
         const GHC.IO.Handle.Text.hGetContents_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbcpG_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.895806633 UTC

[section ""data" . go_rb6WP_closure" {
     go_rb6WP_closure:
         const go_rb6WP_info;
 },
 sat_sbc1R_entry() //  [R1]
         { []
         }
     {offset
       cbd5a: // global
           R2 = P64[R1 + 16];
           call go_rb6WP_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbc1R_info" {
     sat_sbc1R_info:
         const sat_sbc1R_entry;
         const 1;
         const 16;
 },
 go_rb6WP_entry() //  [R2]
         { []
         }
     {offset
       cbd5h: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbd5i; else goto cbd5j;
       cbd5i: // global
           R2 = R2;
           R1 = go_rb6WP_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbd5j: // global
           I64[Sp - 8] = block_cbd50_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubd5p; else goto cbd51;
       ubd5p: // global
           call _cbd50(R1) args: 0, res: 0, upd: 0;
       cbd51: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_rb6WP_info" {
     go_rb6WP_info:
         const go_rb6WP_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cbd50() //  [R1]
         { []
         }
     {offset
       cbd50: // global
           if (R1 & 7 == 1) goto cbd5e; else goto cbd5f;
       cbd5e: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbd5f: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbd5o; else goto cbd5n;
       cbd5o: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbd5n: // global
           _sbc1P::P64 = P64[R1 + 6];
           _sbc1Q::P64 = P64[R1 + 14];
           I64[Hp - 16] = sat_sbc1R_info;
           P64[Hp] = _sbc1Q::P64;
           R3 = Hp - 16;
           R2 = _sbc1P::P64;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbd50_info" {
     block_cbd50_info:
         const _cbd50;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.903741085 UTC

[section ""data" . go1_rb6WQ_closure" {
     go1_rb6WQ_closure:
         const go1_rb6WQ_info;
 },
 sat_sbc1W_entry() //  [R1]
         { []
         }
     {offset
       cbd5W: // global
           R2 = P64[R1 + 16];
           call go1_rb6WQ_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbc1W_info" {
     sat_sbc1W_info:
         const sat_sbc1W_entry;
         const 1;
         const 16;
 },
 go1_rb6WQ_entry() //  [R2]
         { []
         }
     {offset
       cbd63: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbd64; else goto cbd65;
       cbd64: // global
           R2 = R2;
           R1 = go1_rb6WQ_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbd65: // global
           I64[Sp - 8] = block_cbd5M_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubd6b; else goto cbd5N;
       ubd6b: // global
           call _cbd5M(R1) args: 0, res: 0, upd: 0;
       cbd5N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_rb6WQ_info" {
     go1_rb6WQ_info:
         const go1_rb6WQ_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cbd5M() //  [R1]
         { []
         }
     {offset
       cbd5M: // global
           if (R1 & 7 == 1) goto cbd60; else goto cbd61;
       cbd60: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbd61: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbd6a; else goto cbd69;
       cbd6a: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbd69: // global
           _sbc1U::P64 = P64[R1 + 6];
           _sbc1V::P64 = P64[R1 + 14];
           I64[Hp - 16] = sat_sbc1W_info;
           P64[Hp] = _sbc1V::P64;
           R3 = Hp - 16;
           R2 = _sbc1U::P64;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbd5M_info" {
     block_cbd5M_info:
         const _cbd5M;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.92865178 UTC

[section ""data" . GHC.IO.Handle.Text.$whGetLineBufferedLoop_closure" {
     GHC.IO.Handle.Text.$whGetLineBufferedLoop_closure:
         const GHC.IO.Handle.Text.$whGetLineBufferedLoop_info;
         const 0;
 },
 GHC.IO.Handle.Text.$whGetLineBufferedLoop_slow() //  [R1]
         { []
         }
     {offset
       cbd6v: // global
           R6 = I64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.Handle.Text.$whGetLineBufferedLoop_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2,
                                                                R1) args: 32, res: 0, upd: 8;
     }
 },
 buf1_sbc2w_entry() //  [R1]
         { []
         }
     {offset
       cbd7O: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cbd7P; else goto cbd7Q;
       cbd7P: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbd7Q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 64] = block_cbd7L_info;
           _sbc1Z::P64 = P64[R1 + 16];
           _sbc20::P64 = P64[R1 + 24];
           _sbc1Y::I64 = I64[R1 + 40];
           _sbc21::I64 = I64[R1 + 48];
           _sbc23::I64 = I64[R1 + 56];
           R1 = P64[R1 + 32];
           I64[Sp - 56] = _sbc1Y::I64;
           P64[Sp - 48] = _sbc1Z::P64;
           P64[Sp - 40] = _sbc20::P64;
           I64[Sp - 32] = _sbc21::I64;
           I64[Sp - 24] = _sbc23::I64;
           Sp = Sp - 64;
           if (R1 & 7 != 0) goto ubd85; else goto cbd7M;
       ubd85: // global
           call _cbd7L(R1) args: 0, res: 0, upd: 0;
       cbd7M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . buf1_sbc2w_info" {
     buf1_sbc2w_info:
         const buf1_sbc2w_entry;
         const 12884901891;
         const 15;
 },
 _cbd7L() //  [R1]
         { []
         }
     {offset
       cbd7L: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbd7V; else goto cbd7U;
       cbd7V: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbd7U: // global
           _sbc1Y::I64 = I64[Sp + 8];
           _sbc1Z::P64 = P64[Sp + 16];
           _sbc20::P64 = P64[Sp + 24];
           _sbc21::I64 = I64[Sp + 32];
           _sbc23::I64 = I64[Sp + 40];
           _sbc2y::I64 = I64[R1 + 7];
           if (_sbc2y::I64 == _sbc23::I64) goto cbd84; else goto cbd81;
       cbd84: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbc1Z::P64;
           P64[Hp - 32] = _sbc20::P64;
           I64[Hp - 24] = _sbc1Y::I64;
           I64[Hp - 16] = _sbc21::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cbd81: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbc1Z::P64;
           P64[Hp - 32] = _sbc20::P64;
           I64[Hp - 24] = _sbc1Y::I64;
           I64[Hp - 16] = _sbc21::I64;
           I64[Hp - 8] = _sbc2y::I64;
           I64[Hp] = _sbc23::I64;
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbd7L_info" {
     block_cbd7L_info:
         const _cbd7L;
         const 1605;
         const 30;
 },
 sat_sbc33_entry() //  [R1]
         { []
         }
     {offset
       cbd8c: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cbd8d; else goto cbd8e;
       cbd8d: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbd8e: // global
           I64[Sp - 24] = block_cbd89_info;
           _sbc26::P64 = P64[R1 + 7];
           _sbc2k::P64 = P64[R1 + 15];
           R1 = P64[R1 + 23];
           P64[Sp - 16] = _sbc26::P64;
           P64[Sp - 8] = _sbc2k::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubd9p; else goto cbd8a;
       ubd9p: // global
           call _cbd89(R1) args: 0, res: 0, upd: 0;
       cbd8a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbc33_info" {
     sat_sbc33_info:
         const sat_sbc33_entry;
         const 3;
         const 4294967304;
         const 4294967299;
         const SbcpG_srt+80;
 },
 _cbd89() //  [R1]
         { []
         }
     {offset
       cbd89: // global
           _sbc2G::I64 = I64[R1 + 39];
           _sbc2I::I64 = I64[R1 + 47] - _sbc2G::I64;
           if (_sbc2I::I64 == 0) goto cbd8B; else goto ubd9k;
       cbd8B: // global
           I64[Sp + 16] = block_cbd8y_info;
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.IO.Handle.Internals.hLookAhead_2_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
       ubd9k: // global
           if (_sbc2I::I64 == 1) goto cbd8L; else goto ubd9l;
       cbd8L: // global
           I64[Sp - 40] = block_cbd8K_info;
           _sbc2B::P64 = R1;
           _sbc2D::P64 = P64[R1 + 7];
           _sbc2E::P64 = P64[R1 + 15];
           _sbc2C::I64 = I64[R1 + 23];
           _sbc2F::I64 = I64[R1 + 31];
           R1 = P64[Sp + 16];
           P64[Sp - 32] = _sbc2D::P64;
           P64[Sp - 24] = _sbc2E::P64;
           I64[Sp - 16] = _sbc2F::I64;
           I64[Sp - 8] = _sbc2G::I64;
           I64[Sp] = _sbc2C::I64;
           P64[Sp + 16] = _sbc2B::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubd9n; else goto cbd8N;
       ubd9n: // global
           call _cbd8K(R1) args: 0, res: 0, upd: 0;
       cbd8N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ubd9l: // global
           I64[Sp + 8] = _sbc2I::I64;
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _cbd8m() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbd89_info" {
     block_cbd89_info:
         const _cbd89;
         const 2;
         const 4294967326;
         const SbcpG_srt+80;
 },
 _cbd8y() //  [R1]
         { []
         }
     {offset
       cbd8y: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbd8F; else goto cbd8E;
       cbd8F: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbd8E: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbd8y_info" {
     block_cbd8y_info:
         const _cbd8y;
         const 0;
         const 30;
 },
 _cbd8K() //  [R1]
         { []
         }
     {offset
       cbd8K: // global
           _sbc2B::P64 = P64[Sp + 56];
           if (R1 & 7 == 1) goto cbd8T; else goto cbd8X;
       cbd8T: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbd8W; else goto cbd8V;
       cbd8W: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbd8V: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _sbc2B::P64;
           R1 = Hp - 6;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbd8X: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbd92; else goto cbd91;
       cbd92: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbd91: // global
           _sbc26::P64 = P64[Sp + 48];
           _sbc2C::I64 = I64[Sp + 40];
           _sbc2D::P64 = P64[Sp + 8];
           _sbc2E::P64 = P64[Sp + 16];
           _sbc2F::I64 = I64[Sp + 24];
           _sbc2S::I64 = %MO_UU_Conv_W32_W64(I32[_sbc2C::I64 + (I64[Sp + 32] << 2)]);
           call MO_Touch(_sbc2D::P64);
           if (_sbc2S::I64 == 13) goto cbd9f; else goto cbd98;
       cbd9f: // global
           I32[_sbc2C::I64] = 13 :: W32;
           call MO_Touch(_sbc2D::P64);
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbc2D::P64;
           P64[Hp - 32] = _sbc2E::P64;
           I64[Hp - 24] = _sbc2C::I64;
           I64[Hp - 16] = _sbc2F::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 1;
           I64[Sp + 56] = block_cbd9c_info;
           R3 = Hp - 47;
           R2 = _sbc26::P64;
           Sp = Sp + 56;
           call GHC.IO.Handle.Internals.hLookAhead_2_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
       cbd98: // global
           I64[Hp - 48] = GHC.Base.Just_con_info;
           P64[Hp - 40] = _sbc2B::P64;
           _cbd96::P64 = Hp - 46;
           Hp = Hp - 40;
           R1 = _cbd96::P64;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbd8K_info" {
     block_cbd8K_info:
         const _cbd8K;
         const 1799;
         const 4294967326;
         const SbcpG_srt+80;
 },
 _cbd9c() //  [R1]
         { []
         }
     {offset
       cbd9c: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbd9i; else goto cbd9h;
       cbd9i: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbd9h: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbd9c_info" {
     block_cbd9c_info:
         const _cbd9c;
         const 0;
         const 30;
 },
 _cbd8m() //  []
         { []
         }
     {offset
       cbd8m: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbd8t; else goto cbd8s;
       cbd8t: // global
           HpAlloc = 16;
           _sbc2I::I64 = I64[Sp];
           I64[Sp] = block_cbd8l_info;
           R1 = _sbc2I::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbd8s: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cbd8l() //  [R1]
         { []
         }
     {offset
       cbd8l: // global
           I64[Sp] = R1;
           call _cbd8m() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbd8l_info" {
     block_cbd8l_info:
         const _cbd8l;
         const 1;
         const 30;
 },
 sat_sbc3f_entry() //  [R1]
         { []
         }
     {offset
       cbd9z: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbd9D; else goto cbd9E;
       cbd9D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbd9E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbd9w_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubd9I; else goto cbd9x;
       ubd9I: // global
           call _cbd9w(R1) args: 0, res: 0, upd: 0;
       cbd9x: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbc3f_info" {
     sat_sbc3f_info:
         const sat_sbc3f_entry;
         const 1;
         const 16;
 },
 _cbd9w() //  [R1]
         { []
         }
     {offset
       cbd9w: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbd9H; else goto cbd9G;
       cbd9H: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbd9G: // global
           _sbc3a::P64 = P64[R1 + 7];
           _sbc3b::P64 = P64[R1 + 15];
           _sbc39::I64 = I64[R1 + 23];
           _sbc3c::I64 = I64[R1 + 31];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbc3a::P64;
           P64[Hp - 32] = _sbc3b::P64;
           I64[Hp - 24] = _sbc39::I64;
           I64[Hp - 16] = _sbc3c::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbd9w_info" {
     block_cbd9w_info:
         const _cbd9w;
         const 0;
         const 30;
 },
 sat_sbc3p_entry() //  [R1]
         { []
         }
     {offset
       cbd9U: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbd9V; else goto cbd9W;
       cbd9V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbd9W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbd9R_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubda5; else goto cbd9S;
       ubda5: // global
           call _cbd9R(R1) args: 0, res: 0, upd: 0;
       cbd9S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbc3p_info" {
     sat_sbc3p_info:
         const sat_sbc3p_entry;
         const 1;
         const 4294967312;
         const SbcpG_srt+176;
 },
 _cbd9R() //  [R1]
         { []
         }
     {offset
       cbd9R: // global
           if (I64[R1 + 39] == I64[R1 + 47]) goto cbda4; else goto cbda3;
       cbda4: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cbda3: // global
           R1 = lvl4_rb6WH_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbd9R_info" {
     block_cbd9R_info:
         const _cbd9R;
         const 0;
         const 4294967326;
         const SbcpG_srt+176;
 },
 sat_sbc3H_entry() //  [R1]
         { []
         }
     {offset
       cbdae: // global
           _sbc3H::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbdaf; else goto cbdag;
       cbdag: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbdai; else goto cbdah;
       cbdai: // global
           HpAlloc = 56;
           goto cbdaf;
       cbdaf: // global
           R1 = _sbc3H::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbdah: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbc3H::P64;
           _sbc1Z::P64 = P64[_sbc3H::P64 + 16];
           _sbc20::P64 = P64[_sbc3H::P64 + 24];
           _sbc1Y::I64 = I64[_sbc3H::P64 + 32];
           _sbc21::I64 = I64[_sbc3H::P64 + 40];
           _sbc23::I64 = I64[_sbc3H::P64 + 48];
           _sbc3F::I64 = I64[_sbc3H::P64 + 56] + 1;
           if (_sbc3F::I64 == _sbc23::I64) goto cbdas; else goto cbdap;
       cbdas: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbc1Z::P64;
           P64[Hp - 32] = _sbc20::P64;
           I64[Hp - 24] = _sbc1Y::I64;
           I64[Hp - 16] = _sbc21::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cbdap: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbc1Z::P64;
           P64[Hp - 32] = _sbc20::P64;
           I64[Hp - 24] = _sbc1Y::I64;
           I64[Hp - 16] = _sbc21::I64;
           I64[Hp - 8] = _sbc3F::I64;
           I64[Hp] = _sbc23::I64;
           R1 = Hp - 47;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbc3H_info" {
     sat_sbc3H_info:
         const sat_sbc3H_entry;
         const 17179869186;
         const 15;
 },
 sat_sbc3L_entry() //  [R1]
         { []
         }
     {offset
       cbdaD: // global
           _sbc3L::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cbdaE; else goto cbdaF;
       cbdaF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbdaH; else goto cbdaG;
       cbdaH: // global
           HpAlloc = 24;
           goto cbdaE;
       cbdaE: // global
           R1 = _sbc3L::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbdaG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbc3L::P64;
           _sbc24::P64 = P64[_sbc3L::P64 + 16];
           _sbc2t::P64 = P64[_sbc3L::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sbc2t::P64;
           P64[Hp] = _sbc24::P64;
           I64[Sp - 24] = block_cbdaB_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = Hp - 14;
           Sp = Sp - 24;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbc3L_info" {
     sat_sbc3L_info:
         const sat_sbc3L_entry;
         const 2;
         const 18;
 },
 _cbdaB() //  [R1]
         { []
         }
     {offset
       cbdaB: // global
           R2 = R1;
           Sp = Sp + 8;
           call go_rb6WP_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbdaB_info" {
     block_cbdaB_info:
         const _cbdaB;
         const 0;
         const 30;
 },
 GHC.IO.Handle.Text.$whGetLineBufferedLoop_entry() //  [R2, R3, R4,
                                                        R5, R6]
         { []
         }
     {offset
       cbdaL: // global
           if ((Sp + -96) < SpLim) (likely: False) goto cbdaM; else goto ubdcD;
       cbdaM: // global
           R1 = GHC.IO.Handle.Text.$whGetLineBufferedLoop_closure;
           P64[Sp - 40] = R2;
           I64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       ubdcD: // global
           P64[Sp - 40] = R2;
           I64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call _cbd6w() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.$whGetLineBufferedLoop_info" {
     GHC.IO.Handle.Text.$whGetLineBufferedLoop_info:
         const GHC.IO.Handle.Text.$whGetLineBufferedLoop_entry;
         const 0;
         const 6790596698046478;
         const 38654705664;
         const SbcpG_srt+72;
         const 7304;
         const GHC.IO.Handle.Text.$whGetLineBufferedLoop_slow;
 },
 _cbd6w() //  []
         { []
         }
     {offset
       cbd6w: // global
           _sbc1X::P64 = P64[Sp];
           I64[Sp] = block_cbd6z_info;
           R1 = _sbc1X::P64;
           if (R1 & 7 != 0) goto ubdcQ; else goto cbd6A;
       ubdcQ: // global
           call _cbd6z(R1) args: 0, res: 0, upd: 0;
       cbd6A: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbd6z() //  [R1]
         { []
         }
     {offset
       cbd6z: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbdaQ; else goto cbdaP;
       cbdaQ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbdaP: // global
           _sbc2f::P64 = P64[R1 + 71];
           _sbc2k::P64 = P64[R1 + 111];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           I64[Hp] = I64[Sp + 8];
           P64[Sp - 32] = _sbc2f::P64;
           P64[Sp - 24] = _sbc2k::P64;
           P64[Sp - 16] = Hp - 15;
           I64[Sp - 8] = I64[Sp + 40];
           P64[Sp] = R1;
           Sp = Sp - 32;
           call _cbdcc() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbd6z_info" {
     block_cbd6z_info:
         const _cbd6z;
         const 3655;
         const 2286997070675998;
         const SbcpG_srt+72;
 },
 _cbdcc() //  []
         { []
         }
     {offset
       cbdcc: // global
           _sbc23::I64 = I64[Sp + 80];
           if (I64[Sp + 24] == _sbc23::I64) goto cbdcw; else goto cbdcl;
       cbdcw: // global
           P64[Sp + 24] = GHC.Types.False_closure+1;
           I64[Sp + 16] = _sbc23::I64;
           call _sbc2n() args: 0, res: 0, upd: 0;
       cbdcl: // global
           I64[Sp - 8] = block_cbdcj_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubdd4; else goto cbdcm;
       ubdd4: // global
           call _cbdcj(R1) args: 0, res: 0, upd: 0;
       cbdcm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbdcj() //  [R1]
         { []
         }
     {offset
       cbdcj: // global
           _sbc4j::I64 = I64[Sp + 32];
           _sbc4r::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 + 15] + (_sbc4j::I64 << 2)]);
           call MO_Touch(P64[R1 + 7]);
           if (_sbc4r::I64 == 10) goto cbdcv; else goto cbdcu;
       cbdcv: // global
           I64[Sp + 24] = _sbc4j::I64;
           P64[Sp + 32] = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call _sbc2n() args: 0, res: 0, upd: 0;
       cbdcu: // global
           P64[Sp + 24] = R1;
           I64[Sp + 32] = _sbc4j::I64 + 1;
           Sp = Sp + 8;
           call _cbdcc() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbdcj_info" {
     block_cbdcj_info:
         const _cbdcj;
         const 117516;
         const 2286997070675998;
         const SbcpG_srt+72;
 },
 _sbc2n() //  []
         { []
         }
     {offset
       sbc2n: // global
           I64[Sp - 8] = block_cbd6M_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubdd8; else goto cbd6N;
       ubdd8: // global
           call _cbd6M(R1) args: 0, res: 0, upd: 0;
       cbd6N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbd6M() //  [R1]
         { []
         }
     {offset
       cbd6M: // global
           _sbc22::I64 = I64[Sp + 80];
           _sbc2q::I64 = I64[Sp + 24];
           if (R1 & 7 == 1) goto cbdbv; else goto cbdbR;
       cbdbv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbdby; else goto cbdbx;
       cbdby: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbdbx: // global
           if (_sbc22::I64 == _sbc2q::I64) goto cbdbK; else goto cbdbJ;
       cbdbK: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sbc2q::I64;
           P64[Sp + 80] = GHC.Types.[]_closure+1;
           P64[Sp] = Hp - 7;
           call _sbc2r() args: 0, res: 0, upd: 0;
       cbdbJ: // global
           Hp = Hp - 16;
           I64[Sp - 8] = _sbc2q::I64 - 1;
           P64[Sp] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call _cbd7y() args: 0, res: 0, upd: 0;
       cbdbR: // global
           I64[Sp] = block_cbdbN_info;
           R6 = GHC.Types.[]_closure+1;
           R5 = _sbc2q::I64;
           R4 = _sbc22::I64;
           R3 = P64[Sp + 56];
           R2 = I64[Sp + 48];
           call $wunpack_nl_rb6WF_entry(R6,
                                        R5,
                                        R4,
                                        R3,
                                        R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbd6M_info" {
     block_cbd6M_info:
         const _cbd6M;
         const 117004;
         const 2286997070675998;
         const SbcpG_srt+72;
 },
 _cbd7y() //  []
         { []
         }
     {offset
       cbd7y: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbdbE; else goto cbdbD;
       cbdbE: // global
           HpAlloc = 40;
           I64[Sp] = block_cbd7y_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cbdbD: // global
           _sbc3U::P64 = P64[Sp + 16];
           _sbc3V::I64 = I64[Sp + 8];
           if (%MO_S_Ge_W64(_sbc3V::I64,
                            I64[Sp + 96])) goto cbdbG; else goto cbdbH;
       cbdbG: // global
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = %MO_UU_Conv_W32_W64(I32[I64[Sp + 64] + (_sbc3V::I64 << 2)]);
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _sbc3U::P64;
           P64[Sp + 16] = Hp - 14;
           I64[Sp + 8] = _sbc3V::I64 - 1;
           call _cbd7y() args: 0, res: 0, upd: 0;
       cbdbH: // global
           Hp = Hp - 40;
           P64[Sp + 96] = _sbc3U::P64;
           Sp = Sp + 24;
           call _cbd7s() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbd7y_info" {
     block_cbd7y_info:
         const _cbd7y;
         const 468046;
         const 2286997070675998;
         const SbcpG_srt+72;
 },
 _cbd7s() //  []
         { []
         }
     {offset
       cbd7s: // global
           Hp = Hp + 16;
           _sbc3Q::P64 = P64[Sp + 72];
           if (Hp > HpLim) (likely: False) goto cbdbB; else goto cbdbA;
       cbdbB: // global
           HpAlloc = 16;
           I64[Sp - 8] = block_cbd7r_info;
           R1 = _sbc3Q::P64;
           Sp = Sp - 8;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbdbA: // global
           _sbc2q::I64 = I64[Sp + 16];
           call MO_Touch(P64[Sp + 48]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sbc2q::I64;
           P64[Sp + 72] = _sbc3Q::P64;
           P64[Sp - 8] = Hp - 7;
           Sp = Sp - 8;
           call _sbc2r() args: 0, res: 0, upd: 0;
     }
 },
 _cbd7r() //  [R1]
         { []
         }
     {offset
       cbd7r: // global
           P64[Sp + 80] = R1;
           Sp = Sp + 8;
           call _cbd7s() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbd7r_info" {
     block_cbd7r_info:
         const _cbd7r;
         const 117004;
         const 2286997070675998;
         const SbcpG_srt+72;
 },
 _cbdbN() //  [R1]
         { []
         }
     {offset
       cbdbN: // global
           I64[Sp] = block_cbdbP_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubdd2; else goto cbdbT;
       ubdd2: // global
           call _cbdbP(R1) args: 0, res: 0, upd: 0;
       cbdbT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdbN_info" {
     block_cbdbN_info:
         const _cbdbN;
         const 117004;
         const 2286997070675998;
         const SbcpG_srt+72;
 },
 _cbdbP() //  [R1]
         { []
         }
     {offset
       cbdbP: // global
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 80] = P64[R1 + 7];
           call _sbc2r() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbdbP_info" {
     block_cbdbP_info:
         const _cbdbP;
         const 117004;
         const 2286997070675998;
         const SbcpG_srt+72;
 },
 _sbc2r() //  []
         { []
         }
     {offset
       sbc2r: // global
           I64[Sp - 8] = block_cbd6Z_info;
           R1 = P64[Sp + 32];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubdd9; else goto cbd70;
       ubdd9: // global
           call _cbd6Z(R1) args: 0, res: 0, upd: 0;
       cbd70: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbd6Z() //  [R1]
         { []
         }
     {offset
       cbd6Z: // global
           _sbc1Y::I64 = I64[Sp + 56];
           _sbc1Z::P64 = P64[Sp + 64];
           _sbc20::P64 = P64[Sp + 72];
           _sbc21::I64 = I64[Sp + 80];
           _sbc23::I64 = I64[Sp + 96];
           if (R1 & 7 == 1) goto cbdaU; else goto cbdbq;
       cbdaU: // global
           Hp = Hp + 96;
           _sbc2v::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbdbt; else goto cbdaW;
       cbdaW: // global
           I64[Hp - 88] = buf1_sbc2w_info;
           P64[Hp - 72] = _sbc1Z::P64;
           P64[Hp - 64] = _sbc20::P64;
           P64[Hp - 56] = P64[Sp + 8];
           I64[Hp - 48] = _sbc1Y::I64;
           I64[Hp - 40] = _sbc21::I64;
           I64[Hp - 32] = _sbc23::I64;
           I64[Hp - 24] = sat_sbc33_info;
           P64[Hp - 16] = P64[Sp + 48];
           P64[Hp - 8] = P64[Sp + 24];
           _cbd74::P64 = Hp - 88;
           P64[Hp] = _cbd74::P64;
           I64[Sp + 8] = block_cbd78_info;
           R2 = GHC.IO.Handle.Text.hGetChar3_closure+2;
           R1 = Hp - 23;
           P64[Sp + 96] = _cbd74::P64;
           Sp = Sp + 8;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
       cbdbq: // global
           Hp = Hp + 96;
           _sbc2v::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbdbt; else goto cbdbs;
       cbdbt: // global
           HpAlloc = 96;
           R1 = _sbc2v::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbdbs: // global
           I64[Hp - 88] = sat_sbc3H_info;
           P64[Hp - 72] = _sbc1Z::P64;
           P64[Hp - 64] = _sbc20::P64;
           I64[Hp - 56] = _sbc1Y::I64;
           I64[Hp - 48] = _sbc21::I64;
           I64[Hp - 40] = _sbc23::I64;
           I64[Hp - 32] = I64[Sp + 32];
           _sbc24::P64 = P64[Sp + 104];
           _sbc2f::P64 = P64[Sp + 16];
           _sbc2t::P64 = P64[Sp + 88];
           call MO_WriteBarrier();
           P64[_sbc2f::P64 + 8] = Hp - 88;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbc2f::P64);
           I64[Hp - 24] = sat_sbc3L_info;
           P64[Hp - 8] = _sbc24::P64;
           P64[Hp] = _sbc2t::P64;
           R1 = Hp - 24;
           Sp = Sp + 112;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbd6Z_info" {
     block_cbd6Z_info:
         const _cbd6Z;
         const 169485;
         const 2286997070675998;
         const SbcpG_srt+72;
 },
 _cbd78() //  [R1]
         { []
         }
     {offset
       cbd78: // global
           I64[Sp] = block_cbd7a_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubdcU; else goto cbd7b;
       ubdcU: // global
           call _cbd7a(R1) args: 0, res: 0, upd: 0;
       cbd7b: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbd78_info" {
     block_cbd78_info:
         const _cbd78;
         const 31628;
         const 2286997070675998;
         const SbcpG_srt+72;
 },
 _cbd7a() //  [R1]
         { []
         }
     {offset
       cbd7a: // global
           if (R1 & 7 == 1) goto cbdb2; else goto cbdbm;
       cbdb2: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cbdb5; else goto cbdb4;
       cbdb5: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbdb4: // global
           I64[Hp - 88] = sat_sbc3f_info;
           _cbd74::P64 = P64[Sp + 88];
           P64[Hp - 72] = _cbd74::P64;
           _sbc24::P64 = P64[Sp + 96];
           _sbc2f::P64 = P64[Sp + 8];
           _sbc2t::P64 = P64[Sp + 80];
           call MO_WriteBarrier();
           P64[_sbc2f::P64 + 8] = Hp - 88;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbc2f::P64);
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = _sbc2t::P64;
           P64[Hp - 48] = _sbc24::P64;
           I64[Hp - 40] = sat_sbc3p_info;
           P64[Hp - 24] = _cbd74::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 62;
           I64[Sp + 96] = block_cbdb0_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = Hp - 14;
           Sp = Sp + 96;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 8;
       cbdbm: // global
           I64[Sp + 32] = block_cbd7g_info;
           R1 = P64[R1 + 6];
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto ubdcV; else goto cbd7h;
       ubdcV: // global
           call _cbd7g(R1) args: 0, res: 0, upd: 0;
       cbd7h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbd7a_info" {
     block_cbd7a_info:
         const _cbd7a;
         const 31628;
         const 2286997070675998;
         const SbcpG_srt+72;
 },
 _cbdb0() //  [R1]
         { []
         }
     {offset
       cbdb0: // global
           I64[Sp] = block_cbdb9_info;
           R2 = R1;
           call go1_rb6WQ_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdb0_info" {
     block_cbdb0_info:
         const _cbdb0;
         const 0;
         const 4294967326;
         const SbcpG_srt+224;
 },
 _cbdb9() //  [R1]
         { []
         }
     {offset
       cbdb9: // global
           if (R1 & 7 == 1) goto cbdbg; else goto cbdbk;
       cbdbg: // global
           Sp = Sp + 8;
           call GHC.IO.Handle.Internals.ioe_EOF1_entry() args: 8, res: 0, upd: 8;
       cbdbk: // global
           R1 = R1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdb9_info" {
     block_cbdb9_info:
         const _cbdb9;
         const 0;
         const 4294967326;
         const SbcpG_srt+224;
 },
 _cbd7g() //  [R1]
         { []
         }
     {offset
       cbd7g: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbdbp; else goto cbdbo;
       cbdbp: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbdbo: // global
           _sbc3z::P64 = P64[R1 + 7];
           _sbc3A::P64 = P64[R1 + 15];
           _sbc3y::I64 = I64[R1 + 23];
           _sbc3B::I64 = I64[R1 + 31];
           _sbc3C::I64 = I64[R1 + 39];
           _sbc3D::I64 = I64[R1 + 47];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = P64[Sp + 64];
           P64[Sp + 8] = P64[Sp + 8];
           I64[Sp + 16] = _sbc3y::I64;
           P64[Sp + 24] = _sbc3z::P64;
           P64[Sp + 32] = _sbc3A::P64;
           I64[Sp + 40] = _sbc3B::I64;
           I64[Sp + 48] = _sbc3C::I64;
           I64[Sp + 56] = _sbc3D::I64;
           P64[Sp + 64] = Hp - 14;
           Sp = Sp + 8;
           call _cbd6w() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbd7g_info" {
     block_cbd7g_info:
         const _cbd7g;
         const 6024;
         const 2286997070675998;
         const SbcpG_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.990536539 UTC

[section ""data" . GHC.IO.Handle.Text.hGetLine3_closure" {
     GHC.IO.Handle.Text.hGetLine3_closure:
         const GHC.IO.Handle.Text.hGetLine3_info;
         const 0;
 },
 GHC.IO.Handle.Text.hGetLine3_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbdhe: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbdhf; else goto cbdhg;
       cbdhf: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hGetLine3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbdhg: // global
           I64[Sp - 24] = block_cbdhb_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubdhk; else goto cbdhc;
       ubdhk: // global
           call _cbdhb(R1) args: 0, res: 0, upd: 0;
       cbdhc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetLine3_info" {
     GHC.IO.Handle.Text.hGetLine3_info:
         const GHC.IO.Handle.Text.hGetLine3_entry;
         const 0;
         const 12884901902;
         const 17179869207;
         const SbcpG_srt+232;
 },
 _cbdhb() //  [R1]
         { []
         }
     {offset
       cbdhb: // global
           R6 = I64[R1 + 31];
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = I64[R1 + 23];
           R2 = P64[Sp + 8];
           I64[Sp] = I64[R1 + 39];
           I64[Sp + 8] = I64[R1 + 47];
           call GHC.IO.Handle.Text.$whGetLineBufferedLoop_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdhb_info" {
     block_cbdhb_info:
         const _cbdhb;
         const 2;
         const 4294967326;
         const SbcpG_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.995898941 UTC

[section ""cstring" . GHC.IO.Handle.Text.hGetLine5_bytes" {
     GHC.IO.Handle.Text.hGetLine5_bytes:
         I8[] [104,71,101,116,76,105,110,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:10.998130521 UTC

[section ""data" . GHC.IO.Handle.Text.hGetLine4_closure" {
     GHC.IO.Handle.Text.hGetLine4_closure:
         const GHC.IO.Handle.Text.hGetLine4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Text.hGetLine4_entry() //  [R1]
         { []
         }
     {offset
       cbdhE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbdhF; else goto cbdhG;
       cbdhF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbdhG: // global
           (_cbdhB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbdhB::I64 == 0) goto cbdhD; else goto cbdhC;
       cbdhD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbdhC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbdhB::I64;
           R2 = GHC.IO.Handle.Text.hGetLine5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetLine4_info" {
     GHC.IO.Handle.Text.hGetLine4_info:
         const GHC.IO.Handle.Text.hGetLine4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.003293695 UTC

[section ""data" . GHC.IO.Handle.Text.hGetLine2_closure" {
     GHC.IO.Handle.Text.hGetLine2_closure:
         const GHC.IO.Handle.Text.hGetLine2_info;
         const 0;
 },
 GHC.IO.Handle.Text.hGetLine2_entry() //  [R2]
         { []
         }
     {offset
       cbdhW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbdi0; else goto cbdi1;
       cbdi0: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hGetLine2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbdi1: // global
           I64[Sp - 8] = block_cbdhT_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubdi9; else goto cbdhU;
       ubdi9: // global
           call _cbdhT(R1) args: 0, res: 0, upd: 0;
       cbdhU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetLine2_info" {
     GHC.IO.Handle.Text.hGetLine2_info:
         const GHC.IO.Handle.Text.hGetLine2_entry;
         const 0;
         const 21474836494;
         const 8589934597;
         const SbcpG_srt+232;
 },
 _cbdhT() //  [R1]
         { []
         }
     {offset
       cbdhT: // global
           _sbc52::P64 = P64[P64[R1 + 71] + 8];
           I64[Sp - 8] = block_cbdhZ_info;
           _sbc4J::P64 = R1;
           R1 = _sbc52::P64;
           P64[Sp] = _sbc4J::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubdi8; else goto cbdi3;
       ubdi8: // global
           call _cbdhZ(R1) args: 0, res: 0, upd: 0;
       cbdi3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdhT_info" {
     block_cbdhT_info:
         const _cbdhT;
         const 0;
         const 4294967326;
         const SbcpG_srt+232;
 },
 _cbdhZ() //  [R1]
         { []
         }
     {offset
       cbdhZ: // global
           R6 = I64[R1 + 31];
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = I64[R1 + 23];
           R2 = P64[Sp + 8];
           I64[Sp - 8] = I64[R1 + 39];
           I64[Sp] = I64[R1 + 47];
           P64[Sp + 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 8;
           call GHC.IO.Handle.Text.$whGetLineBufferedLoop_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdhZ_info" {
     block_cbdhZ_info:
         const _cbdhZ;
         const 1;
         const 4294967326;
         const SbcpG_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.010302208 UTC

[section ""data" . GHC.IO.Handle.Text.hGetLine1_closure" {
     GHC.IO.Handle.Text.hGetLine1_closure:
         const GHC.IO.Handle.Text.hGetLine1_info;
         const 0;
 },
 GHC.IO.Handle.Text.hGetLine1_entry() //  [R2]
         { []
         }
     {offset
       cbdiy: // global
           R4 = GHC.IO.Handle.Text.hGetLine2_closure+2;
           R3 = R2;
           R2 = GHC.IO.Handle.Text.hGetLine4_closure;
           call GHC.IO.Handle.Internals.wantReadableHandle_1_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetLine1_info" {
     GHC.IO.Handle.Text.hGetLine1_info:
         const GHC.IO.Handle.Text.hGetLine1_entry;
         const 0;
         const 6755403736023054;
         const 8589934597;
         const SbcpG_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.01357565 UTC

[section ""data" . GHC.IO.Handle.Text.hGetLine_closure" {
     GHC.IO.Handle.Text.hGetLine_closure:
         const GHC.IO.Handle.Text.hGetLine_info;
         const 0;
 },
 GHC.IO.Handle.Text.hGetLine_entry() //  [R2]
         { []
         }
     {offset
       cbdiJ: // global
           R2 = R2;
           call GHC.IO.Handle.Text.hGetLine1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetLine_info" {
     GHC.IO.Handle.Text.hGetLine_info:
         const GHC.IO.Handle.Text.hGetLine_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbcpG_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.018116321 UTC

[section ""data" . lvl11_rb6WR_closure" {
     lvl11_rb6WR_closure:
         const lvl11_rb6WR_info;
         const 0;
         const 0;
         const 0;
 },
 lvl11_rb6WR_entry() //  [R1]
         { []
         }
     {offset
       cbdj1: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cbdj2; else goto cbdj3;
       cbdj2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbdj3: // global
           (_cbdiT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbdiT::I64 == 0) goto cbdiV; else goto cbdiU;
       cbdiV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbdiU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbdiT::I64;
           I64[Sp - 24] = block_cbdiW_info;
           R6 = 0;
           R5 = GHC.IO.FD.$tcFD1_closure;
           R4 = GHC.IO.FD.$trModule_closure;
           R3 = 15546290101957756376;
           R2 = 10838815552519039062;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl11_rb6WR_info" {
     lvl11_rb6WR_info:
         const lvl11_rb6WR_entry;
         const 0;
         const 4294967317;
         const SbcpG_srt+272;
 },
 _cbdiW() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cbdiW: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _cbdiX() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbdiW_info" {
     block_cbdiW_info:
         const _cbdiW;
         const 0;
         const 30;
 },
 _cbdiX() //  []
         { []
         }
     {offset
       cbdiX: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbdj6; else goto cbdj5;
       cbdj6: // global
           HpAlloc = 48;
           I64[Sp] = block_cbdiX_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       cbdj5: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbdiX_info" {
     block_cbdiX_info:
         const _cbdiX;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.037962818 UTC

[section ""data" . GHC.IO.Handle.Text.hGetBufNonBlocking2_closure" {
     GHC.IO.Handle.Text.hGetBufNonBlocking2_closure:
         const GHC.IO.Handle.Text.hGetBufNonBlocking2_info;
         const 0;
 },
 sat_sbc66_entry() //  [R1]
         { []
         }
     {offset
       cbdks: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbdkz; else goto cbdkA;
       cbdkz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbdkA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbdkp_info;
           _sbc5N::I64 = I64[R1 + 24];
           R1 = P64[R1 + 16];
           I64[Sp - 24] = _sbc5N::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubdkE; else goto cbdkq;
       ubdkE: // global
           call _cbdkp(R1) args: 0, res: 0, upd: 0;
       cbdkq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbc66_info" {
     sat_sbc66_info:
         const sat_sbc66_entry;
         const 4294967297;
         const 19;
 },
 _cbdkp() //  [R1]
         { []
         }
     {offset
       cbdkp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbdkD; else goto cbdkC;
       cbdkD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbdkC: // global
           _sbc65::I64 = I64[R1 + 7] + I64[Sp + 8];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sbc65::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbdkp_info" {
     block_cbdkp_info:
         const _cbdkp;
         const 65;
         const 30;
 },
 sat_sbc6a_entry() //  [R1]
         { []
         }
     {offset
       cbdkN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbdkU; else goto cbdkV;
       cbdkU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbdkV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbdkK_info;
           _sbc5N::I64 = I64[R1 + 24];
           R1 = P64[R1 + 16];
           I64[Sp - 24] = _sbc5N::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubdkZ; else goto cbdkL;
       ubdkZ: // global
           call _cbdkK(R1) args: 0, res: 0, upd: 0;
       cbdkL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbc6a_info" {
     sat_sbc6a_info:
         const sat_sbc6a_entry;
         const 4294967297;
         const 19;
 },
 _cbdkK() //  [R1]
         { []
         }
     {offset
       cbdkK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbdkY; else goto cbdkX;
       cbdkY: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbdkX: // global
           _sbc69::I64 = I64[R1 + 7] + I64[Sp + 8];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sbc69::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbdkK_info" {
     block_cbdkK_info:
         const _cbdkK;
         const 65;
         const 30;
 },
 sat_sbc6q_entry() //  [R1]
         { []
         }
     {offset
       cbdlv: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbdlC; else goto cbdlD;
       cbdlC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbdlD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbdls_info;
           _sbc5M::I64 = I64[R1 + 24];
           R1 = P64[R1 + 16];
           I64[Sp - 24] = _sbc5M::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubdlH; else goto cbdlt;
       ubdlH: // global
           call _cbdls(R1) args: 0, res: 0, upd: 0;
       cbdlt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbc6q_info" {
     sat_sbc6q_info:
         const sat_sbc6q_entry;
         const 4294967297;
         const 19;
 },
 _cbdls() //  [R1]
         { []
         }
     {offset
       cbdls: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbdlG; else goto cbdlF;
       cbdlG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbdlF: // global
           _sbc6p::I64 = I64[R1 + 7] + I64[Sp + 8];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sbc6p::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbdls_info" {
     block_cbdls_info:
         const _cbdls;
         const 65;
         const 30;
 },
 GHC.IO.Handle.Text.hGetBufNonBlocking2_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       cbdlI: // global
           if ((Sp + -88) < SpLim) (likely: False) goto cbdlJ; else goto cbdlK;
       cbdlJ: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hGetBufNonBlocking2_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbdlK: // global
           I64[Sp - 40] = block_cbdjD_info;
           R1 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubdm8; else goto cbdjE;
       ubdm8: // global
           call _cbdjD(R1) args: 0, res: 0, upd: 0;
       cbdjE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetBufNonBlocking2_info" {
     GHC.IO.Handle.Text.hGetBufNonBlocking2_info:
         const GHC.IO.Handle.Text.hGetBufNonBlocking2_entry;
         const 0;
         const 12884901902;
         const 25769803801;
         const SbcpG_srt+280;
 },
 _cbdjD() //  [R1]
         { []
         }
     {offset
       cbdjD: // global
           I64[Sp - 8] = block_cbdjI_info;
           _sbc5n::P64 = R1;
           _sbc5t::P64 = P64[R1 + 47];
           R1 = P64[Sp + 8];
           P64[Sp] = _sbc5t::P64;
           P64[Sp + 8] = _sbc5n::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubdm4; else goto cbdjJ;
       ubdm4: // global
           call _cbdjI(R1) args: 0, res: 0, upd: 0;
       cbdjJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdjD_info" {
     block_cbdjD_info:
         const _cbdjD;
         const 4;
         const 4294967326;
         const SbcpG_srt+280;
 },
 _cbdjI() //  [R1]
         { []
         }
     {offset
       cbdjI: // global
           I64[Sp - 40] = block_cbdjN_info;
           _sbc5G::P64 = P64[R1 + 7];
           _sbc5H::P64 = P64[R1 + 15];
           _sbc5F::I64 = I64[R1 + 23];
           _sbc5I::I64 = I64[R1 + 31];
           _sbc5J::I64 = I64[R1 + 39];
           _sbc5K::I64 = I64[R1 + 47];
           R1 = P64[Sp + 40];
           P64[Sp - 32] = _sbc5H::P64;
           I64[Sp - 24] = _sbc5I::I64;
           I64[Sp - 16] = _sbc5J::I64;
           I64[Sp - 8] = _sbc5K::I64;
           P64[Sp] = _sbc5G::P64;
           I64[Sp + 40] = _sbc5F::I64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubdm5; else goto cbdjO;
       ubdm5: // global
           call _cbdjN(R1) args: 0, res: 0, upd: 0;
       cbdjO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdjI_info" {
     block_cbdjI_info:
         const _cbdjI;
         const 5;
         const 4294967326;
         const SbcpG_srt+280;
 },
 _cbdjN() //  [R1]
         { []
         }
     {offset
       cbdjN: // global
           _sbc5j::P64 = P64[Sp + 64];
           _sbc5M::I64 = I64[R1 + 7];
           _sbc5N::I64 = I64[Sp + 32] - I64[Sp + 24];
           if (%MO_S_Ge_W64(_sbc5M::I64,
                            _sbc5N::I64)) goto cbdlP; else goto cbdm0;
       cbdlP: // global
           I64[Sp] = block_cbdjY_info;
           R1 = _sbc5j::P64;
           I64[Sp + 32] = _sbc5N::I64;
           I64[Sp + 64] = _sbc5M::I64;
           if (R1 & 7 != 0) goto ubdm6; else goto cbdjZ;
       ubdm6: // global
           call _cbdjY(R1) args: 0, res: 0, upd: 0;
       cbdjZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbdm0: // global
           I64[Sp] = block_cbdl1_info;
           R1 = _sbc5j::P64;
           I64[Sp + 64] = _sbc5M::I64;
           if (R1 & 7 != 0) goto ubdm7; else goto cbdl2;
       ubdm7: // global
           call _cbdl1(R1) args: 0, res: 0, upd: 0;
       cbdl2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdjN_info" {
     block_cbdjN_info:
         const _cbdjN;
         const 33674;
         const 4294967326;
         const SbcpG_srt+280;
 },
 _cbdjY() //  [R1]
         { []
         }
     {offset
       cbdjY: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cbdlS; else goto cbdlR;
       cbdlS: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbdlR: // global
           _sbc5k::P64 = P64[Sp + 72];
           _sbc5n::P64 = P64[Sp + 56];
           _sbc5t::P64 = P64[Sp + 48];
           _sbc5F::I64 = I64[Sp + 80];
           _sbc5G::P64 = P64[Sp + 40];
           _sbc5H::P64 = P64[Sp + 8];
           _sbc5I::I64 = I64[Sp + 16];
           _sbc5M::I64 = I64[Sp + 64];
           _sbc5N::I64 = I64[Sp + 32];
           _sbc5Q::I64 = I64[R1 + 7];
           (_sbc5W::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memcpy(_sbc5Q::I64, _sbc5F::I64 + I64[Sp + 24], _sbc5N::I64);
           call MO_Touch(_sbc5G::P64);
           I64[Hp - 96] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 88] = _sbc5G::P64;
           P64[Hp - 80] = _sbc5H::P64;
           I64[Hp - 72] = _sbc5F::I64;
           I64[Hp - 64] = _sbc5I::I64;
           I64[Hp - 56] = 0;
           I64[Hp - 48] = 0;
           call MO_WriteBarrier();
           P64[_sbc5t::P64 + 8] = Hp - 95;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbc5t::P64);
           _sbc60::I64 = _sbc5M::I64 - _sbc5N::I64;
           if (_sbc60::I64 != 0) goto cbdlY; else goto cbdlZ;
       cbdlY: // global
           I64[Hp - 40] = sat_sbc66_info;
           P64[Hp - 24] = _sbc5k::P64;
           I64[Hp - 16] = _sbc5N::I64;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sbc5Q::I64 + _sbc5N::I64;
           R6 = _sbc60::I64;
           R5 = Hp - 40;
           R4 = Hp - 7;
           R3 = _sbc5I::I64;
           R2 = _sbc5n::P64;
           Sp = Sp + 88;
           call GHC.IO.Handle.Text.$wbufReadNBEmpty_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
       cbdlZ: // global
           I64[Hp - 40] = sat_sbc6a_info;
           P64[Hp - 24] = _sbc5k::P64;
           I64[Hp - 16] = _sbc5N::I64;
           _cbdkG::P64 = Hp - 40;
           Hp = Hp - 16;
           R1 = _cbdkG::P64;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdjY_info" {
     block_cbdjY_info:
         const _cbdjY;
         const 41866;
         const 4294967326;
         const SbcpG_srt+280;
 },
 _cbdl1() //  [R1]
         { []
         }
     {offset
       cbdl1: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cbdm3; else goto cbdm2;
       cbdm3: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbdm2: // global
           _sbc5k::P64 = P64[Sp + 72];
           _sbc5t::P64 = P64[Sp + 48];
           _sbc5F::I64 = I64[Sp + 80];
           _sbc5G::P64 = P64[Sp + 40];
           _sbc5H::P64 = P64[Sp + 8];
           _sbc5I::I64 = I64[Sp + 16];
           _sbc5J::I64 = I64[Sp + 24];
           _sbc5K::I64 = I64[Sp + 32];
           _sbc5M::I64 = I64[Sp + 64];
           (_sbc6i::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memcpy(I64[R1 + 7], _sbc5F::I64 + _sbc5J::I64, _sbc5M::I64);
           call MO_Touch(_sbc5G::P64);
           I64[Hp - 80] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 72] = _sbc5G::P64;
           P64[Hp - 64] = _sbc5H::P64;
           I64[Hp - 56] = _sbc5F::I64;
           I64[Hp - 48] = _sbc5I::I64;
           I64[Hp - 40] = _sbc5J::I64 + _sbc5M::I64;
           I64[Hp - 32] = _sbc5K::I64;
           call MO_WriteBarrier();
           P64[_sbc5t::P64 + 8] = Hp - 79;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbc5t::P64);
           I64[Hp - 24] = sat_sbc6q_info;
           P64[Hp - 8] = _sbc5k::P64;
           I64[Hp] = _sbc5M::I64;
           R1 = Hp - 24;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdl1_info" {
     block_cbdl1_info:
         const _cbdl1;
         const 45962;
         const 30;
 },
 section ""data" . GHC.IO.Handle.Text.$wbufReadNBEmpty_closure" {
     GHC.IO.Handle.Text.$wbufReadNBEmpty_closure:
         const GHC.IO.Handle.Text.$wbufReadNBEmpty_info;
         const 0;
 },
 GHC.IO.Handle.Text.$wbufReadNBEmpty_slow() //  [R1]
         { []
         }
     {offset
       cbdma: // global
           R6 = I64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.Handle.Text.$wbufReadNBEmpty_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2,
                                                          R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sbc7o_entry() //  [R1]
         { []
         }
     {offset
       cbdmW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbdn3; else goto cbdn4;
       cbdn3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbdn4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbdmT_info;
           _sbc7k::I64 = I64[R1 + 24];
           R1 = P64[R1 + 16];
           I64[Sp - 24] = _sbc7k::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubdn8; else goto cbdmU;
       ubdn8: // global
           call _cbdmT(R1) args: 0, res: 0, upd: 0;
       cbdmU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbc7o_info" {
     sat_sbc7o_info:
         const sat_sbc7o_entry;
         const 4294967297;
         const 19;
 },
 _cbdmT() //  [R1]
         { []
         }
     {offset
       cbdmT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbdn7; else goto cbdn6;
       cbdn7: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbdn6: // global
           _sbc7n::I64 = I64[R1 + 7] + I64[Sp + 8];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sbc7n::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbdmT_info" {
     block_cbdmT_info:
         const _cbdmT;
         const 65;
         const 30;
 },
 section ""relreadonly" . ubdou_srtd" {
     ubdou_srtd:
         const SbcpG_srt+56;
         const 33;
         const 8321499137;
 },
 GHC.IO.Handle.Text.$wbufReadNBEmpty_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       cbdn9: // global
           if ((Sp + -80) < SpLim) (likely: False) goto cbdna; else goto cbdnb;
       cbdna: // global
           R1 = GHC.IO.Handle.Text.$wbufReadNBEmpty_closure;
           P64[Sp - 40] = R2;
           I64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       cbdnb: // global
           I64[Sp - 40] = block_cbdme_info;
           R1 = R2;
           I64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubdoq; else goto cbdmf;
       ubdoq: // global
           call _cbdme(R1) args: 0, res: 0, upd: 0;
       cbdmf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.$wbufReadNBEmpty_info" {
     GHC.IO.Handle.Text.$wbufReadNBEmpty_info:
         const GHC.IO.Handle.Text.$wbufReadNBEmpty_entry;
         const 0;
         const 18446744069414584334;
         const 25769803776;
         const ubdou_srtd;
         const 1157;
         const GHC.IO.Handle.Text.$wbufReadNBEmpty_slow;
 },
 section ""relreadonly" . ubdov_srtd" {
     ubdov_srtd:
         const SbcpG_srt+56;
         const 33;
         const 8053063681;
 },
 _cbdme() //  [R1]
         { []
         }
     {offset
       cbdme: // global
           I64[Sp - 32] = block_cbdmj_info;
           _sbc6x::P64 = R1;
           _sbc6z::P64 = P64[R1 + 15];
           _sbc6A::P64 = P64[R1 + 23];
           _sbc6D::P64 = P64[R1 + 47];
           R1 = P64[R1 + 31];
           P64[Sp - 24] = _sbc6z::P64;
           P64[Sp - 16] = _sbc6A::P64;
           P64[Sp - 8] = _sbc6D::P64;
           P64[Sp] = _sbc6x::P64;
           Sp = Sp - 32;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdme_info" {
     block_cbdme_info:
         const _cbdme;
         const 580;
         const 18446744069414584350;
         const ubdov_srtd;
 },
 section ""relreadonly" . ubdow_srtd" {
     ubdow_srtd:
         const SbcpG_srt+56;
         const 33;
         const 8053063681;
 },
 _cbdmj() //  [R1]
         { []
         }
     {offset
       cbdmj: // global
           if (%MO_S_Le_W64(I64[Sp + 64],
                            I64[Sp + 40])) goto ubdok; else goto cbdo3;
       ubdok: // global
           P64[Sp + 40] = R1;
           Sp = Sp + 8;
           call _sbc6R() args: 0, res: 0, upd: 0;
       cbdo3: // global
           I64[Sp - 8] = block_cbdmt_info;
           R3 = lvl11_rb6WR_closure;
           R2 = P64[Sp + 16];
           I64[Sp] = I64[R1 + 15];
           I64[Sp + 16] = I64[R1 + 7];
           P64[Sp + 40] = R1;
           Sp = Sp - 8;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdmj_info" {
     block_cbdmj_info:
         const _cbdmj;
         const 9224;
         const 18446744069414584350;
         const ubdow_srtd;
 },
 _cbdmt() //  [R1]
         { []
         }
     {offset
       cbdmt: // global
           if (R1 & 7 == 1) goto ubdol; else goto cbdo9;
       ubdol: // global
           Sp = Sp + 16;
           call _sbc6R() args: 0, res: 0, upd: 0;
       cbdo9: // global
           I64[Sp] = block_cbdmy_info;
           R1 = P64[Sp + 56];
           if (R1 & 7 != 0) goto ubdon; else goto cbdmz;
       ubdon: // global
           call _cbdmy(R1) args: 0, res: 0, upd: 0;
       cbdmz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdmt_info" {
     block_cbdmt_info:
         const _cbdmt;
         const 16713;
         const 30064771102;
         const SbcpG_srt+288;
 },
 _sbc6R() //  []
         { []
         }
     {offset
       sbc6R: // global
           _sbc6V::P64 = P64[P64[Sp + 16] + 8];
           I64[Sp + 8] = block_cbdnh_info;
           R2 = P64[Sp];
           I64[Sp - 16] = stg_ap_ppv_info;
           P64[Sp - 8] = P64[Sp + 32];
           P64[Sp] = _sbc6V::P64;
           Sp = Sp - 16;
           call GHC.IO.BufferedIO.fillReadBuffer0_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _cbdnh() //  [R1]
         { []
         }
     {offset
       cbdnh: // global
           I64[Sp] = block_cbdnj_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubdor; else goto cbdnm;
       ubdor: // global
           call _cbdnj(R1) args: 0, res: 0, upd: 0;
       cbdnm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdnh_info" {
     block_cbdnh_info:
         const _cbdnh;
         const 2310;
         const 4294967326;
         const SbcpG_srt+288;
 },
 _cbdnj() //  [R1]
         { []
         }
     {offset
       cbdnj: // global
           I64[Sp] = block_cbdnq_info;
           _sbc71::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp + 24] = _sbc71::P64;
           if (R1 & 7 != 0) goto ubdos; else goto cbdns;
       ubdos: // global
           call _cbdnq(R1) args: 0, res: 0, upd: 0;
       cbdns: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdnj_info" {
     block_cbdnj_info:
         const _cbdnj;
         const 2310;
         const 4294967326;
         const SbcpG_srt+288;
 },
 _cbdnq() //  [R1]
         { []
         }
     {offset
       cbdnq: // global
           if (R1 & 7 == 1) goto cbdny; else goto cbdnD;
       cbdny: // global
           R1 = P64[Sp + 40];
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbdnD: // global
           I64[Sp] = block_cbdnB_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubdot; else goto cbdnE;
       ubdot: // global
           call _cbdnB(R1) args: 0, res: 0, upd: 0;
       cbdnE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdnq_info" {
     block_cbdnq_info:
         const _cbdnq;
         const 2054;
         const 4294967326;
         const SbcpG_srt+288;
 },
 _cbdnB() //  [R1]
         { []
         }
     {offset
       cbdnB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbdnK; else goto cbdnJ;
       cbdnK: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbdnJ: // global
           _sbc6u::P64 = P64[Sp + 40];
           _sbc76::I64 = I64[R1 + 7];
           if (_sbc76::I64 == 0) goto cbdo0; else goto cbdnZ;
       cbdo0: // global
           Hp = Hp - 16;
           R1 = _sbc6u::P64;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbdnZ: // global
           _sbc6t::P64 = P64[Sp + 32];
           _sbc6v::I64 = I64[Sp + 48];
           _sbc6x::P64 = P64[Sp + 16];
           _sbc6D::P64 = P64[Sp + 8];
           _sbc71::P64 = P64[Sp + 24];
           call MO_WriteBarrier();
           P64[_sbc6D::P64 + 8] = _sbc71::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbc6D::P64);
           if (%MO_S_Gt_W64(_sbc6v::I64,
                            _sbc76::I64)) goto cbdnT; else goto cbdnX;
       cbdnT: // global
           Hp = Hp - 16;
           R6 = R1;
           R5 = _sbc6u::P64;
           R4 = _sbc6t::P64;
           R3 = _sbc71::P64;
           R2 = _sbc6x::P64;
           Sp = Sp + 56;
           call GHC.IO.Handle.Text.hGetBufNonBlocking2_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
       cbdnX: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sbc6v::I64;
           R6 = Hp - 7;
           R5 = _sbc6u::P64;
           R4 = _sbc6t::P64;
           R3 = _sbc71::P64;
           R2 = _sbc6x::P64;
           Sp = Sp + 56;
           call GHC.IO.Handle.Text.hGetBufNonBlocking2_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdnB_info" {
     block_cbdnB_info:
         const _cbdnB;
         const 2054;
         const 4294967326;
         const SbcpG_srt+288;
 },
 _cbdmy() //  [R1]
         { []
         }
     {offset
       cbdmy: // global
           I64[Sp + 56] = block_cbdmG_info;
           R6 = 0;
           R5 = I64[R1 + 7];
           R4 = I64[Sp + 8];
           R3 = I64[Sp + 24];
           R2 = GHC.IO.FD.$fBufferedIOFD8_closure;
           I64[Sp + 48] = I64[Sp + 72];
           Sp = Sp + 48;
           call GHC.IO.FD.$wreadRawBufferPtrNoBlock_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdmy_info" {
     block_cbdmy_info:
         const _cbdmy;
         const 24521;
         const 12884901918;
         const SbcpG_srt+296;
 },
 _cbdmG() //  [R1]
         { []
         }
     {offset
       cbdmG: // global
           I64[Sp] = block_cbdmI_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubdop; else goto cbdmJ;
       ubdop: // global
           call _cbdmI(R1) args: 0, res: 0, upd: 0;
       cbdmJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdmG_info" {
     block_cbdmG_info:
         const _cbdmG;
         const 130;
         const 30;
 },
 _cbdmI() //  [R1]
         { []
         }
     {offset
       cbdmI: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbdoe; else goto cbdod;
       cbdoe: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbdod: // global
           _sbc6u::P64 = P64[Sp + 8];
           _sbc7k::I64 = I64[R1 + 7];
           if (_sbc7k::I64 != (-1)) goto cbdog; else goto cbdoh;
       cbdog: // global
           I64[Hp - 24] = sat_sbc7o_info;
           P64[Hp - 8] = _sbc6u::P64;
           I64[Hp] = _sbc7k::I64;
           R1 = Hp - 24;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbdoh: // global
           Hp = Hp - 32;
           R1 = _sbc6u::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdmI_info" {
     block_cbdmI_info:
         const _cbdmI;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.090704546 UTC

[section ""cstring" . GHC.IO.Handle.Text.hGetBufNonBlocking4_bytes" {
     GHC.IO.Handle.Text.hGetBufNonBlocking4_bytes:
         I8[] [104,71,101,116,66,117,102,78,111,110,66,108,111,99,107,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.093080999 UTC

[section ""data" . GHC.IO.Handle.Text.hGetBufNonBlocking3_closure" {
     GHC.IO.Handle.Text.hGetBufNonBlocking3_closure:
         const GHC.IO.Handle.Text.hGetBufNonBlocking3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Text.hGetBufNonBlocking3_entry() //  [R1]
         { []
         }
     {offset
       cbdrz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbdrA; else goto cbdrB;
       cbdrA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbdrB: // global
           (_cbdrw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbdrw::I64 == 0) goto cbdry; else goto cbdrx;
       cbdry: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbdrx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbdrw::I64;
           R2 = GHC.IO.Handle.Text.hGetBufNonBlocking4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetBufNonBlocking3_info" {
     GHC.IO.Handle.Text.hGetBufNonBlocking3_info:
         const GHC.IO.Handle.Text.hGetBufNonBlocking3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.105823958 UTC

[section ""data" . GHC.IO.Handle.Text.$whGetBufNonBlocking_closure" {
     GHC.IO.Handle.Text.$whGetBufNonBlocking_closure:
         const GHC.IO.Handle.Text.$whGetBufNonBlocking_info;
         const 0;
 },
 sat_sbc8u_entry() //  [R1]
         { []
         }
     {offset
       cbdsv: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbdsz; else goto cbdsA;
       cbdsz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbdsA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbdss_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubdsE; else goto cbdst;
       ubdsE: // global
           call _cbdss(R1) args: 0, res: 0, upd: 0;
       cbdst: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbc8u_info" {
     sat_sbc8u_info:
         const sat_sbc8u_entry;
         const 1;
         const 16;
 },
 _cbdss() //  [R1]
         { []
         }
     {offset
       cbdss: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbdsD; else goto cbdsC;
       cbdsD: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbdsC: // global
           _sbc8p::P64 = P64[R1 + 7];
           _sbc8q::P64 = P64[R1 + 15];
           _sbc8o::I64 = I64[R1 + 23];
           _sbc8r::I64 = I64[R1 + 31];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbc8p::P64;
           P64[Hp - 32] = _sbc8q::P64;
           I64[Hp - 24] = _sbc8o::I64;
           I64[Hp - 16] = _sbc8r::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbdss_info" {
     block_cbdss_info:
         const _cbdss;
         const 0;
         const 30;
 },
 sat_sbc8N_entry() //  [R1]
         { []
         }
     {offset
       cbdt1: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbdt8; else goto cbdt9;
       cbdt8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbdt9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbdsY_info;
           _sbc8D::I64 = I64[R1 + 24];
           R1 = P64[R1 + 16];
           I64[Sp - 24] = _sbc8D::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubdtd; else goto cbdsZ;
       ubdtd: // global
           call _cbdsY(R1) args: 0, res: 0, upd: 0;
       cbdsZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbc8N_info" {
     sat_sbc8N_info:
         const sat_sbc8N_entry;
         const 4294967297;
         const 19;
 },
 _cbdsY() //  [R1]
         { []
         }
     {offset
       cbdsY: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbdtc; else goto cbdtb;
       cbdtc: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbdtb: // global
           _sbc8H::P64 = P64[R1 + 7];
           _sbc8I::P64 = P64[R1 + 15];
           _sbc8G::I64 = I64[R1 + 23];
           _sbc8J::I64 = I64[R1 + 31];
           _sbc8L::I64 = I64[R1 + 47];
           _sbc8M::I64 = I64[R1 + 39] + I64[Sp + 8];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbc8H::P64;
           P64[Hp - 32] = _sbc8I::P64;
           I64[Hp - 24] = _sbc8G::I64;
           I64[Hp - 16] = _sbc8J::I64;
           I64[Hp - 8] = _sbc8M::I64;
           I64[Hp] = _sbc8L::I64;
           R1 = Hp - 47;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbdsY_info" {
     block_cbdsY_info:
         const _cbdsY;
         const 65;
         const 30;
 },
 sat_sbc98_entry() //  [R1, R2]
         { []
         }
     {offset
       cbdte: // global
           if ((Sp + -104) < SpLim) (likely: False) goto cbdtf; else goto cbdtg;
       cbdtf: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbdtg: // global
           I64[Sp - 32] = block_cbdrZ_info;
           _sbc7q::P64 = P64[R1 + 6];
           _sbc7v::P64 = P64[R1 + 14];
           _sbc7t::I64 = I64[R1 + 22];
           R1 = R2;
           P64[Sp - 24] = _sbc7q::P64;
           I64[Sp - 16] = _sbc7t::I64;
           P64[Sp - 8] = _sbc7v::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubduK; else goto cbds0;
       ubduK: // global
           call _cbdrZ(R1) args: 0, res: 0, upd: 0;
       cbds0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbc98_info" {
     sat_sbc98_info:
         const sat_sbc98_entry;
         const 4294967298;
         const 12884901896;
         const 8589934597;
         const SbcpG_srt+280;
 },
 _cbdrZ() //  [R1]
         { []
         }
     {offset
       cbdrZ: // global
           I64[Sp - 40] = block_cbds4_info;
           _sbc7y::P64 = R1;
           _sbc7E::P64 = P64[R1 + 47];
           _sbc7G::P64 = P64[R1 + 63];
           _sbc7H::P64 = P64[R1 + 71];
           _sbc7K::P64 = P64[R1 + 95];
           R1 = P64[_sbc7H::P64 + 8];
           P64[Sp - 32] = _sbc7E::P64;
           P64[Sp - 24] = _sbc7G::P64;
           P64[Sp - 16] = _sbc7H::P64;
           P64[Sp - 8] = _sbc7K::P64;
           P64[Sp] = _sbc7y::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubduA; else goto cbds5;
       ubduA: // global
           call _cbds4(R1) args: 0, res: 0, upd: 0;
       cbds5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdrZ_info" {
     block_cbdrZ_info:
         const _cbdrZ;
         const 131;
         const 12884901918;
         const SbcpG_srt+280;
 },
 _cbds4() //  [R1]
         { []
         }
     {offset
       cbds4: // global
           I64[Sp - 16] = block_cbdsb_info;
           _sbc7X::I64 = I64[R1 + 39];
           _sbc7Y::I64 = I64[R1 + 47];
           R1 = P64[R1 + 15];
           I64[Sp - 8] = _sbc7Y::I64;
           I64[Sp] = _sbc7X::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubduB; else goto cbdsc;
       ubduB: // global
           call _cbdsb(R1) args: 0, res: 0, upd: 0;
       cbdsc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbds4_info" {
     block_cbds4_info:
         const _cbds4;
         const 4104;
         const 12884901918;
         const SbcpG_srt+280;
 },
 _cbdsb() //  [R1]
         { []
         }
     {offset
       cbdsb: // global
           if (R1 & 7 == 1) goto cbdue; else goto ubduv;
       cbdue: // global
           if (I64[Sp + 16] == I64[Sp + 8]) goto ubduw; else goto cbdtA;
       ubduw: // global
           Sp = Sp + 24;
           goto ubduE;
       cbdtA: // global
           _sbc8g::P64 = P64[P64[Sp + 32] + 8];
           I64[Sp + 16] = block_cbdsj_info;
           R1 = _sbc8g::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto ubduC; else goto cbdsk;
       ubduC: // global
           call _cbdsj(R1) args: 0, res: 0, upd: 0;
       cbdsk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ubduv: // global
           Sp = Sp + 24;
           goto ubduE;
       ubduE: // global
           call _sbc7Z() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbdsb_info" {
     block_cbdsb_info:
         const _cbdsb;
         const 16586;
         const 12884901918;
         const SbcpG_srt+280;
 },
 _cbdsj() //  [R1]
         { []
         }
     {offset
       cbdsj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbdtD; else goto cbdtC;
       cbdtD: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbdtC: // global
           _sbc7H::P64 = P64[Sp + 24];
           _sbc8i::P64 = P64[R1 + 7];
           _sbc8j::P64 = P64[R1 + 15];
           _sbc8m::P64 = P64[_sbc7H::P64 + 8];
           I64[Hp - 16] = sat_sbc8u_info;
           P64[Hp] = _sbc8m::P64;
           call MO_WriteBarrier();
           P64[_sbc7H::P64 + 8] = Hp - 16;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbc7H::P64);
           I64[Sp] = block_cbdsI_info;
           R1 = _sbc8m::P64;
           P64[Sp + 16] = _sbc8j::P64;
           P64[Sp + 24] = _sbc8i::P64;
           if (R1 & 7 != 0) goto ubduF; else goto cbdsJ;
       ubduF: // global
           call _cbdsI(R1) args: 0, res: 0, upd: 0;
       cbdsJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdsj_info" {
     block_cbdsj_info:
         const _cbdsj;
         const 4232;
         const 12884901918;
         const SbcpG_srt+280;
 },
 _cbdsI() //  [R1]
         { []
         }
     {offset
       cbdsI: // global
           _sbc8D::I64 = I64[R1 + 39];
           if (_sbc8D::I64 != 0) goto cbdtG; else goto cbdub;
       cbdtG: // global
           I64[Sp - 24] = block_cbdsP_info;
           _sbc8y::P64 = P64[R1 + 7];
           _sbc8z::P64 = P64[R1 + 15];
           _sbc8x::I64 = I64[R1 + 23];
           R1 = P64[Sp + 32];
           P64[Sp - 16] = _sbc8z::P64;
           I64[Sp - 8] = _sbc8D::I64;
           P64[Sp] = _sbc8y::P64;
           I64[Sp + 32] = _sbc8x::I64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubduG; else goto cbdsQ;
       ubduG: // global
           call _cbdsP(R1) args: 0, res: 0, upd: 0;
       cbdsQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbdub: // global
           _sbc7E::P64 = P64[Sp + 8];
           _sbc8j::P64 = P64[Sp + 16];
           call MO_WriteBarrier();
           P64[_sbc7E::P64 + 8] = _sbc8j::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbc7E::P64);
           Sp = Sp + 8;
           call _sbc7Z() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbdsI_info" {
     block_cbdsI_info:
         const _cbdsI;
         const 4104;
         const 12884901918;
         const SbcpG_srt+280;
 },
 _cbdsP() //  [R1]
         { []
         }
     {offset
       cbdsP: // global
           if (R1 & 7 == 1) goto cbdtI; else goto cbdu0;
       cbdtI: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbdtL; else goto cbdtK;
       cbdtL: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbdtK: // global
           I64[Hp - 24] = sat_sbc8N_info;
           P64[Hp - 8] = P64[Sp + 40];
           I64[Hp] = I64[Sp + 16];
           _sbc7E::P64 = P64[Sp + 32];
           call MO_WriteBarrier();
           P64[_sbc7E::P64 + 8] = Hp - 24;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbc7E::P64);
           Sp = Sp + 32;
           call _sbc7Z() args: 0, res: 0, upd: 0;
       cbdu0: // global
           I64[Sp] = block_cbdtO_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubduI; else goto cbdtP;
       ubduI: // global
           call _cbdtO(R1) args: 0, res: 0, upd: 0;
       cbdtP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdsP_info" {
     block_cbdsP_info:
         const _cbdsP;
         const 37003;
         const 12884901918;
         const SbcpG_srt+280;
 },
 _cbdtO() //  [R1]
         { []
         }
     {offset
       cbdtO: // global
           I64[Sp - 8] = block_cbdtT_info;
           R2 = P64[Sp + 48];
           _sbc8R::P64 = P64[R1 + 7];
           _sbc8S::P64 = P64[R1 + 15];
           R1 = P64[R1 + 39];
           P64[Sp] = _sbc8S::P64;
           P64[Sp + 48] = _sbc8R::P64;
           Sp = Sp - 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdtO_info" {
     block_cbdtO_info:
         const _cbdtO;
         const 37003;
         const 12884901918;
         const SbcpG_srt+280;
 },
 _cbdtT() //  [R1]
         { []
         }
     {offset
       cbdtT: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbdu4; else goto cbdu3;
       cbdu4: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbdu3: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = P64[Sp + 16];
           I64[Hp - 24] = I64[Sp + 64];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           I64[Sp + 32] = block_cbdtW_info;
           R5 = Hp - 47;
           R4 = P64[Sp + 48];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 56];
           Sp = Sp + 32;
           call GHC.IO.Handle.Internals.$wstreamEncode_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdtT_info" {
     block_cbdtT_info:
         const _cbdtT;
         const 73996;
         const 12884901918;
         const SbcpG_srt+280;
 },
 _cbdtW() //  [R1]
         { []
         }
     {offset
       cbdtW: // global
           I64[Sp] = block_cbdtY_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubduL; else goto cbdu6;
       ubduL: // global
           call _cbdtY(R1) args: 0, res: 0, upd: 0;
       cbdu6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdtW_info" {
     block_cbdtW_info:
         const _cbdtW;
         const 5000;
         const 12884901918;
         const SbcpG_srt+280;
 },
 _cbdtY() //  [R1]
         { []
         }
     {offset
       cbdtY: // global
           _sbc7E::P64 = P64[Sp + 8];
           _sbc94::P64 = P64[R1 + 7];
           call MO_WriteBarrier();
           P64[_sbc7E::P64 + 8] = _sbc94::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbc7E::P64);
           Sp = Sp + 8;
           call _sbc7Z() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbdtY_info" {
     block_cbdtY_info:
         const _cbdtY;
         const 5000;
         const 12884901918;
         const SbcpG_srt+280;
 },
 _sbc7Z() //  []
         { []
         }
     {offset
       sbc7Z: // global
           _sbc83::P64 = P64[P64[Sp] + 8];
           I64[Sp + 24] = block_cbdtm_info;
           R1 = _sbc83::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto ubduN; else goto cbdto;
       ubduN: // global
           call _cbdtm(R1) args: 0, res: 0, upd: 0;
       cbdto: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbdtm() //  [R1]
         { []
         }
     {offset
       cbdtm: // global
           _sbc7q::P64 = P64[Sp + 16];
           _sbc7y::P64 = P64[Sp + 8];
           if (I64[R1 + 39] == I64[R1 + 47]) goto cbdtx; else goto cbdtw;
       cbdtx: // global
           R6 = I64[Sp + 24];
           R5 = GHC.IO.Handle.Text.hGetBuf3_closure+1;
           R4 = _sbc7q::P64;
           R3 = I64[R1 + 31];
           R2 = _sbc7y::P64;
           Sp = Sp + 40;
           call GHC.IO.Handle.Text.$wbufReadNBEmpty_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
       cbdtw: // global
           R6 = P64[Sp + 32];
           R5 = GHC.IO.Handle.Text.hGetBuf3_closure+1;
           R4 = _sbc7q::P64;
           R3 = R1;
           R2 = _sbc7y::P64;
           Sp = Sp + 40;
           call GHC.IO.Handle.Text.hGetBufNonBlocking2_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdtm_info" {
     block_cbdtm_info:
         const _cbdtm;
         const 260;
         const 12884901918;
         const SbcpG_srt+280;
 },
 section ""relreadonly" . ubduZ_srtd" {
     ubduZ_srtd:
         const SbcpG_srt+8;
         const 41;
         const 1700807051265;
 },
 GHC.IO.Handle.Text.$whGetBufNonBlocking_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbduR: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbduV; else goto cbduU;
       cbduV: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.$whGetBufNonBlocking_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbduU: // global
           if (R4 == 0) goto cbduQ; else goto cbduP;
       cbduQ: // global
           Hp = Hp - 48;
           R1 = GHC.IO.Handle.Text.hGetBuf3_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbduP: // global
           if (%MO_S_Ge_W64(R4, 0)) goto cbduX; else goto cbduY;
       cbduX: // global
           I64[Hp - 40] = GHC.Types.I#_con_info;
           I64[Hp - 32] = R4;
           I64[Hp - 24] = sat_sbc98_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = Hp - 39;
           I64[Hp] = R4;
           R4 = Hp - 22;
           R3 = R2;
           R2 = GHC.IO.Handle.Text.hGetBufNonBlocking3_closure;
           call GHC.IO.Handle.Internals.wantReadableHandle_1_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
       cbduY: // global
           Hp = Hp - 48;
           R4 = R4;
           R3 = GHC.IO.Handle.Text.hGetBufNonBlocking3_closure;
           R2 = R2;
           call GHC.IO.Handle.Text.$willegalBufferSize_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.$whGetBufNonBlocking_info" {
     GHC.IO.Handle.Text.$whGetBufNonBlocking_info:
         const GHC.IO.Handle.Text.$whGetBufNonBlocking_entry;
         const 0;
         const 18446744069414584334;
         const 17179869206;
         const ubduZ_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.141304036 UTC

[section ""data" . GHC.IO.Handle.Text.hGetBufNonBlocking1_closure" {
     GHC.IO.Handle.Text.hGetBufNonBlocking1_closure:
         const GHC.IO.Handle.Text.hGetBufNonBlocking1_info;
         const 0;
 },
 GHC.IO.Handle.Text.hGetBufNonBlocking1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbdwZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbdx0; else goto cbdx1;
       cbdx0: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hGetBufNonBlocking1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbdx1: // global
           I64[Sp - 24] = block_cbdwW_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubdx5; else goto cbdwX;
       ubdx5: // global
           call _cbdwW(R1) args: 0, res: 0, upd: 0;
       cbdwX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetBufNonBlocking1_info" {
     GHC.IO.Handle.Text.hGetBufNonBlocking1_info:
         const GHC.IO.Handle.Text.hGetBufNonBlocking1_entry;
         const 0;
         const 21474836494;
         const 17179869207;
         const SbcpG_srt+320;
 },
 _cbdwW() //  [R1]
         { []
         }
     {offset
       cbdwW: // global
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.IO.Handle.Text.$whGetBufNonBlocking_entry(R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdwW_info" {
     block_cbdwW_info:
         const _cbdwW;
         const 2;
         const 4294967326;
         const SbcpG_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.146487266 UTC

[section ""data" . GHC.IO.Handle.Text.hGetBufNonBlocking_closure" {
     GHC.IO.Handle.Text.hGetBufNonBlocking_closure:
         const GHC.IO.Handle.Text.hGetBufNonBlocking_info;
         const 0;
 },
 GHC.IO.Handle.Text.hGetBufNonBlocking_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbdxk: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.Text.hGetBufNonBlocking1_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetBufNonBlocking_info" {
     GHC.IO.Handle.Text.hGetBufNonBlocking_info:
         const GHC.IO.Handle.Text.hGetBufNonBlocking_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const SbcpG_srt+336;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.149625219 UTC

[section ""cstring" . lvl12_rb6WS_bytes" {
     lvl12_rb6WS_bytes:
         I8[] [104,71,101,116,66,117,102,83,111,109,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.151813713 UTC

[section ""data" . lvl13_rb6WT_closure" {
     lvl13_rb6WT_closure:
         const lvl13_rb6WT_info;
         const 0;
         const 0;
         const 0;
 },
 lvl13_rb6WT_entry() //  [R1]
         { []
         }
     {offset
       cbdxy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbdxz; else goto cbdxA;
       cbdxz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbdxA: // global
           (_cbdxv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbdxv::I64 == 0) goto cbdxx; else goto cbdxw;
       cbdxx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbdxw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbdxv::I64;
           R2 = lvl12_rb6WS_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl13_rb6WT_info" {
     lvl13_rb6WT_info:
         const lvl13_rb6WT_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.168650511 UTC

[section ""data" . GHC.IO.Handle.Text.$whGetBufSome_closure" {
     GHC.IO.Handle.Text.$whGetBufSome_closure:
         const GHC.IO.Handle.Text.$whGetBufSome_info;
         const 0;
 },
 sat_sbcaI_entry() //  [R1]
         { []
         }
     {offset
       cbdyy: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbdyC; else goto cbdyD;
       cbdyC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbdyD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbdyv_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubdyH; else goto cbdyw;
       ubdyH: // global
           call _cbdyv(R1) args: 0, res: 0, upd: 0;
       cbdyw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbcaI_info" {
     sat_sbcaI_info:
         const sat_sbcaI_entry;
         const 1;
         const 16;
 },
 _cbdyv() //  [R1]
         { []
         }
     {offset
       cbdyv: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbdyG; else goto cbdyF;
       cbdyG: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbdyF: // global
           _sbcaD::P64 = P64[R1 + 7];
           _sbcaE::P64 = P64[R1 + 15];
           _sbcaC::I64 = I64[R1 + 23];
           _sbcaF::I64 = I64[R1 + 31];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbcaD::P64;
           P64[Hp - 32] = _sbcaE::P64;
           I64[Hp - 24] = _sbcaC::I64;
           I64[Hp - 16] = _sbcaF::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbdyv_info" {
     block_cbdyv_info:
         const _cbdyv;
         const 0;
         const 30;
 },
 sat_sbcb1_entry() //  [R1]
         { []
         }
     {offset
       cbdz4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbdzb; else goto cbdzc;
       cbdzb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbdzc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbdz1_info;
           _sbcaR::I64 = I64[R1 + 24];
           R1 = P64[R1 + 16];
           I64[Sp - 24] = _sbcaR::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubdzg; else goto cbdz2;
       ubdzg: // global
           call _cbdz1(R1) args: 0, res: 0, upd: 0;
       cbdz2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbcb1_info" {
     sat_sbcb1_info:
         const sat_sbcb1_entry;
         const 4294967297;
         const 19;
 },
 _cbdz1() //  [R1]
         { []
         }
     {offset
       cbdz1: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbdzf; else goto cbdze;
       cbdzf: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbdze: // global
           _sbcaV::P64 = P64[R1 + 7];
           _sbcaW::P64 = P64[R1 + 15];
           _sbcaU::I64 = I64[R1 + 23];
           _sbcaX::I64 = I64[R1 + 31];
           _sbcaZ::I64 = I64[R1 + 47];
           _sbcb0::I64 = I64[R1 + 39] + I64[Sp + 8];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbcaV::P64;
           P64[Hp - 32] = _sbcaW::P64;
           I64[Hp - 24] = _sbcaU::I64;
           I64[Hp - 16] = _sbcaX::I64;
           I64[Hp - 8] = _sbcb0::I64;
           I64[Hp] = _sbcaZ::I64;
           R1 = Hp - 47;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbdz1_info" {
     block_cbdz1_info:
         const _cbdz1;
         const 65;
         const 30;
 },
 section ""relreadonly" . ubdCm_srtd" {
     ubdCm_srtd:
         const SbcpG_srt+56;
         const 38;
         const 210990268417;
 },
 sat_sbcbm_entry() //  [R1, R2]
         { []
         }
     {offset
       cbdzh: // global
           if ((Sp + -144) < SpLim) (likely: False) goto cbdzi; else goto cbdzj;
       cbdzi: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbdzj: // global
           I64[Sp - 32] = block_cbdxY_info;
           _sbc9g::P64 = P64[R1 + 6];
           _sbc9l::P64 = P64[R1 + 14];
           _sbc9j::I64 = I64[R1 + 22];
           R1 = R2;
           P64[Sp - 24] = _sbc9g::P64;
           I64[Sp - 16] = _sbc9j::I64;
           P64[Sp - 8] = _sbc9l::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubdC2; else goto cbdxZ;
       ubdC2: // global
           call _cbdxY(R1) args: 0, res: 0, upd: 0;
       cbdxZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbcbm_info" {
     sat_sbcbm_info:
         const sat_sbcbm_entry;
         const 4294967298;
         const 18446744069414584328;
         const 8589934597;
         const ubdCm_srtd;
 },
 section ""relreadonly" . ubdCn_srtd" {
     ubdCn_srtd:
         const SbcpG_srt+56;
         const 38;
         const 210990268417;
 },
 _cbdxY() //  [R1]
         { []
         }
     {offset
       cbdxY: // global
           I64[Sp - 56] = block_cbdy3_info;
           _sbc9o::P64 = R1;
           _sbc9q::P64 = P64[R1 + 15];
           _sbc9r::P64 = P64[R1 + 23];
           _sbc9u::P64 = P64[R1 + 47];
           _sbc9w::P64 = P64[R1 + 63];
           _sbc9x::P64 = P64[R1 + 71];
           _sbc9A::P64 = P64[R1 + 95];
           R1 = P64[R1 + 31];
           P64[Sp - 48] = _sbc9q::P64;
           P64[Sp - 40] = _sbc9r::P64;
           P64[Sp - 32] = _sbc9u::P64;
           P64[Sp - 24] = _sbc9w::P64;
           P64[Sp - 16] = _sbc9x::P64;
           P64[Sp - 8] = _sbc9A::P64;
           P64[Sp] = _sbc9o::P64;
           Sp = Sp - 56;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdxY_info" {
     block_cbdxY_info:
         const _cbdxY;
         const 131;
         const 18446744069414584350;
         const ubdCn_srtd;
 },
 section ""relreadonly" . ubdCo_srtd" {
     ubdCo_srtd:
         const SbcpG_srt+56;
         const 38;
         const 210990268417;
 },
 _cbdy3() //  [R1]
         { []
         }
     {offset
       cbdy3: // global
           _sbc9K::P64 = P64[P64[Sp + 40] + 8];
           I64[Sp - 24] = block_cbdy7_info;
           _sbc9F::P64 = R1;
           _sbc9G::I64 = I64[R1 + 7];
           _sbc9H::I64 = I64[R1 + 15];
           R1 = _sbc9K::P64;
           I64[Sp - 16] = _sbc9G::I64;
           I64[Sp - 8] = _sbc9H::I64;
           P64[Sp] = _sbc9F::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubdBS; else goto cbdy8;
       ubdBS: // global
           call _cbdy7(R1) args: 0, res: 0, upd: 0;
       cbdy8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdy3_info" {
     block_cbdy3_info:
         const _cbdy3;
         const 16394;
         const 18446744069414584350;
         const ubdCo_srtd;
 },
 section ""relreadonly" . ubdCp_srtd" {
     ubdCp_srtd:
         const SbcpG_srt+56;
         const 38;
         const 210990268417;
 },
 _cbdy7() //  [R1]
         { []
         }
     {offset
       cbdy7: // global
           I64[Sp - 16] = block_cbdye_info;
           _sbc9Q::I64 = I64[R1 + 39];
           _sbc9R::I64 = I64[R1 + 47];
           R1 = P64[R1 + 15];
           I64[Sp - 8] = _sbc9R::I64;
           I64[Sp] = _sbc9Q::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubdBT; else goto cbdyf;
       ubdBT: // global
           call _cbdye(R1) args: 0, res: 0, upd: 0;
       cbdyf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdy7_info" {
     block_cbdy7_info:
         const _cbdy7;
         const 131277;
         const 18446744069414584350;
         const ubdCp_srtd;
 },
 section ""relreadonly" . ubdCq_srtd" {
     ubdCq_srtd:
         const SbcpG_srt+56;
         const 38;
         const 210990268417;
 },
 _cbdye() //  [R1]
         { []
         }
     {offset
       cbdye: // global
           if (R1 & 7 == 1) goto cbdBs; else goto ubdBL;
       cbdBs: // global
           if (I64[Sp + 16] == I64[Sp + 8]) goto ubdBM; else goto cbdAO;
       ubdBM: // global
           Sp = Sp + 24;
           goto ubdBW;
       cbdAO: // global
           _sbcau::P64 = P64[P64[Sp + 72] + 8];
           I64[Sp + 16] = block_cbdym_info;
           R1 = _sbcau::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto ubdBU; else goto cbdyn;
       ubdBU: // global
           call _cbdym(R1) args: 0, res: 0, upd: 0;
       cbdyn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ubdBL: // global
           Sp = Sp + 24;
           goto ubdBW;
       ubdBW: // global
           call _sbc9S() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbdye_info" {
     block_cbdye_info:
         const _cbdye;
         const 525263;
         const 18446744069414584350;
         const ubdCq_srtd;
 },
 section ""relreadonly" . ubdCr_srtd" {
     ubdCr_srtd:
         const SbcpG_srt+56;
         const 38;
         const 210990268417;
 },
 _cbdym() //  [R1]
         { []
         }
     {offset
       cbdym: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbdAR; else goto cbdAQ;
       cbdAR: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbdAQ: // global
           _sbc9x::P64 = P64[Sp + 64];
           _sbcaw::P64 = P64[R1 + 7];
           _sbcax::P64 = P64[R1 + 15];
           _sbcaA::P64 = P64[_sbc9x::P64 + 8];
           I64[Hp - 16] = sat_sbcaI_info;
           P64[Hp] = _sbcaA::P64;
           call MO_WriteBarrier();
           P64[_sbc9x::P64 + 8] = Hp - 16;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbc9x::P64);
           I64[Sp] = block_cbdyL_info;
           R1 = _sbcaA::P64;
           P64[Sp + 56] = _sbcax::P64;
           P64[Sp + 64] = _sbcaw::P64;
           if (R1 & 7 != 0) goto ubdBX; else goto cbdyM;
       ubdBX: // global
           call _cbdyL(R1) args: 0, res: 0, upd: 0;
       cbdyM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdym_info" {
     block_cbdym_info:
         const _cbdym;
         const 135373;
         const 18446744069414584350;
         const ubdCr_srtd;
 },
 section ""relreadonly" . ubdCs_srtd" {
     ubdCs_srtd:
         const SbcpG_srt+56;
         const 38;
         const 210990268417;
 },
 _cbdyL() //  [R1]
         { []
         }
     {offset
       cbdyL: // global
           _sbcaR::I64 = I64[R1 + 39];
           if (_sbcaR::I64 != 0) goto cbdAU; else goto cbdBp;
       cbdAU: // global
           I64[Sp - 24] = block_cbdyS_info;
           _sbcaM::P64 = P64[R1 + 7];
           _sbcaN::P64 = P64[R1 + 15];
           _sbcaL::I64 = I64[R1 + 23];
           R1 = P64[Sp + 72];
           P64[Sp - 16] = _sbcaN::P64;
           I64[Sp - 8] = _sbcaR::I64;
           P64[Sp] = _sbcaM::P64;
           I64[Sp + 72] = _sbcaL::I64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubdBY; else goto cbdyT;
       ubdBY: // global
           call _cbdyS(R1) args: 0, res: 0, upd: 0;
       cbdyT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbdBp: // global
           _sbc9u::P64 = P64[Sp + 48];
           _sbcax::P64 = P64[Sp + 56];
           call MO_WriteBarrier();
           P64[_sbc9u::P64 + 8] = _sbcax::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbc9u::P64);
           Sp = Sp + 8;
           call _sbc9S() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbdyL_info" {
     block_cbdyL_info:
         const _cbdyL;
         const 131277;
         const 18446744069414584350;
         const ubdCs_srtd;
 },
 section ""relreadonly" . ubdCt_srtd" {
     ubdCt_srtd:
         const SbcpG_srt+56;
         const 38;
         const 210990268417;
 },
 _cbdyS() //  [R1]
         { []
         }
     {offset
       cbdyS: // global
           if (R1 & 7 == 1) goto cbdAW; else goto cbdBe;
       cbdAW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbdAZ; else goto cbdAY;
       cbdAZ: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbdAY: // global
           I64[Hp - 24] = sat_sbcb1_info;
           P64[Hp - 8] = P64[Sp + 80];
           I64[Hp] = I64[Sp + 16];
           _sbc9u::P64 = P64[Sp + 72];
           call MO_WriteBarrier();
           P64[_sbc9u::P64 + 8] = Hp - 24;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbc9u::P64);
           Sp = Sp + 32;
           call _sbc9S() args: 0, res: 0, upd: 0;
       cbdBe: // global
           I64[Sp] = block_cbdB2_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubdC0; else goto cbdB3;
       ubdC0: // global
           call _cbdB2(R1) args: 0, res: 0, upd: 0;
       cbdB3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdyS_info" {
     block_cbdyS_info:
         const _cbdyS;
         const 1181328;
         const 18446744069414584350;
         const ubdCt_srtd;
 },
 section ""relreadonly" . ubdCu_srtd" {
     ubdCu_srtd:
         const SbcpG_srt+56;
         const 38;
         const 210990268417;
 },
 _cbdB2() //  [R1]
         { []
         }
     {offset
       cbdB2: // global
           I64[Sp - 8] = block_cbdB7_info;
           R2 = P64[Sp + 88];
           _sbcb5::P64 = P64[R1 + 7];
           _sbcb6::P64 = P64[R1 + 15];
           R1 = P64[R1 + 39];
           P64[Sp] = _sbcb6::P64;
           P64[Sp + 88] = _sbcb5::P64;
           Sp = Sp - 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdB2_info" {
     block_cbdB2_info:
         const _cbdB2;
         const 1181328;
         const 18446744069414584350;
         const ubdCu_srtd;
 },
 section ""relreadonly" . ubdCv_srtd" {
     ubdCv_srtd:
         const SbcpG_srt+56;
         const 38;
         const 210990268417;
 },
 _cbdB7() //  [R1]
         { []
         }
     {offset
       cbdB7: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbdBi; else goto cbdBh;
       cbdBi: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbdBh: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = P64[Sp + 16];
           I64[Hp - 24] = I64[Sp + 104];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           I64[Sp + 32] = block_cbdBa_info;
           R5 = Hp - 47;
           R4 = P64[Sp + 88];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 96];
           Sp = Sp + 32;
           call GHC.IO.Handle.Internals.$wstreamEncode_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdB7_info" {
     block_cbdB7_info:
         const _cbdB7;
         const 2362641;
         const 18446744069414584350;
         const ubdCv_srtd;
 },
 section ""relreadonly" . ubdCw_srtd" {
     ubdCw_srtd:
         const SbcpG_srt+56;
         const 38;
         const 210990268417;
 },
 _cbdBa() //  [R1]
         { []
         }
     {offset
       cbdBa: // global
           I64[Sp] = block_cbdBc_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubdC8; else goto cbdBk;
       ubdC8: // global
           call _cbdBc(R1) args: 0, res: 0, upd: 0;
       cbdBk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdBa_info" {
     block_cbdBa_info:
         const _cbdBa;
         const 159949;
         const 18446744069414584350;
         const ubdCw_srtd;
 },
 section ""relreadonly" . ubdCx_srtd" {
     ubdCx_srtd:
         const SbcpG_srt+56;
         const 38;
         const 210990268417;
 },
 _cbdBc() //  [R1]
         { []
         }
     {offset
       cbdBc: // global
           _sbc9u::P64 = P64[Sp + 48];
           _sbcbi::P64 = P64[R1 + 7];
           call MO_WriteBarrier();
           P64[_sbc9u::P64 + 8] = _sbcbi::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbc9u::P64);
           Sp = Sp + 8;
           call _sbc9S() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbdBc_info" {
     block_cbdBc_info:
         const _cbdBc;
         const 159949;
         const 18446744069414584350;
         const ubdCx_srtd;
 },
 _sbc9S() //  []
         { []
         }
     {offset
       sbc9S: // global
           _sbc9W::P64 = P64[P64[Sp + 40] + 8];
           I64[Sp - 8] = block_cbdzq_info;
           R1 = _sbc9W::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubdCa; else goto cbdzs;
       ubdCa: // global
           call _cbdzq(R1) args: 0, res: 0, upd: 0;
       cbdzs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . ubdCy_srtd" {
     ubdCy_srtd:
         const SbcpG_srt+56;
         const 38;
         const 210990268417;
 },
 _cbdzq() //  [R1]
         { []
         }
     {offset
       cbdzq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbdzy; else goto cbdzx;
       cbdzy: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbdzx: // global
           _sbc9j::I64 = I64[Sp + 96];
           _sbca2::I64 = I64[R1 + 39];
           _sbca3::I64 = I64[R1 + 47];
           if (_sbca2::I64 == _sbca3::I64) goto cbdAL; else goto cbdzN;
       cbdAL: // global
           if (%MO_S_Le_W64(_sbc9j::I64,
                            I64[R1 + 31])) goto cbdAq; else goto cbdAu;
       cbdAq: // global
           Hp = Hp - 16;
           P64[Sp + 72] = R1;
           Sp = Sp + 24;
           call _sbca8() args: 0, res: 0, upd: 0;
       cbdAu: // global
           Hp = Hp - 16;
           I64[Sp] = block_cbdAt_info;
           R3 = lvl11_rb6WR_closure;
           R2 = P64[Sp + 40];
           P64[Sp + 72] = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
       cbdzN: // global
           _sbc9g::P64 = P64[Sp + 88];
           _sbc9o::P64 = P64[Sp + 80];
           _sbca5::I64 = _sbca3::I64 - _sbca2::I64;
           if (%MO_S_Gt_W64(_sbc9j::I64,
                            _sbca5::I64)) goto cbdzK; else goto cbdzL;
       cbdzK: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sbca5::I64;
           R6 = Hp - 7;
           R5 = GHC.IO.Handle.Text.hGetBuf3_closure+1;
           R4 = _sbc9g::P64;
           R3 = R1;
           R2 = _sbc9o::P64;
           Sp = Sp + 112;
           call GHC.IO.Handle.Text.hGetBufNonBlocking2_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
       cbdzL: // global
           Hp = Hp - 16;
           R6 = P64[Sp + 104];
           R5 = GHC.IO.Handle.Text.hGetBuf3_closure+1;
           R4 = _sbc9g::P64;
           R3 = R1;
           R2 = _sbc9o::P64;
           Sp = Sp + 112;
           call GHC.IO.Handle.Text.hGetBufNonBlocking2_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdzq_info" {
     block_cbdzq_info:
         const _cbdzq;
         const 159949;
         const 18446744069414584350;
         const ubdCy_srtd;
 },
 _cbdAt() //  [R1]
         { []
         }
     {offset
       cbdAt: // global
           if (R1 & 7 == 1) goto ubdBR; else goto cbdAF;
       ubdBR: // global
           Sp = Sp + 24;
           call _sbca8() args: 0, res: 0, upd: 0;
       cbdAF: // global
           I64[Sp] = block_cbdAD_info;
           R1 = P64[Sp + 88];
           if (R1 & 7 != 0) goto ubdC6; else goto cbdAG;
       ubdC6: // global
           call _cbdAD(R1) args: 0, res: 0, upd: 0;
       cbdAG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdAt_info" {
     block_cbdAt_info:
         const _cbdAt;
         const 144589;
         const 1653562408990;
         const SbcpG_srt+288;
 },
 _sbca8() //  []
         { []
         }
     {offset
       sbca8: // global
           I64[Sp + 16] = block_cbdzU_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_ppv_info;
           P64[Sp + 8] = P64[Sp + 48];
           Sp = Sp - 8;
           call GHC.IO.BufferedIO.fillReadBuffer_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _cbdzU() //  [R1]
         { []
         }
     {offset
       cbdzU: // global
           I64[Sp] = block_cbdzW_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubdC4; else goto cbdzX;
       ubdC4: // global
           call _cbdzW(R1) args: 0, res: 0, upd: 0;
       cbdzX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdzU_info" {
     block_cbdzU_info:
         const _cbdzU;
         const 5000;
         const 4294967326;
         const SbcpG_srt+288;
 },
 _cbdzW() //  [R1]
         { []
         }
     {offset
       cbdzW: // global
           I64[Sp] = block_cbdA1_info;
           _sbcaf::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp + 32] = _sbcaf::P64;
           if (R1 & 7 != 0) goto ubdC5; else goto cbdA5;
       ubdC5: // global
           call _cbdA1(R1) args: 0, res: 0, upd: 0;
       cbdA5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdzW_info" {
     block_cbdzW_info:
         const _cbdzW;
         const 5000;
         const 4294967326;
         const SbcpG_srt+288;
 },
 _cbdA1() //  [R1]
         { []
         }
     {offset
       cbdA1: // global
           _sbcai::I64 = I64[R1 + 7];
           if (_sbcai::I64 == 0) goto cbdAm; else goto cbdAl;
       cbdAm: // global
           R1 = GHC.IO.Handle.Text.hGetBuf3_closure+1;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbdAl: // global
           _sbc9g::P64 = P64[Sp + 48];
           _sbc9j::I64 = I64[Sp + 56];
           _sbc9l::P64 = P64[Sp + 64];
           _sbc9o::P64 = P64[Sp + 40];
           _sbc9u::P64 = P64[Sp + 8];
           _sbcaf::P64 = P64[Sp + 32];
           call MO_WriteBarrier();
           P64[_sbc9u::P64 + 8] = _sbcaf::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbc9u::P64);
           if (%MO_S_Gt_W64(_sbcai::I64,
                            _sbc9j::I64)) goto cbdAi; else goto cbdAj;
       cbdAi: // global
           R6 = _sbc9l::P64;
           R5 = GHC.IO.Handle.Text.hGetBuf3_closure+1;
           R4 = _sbc9g::P64;
           R3 = _sbcaf::P64;
           R2 = _sbc9o::P64;
           Sp = Sp + 72;
           call GHC.IO.Handle.Text.hGetBufNonBlocking2_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
       cbdAj: // global
           R6 = R1;
           R5 = GHC.IO.Handle.Text.hGetBuf3_closure+1;
           R4 = _sbc9g::P64;
           R3 = _sbcaf::P64;
           R2 = _sbc9o::P64;
           Sp = Sp + 72;
           call GHC.IO.Handle.Text.hGetBufNonBlocking2_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdA1_info" {
     block_cbdA1_info:
         const _cbdA1;
         const 4488;
         const 4294967326;
         const SbcpG_srt+288;
 },
 _cbdAD() //  [R1]
         { []
         }
     {offset
       cbdAD: // global
           R6 = 0;
           R5 = I64[R1 + 7];
           R4 = I64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = GHC.IO.FD.$fBufferedIOFD12_closure;
           I64[Sp + 104] = I64[Sp + 96];
           Sp = Sp + 104;
           call GHC.IO.FD.$wreadRawBufferPtr_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdAD_info" {
     block_cbdAD_info:
         const _cbdAD;
         const 524237;
         const 12884901918;
         const SbcpG_srt+344;
 },
 section ""relreadonly" . ubdCz_srtd" {
     ubdCz_srtd:
         const SbcpG_srt+8;
         const 46;
         const 66279935313985;
 },
 GHC.IO.Handle.Text.$whGetBufSome_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbdCe: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbdCi; else goto cbdCh;
       cbdCi: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.$whGetBufSome_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbdCh: // global
           if (R4 == 0) goto cbdCd; else goto cbdCc;
       cbdCd: // global
           Hp = Hp - 48;
           R1 = GHC.IO.Handle.Text.hGetBuf3_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbdCc: // global
           if (%MO_S_Ge_W64(R4, 0)) goto cbdCk; else goto cbdCl;
       cbdCk: // global
           I64[Hp - 40] = GHC.Types.I#_con_info;
           I64[Hp - 32] = R4;
           I64[Hp - 24] = sat_sbcbm_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = Hp - 39;
           I64[Hp] = R4;
           R4 = Hp - 22;
           R3 = R2;
           R2 = lvl13_rb6WT_closure;
           call GHC.IO.Handle.Internals.wantReadableHandle_1_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
       cbdCl: // global
           Hp = Hp - 48;
           R4 = R4;
           R3 = lvl13_rb6WT_closure;
           R2 = R2;
           call GHC.IO.Handle.Text.$willegalBufferSize_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.$whGetBufSome_info" {
     GHC.IO.Handle.Text.$whGetBufSome_info:
         const GHC.IO.Handle.Text.$whGetBufSome_entry;
         const 0;
         const 18446744069414584334;
         const 17179869206;
         const ubdCz_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.2247824 UTC

[section ""data" . GHC.IO.Handle.Text.hGetBufSome1_closure" {
     GHC.IO.Handle.Text.hGetBufSome1_closure:
         const GHC.IO.Handle.Text.hGetBufSome1_info;
         const 0;
 },
 GHC.IO.Handle.Text.hGetBufSome1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbdFo: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbdFp; else goto cbdFq;
       cbdFp: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hGetBufSome1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbdFq: // global
           I64[Sp - 24] = block_cbdFl_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubdFu; else goto cbdFm;
       ubdFu: // global
           call _cbdFl(R1) args: 0, res: 0, upd: 0;
       cbdFm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetBufSome1_info" {
     GHC.IO.Handle.Text.hGetBufSome1_info:
         const GHC.IO.Handle.Text.hGetBufSome1_entry;
         const 0;
         const 21474836494;
         const 17179869207;
         const SbcpG_srt+360;
 },
 _cbdFl() //  [R1]
         { []
         }
     {offset
       cbdFl: // global
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.IO.Handle.Text.$whGetBufSome_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdFl_info" {
     block_cbdFl_info:
         const _cbdFl;
         const 2;
         const 4294967326;
         const SbcpG_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.230198913 UTC

[section ""data" . GHC.IO.Handle.Text.hGetBufSome_closure" {
     GHC.IO.Handle.Text.hGetBufSome_closure:
         const GHC.IO.Handle.Text.hGetBufSome_info;
         const 0;
 },
 GHC.IO.Handle.Text.hGetBufSome_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbdFJ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.Text.hGetBufSome1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetBufSome_info" {
     GHC.IO.Handle.Text.hGetBufSome_info:
         const GHC.IO.Handle.Text.hGetBufSome_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const SbcpG_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.24597755 UTC

[section ""data" . GHC.IO.Handle.Text.hGetBuf4_closure" {
     GHC.IO.Handle.Text.hGetBuf4_closure:
         const GHC.IO.Handle.Text.hGetBuf4_info;
         const 0;
 },
 GHC.IO.Handle.Text.hGetBuf4_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cbdFX: // global
           if ((Sp + -88) < SpLim) (likely: False) goto cbdGb; else goto cbdGc;
       cbdGb: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hGetBuf4_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbdGc: // global
           I64[Sp - 40] = block_cbdFU_info;
           R1 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubdHH; else goto cbdFV;
       ubdHH: // global
           call _cbdFU(R1) args: 0, res: 0, upd: 0;
       cbdFV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetBuf4_info" {
     GHC.IO.Handle.Text.hGetBuf4_info:
         const GHC.IO.Handle.Text.hGetBuf4_entry;
         const 0;
         const 12884901902;
         const 25769803801;
         const SbcpG_srt+384;
 },
 _cbdFU() //  [R1]
         { []
         }
     {offset
       cbdFU: // global
           I64[Sp - 8] = block_cbdG0_info;
           _sbcbz::P64 = R1;
           _sbcbF::P64 = P64[R1 + 47];
           R1 = P64[Sp + 8];
           P64[Sp] = _sbcbF::P64;
           P64[Sp + 8] = _sbcbz::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubdHG; else goto cbdG1;
       ubdHG: // global
           call _cbdG0(R1) args: 0, res: 0, upd: 0;
       cbdG1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdFU_info" {
     block_cbdFU_info:
         const _cbdFU;
         const 4;
         const 4294967326;
         const SbcpG_srt+384;
 },
 _cbdG0() //  [R1]
         { []
         }
     {offset
       cbdG0: // global
           I64[Sp - 40] = block_cbdG5_info;
           _sbcbS::P64 = P64[R1 + 7];
           _sbcbT::P64 = P64[R1 + 15];
           _sbcbR::I64 = I64[R1 + 23];
           _sbcbU::I64 = I64[R1 + 31];
           _sbcbV::I64 = I64[R1 + 39];
           _sbcbW::I64 = I64[R1 + 47];
           R1 = P64[Sp + 32];
           P64[Sp - 32] = _sbcbT::P64;
           I64[Sp - 24] = _sbcbU::I64;
           I64[Sp - 16] = _sbcbV::I64;
           I64[Sp - 8] = _sbcbW::I64;
           P64[Sp] = _sbcbS::P64;
           I64[Sp + 32] = _sbcbR::I64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubdHI; else goto cbdG6;
       ubdHI: // global
           call _cbdG5(R1) args: 0, res: 0, upd: 0;
       cbdG6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdG0_info" {
     block_cbdG0_info:
         const _cbdG0;
         const 5;
         const 4294967326;
         const SbcpG_srt+384;
 },
 _cbdG5() //  [R1]
         { []
         }
     {offset
       cbdG5: // global
           I64[Sp] = block_cbdGa_info;
           _sbcbY::I64 = I64[R1 + 7];
           R1 = P64[Sp + 80];
           I64[Sp + 80] = _sbcbY::I64;
           if (R1 & 7 != 0) goto ubdHJ; else goto cbdGg;
       ubdHJ: // global
           call _cbdGa(R1) args: 0, res: 0, upd: 0;
       cbdGg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdG5_info" {
     block_cbdG5_info:
         const _cbdG5;
         const 17290;
         const 4294967326;
         const SbcpG_srt+384;
 },
 _cbdGa() //  [R1]
         { []
         }
     {offset
       cbdGa: // global
           _sbcbv::P64 = P64[Sp + 64];
           _sbcc0::I64 = I64[R1 + 7];
           _sbcc1::I64 = I64[Sp + 32] - I64[Sp + 24];
           if (%MO_S_Ge_W64(_sbcc0::I64,
                            _sbcc1::I64)) goto cbdGt; else goto cbdHC;
       cbdGt: // global
           I64[Sp] = block_cbdGr_info;
           R1 = _sbcbv::P64;
           I64[Sp + 32] = _sbcc1::I64;
           I64[Sp + 64] = _sbcc0::I64;
           if (R1 & 7 != 0) goto ubdHK; else goto cbdGu;
       ubdHK: // global
           call _cbdGr(R1) args: 0, res: 0, upd: 0;
       cbdGu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbdHC: // global
           I64[Sp] = block_cbdHb_info;
           R1 = _sbcbv::P64;
           I64[Sp + 64] = _sbcc0::I64;
           if (R1 & 7 != 0) goto ubdHL; else goto cbdHc;
       ubdHL: // global
           call _cbdHb(R1) args: 0, res: 0, upd: 0;
       cbdHc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdGa_info" {
     block_cbdGa_info:
         const _cbdGa;
         const 50058;
         const 4294967326;
         const SbcpG_srt+384;
 },
 _cbdGr() //  [R1]
         { []
         }
     {offset
       cbdGr: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cbdGA; else goto cbdGz;
       cbdGA: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbdGz: // global
           _sbcbz::P64 = P64[Sp + 56];
           _sbcbF::P64 = P64[Sp + 48];
           _sbcbR::I64 = I64[Sp + 72];
           _sbcbS::P64 = P64[Sp + 40];
           _sbcbT::P64 = P64[Sp + 8];
           _sbcbU::I64 = I64[Sp + 16];
           _sbcbY::I64 = I64[Sp + 80];
           _sbcc0::I64 = I64[Sp + 64];
           _sbcc1::I64 = I64[Sp + 32];
           _sbcc4::I64 = I64[R1 + 7];
           (_sbcca::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memcpy(_sbcc4::I64, _sbcbR::I64 + I64[Sp + 24], _sbcc1::I64);
           call MO_Touch(_sbcbS::P64);
           I64[Hp - 96] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 88] = _sbcbS::P64;
           P64[Hp - 80] = _sbcbT::P64;
           I64[Hp - 72] = _sbcbR::I64;
           I64[Hp - 64] = _sbcbU::I64;
           I64[Hp - 56] = 0;
           I64[Hp - 48] = 0;
           call MO_WriteBarrier();
           _cbdGM::P64 = Hp - 95;
           P64[_sbcbF::P64 + 8] = _cbdGM::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbcbF::P64);
           _sbcce::I64 = _sbcc0::I64 - _sbcc1::I64;
           if (_sbcce::I64 != 0) goto cbdH3; else goto cbdH9;
       cbdH3: // global
           I64[Hp - 40] = GHC.Types.I#_con_info;
           I64[Hp - 32] = _sbcce::I64;
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _sbcbY::I64 + _sbcc1::I64;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sbcc4::I64 + _sbcc1::I64;
           R6 = Hp - 39;
           R5 = Hp - 23;
           R4 = Hp - 7;
           R3 = _cbdGM::P64;
           R2 = _sbcbz::P64;
           Sp = Sp + 88;
           call GHC.IO.Handle.Text.hGetBuf2_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
       cbdH9: // global
           I64[Hp - 40] = GHC.Types.I#_con_info;
           I64[Hp - 32] = _sbcbY::I64 + _sbcc1::I64;
           _cbdH8::P64 = Hp - 39;
           Hp = Hp - 32;
           R1 = _cbdH8::P64;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdGr_info" {
     block_cbdGr_info:
         const _cbdGr;
         const 58250;
         const 4294967326;
         const SbcpG_srt+384;
 },
 _cbdHb() //  [R1]
         { []
         }
     {offset
       cbdHb: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cbdHF; else goto cbdHE;
       cbdHF: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbdHE: // global
           _sbcbF::P64 = P64[Sp + 48];
           _sbcbR::I64 = I64[Sp + 72];
           _sbcbS::P64 = P64[Sp + 40];
           _sbcbT::P64 = P64[Sp + 8];
           _sbcbU::I64 = I64[Sp + 16];
           _sbcbV::I64 = I64[Sp + 24];
           _sbcbW::I64 = I64[Sp + 32];
           _sbcbY::I64 = I64[Sp + 80];
           _sbcc0::I64 = I64[Sp + 64];
           (_sbcct::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memcpy(I64[R1 + 7], _sbcbR::I64 + _sbcbV::I64, _sbcc0::I64);
           call MO_Touch(_sbcbS::P64);
           I64[Hp - 64] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 56] = _sbcbS::P64;
           P64[Hp - 48] = _sbcbT::P64;
           I64[Hp - 40] = _sbcbR::I64;
           I64[Hp - 32] = _sbcbU::I64;
           I64[Hp - 24] = _sbcbV::I64 + _sbcc0::I64;
           I64[Hp - 16] = _sbcbW::I64;
           call MO_WriteBarrier();
           P64[_sbcbF::P64 + 8] = Hp - 63;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbcbF::P64);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sbcbY::I64 + _sbcc0::I64;
           R1 = Hp - 7;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdHb_info" {
     block_cbdHb_info:
         const _cbdHb;
         const 62346;
         const 30;
 },
 section ""data" . GHC.IO.Handle.Text.hGetBuf2_closure" {
     GHC.IO.Handle.Text.hGetBuf2_closure:
         const GHC.IO.Handle.Text.hGetBuf2_info;
         const 0;
 },
 sat_sbcdq_entry() //  [R1]
         { []
         }
     {offset
       cbdJd: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbdJk; else goto cbdJl;
       cbdJk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbdJl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbdJa_info;
           _sbcdl::I64 = I64[R1 + 24];
           R1 = P64[R1 + 16];
           I64[Sp - 24] = _sbcdl::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubdJp; else goto cbdJb;
       ubdJp: // global
           call _cbdJa(R1) args: 0, res: 0, upd: 0;
       cbdJb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbcdq_info" {
     sat_sbcdq_info:
         const sat_sbcdq_entry;
         const 4294967297;
         const 19;
 },
 _cbdJa() //  [R1]
         { []
         }
     {offset
       cbdJa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbdJo; else goto cbdJn;
       cbdJo: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbdJn: // global
           _sbcdp::I64 = I64[R1 + 7] + I64[Sp + 8];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sbcdp::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbdJa_info" {
     block_cbdJa_info:
         const _cbdJa;
         const 65;
         const 30;
 },
 sat_sbcdu_entry() //  [R1]
         { []
         }
     {offset
       cbdJx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbdJy; else goto cbdJz;
       cbdJy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbdJz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.$fNumInt_$c+_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbcdu_info" {
     sat_sbcdu_info:
         const sat_sbcdu_entry;
         const 2;
         const 18;
 },
 section ""relreadonly" . ubdL0_srtd" {
     ubdL0_srtd:
         const SbcpG_srt+56;
         const 43;
         const 6807523164161;
 },
 GHC.IO.Handle.Text.hGetBuf2_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cbdJA: // global
           if ((Sp + -96) < SpLim) (likely: False) goto cbdJB; else goto cbdJC;
       cbdJB: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hGetBuf2_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbdJC: // global
           I64[Sp - 40] = block_cbdHQ_info;
           R1 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubdKX; else goto cbdHR;
       ubdKX: // global
           call _cbdHQ(R1) args: 0, res: 0, upd: 0;
       cbdHR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetBuf2_info" {
     GHC.IO.Handle.Text.hGetBuf2_info:
         const GHC.IO.Handle.Text.hGetBuf2_entry;
         const 0;
         const 18446744069414584334;
         const 25769803801;
         const ubdL0_srtd;
 },
 section ""relreadonly" . ubdL1_srtd" {
     ubdL1_srtd:
         const SbcpG_srt+56;
         const 43;
         const 4608499908609;
 },
 _cbdHQ() //  [R1]
         { []
         }
     {offset
       cbdHQ: // global
           I64[Sp - 32] = block_cbdHV_info;
           _sbccG::P64 = R1;
           _sbccI::P64 = P64[R1 + 15];
           _sbccJ::P64 = P64[R1 + 23];
           _sbccK::P64 = P64[R1 + 31];
           _sbccM::P64 = P64[R1 + 47];
           R1 = P64[Sp + 8];
           P64[Sp - 24] = _sbccJ::P64;
           P64[Sp - 16] = _sbccK::P64;
           P64[Sp - 8] = _sbccM::P64;
           P64[Sp] = _sbccI::P64;
           P64[Sp + 8] = _sbccG::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubdKJ; else goto cbdHW;
       ubdKJ: // global
           call _cbdHV(R1) args: 0, res: 0, upd: 0;
       cbdHW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdHQ_info" {
     block_cbdHQ_info:
         const _cbdHQ;
         const 4;
         const 18446744069414584350;
         const ubdL1_srtd;
 },
 section ""relreadonly" . ubdL2_srtd" {
     ubdL2_srtd:
         const SbcpG_srt+56;
         const 43;
         const 4608499908609;
 },
 _cbdHV() //  [R1]
         { []
         }
     {offset
       cbdHV: // global
           I64[Sp - 8] = block_cbdI0_info;
           _sbccX::P64 = R1;
           _sbcd1::I64 = I64[R1 + 31];
           R1 = P64[Sp + 64];
           I64[Sp] = _sbcd1::I64;
           P64[Sp + 64] = _sbccX::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubdKK; else goto cbdI1;
       ubdKK: // global
           call _cbdI0(R1) args: 0, res: 0, upd: 0;
       cbdI1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdHV_info" {
     block_cbdHV_info:
         const _cbdHV;
         const 8;
         const 18446744069414584350;
         const ubdL2_srtd;
 },
 section ""relreadonly" . ubdL3_srtd" {
     ubdL3_srtd:
         const SbcpG_srt+56;
         const 43;
         const 4608499908609;
 },
 _cbdI0() //  [R1]
         { []
         }
     {offset
       cbdI0: // global
           _sbcd5::I64 = I64[R1 + 7];
           if (%MO_S_Le_W64(_sbcd5::I64,
                            I64[Sp + 8])) goto ubdKB; else goto cbdK5;
       ubdKB: // global
           P64[Sp + 16] = R1;
           Sp = Sp + 16;
           call _sbcd6() args: 0, res: 0, upd: 0;
       cbdK5: // global
           I64[Sp] = block_cbdIb_info;
           R3 = lvl11_rb6WR_closure;
           R2 = P64[Sp + 16];
           I64[Sp + 8] = _sbcd5::I64;
           P64[Sp + 16] = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdI0_info" {
     block_cbdI0_info:
         const _cbdI0;
         const 73;
         const 18446744069414584350;
         const ubdL3_srtd;
 },
 _cbdIb() //  [R1]
         { []
         }
     {offset
       cbdIb: // global
           if (R1 & 7 == 1) goto ubdKC; else goto cbdKv;
       ubdKC: // global
           Sp = Sp + 16;
           call _sbcd6() args: 0, res: 0, upd: 0;
       cbdKv: // global
           I64[Sp + 40] = I64[Sp + 8];
           P64[Sp + 48] = GHC.IO.Handle.Text.hGetBuf3_closure+1;
           P64[Sp + 72] = P64[Sp + 24];
           Sp = Sp + 40;
           call _cbdIm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbdIb_info" {
     block_cbdIb_info:
         const _cbdIb;
         const 73;
         const 287762808862;
         const SbcpG_srt+344;
 },
 _sbcd6() //  []
         { []
         }
     {offset
       sbcd6: // global
           I64[Sp - 8] = block_cbdJJ_info;
           R2 = P64[Sp + 24];
           I64[Sp - 32] = stg_ap_ppv_info;
           P64[Sp - 24] = P64[Sp + 8];
           P64[Sp - 16] = P64[Sp + 56];
           Sp = Sp - 32;
           call GHC.IO.BufferedIO.fillReadBuffer_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _cbdJJ() //  [R1]
         { []
         }
     {offset
       cbdJJ: // global
           I64[Sp] = block_cbdJL_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubdKY; else goto cbdJM;
       ubdKY: // global
           call _cbdJL(R1) args: 0, res: 0, upd: 0;
       cbdJM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdJJ_info" {
     block_cbdJJ_info:
         const _cbdJJ;
         const 8840;
         const 4294967326;
         const SbcpG_srt+392;
 },
 _cbdJL() //  [R1]
         { []
         }
     {offset
       cbdJL: // global
           I64[Sp] = block_cbdJQ_info;
           _sbcdd::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp + 64] = _sbcdd::P64;
           if (R1 & 7 != 0) goto ubdKZ; else goto cbdJU;
       ubdKZ: // global
           call _cbdJQ(R1) args: 0, res: 0, upd: 0;
       cbdJU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdJL_info" {
     block_cbdJL_info:
         const _cbdJL;
         const 8840;
         const 4294967326;
         const SbcpG_srt+392;
 },
 _cbdJQ() //  [R1]
         { []
         }
     {offset
       cbdJQ: // global
           _sbccD::P64 = P64[Sp + 56];
           if (I64[R1 + 7] == 0) goto cbdK2; else goto cbdK1;
       cbdK2: // global
           R1 = _sbccD::P64;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbdK1: // global
           _sbccC::P64 = P64[Sp + 48];
           _sbccG::P64 = P64[Sp + 40];
           _sbccM::P64 = P64[Sp + 24];
           _sbcd4::P64 = P64[Sp + 8];
           _sbcdd::P64 = P64[Sp + 64];
           call MO_WriteBarrier();
           P64[_sbccM::P64 + 8] = _sbcdd::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbccM::P64);
           R6 = _sbcd4::P64;
           R5 = _sbccD::P64;
           R4 = _sbccC::P64;
           R3 = _sbcdd::P64;
           R2 = _sbccG::P64;
           Sp = Sp + 72;
           call GHC.IO.Handle.Text.hGetBuf4_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdJQ_info" {
     block_cbdJQ_info:
         const _cbdJQ;
         const 648;
         const 4294967326;
         const SbcpG_srt+392;
 },
 _cbdIm() //  []
         { []
         }
     {offset
       cbdIm: // global
           if (%MO_S_Gt_W64(I64[Sp], 0)) goto cbdKj; else goto cbdKu;
       cbdKj: // global
           I64[Sp - 8] = block_cbdIs_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubdKO; else goto cbdIt;
       ubdKO: // global
           call _cbdIs(R1) args: 0, res: 0, upd: 0;
       cbdIt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbdKu: // global
           P64[Sp + 32] = P64[Sp + 8];
           Sp = Sp + 24;
           call _cbdJr() args: 0, res: 0, upd: 0;
     }
 },
 _cbdIs() //  [R1]
         { []
         }
     {offset
       cbdIs: // global
           I64[Sp] = block_cbdIx_info;
           _sbcdC::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _sbcdC::I64;
           if (R1 & 7 != 0) goto ubdKQ; else goto cbdIy;
       ubdKQ: // global
           call _cbdIx(R1) args: 0, res: 0, upd: 0;
       cbdIy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdIs_info" {
     block_cbdIs_info:
         const _cbdIs;
         const 69;
         const 12884901918;
         const SbcpG_srt+344;
 },
 _cbdIx() //  [R1]
         { []
         }
     {offset
       cbdIx: // global
           I64[Sp] = block_cbdIC_info;
           _sbcdE::I64 = I64[R1 + 7];
           R1 = P64[Sp + 40];
           I64[Sp + 40] = _sbcdE::I64;
           if (R1 & 7 != 0) goto ubdKR; else goto cbdID;
       ubdKR: // global
           call _cbdIC(R1) args: 0, res: 0, upd: 0;
       cbdID: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdIx_info" {
     block_cbdIx_info:
         const _cbdIx;
         const 197;
         const 12884901918;
         const SbcpG_srt+344;
 },
 _cbdIC() //  [R1]
         { []
         }
     {offset
       cbdIC: // global
           _sbcdI::I64 = I64[Sp + 16] + I64[Sp + 40];
           I64[Sp] = block_cbdIN_info;
           R6 = 0;
           R5 = _sbcdI::I64;
           R4 = I64[R1 + 15];
           R3 = I64[R1 + 7];
           R2 = GHC.IO.FD.$fBufferedIOFD12_closure;
           I64[Sp - 8] = I64[Sp + 8];
           P64[Sp + 16] = R1;
           Sp = Sp - 8;
           call GHC.IO.FD.$wreadRawBufferPtr_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdIC_info" {
     block_cbdIC_info:
         const _cbdIC;
         const 1221;
         const 12884901918;
         const SbcpG_srt+344;
 },
 _cbdIN() //  [R1]
         { []
         }
     {offset
       cbdIN: // global
           I64[Sp] = block_cbdIP_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubdKS; else goto cbdIQ;
       ubdKS: // global
           call _cbdIP(R1) args: 0, res: 0, upd: 0;
       cbdIQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdIN_info" {
     block_cbdIN_info:
         const _cbdIN;
         const 1093;
         const 12884901918;
         const SbcpG_srt+344;
 },
 _cbdIP() //  [R1]
         { []
         }
     {offset
       cbdIP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbdKq; else goto cbdKp;
       cbdKq: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbdKp: // global
           _sbcdE::I64 = I64[Sp + 40];
           _sbcdP::I64 = I64[R1 + 7];
           if (_sbcdP::I64 != 0) goto cbdKs; else goto cbdKt;
       cbdKs: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sbcdE::I64 + _sbcdP::I64;
           P64[Sp + 40] = P64[Sp + 16];
           P64[Sp + 16] = Hp - 7;
           I64[Sp + 8] = I64[Sp + 8] - _sbcdP::I64;
           Sp = Sp + 8;
           call _cbdIm() args: 0, res: 0, upd: 0;
       cbdKt: // global
           Hp = Hp - 16;
           I64[Sp + 40] = _sbcdE::I64;
           Sp = Sp + 32;
           call _cbdJ4() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbdIP_info" {
     block_cbdIP_info:
         const _cbdIP;
         const 1093;
         const 12884901918;
         const SbcpG_srt+344;
 },
 _cbdJ4() //  []
         { []
         }
     {offset
       cbdJ4: // global
           Hp = Hp + 32;
           _sbcdl::I64 = I64[Sp + 8];
           if (Hp > HpLim) (likely: False) goto cbdKd; else goto cbdKc;
       cbdKd: // global
           HpAlloc = 32;
           I64[Sp - 8] = block_cbdJ3_info;
           R1 = _sbcdl::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbdKc: // global
           I64[Hp - 24] = sat_sbcdq_info;
           P64[Hp - 8] = P64[Sp];
           I64[Hp] = _sbcdl::I64;
           R1 = Hp - 24;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cbdJ3() //  [R1]
         { []
         }
     {offset
       cbdJ3: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _cbdJ4() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbdJ3_info" {
     block_cbdJ3_info:
         const _cbdJ3;
         const 130;
         const 30;
 },
 _cbdJr() //  []
         { []
         }
     {offset
       cbdJr: // global
           Hp = Hp + 32;
           _sbcds::P64 = P64[Sp + 8];
           if (Hp > HpLim) (likely: False) goto cbdKg; else goto cbdKf;
       cbdKg: // global
           HpAlloc = 32;
           I64[Sp - 8] = block_cbdJq_info;
           R1 = _sbcds::P64;
           Sp = Sp - 8;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbdKf: // global
           I64[Hp - 24] = sat_sbcdu_info;
           P64[Hp - 8] = P64[Sp];
           P64[Hp] = _sbcds::P64;
           R1 = Hp - 24;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cbdJq() //  [R1]
         { []
         }
     {offset
       cbdJq: // global
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _cbdJr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbdJq_info" {
     block_cbdJq_info:
         const _cbdJq;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.298364531 UTC

[section ""cstring" . GHC.IO.Handle.Text.hGetBuf6_bytes" {
     GHC.IO.Handle.Text.hGetBuf6_bytes:
         I8[] [104,71,101,116,66,117,102]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.300683468 UTC

[section ""data" . GHC.IO.Handle.Text.hGetBuf5_closure" {
     GHC.IO.Handle.Text.hGetBuf5_closure:
         const GHC.IO.Handle.Text.hGetBuf5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Text.hGetBuf5_entry() //  [R1]
         { []
         }
     {offset
       cbdOf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbdOg; else goto cbdOh;
       cbdOg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbdOh: // global
           (_cbdOc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbdOc::I64 == 0) goto cbdOe; else goto cbdOd;
       cbdOe: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbdOd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbdOc::I64;
           R2 = GHC.IO.Handle.Text.hGetBuf6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetBuf5_info" {
     GHC.IO.Handle.Text.hGetBuf5_info:
         const GHC.IO.Handle.Text.hGetBuf5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.313687451 UTC

[section ""data" . GHC.IO.Handle.Text.$whGetBuf_closure" {
     GHC.IO.Handle.Text.$whGetBuf_closure:
         const GHC.IO.Handle.Text.$whGetBuf_info;
         const 0;
 },
 sat_sbceY_entry() //  [R1]
         { []
         }
     {offset
       cbdPb: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbdPf; else goto cbdPg;
       cbdPf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbdPg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbdP8_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubdPk; else goto cbdP9;
       ubdPk: // global
           call _cbdP8(R1) args: 0, res: 0, upd: 0;
       cbdP9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbceY_info" {
     sat_sbceY_info:
         const sat_sbceY_entry;
         const 1;
         const 16;
 },
 _cbdP8() //  [R1]
         { []
         }
     {offset
       cbdP8: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbdPj; else goto cbdPi;
       cbdPj: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbdPi: // global
           _sbceT::P64 = P64[R1 + 7];
           _sbceU::P64 = P64[R1 + 15];
           _sbceS::I64 = I64[R1 + 23];
           _sbceV::I64 = I64[R1 + 31];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbceT::P64;
           P64[Hp - 32] = _sbceU::P64;
           I64[Hp - 24] = _sbceS::I64;
           I64[Hp - 16] = _sbceV::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbdP8_info" {
     block_cbdP8_info:
         const _cbdP8;
         const 0;
         const 30;
 },
 sat_sbcfh_entry() //  [R1]
         { []
         }
     {offset
       cbdPH: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbdPO; else goto cbdPP;
       cbdPO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbdPP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbdPE_info;
           _sbcf7::I64 = I64[R1 + 24];
           R1 = P64[R1 + 16];
           I64[Sp - 24] = _sbcf7::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubdPT; else goto cbdPF;
       ubdPT: // global
           call _cbdPE(R1) args: 0, res: 0, upd: 0;
       cbdPF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbcfh_info" {
     sat_sbcfh_info:
         const sat_sbcfh_entry;
         const 4294967297;
         const 19;
 },
 _cbdPE() //  [R1]
         { []
         }
     {offset
       cbdPE: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbdPS; else goto cbdPR;
       cbdPS: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbdPR: // global
           _sbcfb::P64 = P64[R1 + 7];
           _sbcfc::P64 = P64[R1 + 15];
           _sbcfa::I64 = I64[R1 + 23];
           _sbcfd::I64 = I64[R1 + 31];
           _sbcff::I64 = I64[R1 + 47];
           _sbcfg::I64 = I64[R1 + 39] + I64[Sp + 8];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbcfb::P64;
           P64[Hp - 32] = _sbcfc::P64;
           I64[Hp - 24] = _sbcfa::I64;
           I64[Hp - 16] = _sbcfd::I64;
           I64[Hp - 8] = _sbcfg::I64;
           I64[Hp] = _sbcff::I64;
           R1 = Hp - 47;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbdPE_info" {
     block_cbdPE_info:
         const _cbdPE;
         const 65;
         const 30;
 },
 sat_sbcfC_entry() //  [R1, R2]
         { []
         }
     {offset
       cbdPU: // global
           if ((Sp + -96) < SpLim) (likely: False) goto cbdPV; else goto cbdPW;
       cbdPV: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbdPW: // global
           I64[Sp - 24] = block_cbdOF_info;
           _sbcdU::P64 = P64[R1 + 6];
           _sbcdZ::P64 = P64[R1 + 14];
           R1 = R2;
           P64[Sp - 16] = _sbcdU::P64;
           P64[Sp - 8] = _sbcdZ::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubdRq; else goto cbdOG;
       ubdRq: // global
           call _cbdOF(R1) args: 0, res: 0, upd: 0;
       cbdOG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbcfC_info" {
     sat_sbcfC_info:
         const sat_sbcfC_entry;
         const 2;
         const 12884901899;
         const 8589934597;
         const SbcpG_srt+384;
 },
 _cbdOF() //  [R1]
         { []
         }
     {offset
       cbdOF: // global
           I64[Sp - 40] = block_cbdOK_info;
           _sbce2::P64 = R1;
           _sbce8::P64 = P64[R1 + 47];
           _sbcea::P64 = P64[R1 + 63];
           _sbceb::P64 = P64[R1 + 71];
           _sbcee::P64 = P64[R1 + 95];
           R1 = P64[_sbceb::P64 + 8];
           P64[Sp - 32] = _sbce8::P64;
           P64[Sp - 24] = _sbcea::P64;
           P64[Sp - 16] = _sbceb::P64;
           P64[Sp - 8] = _sbcee::P64;
           P64[Sp] = _sbce2::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubdRg; else goto cbdOL;
       ubdRg: // global
           call _cbdOK(R1) args: 0, res: 0, upd: 0;
       cbdOL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdOF_info" {
     block_cbdOF_info:
         const _cbdOF;
         const 2;
         const 12884901918;
         const SbcpG_srt+384;
 },
 _cbdOK() //  [R1]
         { []
         }
     {offset
       cbdOK: // global
           I64[Sp - 16] = block_cbdOR_info;
           _sbcer::I64 = I64[R1 + 39];
           _sbces::I64 = I64[R1 + 47];
           R1 = P64[R1 + 15];
           I64[Sp - 8] = _sbces::I64;
           I64[Sp] = _sbcer::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubdRh; else goto cbdOS;
       ubdRh: // global
           call _cbdOR(R1) args: 0, res: 0, upd: 0;
       cbdOS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdOK_info" {
     block_cbdOK_info:
         const _cbdOK;
         const 7;
         const 12884901918;
         const SbcpG_srt+384;
 },
 _cbdOR() //  [R1]
         { []
         }
     {offset
       cbdOR: // global
           if (R1 & 7 == 1) goto cbdQU; else goto ubdRb;
       cbdQU: // global
           if (I64[Sp + 16] == I64[Sp + 8]) goto ubdRc; else goto cbdQg;
       ubdRc: // global
           Sp = Sp + 24;
           goto ubdRk;
       cbdQg: // global
           _sbceK::P64 = P64[P64[Sp + 32] + 8];
           I64[Sp + 16] = block_cbdOZ_info;
           R1 = _sbceK::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto ubdRi; else goto cbdP0;
       ubdRi: // global
           call _cbdOZ(R1) args: 0, res: 0, upd: 0;
       cbdP0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ubdRb: // global
           Sp = Sp + 24;
           goto ubdRk;
       ubdRk: // global
           call _sbcet() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbdOR_info" {
     block_cbdOR_info:
         const _cbdOR;
         const 201;
         const 12884901918;
         const SbcpG_srt+384;
 },
 _cbdOZ() //  [R1]
         { []
         }
     {offset
       cbdOZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbdQj; else goto cbdQi;
       cbdQj: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbdQi: // global
           _sbceb::P64 = P64[Sp + 24];
           _sbceM::P64 = P64[R1 + 7];
           _sbceN::P64 = P64[R1 + 15];
           _sbceQ::P64 = P64[_sbceb::P64 + 8];
           I64[Hp - 16] = sat_sbceY_info;
           P64[Hp] = _sbceQ::P64;
           call MO_WriteBarrier();
           P64[_sbceb::P64 + 8] = Hp - 16;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbceb::P64);
           I64[Sp] = block_cbdPo_info;
           R1 = _sbceQ::P64;
           P64[Sp + 16] = _sbceN::P64;
           P64[Sp + 24] = _sbceM::P64;
           if (R1 & 7 != 0) goto ubdRl; else goto cbdPp;
       ubdRl: // global
           call _cbdPo(R1) args: 0, res: 0, upd: 0;
       cbdPp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdOZ_info" {
     block_cbdOZ_info:
         const _cbdOZ;
         const 135;
         const 12884901918;
         const SbcpG_srt+384;
 },
 _cbdPo() //  [R1]
         { []
         }
     {offset
       cbdPo: // global
           _sbcf7::I64 = I64[R1 + 39];
           if (_sbcf7::I64 != 0) goto cbdQm; else goto cbdQR;
       cbdQm: // global
           I64[Sp - 24] = block_cbdPv_info;
           _sbcf2::P64 = P64[R1 + 7];
           _sbcf3::P64 = P64[R1 + 15];
           _sbcf1::I64 = I64[R1 + 23];
           R1 = P64[Sp + 32];
           P64[Sp - 16] = _sbcf3::P64;
           I64[Sp - 8] = _sbcf7::I64;
           P64[Sp] = _sbcf2::P64;
           I64[Sp + 32] = _sbcf1::I64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubdRm; else goto cbdPw;
       ubdRm: // global
           call _cbdPv(R1) args: 0, res: 0, upd: 0;
       cbdPw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbdQR: // global
           _sbce8::P64 = P64[Sp + 8];
           _sbceN::P64 = P64[Sp + 16];
           call MO_WriteBarrier();
           P64[_sbce8::P64 + 8] = _sbceN::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbce8::P64);
           Sp = Sp + 8;
           call _sbcet() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbdPo_info" {
     block_cbdPo_info:
         const _cbdPo;
         const 7;
         const 12884901918;
         const SbcpG_srt+384;
 },
 _cbdPv() //  [R1]
         { []
         }
     {offset
       cbdPv: // global
           if (R1 & 7 == 1) goto cbdQo; else goto cbdQG;
       cbdQo: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbdQr; else goto cbdQq;
       cbdQr: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbdQq: // global
           I64[Hp - 24] = sat_sbcfh_info;
           P64[Hp - 8] = P64[Sp + 40];
           I64[Hp] = I64[Sp + 16];
           _sbce8::P64 = P64[Sp + 32];
           call MO_WriteBarrier();
           P64[_sbce8::P64 + 8] = Hp - 24;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbce8::P64);
           Sp = Sp + 32;
           call _sbcet() args: 0, res: 0, upd: 0;
       cbdQG: // global
           I64[Sp] = block_cbdQu_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubdRo; else goto cbdQv;
       ubdRo: // global
           call _cbdQu(R1) args: 0, res: 0, upd: 0;
       cbdQv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdPv_info" {
     block_cbdPv_info:
         const _cbdPv;
         const 4234;
         const 12884901918;
         const SbcpG_srt+384;
 },
 _cbdQu() //  [R1]
         { []
         }
     {offset
       cbdQu: // global
           I64[Sp - 8] = block_cbdQz_info;
           R2 = P64[Sp + 48];
           _sbcfl::P64 = P64[R1 + 7];
           _sbcfm::P64 = P64[R1 + 15];
           R1 = P64[R1 + 39];
           P64[Sp] = _sbcfm::P64;
           P64[Sp + 48] = _sbcfl::P64;
           Sp = Sp - 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdQu_info" {
     block_cbdQu_info:
         const _cbdQu;
         const 4234;
         const 12884901918;
         const SbcpG_srt+384;
 },
 _cbdQz() //  [R1]
         { []
         }
     {offset
       cbdQz: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbdQK; else goto cbdQJ;
       cbdQK: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbdQJ: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = P64[Sp + 16];
           I64[Hp - 24] = I64[Sp + 64];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           I64[Sp + 32] = block_cbdQC_info;
           R5 = Hp - 47;
           R4 = P64[Sp + 48];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 56];
           Sp = Sp + 32;
           call GHC.IO.Handle.Internals.$wstreamEncode_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdQz_info" {
     block_cbdQz_info:
         const _cbdQz;
         const 8459;
         const 12884901918;
         const SbcpG_srt+384;
 },
 _cbdQC() //  [R1]
         { []
         }
     {offset
       cbdQC: // global
           I64[Sp] = block_cbdQE_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubdRr; else goto cbdQM;
       ubdRr: // global
           call _cbdQE(R1) args: 0, res: 0, upd: 0;
       cbdQM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdQC_info" {
     block_cbdQC_info:
         const _cbdQC;
         const 903;
         const 12884901918;
         const SbcpG_srt+384;
 },
 _cbdQE() //  [R1]
         { []
         }
     {offset
       cbdQE: // global
           _sbce8::P64 = P64[Sp + 8];
           _sbcfy::P64 = P64[R1 + 7];
           call MO_WriteBarrier();
           P64[_sbce8::P64 + 8] = _sbcfy::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbce8::P64);
           Sp = Sp + 8;
           call _sbcet() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbdQE_info" {
     block_cbdQE_info:
         const _cbdQE;
         const 903;
         const 12884901918;
         const SbcpG_srt+384;
 },
 _sbcet() //  []
         { []
         }
     {offset
       sbcet: // global
           _sbcex::P64 = P64[P64[Sp] + 8];
           I64[Sp + 24] = block_cbdQ2_info;
           R1 = _sbcex::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto ubdRt; else goto cbdQ4;
       ubdRt: // global
           call _cbdQ2(R1) args: 0, res: 0, upd: 0;
       cbdQ4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbdQ2() //  [R1]
         { []
         }
     {offset
       cbdQ2: // global
           _sbcdU::P64 = P64[Sp + 16];
           _sbcdZ::P64 = P64[Sp + 24];
           _sbce2::P64 = P64[Sp + 8];
           if (I64[R1 + 39] == I64[R1 + 47]) goto cbdQd; else goto cbdQc;
       cbdQd: // global
           R6 = _sbcdZ::P64;
           R5 = GHC.IO.Handle.Text.hGetBuf3_closure+1;
           R4 = _sbcdU::P64;
           R3 = R1;
           R2 = _sbce2::P64;
           Sp = Sp + 32;
           call GHC.IO.Handle.Text.hGetBuf2_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
       cbdQc: // global
           R6 = _sbcdZ::P64;
           R5 = GHC.IO.Handle.Text.hGetBuf3_closure+1;
           R4 = _sbcdU::P64;
           R3 = R1;
           R2 = _sbce2::P64;
           Sp = Sp + 32;
           call GHC.IO.Handle.Text.hGetBuf4_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdQ2_info" {
     block_cbdQ2_info:
         const _cbdQ2;
         const 3;
         const 12884901918;
         const SbcpG_srt+384;
 },
 section ""relreadonly" . ubdRF_srtd" {
     ubdRF_srtd:
         const SbcpG_srt+8;
         const 51;
         const 2111062325331969;
 },
 GHC.IO.Handle.Text.$whGetBuf_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbdRx: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbdRB; else goto cbdRA;
       cbdRB: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.$whGetBuf_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbdRA: // global
           if (R4 == 0) goto cbdRw; else goto cbdRv;
       cbdRw: // global
           Hp = Hp - 40;
           R1 = GHC.IO.Handle.Text.hGetBuf3_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbdRv: // global
           if (%MO_S_Ge_W64(R4, 0)) goto cbdRD; else goto cbdRE;
       cbdRD: // global
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = R4;
           I64[Hp - 16] = sat_sbcfC_info;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 31;
           R4 = Hp - 14;
           R3 = R2;
           R2 = GHC.IO.Handle.Text.hGetBuf5_closure;
           call GHC.IO.Handle.Internals.wantReadableHandle_1_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
       cbdRE: // global
           Hp = Hp - 40;
           R4 = R4;
           R3 = GHC.IO.Handle.Text.hGetBuf5_closure;
           R2 = R2;
           call GHC.IO.Handle.Text.$willegalBufferSize_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.$whGetBuf_info" {
     GHC.IO.Handle.Text.$whGetBuf_info:
         const GHC.IO.Handle.Text.$whGetBuf_entry;
         const 0;
         const 18446744069414584334;
         const 17179869206;
         const ubdRF_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.347732074 UTC

[section ""data" . GHC.IO.Handle.Text.hGetBuf1_closure" {
     GHC.IO.Handle.Text.hGetBuf1_closure:
         const GHC.IO.Handle.Text.hGetBuf1_info;
         const 0;
 },
 GHC.IO.Handle.Text.hGetBuf1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbdTF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbdTG; else goto cbdTH;
       cbdTG: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hGetBuf1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbdTH: // global
           I64[Sp - 24] = block_cbdTC_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubdTL; else goto cbdTD;
       ubdTL: // global
           call _cbdTC(R1) args: 0, res: 0, upd: 0;
       cbdTD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetBuf1_info" {
     GHC.IO.Handle.Text.hGetBuf1_info:
         const GHC.IO.Handle.Text.hGetBuf1_entry;
         const 0;
         const 21474836494;
         const 17179869207;
         const SbcpG_srt+400;
 },
 _cbdTC() //  [R1]
         { []
         }
     {offset
       cbdTC: // global
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.IO.Handle.Text.$whGetBuf_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdTC_info" {
     block_cbdTC_info:
         const _cbdTC;
         const 2;
         const 4294967326;
         const SbcpG_srt+400;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.353793051 UTC

[section ""data" . GHC.IO.Handle.Text.hGetBuf_closure" {
     GHC.IO.Handle.Text.hGetBuf_closure:
         const GHC.IO.Handle.Text.hGetBuf_info;
         const 0;
 },
 GHC.IO.Handle.Text.hGetBuf_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbdU0: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.Text.hGetBuf1_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hGetBuf_info" {
     GHC.IO.Handle.Text.hGetBuf_info:
         const GHC.IO.Handle.Text.hGetBuf_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const SbcpG_srt+416;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.356851857 UTC

[section ""cstring" . lvl14_rb6WU_bytes" {
     lvl14_rb6WU_bytes:
         I8[] [101,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.359363036 UTC

[section ""data" . lvl15_rb6WV_closure" {
     lvl15_rb6WV_closure:
         const lvl15_rb6WV_info;
         const 0;
         const 0;
         const 0;
 },
 lvl15_rb6WV_entry() //  [R1]
         { []
         }
     {offset
       cbdUe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbdUf; else goto cbdUg;
       cbdUf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbdUg: // global
           (_cbdUb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbdUb::I64 == 0) goto cbdUd; else goto cbdUc;
       cbdUd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbdUc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbdUb::I64;
           R2 = lvl14_rb6WU_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl15_rb6WV_info" {
     lvl15_rb6WV_info:
         const lvl15_rb6WV_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.36340366 UTC

[section ""data" . lvl16_rb6WW_closure" {
     lvl16_rb6WW_closure:
         const lvl16_rb6WW_info;
         const 0;
         const 0;
         const 0;
 },
 lvl16_rb6WW_entry() //  [R1]
         { []
         }
     {offset
       cbdUv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbdUw; else goto cbdUx;
       cbdUw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbdUx: // global
           (_cbdUs::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbdUs::I64 == 0) goto cbdUu; else goto cbdUt;
       cbdUu: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbdUt: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbdUs::I64;
           R2 = GHC.IO.Handle.Text.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl16_rb6WW_info" {
     lvl16_rb6WW_info:
         const lvl16_rb6WW_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.367376505 UTC

[section ""data" . lvl17_rb6WX_closure" {
     lvl17_rb6WX_closure:
         const lvl17_rb6WX_info;
         const 0;
         const 0;
         const 0;
 },
 lvl17_rb6WX_entry() //  [R1]
         { []
         }
     {offset
       cbdUM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbdUN; else goto cbdUO;
       cbdUN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbdUO: // global
           (_cbdUJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbdUJ::I64 == 0) goto cbdUL; else goto cbdUK;
       cbdUL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbdUK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbdUJ::I64;
           R2 = GHC.IO.Handle.Text.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl17_rb6WX_info" {
     lvl17_rb6WX_info:
         const lvl17_rb6WX_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.371162511 UTC

[section ""cstring" . lvl18_rb6WY_bytes" {
     lvl18_rb6WY_bytes:
         I8[] [46,47,71,72,67,47,73,79,47,72,97,110,100,108,101,47,84,101,120,116,46,104,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.373374614 UTC

[section ""data" . lvl19_rb6WZ_closure" {
     lvl19_rb6WZ_closure:
         const lvl19_rb6WZ_info;
         const 0;
         const 0;
         const 0;
 },
 lvl19_rb6WZ_entry() //  [R1]
         { []
         }
     {offset
       cbdV4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbdV5; else goto cbdV6;
       cbdV5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbdV6: // global
           (_cbdV1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbdV1::I64 == 0) goto cbdV3; else goto cbdV2;
       cbdV3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbdV2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbdV1::I64;
           R2 = lvl18_rb6WY_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl19_rb6WZ_info" {
     lvl19_rb6WZ_info:
         const lvl19_rb6WZ_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.376776435 UTC

[section ""data" . lvl20_rb6X0_closure" {
     lvl20_rb6X0_closure:
         const GHC.Types.I#_con_info;
         const 785;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.37837735 UTC

[section ""data" . lvl21_rb6X1_closure" {
     lvl21_rb6X1_closure:
         const GHC.Types.I#_con_info;
         const 17;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.380420494 UTC

[section ""data" . lvl22_rb6X2_closure" {
     lvl22_rb6X2_closure:
         const GHC.Types.I#_con_info;
         const 38;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.382645389 UTC

[section ""data" . lvl23_rb6X3_closure" {
     lvl23_rb6X3_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl16_rb6WW_closure;
         const lvl17_rb6WX_closure;
         const lvl19_rb6WZ_closure;
         const lvl20_rb6X0_closure+1;
         const lvl21_rb6X1_closure+1;
         const lvl20_rb6X0_closure+1;
         const lvl22_rb6X2_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.384459751 UTC

[section ""data" . lvl24_rb6X4_closure" {
     lvl24_rb6X4_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl15_rb6WV_closure;
         const lvl23_rb6X3_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.386177787 UTC

[section ""cstring" . lvl25_rb6X5_bytes" {
     lvl25_rb6X5_bytes:
         I8[] [84,111,100,111,58,32,104,80,117,116,66,117,102]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.388695168 UTC

[section ""data" . lvl26_rb6X6_closure" {
     lvl26_rb6X6_closure:
         const lvl26_rb6X6_info;
         const 0;
         const 0;
         const 0;
 },
 lvl26_rb6X6_entry() //  [R1]
         { []
         }
     {offset
       cbdVt: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbdVu; else goto cbdVv;
       cbdVu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbdVv: // global
           (_cbdVo::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbdVo::I64 == 0) goto cbdVq; else goto cbdVp;
       cbdVq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbdVp: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbdVo::I64;
           I64[Sp - 24] = block_cbdVr_info;
           R2 = lvl25_rb6X5_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl26_rb6X6_info" {
     lvl26_rb6X6_info:
         const lvl26_rb6X6_entry;
         const 0;
         const 12884901909;
         const SbcpG_srt+424;
 },
 _cbdVr() //  [R1]
         { []
         }
     {offset
       cbdVr: // global
           R3 = R1;
           R2 = lvl24_rb6X4_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbdVr_info" {
     block_cbdVr_info:
         const _cbdVr;
         const 0;
         const 12884901918;
         const SbcpG_srt+424;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.394129897 UTC

[section ""data" . lvl27_rb6X7_closure" {
     lvl27_rb6X7_closure:
         const GHC.Types.I#_con_info;
         const 790;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.395825623 UTC

[section ""data" . lvl28_rb6X8_closure" {
     lvl28_rb6X8_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl16_rb6WW_closure;
         const lvl17_rb6WX_closure;
         const lvl19_rb6WZ_closure;
         const lvl27_rb6X7_closure+1;
         const lvl21_rb6X1_closure+1;
         const lvl27_rb6X7_closure+1;
         const lvl22_rb6X2_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.397629314 UTC

[section ""data" . lvl29_rb6X9_closure" {
     lvl29_rb6X9_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl15_rb6WV_closure;
         const lvl28_rb6X8_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.400156074 UTC

[section ""data" . lvl30_rb6Xa_closure" {
     lvl30_rb6Xa_closure:
         const lvl30_rb6Xa_info;
         const 0;
         const 0;
         const 0;
 },
 lvl30_rb6Xa_entry() //  [R1]
         { []
         }
     {offset
       cbdVW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbdVX; else goto cbdVY;
       cbdVX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbdVY: // global
           (_cbdVR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbdVR::I64 == 0) goto cbdVT; else goto cbdVS;
       cbdVT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbdVS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbdVR::I64;
           I64[Sp - 24] = block_cbdVU_info;
           R2 = lvl25_rb6X5_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl30_rb6Xa_info" {
     lvl30_rb6Xa_info:
         const lvl30_rb6Xa_entry;
         const 0;
         const 21474836501;
         const SbcpG_srt+424;
 },
 _cbdVU() //  [R1]
         { []
         }
     {offset
       cbdVU: // global
           R3 = R1;
           R2 = lvl29_rb6X9_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbdVU_info" {
     block_cbdVU_info:
         const _cbdVU;
         const 0;
         const 21474836510;
         const SbcpG_srt+424;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.412825456 UTC

[section ""data" . GHC.IO.Handle.Text.$wbufWrite_closure" {
     GHC.IO.Handle.Text.$wbufWrite_closure:
         const GHC.IO.Handle.Text.$wbufWrite_info;
         const 0;
 },
 GHC.IO.Handle.Text.$wbufWrite_slow() //  [R1]
         { []
         }
     {offset
       cbdWf: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.IO.Handle.Text.$wbufWrite_entry(R5,
                                                    R4,
                                                    R3,
                                                    R2,
                                                    R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ubdZg_srtd" {
     ubdZg_srtd:
         const SbcpG_srt+56;
         const 54;
         const 17451452851027969;
 },
 GHC.IO.Handle.Text.$wbufWrite_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cbdWm: // global
           if ((Sp + -112) < SpLim) (likely: False) goto cbdWu; else goto ubdZ2;
       cbdWu: // global
           R1 = GHC.IO.Handle.Text.$wbufWrite_closure;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       ubdZ2: // global
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call _cbdWg() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.$wbufWrite_info" {
     GHC.IO.Handle.Text.$wbufWrite_info:
         const GHC.IO.Handle.Text.$wbufWrite_entry;
         const 0;
         const 18446744069414584334;
         const 21474836480;
         const ubdZg_srtd;
         const 260;
         const GHC.IO.Handle.Text.$wbufWrite_slow;
 },
 _cbdWg() //  []
         { []
         }
     {offset
       cbdWg: // global
           _sbcfL::P64 = P64[Sp];
           I64[Sp] = block_cbdWj_info;
           R1 = _sbcfL::P64;
           if (R1 & 7 != 0) goto ubdZ6; else goto cbdWk;
       ubdZ6: // global
           call _cbdWj(R1) args: 0, res: 0, upd: 0;
       cbdWk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . ubdZh_srtd" {
     ubdZh_srtd:
         const SbcpG_srt+56;
         const 54;
         const 15199653037342721;
 },
 _cbdWj() //  [R1]
         { []
         }
     {offset
       cbdWj: // global
           I64[Sp - 32] = block_cbdWp_info;
           _sbcfQ::P64 = R1;
           _sbcfS::P64 = P64[R1 + 15];
           _sbcfT::P64 = P64[R1 + 23];
           _sbcfW::P64 = P64[R1 + 47];
           R1 = P64[R1 + 31];
           P64[Sp - 24] = _sbcfS::P64;
           P64[Sp - 16] = _sbcfT::P64;
           P64[Sp - 8] = _sbcfW::P64;
           P64[Sp] = _sbcfQ::P64;
           Sp = Sp - 32;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdWj_info" {
     block_cbdWj_info:
         const _cbdWj;
         const 131;
         const 18446744069414584350;
         const ubdZh_srtd;
 },
 section ""relreadonly" . ubdZi_srtd" {
     ubdZi_srtd:
         const SbcpG_srt+56;
         const 54;
         const 15199653037342721;
 },
 _cbdWp() //  [R1]
         { []
         }
     {offset
       cbdWp: // global
           _sbcgc::P64 = P64[P64[Sp + 24] + 8];
           I64[Sp - 24] = block_cbdWt_info;
           _sbcg7::P64 = R1;
           _sbcg8::I64 = I64[R1 + 7];
           _sbcg9::I64 = I64[R1 + 15];
           R1 = _sbcgc::P64;
           I64[Sp - 16] = _sbcg8::I64;
           I64[Sp - 8] = _sbcg9::I64;
           P64[Sp] = _sbcg7::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubdZ8; else goto cbdWy;
       ubdZ8: // global
           call _cbdWt(R1) args: 0, res: 0, upd: 0;
       cbdWy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdWp_info" {
     block_cbdWp_info:
         const _cbdWp;
         const 2055;
         const 18446744069414584350;
         const ubdZi_srtd;
 },
 section ""relreadonly" . ubdZj_srtd" {
     ubdZj_srtd:
         const SbcpG_srt+56;
         const 54;
         const 15199653037342721;
 },
 _cbdWt() //  [R1]
         { []
         }
     {offset
       cbdWt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbdWE; else goto cbdWD;
       cbdWE: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbdWD: // global
           _sbcgf::P64 = P64[R1 + 7];
           _sbcgg::P64 = P64[R1 + 15];
           _sbcge::I64 = I64[R1 + 23];
           _sbcgh::I64 = I64[R1 + 31];
           _sbcgi::I64 = I64[R1 + 39];
           _sbcgj::I64 = I64[R1 + 47];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           _sbcfN::I64 = I64[Sp + 72];
           I64[Hp] = _sbcfN::I64;
           _sbcfS::P64 = P64[Sp + 32];
           _sbcg7::P64 = P64[Sp + 24];
           _sbcgd::P64 = R1;
           _cbdWF::P64 = Hp - 7;
           if (%MO_S_Ge_W64(_sbcfN::I64,
                            _sbcgh::I64)) goto sbcgl; else goto cbdYL;
       cbdYL: // global
           if (%MO_S_Gt_W64(_sbcfN::I64,
                            _sbcgh::I64 - _sbcgj::I64)) goto sbcgl; else goto cbdYb;
       sbcgl: // global
           if (%MO_S_Le_W64(_sbcgj::I64, 0)) goto ubdZ3; else goto cbdXS;
       ubdZ3: // global
           I64[Sp + 32] = _sbcgh::I64;
           P64[Sp + 48] = _cbdWF::P64;
           Sp = Sp + 8;
           call _sbcgm() args: 0, res: 0, upd: 0;
       cbdXS: // global
           I64[Sp] = block_cbdXR_info;
           R2 = _sbcfS::P64;
           I64[Sp - 24] = stg_ap_ppv_info;
           P64[Sp - 16] = _sbcg7::P64;
           P64[Sp - 8] = _sbcgd::P64;
           I64[Sp + 24] = _sbcgh::I64;
           P64[Sp + 32] = _cbdWF::P64;
           Sp = Sp - 24;
           call GHC.IO.BufferedIO.flushWriteBuffer_entry(R2) args: 32, res: 8, upd: 8;
       cbdYb: // global
           I64[Sp - 8] = block_cbdYa_info;
           R1 = P64[Sp + 64];
           I64[Sp] = _sbcgj::I64;
           I64[Sp + 8] = _sbcgi::I64;
           I64[Sp + 16] = _sbcgh::I64;
           P64[Sp + 40] = _sbcgg::P64;
           P64[Sp + 56] = _sbcgf::P64;
           I64[Sp + 64] = _sbcge::I64;
           P64[Sp + 80] = _cbdWF::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubdZ9; else goto cbdYc;
       ubdZ9: // global
           call _cbdYa(R1) args: 0, res: 0, upd: 0;
       cbdYc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdWt_info" {
     block_cbdWt_info:
         const _cbdWt;
         const 16586;
         const 18446744069414584350;
         const ubdZj_srtd;
 },
 section ""relreadonly" . ubdZk_srtd" {
     ubdZk_srtd:
         const SbcpG_srt+56;
         const 54;
         const 15199653037342721;
 },
 _cbdXR() //  [R1]
         { []
         }
     {offset
       cbdXR: // global
           _cbdWF::P64 = P64[Sp + 32];
           _sbcfW::P64 = P64[Sp + 48];
           _sbcgh::I64 = I64[Sp + 24];
           call MO_WriteBarrier();
           P64[_sbcfW::P64 + 8] = R1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbcfW::P64);
           P64[Sp + 48] = _cbdWF::P64;
           I64[Sp + 32] = _sbcgh::I64;
           Sp = Sp + 8;
           call _sbcgm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbdXR_info" {
     block_cbdXR_info:
         const _cbdXR;
         const 16842;
         const 18446744069414584350;
         const ubdZk_srtd;
 },
 _sbcgm() //  []
         { []
         }
     {offset
       sbcgm: // global
           _sbcfN::I64 = I64[Sp + 64];
           _sbcfO::P64 = P64[Sp + 72];
           if (%MO_S_Ge_W64(_sbcfN::I64,
                            I64[Sp + 24])) goto cbdWX; else goto cbdXK;
       cbdWX: // global
           I64[Sp - 8] = block_cbdWV_info;
           R1 = _sbcfO::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubdZe; else goto cbdWY;
       ubdZe: // global
           call _cbdWV(R1) args: 0, res: 0, upd: 0;
       cbdWY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbdXK: // global
           P64[Sp + 48] = P64[Sp + 48];
           P64[Sp + 56] = P64[Sp + 56];
           I64[Sp + 64] = _sbcfN::I64;
           P64[Sp + 72] = _sbcfO::P64;
           Sp = Sp + 48;
           call _cbdWg() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . ubdZl_srtd" {
     ubdZl_srtd:
         const SbcpG_srt+56;
         const 54;
         const 15199653037342721;
 },
 _cbdWV() //  [R1]
         { []
         }
     {offset
       cbdWV: // global
           _sbcfT::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto cbdX5; else goto cbdXq;
       cbdX5: // global
           I64[Sp] = block_cbdX2_info;
           R3 = lvl11_rb6WR_closure;
           R2 = _sbcfT::P64;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
       cbdXq: // global
           I64[Sp] = block_cbdXo_info;
           R3 = lvl11_rb6WR_closure;
           R2 = _sbcfT::P64;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdWV_info" {
     block_cbdWV_info:
         const _cbdWV;
         const 54218;
         const 18446744069414584350;
         const ubdZl_srtd;
 },
 _cbdX2() //  [R1]
         { []
         }
     {offset
       cbdX2: // global
           if (R1 & 7 == 1) goto cbdXb; else goto cbdXg;
       cbdXb: // global
           R1 = lvl30_rb6Xa_closure;
           Sp = Sp + 88;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cbdXg: // global
           I64[Sp] = block_cbdXe_info;
           R1 = P64[Sp + 64];
           if (R1 & 7 != 0) goto ubdZb; else goto cbdXh;
       ubdZb: // global
           call _cbdXe(R1) args: 0, res: 0, upd: 0;
       cbdXh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdX2_info" {
     block_cbdX2_info:
         const _cbdX2;
         const 57290;
         const 73014444062;
         const SbcpG_srt+448;
 },
 _cbdXe() //  [R1]
         { []
         }
     {offset
       cbdXe: // global
           R5 = I64[Sp + 72];
           R4 = I64[R1 + 7];
           R3 = I64[Sp + 16];
           R2 = I64[Sp + 8];
           Sp = Sp + 88;
           call GHC.IO.FD.$w$cwriteNonBlocking_entry(R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdXe_info" {
     block_cbdXe_info:
         const _cbdXe;
         const 65482;
         const 4294967326;
         const SbcpG_srt+448;
 },
 _cbdXo() //  [R1]
         { []
         }
     {offset
       cbdXo: // global
           if (R1 & 7 == 1) goto cbdXw; else goto cbdXG;
       cbdXw: // global
           R1 = lvl26_rb6X6_closure;
           Sp = Sp + 88;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cbdXG: // global
           I64[Sp] = block_cbdXz_info;
           R1 = P64[Sp + 64];
           if (R1 & 7 != 0) goto ubdZc; else goto cbdXA;
       ubdZc: // global
           call _cbdXz(R1) args: 0, res: 0, upd: 0;
       cbdXA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdXo_info" {
     block_cbdXo_info:
         const _cbdXo;
         const 55242;
         const 21474836510;
         const SbcpG_srt+456;
 },
 _cbdXz() //  [R1]
         { []
         }
     {offset
       cbdXz: // global
           I64[Sp + 40] = block_cbdXE_info;
           R5 = I64[Sp + 72];
           R4 = I64[R1 + 7];
           R3 = I64[Sp + 16];
           R2 = I64[Sp + 8];
           Sp = Sp + 40;
           call GHC.IO.FD.$wfdWrite_entry(R5,
                                          R4,
                                          R3,
                                          R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdXz_info" {
     block_cbdXz_info:
         const _cbdXz;
         const 63434;
         const 4294967326;
         const SbcpG_srt+456;
 },
 _cbdXE() //  []
         { []
         }
     {offset
       cbdXE: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdXE_info" {
     block_cbdXE_info:
         const _cbdXE;
         const 1925;
         const 30;
 },
 _cbdYa() //  [R1]
         { []
         }
     {offset
       cbdYa: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbdYi; else goto cbdYh;
       cbdYi: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbdYh: // global
           _cbdWF::P64 = P64[Sp + 88];
           _sbcfN::I64 = I64[Sp + 80];
           _sbcfS::P64 = P64[Sp + 40];
           _sbcfW::P64 = P64[Sp + 56];
           _sbcge::I64 = I64[Sp + 72];
           _sbcgf::P64 = P64[Sp + 64];
           _sbcgg::P64 = P64[Sp + 48];
           _sbcgh::I64 = I64[Sp + 24];
           _sbcgi::I64 = I64[Sp + 16];
           _sbcgj::I64 = I64[Sp + 8];
           (_sbcgQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memcpy(_sbcge::I64 + _sbcgj::I64, I64[R1 + 7], _sbcfN::I64);
           call MO_Touch(_sbcgf::P64);
           if (_sbcfN::I64 == _sbcgh::I64 - _sbcgj::I64) goto cbdYI; else goto cbdYA;
       cbdYI: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbcgf::P64;
           P64[Hp - 32] = _sbcgg::P64;
           I64[Hp - 24] = _sbcge::I64;
           I64[Hp - 16] = _sbcgh::I64;
           I64[Hp - 8] = _sbcgi::I64;
           I64[Hp] = _sbcgj::I64 + _sbcfN::I64;
           I64[Sp + 48] = block_cbdYH_info;
           R2 = _sbcfS::P64;
           I64[Sp + 24] = stg_ap_ppv_info;
           P64[Sp + 40] = Hp - 47;
           Sp = Sp + 24;
           call GHC.IO.BufferedIO.flushWriteBuffer_entry(R2) args: 32, res: 8, upd: 8;
       cbdYA: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbcgf::P64;
           P64[Hp - 32] = _sbcgg::P64;
           I64[Hp - 24] = _sbcge::I64;
           I64[Hp - 16] = _sbcgh::I64;
           I64[Hp - 8] = _sbcgi::I64;
           I64[Hp] = _sbcgj::I64 + _sbcfN::I64;
           call MO_WriteBarrier();
           P64[_sbcfW::P64 + 8] = Hp - 47;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbcfW::P64);
           R1 = _cbdWF::P64;
           Sp = Sp + 96;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdYa_info" {
     block_cbdYa_info:
         const _cbdYa;
         const 49611;
         const 30;
 },
 _cbdYH() //  [R1]
         { []
         }
     {offset
       cbdYH: // global
           _cbdWF::P64 = P64[Sp + 40];
           _sbcfW::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_sbcfW::P64 + 8] = R1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbcfW::P64);
           R1 = _cbdWF::P64;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbdYH_info" {
     block_cbdYH_info:
         const _cbdYH;
         const 901;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.444800905 UTC

[section ""cstring" . GHC.IO.Handle.Text.hPutBuf4_bytes" {
     GHC.IO.Handle.Text.hPutBuf4_bytes:
         I8[] [104,80,117,116,66,117,102]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.447116974 UTC

[section ""data" . GHC.IO.Handle.Text.hPutBuf3_closure" {
     GHC.IO.Handle.Text.hPutBuf3_closure:
         const GHC.IO.Handle.Text.hPutBuf3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Text.hPutBuf3_entry() //  [R1]
         { []
         }
     {offset
       cbe19: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbe1a; else goto cbe1b;
       cbe1a: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbe1b: // global
           (_cbe16::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbe16::I64 == 0) goto cbe18; else goto cbe17;
       cbe18: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbe17: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbe16::I64;
           R2 = GHC.IO.Handle.Text.hPutBuf4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hPutBuf3_info" {
     GHC.IO.Handle.Text.hPutBuf3_info:
         const GHC.IO.Handle.Text.hPutBuf3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.455763829 UTC

[section ""data" . GHC.IO.Handle.Text.$whPutBuf'_closure" {
     GHC.IO.Handle.Text.$whPutBuf'_closure:
         const GHC.IO.Handle.Text.$whPutBuf'_info;
         const 0;
 },
 GHC.IO.Handle.Text.$whPutBuf'_slow() //  [R1]
         { []
         }
     {offset
       cbe1l: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.IO.Handle.Text.$whPutBuf'_entry(R5,
                                                    R4,
                                                    R3,
                                                    R2,
                                                    R1) args: 8, res: 0, upd: 8;
     }
 },
 act_sbcha_entry() //  [R1, R2]
         { []
         }
     {offset
       cbe1C: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cbe1D; else goto cbe1E;
       cbe1D: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbe1E: // global
           I64[Sp - 32] = block_cbe1z_info;
           _sbch4::P64 = P64[R1 + 6];
           _sbch6::P64 = P64[R1 + 14];
           _sbch8::I64 = I64[R1 + 22];
           R1 = R2;
           P64[Sp - 24] = _sbch4::P64;
           P64[Sp - 16] = _sbch6::P64;
           I64[Sp - 8] = _sbch8::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ube2C; else goto cbe1A;
       ube2C: // global
           call _cbe1z(R1) args: 0, res: 0, upd: 0;
       cbe1A: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . act_sbcha_info" {
     act_sbcha_info:
         const act_sbcha_entry;
         const 4294967298;
         const 4294967304;
         const 8589934597;
         const SbcpG_srt+464;
 },
 _cbe1z() //  [R1]
         { []
         }
     {offset
       cbe1z: // global
           I64[Sp - 8] = block_cbe1H_info;
           R5 = P64[Sp + 16];
           R4 = I64[Sp + 24];
           R3 = P64[Sp + 8];
           R2 = R1;
           P64[Sp] = P64[R1 + 55];
           P64[Sp + 8] = P64[R1 + 47];
           P64[Sp + 16] = P64[R1 + 31];
           P64[Sp + 24] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.IO.Handle.Text.$wbufWrite_entry(R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbe1z_info" {
     block_cbe1z_info:
         const _cbe1z;
         const 259;
         const 4294967326;
         const SbcpG_srt+464;
 },
 _cbe1H() //  [R1]
         { []
         }
     {offset
       cbe1H: // global
           I64[Sp] = block_cbe1J_info;
           _sbchw::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbchw::P64;
           if (R1 & 7 != 0) goto ube2D; else goto cbe1M;
       ube2D: // global
           call _cbe1J(R1) args: 0, res: 0, upd: 0;
       cbe1M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbe1H_info" {
     block_cbe1H_info:
         const _cbe1H;
         const 4;
         const 30;
 },
 _cbe1J() //  [R1]
         { []
         }
     {offset
       cbe1J: // global
           if (R1 & 7 == 3) goto ube2z; else goto cbe1T;
       ube2z: // global
           Sp = Sp + 8;
           call _cbe2t() args: 0, res: 0, upd: 0;
       cbe1T: // global
           _sbchA::P64 = P64[P64[Sp + 16] + 8];
           I64[Sp] = block_cbe1Q_info;
           R1 = _sbchA::P64;
           if (R1 & 7 != 0) goto ube2E; else goto cbe1U;
       ube2E: // global
           call _cbe1Q(R1) args: 0, res: 0, upd: 0;
       cbe1U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbe1J_info" {
     block_cbe1J_info:
         const _cbe1J;
         const 4;
         const 30;
 },
 _cbe1Q() //  [R1]
         { []
         }
     {offset
       cbe1Q: // global
           I64[Sp] = block_cbe1Y_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto ube2G; else goto cbe20;
       ube2G: // global
           call _cbe1Y(R1) args: 0, res: 0, upd: 0;
       cbe20: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbe1Q_info" {
     block_cbe1Q_info:
         const _cbe1Q;
         const 4;
         const 30;
 },
 _cbe1Y() //  [R1]
         { []
         }
     {offset
       cbe1Y: // global
           if (R1 & 7 == 1) goto ube2A; else goto cbe2b;
       ube2A: // global
           Sp = Sp + 8;
           call _cbe2t() args: 0, res: 0, upd: 0;
       cbe2b: // global
           _sbchL::P64 = P64[P64[Sp + 16] + 8];
           I64[Sp] = block_cbe29_info;
           R1 = _sbchL::P64;
           if (R1 & 7 != 0) goto ube2H; else goto cbe2c;
       ube2H: // global
           call _cbe29(R1) args: 0, res: 0, upd: 0;
       cbe2c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbe1Y_info" {
     block_cbe1Y_info:
         const _cbe1Y;
         const 4;
         const 30;
 },
 _cbe29() //  [R1]
         { []
         }
     {offset
       cbe29: // global
           if (I64[R1 + 39] == I64[R1 + 47]) goto ube2B; else goto cbe2m;
       ube2B: // global
           Sp = Sp + 8;
           call _cbe2t() args: 0, res: 0, upd: 0;
       cbe2m: // global
           I64[Sp] = block_cbe2k_info;
           R2 = P64[Sp + 32];
           I64[Sp - 24] = stg_ap_ppv_info;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp - 8] = R1;
           Sp = Sp - 24;
           call GHC.IO.BufferedIO.flushWriteBuffer_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbe29_info" {
     block_cbe29_info:
         const _cbe29;
         const 4;
         const 30;
 },
 _cbe2t() //  []
         { []
         }
     {offset
       cbe2t: // global
           R1 = P64[Sp];
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cbe2k() //  [R1]
         { []
         }
     {offset
       cbe2k: // global
           _sbchj::P64 = P64[Sp + 16];
           _sbchw::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_sbchj::P64 + 8] = R1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbchj::P64);
           R1 = _sbchw::P64;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbe2k_info" {
     block_cbe2k_info:
         const _cbe2k;
         const 772;
         const 30;
 },
 section ""relreadonly" . ube39_srtd" {
     ube39_srtd:
         const SbcpG_srt+8;
         const 62;
         const 3602879701896396803;
 },
 GHC.IO.Handle.Text.$whPutBuf'_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cbe2N: // global
           _sbch6::P64 = R5;
           _sbch5::I64 = R4;
           _sbch4::P64 = R3;
           _sbch3::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cbe2O; else goto cbe2P;
       cbe2P: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbe2R; else goto cbe2Q;
       cbe2R: // global
           HpAlloc = 32;
           goto cbe2O;
       cbe2O: // global
           R1 = GHC.IO.Handle.Text.$whPutBuf'_closure;
           P64[Sp - 32] = _sbch3::P64;
           P64[Sp - 24] = _sbch4::P64;
           I64[Sp - 16] = _sbch5::I64;
           P64[Sp - 8] = _sbch6::P64;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       cbe2Q: // global
           if (_sbch5::I64 == 0) goto cbe2M; else goto cbe2L;
       cbe2M: // global
           Hp = Hp - 32;
           R1 = GHC.IO.Handle.Text.hGetBuf3_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbe2L: // global
           if (%MO_S_Ge_W64(_sbch5::I64, 0)) goto cbe2U; else goto cbe36;
       cbe2U: // global
           I64[Hp - 24] = act_sbcha_info;
           P64[Hp - 16] = _sbch4::P64;
           P64[Hp - 8] = _sbch6::P64;
           I64[Hp] = _sbch5::I64;
           I64[Sp - 16] = block_cbe2S_info;
           R1 = _sbch3::P64;
           P64[Sp - 8] = Hp - 22;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ube38; else goto cbe2V;
       ube38: // global
           call _cbe2S(R1) args: 0, res: 0, upd: 0;
       cbe2V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbe36: // global
           Hp = Hp - 32;
           R4 = _sbch5::I64;
           R3 = GHC.IO.Handle.Text.hPutBuf3_closure;
           R2 = _sbch3::P64;
           call GHC.IO.Handle.Text.$willegalBufferSize_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.$whPutBuf'_info" {
     GHC.IO.Handle.Text.$whPutBuf'_info:
         const GHC.IO.Handle.Text.$whPutBuf'_entry;
         const 0;
         const 18446744069414584334;
         const 21474836480;
         const ube39_srtd;
         const 260;
         const GHC.IO.Handle.Text.$whPutBuf'_slow;
 },
 section ""relreadonly" . ube3a_srtd" {
     ube3a_srtd:
         const SbcpG_srt+16;
         const 61;
         const 1152921504606846977;
 },
 _cbe2S() //  [R1]
         { []
         }
     {offset
       cbe2S: // global
           _cbe1u::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cbe31; else goto cbe35;
       cbe31: // global
           R5 = _cbe1u::P64;
           R4 = P64[R1 + 15];
           R3 = R1;
           R2 = GHC.IO.Handle.Text.hPutBuf3_closure;
           Sp = Sp + 16;
           call GHC.IO.Handle.Internals.$wwantWritableHandle'_entry(R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
       cbe35: // global
           R5 = _cbe1u::P64;
           R4 = P64[R1 + 22];
           R3 = R1;
           R2 = GHC.IO.Handle.Text.hPutBuf3_closure;
           Sp = Sp + 16;
           call GHC.IO.Handle.Internals.$wwantWritableHandle'_entry(R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbe2S_info" {
     block_cbe2S_info:
         const _cbe2S;
         const 1;
         const 18446744069414584350;
         const ube3a_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.478847159 UTC

[section ""data" . GHC.IO.Handle.Text.hPutBuf2_closure" {
     GHC.IO.Handle.Text.hPutBuf2_closure:
         const GHC.IO.Handle.Text.hPutBuf2_info;
         const 0;
 },
 GHC.IO.Handle.Text.hPutBuf2_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cbe4u: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbe4v; else goto cbe4w;
       cbe4v: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hPutBuf2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbe4w: // global
           I64[Sp - 32] = block_cbe4r_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ube4A; else goto cbe4s;
       ube4A: // global
           call _cbe4r(R1) args: 0, res: 0, upd: 0;
       cbe4s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hPutBuf2_info" {
     GHC.IO.Handle.Text.hPutBuf2_info:
         const GHC.IO.Handle.Text.hPutBuf2_entry;
         const 0;
         const 21474836494;
         const 21474836504;
         const SbcpG_srt+488;
 },
 _cbe4r() //  [R1]
         { []
         }
     {offset
       cbe4r: // global
           R5 = P64[Sp + 24];
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call GHC.IO.Handle.Text.$whPutBuf'_entry(R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbe4r_info" {
     block_cbe4r_info:
         const _cbe4r;
         const 3;
         const 4294967326;
         const SbcpG_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.4843587 UTC

[section ""data" . GHC.IO.Handle.Text.hPutBufNonBlocking1_closure" {
     GHC.IO.Handle.Text.hPutBufNonBlocking1_closure:
         const GHC.IO.Handle.Text.hPutBufNonBlocking1_info;
         const 0;
 },
 GHC.IO.Handle.Text.hPutBufNonBlocking1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbe4S: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbe4T; else goto cbe4U;
       cbe4T: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hPutBufNonBlocking1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbe4U: // global
           I64[Sp - 24] = block_cbe4P_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ube4Y; else goto cbe4Q;
       ube4Y: // global
           call _cbe4P(R1) args: 0, res: 0, upd: 0;
       cbe4Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hPutBufNonBlocking1_info" {
     GHC.IO.Handle.Text.hPutBufNonBlocking1_info:
         const GHC.IO.Handle.Text.hPutBufNonBlocking1_entry;
         const 0;
         const 38654705678;
         const 17179869207;
         const SbcpG_srt+488;
 },
 _cbe4P() //  [R1]
         { []
         }
     {offset
       cbe4P: // global
           R5 = GHC.Types.False_closure+1;
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.IO.Handle.Text.$whPutBuf'_entry(R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbe4P_info" {
     block_cbe4P_info:
         const _cbe4P;
         const 2;
         const 4294967326;
         const SbcpG_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.48981424 UTC

[section ""data" . GHC.IO.Handle.Text.hPutBufNonBlocking_closure" {
     GHC.IO.Handle.Text.hPutBufNonBlocking_closure:
         const GHC.IO.Handle.Text.hPutBufNonBlocking_info;
         const 0;
 },
 GHC.IO.Handle.Text.hPutBufNonBlocking_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbe5e: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.Text.hPutBufNonBlocking1_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hPutBufNonBlocking_info" {
     GHC.IO.Handle.Text.hPutBufNonBlocking_info:
         const GHC.IO.Handle.Text.hPutBufNonBlocking_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const SbcpG_srt+512;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.493722039 UTC

[section ""data" . GHC.IO.Handle.Text.hPutBuf1_closure" {
     GHC.IO.Handle.Text.hPutBuf1_closure:
         const GHC.IO.Handle.Text.hPutBuf1_info;
         const 0;
 },
 GHC.IO.Handle.Text.hPutBuf1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbe5s: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbe5w; else goto cbe5x;
       cbe5w: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hPutBuf1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbe5x: // global
           I64[Sp - 24] = block_cbe5p_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ube5B; else goto cbe5q;
       ube5B: // global
           call _cbe5p(R1) args: 0, res: 0, upd: 0;
       cbe5q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hPutBuf1_info" {
     GHC.IO.Handle.Text.hPutBuf1_info:
         const GHC.IO.Handle.Text.hPutBuf1_entry;
         const 0;
         const 73014444046;
         const 17179869207;
         const SbcpG_srt+488;
 },
 _cbe5p() //  [R1]
         { []
         }
     {offset
       cbe5p: // global
           _sbcij::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cbe5v_info;
           R5 = GHC.Types.True_closure+2;
           R4 = I64[R1 + 7];
           R3 = _sbcij::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.IO.Handle.Text.$whPutBuf'_entry(R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbe5p_info" {
     block_cbe5p_info:
         const _cbe5p;
         const 2;
         const 4294967326;
         const SbcpG_srt+488;
 },
 _cbe5v() //  []
         { []
         }
     {offset
       cbe5v: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbe5v_info" {
     block_cbe5v_info:
         const _cbe5v;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.501091693 UTC

[section ""data" . GHC.IO.Handle.Text.hPutBuf_closure" {
     GHC.IO.Handle.Text.hPutBuf_closure:
         const GHC.IO.Handle.Text.hPutBuf_info;
         const 0;
 },
 GHC.IO.Handle.Text.hPutBuf_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbe5X: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.Text.hPutBuf1_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hPutBuf_info" {
     GHC.IO.Handle.Text.hPutBuf_info:
         const GHC.IO.Handle.Text.hPutBuf_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const SbcpG_srt+520;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.504163012 UTC

[section ""cstring" . lvl31_rb6Xb_bytes" {
     lvl31_rb6Xb_bytes:
         I8[] [10]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.506737472 UTC

[section ""data" . lvl32_rb6Xc_closure" {
     lvl32_rb6Xc_closure:
         const lvl32_rb6Xc_info;
         const 0;
         const 0;
         const 0;
 },
 lvl32_rb6Xc_entry() //  [R1]
         { []
         }
     {offset
       cbe6b: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbe6c; else goto cbe6d;
       cbe6c: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbe6d: // global
           (_cbe68::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbe68::I64 == 0) goto cbe6a; else goto cbe69;
       cbe6a: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbe69: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbe68::I64;
           R2 = lvl31_rb6Xb_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl32_rb6Xc_info" {
     lvl32_rb6Xc_info:
         const lvl32_rb6Xc_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.521439461 UTC

[section ""data" . GHC.IO.Handle.Text.$wwriteBlocks_closure" {
     GHC.IO.Handle.Text.$wwriteBlocks_closure:
         const GHC.IO.Handle.Text.$wwriteBlocks_info;
         const 0;
 },
 GHC.IO.Handle.Text.$wwriteBlocks_slow() //  [R1]
         { []
         }
     {offset
       cbe6n: // global
           R6 = I64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.Handle.Text.$wwriteBlocks_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2,
                                                       R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_sbckU_entry() //  [R1]
         { []
         }
     {offset
       cbe6C: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbe6D; else goto cbe6E;
       cbe6D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbe6E: // global
           I64[Sp - 8] = block_cbe6v_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ube6L; else goto cbe6w;
       ube6L: // global
           call _cbe6v(R1) args: 0, res: 0, upd: 0;
       cbe6w: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbckU_info" {
     sat_sbckU_info:
         const sat_sbckU_entry;
         const 1;
         const 4294967312;
         const SbcpG_srt+528;
 },
 _cbe6v() //  [R1]
         { []
         }
     {offset
       cbe6v: // global
           if (R1 & 7 == 1) goto cbe6z; else goto cbe6A;
       cbe6z: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbe6A: // global
           R1 = lvl32_rb6Xc_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbe6v_info" {
     block_cbe6v_info:
         const _cbe6v;
         const 0;
         const 4294967326;
         const SbcpG_srt+528;
 },
 sat_sbcjg_entry() //  [R1, R2]
         { []
         }
     {offset
       cbe70: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cbe76; else goto cbe77;
       cbe76: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbe77: // global
           I64[Sp - 48] = block_cbe6X_info;
           _sbciw::P64 = P64[R1 + 6];
           _sbciD::P64 = P64[R1 + 14];
           _sbciv::I64 = I64[R1 + 22];
           _sbcix::I64 = I64[R1 + 30];
           _sbciB::I64 = I64[R1 + 38];
           R1 = R2;
           I64[Sp - 40] = _sbciv::I64;
           P64[Sp - 32] = _sbciw::P64;
           I64[Sp - 24] = _sbcix::I64;
           I64[Sp - 16] = _sbciB::I64;
           P64[Sp - 8] = _sbciD::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto ube7s; else goto cbe6Y;
       ube7s: // global
           call _cbe6X(R1) args: 0, res: 0, upd: 0;
       cbe6Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbcjg_info" {
     sat_sbcjg_info:
         const sat_sbcjg_entry;
         const 12884901890;
         const 8;
         const 8589934597;
 },
 _cbe6X() //  [R1]
         { []
         }
     {offset
       cbe6X: // global
           _sbciv::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_cbe73_info;
           R6 = I64[Sp + 24];
           R5 = GHC.IO.Buffer.WriteBuffer_closure+2;
           R4 = P64[Sp + 16];
           R3 = _sbciv::I64;
           R2 = R1;
           I64[Sp - 8] = 0;
           I64[Sp] = I64[Sp + 32];
           P64[Sp + 16] = P64[R1 + 79];
           P64[Sp + 32] = P64[R1 + 71];
           Sp = Sp - 8;
           call GHC.IO.Handle.Internals.$wwriteCharBuffer_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbe6X_info" {
     block_cbe6X_info:
         const _cbe6X;
         const 837;
         const 30;
 },
 _cbe73() //  []
         { []
         }
     {offset
       cbe73: // global
           _sbcj2::P64 = P64[P64[Sp + 24] + 8];
           I64[Sp] = block_cbe75_info;
           R1 = _sbcj2::P64;
           if (R1 & 7 != 0) goto ube7t; else goto cbe7a;
       ube7t: // global
           call _cbe75(R1) args: 0, res: 0, upd: 0;
       cbe7a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbe73_info" {
     block_cbe73_info:
         const _cbe73;
         const 132;
         const 30;
 },
 _cbe75() //  [R1]
         { []
         }
     {offset
       cbe75: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbe7g; else goto cbe7f;
       cbe7g: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbe7f: // global
           if (I64[Sp + 16] == I64[R1 + 31]) goto cbe7l; else goto cbe7k;
       cbe7l: // global
           _sbciQ::P64 = P64[Sp + 8];
           _sbcjd::P64 = P64[_sbciQ::P64 + 8];
           I64[Hp - 16] = GHC.IO.Handle.Types.BufferListCons_con_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _sbcjd::P64;
           call MO_WriteBarrier();
           P64[_sbciQ::P64 + 8] = Hp - 14;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbciQ::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbe7k: // global
           Hp = Hp - 24;
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbe75_info" {
     block_cbe75_info:
         const _cbe75;
         const 388;
         const 30;
 },
 sat_sbckf_entry() //  [R1, R2]
         { []
         }
     {offset
       cbe8c: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cbe8i; else goto cbe8j;
       cbe8i: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbe8j: // global
           I64[Sp - 40] = block_cbe89_info;
           _sbciw::P64 = P64[R1 + 6];
           _sbciv::I64 = I64[R1 + 14];
           _sbcix::I64 = I64[R1 + 22];
           _sbcjC::I64 = I64[R1 + 30];
           R1 = R2;
           I64[Sp - 32] = _sbciv::I64;
           P64[Sp - 24] = _sbciw::P64;
           I64[Sp - 16] = _sbcix::I64;
           I64[Sp - 8] = _sbcjC::I64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ube8D; else goto cbe8a;
       ube8D: // global
           call _cbe89(R1) args: 0, res: 0, upd: 0;
       cbe8a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbckf_info" {
     sat_sbckf_info:
         const sat_sbckf_entry;
         const 12884901889;
         const 8;
         const 8589934597;
 },
 _cbe89() //  [R1]
         { []
         }
     {offset
       cbe89: // global
           _sbciv::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_cbe8f_info;
           R6 = I64[Sp + 24];
           R5 = GHC.IO.Buffer.WriteBuffer_closure+2;
           R4 = P64[Sp + 16];
           R3 = _sbciv::I64;
           R2 = R1;
           I64[Sp - 8] = 0;
           I64[Sp] = I64[Sp + 32];
           P64[Sp + 16] = P64[R1 + 47];
           P64[Sp + 24] = P64[R1 + 31];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.IO.Handle.Internals.$wwriteCharBuffer_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbe89_info" {
     block_cbe89_info:
         const _cbe89;
         const 836;
         const 30;
 },
 _cbe8f() //  []
         { []
         }
     {offset
       cbe8f: // global
           _sbck2::P64 = P64[P64[Sp + 8] + 8];
           I64[Sp] = block_cbe8h_info;
           R1 = _sbck2::P64;
           if (R1 & 7 != 0) goto ube8E; else goto cbe8m;
       ube8E: // global
           call _cbe8h(R1) args: 0, res: 0, upd: 0;
       cbe8m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbe8f_info" {
     block_cbe8f_info:
         const _cbe8f;
         const 3;
         const 30;
 },
 _cbe8h() //  [R1]
         { []
         }
     {offset
       cbe8h: // global
           if (I64[R1 + 39] == I64[R1 + 47]) goto cbe8z; else goto cbe8w;
       cbe8z: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbe8w: // global
           I64[Sp] = block_cbe8u_info;
           R2 = P64[Sp + 24];
           I64[Sp - 24] = stg_ap_ppv_info;
           P64[Sp - 16] = P64[Sp + 16];
           P64[Sp - 8] = R1;
           Sp = Sp - 24;
           call GHC.IO.BufferedIO.flushWriteBuffer_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbe8h_info" {
     block_cbe8h_info:
         const _cbe8h;
         const 3;
         const 30;
 },
 _cbe8u() //  [R1]
         { []
         }
     {offset
       cbe8u: // global
           _sbcjM::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_sbcjM::P64 + 8] = R1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbcjM::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbe8u_info" {
     block_cbe8u_info:
         const _cbe8u;
         const 387;
         const 30;
 },
 sat_sbckP_entry() //  [R1, R2]
         { []
         }
     {offset
       cbe8O: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbe8S; else goto cbe8T;
       cbe8S: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbe8T: // global
           I64[Sp - 40] = block_cbe8L_info;
           _sbciw::P64 = P64[R1 + 6];
           _sbciv::I64 = I64[R1 + 14];
           _sbcix::I64 = I64[R1 + 22];
           _sbcji::I64 = I64[R1 + 30];
           R1 = R2;
           I64[Sp - 32] = _sbciv::I64;
           P64[Sp - 24] = _sbciw::P64;
           I64[Sp - 16] = _sbcix::I64;
           I64[Sp - 8] = _sbcji::I64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ube8X; else goto cbe8M;
       ube8X: // global
           call _cbe8L(R1) args: 0, res: 0, upd: 0;
       cbe8M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbckP_info" {
     sat_sbckP_info:
         const sat_sbckP_entry;
         const 12884901889;
         const 8;
         const 8589934597;
 },
 _cbe8L() //  [R1]
         { []
         }
     {offset
       cbe8L: // global
           _sbcji::I64 = I64[Sp + 32];
           I64[Sp + 32] = block_cbe8R_info;
           R6 = I64[Sp + 24];
           R5 = GHC.IO.Buffer.WriteBuffer_closure+2;
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = R1;
           I64[Sp + 16] = 0;
           I64[Sp + 24] = _sbcji::I64;
           Sp = Sp + 16;
           call GHC.IO.Handle.Internals.$wwriteCharBuffer_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbe8L_info" {
     block_cbe8L_info:
         const _cbe8L;
         const 836;
         const 30;
 },
 _cbe8R() //  []
         { []
         }
     {offset
       cbe8R: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbe8R_info" {
     block_cbe8R_info:
         const _cbe8R;
         const 0;
         const 30;
 },
 GHC.IO.Handle.Text.$wwriteBlocks_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cbe8Y: // global
           _sbciv::I64 = R6;
           _sbciu::P64 = R5;
           _sbcit::P64 = R4;
           _sbcis::P64 = R3;
           _sbcir::P64 = R2;
           if ((Sp + -56) < SpLim) (likely: False) goto cbe8Z; else goto cbe90;
       cbe90: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbe92; else goto cbe91;
       cbe92: // global
           HpAlloc = 24;
           goto cbe8Z;
       cbe8Z: // global
           R1 = GHC.IO.Handle.Text.$wwriteBlocks_closure;
           P64[Sp - 40] = _sbcir::P64;
           P64[Sp - 32] = _sbcis::P64;
           P64[Sp - 24] = _sbcit::P64;
           P64[Sp - 16] = _sbciu::P64;
           I64[Sp - 8] = _sbciv::I64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       cbe91: // global
           I64[Hp - 16] = sat_sbckU_info;
           P64[Hp] = _sbcit::P64;
           P64[Sp - 48] = _sbcis::P64;
           P64[Sp - 40] = _sbciu::P64;
           I64[Sp - 32] = _sbciv::I64;
           I64[Sp - 24] = 0;
           P64[Sp - 16] = P64[Sp + 16];
           P64[Sp - 8] = Hp - 16;
           P64[Sp + 16] = _sbcir::P64;
           Sp = Sp - 48;
           call _cbe7w() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.$wwriteBlocks_info" {
     GHC.IO.Handle.Text.$wwriteBlocks_info:
         const GHC.IO.Handle.Text.$wwriteBlocks_entry;
         const 0;
         const 64424509454;
         const 38654705664;
         const SbcpG_srt+528;
         const 5128;
         const GHC.IO.Handle.Text.$wwriteBlocks_slow;
 },
 _cbe7w() //  []
         { []
         }
     {offset
       cbe7w: // global
           I64[Sp - 8] = block_cbe7z_info;
           R1 = P64[Sp + 32];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubeam; else goto cbe7A;
       ubeam: // global
           call _cbe7z(R1) args: 0, res: 0, upd: 0;
       cbe7A: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbe7z() //  [R1]
         { []
         }
     {offset
       cbe7z: // global
           if (R1 & 7 == 1) goto cbe9b; else goto cbe9n;
       cbe9b: // global
           I64[Sp] = block_cbe98_info;
           R1 = P64[Sp + 48];
           if (R1 & 7 != 0) goto ubean; else goto cbe9c;
       ubean: // global
           call _cbe98(R1) args: 0, res: 0, upd: 0;
       cbe9c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbe9n: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbe9q; else goto cbe9p;
       cbe9q: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbe9p: // global
           _sbcix::I64 = I64[Sp + 64];
           _sbcji::I64 = I64[Sp + 32];
           if (%MO_S_Lt_W64(_sbcji::I64 + 1,
                            _sbcix::I64)) goto cbe9s; else goto cbe9W;
       cbe9s: // global
           _sbcjq::P64 = P64[R1 + 6];
           _sbcjr::P64 = P64[R1 + 14];
           Hp = Hp - 40;
           I64[Sp] = block_cbe7L_info;
           R1 = _sbcjq::P64;
           P64[Sp + 40] = _sbcjr::P64;
           if (R1 & 7 != 0) goto ubeao; else goto cbe7M;
       ubeao: // global
           call _cbe7L(R1) args: 0, res: 0, upd: 0;
       cbe7M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbe9W: // global
           I64[Hp - 32] = sat_sbckP_info;
           P64[Hp - 24] = P64[Sp + 56];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = _sbcix::I64;
           I64[Hp] = _sbcji::I64;
           I64[Sp] = block_cbe9V_info;
           R4 = Hp - 30;
           R3 = P64[Sp + 72];
           R2 = lvl2_rb6WE_closure;
           P64[Sp + 40] = R1;
           call GHC.IO.Handle.Internals.wantWritableHandle1_entry(R4,
                                                                  R3,
                                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbe7z_info" {
     block_cbe7z_info:
         const _cbe7z;
         const 9993;
         const 21474836510;
         const SbcpG_srt+536;
 },
 _cbe98() //  [R1]
         { []
         }
     {offset
       cbe98: // global
           _sbcji::I64 = I64[Sp + 32];
           if (R1 & 7 == 1) goto cbe9i; else goto cbe9m;
       cbe9i: // global
           I64[Sp + 48] = _sbcji::I64;
           Sp = Sp + 24;
           call _cbe6P() args: 0, res: 0, upd: 0;
       cbe9m: // global
           I64[Sp + 32] = _sbcji::I64;
           P64[Sp + 40] = R1;
           P64[Sp + 48] = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call _cbe7w() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbe98_info" {
     block_cbe98_info:
         const _cbe98;
         const 12041;
         const 21474836510;
         const SbcpG_srt+536;
 },
 _cbe6P() //  []
         { []
         }
     {offset
       cbe6P: // global
           Hp = Hp + 72;
           _sbciB::I64 = I64[Sp + 24];
           if (Hp > HpLim) (likely: False) goto cbe95; else goto cbe94;
       cbe95: // global
           HpAlloc = 72;
           I64[Sp - 8] = block_cbe6O_info;
           R1 = _sbciB::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbe94: // global
           I64[Hp - 64] = GHC.ForeignPtr.ForeignPtr_con_info;
           _sbciw::P64 = P64[Sp + 32];
           P64[Hp - 56] = _sbciw::P64;
           _sbciv::I64 = I64[Sp];
           I64[Hp - 48] = _sbciv::I64;
           I64[Hp - 40] = sat_sbcjg_info;
           P64[Hp - 32] = _sbciw::P64;
           P64[Hp - 24] = Hp - 63;
           I64[Hp - 16] = _sbciv::I64;
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = _sbciB::I64;
           R4 = Hp - 38;
           R3 = P64[Sp + 48];
           R2 = lvl2_rb6WE_closure;
           Sp = Sp + 56;
           call GHC.IO.Handle.Internals.wantWritableHandle1_entry(R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 _cbe6O() //  [R1]
         { []
         }
     {offset
       cbe6O: // global
           I64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _cbe6P() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbe6O_info" {
     block_cbe6O_info:
         const _cbe6O;
         const 3015;
         const 21474836510;
         const SbcpG_srt+536;
 },
 _cbe7L() //  [R1]
         { []
         }
     {offset
       cbe7L: // global
           _sbcjw::I64 = I64[R1 + 7];
           if (_sbcjw::I64 != 10) goto cbe9v; else goto cbe9J;
       cbe9v: // global
           _sbciw::P64 = P64[Sp + 56];
           _sbcji::I64 = I64[Sp + 32];
           _sbcjk::P64 = P64[Sp + 48];
           _sbcjr::P64 = P64[Sp + 40];
           I32[I64[Sp + 24] + (_sbcji::I64 << 2)] = %MO_UU_Conv_W64_W32(_sbcjw::I64);
           call MO_Touch(_sbciw::P64);
           I64[Sp + 32] = _sbcji::I64 + 1;
           P64[Sp + 40] = _sbcjr::P64;
           P64[Sp + 48] = _sbcjk::P64;
           Sp = Sp + 8;
           call _cbe7w() args: 0, res: 0, upd: 0;
       cbe9J: // global
           I64[Sp] = block_cbe9w_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto ubeap; else goto cbe9K;
       ubeap: // global
           call _cbe9w(R1) args: 0, res: 0, upd: 0;
       cbe9K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbe7L_info" {
     block_cbe7L_info:
         const _cbe7L;
         const 8969;
         const 21474836510;
         const SbcpG_srt+536;
 },
 _cbe9w() //  [R1]
         { []
         }
     {offset
       cbe9w: // global
           _sbcis::P64 = P64[Sp + 8];
           _sbciv::I64 = I64[Sp + 24];
           _sbciw::P64 = P64[Sp + 56];
           _sbcji::I64 = I64[Sp + 32];
           if (R1 & 7 == 1) goto cbe9Q; else goto cbe9U;
       cbe9Q: // global
           I32[_sbciv::I64 + (_sbcji::I64 << 2)] = 10 :: W32;
           call MO_Touch(_sbciw::P64);
           _sbcjC::I64 = _sbcji::I64 + 1;
           goto sbcjA;
       cbe9U: // global
           I32[_sbciv::I64 + (_sbcji::I64 << 2)] = 13 :: W32;
           call MO_Touch(_sbciw::P64);
           _sbckp::I64 = _sbcji::I64 + 1;
           I32[_sbciv::I64 + (_sbckp::I64 << 2)] = 10 :: W32;
           call MO_Touch(_sbciw::P64);
           _sbcjC::I64 = _sbckp::I64 + 1;
           goto sbcjA;
       sbcjA: // global
           I64[Sp] = block_cbe7Y_info;
           R1 = _sbcis::P64;
           I64[Sp + 32] = _sbcjC::I64;
           if (R1 & 7 != 0) goto ubeav; else goto cbe7Z;
       ubeav: // global
           call _cbe7Y(R1) args: 0, res: 0, upd: 0;
       cbe7Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbe9w_info" {
     block_cbe9w_info:
         const _cbe9w;
         const 8969;
         const 21474836510;
         const SbcpG_srt+536;
 },
 _cbe7Y() //  [R1]
         { []
         }
     {offset
       cbe7Y: // global
           _sbcjC::I64 = I64[Sp + 32];
           if (R1 & 7 == 1) goto cbe9B; else goto cbe9D;
       cbe9B: // global
           I64[Sp + 32] = _sbcjC::I64;
           P64[Sp + 40] = P64[Sp + 40];
           P64[Sp + 48] = P64[Sp + 48];
           Sp = Sp + 8;
           call _cbe7w() args: 0, res: 0, upd: 0;
       cbe9D: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbe9G; else goto cbe9F;
       cbe9G: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbe9F: // global
           I64[Hp - 32] = sat_sbckf_info;
           P64[Hp - 24] = P64[Sp + 56];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 64];
           I64[Hp] = _sbcjC::I64;
           I64[Sp] = block_cbe9C_info;
           R4 = Hp - 30;
           R3 = P64[Sp + 72];
           R2 = lvl2_rb6WE_closure;
           call GHC.IO.Handle.Internals.wantWritableHandle1_entry(R4,
                                                                  R3,
                                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbe7Y_info" {
     block_cbe7Y_info:
         const _cbe7Y;
         const 8969;
         const 21474836510;
         const SbcpG_srt+536;
 },
 _cbe9C() //  []
         { []
         }
     {offset
       cbe9C: // global
           I64[Sp + 32] = 0;
           P64[Sp + 40] = P64[Sp + 40];
           P64[Sp + 48] = P64[Sp + 48];
           Sp = Sp + 8;
           call _cbe7w() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbe9C_info" {
     block_cbe9C_info:
         const _cbe9C;
         const 8969;
         const 21474836510;
         const SbcpG_srt+536;
 },
 _cbe9V() //  []
         { []
         }
     {offset
       cbe9V: // global
           I64[Sp + 32] = 0;
           P64[Sp + 40] = P64[Sp + 40];
           P64[Sp + 48] = P64[Sp + 48];
           Sp = Sp + 8;
           call _cbe7w() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbe9V_info" {
     block_cbe9V_info:
         const _cbe9V;
         const 8969;
         const 21474836510;
         const SbcpG_srt+536;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.566991464 UTC

[section ""cstring" . lvl33_rb6Xd_bytes" {
     lvl33_rb6Xd_bytes:
         I8[] [110,111,32,98,117,102,102,101,114,33]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.569563343 UTC

[section ""data" . GHC.IO.Handle.Text.hPutStr4_closure" {
     GHC.IO.Handle.Text.hPutStr4_closure:
         const GHC.IO.Handle.Text.hPutStr4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Text.hPutStr4_entry() //  [R1]
         { []
         }
     {offset
       cbedA: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbedB; else goto cbedC;
       cbedB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbedC: // global
           (_cbedv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbedv::I64 == 0) goto cbedx; else goto cbedw;
       cbedx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbedw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbedv::I64;
           I64[Sp - 24] = block_cbedy_info;
           R2 = lvl33_rb6Xd_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hPutStr4_info" {
     GHC.IO.Handle.Text.hPutStr4_info:
         const GHC.IO.Handle.Text.hPutStr4_entry;
         const 0;
         const 4294967317;
         const SbcpG_srt+560;
 },
 _cbedy() //  [R1]
         { []
         }
     {offset
       cbedy: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbedy_info" {
     block_cbedy_info:
         const _cbedy;
         const 0;
         const 4294967326;
         const SbcpG_srt+560;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.574998571 UTC

[section ""data" . GHC.IO.Handle.Text.hPutStr3_closure" {
     GHC.IO.Handle.Text.hPutStr3_closure:
         const (,)_con_info;
         const GHC.IO.Handle.Types.NoBuffering_closure+1;
         const GHC.IO.Handle.Text.hPutStr4_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.582055839 UTC

[section ""data" . GHC.IO.Handle.Text.hPutStr2_closure" {
     GHC.IO.Handle.Text.hPutStr2_closure:
         const GHC.IO.Handle.Text.hPutStr2_info;
         const 0;
 },
 sat_sbclV_entry() //  [R1]
         { []
         }
     {offset
       cbeen: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbeew; else goto cbeex;
       cbeew: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbeex: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbeek_info;
           _sbcll::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sbcll::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubeeD; else goto cbeel;
       ubeeD: // global
           call _cbeek(R1) args: 0, res: 0, upd: 0;
       cbeel: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbclV_info" {
     sat_sbclV_info:
         const sat_sbclV_entry;
         const 2;
         const 18;
 },
 _cbeek() //  [R1]
         { []
         }
     {offset
       cbeek: // global
           I64[Sp - 8] = block_cbeeq_info;
           _sbclN::P64 = P64[R1 + 7];
           _sbclM::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _sbclN::P64;
           I64[Sp + 8] = _sbclM::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubeeC; else goto cbeer;
       ubeeC: // global
           call _cbeeq(R1) args: 0, res: 0, upd: 0;
       cbeer: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cbeek_info" {
     block_cbeek_info:
         const _cbeek;
         const 1;
         const 30;
 },
 _cbeeq() //  [R1]
         { []
         }
     {offset
       cbeeq: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbeeB; else goto cbeeA;
       cbeeB: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbeeA: // global
           _sbclS::I64 = I64[R1 + 31];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = GHC.IO.Buffer.WriteBuffer_closure+2;
           I64[Hp - 24] = I64[Sp + 16];
           I64[Hp - 16] = _sbclS::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbeeq_info" {
     block_cbeeq_info:
         const _cbeeq;
         const 130;
         const 30;
 },
 GHC.IO.Handle.Text.hPutStr2_entry() //  [R2]
         { []
         }
     {offset
       cbeeE: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbeeF; else goto cbeeG;
       cbeeF: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hPutStr2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbeeG: // global
           I64[Sp - 8] = block_cbedX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubefB; else goto cbedY;
       ubefB: // global
           call _cbedX(R1) args: 0, res: 0, upd: 0;
       cbedY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hPutStr2_info" {
     GHC.IO.Handle.Text.hPutStr2_info:
         const GHC.IO.Handle.Text.hPutStr2_entry;
         const 0;
         const 30064771086;
         const 8589934597;
         const SbcpG_srt+568;
 },
 _cbedX() //  [R1]
         { []
         }
     {offset
       cbedX: // global
           I64[Sp - 24] = block_cbee2_info;
           _sbcl7::P64 = P64[R1 + 71];
           _sbcl8::P64 = P64[R1 + 79];
           _sbcld::P64 = P64[R1 + 119];
           R1 = P64[R1 + 55];
           P64[Sp - 16] = _sbcl8::P64;
           P64[Sp - 8] = _sbcld::P64;
           P64[Sp] = _sbcl7::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubefy; else goto cbee3;
       ubefy: // global
           call _cbee2(R1) args: 0, res: 0, upd: 0;
       cbee3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbedX_info" {
     block_cbedX_info:
         const _cbedX;
         const 0;
         const 21474836510;
         const SbcpG_srt+568;
 },
 _cbee2() //  [R1]
         { []
         }
     {offset
       cbee2: // global
           if (R1 & 7 == 1) goto cbefs; else goto cbeeK;
       cbefs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbefv; else goto cbefu;
       cbefv: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbefu: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = GHC.IO.Handle.Text.hPutStr3_closure+1;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbeeK: // global
           _sbcli::P64 = P64[P64[Sp + 8] + 8];
           _sbcll::P64 = P64[P64[Sp + 24] + 8];
           I64[Sp - 8] = block_cbee7_info;
           _sbclf::P64 = R1;
           R1 = _sbcli::P64;
           P64[Sp] = _sbcll::P64;
           P64[Sp + 24] = _sbclf::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubefz; else goto cbee8;
       ubefz: // global
           call _cbee7(R1) args: 0, res: 0, upd: 0;
       cbee8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbee2_info" {
     block_cbee2_info:
         const _cbee2;
         const 3;
         const 21474836510;
         const SbcpG_srt+568;
 },
 _cbee7() //  [R1]
         { []
         }
     {offset
       cbee7: // global
           _sbcll::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cbeeP; else goto cbefl;
       cbeeP: // global
           I64[Sp + 16] = block_cbeeM_info;
           R1 = _sbcll::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto ubefA; else goto cbeeQ;
       ubefA: // global
           call _cbeeM(R1) args: 0, res: 0, upd: 0;
       cbeeQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbefl: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cbefo; else goto cbefn;
       cbefo: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbefn: // global
           _sbcl8::P64 = P64[Sp + 16];
           _sbcld::P64 = P64[Sp + 24];
           _sbclf::P64 = P64[Sp + 32];
           _sbclI::P64 = P64[R1 + 6];
           _sbclJ::P64 = P64[R1 + 14];
           call MO_WriteBarrier();
           P64[_sbcl8::P64 + 8] = _sbclJ::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbcl8::P64);
           I64[Hp - 72] = sat_sbclV_info;
           P64[Hp - 56] = _sbcll::P64;
           P64[Hp - 48] = _sbclI::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _sbclf::P64;
           P64[Hp - 24] = Hp - 72;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = _sbcld::P64;
           R1 = Hp - 15;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbee7_info" {
     block_cbee7_info:
         const _cbee7;
         const 4;
         const 4294967326;
         const SbcpG_srt+568;
 },
 _cbeeM() //  [R1]
         { []
         }
     {offset
       cbeeM: // global
           _sbclr::I64 = I64[R1 + 31];
           _sbclu::I64 = _sbclr::I64 << 2;
           if (%MO_S_Ge_W64(_sbclu::I64, 0)) goto cbefd; else goto cbefi;
       cbefd: // global
           I64[Sp - 16] = block_cbef1_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp - 8] = _sbclu::I64;
           I64[Sp] = _sbclr::I64;
           Sp = Sp - 16;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       cbefi: // global
           R1 = GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbeeM_info" {
     block_cbeeM_info:
         const _cbeeM;
         const 2;
         const 4294967326;
         const SbcpG_srt+568;
 },
 _cbef1() //  [R1]
         { []
         }
     {offset
       cbef1: // global
           I64[Sp] = block_cbef3_info;
           _sbcly::P64 = R1;
           R1 = I64[Sp + 8];
           P64[Sp + 8] = _sbcly::P64;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbef1_info" {
     block_cbef1_info:
         const _cbef1;
         const 196;
         const 30;
 },
 _cbef3() //  [R1]
         { []
         }
     {offset
       cbef3: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cbefh; else goto cbefg;
       cbefh: // global
           HpAlloc = 128;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbefg: // global
           I64[Hp - 120] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 112] = R1;
           P64[Hp - 104] = P64[Sp + 8];
           I64[Hp - 96] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 88] = Hp - 118;
           P64[Hp - 80] = GHC.IO.Buffer.WriteBuffer_closure+2;
           P64[Hp - 72] = R1 + 16;
           I64[Hp - 64] = I64[Sp + 16];
           I64[Hp - 56] = 0;
           I64[Hp - 48] = 0;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = Hp - 95;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 15;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbef3_info" {
     block_cbef3_info:
         const _cbef3;
         const 132;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.601900685 UTC

[section ""cstring" . GHC.IO.Handle.Text.hPutStr6_bytes" {
     GHC.IO.Handle.Text.hPutStr6_bytes:
         I8[] [104,80,117,116,83,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.604231292 UTC

[section ""data" . GHC.IO.Handle.Text.hPutStr5_closure" {
     GHC.IO.Handle.Text.hPutStr5_closure:
         const GHC.IO.Handle.Text.hPutStr5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Text.hPutStr5_entry() //  [R1]
         { []
         }
     {offset
       cbeh8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbeh9; else goto cbeha;
       cbeh9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbeha: // global
           (_cbeh5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbeh5::I64 == 0) goto cbeh7; else goto cbeh6;
       cbeh7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbeh6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbeh5::I64;
           R2 = GHC.IO.Handle.Text.hPutStr6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hPutStr5_info" {
     GHC.IO.Handle.Text.hPutStr5_info:
         const GHC.IO.Handle.Text.hPutStr5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.612911405 UTC

[section ""data" . GHC.IO.Handle.Text.hPutStr1_closure" {
     GHC.IO.Handle.Text.hPutStr1_closure:
         const GHC.IO.Handle.Text.hPutStr1_info;
         const 0;
 },
 section ""relreadonly" . ubeja_srtd" {
     ubeja_srtd:
         const SbcpG_srt+16;
         const 74;
         const 19;
         const 836;
 },
 GHC.IO.Handle.Text.hPutStr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbehw: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cbehx; else goto cbehy;
       cbehx: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hPutStr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbehy: // global
           I64[Sp - 32] = block_cbehp_info;
           R1 = R2;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubeiZ; else goto cbehq;
       ubeiZ: // global
           call _cbehp(R1) args: 0, res: 0, upd: 0;
       cbehq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hPutStr1_info" {
     GHC.IO.Handle.Text.hPutStr1_info:
         const GHC.IO.Handle.Text.hPutStr1_entry;
         const 0;
         const 18446744069414584334;
         const 17179869207;
         const ubeja_srtd;
 },
 section ""relreadonly" . ubejb_srtd" {
     ubejb_srtd:
         const SbcpG_srt+16;
         const 74;
         const 19;
         const 580;
 },
 _cbehp() //  [R1]
         { []
         }
     {offset
       cbehp: // global
           if (R1 & 7 == 1) goto cbeht; else goto cbehu;
       cbeht: // global
           I64[Sp] = block_cbeim_info;
           R5 = GHC.IO.Handle.Text.hPutStr2_closure+2;
           R4 = P64[R1 + 15];
           R3 = R1;
           R2 = GHC.IO.Handle.Text.hPutStr5_closure;
           call GHC.IO.Handle.Internals.$wwantWritableHandle'_entry(R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 8, res: 8, upd: 8;
       cbehu: // global
           I64[Sp] = block_cbeiE_info;
           R5 = GHC.IO.Handle.Text.hPutStr2_closure+2;
           R4 = P64[R1 + 22];
           R3 = R1;
           R2 = GHC.IO.Handle.Text.hPutStr5_closure;
           call GHC.IO.Handle.Internals.$wwantWritableHandle'_entry(R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbehp_info" {
     block_cbehp_info:
         const _cbehp;
         const 3;
         const 18446744069414584350;
         const ubejb_srtd;
 },
 section ""relreadonly" . ubejc_srtd" {
     ubejc_srtd:
         const SbcpG_srt+24;
         const 66;
         const 9;
         const 2;
 },
 _cbeim() //  [R1]
         { []
         }
     {offset
       cbeim: // global
           I64[Sp] = block_cbeio_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubej3; else goto cbeip;
       ubej3: // global
           call _cbeio(R1) args: 0, res: 0, upd: 0;
       cbeip: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbeim_info" {
     block_cbeim_info:
         const _cbeim;
         const 3;
         const 18446744069414584350;
         const ubejc_srtd;
 },
 section ""relreadonly" . ubejd_srtd" {
     ubejd_srtd:
         const SbcpG_srt+24;
         const 66;
         const 9;
         const 2;
 },
 _cbeio() //  [R1]
         { []
         }
     {offset
       cbeio: // global
           I64[Sp - 8] = block_cbeit_info;
           _sbcmA::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sbcmA::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubej4; else goto cbeix;
       ubej4: // global
           call _cbeit(R1) args: 0, res: 0, upd: 0;
       cbeix: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbeio_info" {
     block_cbeio_info:
         const _cbeio;
         const 3;
         const 18446744069414584350;
         const ubejd_srtd;
 },
 section ""relreadonly" . ubeje_srtd" {
     ubeje_srtd:
         const SbcpG_srt+24;
         const 66;
         const 9;
         const 2;
 },
 _cbeit() //  [R1]
         { []
         }
     {offset
       cbeit: // global
           _sbcm7::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           P64[Sp - 8] = _sbcm7::P64;
           Sp = Sp - 8;
           call _sbcm3() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbeit_info" {
     block_cbeit_info:
         const _cbeit;
         const 4;
         const 18446744069414584350;
         const ubeje_srtd;
 },
 section ""relreadonly" . ubejf_srtd" {
     ubejf_srtd:
         const SbcpG_srt+24;
         const 66;
         const 9;
         const 2;
 },
 _cbeiE() //  [R1]
         { []
         }
     {offset
       cbeiE: // global
           I64[Sp] = block_cbeiG_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubej6; else goto cbeiH;
       ubej6: // global
           call _cbeiG(R1) args: 0, res: 0, upd: 0;
       cbeiH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbeiE_info" {
     block_cbeiE_info:
         const _cbeiE;
         const 3;
         const 18446744069414584350;
         const ubejf_srtd;
 },
 section ""relreadonly" . ubejg_srtd" {
     ubejg_srtd:
         const SbcpG_srt+24;
         const 66;
         const 9;
         const 2;
 },
 _cbeiG() //  [R1]
         { []
         }
     {offset
       cbeiG: // global
           I64[Sp - 8] = block_cbeiL_info;
           _sbcmM::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sbcmM::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubej7; else goto cbeiP;
       ubej7: // global
           call _cbeiL(R1) args: 0, res: 0, upd: 0;
       cbeiP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbeiG_info" {
     block_cbeiG_info:
         const _cbeiG;
         const 3;
         const 18446744069414584350;
         const ubejg_srtd;
 },
 section ""relreadonly" . ubejh_srtd" {
     ubejh_srtd:
         const SbcpG_srt+24;
         const 66;
         const 9;
         const 2;
 },
 _cbeiL() //  [R1]
         { []
         }
     {offset
       cbeiL: // global
           P64[Sp - 8] = P64[Sp + 8];
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 8] = P64[R1 + 7];
           Sp = Sp - 8;
           call _sbcm3() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbeiL_info" {
     block_cbeiL_info:
         const _cbeiL;
         const 4;
         const 18446744069414584350;
         const ubejh_srtd;
 },
 _sbcm3() //  []
         { []
         }
     {offset
       sbcm3: // global
           I64[Sp - 8] = block_cbehC_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubej9; else goto cbehE;
       ubej9: // global
           call _cbehC(R1) args: 0, res: 0, upd: 0;
       cbehE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . ubeji_srtd" {
     ubeji_srtd:
         const SbcpG_srt+24;
         const 66;
         const 9;
         const 2;
 },
 _cbehC() //  [R1]
         { []
         }
     {offset
       cbehC: // global
           _sbcm6::P64 = P64[Sp + 16];
           _cbeiU::P64 = R1 & 7;
           if (_cbeiU::P64 < 3) goto ubeiW; else goto cbeie;
       ubeiW: // global
           if (_cbeiU::P64 < 2) goto cbehN; else goto cbei4;
       cbehN: // global
           I64[Sp + 24] = block_cbehI_info;
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 32];
           Sp = Sp + 24;
           call GHC.IO.Handle.Text.hPutStr7_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       cbei4: // global
           I64[Sp] = block_cbei2_info;
           R1 = _sbcm6::P64;
           if (R1 & 7 != 0) goto ubej0; else goto cbei5;
       ubej0: // global
           call _cbei2(R1) args: 0, res: 0, upd: 0;
       cbei5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbeie: // global
           I64[Sp] = block_cbeic_info;
           R1 = _sbcm6::P64;
           if (R1 & 7 != 0) goto ubej1; else goto cbeif;
       ubej1: // global
           call _cbeic(R1) args: 0, res: 0, upd: 0;
       cbeif: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbehC_info" {
     block_cbehC_info:
         const _cbehC;
         const 262;
         const 18446744069414584350;
         const ubeji_srtd;
 },
 _cbehI() //  []
         { []
         }
     {offset
       cbehI: // global
           I64[Sp] = block_cbehK_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto ubej2; else goto cbehP;
       ubej2: // global
           call _cbehK(R1) args: 0, res: 0, upd: 0;
       cbehP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbehI_info" {
     block_cbehI_info:
         const _cbehI;
         const 131;
         const 4294967326;
         const SbcpG_srt+608;
 },
 _cbehK() //  [R1]
         { []
         }
     {offset
       cbehK: // global
           if (R1 & 7 == 1) goto cbehV; else goto cbehZ;
       cbehV: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbehZ: // global
           R3 = 10;
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call GHC.IO.Handle.Text.$whPutChar_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbehK_info" {
     block_cbehK_info:
         const _cbehK;
         const 387;
         const 4294967326;
         const SbcpG_srt+608;
 },
 _cbei2() //  [R1]
         { []
         }
     {offset
       cbei2: // global
           R6 = I64[R1 + 23];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 48];
           R3 = GHC.Types.True_closure+2;
           R2 = P64[Sp + 32];
           P64[Sp + 32] = P64[R1 + 7];
           _sbcm0::P64 = P64[Sp + 40];
           I64[Sp + 40] = I64[R1 + 31];
           P64[Sp + 48] = _sbcm0::P64;
           Sp = Sp + 32;
           call GHC.IO.Handle.Text.$wwriteBlocks_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbei2_info" {
     block_cbei2_info:
         const _cbei2;
         const 390;
         const 4294967326;
         const SbcpG_srt+544;
 },
 _cbeic() //  [R1]
         { []
         }
     {offset
       cbeic: // global
           R6 = I64[R1 + 23];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 48];
           R3 = GHC.Types.False_closure+1;
           R2 = P64[Sp + 32];
           P64[Sp + 32] = P64[R1 + 7];
           _sbcm0::P64 = P64[Sp + 40];
           I64[Sp + 40] = I64[R1 + 31];
           P64[Sp + 48] = _sbcm0::P64;
           Sp = Sp + 32;
           call GHC.IO.Handle.Text.$wwriteBlocks_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbeic_info" {
     block_cbeic_info:
         const _cbeic;
         const 390;
         const 4294967326;
         const SbcpG_srt+544;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.642826674 UTC

[section ""data" . GHC.IO.Handle.Text.hPutStr'_closure" {
     GHC.IO.Handle.Text.hPutStr'_closure:
         const GHC.IO.Handle.Text.hPutStr'_info;
         const 0;
 },
 GHC.IO.Handle.Text.hPutStr'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbekQ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.Text.hPutStr1_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hPutStr'_info" {
     GHC.IO.Handle.Text.hPutStr'_info:
         const GHC.IO.Handle.Text.hPutStr'_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const SbcpG_srt+592;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.646532948 UTC

[section ""data" . GHC.IO.Handle.Text.hPutStr_closure" {
     GHC.IO.Handle.Text.hPutStr_closure:
         const GHC.IO.Handle.Text.hPutStr_info;
         const 0;
 },
 GHC.IO.Handle.Text.hPutStr_entry() //  [R2, R3]
         { []
         }
     {offset
       cbel1: // global
           R4 = GHC.Types.False_closure+1;
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.Text.hPutStr'_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hPutStr_info" {
     GHC.IO.Handle.Text.hPutStr_info:
         const GHC.IO.Handle.Text.hPutStr_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SbcpG_srt+616;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.649999166 UTC

[section ""data" . GHC.IO.Handle.Text.hPutStrLn_closure" {
     GHC.IO.Handle.Text.hPutStrLn_closure:
         const GHC.IO.Handle.Text.hPutStrLn_info;
         const 0;
 },
 GHC.IO.Handle.Text.hPutStrLn_entry() //  [R2, R3]
         { []
         }
     {offset
       cbeld: // global
           R4 = GHC.Types.True_closure+2;
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.Text.hPutStr'_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hPutStrLn_info" {
     GHC.IO.Handle.Text.hPutStrLn_info:
         const GHC.IO.Handle.Text.hPutStrLn_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SbcpG_srt+616;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.653533915 UTC

[section ""cstring" . GHC.IO.Handle.Text.hWaitForInput3_bytes" {
     GHC.IO.Handle.Text.hWaitForInput3_bytes:
         I8[] [104,87,97,105,116,70,111,114,73,110,112,117,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.655790351 UTC

[section ""data" . GHC.IO.Handle.Text.hWaitForInput2_closure" {
     GHC.IO.Handle.Text.hWaitForInput2_closure:
         const GHC.IO.Handle.Text.hWaitForInput2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Text.hWaitForInput2_entry() //  [R1]
         { []
         }
     {offset
       cbels: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbelt; else goto cbelu;
       cbelt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbelu: // global
           (_cbelp::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbelp::I64 == 0) goto cbelr; else goto cbelq;
       cbelr: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbelq: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbelp::I64;
           R2 = GHC.IO.Handle.Text.hWaitForInput3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hWaitForInput2_info" {
     GHC.IO.Handle.Text.hWaitForInput2_info:
         const GHC.IO.Handle.Text.hWaitForInput2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.669113251 UTC

[section ""data" . GHC.IO.Handle.Text.hWaitForInput1_closure" {
     GHC.IO.Handle.Text.hWaitForInput1_closure:
         const GHC.IO.Handle.Text.hWaitForInput1_info;
         const 0;
 },
 lvl34_sbcmX_entry() //  [R1]
         { []
         }
     {offset
       cbelO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbelP; else goto cbelQ;
       cbelP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbelQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbelL_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubelV; else goto cbelM;
       ubelV: // global
           call _cbelL(R1) args: 0, res: 0, upd: 0;
       cbelM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl34_sbcmX_info" {
     lvl34_sbcmX_info:
         const lvl34_sbcmX_entry;
         const 1;
         const 16;
 },
 _cbelL() //  [R1]
         { []
         }
     {offset
       cbelL: // global
           R1 = I64[(%MO_S_Lt_W64(I64[R1 + 7],
                                  0) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbelL_info" {
     block_cbelL_info:
         const _cbelL;
         const 0;
         const 30;
 },
 sat_sbcoY_entry() //  [R1, R2]
         { []
         }
     {offset
       cbem4: // global
           if ((Sp + -96) < SpLim) (likely: False) goto cbem8; else goto cbem9;
       cbem8: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbem9: // global
           I64[Sp - 24] = block_cbem1_info;
           _sbcmV::P64 = P64[R1 + 6];
           _sbcmX::P64 = P64[R1 + 14];
           R1 = R2;
           P64[Sp - 16] = _sbcmV::P64;
           P64[Sp - 8] = _sbcmX::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubeoQ; else goto cbem2;
       ubeoQ: // global
           call _cbem1(R1) args: 0, res: 0, upd: 0;
       cbem2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbcoY_info" {
     sat_sbcoY_info:
         const sat_sbcoY_entry;
         const 2;
         const 12884901899;
         const 8589934597;
         const SbcpG_srt+624;
 },
 _cbem1() //  [R1]
         { []
         }
     {offset
       cbem1: // global
           I64[Sp - 56] = block_cbem7_info;
           _sbcn3::P64 = R1;
           _sbcn4::P64 = P64[R1 + 7];
           _sbcn7::P64 = P64[R1 + 31];
           _sbcn9::P64 = P64[R1 + 47];
           _sbcnb::P64 = P64[R1 + 63];
           _sbcnc::P64 = P64[R1 + 71];
           _sbcnf::P64 = P64[R1 + 95];
           R1 = P64[_sbcnc::P64 + 8];
           P64[Sp - 48] = _sbcn4::P64;
           P64[Sp - 40] = _sbcn7::P64;
           P64[Sp - 32] = _sbcn9::P64;
           P64[Sp - 24] = _sbcnb::P64;
           P64[Sp - 16] = _sbcnc::P64;
           P64[Sp - 8] = _sbcnf::P64;
           P64[Sp] = _sbcn3::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto ubeoP; else goto cbemb;
       ubeoP: // global
           call _cbem7(R1) args: 0, res: 0, upd: 0;
       cbemb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbem1_info" {
     block_cbem1_info:
         const _cbem1;
         const 2;
         const 12884901918;
         const SbcpG_srt+624;
 },
 _cbem7() //  [R1]
         { []
         }
     {offset
       cbem7: // global
           if (I64[R1 + 39] == I64[R1 + 47]) goto cbemn; else goto ubeoL;
       cbemn: // global
           I64[Sp] = block_cbemm_info;
           _sbcnn::P64 = R1;
           R1 = P64[Sp + 72];
           P64[Sp + 72] = _sbcnn::P64;
           if (R1 & 7 != 0) goto ubeoR; else goto cbemo;
       ubeoR: // global
           call _cbemm(R1) args: 0, res: 0, upd: 0;
       cbemo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ubeoL: // global
           Sp = Sp + 80;
           call _cbemJ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbem7_info" {
     block_cbem7_info:
         const _cbem7;
         const 9;
         const 12884901918;
         const SbcpG_srt+624;
 },
 _cbemm() //  [R1]
         { []
         }
     {offset
       cbemm: // global
           if (R1 & 7 == 1) goto cbenj; else goto cbeou;
       cbenj: // global
           _sbcny::P64 = P64[P64[Sp + 24] + 8];
           I64[Sp] = block_cbemu_info;
           R1 = P64[Sp + 48];
           P64[Sp + 48] = _sbcny::P64;
           if (R1 & 7 != 0) goto ubeoT; else goto cbenk;
       ubeoT: // global
           call _cbemu(R1) args: 0, res: 0, upd: 0;
       cbenk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbeou: // global
           I64[Sp + 32] = block_cbeos_info;
           R3 = P64[Sp + 72];
           R2 = P64[Sp + 56];
           Sp = Sp + 32;
           call GHC.IO.Handle.Internals.hLookAhead_2_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbemm_info" {
     block_cbemm_info:
         const _cbemm;
         const 9;
         const 12884901918;
         const SbcpG_srt+624;
 },
 _cbemu() //  [R1]
         { []
         }
     {offset
       cbemu: // global
           if (R1 & 7 == 1) goto cbenE; else goto cbeoe;
       cbenE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbenH; else goto cbenG;
       cbenH: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbenG: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = GHC.IO.Handle.Internals.decodeByteBuf2_closure;
           _sbcny::P64 = P64[Sp + 48];
           P64[Hp] = _sbcny::P64;
           _sbcnb::P64 = P64[Sp + 32];
           _sbcnn::P64 = P64[Sp + 72];
           call MO_WriteBarrier();
           P64[_sbcnb::P64 + 8] = Hp - 15;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbcnb::P64);
           I64[Sp] = block_cbens_info;
           R3 = _sbcnn::P64;
           R2 = _sbcny::P64;
           call GHC.IO.Encoding.Latin1.latin5_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
       cbeoe: // global
           I64[Sp] = block_cbenR_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubeoU; else goto cbenS;
       ubeoU: // global
           call _cbenR(R1) args: 0, res: 0, upd: 0;
       cbenS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbemu_info" {
     block_cbemu_info:
         const _cbemu;
         const 9;
         const 12884901918;
         const SbcpG_srt+624;
 },
 _cbens() //  [R1]
         { []
         }
     {offset
       cbens: // global
           I64[Sp] = block_cbenu_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubeoY; else goto cbenv;
       ubeoY: // global
           call _cbenu(R1) args: 0, res: 0, upd: 0;
       cbenv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbens_info" {
     block_cbens_info:
         const _cbens;
         const 18953;
         const 4294967326;
         const SbcpG_srt+632;
 },
 _cbenu() //  [R1]
         { []
         }
     {offset
       cbenu: // global
           _sbcn9::P64 = P64[Sp + 24];
           _sbcok::P64 = P64[R1 + 15];
           _sbcol::P64 = P64[R1 + 23];
           call MO_WriteBarrier();
           P64[_sbcn9::P64 + 8] = _sbcok::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbcn9::P64);
           I64[Sp] = block_cbenC_info;
           R1 = _sbcol::P64;
           if (R1 & 7 != 0) goto ubeoZ; else goto cbenK;
       ubeoZ: // global
           call _cbenC(R1) args: 0, res: 0, upd: 0;
       cbenK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbenu_info" {
     block_cbenu_info:
         const _cbenu;
         const 18953;
         const 4294967326;
         const SbcpG_srt+632;
 },
 _cbenC() //  [R1]
         { []
         }
     {offset
       cbenC: // global
           I64[Sp + 72] = I64[R1 + 23];
           P64[Sp + 48] = P64[R1 + 7];
           P64[Sp + 32] = P64[R1 + 15];
           I64[Sp + 24] = I64[R1 + 31];
           I64[Sp] = I64[R1 + 39];
           I64[Sp - 8] = I64[R1 + 47];
           Sp = Sp - 16;
           call _cbemw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbenC_info" {
     block_cbenC_info:
         const _cbenC;
         const 19209;
         const 4294967326;
         const SbcpG_srt+632;
 },
 _cbenR() //  [R1]
         { []
         }
     {offset
       cbenR: // global
           I64[Sp - 16] = block_cbenW_info;
           _sbcow::P64 = P64[R1 + 7];
           _sbcox::P64 = P64[R1 + 15];
           R1 = P64[R1 + 31];
           P64[Sp - 8] = _sbcox::P64;
           P64[Sp] = _sbcow::P64;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbenR_info" {
     block_cbenR_info:
         const _cbenR;
         const 9;
         const 4294967326;
         const SbcpG_srt+632;
 },
 _cbenW() //  [R1]
         { []
         }
     {offset
       cbenW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbeoi; else goto cbeoh;
       cbeoi: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbeoh: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           _sbcny::P64 = P64[Sp + 64];
           P64[Hp] = _sbcny::P64;
           _sbcnb::P64 = P64[Sp + 48];
           _sbcnn::P64 = P64[Sp + 88];
           _sbcow::P64 = P64[Sp + 16];
           _sbcox::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_sbcnb::P64 + 8] = Hp - 15;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbcnb::P64);
           I64[Sp + 16] = block_cbeo2_info;
           R5 = _sbcnn::P64;
           R4 = _sbcny::P64;
           R3 = _sbcox::P64;
           R2 = _sbcow::P64;
           Sp = Sp + 16;
           call GHC.IO.Handle.Internals.$wstreamEncode_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbenW_info" {
     block_cbenW_info:
         const _cbenW;
         const 11;
         const 4294967326;
         const SbcpG_srt+632;
 },
 _cbeo2() //  [R1]
         { []
         }
     {offset
       cbeo2: // global
           I64[Sp] = block_cbeo4_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubep1; else goto cbeo5;
       ubep1: // global
           call _cbeo4(R1) args: 0, res: 0, upd: 0;
       cbeo5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbeo2_info" {
     block_cbeo2_info:
         const _cbeo2;
         const 18953;
         const 4294967326;
         const SbcpG_srt+632;
 },
 _cbeo4() //  [R1]
         { []
         }
     {offset
       cbeo4: // global
           _sbcn9::P64 = P64[Sp + 24];
           _sbcoK::P64 = P64[R1 + 7];
           _sbcoL::P64 = P64[R1 + 15];
           call MO_WriteBarrier();
           P64[_sbcn9::P64 + 8] = _sbcoK::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbcn9::P64);
           I64[Sp] = block_cbeoc_info;
           R1 = _sbcoL::P64;
           if (R1 & 7 != 0) goto ubep2; else goto cbeol;
       ubep2: // global
           call _cbeoc(R1) args: 0, res: 0, upd: 0;
       cbeol: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbeo4_info" {
     block_cbeo4_info:
         const _cbeo4;
         const 18953;
         const 4294967326;
         const SbcpG_srt+632;
 },
 _cbeoc() //  [R1]
         { []
         }
     {offset
       cbeoc: // global
           I64[Sp - 8] = I64[R1 + 47];
           I64[Sp] = I64[R1 + 39];
           I64[Sp + 24] = I64[R1 + 31];
           P64[Sp + 32] = P64[R1 + 15];
           P64[Sp + 48] = P64[R1 + 7];
           I64[Sp + 72] = I64[R1 + 23];
           Sp = Sp - 16;
           call _cbemw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbeoc_info" {
     block_cbeoc_info:
         const _cbeoc;
         const 19209;
         const 4294967326;
         const SbcpG_srt+632;
 },
 _cbemw() //  []
         { []
         }
     {offset
       cbemw: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbemB; else goto cbemA;
       cbemB: // global
           HpAlloc = 56;
           I64[Sp] = block_cbemw_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cbemA: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 64];
           P64[Hp - 32] = P64[Sp + 48];
           I64[Hp - 24] = I64[Sp + 88];
           I64[Hp - 16] = I64[Sp + 40];
           _sbcnF::I64 = I64[Sp + 16];
           I64[Hp - 8] = _sbcnF::I64;
           _sbcnG::I64 = I64[Sp + 8];
           I64[Hp] = _sbcnG::I64;
           _sbcmV::P64 = P64[Sp + 80];
           _sbcn4::P64 = P64[Sp + 24];
           _sbcn7::P64 = P64[Sp + 32];
           _sbcnc::P64 = P64[Sp + 56];
           call MO_WriteBarrier();
           P64[_sbcnc::P64 + 8] = Hp - 47;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbcnc::P64);
           if (_sbcnF::I64 == _sbcnG::I64) goto cbemP; else goto ubeoO;
       cbemP: // global
           I64[Sp + 48] = block_cbemM_info;
           R2 = _sbcn4::P64;
           I64[Sp + 16] = stg_ap_pppv_info;
           P64[Sp + 24] = _sbcn7::P64;
           P64[Sp + 32] = GHC.Types.False_closure+1;
           P64[Sp + 40] = _sbcmV::P64;
           Sp = Sp + 16;
           call GHC.IO.Device.ready_entry(R2) args: 40, res: 8, upd: 8;
       ubeoO: // global
           Sp = Sp + 96;
           call _cbemJ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbemw_info" {
     block_cbemw_info:
         const _cbemw;
         const 66763;
         const 4294967326;
         const SbcpG_srt+632;
 },
 _cbemM() //  [R1]
         { []
         }
     {offset
       cbemM: // global
           I64[Sp] = block_cbemO_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubeoW; else goto cbemR;
       ubeoW: // global
           call _cbemO(R1) args: 0, res: 0, upd: 0;
       cbemR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbemM_info" {
     block_cbemM_info:
         const _cbemM;
         const 1669;
         const 4294967326;
         const SbcpG_srt+632;
 },
 _cbemO() //  [R1]
         { []
         }
     {offset
       cbemO: // global
           if (R1 & 7 == 1) goto cbemX; else goto cben2;
       cbemX: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cben2: // global
           _sbcnQ::P64 = P64[P64[Sp + 8] + 8];
           I64[Sp] = block_cben0_info;
           R1 = _sbcnQ::P64;
           if (R1 & 7 != 0) goto ubeoX; else goto cben3;
       ubeoX: // global
           call _cben0(R1) args: 0, res: 0, upd: 0;
       cben3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbemO_info" {
     block_cbemO_info:
         const _cbemO;
         const 1669;
         const 4294967326;
         const SbcpG_srt+632;
 },
 _cben0() //  [R1]
         { []
         }
     {offset
       cben0: // global
           _sbcnT::P64 = P64[R1 + 7];
           _sbcnS::I64 = I64[R1 + 23];
           _sbcnW::I64 = I64[R1 + 39];
           if (_sbcnW::I64 == I64[R1 + 47]) goto cbenf; else goto cbenb;
       cbenf: // global
           I64[Sp] = block_cbene_info;
           R3 = R1;
           R2 = P64[Sp + 24];
           I64[Sp + 24] = _sbcnW::I64;
           P64[Sp + 32] = _sbcnT::P64;
           I64[Sp + 40] = _sbcnS::I64;
           call GHC.IO.Handle.Internals.hLookAhead_2_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
       cbenb: // global
           _sbcnc::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_sbcnc::P64 + 8] = R1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbcnc::P64);
           call MO_Touch(_sbcnT::P64);
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cben0_info" {
     block_cben0_info:
         const _cben0;
         const 1669;
         const 4294967326;
         const SbcpG_srt+632;
 },
 _cbene() //  [R1]
         { []
         }
     {offset
       cbene: // global
           _sbcnc::P64 = P64[Sp + 8];
           _sbcnS::I64 = I64[Sp + 40];
           _sbcnT::P64 = P64[Sp + 32];
           _sbcnW::I64 = I64[Sp + 24];
           call MO_WriteBarrier();
           P64[_sbcnc::P64 + 8] = R1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbcnc::P64);
           call MO_Touch(_sbcnT::P64);
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbene_info" {
     block_cbene_info:
         const _cbene;
         const 1413;
         const 30;
 },
 _cbeos() //  [R1]
         { []
         }
     {offset
       cbeos: // global
           _sbcnc::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_sbcnc::P64 + 8] = R1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbcnc::P64);
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbeos_info" {
     block_cbeos_info:
         const _cbeos;
         const 1925;
         const 30;
 },
 _cbemJ() //  []
         { []
         }
     {offset
       cbemJ: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ubep9_srtd" {
     ubep9_srtd:
         const SbcpG_srt+96;
         const 70;
         const 1;
         const 60;
 },
 GHC.IO.Handle.Text.hWaitForInput1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbep4: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbep8; else goto cbep7;
       cbep8: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Text.hWaitForInput1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbep7: // global
           I64[Hp - 40] = lvl34_sbcmX_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sbcoY_info;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 40;
           R4 = Hp - 14;
           R3 = R2;
           R2 = GHC.IO.Handle.Text.hWaitForInput2_closure;
           call GHC.IO.Handle.Internals.wantReadableHandle_1_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hWaitForInput1_info" {
     GHC.IO.Handle.Text.hWaitForInput1_info:
         const GHC.IO.Handle.Text.hWaitForInput1_entry;
         const 0;
         const 18446744069414584334;
         const 12884901903;
         const ubep9_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.711017089 UTC

[section ""data" . GHC.IO.Handle.Text.hWaitForInput_closure" {
     GHC.IO.Handle.Text.hWaitForInput_closure:
         const GHC.IO.Handle.Text.hWaitForInput_info;
         const 0;
 },
 GHC.IO.Handle.Text.hWaitForInput_entry() //  [R2, R3]
         { []
         }
     {offset
       cberS: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.Text.hWaitForInput1_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Text.hWaitForInput_info" {
     GHC.IO.Handle.Text.hWaitForInput_info:
         const GHC.IO.Handle.Text.hWaitForInput_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SbcpG_srt+640;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:11.715041213 UTC

[section ""relreadonly" . SbcpG_srt" {
     SbcpG_srt:
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
         const GHC.IO.Handle.Text.$willegalBufferSize_closure;
         const GHC.IO.Handle.Internals.$wwantWritableHandle'_closure;
         const GHC.IO.Handle.Text.$whPutChar_closure;
         const GHC.IO.Handle.Text.hPutChar2_closure;
         const GHC.IO.Handle.Text.hPutChar1_closure;
         const GHC.IO.Handle.Text.hPutStr7_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const GHC.IO.Exception.$fExceptionIOException4_closure;
         const GHC.IO.Handle.Text.hGetChar3_closure;
         const GHC.IO.Handle.Internals.hLookAhead_2_closure;
         const GHC.IO.Handle.Text.hGetChar2_closure;
         const GHC.IO.Handle.Internals.wantReadableHandle_1_closure;
         const GHC.IO.Handle.Text.hGetChar6_closure;
         const GHC.IO.Handle.Text.hGetChar1_closure;
         const GHC.IO.Exception.$fExceptionIOException_closure;
         const GHC.IO.Handle.Text.hGetContents3_closure;
         const $wlvl_rb6WI_closure;
         const lvl6_rb6WK_closure;
         const lvl7_rb6WL_closure;
         const lvl9_rb6WN_closure;
         const lvl10_rb6WO_closure;
         const lvl4_rb6WH_closure;
         const GHC.IO.Handle.Internals.hClose_help1_closure;
         const GHC.IO.Handle.Text.hGetContents2_closure;
         const GHC.IO.Handle.Internals.$wwithHandle'_closure;
         const GHC.IO.Handle.Internals.wantReadableHandle1_closure;
         const GHC.IO.Handle.Text.hGetContents1_closure;
         const GHC.IO.Handle.Internals.ioe_EOF1_closure;
         const GHC.IO.Handle.Text.$whGetLineBufferedLoop_closure;
         const GHC.IO.Handle.Text.hGetLine3_closure;
         const GHC.IO.Handle.Text.hGetLine2_closure;
         const GHC.IO.Handle.Text.hGetLine4_closure;
         const GHC.IO.Handle.Text.hGetLine1_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const GHC.IO.Handle.Text.$wbufReadNBEmpty_closure;
         const GHC.IO.Handle.Text.hGetBufNonBlocking2_closure;
         const GHC.IO.FD.$fBufferedIOFD8_closure;
         const GHC.IO.FD.$wreadRawBufferPtrNoBlock_closure;
         const lvl11_rb6WR_closure;
         const GHC.IO.Handle.Text.$whGetBufNonBlocking_closure;
         const GHC.IO.Handle.Text.hGetBufNonBlocking3_closure;
         const GHC.IO.Handle.Text.hGetBufNonBlocking1_closure;
         const GHC.IO.FD.$fBufferedIOFD12_closure;
         const GHC.IO.FD.$wreadRawBufferPtr_closure;
         const GHC.IO.Handle.Text.$whGetBufSome_closure;
         const lvl13_rb6WT_closure;
         const GHC.IO.Handle.Text.hGetBufSome1_closure;
         const GHC.IO.Handle.Text.hGetBuf2_closure;
         const GHC.IO.Handle.Text.hGetBuf4_closure;
         const GHC.IO.Handle.Text.$whGetBuf_closure;
         const GHC.IO.Handle.Text.hGetBuf5_closure;
         const GHC.IO.Handle.Text.hGetBuf1_closure;
         const GHC.Err.error_closure;
         const lvl24_rb6X4_closure;
         const lvl29_rb6X9_closure;
         const GHC.IO.FD.$w$cwriteNonBlocking_closure;
         const GHC.IO.FD.$wfdWrite_closure;
         const GHC.IO.Handle.Text.$wbufWrite_closure;
         const lvl26_rb6X6_closure;
         const lvl30_rb6Xa_closure;
         const GHC.IO.Handle.Text.$whPutBuf'_closure;
         const GHC.IO.Handle.Text.hPutBuf3_closure;
         const GHC.IO.Handle.Text.hPutBuf2_closure;
         const GHC.IO.Handle.Text.hPutBufNonBlocking1_closure;
         const GHC.IO.Handle.Text.hPutBuf1_closure;
         const lvl32_rb6Xc_closure;
         const GHC.IO.Handle.Internals.wantWritableHandle1_closure;
         const GHC.IO.Handle.Text.$wwriteBlocks_closure;
         const lvl2_rb6WE_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
         const GHC.IO.Handle.Text.hPutStr2_closure;
         const GHC.IO.Handle.Text.hPutStr3_closure;
         const GHC.IO.Handle.Text.hPutStr1_closure;
         const GHC.IO.Handle.Text.hPutStr5_closure;
         const GHC.IO.Handle.Text.$whPutChar_closure;
         const GHC.IO.Handle.Text.hPutStr'_closure;
         const GHC.IO.Handle.Internals.decodeByteBuf2_closure;
         const GHC.IO.Handle.Internals.hLookAhead_2_closure;
         const GHC.IO.Handle.Text.hWaitForInput1_closure;
         const GHC.IO.Handle.Text.hWaitForInput2_closure;
 }]

