
==================== Tidy Core ====================
2018-03-16 16:06:14.069118783 UTC

Result size of Tidy Core
  = {terms: 419, types: 603, coercions: 49, joins: 5/5}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported2
  = "FileLockingNotSupported"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported1 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported1
  = unpackCString#
      GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported2

-- RHS size: {terms: 9, types: 5, coercions: 0, joins: 0/0}
GHC.IO.Handle.Lock.$fShowFileLockingNotSupported_$cshowsPrec
  :: Int -> FileLockingNotSupported -> ShowS
[GblId,
 Arity=3,
 Str=<L,A><S,1*H><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ _ [Occ=Dead]
                 (ds1_dbi9K [Occ=Once!] :: FileLockingNotSupported)
                 (eta_B1 [Occ=Once] :: String) ->
                 case ds1_dbi9K of { FileLockingNotSupported ->
                 augment
                   @ Char
                   (\ (@ b_i7JbU)
                      (c_i7JbV [Occ=Once, OS=OneShot] :: Char -> b_i7JbU -> b_i7JbU)
                      (n_i7JbW [Occ=Once, OS=OneShot] :: b_i7JbU) ->
                      foldr
                        @ Char
                        @ b_i7JbU
                        c_i7JbV
                        n_i7JbW
                        GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported1)
                   eta_B1
                 }}]
GHC.IO.Handle.Lock.$fShowFileLockingNotSupported_$cshowsPrec
  = \ _ [Occ=Dead]
      (ds1_dbi9K :: FileLockingNotSupported)
      (eta_B1 :: String) ->
      case ds1_dbi9K of { FileLockingNotSupported ->
      ++
        @ Char
        GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported1
        eta_B1
      }

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$cshow
  :: FileLockingNotSupported -> String
[GblId,
 Arity=1,
 Str=<S,1*H>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_i7Jay [Occ=Once!] :: FileLockingNotSupported) ->
                 case x_i7Jay of { FileLockingNotSupported ->
                 GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported1
                 }}]
GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$cshow
  = \ (x_i7Jay :: FileLockingNotSupported) ->
      case x_i7Jay of { FileLockingNotSupported ->
      GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported1
      }

-- RHS size: {terms: 8, types: 4, coercions: 0, joins: 0/0}
GHC.IO.Handle.Lock.$fShowFileLockingNotSupported1
  :: FileLockingNotSupported -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*H><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dbi9K [Occ=Once!] :: FileLockingNotSupported)
                 (eta_B1 [Occ=Once] :: String) ->
                 case ds_dbi9K of { FileLockingNotSupported ->
                 augment
                   @ Char
                   (\ (@ b_i7JbU)
                      (c_i7JbV [Occ=Once, OS=OneShot] :: Char -> b_i7JbU -> b_i7JbU)
                      (n_i7JbW [Occ=Once, OS=OneShot] :: b_i7JbU) ->
                      foldr
                        @ Char
                        @ b_i7JbU
                        c_i7JbV
                        n_i7JbW
                        GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported1)
                   eta_B1
                 }}]
GHC.IO.Handle.Lock.$fShowFileLockingNotSupported1
  = \ (ds_dbi9K :: FileLockingNotSupported) (eta_B1 :: String) ->
      case ds_dbi9K of { FileLockingNotSupported ->
      ++
        @ Char
        GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported1
        eta_B1
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.IO.Handle.Lock.$fShowFileLockingNotSupported_$cshowList
  :: [FileLockingNotSupported] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7JaB [Occ=Once] :: [FileLockingNotSupported])
                 (s_i7JaC [Occ=Once] :: String) ->
                 showList__
                   @ FileLockingNotSupported
                   GHC.IO.Handle.Lock.$fShowFileLockingNotSupported1
                   ls_i7JaB
                   s_i7JaC}]
GHC.IO.Handle.Lock.$fShowFileLockingNotSupported_$cshowList
  = \ (ls_i7JaB :: [FileLockingNotSupported]) (s_i7JaC :: String) ->
      showList__
        @ FileLockingNotSupported
        GHC.IO.Handle.Lock.$fShowFileLockingNotSupported1
        ls_i7JaB
        s_i7JaC

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.IO.Handle.Lock.$fShowFileLockingNotSupported [InlPrag=NOUSERINLINE CONLIKE]
  :: Show FileLockingNotSupported
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: FileLockingNotSupported
                       GHC.IO.Handle.Lock.$fShowFileLockingNotSupported_$cshowsPrec
                       GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$cshow
                       GHC.IO.Handle.Lock.$fShowFileLockingNotSupported_$cshowList]
GHC.IO.Handle.Lock.$fShowFileLockingNotSupported
  = GHC.Show.C:Show
      @ FileLockingNotSupported
      GHC.IO.Handle.Lock.$fShowFileLockingNotSupported_$cshowsPrec
      GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$cshow
      GHC.IO.Handle.Lock.$fShowFileLockingNotSupported_$cshowList

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Lock.$trModule4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.Lock.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Lock.$trModule3 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Lock.$trModule3
  = GHC.Types.TrNameS GHC.IO.Handle.Lock.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Lock.$trModule2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
GHC.IO.Handle.Lock.$trModule2 = "GHC.IO.Handle.Lock"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Lock.$trModule1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Lock.$trModule1
  = GHC.Types.TrNameS GHC.IO.Handle.Lock.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Lock.$trModule :: Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Handle.Lock.$trModule
  = GHC.Types.Module
      GHC.IO.Handle.Lock.$trModule3 GHC.IO.Handle.Lock.$trModule1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported4 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported4
  = GHC.Types.TrNameS
      GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Lock.$tcFileLockingNotSupported :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Handle.Lock.$tcFileLockingNotSupported
  = GHC.Types.TyCon
      2716065848555532007##
      12251424812302631774##
      GHC.IO.Handle.Lock.$trModule
      GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported4
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.IO.Handle.Lock.$tc'FileLockingNotSupported1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
GHC.IO.Handle.Lock.$tc'FileLockingNotSupported1
  = GHC.Types.KindRepTyConApp
      GHC.IO.Handle.Lock.$tcFileLockingNotSupported
      (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Lock.$tc'FileLockingNotSupported3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
GHC.IO.Handle.Lock.$tc'FileLockingNotSupported3
  = "'FileLockingNotSupported"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Lock.$tc'FileLockingNotSupported2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Lock.$tc'FileLockingNotSupported2
  = GHC.Types.TrNameS GHC.IO.Handle.Lock.$tc'FileLockingNotSupported3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Lock.$tc'FileLockingNotSupported :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Handle.Lock.$tc'FileLockingNotSupported
  = GHC.Types.TyCon
      13975601321420314475##
      8398323512000399582##
      GHC.IO.Handle.Lock.$trModule
      GHC.IO.Handle.Lock.$tc'FileLockingNotSupported2
      0#
      GHC.IO.Handle.Lock.$tc'FileLockingNotSupported1

-- RHS size: {terms: 16, types: 33, coercions: 0, joins: 0/0}
GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported3
  :: Data.Typeable.Internal.TypeRep FileLockingNotSupported
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 100 60}]
GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported3
  = case Data.Typeable.Internal.$wmkTrCon
           @ *
           @ FileLockingNotSupported
           2716065848555532007##
           12251424812302631774##
           GHC.IO.Handle.Lock.$trModule
           GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported4
           0#
           GHC.Types.krep$*
           (GHC.Types.[] @ Data.Typeable.Internal.SomeTypeRep)
    of
    { (# ww8_i8htw, ww9_i8htx, ww10_i8hty, ww11_i8htz, ww12_i8htA #) ->
    Data.Typeable.Internal.TrTyCon
      @ *
      @ FileLockingNotSupported
      ww8_i8htw
      ww9_i8htx
      ww10_i8hty
      ww11_i8htz
      ww12_i8htA
    }

-- RHS size: {terms: 14, types: 17, coercions: 9, joins: 0/0}
GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$cfromException
  :: SomeException -> Maybe FileLockingNotSupported
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 90 30}]
GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$cfromException
  = \ (ds_ibi9O :: SomeException) ->
      case ds_ibi9O of
      { SomeException @ e1_ibi9R $dException1_ibi9S e2_ibi9T ->
      case Data.Typeable.Internal.sameTypeRep
             @ *
             @ *
             @ e1_ibi9R
             @ FileLockingNotSupported
             ((GHC.Exception.$p1Exception @ e1_ibi9R $dException1_ibi9S)
              `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <e1_ibi9R>_N
                      :: (Data.Typeable.Internal.Typeable e1_ibi9R :: Constraint)
                         ~R# (Data.Typeable.Internal.TypeRep e1_ibi9R :: *)))
             GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported3
      of {
        False -> GHC.Base.Nothing @ FileLockingNotSupported;
        True ->
          (GHC.Base.Just @ e1_ibi9R e2_ibi9T)
          `cast` ((Maybe
                     (UnsafeCo representational e1_ibi9R FileLockingNotSupported))_R
                  :: (Maybe e1_ibi9R :: *) ~R# (Maybe FileLockingNotSupported :: *))
      }
      }

Rec {
-- RHS size: {terms: 6, types: 1, coercions: 5, joins: 0/0}
GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported [InlPrag=NOUSERINLINE CONLIKE]
  :: Exception FileLockingNotSupported
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Exception.C:Exception TYPE: FileLockingNotSupported
                                 GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported3
                                 `cast` (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <FileLockingNotSupported>_N
                                         :: (Data.Typeable.Internal.TypeRep
                                               FileLockingNotSupported :: *)
                                            ~R# (Data.Typeable.Internal.Typeable
                                                   FileLockingNotSupported :: Constraint))
                                 GHC.IO.Handle.Lock.$fShowFileLockingNotSupported
                                 GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$ctoException
                                 GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$cfromException
                                 GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$cshow]
GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported
  = GHC.Exception.C:Exception
      @ FileLockingNotSupported
      (GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported3
       `cast` (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <FileLockingNotSupported>_N
               :: (Data.Typeable.Internal.TypeRep FileLockingNotSupported :: *)
                  ~R# (Data.Typeable.Internal.Typeable
                         FileLockingNotSupported :: Constraint)))
      GHC.IO.Handle.Lock.$fShowFileLockingNotSupported
      GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$ctoException
      GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$cfromException
      GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$cshow

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$ctoException [Occ=LoopBreaker]
  :: FileLockingNotSupported -> SomeException
[GblId, Arity=1, Unf=OtherCon []]
GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported_$ctoException
  = GHC.Exception.SomeException
      @ FileLockingNotSupported
      GHC.IO.Handle.Lock.$fExceptionFileLockingNotSupported
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Lock.$tcLockMode2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Handle.Lock.$tcLockMode2 = "LockMode"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Lock.$tcLockMode1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Lock.$tcLockMode1
  = GHC.Types.TrNameS GHC.IO.Handle.Lock.$tcLockMode2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Lock.$tcLockMode :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Handle.Lock.$tcLockMode
  = GHC.Types.TyCon
      18068849831825836849##
      1974453150269185476##
      GHC.IO.Handle.Lock.$trModule
      GHC.IO.Handle.Lock.$tcLockMode1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.IO.Handle.Lock.$tc'ExclusiveLock1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
GHC.IO.Handle.Lock.$tc'ExclusiveLock1
  = GHC.Types.KindRepTyConApp
      GHC.IO.Handle.Lock.$tcLockMode (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Lock.$tc'SharedLock2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Handle.Lock.$tc'SharedLock2 = "'SharedLock"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Lock.$tc'SharedLock1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Lock.$tc'SharedLock1
  = GHC.Types.TrNameS GHC.IO.Handle.Lock.$tc'SharedLock2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Lock.$tc'SharedLock :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Handle.Lock.$tc'SharedLock
  = GHC.Types.TyCon
      9660990538910196995##
      16983901031857135990##
      GHC.IO.Handle.Lock.$trModule
      GHC.IO.Handle.Lock.$tc'SharedLock1
      0#
      GHC.IO.Handle.Lock.$tc'ExclusiveLock1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Lock.$tc'ExclusiveLock3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Handle.Lock.$tc'ExclusiveLock3 = "'ExclusiveLock"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Lock.$tc'ExclusiveLock2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.Lock.$tc'ExclusiveLock2
  = GHC.Types.TrNameS GHC.IO.Handle.Lock.$tc'ExclusiveLock3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Lock.$tc'ExclusiveLock :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Handle.Lock.$tc'ExclusiveLock
  = GHC.Types.TyCon
      8544818512469904331##
      16785548070058023905##
      GHC.IO.Handle.Lock.$trModule
      GHC.IO.Handle.Lock.$tc'ExclusiveLock2
      0#
      GHC.IO.Handle.Lock.$tc'ExclusiveLock1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_rbimF :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl_rbimF = "flock"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl1_rbimG :: [Char]
[GblId]
lvl1_rbimG = unpackCString# lvl_rbimF

-- RHS size: {terms: 7, types: 4, coercions: 0, joins: 0/0}
GHC.IO.Handle.Lock.hUnlock2
  :: State# RealWorld -> Int# -> (# State# RealWorld, CInt #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []]
GHC.IO.Handle.Lock.hUnlock2
  = \ (ds2_iao5m :: State# RealWorld) (ds3_iao5n :: Int#) ->
      Foreign.C.Error.$wlvl
        @ CInt lvl1_rbimG (narrow32Int# ds3_iao5n) ds2_iao5m

-- RHS size: {terms: 53, types: 141, coercions: 8, joins: 0/0}
GHC.IO.Handle.Lock.hUnlock1
  :: Handle -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=2,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [50 0] 234 30}]
GHC.IO.Handle.Lock.hUnlock1
  = \ (h_abi3p :: Handle) (s_i7IAv :: State# RealWorld) ->
      case h_abi3p of wild_ibiaM {
        FileHandle ds_ibiaO dt_ibiaP ->
          case readMVar# @ RealWorld @ Handle__ dt_ibiaP s_i7IAv of
          { (# ipv_ibiaT, ipv1_ibiaU #) ->
          case ipv1_ibiaU of
          { Handle__ @ dev_ibiaY @ enc_state_ibiaZ @ dec_state_ibib0
                     $dIODevice_ibib1 $dBufferedIO_ibib2 $dTypeable_ibib3 ds2_ibib4
                     ds3_ibib5 dt1_ibib6 ds4_ibib7 dt2_ibib8 dt3_ibib9 dt4_ibiba
                     ds5_ibibb ds6_ibibc ds7_ibibd ds8_ibibe ds9_ibibf ds10_ibibg ->
          case ds2_ibib4
               `cast` (UnsafeCo representational dev_ibiaY FD
                       :: (dev_ibiaY :: *) ~R# (FD :: *))
          of
          { FD dt7_sbikO dt8_sbikP ->
          case Data.Typeable.Internal.sameTypeRep
                 @ *
                 @ *
                 @ dev_ibiaY
                 @ FD
                 ($dTypeable_ibib3
                  `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <dev_ibiaY>_N
                          :: (Data.Typeable.Internal.Typeable dev_ibiaY :: Constraint)
                             ~R# (Data.Typeable.Internal.TypeRep dev_ibiaY :: *)))
                 GHC.IO.Handle.FD.fdToHandle12
          of {
            False ->
              case GHC.IO.Handle.FD.handleToFd3 wild_ibiaM ipv_ibiaT
              of wild4_00 {
              };
            True ->
              case {__pkg_ccall_GC base-4.11.0.0 Int#
                              -> Int# -> State# RealWorld -> (# State# RealWorld, Int# #)}_dbiaa
                     dt7_sbikO 8# ipv_ibiaT
              of
              { (# ds11_dbia8, ds12_dbia7 #) ->
              case narrow32Int# ds12_dbia7 of {
                __DEFAULT -> (# ds11_dbia8, GHC.Tuple.() #);
                -1# ->
                  case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_iao5h
                         ds11_dbia8
                  of
                  { (# ds13_iao5m, ds14_iao5n #) ->
                  case GHC.IO.Handle.Lock.hUnlock2 ds13_iao5m ds14_iao5n
                  of wild7_00 {
                  }
                  }
              }
              }
          }
          }
          }
          };
        DuplexHandle ds_ibibp dt_ibibq dt1_ibibr ->
          case GHC.IO.Handle.FD.handleToFd2 wild_ibiaM s_i7IAv of wild1_00 {
          }
      }

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
hUnlock :: Handle -> IO ()
[GblId,
 Arity=2,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.Lock.hUnlock1
               `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (Handle -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (Handle -> IO () :: *))}]
hUnlock
  = GHC.IO.Handle.Lock.hUnlock1
    `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (Handle -> State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# (Handle -> IO () :: *))

-- RHS size: {terms: 13, types: 9, coercions: 0, joins: 0/0}
GHC.IO.Handle.Lock.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: Int#
     -> String
     -> Handle
     -> State# RealWorld
     -> (# State# RealWorld, Bool #)
[GblId, Arity=4, Str=<B,U><B,U><B,U><B,U>x, Unf=OtherCon []]
GHC.IO.Handle.Lock.$wlvl
  = \ (ww_sbijt :: Int#)
      (w_sbijo :: String)
      (w1_sbijp :: Handle)
      (w2_sbijq :: State# RealWorld) ->
      raiseIO#
        @ SomeException
        @ Bool
        (GHC.IO.Exception.$fExceptionIOException_$ctoException
           (Foreign.C.Error.$werrnoToIOError
              w_sbijo
              ww_sbijt
              (GHC.Base.Just @ Handle w1_sbijp)
              (GHC.Base.Nothing @ String)))
        w2_sbijq

-- RHS size: {terms: 129, types: 215, coercions: 8, joins: 5/5}
GHC.IO.Handle.Lock.hLock4
  :: Handle
     -> String
     -> LockMode
     -> Bool
     -> State# RealWorld
     -> (# State# RealWorld, Bool #)
[GblId,
 Arity=5,
 Str=<S,1*U><L,U><S,U><S,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [50 0 34 91 0] 447 0}]
GHC.IO.Handle.Lock.hLock4
  = \ (h_abi3g :: Handle)
      (ctx_abi3h :: String)
      (mode_abi3i :: LockMode)
      (block_abi3j :: Bool)
      (eta_B1 :: State# RealWorld) ->
      case h_abi3g of wild_ibiaM {
        FileHandle ds_ibiaO dt_ibiaP ->
          case readMVar# @ RealWorld @ Handle__ dt_ibiaP eta_B1 of
          { (# ipv_ibiaT, ipv1_ibiaU #) ->
          case ipv1_ibiaU of
          { Handle__ @ dev_ibiaY @ enc_state_ibiaZ @ dec_state_ibib0
                     $dIODevice_ibib1 $dBufferedIO_ibib2 $dTypeable_ibib3 ds2_ibib4
                     ds3_ibib5 dt1_ibib6 ds4_ibib7 dt2_ibib8 dt3_ibib9 dt4_ibiba
                     ds5_ibibb ds6_ibibc ds7_ibibd ds8_ibibe ds9_ibibf ds10_ibibg ->
          case ds2_ibib4
               `cast` (UnsafeCo representational dev_ibiaY FD
                       :: (dev_ibiaY :: *) ~R# (FD :: *))
          of
          { FD dt7_sbikS dt8_sbikT ->
          case Data.Typeable.Internal.sameTypeRep
                 @ *
                 @ *
                 @ dev_ibiaY
                 @ FD
                 ($dTypeable_ibib3
                  `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <dev_ibiaY>_N
                          :: (Data.Typeable.Internal.Typeable dev_ibiaY :: Constraint)
                             ~R# (Data.Typeable.Internal.TypeRep dev_ibiaY :: *)))
                 GHC.IO.Handle.FD.fdToHandle12
          of {
            False ->
              case GHC.IO.Handle.FD.handleToFd3 wild_ibiaM ipv_ibiaT
              of wild4_00 {
              };
            True ->
              join {
                exit_X1E [Dmd=<L,C(C1(U(U,U)))>]
                  :: State# RealWorld -> Int# -> (# State# RealWorld, Bool #)
                [LclId[JoinId(2)], Arity=2, Str=<B,U><B,U>x]
                exit_X1E (ds11_iaobM [OS=OneShot] :: State# RealWorld)
                         (wild4_iaoc3 [OS=OneShot]
                            :: Int#
                            Unf=OtherCon [])
                  = GHC.IO.Handle.Lock.$wlvl
                      wild4_iaoc3 ctx_abi3h wild_ibiaM ds11_iaobM } in
              join {
                exit1_X1F [Dmd=<L,C(C1(U(U,U)))>]
                  :: State# RealWorld -> Int# -> (# State# RealWorld, Bool #)
                [LclId[JoinId(2)], Arity=2, Str=<B,U><B,U>x]
                exit1_X1F (ds11_iaobM [OS=OneShot] :: State# RealWorld)
                          (wild4_iaoc3 [OS=OneShot]
                             :: Int#
                             Unf=OtherCon [])
                  = GHC.IO.Handle.Lock.$wlvl
                      wild4_iaoc3 ctx_abi3h wild_ibiaM ds11_iaobM } in
              joinrec {
                x_sbido [Occ=LoopBreaker]
                  :: State# RealWorld -> (# State# RealWorld, Bool #)
                [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
                x_sbido (s_X7IBW :: State# RealWorld)
                  = join {
                      $j_sbieM [Dmd=<C(S),1*C1(U(U,U))>]
                        :: Int# -> (# State# RealWorld, Bool #)
                      [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
                      $j_sbieM (x#_i9h2C [OS=OneShot] :: Int#)
                        = join {
                            $j1_sbieK [Dmd=<C(S),1*C1(U(U,U))>]
                              :: Int# -> (# State# RealWorld, Bool #)
                            [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
                            $j1_sbieK (y#_i9h2G [OS=OneShot] :: Int#)
                              = case {__pkg_ccall_GC base-4.11.0.0 Int#
                              -> Int# -> State# RealWorld -> (# State# RealWorld, Int# #)}_dbiaa
                                       dt7_sbikS
                                       (word2Int# (or# (int2Word# x#_i9h2C) (int2Word# y#_i9h2G)))
                                       s_X7IBW
                                of
                                { (# ds11_dbia8, ds12_dbia7 #) ->
                                case narrow32Int# ds12_dbia7 of {
                                  __DEFAULT ->
                                    case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_iaobJ
                                           ds11_dbia8
                                    of
                                    { (# ds13_iaobM, ds14_iaobN #) ->
                                    case block_abi3j of {
                                      False ->
                                        case narrow32Int# ds14_iaobN of wild8_iaoc3 {
                                          __DEFAULT -> jump exit_X1E ds13_iaobM wild8_iaoc3;
                                          4# -> jump x_sbido ds13_iaobM;
                                          11# -> (# ds13_iaobM, GHC.Types.False #);
                                          13# -> (# ds13_iaobM, GHC.Types.False #)
                                        };
                                      True ->
                                        case narrow32Int# ds14_iaobN of wild8_iaoc3 {
                                          __DEFAULT -> jump exit1_X1F ds13_iaobM wild8_iaoc3;
                                          4# -> jump x_sbido ds13_iaobM
                                        }
                                    }
                                    };
                                  0# -> (# ds11_dbia8, GHC.Types.True #)
                                }
                                } } in
                          case block_abi3j of {
                            False -> jump $j1_sbieK 4#;
                            True -> jump $j1_sbieK 0#
                          } } in
                    case mode_abi3i of {
                      SharedLock -> jump $j_sbieM 1#;
                      ExclusiveLock -> jump $j_sbieM 2#
                    }; } in
              jump x_sbido ipv_ibiaT
          }
          }
          }
          };
        DuplexHandle ds_ibibp dt_ibibq dt1_ibibr ->
          case GHC.IO.Handle.FD.handleToFd2 wild_ibiaM eta_B1 of wild1_00 { }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Lock.hTryLock3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Handle.Lock.hTryLock3 = "hTryLock"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Lock.hTryLock2 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.Lock.hTryLock2
  = unpackCString# GHC.IO.Handle.Lock.hTryLock3

-- RHS size: {terms: 7, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Handle.Lock.hTryLock1
  :: Handle
     -> LockMode -> State# RealWorld -> (# State# RealWorld, Bool #)
[GblId,
 Arity=3,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (h_abi3e [Occ=Once] :: Handle)
                 (mode_abi3f [Occ=Once] :: LockMode) ->
                 GHC.IO.Handle.Lock.hLock4
                   h_abi3e GHC.IO.Handle.Lock.hTryLock2 mode_abi3f GHC.Types.False}]
GHC.IO.Handle.Lock.hTryLock1
  = \ (h_abi3e :: Handle) (mode_abi3f :: LockMode) ->
      GHC.IO.Handle.Lock.hLock4
        h_abi3e GHC.IO.Handle.Lock.hTryLock2 mode_abi3f GHC.Types.False

-- RHS size: {terms: 1, types: 0, coercions: 7, joins: 0/0}
hTryLock :: Handle -> LockMode -> IO Bool
[GblId,
 Arity=3,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.Lock.hTryLock1
               `cast` (<Handle>_R
                       ->_R <LockMode>_R
                       ->_R Sym (GHC.Types.N:IO[0] <Bool>_R)
                       :: (Handle
                           -> LockMode
                           -> State# RealWorld
                           -> (# State# RealWorld, Bool #) :: *)
                          ~R# (Handle -> LockMode -> IO Bool :: *))}]
hTryLock
  = GHC.IO.Handle.Lock.hTryLock1
    `cast` (<Handle>_R
            ->_R <LockMode>_R
            ->_R Sym (GHC.Types.N:IO[0] <Bool>_R)
            :: (Handle
                -> LockMode
                -> State# RealWorld
                -> (# State# RealWorld, Bool #) :: *)
               ~R# (Handle -> LockMode -> IO Bool :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Lock.hLock3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Handle.Lock.hLock3 = "hLock"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.Lock.hLock2 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.Lock.hLock2
  = unpackCString# GHC.IO.Handle.Lock.hLock3

-- RHS size: {terms: 14, types: 22, coercions: 0, joins: 0/0}
GHC.IO.Handle.Lock.hLock1
  :: Handle
     -> LockMode -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=3,
 Str=<S,1*U><S,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (h_abi3c [Occ=Once] :: Handle)
                 (mode_abi3d [Occ=Once] :: LockMode)
                 (eta1_i928W [Occ=Once] :: State# RealWorld) ->
                 case GHC.IO.Handle.Lock.hLock4
                        h_abi3c
                        GHC.IO.Handle.Lock.hLock2
                        mode_abi3d
                        GHC.Types.True
                        eta1_i928W
                 of
                 { (# ipv_i928Z [Occ=Once], _ [Occ=Dead] #) ->
                 (# ipv_i928Z, GHC.Tuple.() #)
                 }}]
GHC.IO.Handle.Lock.hLock1
  = \ (h_abi3c :: Handle)
      (mode_abi3d :: LockMode)
      (eta1_i928W :: State# RealWorld) ->
      case GHC.IO.Handle.Lock.hLock4
             h_abi3c
             GHC.IO.Handle.Lock.hLock2
             mode_abi3d
             GHC.Types.True
             eta1_i928W
      of
      { (# ipv_i928Z, ipv1_i9290 #) ->
      (# ipv_i928Z, GHC.Tuple.() #)
      }

-- RHS size: {terms: 1, types: 0, coercions: 7, joins: 0/0}
hLock :: Handle -> LockMode -> IO ()
[GblId,
 Arity=3,
 Str=<S,1*U><S,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.Lock.hLock1
               `cast` (<Handle>_R
                       ->_R <LockMode>_R
                       ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (Handle
                           -> LockMode -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (Handle -> LockMode -> IO () :: *))}]
hLock
  = GHC.IO.Handle.Lock.hLock1
    `cast` (<Handle>_R
            ->_R <LockMode>_R
            ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (Handle
                -> LockMode -> State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# (Handle -> LockMode -> IO () :: *))


